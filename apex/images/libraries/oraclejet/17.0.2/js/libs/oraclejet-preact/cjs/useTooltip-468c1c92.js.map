{"version":3,"file":"useTooltip-468c1c92.js","sources":["../../src/hooks/UNSAFE_useTooltip/useTooltip.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useState, useCallback } from 'preact/hooks';\nimport { useTooltipControlled } from './useTooltipControlled';\nimport { TestIdProps } from '../UNSAFE_useTestId';\n\nconst defaultOffset = 8; // Redwood tooltip has a default offset of 8 pixels\n\ntype tooltipParameters = Parameters<typeof useTooltipControlled>[0];\n\ntype Props = {\n  text?: string;\n  position?: tooltipParameters['position'];\n  isDisabled?: boolean;\n  anchor?: tooltipParameters['anchor'];\n  offset?: { mainAxis?: number; crossAxis?: number };\n  variant?: tooltipParameters['variant'];\n} & TestIdProps;\n\n/**\n * A hook with tooltip implementation.\n * Returns event handlers that can enhance the target element with a tooltip displayed\n * on hover and focus.\n *\n * @param text tooltip text\n * @param position tooltip placement relative to the target element\n * @param isDisabled determines if the tooltip is disabled\n * @param anchor determines if the target is an element or the pointer\n * @param offset offset from the placement\n * @param variant specifies if the rendered popup should have 'tooltip' or 'datatip' look and behavior\n * @returns an object with the 'tooltipContent' and 'tooltipProps' properties.\n */\nexport const useTooltip = ({\n  text,\n  position = 'bottom',\n  isDisabled = false,\n  anchor = { x: 'element', y: 'element' },\n  offset,\n  variant = 'tooltip',\n  testId\n}: Props): ReturnType<typeof useTooltipControlled> => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const disabled = isDisabled || !text;\n  const newOffset = offset ? offset : { mainAxis: defaultOffset, crossAxis: 0 };\n\n  const onToggleHandler = useCallback((details: { value: boolean }) => {\n    setIsOpen(details.value);\n  }, []);\n\n  const { tooltipContent, tooltipProps } = useTooltipControlled({\n    text,\n    isOpen,\n    position,\n    isDisabled: disabled,\n    offset: newOffset,\n    anchor,\n    variant,\n    onToggle: onToggleHandler,\n    testId\n  });\n\n  return {\n    tooltipContent,\n    tooltipProps\n  };\n};\n"],"names":["useState","useCallback","useTooltipControlled"],"mappings":";;;;;;AAAA;;;;;;AAMG;AAMH,MAAM,aAAa,GAAG,CAAC,CAAC;AAaxB;;;;;;;;;;;;AAYG;AACU,MAAA,UAAU,GAAG,CAAC,EACzB,IAAI,EACJ,QAAQ,GAAG,QAAQ,EACnB,UAAU,GAAG,KAAK,EAClB,MAAM,GAAG,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,SAAS,EAAE,EACvC,MAAM,EACN,OAAO,GAAG,SAAS,EACnB,MAAM,EACA,KAA6C;IACnD,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAGA,cAAQ,CAAU,KAAK,CAAC,CAAC;AACrD,IAAA,MAAM,QAAQ,GAAG,UAAU,IAAI,CAAC,IAAI,CAAC;AACrC,IAAA,MAAM,SAAS,GAAG,MAAM,GAAG,MAAM,GAAG,EAAE,QAAQ,EAAE,aAAa,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC;AAE9E,IAAA,MAAM,eAAe,GAAGC,iBAAW,CAAC,CAAC,OAA2B,KAAI;AAClE,QAAA,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;KAC1B,EAAE,EAAE,CAAC,CAAC;AAEP,IAAA,MAAM,EAAE,cAAc,EAAE,YAAY,EAAE,GAAGC,yCAAoB,CAAC;QAC5D,IAAI;QACJ,MAAM;QACN,QAAQ;AACR,QAAA,UAAU,EAAE,QAAQ;AACpB,QAAA,MAAM,EAAE,SAAS;QACjB,MAAM;QACN,OAAO;AACP,QAAA,QAAQ,EAAE,eAAe;QACzB,MAAM;AACP,KAAA,CAAC,CAAC;IAEH,OAAO;QACL,cAAc;QACd,YAAY;KACb,CAAC;AACJ;;;;"}
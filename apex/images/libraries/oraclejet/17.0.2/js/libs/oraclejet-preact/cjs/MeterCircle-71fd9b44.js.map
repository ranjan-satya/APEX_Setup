{"version":3,"file":"MeterCircle-71fd9b44.js","sources":["../../src/UNSAFE_MeterCircle/CircularReferenceLine.tsx","../../src/UNSAFE_MeterCircle/circleMeterUtils.ts","../../src/UNSAFE_MeterCircle/layoutUtils.ts","../../src/UNSAFE_MeterCircle/FitMeterCircle.tsx","../../src/UNSAFE_MeterCircle/SizedMeterCircle.tsx","../../src/UNSAFE_MeterCircle/MeterCircle.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { getCenterCoord } from '../utils/PRIVATE_meterUtils';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { VisThresholdsColors, getVisThresholdColor } from '../utils/UNSAFE_meterUtils';\nimport { styles } from './themes/MeterCircleStyles.css';\nimport { classNames } from '../utils/UNSAFE_classNames';\n\ntype getCenterCoordParamType = Parameters<typeof getCenterCoord>;\n\nexport type CircularReferenceLineProps = {\n  color?: ColorProps['color'] | VisThresholdsColors;\n  angle: number;\n  radius: string;\n  length: string;\n  section: getCenterCoordParamType[0];\n};\n\nexport function CircularReferenceLine({\n  color,\n  angle,\n  radius,\n  length,\n  section = 'full'\n}: CircularReferenceLineProps) {\n  const centerCoord = getCenterCoord(section);\n  const yOffset = `calc(${centerCoord.y * 100}% - ((${Math.sin(\n    (angle * 2 * Math.PI) / 360\n  )} * ${radius})))`;\n  const xOffset = `calc(${centerCoord.x * 100}%  + ((${Math.cos(\n    (angle * 2 * Math.PI) / 360\n  )} * ${radius})))`;\n  return (\n    <div\n      class={classNames([\n        styles.referenceBaseLineStyle,\n        color ? undefined : styles.referenceBorderStyle\n      ])}\n      style={{\n        left: xOffset,\n        top: yOffset,\n        width: `calc(${length})`,\n        transform: `translate(0, -1px) rotate(${360 - angle}deg)`,\n        backgroundColor: color ? getVisThresholdColor(color) : undefined\n      }}></div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { Ref } from 'preact/hooks';\nimport {\n  getPositiveAngle,\n  convertToPolar,\n  getCenterCoord,\n  Sector\n} from '../utils/PRIVATE_meterUtils';\n\nimport { CenterContext } from './meterCircle.types';\n\ntype Dimensions = {\n  width: number;\n  height: number;\n  innerRadius: number;\n  outerRadius: number;\n};\n\n/**\n * Returns the true dimensions of the meter circle after initial render. All dimensions are 0 for initial render.\n * @param element The HTML element that wraps the track and indicator div.\n * @param section The section in which the meter circle lies.\n * @returns The dimensions of the meter circle.\n */\nexport function getDimensions(element: HTMLElement | null, section: Sector): Dimensions {\n  if (!element) {\n    return {\n      width: 0,\n      height: 0,\n      innerRadius: 0,\n      outerRadius: 0\n    };\n  }\n\n  const circleTrack = element.children[0] as HTMLElement;\n  const rect = circleTrack.getBoundingClientRect();\n\n  return {\n    width: Math.round(rect.width),\n    height: Math.round(rect.height),\n    ...getInnerAndOuterRadius(circleTrack, rect, section)\n  };\n}\n\n/**\n * Returns the inner and outer radius of the meter circle.\n * @param element The HTML element that wraps the track and indicator div.\n * @param rect The bounding rect of the wrapper HTML element.\n * @param section The section in which the meter circle lies.\n * @returns The inner and outer radius of the meter circle.\n */\nfunction getInnerAndOuterRadius(\n  element: HTMLElement,\n  rect: { width: number; height: number },\n  section: string\n): {\n  innerRadius: number;\n  outerRadius: number;\n} {\n  const width = element.clientWidth;\n  const height = element.clientHeight;\n\n  if (section === 'bottom' || section === 'top') {\n    return { outerRadius: rect.width / 2, innerRadius: height };\n  } else if (section === 'left' || section === 'right') {\n    return { outerRadius: rect.height / 2, innerRadius: width };\n  }\n  return { innerRadius: width / 2, outerRadius: rect.width / 2 };\n}\n\n/**\n * Returns the value corresponding to clicked point in the meter circle. Returns undefined if the clicked point is\n * outside the track of the meter circle.\n * @param pageX The pageX of the click event\n * @param pageY The pageY of the click event\n * @param max The max value of the meter circle.\n * @param min The min value of the meter circle.\n * @param step The step of the metercircle.\n * @param dimensionsRef The ref that stores dimensions reference of meter circle.\n * @param startAngle The startAngle of the meter circle.\n * @param angleExtent The angleExtent of the meter circle\n * @returns {number} The value corresponding to clicked point in the meter circle.\n */\nexport function getValue(\n  event: PointerEvent,\n  min: number,\n  max: number,\n  step: number,\n  dimensionsRef: Ref<Dimensions>,\n  startAngle: number,\n  angleExtent: number,\n  section: Sector,\n  isRtl: boolean\n): number | undefined {\n  const dims = dimensionsRef.current;\n  if (!dims) {\n    return undefined;\n  }\n\n  const center = getCenterCoord(section);\n  const { angle } = convertToPolar(\n    dims.width * center.x,\n    dims.height * center.y,\n    event.offsetX,\n    event.offsetY\n  );\n\n  const positiveAngle = getPositiveAngle(angle);\n\n  let val;\n  if (isRtl && startAngle + angleExtent > positiveAngle) {\n    val = (getPositiveAngle(angle - startAngle) / angleExtent) * (max - min);\n  }\n\n  if (!isRtl) {\n    const clockwiseArc = getPositiveAngle(startAngle - positiveAngle);\n    if (clockwiseArc <= angleExtent) {\n      val = (clockwiseArc * (max - min)) / angleExtent;\n    }\n  }\n\n  if (val != undefined) {\n    val = Math.round(val / step) * step;\n    val = Math.max(Math.min(max, val), min);\n  }\n  return val;\n}\n\n/**\n * Returns the fraction of angle extent for given delta.\n * @param delta The delta of metric values.\n * @param min The minimum value of the meter circle.\n * @param max The maximum value of the meter circle.\n * @param angleExtent The angle extent of the meter circle.\n * @returns The angle extent corresponding to delta in metric value.\n */\nexport function getAngleExtentFromDelta(\n  delta: number,\n  min: number,\n  max: number,\n  angleExtent: number\n): number {\n  return (delta * angleExtent) / (max - min);\n}\n\n/**\n * Returns the start angle for given metric value.\n * @param value The metric value\n * @param min The minimum value of the meter circle.\n * @param max The maximum value of the meter circle.\n * @param startAngle The startAngle of the meter circle.\n * @param angleExtent The angleExtent of the meter circle.\n * @param isRtl Whether the reading mode is 'rtl'\n * @returns The startAngle for the metric value.\n */\nexport function getStartAngleForValue(\n  value: number,\n  min: number,\n  max: number,\n  startAngle: number,\n  angleExtent: number,\n  isRtl: boolean\n): number {\n  const extent = getAngleExtentFromDelta(value - min, min, max, angleExtent);\n  return startAngle + (isRtl ? 1 : -1) * extent;\n}\n\n/**\n * Returns the center context of for the meter circle.\n */\nexport function getCenterContext(\n  dimensionsRef: Ref<Dimensions>,\n  section: 'top' | 'bottom' | 'left' | 'right' | 'full'\n): CenterContext | undefined {\n  const dims = dimensionsRef.current;\n\n  if (!dims) {\n    return;\n  }\n\n  const center = getCenterCoord(section);\n  const cx = center.x * dims.width;\n  const cy = center.y * dims.height;\n\n  const isHoriz = section === 'top' || section === 'bottom';\n\n  let innerX, innerY, innerW, innerH;\n  let outerX, outerY, outerW, outerH;\n\n  if (isHoriz || section === 'full') {\n    outerW = 2 * dims.innerRadius;\n    outerH = section === 'full' ? 2 * dims.innerRadius : dims.innerRadius;\n    outerX = cx - dims.innerRadius;\n    outerY = section === 'bottom' ? 0 : cy - dims.innerRadius;\n\n    innerW = Math.sqrt(2) * dims.innerRadius;\n    innerH = section === 'full' ? innerW : dims.innerRadius / Math.sqrt(2);\n    innerX = cx - dims.innerRadius / Math.sqrt(2);\n    innerY = section === 'bottom' ? 0 : cy - dims.innerRadius / Math.sqrt(2);\n  } else {\n    outerH = 2 * dims.innerRadius;\n    outerW = dims.innerRadius;\n    outerX = section === 'left' ? cx - dims.innerRadius : 0;\n    outerY = cy - dims.innerRadius;\n\n    innerH = Math.sqrt(2) * dims.innerRadius;\n    innerW = dims.innerRadius / Math.sqrt(2);\n    innerX = section === 'left' ? cx - dims.innerRadius / Math.sqrt(2) : 0;\n    innerY = cy - dims.innerRadius / Math.sqrt(2);\n  }\n\n  return {\n    outerBounds: {\n      x: outerX,\n      y: outerY,\n      width: outerW,\n      height: outerH\n    },\n    innerBounds: {\n      x: innerX,\n      y: innerY,\n      width: innerW,\n      height: innerH\n    }\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  Threshold,\n  MeterSize,\n  ThresholdDisplay,\n  getVisThresholdColor\n} from '../utils/UNSAFE_meterUtils';\nimport { getClipPath, Sector } from '../utils/PRIVATE_meterUtils';\nimport { getAngleExtentFromDelta, getStartAngleForValue } from './circleMeterUtils';\nimport { MeterProps, CircularRefLine } from './meterCircle.types';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { meterCircleVars } from './themes/MeterCircleContract.css';\nimport { colorSchemeVars } from '../Common/themes/themeContract.css';\nimport { xUnits } from '../UNSAFE_Theme/utils';\n\nexport type MeterInfo = Required<\n  Pick<MeterProps, 'min' | 'max' | 'value' | 'size' | 'startAngle' | 'angleExtent'>\n> & {\n  section: Sector;\n  isRtl: boolean;\n  innerRadius: number;\n};\n\nconst METER_CIRCLE_XS_REF_PROTUSION = 8;\n\nconst METER_CIRCLE_SM_REF_PROTUSION = 16;\n/**\n * Returns the css variable corresponding to the default size of the meter circle.\n * @param size The size of the meter circle.\n * @returns The css variable corresponding to the default size of the meter circle.\n */\nfunction getSizeVar(size: MeterSize, diameter?: number): string {\n  return size\n    ? size === 'fit'\n      ? `${diameter}px`\n      : meterCircleVars.sizes[size]\n    : meterCircleVars.size;\n}\n\n/**\n * Returns the css variable corresponding to the default track size of the meter circle.\n * @param size The size of the meter circle.\n * @returns The css variable corresponding to the default track size of the meter circle.\n */\nfunction getTrackSizeVar(size: MeterSize): string {\n  return size ? meterCircleVars.trackSizes[size] : meterCircleVars.trackSize;\n}\n\n/**\n * Returns the calculated css variable string for the inner radius when given size and innerRadius of meter circle.\n * @param size The size of the meter circle.\n * @param innerRadius The inner radius of the meter circle.\n * @returns {string} CSS varible string for the calculated inner radius of the meter circle.\n */\nexport function getInnerRadius(size: MeterSize, innerRadius?: number, diameter?: number): string {\n  if (innerRadius != undefined) {\n    return `(${getSizeVar(size, diameter)} * ${innerRadius / 2})`;\n  }\n  return `(${getSizeVar(size, diameter)} * 0.5 - ${getTrackSizeVar(size)})`;\n}\n\n/**\n * Returns the calculated css variable string for meter circle track for a given size and innerRadius of meter circle.\n * @param size The size of the meter circle.\n * @param innerRadius The inner radius of the meter circle.\n * @returns {string} CSS variable for the calculated track size of the meter circle.\n */\nexport function getTrackSize(size: MeterSize, innerRadius?: number, diameter?: number): string {\n  if (innerRadius != undefined) {\n    return `(${getSizeVar(size, diameter)} * ${1 - innerRadius} / 2)`;\n  }\n  return getTrackSizeVar(size);\n}\n\n/**\n * Returns the calculated length of reference line for given size and inner radius of meter circle.\n * The length of reference line runs from the inner radius to slight outside the outer radius.\n * The length outside the outer radius depends on size of the meter circle.\n * @param size The size of the meter circle.\n * @param innerRadius The inner radius of the meter circle.\n * @returns The calculated CSS var for the length of reference line.\n */\nexport function getRefLineLength(\n  size: MeterSize,\n  innerRadius?: number,\n  isXsSize?: boolean,\n  diameter?: number\n): string {\n  return `${getTrackSize(size, innerRadius, diameter)} +  ${xUnits(\n    size === 'fit' && !isXsSize ? 4 : 2\n  )}`;\n}\n\n/**\n * Returns the array of calculated props for InnerCircle representing each threshold.\n * @param meterInfo MeterInfo object containing info about given meter circle.\n * @param thresholds thresholds array of the meter circle.\n * @param isTrackRendered Whether track is rendered.\n * @param trackColor The track color of the meter circle.\n * @param innerRadius The inner radius of the meter circle.\n * @returns Array of calculated props object for InnerCircle representing each threshold.\n */\nexport function getThresholdsProps(\n  meterInfo: MeterInfo,\n  thresholds: Threshold[],\n  isTrackRendered: boolean,\n  trackColor?: ColorProps['color'],\n  innerRadius?: number,\n  diameter?: number\n): Array<{\n  clipPath: string;\n  color?: ColorProps['color'];\n  section: Sector;\n  size: string;\n}> {\n  const {\n    min,\n    max,\n    startAngle,\n    angleExtent,\n    size,\n    section,\n    isRtl,\n    innerRadius: innerDim\n  } = meterInfo;\n  const trackSize = `calc(${getTrackSize(size, innerRadius, diameter)})`;\n  const thresholdProps = [];\n  const validThresholds = thresholds\n    .filter((threshold: Threshold) => threshold.max > min && threshold.max <= max)\n    .sort((a, b) => a.max - b.max);\n  const numOfThreshold = validThresholds.length;\n  for (let i = 0; i < numOfThreshold; i++) {\n    const threshold = validThresholds[i];\n    const startValue = i === 0 ? min : validThresholds[i - 1].max;\n    const diff = i === 0 ? threshold.max : threshold.max - validThresholds[i - 1].max;\n\n    let thresholdStart = getStartAngleForValue(\n      startValue,\n      min,\n      max,\n      startAngle,\n      angleExtent,\n      isRtl\n    );\n    let thresholdExtent = getAngleExtentFromDelta(diff, min, max, angleExtent);\n\n    const { startOffset, extentOffset } = getThresholdsBuffer(\n      innerDim,\n      angleExtent,\n      i === 0,\n      threshold.max === max,\n      isRtl\n    );\n    const clipPath = getClipPath(\n      thresholdStart + startOffset,\n      thresholdExtent + extentOffset,\n      isRtl,\n      section\n    );\n\n    thresholdProps.push({\n      clipPath,\n      color: getVisThresholdColor(threshold.color),\n      size: trackSize,\n      section\n    });\n\n    if (i === numOfThreshold - 1 && threshold.max < max && isTrackRendered) {\n      thresholdStart = thresholdStart + (isRtl ? 1 : -1) * thresholdExtent;\n      thresholdExtent = getAngleExtentFromDelta(max - threshold.max, min, max, angleExtent);\n      const { startOffset, extentOffset } = getThresholdsBuffer(\n        innerDim,\n        angleExtent,\n        false,\n        true,\n        isRtl\n      );\n      thresholdProps.push({\n        clipPath: getClipPath(\n          thresholdStart + startOffset,\n          thresholdExtent + extentOffset,\n          isRtl,\n          section\n        ),\n        color: trackColor,\n        size: trackSize,\n        section\n      });\n    }\n  }\n  return thresholdProps;\n}\n\n/**\n * Returns the calculated props for CircularReferenceLine.\n * @param meterInfo MeterInfo object containing info about the meter circle.\n * @param refLine The CircularRefLine object\n * @param innerRadius The innerRadius of the meter circle.\n * @returns An bject with calculated props for CircularReferenceLine.\n */\nexport function getReferenceLinesProps(\n  meterInfo: MeterInfo,\n  refLine: CircularRefLine,\n  innerRadius?: number,\n  isXsSize?: boolean,\n  diameter?: number\n): {\n  radius: string;\n  length: string;\n  angle: number;\n  color?: ColorProps['color'];\n} {\n  const { min, max, startAngle, angleExtent, size, isRtl } = meterInfo;\n  return {\n    radius: getInnerRadius(size, innerRadius, diameter),\n    length: getRefLineLength(size, innerRadius, isXsSize, diameter),\n    angle: getStartAngleForValue(refLine.value, min, max, startAngle, angleExtent, isRtl),\n    color: refLine.color\n  };\n}\n\n/**\n * Returns the calculated props for InnerCircle representing the track.\n * @param meterInfo MeterInfo object containing info about the meter circle.\n * @param trackColor The color of the track.\n * @param istrackRendered Whether the track is rendered.\n * @param thresholdDisplay Specifies whether the current threshold is displayed in the track, on the indicator, or if all thresholds are displayed in the track.\n * @param innerRadius The innerRadius of the meter circle.\n * @param thresholds thresholds array of the meter circle.\n * @returns An object with calculated props for InnerCircle that represents the track.\n */\nexport function getTrackProps(\n  meterInfo: MeterInfo,\n  isTrackRendered: boolean,\n  thresholdDisplay: ThresholdDisplay,\n  trackColor?: ColorProps['color'],\n  innerRadius?: number,\n  thresholds?: Threshold[],\n  diameter?: number\n): {\n  section: Sector;\n  color?: ColorProps['color'];\n  clipPath: string;\n  size: string;\n} {\n  const { startAngle, angleExtent, size, section, isRtl } = meterInfo;\n  const color = !isTrackRendered\n    ? 'transparent'\n    : thresholdDisplay === 'all' && thresholds\n    ? `${colorSchemeVars.dvt.contrastLine}`\n    : trackColor;\n  return {\n    section,\n    color,\n    clipPath: getClipPath(startAngle, angleExtent, isRtl, section),\n    size: `calc(${getTrackSize(size, innerRadius, diameter)})`\n  };\n}\n\n/**\n * Returns the calculated props for InnerCircle representing the indicator.\n * @param meterInfo MeterInfo object containing info about the meter circle.\n * @param indicatorSize Relative thickness of the indicator to the track.\n * @param innerRadius The innerRadius of the meter circle.\n * @returns An object with calculated props for InnerCircle that represents the indicator.\n */\nexport function getIndicatorProps(\n  meterInfo: MeterInfo,\n  indicatorSize: number,\n  innerRadius?: number,\n  fitDiameter?: number\n) {\n  const { value, min, max, startAngle, angleExtent, size, section, isRtl } = meterInfo;\n  const valueExtent = ((value - min) * angleExtent) / (max - min);\n  const validIndicatorSize = Math.min(Math.max(0, indicatorSize), 1);\n  const isHoriz = section === 'left' || section === 'right';\n  const isVert = section === 'top' || section === 'bottom';\n  const valueTrackSize = `calc(${getTrackSize(\n    size,\n    innerRadius,\n    fitDiameter\n  )} * ${validIndicatorSize})`;\n  const diameter = `${getSizeVar(\n    size,\n    fitDiameter\n  )} - ((1 - ${validIndicatorSize}) * ${getTrackSize(size, innerRadius, fitDiameter)})`;\n  const radius = `(${diameter}) / 2`;\n  return {\n    section,\n    width: isHoriz ? `calc(${radius})` : `calc(${diameter})`,\n    height: isVert ? `calc(${radius})` : `calc(${diameter})`,\n    size: valueTrackSize,\n    clipPath: getClipPath(startAngle, valueExtent, isRtl, section)\n  };\n}\n\n/**\n * Returns the threshold offsets to create the whitespace between the thresholds.\n * @param innerRadius The innerRadius of the meter circle.\n * @param angleExtent The angleExtent of the meter circle.\n * @param firstThreshold Whether the current threshold is the first threshold.\n * @param lastThreshold  Whether the current threshold is the last threshold.\n * @param isRtl Whether the document reading mode is 'rtl'\n * @returns The offsets (startOffset and extentOffset) to add to calculated threshold startAngle and threhsold extent.\n */\nfunction getThresholdsBuffer(\n  innerRadius: number,\n  angleExtent: number,\n  firstThreshold: boolean,\n  lastThreshold: boolean,\n  isRtl: boolean\n): {\n  startOffset: number;\n  extentOffset: number;\n} {\n  if (!innerRadius) {\n    return { startOffset: 0, extentOffset: 0 };\n  }\n  const offset = 360 / (2 * Math.PI * innerRadius);\n  let startOffset = (offset / 2) * (isRtl ? 1 : -1);\n  let extentOffset = -1 * offset;\n\n  if (firstThreshold && angleExtent < 360) {\n    startOffset = 0;\n    extentOffset = -0.5 * offset;\n  }\n\n  if (lastThreshold && angleExtent < 360) {\n    extentOffset = -0.5 * offset;\n  }\n  return { startOffset, extentOffset };\n}\n\nexport function getWidthAndHeight(width: number, height: number, section: Sector) {\n  if (section === 'top' || section === 'bottom') {\n    return {\n      height: Math.min(height, width / 2),\n      width: Math.min(height, width / 2) * 2\n    };\n  } else if (section === 'left' || section === 'right') {\n    return {\n      width: Math.min(width, height / 2),\n      height: Math.min(width, height / 2) * 2\n    };\n  } else {\n    return {\n      width: Math.min(width, height),\n      height: Math.min(width, height)\n    };\n  }\n}\n\nexport function getWidthAndHeightWithReferenceLine(\n  _width: number,\n  _height: number,\n  hasReferenceLine: boolean,\n  isXsSize: boolean,\n  section: Sector\n) {\n  if (!hasReferenceLine) {\n    return { width: _width, height: _height };\n  }\n\n  if (section === 'full') {\n    return {\n      width:\n        _width - 2 * (isXsSize ? METER_CIRCLE_XS_REF_PROTUSION : METER_CIRCLE_SM_REF_PROTUSION),\n      height:\n        _height - 2 * (isXsSize ? METER_CIRCLE_XS_REF_PROTUSION : METER_CIRCLE_SM_REF_PROTUSION)\n    };\n  } else if (section === 'top' || section === 'bottom') {\n    return {\n      width:\n        _width - 2 * (isXsSize ? METER_CIRCLE_XS_REF_PROTUSION : METER_CIRCLE_SM_REF_PROTUSION),\n      height: _height - (isXsSize ? METER_CIRCLE_XS_REF_PROTUSION : METER_CIRCLE_SM_REF_PROTUSION)\n    };\n  } else {\n    return {\n      width: _width - (isXsSize ? METER_CIRCLE_XS_REF_PROTUSION : METER_CIRCLE_SM_REF_PROTUSION),\n      height:\n        _height - 2 * (isXsSize ? METER_CIRCLE_XS_REF_PROTUSION : METER_CIRCLE_SM_REF_PROTUSION)\n    };\n  }\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { CircleWrapper, CircleInner } from '../PRIVATE_Meter';\nimport { CircularReferenceLine } from './CircularReferenceLine';\nimport { TrackResizeContainer } from '../PRIVATE_TrackResizeContainer';\n\nimport {\n  validateRange,\n  getTrackAndIndicatorColor,\n  getMeterAriaProps,\n  getCircleSection\n} from '../utils/PRIVATE_meterUtils';\n\nimport { getDimensions, getValue, getCenterContext } from './circleMeterUtils';\n\nimport {\n  getIndicatorProps,\n  getTrackProps,\n  getThresholdsProps,\n  getReferenceLinesProps,\n  MeterInfo,\n  getWidthAndHeight,\n  getWidthAndHeightWithReferenceLine\n} from './layoutUtils';\n\nimport {\n  usePointerEvents,\n  useKeyboardEvents,\n  useMeterDatatip\n} from '../hooks/PRIVATE_useVisMeterEvents';\n\nimport { MeterProps, CircularRefLine } from './meterCircle.types';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { MeterCircleStyles, MeterCircleVariantOptions } from './themes/MeterCircleStyles.css';\nimport { MeterCircleRedwoodTheme } from './themes/redwood/MeterCircleTheme';\nimport { useTestId } from '../hooks/UNSAFE_useTestId';\n\nconst XS_BREAKPOINT = 360;\nconst FIT_INNERRADIUS = 0.8;\n\n/**\n * A Meter circle displays information graphically in a circular bar, highlighting a specific metric value's progress in relation to its min, max, or thresholds.\n */\nexport function FitMeterCircle({\n  max = 100,\n  min = 0,\n  value = 0,\n  step = 1,\n  size = 'fit',\n  startAngle = 90,\n  angleExtent = 360,\n  isTrackRendered = true,\n  thresholdDisplay = 'all',\n  indicatorSize = 1,\n  testId,\n  ...props\n}: MeterProps) {\n  const testIdProps = useTestId(testId);\n  validateRange(min, max, value, step);\n  const isInteractive = props.onCommit || props.onInput;\n  const { classes, styles } = useComponentTheme<MeterCircleVariantOptions, MeterCircleStyles>(\n    MeterCircleRedwoodTheme,\n    {\n      size,\n      interaction: isInteractive ? 'isInteractive' : undefined\n    }\n  );\n\n  return (\n    <TrackResizeContainer class={classes} width={'100%'} height={'100%'}>\n      {function _(_width, _height) {\n        const { direction } = useUser();\n        const isRtl = direction === 'rtl';\n\n        let sAngle = startAngle;\n        if (isRtl) {\n          sAngle = 180 - sAngle;\n        }\n        const section = getCircleSection(sAngle, angleExtent, isRtl);\n\n        const { width: _w } = getWidthAndHeight(_width, _height, section);\n        const isXsSize = _w < XS_BREAKPOINT;\n\n        const innerR = props.innerRadius || size === 'fit' ? FIT_INNERRADIUS : undefined;\n\n        const { width: w, height: h } = getWidthAndHeightWithReferenceLine(\n          _width,\n          _height,\n          !!props.referenceLines?.length,\n          isXsSize,\n          section\n        );\n\n        const { width, height } = getWidthAndHeight(w, h, section);\n\n        const radius = section === 'full' ? Math.min(width, height) / 2 : Math.min(width, height);\n        const diameter = radius * 2;\n\n        const currentInputRef = useRef<number>();\n\n        const dimensionsRef = useRef(getDimensions(null, section));\n        const circleWrapperRef = useRef<HTMLDivElement>(null);\n        const [isDimsReady, setDimsReady] = useState<boolean>(false);\n\n        useEffect(() => {\n          if (props.onCommit || props.onInput || props.children) {\n            dimensionsRef.current = getDimensions(circleWrapperRef.current, section);\n            setDimsReady(true);\n          }\n        }, [section]);\n\n        const getValueFromEvent = (event: PointerEvent) => {\n          const circleContainer = circleWrapperRef.current;\n          if (event.target == circleContainer) {\n            return getValue(\n              event,\n              min,\n              max,\n              step,\n              dimensionsRef,\n              sAngle,\n              angleExtent,\n              section,\n              isRtl\n            );\n          }\n          return;\n        };\n\n        const isPointerActiveRef = useRef(false);\n\n        const pointerEventsProps = usePointerEvents(\n          value,\n          getValueFromEvent,\n          circleWrapperRef,\n          currentInputRef,\n          isPointerActiveRef,\n          props.onCommit,\n          props.onInput\n        );\n\n        const keyboardEventsProps = useKeyboardEvents(\n          value,\n          min,\n          max,\n          step,\n          currentInputRef,\n          props.onCommit,\n          props.onInput\n        );\n\n        const { datatipContent, datatipProps } = useMeterDatatip(\n          value,\n          isPointerActiveRef,\n          props.datatip,\n          props['aria-describedby']\n        );\n\n        const ariaProps = getMeterAriaProps(\n          value,\n          min,\n          max,\n          props['aria-label'],\n          props['aria-labelledby'],\n          props.thresholds\n        );\n        const mergedProps = mergeProps(\n          pointerEventsProps,\n          keyboardEventsProps,\n          datatipProps,\n          ariaProps\n        );\n\n        const { trackColor, indicatorColor } = getTrackAndIndicatorColor(\n          value,\n          thresholdDisplay,\n          props.trackColor,\n          props.indicatorColor,\n          props.thresholds\n        );\n\n        const meterInfo = {\n          min,\n          max,\n          value,\n          startAngle: sAngle,\n          angleExtent,\n          size,\n          section,\n          isRtl,\n          innerRadius: dimensionsRef.current.innerRadius\n        } as MeterInfo;\n\n        const { isTabbable } = useTabbableMode();\n        const centerContext = getCenterContext(dimensionsRef, section);\n\n        return (\n          <>\n            <div\n              class={classNames([\n                classes,\n                section === 'full' ? `${styles.meterCircleFullSizeStyle}, ${styles.centerDiv}` : ''\n              ])}\n              style={{\n                width: _width,\n                height: _height\n              }}\n              tabIndex={!isTabbable ? -1 : 0}\n              {...testIdProps}\n              {...mergedProps}>\n              <CircleWrapper\n                wrapperRef={circleWrapperRef}\n                class={classNames([\n                  styles.circleWrapperBaseStyle,\n                  props.referenceLines && props.referenceLines.length > 0\n                    ? size && styles[`fit${isXsSize ? 'Sm' : 'Lg'}${section}Style`]\n                    : '',\n                  styles.centerDiv\n                ])}\n                width={`${width}px`}\n                height={`${height}px`}>\n                <CircleInner\n                  width={`${width}px`}\n                  height={`${height}px`}\n                  class={classNames([styles.circleTrackBaseStyle, styles[`${section}Style`]])}\n                  {...getTrackProps(\n                    meterInfo,\n                    isTrackRendered,\n                    thresholdDisplay,\n                    trackColor,\n                    innerR,\n                    props.thresholds,\n                    diameter\n                  )}\n                />\n                {thresholdDisplay === 'all' &&\n                  props.thresholds &&\n                  getThresholdsProps(\n                    meterInfo,\n                    props.thresholds,\n                    isTrackRendered,\n                    trackColor,\n                    innerR,\n                    diameter\n                  ).map((threshold) => {\n                    return (\n                      <CircleInner\n                        class={classNames([styles.circleTrackBaseStyle, styles[`${section}Style`]])}\n                        {...threshold}\n                        width={`${width}px`}\n                        height={`${height}px`}\n                      />\n                    );\n                  })}\n                <CircleInner\n                  color={indicatorColor}\n                  class={classNames([\n                    styles.circleValueBaseStyle,\n                    styles[`circleValue${section}Style`],\n                    styles[`${section}Style`]\n                  ])}\n                  {...getIndicatorProps(meterInfo, indicatorSize, innerR, 2 * radius)}\n                />\n                {props.referenceLines?.map((refLine: CircularRefLine) => {\n                  return (\n                    <CircularReferenceLine\n                      {...getReferenceLinesProps(meterInfo, refLine, innerR, isXsSize, diameter)}\n                      section={section}\n                    />\n                  );\n                })}\n                {isDimsReady && props.children && centerContext && (\n                  <div class={classNames([styles.meterCircleCenterContent])}>\n                    {props.children(centerContext)}\n                  </div>\n                )}\n              </CircleWrapper>\n            </div>\n            {datatipContent}\n          </>\n        );\n      }}\n    </TrackResizeContainer>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { CircleWrapper, CircleInner } from '../PRIVATE_Meter';\nimport { CircularReferenceLine } from './CircularReferenceLine';\n\nimport {\n  validateRange,\n  getTrackAndIndicatorColor,\n  getMeterAriaProps,\n  getCircleSection\n} from '../utils/PRIVATE_meterUtils';\n\nimport { getDimensions, getValue, getCenterContext } from './circleMeterUtils';\n\nimport {\n  getIndicatorProps,\n  getTrackProps,\n  getThresholdsProps,\n  getReferenceLinesProps,\n  MeterInfo\n} from './layoutUtils';\n\nimport {\n  usePointerEvents,\n  useKeyboardEvents,\n  useMeterDatatip\n} from '../hooks/PRIVATE_useVisMeterEvents';\n\nimport { MeterProps, CircularRefLine } from './meterCircle.types';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { MeterCircleStyles, MeterCircleVariantOptions } from './themes/MeterCircleStyles.css';\nimport { MeterCircleRedwoodTheme } from './themes/redwood/MeterCircleTheme';\nimport { useTestId } from '../hooks/UNSAFE_useTestId';\n\ntype SizedMeterProps = MeterProps & { size?: 'sm' | 'md' | 'lg' };\n\n/**\n * A Meter circle displays information graphically in a circular bar, highlighting a specific metric value's progress in relation to its min, max, or thresholds.\n */\nexport function SizedMeterCircle({\n  max = 100,\n  min = 0,\n  value = 0,\n  step = 1,\n  size,\n  startAngle = 90,\n  angleExtent = 360,\n  isTrackRendered = true,\n  thresholdDisplay = 'all',\n  indicatorSize = 1,\n  testId,\n  ...props\n}: SizedMeterProps) {\n  const testIdProps = useTestId(testId);\n\n  validateRange(min, max, value, step);\n  const currentInputRef = useRef<number>();\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  let sAngle = startAngle;\n  if (isRtl) {\n    sAngle = 180 - sAngle;\n  }\n\n  const section = getCircleSection(sAngle, angleExtent, isRtl);\n  const dimensionsRef = useRef(getDimensions(null, section));\n  const circleWrapperRef = useRef<HTMLDivElement>(null);\n  const [isDimsReady, setDimsReady] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (props.onCommit || props.onInput || props.children) {\n      dimensionsRef.current = getDimensions(circleWrapperRef.current, section);\n      setDimsReady(true);\n    }\n  }, [size, section, props.onCommit, props.onInput, props.children]);\n\n  const getValueFromEvent = (event: PointerEvent) => {\n    const circleContainer = circleWrapperRef.current;\n    if (event.target == circleContainer) {\n      return getValue(event, min, max, step, dimensionsRef, sAngle, angleExtent, section, isRtl);\n    }\n    return;\n  };\n\n  const isPointerActiveRef = useRef(false);\n\n  const pointerEventsProps = usePointerEvents(\n    value,\n    getValueFromEvent,\n    circleWrapperRef,\n    currentInputRef,\n    isPointerActiveRef,\n    props.onCommit,\n    props.onInput\n  );\n\n  const keyboardEventsProps = useKeyboardEvents(\n    value,\n    min,\n    max,\n    step,\n    currentInputRef,\n    props.onCommit,\n    props.onInput\n  );\n\n  const { datatipContent, datatipProps } = useMeterDatatip(\n    value,\n    isPointerActiveRef,\n    props.datatip,\n    props['aria-describedby']\n  );\n\n  const ariaProps = getMeterAriaProps(\n    value,\n    min,\n    max,\n    props['aria-label'],\n    props['aria-labelledby'],\n    props.thresholds\n  );\n  const mergedProps = mergeProps(pointerEventsProps, keyboardEventsProps, datatipProps, ariaProps);\n\n  const { trackColor, indicatorColor } = getTrackAndIndicatorColor(\n    value,\n    thresholdDisplay,\n    props.trackColor,\n    props.indicatorColor,\n    props.thresholds\n  );\n\n  const orientation =\n    section === 'bottom' || section === 'top'\n      ? 'Horizontal'\n      : section === 'left' || section === 'right'\n      ? 'Vertical'\n      : 'Full';\n\n  const meterInfo = {\n    min,\n    max,\n    value,\n    startAngle: sAngle,\n    angleExtent,\n    size,\n    section,\n    isRtl,\n    innerRadius: dimensionsRef.current.innerRadius\n  } as MeterInfo;\n  const isInteractive = props.onCommit || props.onInput;\n\n  const { classes, styles } = useComponentTheme<MeterCircleVariantOptions, MeterCircleStyles>(\n    MeterCircleRedwoodTheme,\n    {\n      size,\n      interaction: isInteractive ? 'isInteractive' : undefined\n    }\n  );\n\n  const { isTabbable } = useTabbableMode();\n  const centerContext = getCenterContext(dimensionsRef, section);\n\n  return (\n    <>\n      <div\n        class={classNames([classes])}\n        tabIndex={!isTabbable ? -1 : 0}\n        {...testIdProps}\n        {...mergedProps}>\n        <CircleWrapper\n          wrapperRef={circleWrapperRef}\n          class={classNames([\n            styles.circleWrapperBaseStyle,\n            props.referenceLines && props.referenceLines.length > 0\n              ? size && styles[`${size}${section}Style`]\n              : '',\n            styles[`meterCircle${orientation}SizeStyle`]\n          ])}>\n          <CircleInner\n            class={classNames([styles.circleTrackBaseStyle, styles[`${section}Style`]])}\n            {...getTrackProps(\n              meterInfo,\n              isTrackRendered,\n              thresholdDisplay,\n              trackColor,\n              props.innerRadius,\n              props.thresholds\n            )}\n          />\n          {thresholdDisplay === 'all' &&\n            props.thresholds &&\n            getThresholdsProps(\n              meterInfo,\n              props.thresholds,\n              isTrackRendered,\n              trackColor,\n              props.innerRadius\n            ).map((threshold) => {\n              return (\n                <CircleInner\n                  class={classNames([styles.circleTrackBaseStyle, styles[`${section}Style`]])}\n                  {...threshold}\n                />\n              );\n            })}\n\n          <CircleInner\n            color={indicatorColor}\n            class={classNames([\n              styles.circleValueBaseStyle,\n              styles[`circleValue${section}Style`],\n              styles[`${section}Style`]\n            ])}\n            {...getIndicatorProps(meterInfo, indicatorSize, props.innerRadius)}\n          />\n          {props.referenceLines?.map((refLine: CircularRefLine) => {\n            return (\n              <CircularReferenceLine\n                {...getReferenceLinesProps(meterInfo, refLine, props.innerRadius)}\n                section={section}\n              />\n            );\n          })}\n          {isDimsReady && props.children && centerContext && (\n            <div class={classNames([styles.meterCircleCenterContent])}>\n              {props.children(centerContext)}\n            </div>\n          )}\n        </CircleWrapper>\n      </div>\n      {datatipContent}\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { FitMeterCircle } from './FitMeterCircle';\nimport { SizedMeterCircle } from './SizedMeterCircle';\nimport { MeterProps } from './meterCircle.types';\n\n/**\n * A Meter circle displays information graphically in a circular bar, highlighting a specific metric value's progress in relation to its min, max, or thresholds.\n */\nexport function MeterCircle({\n  size,\n  max = 100,\n  min = 0,\n  value = 0,\n  step = 1,\n  startAngle = 90,\n  angleExtent = 360,\n  isTrackRendered = true,\n  thresholdDisplay = 'all',\n  indicatorSize = 1,\n  ...props\n}: MeterProps) {\n  if (size === 'fit') {\n    return (\n      <FitMeterCircle\n        min={min}\n        value={value}\n        max={max}\n        step={step}\n        startAngle={startAngle}\n        angleExtent={angleExtent}\n        isTrackRendered={isTrackRendered}\n        thresholdDisplay={thresholdDisplay}\n        indicatorSize={indicatorSize}\n        {...props}\n      />\n    );\n  }\n  return (\n    <SizedMeterCircle\n      size={size || 'lg'}\n      min={min}\n      value={value}\n      max={max}\n      step={step}\n      startAngle={startAngle}\n      angleExtent={angleExtent}\n      isTrackRendered={isTrackRendered}\n      thresholdDisplay={thresholdDisplay}\n      indicatorSize={indicatorSize}\n      {...props}\n    />\n  );\n}\n"],"names":["getCenterCoord","_jsx","classNames","styles","getVisThresholdColor","convertToPolar","getPositiveAngle","meterCircleVars","xUnits","getClipPath","colorSchemeVars","useTestId","validateRange","useComponentTheme","MeterCircleRedwoodTheme","TrackResizeContainer","useUser","getCircleSection","useRef","useState","useEffect","usePointerEvents","useKeyboardEvents","useMeterDatatip","getMeterAriaProps","mergeProps","getTrackAndIndicatorColor","useTabbableMode","_jsxs","_Fragment","CircleWrapper","CircleInner"],"mappings":"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"}
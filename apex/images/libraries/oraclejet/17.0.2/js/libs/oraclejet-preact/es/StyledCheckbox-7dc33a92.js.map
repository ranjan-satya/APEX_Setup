{"version":3,"file":"StyledCheckbox-7dc33a92.js","sources":["../../src/PRIVATE_StyledCheckbox/StyledCheckbox.tsx"],"sourcesContent":["import { Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\n\nimport { CheckIcon } from '../PRIVATE_ThemedIcons/CheckIcon';\nimport { CheckboxOffIcon } from '../PRIVATE_ThemedIcons/CheckboxOffIcon';\nimport { CheckboxOnIcon } from '../PRIVATE_ThemedIcons/CheckboxOnIcon';\nimport { CheckboxMixedIcon } from '../PRIVATE_ThemedIcons/CheckboxMixedIcon';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { checkboxIconVars } from '../UNSAFE_Checkbox/themes/CheckboxIconContract.css';\nimport { CheckboxIconRedwoodTheme } from '../UNSAFE_Checkbox/themes/redwood/CheckboxIconTheme';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport {\n  CheckboxIconStyles,\n  CheckboxIconVariantOptions\n} from '../UNSAFE_Checkbox/themes/CheckboxIconStyles.css';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { hoverStyle } from './StyledCheckbox.css';\nimport { useCollectionGestureContext } from '#hooks/PRIVATE_useCollectionGestureContext';\n\ntype InputProps = HTMLAttributesSignalExcluded<HTMLInputElement>;\n\ntype Props = Pick<\n  InputProps,\n  | 'name'\n  | 'value'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'onKeyUp'\n  | 'onKeyDown'\n  | 'onBlur'\n  | 'onChange'\n  | 'onFocus'\n  | 'id'\n> & {\n  /**\n   * Specifies if the checkbox is active.\n   */\n  isActive?: boolean;\n  /**\n   * Whether the element should be checked, unchecked, or in a partial state.\n   */\n  isChecked?: 'checked' | 'unchecked' | 'partial';\n  /**\n   * Specifies if the checkbox is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies if the checkbox should display focus ring.\n   */\n  isFocusRingShown?: boolean;\n  /**\n   * Specifies if the checkbox is read-only.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies whether the checkbox requires a selection to be made.\n   */\n  isRequired?: boolean;\n  /**\n   * Triggered when the checkbox icon is clicked. This would be potentially used if no label is supplied.\n   */\n  onClick?: HTMLAttributesSignalExcluded<HTMLSpanElement>['onClick'];\n  /**\n   * Specifies whether the checkbox is hover.\n   */\n  isHover?: boolean;\n};\n\n/**\n * StyledCheckbox is a controlled component that displays a stylized checkbox for 'checked',\n * 'unchecked', and 'partial'. It passes intrinsic props to the native input element. This should be used\n * in conjunction with a label and be passed an onChange handler. If used within a collection use\n * 'useCollectionFocusRing', or use 'useCheckboxRadioContext' within RadioSet/CheckboxSet, to determine if you\n * should display the focus ring using keyboard navigation.\n */\nconst StyledCheckbox = forwardRef(\n  (\n    {\n      onClick,\n      isActive,\n      isFocusRingShown,\n      isDisabled,\n      isReadonly,\n      isRequired,\n      isChecked: propIsChecked = 'unchecked',\n      // Remaining props should be intrinsic input props only. If you need additional input props exposed,\n      // add to the picked items from InputProps.\n      id,\n      name,\n      value,\n      onKeyUp,\n      onKeyDown,\n      onChange,\n      onFocus,\n      onBlur,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-describedby': ariaDescribedBy,\n      isHover\n    }: Props,\n    ref: Ref<HTMLInputElement> = null\n  ) => {\n    const { isTabbable } = useTabbableMode();\n    const isPartial = propIsChecked === 'partial';\n    const isChecked = propIsChecked === 'checked' || isPartial;\n    const ariaChecked = isChecked ? (isPartial ? 'mixed' : true) : false;\n\n    const { classes } = useComponentTheme<CheckboxIconVariantOptions, CheckboxIconStyles>(\n      CheckboxIconRedwoodTheme,\n      {\n        disabled: isDisabled ? 'isDisabled' : 'notDisabled',\n        checked: isChecked ? 'isChecked' : 'notChecked',\n        readonly: isReadonly ? 'isReadonly' : 'notReadonly',\n        active: isActive ? 'isActive' : 'notActive',\n        focus: isFocusRingShown ? 'isFocused' : 'notFocused',\n        iconSize: '4xUnits'\n      }\n    );\n\n    const IconComp = isReadonly\n      ? isChecked\n        ? CheckIcon\n        : CheckboxOffIcon\n      : isChecked\n      ? isPartial\n        ? CheckboxMixedIcon\n        : CheckboxOnIcon\n      : CheckboxOffIcon;\n\n    const spanClass = isHover ? classes + ' ' + hoverStyle : classes;\n\n    // JET-65187 oatb: Interactive controls must not be nested\n    // For accessibility, we want aria-hidden to be true and disabled to be true when\n    // the checkbox is 'embedded' in a collection in the dropdown of a SelectMultiple component.\n    const isEmbedded = useCollectionGestureContext() === 'embedded';\n    return (\n      <>\n        <HiddenAccessible>\n          <input\n            {...(isReadonly ? { 'aria-readonly': true } : {})}\n            aria-checked={ariaChecked}\n            {...(isEmbedded ? { 'aria-hidden': true } : {})}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n            aria-required={isRequired}\n            ref={ref}\n            name={name}\n            value={value}\n            onKeyUp={onKeyUp}\n            onKeyDown={onKeyDown}\n            onBlur={onBlur}\n            onChange={onChange}\n            onFocus={onFocus}\n            id={id}\n            type=\"checkbox\"\n            disabled={isDisabled || isEmbedded}\n            checked={isChecked}\n            tabIndex={isTabbable ? 0 : -1}\n          />\n        </HiddenAccessible>\n        <span className={spanClass} aria-hidden=\"true\" onClick={onClick} role=\"img\">\n          <IconComp size={checkboxIconVars.iconSize} color=\"currentColor\" />\n        </span>\n      </>\n    );\n  }\n);\n\nexport { StyledCheckbox };\n"],"names":["CheckIcon","CheckboxOffIcon","CheckboxMixedIcon","CheckboxOnIcon","_jsxs","_Fragment","_jsx"],"mappings":"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"}
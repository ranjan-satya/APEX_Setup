{"version":3,"file":"useSelection-ce0f9a43.js","sources":["../../src/hooks/PRIVATE_useSelection/useSelection.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { RefObject } from 'preact';\nimport { useCallback, useRef } from 'preact/hooks';\nimport { Keys, containsKey, isKeyDefined, addKey, removeKey } from '../../utils/UNSAFE_keys';\nimport { SelectionDetail, SelectionMode } from '../../UNSAFE_Collection';\nimport { useUser } from '../UNSAFE_useUser';\nimport { getIsSelectionPending } from '#utils/PRIVATE_textSelectionUtils';\n\n/**\n * Type for selection behavior. See useMultipleSelection hook for details.\n */\nexport const behaviors = ['toggle', 'replace'] as const;\nexport type SelectionBehavior = (typeof behaviors)[number];\n\n/**\n * Type for payload of selection range change event handler\n */\nexport type SelectionRangeDetail<K> = {\n  value: { start: K; end: K };\n  eventType?: 'shiftSpace' | 'shiftClick' | 'shiftArrowKeys';\n};\n\nconst arrowKeys = new Set(['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown']);\n\n/**\n * To get the event type during range selection which is triggered by either of the following gestures\n * shift+space, shift+click, and shift+arrowKeys\n * @param event\n */\nconst getEventType = (event: MouseEvent | KeyboardEvent) => {\n  if (event.type === 'click') {\n    return 'shiftClick';\n  } else if (event.type === 'keyup' && (event as KeyboardEvent).key === ' ') {\n    return 'shiftSpace';\n  } else if (event.type === 'keydown' && arrowKeys.has((event as KeyboardEvent).key)) {\n    return 'shiftArrowKeys';\n  }\n  return undefined;\n};\n\nconst isShiftModeSupported = <K>(\n  anchorKey: K,\n  selectedKeys: Keys<K>,\n  selectionMode: SelectionMode,\n  isClickEvent: boolean\n) => {\n  return selectionMode === 'multiple' && (isClickEvent || containsKey(selectedKeys, anchorKey));\n};\n\nconst handleSelect = <K>(\n  event: MouseEvent | KeyboardEvent,\n  keyExtractor: (element: HTMLElement) => K | null,\n  selectedKeys: Keys<K>,\n  selectionMode: SelectionMode,\n  selectionBehavior: SelectionBehavior,\n  isSelectionRequired: boolean,\n  keyboardCursorRef: RefObject<K | undefined>,\n  anchorKey?: K,\n  onChange?: (detail: SelectionDetail<K>) => void,\n  onRangeChange?: (detail: SelectionRangeDetail<K>) => void\n) => {\n  const itemKey = keyExtractor(event.target as HTMLElement);\n  if (itemKey == null) {\n    return;\n  }\n\n  // handle shift key selection\n  if (\n    event.shiftKey &&\n    anchorKey !== undefined &&\n    onRangeChange &&\n    isShiftModeSupported(anchorKey, selectedKeys, selectionMode, event.type === 'click')\n  ) {\n    const selected = containsKey(selectedKeys, itemKey);\n    const eventType = getEventType(event);\n    if (selected && eventType === 'shiftSpace') {\n      // during shift+space, deselect the item if it's already selected\n      const keySet = removeKey(selectedKeys, itemKey, isSelectionRequired);\n      onChange?.({ value: keySet, target: event.target });\n    } else {\n      onRangeChange({ value: { start: anchorKey, end: itemKey }, eventType });\n    }\n    // set keyboard selection cursor in case user extends with SHIFT+ARROW\n    if (keyboardCursorRef) {\n      keyboardCursorRef.current = itemKey;\n    }\n    return;\n  }\n\n  const selected = containsKey(selectedKeys, itemKey);\n  let keySet = selectedKeys;\n  if (!selected) {\n    if (\n      selectionMode === 'single' ||\n      (event as KeyboardEvent).key === 'Enter' ||\n      (selectionBehavior === 'replace' && !(event.ctrlKey || event.metaKey))\n    ) {\n      // should only contains this item key\n      keySet = { all: false, keys: new Set([itemKey]) };\n    } else {\n      // add to existing selected keys\n      keySet = addKey(selectedKeys, itemKey);\n    }\n  } else if ((event as KeyboardEvent).key !== 'Enter') {\n    // no de-select for enter key\n    if (\n      selectionBehavior === 'toggle' ||\n      event.ctrlKey ||\n      event.metaKey ||\n      (event as KeyboardEvent).key === ' '\n    ) {\n      // de-select only when ctrl/meta key is pressed or selectionBehavior is\n      // explicitly set to toggle\n      keySet = removeKey(selectedKeys, itemKey, isSelectionRequired);\n    } else if (selectionMode === 'multiple' && (selectedKeys.all || selectedKeys.keys.size > 1)) {\n      // in this case everything should be de-selected except for this key\n      keySet = { all: false, keys: new Set([itemKey]) };\n    }\n  }\n\n  // only invoke callback if there is really a change\n  // note onSelectionChange should never be null here\n  if (selectedKeys != keySet && onChange) {\n    onChange({ value: keySet, target: event.target });\n    if (event.type === 'click') {\n      event.stopPropagation();\n    }\n  }\n};\n\n/**\n * Hook for handling various selection mode.  This can be reuse by all Collection components.\n * @param keyExtractor function to extract the key based on provided element\n * @param selectedKeys the currently selected keys\n * @param selectionMode the selection mode\n * @param isSelectionRequired true if empty selected key is not allowed, false otherwise\n * @param selectionBehavior the selection behavior.  If the value is 'toggle', then the key is\n *                          added/removed from the current selected keys.  If the value is 'replace',\n *                          then the current selected keys are cleared first before the key is added\n *                          unless the ctrl/shift/meta key is pressed.\n * @param allowEnterKey whether enter key can be use to change selection.\n * @param onChange callback function that is invoked when selection has changed.\n * @param anchorKey the anchor key.  Usually this is the same as current key except when shift key is pressed.\n * @param currentKey the current key\n * @param getVerticalPrevNextKey function to get the previous/next key in the vertical direction based on the current key\n * @param getHorizontalPrevNextKey function to get the previous/next key in the horizontal direction based on the current key\n * @param scrollToKey function to scroll the item with the key to be visible\n * @param onRangeChange callback function that is invoked when the selection range has changed.\n * @returns an event map that the consumer can register as event listeners\n */\nexport function useSelection<K>(\n  keyExtractor: (element: HTMLElement) => K | null,\n  selectedKeys: Keys<K>,\n  selectionMode: SelectionMode,\n  isSelectionRequired: boolean,\n  selectionBehavior: SelectionBehavior,\n  allowEnterKey: boolean,\n  onChange?: (detail: SelectionDetail<K>) => void,\n  anchorKey?: K,\n  currentKey?: K | undefined,\n  getVerticalPrevNextKey?: (currentKey: K | undefined, isPrev: boolean) => () => K | null,\n  getHorizontalPrevNextKey?: (currentKey: K | undefined, isPrev: boolean) => () => K | null,\n  scrollToKey?: (key: K) => void,\n  onRangeChange?: (detail: SelectionRangeDetail<K>) => void\n) {\n  // ref to track the cursor for the SHIFT+ARROW keyboard selection separately than the anchor of the selection.\n  const keyboardSelectionCursor = useRef<K>();\n\n  const isTouchPointerRef = useRef<boolean>(false);\n\n  const onPointerDown = useCallback(\n    (event: PointerEvent) => {\n      isTouchPointerRef.current = event.pointerType === 'touch';\n      if (event.shiftKey && selectionMode === 'multiple') {\n        //Avoid text selection on pointer down\n        event.preventDefault();\n      }\n    },\n    [isTouchPointerRef]\n  );\n\n  const onClick = useCallback(\n    (event: MouseEvent) => {\n      if (!getIsSelectionPending()) {\n        handleSelect<K>(\n          event,\n          keyExtractor,\n          selectedKeys,\n          selectionMode,\n          isTouchPointerRef.current ? 'toggle' : selectionBehavior,\n          isSelectionRequired,\n          keyboardSelectionCursor,\n          currentKey,\n          onChange,\n          onRangeChange\n        );\n        if (!event.shiftKey) {\n          // reset keyboard cursor when using mouse to select\n          keyboardSelectionCursor.current = undefined;\n        }\n      }\n    },\n    [\n      keyExtractor,\n      selectedKeys,\n      selectionMode,\n      selectionBehavior,\n      isSelectionRequired,\n      keyboardSelectionCursor,\n      currentKey,\n      onChange,\n      onRangeChange\n    ]\n  );\n\n  // general keyboard events listen to keyUp for a11y\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      // older browser that we don't support returns 'Spacebar' for space key\n      if (event.key === ' ' || (event.key === 'Enter' && allowEnterKey)) {\n        handleSelect<K>(\n          event,\n          keyExtractor,\n          selectedKeys,\n          selectionMode,\n          selectionBehavior,\n          isSelectionRequired,\n          keyboardSelectionCursor,\n          anchorKey,\n          onChange,\n          event.shiftKey && event.key === ' ' ? onRangeChange : undefined\n        );\n      }\n    },\n    [\n      keyExtractor,\n      selectedKeys,\n      selectionMode,\n      selectionBehavior,\n      isSelectionRequired,\n      anchorKey,\n      onChange,\n      onRangeChange,\n      allowEnterKey\n    ]\n  );\n\n  const { direction } = useUser();\n\n  // arrowKey events listen to keyDown so they can support holding them down\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // prevent default (propagation) for keyDown to space bar causing container to scroll\n      if (event.key === ' ') {\n        event.preventDefault();\n        return;\n      }\n\n      const key = keyboardSelectionCursor.current || currentKey;\n      const isRtl = direction === 'rtl';\n\n      const keyHandlers: Record<string, (() => K | null) | undefined> = {\n        ArrowUp: getVerticalPrevNextKey?.(key, true),\n        ArrowDown: getVerticalPrevNextKey?.(key, false),\n        ArrowLeft: getHorizontalPrevNextKey?.(key, !isRtl),\n        ArrowRight: getHorizontalPrevNextKey?.(key, isRtl)\n      };\n      const isBothDirections = getVerticalPrevNextKey && getHorizontalPrevNextKey;\n      if (Object.keys(keyHandlers).includes(event.key)) {\n        if (event.shiftKey && scrollToKey && selectionMode === 'multiple') {\n          //Avoid increasing range of selection text selection with arrow keys\n          event.preventDefault();\n          let keySet = selectedKeys;\n          // on first selection event, set keyboard cursor to start at currentKey\n          if (!keyboardSelectionCursor.current && isKeyDefined(currentKey)) {\n            keySet = { all: false, keys: new Set([currentKey as K]) };\n          }\n          const newAnchorKey = keyHandlers[event.key];\n          const cursorKey = newAnchorKey?.();\n          if (cursorKey != null) {\n            // keep visible\n            scrollToKey(cursorKey);\n\n            // if in 2D, use range selection to extend or subtract\n            if (isBothDirections) {\n              if (onRangeChange && currentKey != null) {\n                onRangeChange({\n                  value: { start: currentKey, end: cursorKey },\n                  eventType: getEventType(event)\n                });\n              }\n            } else {\n              // extend selection\n              if (!containsKey(keySet, cursorKey)) {\n                keySet = addKey(keySet, cursorKey);\n                // subtract from selection\n              } else if (\n                keyboardSelectionCursor.current != null &&\n                keyboardSelectionCursor.current !== cursorKey\n              ) {\n                keySet = removeKey(keySet, keyboardSelectionCursor.current, isSelectionRequired);\n              }\n              if (selectedKeys != keySet && onChange) {\n                onChange({ value: keySet, target: event.target });\n              }\n            }\n            // update selection cursor\n            keyboardSelectionCursor.current = cursorKey;\n          }\n        } else {\n          // reset keyBoard on non-shifted arrow use as this interrupts the extend mode (and would make for messy logic that doesn't align with current Jet behavior)\n          keyboardSelectionCursor.current = undefined;\n        }\n      }\n    },\n    [\n      selectedKeys,\n      isSelectionRequired,\n      onChange,\n      currentKey,\n      getVerticalPrevNextKey,\n      getHorizontalPrevNextKey,\n      scrollToKey,\n      direction,\n      onRangeChange,\n      selectionMode\n    ]\n  );\n\n  const selectionProps =\n    selectionMode === 'none' || onChange == null\n      ? {}\n      : { onPointerDown, onClick, onKeyDown, onKeyUp };\n  return { selectionProps };\n}\n"],"names":[],"mappings":"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"}
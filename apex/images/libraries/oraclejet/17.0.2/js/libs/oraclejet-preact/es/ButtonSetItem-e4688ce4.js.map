{"version":3,"file":"ButtonSetItem-e4688ce4.js","sources":["../../src/UNSAFE_ButtonSetItem/ButtonSetItem.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\n\nimport { ButtonSetButton } from '../UNSAFE_ButtonSetButton';\nimport { ButtonSetIconButton } from '../UNSAFE_ButtonSetIconButton';\nimport { useCallback } from 'preact/hooks';\n\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { useButtonSetContext } from '../hooks/UNSAFE_useButtonSetContext';\nimport { useButtonSetPositionContext } from '../hooks/UNSAFE_useButtonSetPositionContext';\nimport { toggleButtonSetItem } from '#utils/UNSAFE_buttonUtils';\n\nexport type ButtonSetItemProps = TestIdProps & {\n  /**\n   * Value of the selected buttonSetItem option.\n   */\n  value: string;\n\n  /**\n   * label - label\n   */\n  label?: string;\n\n  /**\n   * The startIcon is the button's start icon.\n   */\n  startIcon?: ComponentChildren;\n\n  /**\n   * The endIcon is the button's end icon.\n   */\n  endIcon?: ComponentChildren;\n\n  /**\n   * Specifies that the ButtonSetSingle element should be disabled.\n   */\n  isDisabled?: boolean;\n};\n\n/**\n * A ButtonSetItem specifies buttons for a buttonset.\n */\nexport const ButtonSetItem = ({ isDisabled: isPropsDisabled, ...props }: ButtonSetItemProps) => {\n  // The buttonSetItem context determines if a buttonset button or icon button rendered\n  // The buttonset context control provides variant, size, isItemDisabled, inputType, inputName. value\n  // The buttonset position control provides position, isSelected,\n  const {\n    display,\n    inputType,\n    isDisabled: isSetDisabled,\n    buttonSetValue,\n    onCommit,\n    ...buttonsetProps\n  } = useButtonSetContext();\n\n  const positionProps = useButtonSetPositionContext();\n  // The property isItemDisabled, if defined, overrides buttonSetItem settings.\n  const isItemDisabled = isPropsDisabled ?? isSetDisabled;\n  const iconProps = {\n    tooltip: props.label,\n    value: props.value\n  };\n\n  const isRadio = inputType === 'radio';\n\n  const onToggleHandlerSingle = useCallback(() => {\n    if (isRadio) {\n      onCommit?.({\n        previousValue: buttonSetValue,\n        value: [props.value]\n      });\n    }\n  }, [buttonSetValue, onCommit, isRadio, props.value]);\n\n  const onToggleHandlerMultiple = useCallback(() => {\n    if (!isRadio) {\n      const newButtonSetValue = toggleButtonSetItem(props.value, buttonSetValue);\n      onCommit?.({\n        previousValue: buttonSetValue,\n        value: newButtonSetValue\n      });\n    }\n  }, [buttonSetValue, onCommit, isRadio, props.value]);\n\n  // When toggled, the button invokes the buttonset commit, which can update the buttonset value, which then\n  // updates the buttonset context buttonSetValue causing this buttonSetItem to render appropriately.\n  return display === 'icons' ? (\n    <ButtonSetIconButton\n      isSelected={isButtonSetItemSelected(props.value, buttonSetValue)}\n      onToggle={isRadio ? onToggleHandlerSingle : onToggleHandlerMultiple}\n      isDisabled={isItemDisabled}\n      {...iconProps}\n      {...positionProps}\n      {...buttonsetProps}>\n      {props.startIcon}\n    </ButtonSetIconButton>\n  ) : (\n    <ButtonSetButton\n      isSelected={isButtonSetItemSelected(props.value, buttonSetValue)}\n      onToggle={isRadio ? onToggleHandlerSingle : onToggleHandlerMultiple}\n      isDisabled={isItemDisabled}\n      {...props}\n      {...positionProps}\n      {...buttonsetProps}></ButtonSetButton>\n  );\n};\n\n/**\n * Check if buttonSetValue contains the buttonSetItem.\n * Note the buttonSetValue can be a set of strings or a string, depending on whether a checkbox or\n * radio type is used.\n * @param buttonSetItemValue\n * @param buttonSetValue\n * @returns\n */\nfunction isButtonSetItemSelected(\n  buttonSetItemValue: string,\n  buttonSetValue: Array<string> | undefined\n): boolean {\n  if (!buttonSetValue) {\n    return false;\n  }\n  return buttonSetValue?.indexOf(buttonSetItemValue) > -1;\n}\n\nButtonSetItem.displayName = 'ButtonSetItem';\n"],"names":["_jsx"],"mappings":";;;;;;;;;;AA6CA;;AAEG;AACI,MAAM,aAAa,GAAG,CAAC,EAAE,UAAU,EAAE,eAAe,EAAE,GAAG,KAAK,EAAsB,KAAI;;;;AAI7F,IAAA,MAAM,EACJ,OAAO,EACP,SAAS,EACT,UAAU,EAAE,aAAa,EACzB,cAAc,EACd,QAAQ,EACR,GAAG,cAAc,EAClB,GAAG,mBAAmB,EAAE,CAAC;AAE1B,IAAA,MAAM,aAAa,GAAG,2BAA2B,EAAE,CAAC;;AAEpD,IAAA,MAAM,cAAc,GAAG,eAAe,IAAI,aAAa,CAAC;AACxD,IAAA,MAAM,SAAS,GAAG;QAChB,OAAO,EAAE,KAAK,CAAC,KAAK;QACpB,KAAK,EAAE,KAAK,CAAC,KAAK;KACnB,CAAC;AAEF,IAAA,MAAM,OAAO,GAAG,SAAS,KAAK,OAAO,CAAC;AAEtC,IAAA,MAAM,qBAAqB,GAAG,WAAW,CAAC,MAAK;QAC7C,IAAI,OAAO,EAAE;AACX,YAAA,QAAQ,GAAG;AACT,gBAAA,aAAa,EAAE,cAAc;AAC7B,gBAAA,KAAK,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC;AACrB,aAAA,CAAC,CAAC;SACJ;AACH,KAAC,EAAE,CAAC,cAAc,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;AAErD,IAAA,MAAM,uBAAuB,GAAG,WAAW,CAAC,MAAK;QAC/C,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,KAAK,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;AAC3E,YAAA,QAAQ,GAAG;AACT,gBAAA,aAAa,EAAE,cAAc;AAC7B,gBAAA,KAAK,EAAE,iBAAiB;AACzB,aAAA,CAAC,CAAC;SACJ;AACH,KAAC,EAAE,CAAC,cAAc,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;;;AAIrD,IAAA,OAAO,OAAO,KAAK,OAAO,IACxBA,GAAC,CAAA,mBAAmB,IAClB,UAAU,EAAE,uBAAuB,CAAC,KAAK,CAAC,KAAK,EAAE,cAAc,CAAC,EAChE,QAAQ,EAAE,OAAO,GAAG,qBAAqB,GAAG,uBAAuB,EACnE,UAAU,EAAE,cAAc,EACtB,GAAA,SAAS,KACT,aAAa,EAAA,GACb,cAAc,EACjB,QAAA,EAAA,KAAK,CAAC,SAAS,GACI,KAEtBA,IAAC,eAAe,EAAA,EACd,UAAU,EAAE,uBAAuB,CAAC,KAAK,CAAC,KAAK,EAAE,cAAc,CAAC,EAChE,QAAQ,EAAE,OAAO,GAAG,qBAAqB,GAAG,uBAAuB,EACnE,UAAU,EAAE,cAAc,EAAA,GACtB,KAAK,EACL,GAAA,aAAa,KACb,cAAc,EAAA,CAAoB,CACzC,CAAC;AACJ,EAAE;AAEF;;;;;;;AAOG;AACH,SAAS,uBAAuB,CAC9B,kBAA0B,EAC1B,cAAyC,EAAA;IAEzC,IAAI,CAAC,cAAc,EAAE;AACnB,QAAA,OAAO,KAAK,CAAC;KACd;IACD,OAAO,cAAc,EAAE,OAAO,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;AAC1D,CAAC;AAED,aAAa,CAAC,WAAW,GAAG,eAAe;;;;"}
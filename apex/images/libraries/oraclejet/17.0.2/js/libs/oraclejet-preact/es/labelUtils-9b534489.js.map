{"version":3,"file":"labelUtils-9b534489.js","sources":["../../src/PRIVATE_Axis/utils/axisDefaults.ts","../../src/PRIVATE_Axis/utils/labelUtils.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport const AXIS_DEFAULTS = {\n  titleGap: 6,\n  labelGap: 6\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { AxisPosition } from '../../utils/UNSAFE_visTypes/chart';\nimport { Dimension } from '../../utils/UNSAFE_visTypes/common';\nimport { AXIS_DEFAULTS } from './axisDefaults';\nimport { VisTextStyle, isHeightOverlap, isWidthOverlap } from '../../utils/UNSAFE_visUtils';\nimport { GetTextDimensionsType, TextDimensions } from '../../hooks/PRIVATE_useTextDimensions';\nimport { getTextInfo } from '../../PRIVATE_VisSVGText';\nimport { TextProps } from '#PRIVATE_VisSVGText/text.types';\n\n/**\n * Calculates the number of skips between axis labels and the dimensions of unskipped labels.\n * @param labels The labels to render.\n * @param getLabelInfo The function that returns dimension of given label.\n * @param isHoriz Whether the axis is horizontal.\n * @param numOfSafeSkips The no of labels to skip safely.\n * @returns\n */\nexport function skipLabelsUniform(\n  labels: (string | undefined)[],\n  getLabelInfo: (\n    label: string | undefined,\n    index: number,\n    isRotated: boolean,\n    allowTruncate: boolean,\n    wrapText: boolean\n  ) => {\n    text: string;\n    lineProps: TextDimensions[];\n    dims: TextDimensions;\n    isTruncated: boolean;\n    didNotFit: boolean;\n    lines: string[];\n  },\n  isHoriz: boolean,\n  isRotated: boolean,\n  autoTruncate: boolean,\n  isWrapAllowed: boolean,\n  numOfSafeSkips?: number\n) {\n  let numOfSkips = numOfSafeSkips || 0;\n  let dimsA: TextDimensions;\n  let dimsB: TextDimensions;\n  const labelsInfo = [getLabelInfo(labels[0], 0, isRotated, autoTruncate, isWrapAllowed)];\n  const isOverlapping = isHoriz ? isWidthOverlap : isHeightOverlap;\n\n  let indexA = 0;\n  let indexB = numOfSkips + 1;\n  while (indexB < labels.length) {\n    const labelsInfoA =\n      labelsInfo[indexA] ||\n      getLabelInfo(labels[indexA], indexA, isRotated, autoTruncate, isWrapAllowed);\n    dimsA = labelsInfoA.dims;\n    if (!labelsInfo[indexA]) {\n      labelsInfo[indexA] = labelsInfoA;\n    }\n    const labelsInfoB =\n      labelsInfo[indexB] ||\n      getLabelInfo(labels[indexB], indexB, isRotated, autoTruncate, isWrapAllowed);\n    dimsB = labelsInfoB.dims;\n    if (!labelsInfo[indexB]) {\n      labelsInfo[indexB] = labelsInfoB;\n    }\n\n    if (isOverlapping(dimsA, dimsB)) {\n      numOfSkips += 1;\n      indexA = 0;\n      indexB = numOfSkips + 1;\n    } else {\n      indexA = indexB;\n      indexB = indexA + numOfSkips + 1;\n    }\n  }\n  return { numOfSkips, labelsInfo };\n}\n\n/**\n * Greedily skip labels. We will skip next label if it overlaps with the previous one.\n * This might not result in uniformly spaced labels.\n * @param labels\n * @param getLabelInfo\n * @param isHoriz\n * @returns\n */\nexport function skipLabelsGreedy(\n  labels: string[],\n  getLabelInfo: (\n    label: string | undefined,\n    index: number,\n    isRotated: boolean,\n    allowTruncate: boolean,\n    wrapText: boolean\n  ) => {\n    text: string;\n    lineProps: TextDimensions[];\n    dims: TextDimensions;\n    isTruncated: boolean;\n    lines: string[];\n    didNotFit: boolean;\n  },\n  isHoriz: boolean,\n  wrapText?: boolean\n) {\n  const isOverlapping = isHoriz ? isWidthOverlap : isHeightOverlap;\n  let currentInfo = getLabelInfo(labels[0], 0, false, false, !!wrapText);\n  const renderedLabels = [\n    {\n      text: currentInfo.text,\n      lines: [currentInfo.text],\n      index: 0,\n      lineProps: [currentInfo.dims],\n      dims: currentInfo.dims\n    }\n  ];\n  let maxWidth = currentInfo.dims.width;\n  let maxHeight = currentInfo.dims.height;\n  for (let j = 1; j < labels.length; j++) {\n    if (!labels[j]) continue;\n    const labelInfo = getLabelInfo(labels[j], j, false, false, !!wrapText);\n    if (!isOverlapping(currentInfo.dims, labelInfo.dims)) {\n      currentInfo = labelInfo;\n      renderedLabels.push({\n        text: labelInfo.text,\n        lines: [labelInfo.text],\n        index: j,\n        dims: labelInfo.dims,\n        lineProps: [labelInfo.dims]\n      });\n\n      maxWidth = Math.max(maxWidth, labelInfo.dims.width);\n      maxHeight = Math.max(maxHeight, labelInfo.dims.height);\n    }\n  }\n  return { tickLabels: renderedLabels, maxWidth, maxHeight };\n}\n\nexport function getDataAxisLabelsInfo(\n  labels: (string | undefined)[],\n  getLabelInfo: (\n    label: string | undefined,\n    index: number,\n    isRotated: boolean,\n    allowTruncate: boolean,\n    wrapText: boolean\n  ) => {\n    text: string;\n    lineProps: TextDimensions[];\n    dims: TextDimensions;\n    isTruncated: boolean;\n    didNotFit: boolean;\n    lines: string[];\n  },\n  isHoriz: boolean\n) {\n  const { numOfSkips, labelsInfo } = skipLabelsUniform(\n    labels,\n    getLabelInfo,\n    isHoriz,\n    false,\n    false,\n    false,\n    0\n  );\n\n  const tickLabels = [];\n  let maxWidth = 0;\n  let maxHeight = 0;\n  let isLabelTruncated = false;\n\n  for (let i = 0; i < labels.length; i += numOfSkips + 1) {\n    maxWidth = Math.max(maxWidth, labelsInfo[i].dims.width);\n    maxHeight = Math.max(maxHeight, labelsInfo[i].dims.height);\n    isLabelTruncated = isLabelTruncated || labelsInfo[i].isTruncated;\n    tickLabels.push({\n      text: labelsInfo[i].text,\n      lines: labelsInfo[i].lines,\n      index: i,\n      dims: labelsInfo[i].dims,\n      lineProps: labelsInfo[i].lineProps\n    });\n  }\n  return {\n    maxWidth,\n    maxHeight,\n    numOfSkips,\n    isLabelTruncated,\n    tickLabels\n  };\n}\n\nexport function getGroupAxisLabelsInfo(\n  labels: (string | undefined)[],\n  getLabelInfo: (\n    label: string | undefined,\n    index: number,\n    isRotated: boolean,\n    allowTruncate: boolean,\n    wrapText: boolean\n  ) => {\n    text: string;\n    lineProps: TextDimensions[];\n    dims: TextDimensions;\n    isTruncated: boolean;\n    didNotFit: boolean;\n    lines: string[];\n    dataProps?: Record<string, string | undefined>;\n  },\n  isHoriz: boolean,\n  autoRotate: boolean,\n  wrapText: boolean,\n  numOfSafeSkips?: number\n) {\n  let isRotated = false;\n\n  /**\n   * 1.First calculate dims of all the labels in horizontal position without\n   *   restriction and calculate the num of skips.\n   * 2.Check if the labels overlap, and hence if we have to skip some labels to\n   *   avoid overlap.\n   * 3.If we had to skip some labels and if wrapping the text is allowed, try\n   *   again horizontally with wrap enabled.\n   * 4.Check again if the labels overlap, or if some text got truncated.Truncation is\n   *   undesirable at this step if rotation is enabled.\n   * 5.If rotation is enabled, rotate the labels and check for overlap again.\n   * 6.After all the steps above, choose the setting that result in minimum number of skips.\n   */\n\n  let { numOfSkips, labelsInfo } = skipLabelsUniform(\n    labels,\n    getLabelInfo,\n    isHoriz,\n    false,\n    false,\n    false,\n    numOfSafeSkips\n  );\n  if (numOfSkips > 0 && wrapText && isHoriz) {\n    const wrapAllowedLabels = skipLabelsUniform(\n      labels,\n      getLabelInfo,\n      isHoriz,\n      false,\n      false,\n      true,\n      numOfSafeSkips\n    );\n\n    const isNotValid = wrapAllowedLabels.labelsInfo.some(\n      (info) => info.isTruncated || info.didNotFit\n    );\n\n    if (!isNotValid && wrapAllowedLabels.numOfSkips < numOfSkips) {\n      numOfSkips = wrapAllowedLabels.numOfSkips;\n      labelsInfo = wrapAllowedLabels.labelsInfo;\n    }\n  }\n\n  if (numOfSkips > 0 && autoRotate) {\n    const skipInfoRotated = skipLabelsUniform(\n      labels,\n      getLabelInfo,\n      isHoriz,\n      true,\n      true,\n      false,\n      numOfSafeSkips\n    );\n    if (skipInfoRotated.numOfSkips < numOfSkips) {\n      numOfSkips = skipInfoRotated.numOfSkips;\n      labelsInfo = skipInfoRotated.labelsInfo;\n      isRotated = true;\n    }\n  }\n\n  const tickLabels = [] as (TextProps & { index: number })[];\n  let maxWidth = 0;\n  let maxHeight = 0;\n\n  for (let i = 0; i < labels.length; i += numOfSkips + 1) {\n    maxWidth = Math.max(maxWidth, labelsInfo[i].dims.width);\n    maxHeight = Math.max(maxHeight, labelsInfo[i].dims.height);\n    tickLabels[i] = {\n      text: labelsInfo[i].text,\n      lines: labelsInfo[i].lines,\n      index: i,\n      dims: labelsInfo[i].dims,\n      lineProps: labelsInfo[i].lineProps,\n      isRotated,\n      isTruncated: labelsInfo[i].isTruncated\n    };\n  }\n\n  return {\n    maxWidth,\n    maxHeight,\n    isRotated,\n    numOfSkips,\n    tickLabels\n  };\n}\n\nexport function updateLabelsDims(\n  maxWidth: number,\n  maxHeight: number,\n  renderedLabelsInfo: any[],\n  getAxisPos: (index: number) => number,\n  availSpace: Dimension,\n  position: AxisPosition\n) {\n  renderedLabelsInfo.forEach((info) => {\n    info.lines.forEach((_: any, index: number) => {\n      const dim = info.lineProps[index];\n      let x: number;\n      let y: number;\n      if (position === 'left') {\n        x = availSpace.x + maxWidth;\n        y = getAxisPos(info.index);\n      } else if (position === 'right') {\n        x = availSpace.x + availSpace.width - maxWidth;\n        y = getAxisPos(info.index);\n      } else if (position === 'top') {\n        x = getAxisPos(info.index);\n        y = availSpace.y + maxHeight - dim.height / 2;\n      } else {\n        x = getAxisPos(info.index);\n        y = availSpace.y + availSpace.height - maxHeight + dim.height / 2 + dim.height * index;\n      }\n      dim.x = x;\n      dim.y = y;\n    });\n\n    const textDim = info.dims;\n\n    let x: number;\n    let y: number;\n    if (position === 'left') {\n      x = availSpace.x + maxWidth;\n      y = getAxisPos(info.index);\n    } else if (position === 'right') {\n      x = availSpace.x + availSpace.width - maxWidth;\n      y = getAxisPos(info.index);\n    } else if (position === 'top') {\n      x = getAxisPos(info.index);\n      y = availSpace.y + maxHeight - textDim.height / 2;\n    } else {\n      x = getAxisPos(info.index);\n      y = availSpace.y + availSpace.height - maxHeight + textDim.height / 2;\n    }\n    textDim.x = x;\n    textDim.y = y;\n  });\n}\n\n/**\n * Updates the given available space after labels are rendered.\n * @param availSpace The avaialable space.\n * @param position The position of the axis.\n * @param maxWidth The maximum width of rendered labels.\n * @param maxHeight The maxium height of the rendered labels.\n */\nexport function updateAvailableSpace(\n  availSpace: Dimension,\n  position: AxisPosition,\n  maxWidth: number,\n  maxHeight: number\n) {\n  if (position == 'left') {\n    availSpace.x += maxWidth;\n    availSpace.width -= maxWidth;\n  } else if (position === 'right') {\n    availSpace.x -= maxWidth;\n  } else if (position === 'top') {\n    availSpace.y += maxHeight;\n    availSpace.height -= maxHeight;\n  } else {\n    availSpace.height -= maxHeight;\n  }\n}\n\n/**\n * Returns the enclosing rect for the label of given dimension.\n * @param dims The dimension\n * @param axisPosition The position of the axis.\n * @returns\n */\nexport function getEnclosingRectDims(dims: Dimension, axisPosition: AxisPosition) {\n  let x: number;\n  let y: number;\n\n  if (axisPosition === 'left') {\n    x = dims.x - dims.width;\n    y = dims.y - dims.height / 2;\n  } else if (axisPosition === 'right') {\n    x = dims.x;\n    y = dims.y - dims.height / 2;\n  } else {\n    x = dims.x - dims.width / 2;\n    y = dims.y - dims.height / 2;\n  }\n  const width = dims.width;\n  const height = dims.height;\n\n  return { x, y, width, height };\n}\n\n/**\n * Retuns the unaligned label dimensions that can be used by skipLabels.\n * @returns\n */\nexport function getTickLabelInfo(\n  coord: number,\n  label: string | undefined,\n  labelStyle: VisTextStyle,\n  isHoriz: boolean,\n  isRotated: boolean,\n  isWrapAllowed: boolean,\n  allowTruncate: boolean,\n  maxWidth: number,\n  maxHeight: number,\n  availSpace: Dimension,\n  getTextDimensions?: GetTextDimensionsType\n) {\n  if (!getTextDimensions || !label) {\n    return {\n      text: '',\n      dims: { width: 0, height: 0, x: 0, y: 0 },\n      isTruncated: false,\n      lines: [],\n      didNotFit: false,\n      lineProps: []\n    };\n  }\n\n  const gap = AXIS_DEFAULTS.labelGap;\n  const availWidth = isRotated ? maxHeight : isWrapAllowed ? maxWidth - gap : maxWidth;\n\n  let width: number, height: number;\n  let isTruncated = false;\n  let lines: string[] = [];\n  let dims: Dimension[] = [];\n  let lineHeight: number;\n  let didNotFit = false;\n\n  const mxHeight = isWrapAllowed ? maxHeight : Infinity;\n\n  if (allowTruncate || isWrapAllowed) {\n    const textInfo = getTextInfo(\n      label,\n      labelStyle,\n      availWidth,\n      mxHeight,\n      isWrapAllowed,\n      getTextDimensions\n    );\n    width = textInfo.width;\n    height = textInfo.height;\n    lines = textInfo.lines;\n    dims = textInfo.dims;\n    isTruncated = textInfo.isTruncated;\n    lineHeight = textInfo.lineHeight;\n    didNotFit = textInfo.didNotFit;\n  } else {\n    dims = [getTextDimensions(label, labelStyle)];\n    width = dims[0].width;\n    height = dims[0].height;\n    lines = [label];\n    isTruncated = false;\n    lineHeight = height;\n  }\n\n  const _labelWidth = isRotated ? height : width;\n  const _labelHeight = isRotated ? width : height;\n\n  const labelWidth = isHoriz ? _labelWidth + gap : _labelWidth;\n  const labelHeight = isHoriz ? _labelHeight : _labelHeight + gap;\n  return {\n    text: label,\n    lines,\n    lineProps: dims.map((dim, i) => ({\n      x: isHoriz ? coord - dim.width / 2 : availSpace.x,\n      width: isRotated ? dim.height : dim.width,\n      height: isRotated ? dim.width : dim.height,\n      y: isHoriz ? availSpace.y + lineHeight * i : coord + dim.height / 2\n    })),\n    isTruncated,\n    didNotFit,\n    dims: {\n      x: isHoriz ? coord - labelWidth / 2 : availSpace.x,\n      width: labelWidth,\n      height: labelHeight,\n      y: isHoriz ? availSpace.y : coord + labelHeight / 2\n    }\n  };\n}\n"],"names":[],"mappings":"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"}
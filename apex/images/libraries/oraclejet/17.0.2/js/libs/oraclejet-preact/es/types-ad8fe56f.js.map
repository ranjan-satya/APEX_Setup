{"version":3,"file":"types-ad8fe56f.js","sources":["../../src/UNSAFE_IntlFormatParse/types.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2019 %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport type FormatterFunc<V> = (value: V) => string;\nexport type ParserFunc<V> = (value: string) => V;\nexport type FormatObj<V> = { format: FormatterFunc<V> };\nexport type ParseObj<V> = { parse: ParserFunc<V> };\n\n// Errors thrown during format or parse include an 'options' object in this shape.\nexport type FormatParseErrorOptions = {\n  cause?: {\n    code: string;\n    parameterMap?: Record<string, string | number>;\n  };\n};\n// Type of error thrown during format or parse.\nexport class FormatParseError extends Error {\n  readonly cause: FormatParseErrorOptions['cause'];\n  constructor(message?: string, options?: FormatParseErrorOptions) {\n    super(message); // 'Error' breaks prototype chain here\n    Object.setPrototypeOf(this, FormatParseError.prototype);\n    this.cause = options?.cause;\n  }\n}\n"],"names":[],"mappings":";AAAA;;;;;;AAMG;AAcH;AACM,MAAO,gBAAiB,SAAQ,KAAK,CAAA;IAEzC,WAAY,CAAA,OAAgB,EAAE,OAAiC,EAAA;AAC7D,QAAA,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,gBAAgB,CAAC,SAAS,CAAC,CAAC;AACxD,QAAA,IAAI,CAAC,KAAK,GAAG,OAAO,EAAE,KAAK,CAAC;KAC7B;AACF;;;;"}
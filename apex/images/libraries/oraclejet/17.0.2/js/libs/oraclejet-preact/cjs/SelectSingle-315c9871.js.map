{"version":3,"file":"SelectSingle-315c9871.js","sources":["../../src/UNSAFE_SelectSingle/SelectSingleDesktopDropdown.tsx","../../src/UNSAFE_SelectSingle/SelectSingleField.tsx","../../src/UNSAFE_SelectSingle/SelectSingleFieldInput.tsx","../../src/UNSAFE_SelectSingle/useMobileDropdown.ts","../../src/UNSAFE_SelectSingle/SelectSingleMobileDropdown.tsx","../../src/UNSAFE_SelectSingle/useDisplayValue.ts","../../src/UNSAFE_SelectSingle/useSelectSingle.ts","../../src/UNSAFE_SelectSingle/SelectSingle.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  DefaultList,\n  Dropdown,\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  LinkItem,\n  preventDefault\n} from '#PRIVATE_SelectCommon';\nimport { Separator } from '#UNSAFE_Separator';\nimport { InlineUserAssistance, UserAssistanceDensityType } from '#UNSAFE_UserAssistance';\nimport { TabbableModeContext } from '#hooks/UNSAFE_useTabbableMode';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { ComponentProps } from 'preact';\nimport { Ref } from 'preact/hooks';\n\ntype PickedDefaultListProps<K extends string | number, D extends Record<string, any>> = Pick<\n  ComponentProps<typeof DefaultList<K, D>>,\n  | 'currentKey'\n  | 'data'\n  | 'itemRenderer'\n  | 'itemText'\n  | 'onCurrentKeyChange'\n  | 'onItemAction'\n  | 'onLoadRange'\n  | 'searchText'\n  | 'selectedKeys'\n>;\n\ntype PickedDropdownProps = Pick<\n  ComponentProps<typeof Dropdown>,\n  'isOpen' | 'onAutoDismiss' | 'onPosition'\n>;\n\ntype PickedInlineUserAssistanceProps = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  'assistiveText' | 'helpSourceLink' | 'helpSourceText'\n>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = PickedDefaultListProps<\n  K,\n  D\n> &\n  PickedDropdownProps &\n  PickedInlineUserAssistanceProps & {\n    dropdownId: string;\n    dropdownRef: Ref<HTMLDivElement>;\n    isAddToListShown?: boolean;\n    isAdvancedSearchShown: boolean;\n    isDisabled?: boolean;\n    isDropdownAbove: boolean;\n    isEmptyResults: boolean;\n    isReadonly?: false;\n    isUserFiltering: boolean;\n    label: string;\n    mainFieldRef: Ref<HTMLDivElement>;\n    onAddToListAction?: () => void;\n    onAdvancedSearchAction?: () => void;\n    userAssistanceDensity?: UserAssistanceDensityType;\n  };\n\nexport function SelectSingleDesktopDropdown<\n  K extends string | number,\n  D extends Record<string, any>\n>({\n  assistiveText,\n  currentKey,\n  data,\n  dropdownId,\n  dropdownRef,\n  helpSourceLink,\n  helpSourceText,\n  isAddToListShown,\n  isAdvancedSearchShown,\n  isDisabled,\n  isDropdownAbove,\n  isEmptyResults,\n  isOpen,\n  isReadonly,\n  isUserFiltering,\n  itemRenderer,\n  itemText,\n  label,\n  mainFieldRef,\n  onAddToListAction,\n  onAdvancedSearchAction,\n  onAutoDismiss,\n  onCurrentKeyChange,\n  onItemAction,\n  onLoadRange,\n  onPosition,\n  searchText,\n  selectedKeys,\n  userAssistanceDensity\n}: Props<K, D>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const dropdownInlineUserAssistance =\n    isOpen &&\n    !isDropdownAbove &&\n    !isDisabled &&\n    !isReadonly &&\n    (assistiveText || helpSourceLink) &&\n    (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n      <TabbableModeContext.Provider value={{ isTabbable: false }}>\n        <DropdownUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          userAssistanceDensity={userAssistanceDensity}\n        />\n      </TabbableModeContext.Provider>\n    ) : undefined;\n\n  const dropdownListContent = isEmptyResults ? (\n    isAddToListShown || isAdvancedSearchShown ? undefined : (\n      <EmptyResults />\n    )\n  ) : (\n    <DefaultList\n      aria-label={label ?? ''}\n      currentItemVariant=\"highlight\"\n      currentKey={currentKey}\n      data={data}\n      itemRenderer={itemRenderer}\n      itemText={itemText}\n      onCurrentKeyChange={onCurrentKeyChange}\n      onItemAction={onItemAction}\n      onLoadRange={onLoadRange}\n      searchText={isUserFiltering ? searchText : undefined}\n      selectedKeys={selectedKeys}\n      selectionMode=\"single\"\n    />\n  );\n\n  const addToListContent = isAddToListShown ? (\n    <LinkItem isHighlighted={isEmptyResults} onAction={onAddToListAction}>\n      {translations.select_addToList()}\n    </LinkItem>\n  ) : undefined;\n\n  const advancedSearchContent = isAdvancedSearchShown ? (\n    <>\n      {!isEmptyResults && (\n        <div onMouseDown={preventDefault}>\n          <Separator />\n        </div>\n      )}\n      <LinkItem isHighlighted={isEmptyResults} onAction={onAdvancedSearchAction}>\n        {translations.select_moreSearchOptions()}\n      </LinkItem>\n    </>\n  ) : undefined;\n\n  return (\n    <Dropdown\n      anchorRef={mainFieldRef}\n      dropdownRef={dropdownRef}\n      id={dropdownId}\n      isOpen={isOpen}\n      onAutoDismiss={onAutoDismiss}\n      onPosition={onPosition}>\n      <DropdownList\n        hasBottomGap={dropdownInlineUserAssistance === undefined}\n        isLoading={data === null}>\n        {dropdownListContent}\n        {addToListContent}\n        {advancedSearchContent}\n      </DropdownList>\n      {dropdownInlineUserAssistance}\n    </Dropdown>\n  );\n}\n","import { DropdownArrow } from '#PRIVATE_SelectCommon';\nimport { IconButton } from '#UNSAFE_IconButton';\nimport { CancelS } from '#UNSAFE_RedwoodIcons/CancelS';\nimport { NavLeft } from '#UNSAFE_RedwoodIcons/NavLeft';\nimport { TextField } from '#UNSAFE_TextField';\nimport { useFormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { ComponentProps } from 'preact';\n\ntype PickedTextFieldProps = Pick<\n  ComponentProps<typeof TextField>,\n  | 'columnSpan'\n  | 'compactUserAssistance'\n  | 'contentVariant'\n  | 'endContent'\n  | 'hasZeroStartMargin'\n  | 'id'\n  | 'inlineUserAssistance'\n  | 'label'\n  | 'labelEdge'\n  | 'labelStartWidth'\n  | 'mainFieldRef'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onKeyDown'\n  | 'onMouseDown'\n  | 'onMouseEnter'\n  | 'onMouseLeave'\n  | 'resize'\n  | 'rootRef'\n  | 'startContent'\n  | 'statusVariant'\n  | 'styleVariant'\n  | 'testId'\n> & {\n  children: ComponentProps<typeof TextField>['mainContent'];\n};\n\ntype Props = PickedTextFieldProps & {\n  hasInsideLabel?: boolean;\n  isBackButtonShown?: boolean;\n  isClearButtonShown?: boolean;\n  isDropdownArrowShown?: boolean;\n  onBackButtonClick?: ComponentProps<typeof IconButton>['onAction'];\n  onClearButtonClick?: ComponentProps<typeof IconButton>['onAction'];\n  onDropdownArrowClick?: ComponentProps<typeof DropdownArrow>['onClick'];\n};\n\nexport function SelectSingleField({\n  children,\n  hasInsideLabel,\n  isBackButtonShown,\n  isClearButtonShown,\n  isDropdownArrowShown,\n  onBackButtonClick,\n  onClearButtonClick,\n  onDropdownArrowClick,\n  ...passThroughTextFieldProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const { isDisabled, isLoading } = useFormFieldContext();\n\n  const startContent = isBackButtonShown ? (\n    <IconButton\n      aria-label={translations.selectMultiple_back()}\n      size=\"xs\"\n      variant=\"ghost\"\n      onAction={onBackButtonClick}>\n      <NavLeft />\n    </IconButton>\n  ) : null;\n\n  const endContent = isLoading ? undefined : (\n    <>\n      {isClearButtonShown && (\n        <IconButton\n          aria-label={translations.formControl_clear()}\n          size=\"sm\"\n          variant=\"ghost\"\n          onAction={onClearButtonClick}>\n          <CancelS />\n        </IconButton>\n      )}\n      {isDropdownArrowShown && (\n        <DropdownArrow\n          isDisabled={isDisabled}\n          onClick={onDropdownArrowClick}\n          testId={`${passThroughTextFieldProps.testId}_dropdownarrow`}\n        />\n      )}\n    </>\n  );\n\n  return (\n    <TextField\n      startContent={startContent}\n      mainContent={children}\n      endContent={endContent}\n      {...passThroughTextFieldProps}\n    />\n  );\n}\n","import { LiveRegion } from '#UNSAFE_LiveRegion';\nimport { TextFieldInput } from '#UNSAFE_TextField';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { ComponentProps, Ref } from 'preact';\n\ntype PickedTextFieldInputProps = Pick<\n  ComponentProps<typeof TextFieldInput>,\n  | 'aria-controls'\n  | 'aria-describedby'\n  | 'aria-expanded'\n  | 'aria-invalid'\n  | 'aria-label'\n  | 'hasEmptyLabel'\n  | 'hasInsideLabel'\n  | 'id'\n  | 'isRequired'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onInput'\n  | 'onKeyDown'\n  | 'onKeyUp'\n  | 'placeholder'\n  | 'textAlign'\n  | 'variant'\n> & {\n  inputRef?: Ref<HTMLInputElement>;\n};\n\ntype Props = PickedTextFieldInputProps & {\n  displayValue: string;\n  isAddToListShown: boolean;\n  isAdvancedSearchShown: boolean;\n  isUserFiltering: boolean;\n  liveRegionText?: string;\n  userInput?: string;\n  virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n};\n\nexport function SelectSingleFieldInput({\n  displayValue,\n  isAddToListShown,\n  isAdvancedSearchShown,\n  isUserFiltering,\n  liveRegionText,\n  userInput,\n  virtualKeyboard,\n  ...passThroughTextFieldInputProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const addToListAccText = translations.select_addToListAvailable();\n  const advancedSearchAccText = translations.select_moreSearchOptionsAvailable();\n\n  return (\n    <>\n      <TextFieldInput\n        {...passThroughTextFieldInputProps}\n        hasEndContent={true}\n        aria-autocomplete=\"list\"\n        autoComplete=\"off\"\n        role=\"combobox\"\n        spellcheck={false}\n        type={virtualKeyboard === 'auto' ? 'search' : virtualKeyboard}\n        value={isUserFiltering ? userInput : displayValue}\n      />\n      <LiveRegion>{liveRegionText}</LiveRegion>\n      {isAddToListShown ? <LiveRegion>{addToListAccText}</LiveRegion> : undefined}\n      {isAdvancedSearchShown ? <LiveRegion>{advancedSearchAccText}</LiveRegion> : undefined}\n    </>\n  );\n}\n","import { useCallback, useEffect, useRef } from 'preact/hooks';\nimport { isSearchTextEmptyOrUndefined } from '#PRIVATE_SelectCommon';\nimport type { useSelectSingle } from './useSelectSingle';\n\ntype PickedPropsFromUseSelectSingle<K, D> = Pick<\n  ReturnType<typeof useSelectSingle<K, D>>,\n  | 'clearValue'\n  | 'inputRef'\n  | 'isDropdownOpen'\n  | 'setDropdownOpen'\n  | 'setUserInput'\n  | 'stopFiltering'\n  | 'userInput'\n>;\nexport type UseMobileDropdownProps<K, D> = PickedPropsFromUseSelectSingle<K, D> & {\n  displayValue: string;\n};\n\nexport function useMobileDropdown<K extends string | number, D>({\n  clearValue,\n  displayValue,\n  inputRef,\n  isDropdownOpen,\n  userInput,\n  setDropdownOpen,\n  stopFiltering,\n  setUserInput\n}: UseMobileDropdownProps<K, D>) {\n  // Create a ref for the input in the dropdown\n  const dropdownInputRef = useRef<HTMLInputElement>(null);\n\n  const closeDropdown = useCallback(() => {\n    setDropdownOpen(false);\n    // stop filtering before closing the dropdown\n    stopFiltering();\n    // revert the focus back to the main field\n    inputRef.current?.focus();\n  }, [inputRef, setDropdownOpen, stopFiltering]);\n\n  const onBackButtonClick = useCallback(() => {\n    closeDropdown();\n  }, [closeDropdown]);\n\n  const onClearButtonClick = useCallback(() => {\n    // reset the user filter and the value of the component\n    stopFiltering();\n    // clear the value but do not close the dropdown\n    clearValue(false);\n    // set focus to the dropdown input field\n    dropdownInputRef.current?.focus();\n  }, [clearValue, stopFiltering]);\n\n  const wasDropdownOpen = useRef(isDropdownOpen);\n  useEffect(() => {\n    // if the dropdown is open, ignore any valueItems update\n    if (isDropdownOpen) {\n      // this dropdown is opened now, so set the focus on the input field\n      setTimeout(() => dropdownInputRef.current?.focus(), 0);\n    }\n    wasDropdownOpen.current = isDropdownOpen;\n  }, [isDropdownOpen]);\n\n  const isInitialRender = useRef(true);\n  if (isInitialRender.current) {\n    isInitialRender.current = false;\n    setUserInput(displayValue);\n  }\n\n  return {\n    selectSingleFieldInputProps: {\n      displayValue: userInput ?? '',\n      hasEmptyLabel: false,\n      hasInsideLabel: true,\n      inputRef: dropdownInputRef,\n      isUserFiltering: true,\n      removeIcon: 'always' as const,\n      userInput\n    },\n    selectSingleFieldProps: {\n      hasInsideLabel: true,\n      isBackButtonShown: true,\n      isClearButtonShown:\n        !isSearchTextEmptyOrUndefined(userInput) || !isSearchTextEmptyOrUndefined(displayValue),\n      isDropdownArrowShown: false,\n      styleVariant: 'embedded' as const,\n      onBackButtonClick,\n      onClearButtonClick\n    }\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  DefaultList,\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  LinkItem,\n  SelectMobileDropdown,\n  preventDefault\n} from '#PRIVATE_SelectCommon';\nimport { Label } from '#UNSAFE_Label';\nimport { Separator } from '#UNSAFE_Separator';\nimport { InlineUserAssistance, UserAssistanceDensityType } from '#UNSAFE_UserAssistance';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useTextField } from '#hooks/UNSAFE_useTextField';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { ComponentProps } from 'preact';\nimport { SelectSingleField } from './SelectSingleField';\nimport { SelectSingleFieldInput } from './SelectSingleFieldInput';\nimport { useMobileDropdown, type UseMobileDropdownProps } from './useMobileDropdown';\nimport { View } from '#UNSAFE_View';\n\ntype SelectSingleFieldInputProps = ComponentProps<typeof SelectSingleFieldInput>;\n\ntype PickedInlineUserAssistanceProps = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  'assistiveText' | 'helpSourceLink' | 'helpSourceText'\n>;\ntype PickedSelectSingleFieldInputProps = Pick<\n  ComponentProps<typeof SelectSingleFieldInput>,\n  | 'aria-describedby'\n  | 'aria-label'\n  | 'displayValue'\n  | 'isAddToListShown'\n  | 'isAdvancedSearchShown'\n  | 'isRequired'\n  | 'isUserFiltering'\n  | 'placeholder'\n  | 'textAlign'\n  | 'virtualKeyboard'\n> & {\n  onFieldBlur?: ComponentProps<typeof SelectSingleFieldInput>['onBlur'];\n  onFieldFocus?: ComponentProps<typeof SelectSingleFieldInput>['onFocus'];\n  onFieldInput?: ComponentProps<typeof SelectSingleFieldInput>['onInput'];\n  onFieldKeyDown?: ComponentProps<typeof SelectSingleFieldInput>['onKeyDown'];\n  onFieldKeyUp?: ComponentProps<typeof SelectSingleFieldInput>['onKeyUp'];\n};\ntype PickedDefaultListProps<K extends string | number, D extends Record<string, any>> = Pick<\n  ComponentProps<typeof DefaultList<K, D>>,\n  | 'currentKey'\n  | 'data'\n  | 'itemRenderer'\n  | 'itemText'\n  | 'onCurrentKeyChange'\n  | 'onItemAction'\n  | 'onLoadRange'\n  | 'searchText'\n  | 'selectedKeys'\n>;\ntype PickedSelectMobileDropdownProps = Pick<ComponentProps<typeof SelectMobileDropdown>, 'isOpen'>;\ntype PickedUseMobileDropdownProps<K, D> = Pick<\n  UseMobileDropdownProps<K, D>,\n  'clearValue' | 'setDropdownOpen' | 'stopFiltering' | 'setUserInput'\n> & {\n  mainFieldInputRef: UseMobileDropdownProps<K, D>['inputRef'];\n};\n\ntype Props<K extends string | number, D extends Record<string, any>> = PickedDefaultListProps<\n  K,\n  D\n> &\n  PickedInlineUserAssistanceProps &\n  PickedSelectMobileDropdownProps &\n  PickedSelectSingleFieldInputProps &\n  PickedUseMobileDropdownProps<K, D> & {\n    dropdownId: string;\n    isEmptyResults: boolean;\n    isFocused: boolean;\n    isLoading: boolean;\n    label: string;\n    liveRegionText?: string;\n\n    onAddToListAction?: () => void;\n    onAdvancedSearchAction?: () => void;\n    propIsLoading?: boolean;\n    userAssistanceDensity?: UserAssistanceDensityType;\n    userInput?: string;\n    virtualKeyboard?: SelectSingleFieldInputProps['virtualKeyboard'];\n  };\n\nexport function SelectSingleMobileDropdown<\n  K extends string | number,\n  D extends Record<string, any>\n>({\n  'aria-describedby': ariaDescribedBy,\n  'aria-label': ariaLabel,\n  assistiveText,\n  clearValue,\n  currentKey,\n  data,\n  displayValue,\n  dropdownId,\n  helpSourceLink,\n  helpSourceText,\n  isAddToListShown,\n  isAdvancedSearchShown,\n  isEmptyResults,\n  isFocused,\n  isLoading,\n  isOpen = false,\n  isRequired,\n  isUserFiltering,\n  itemRenderer,\n  itemText,\n  label,\n  liveRegionText,\n  mainFieldInputRef,\n  onAddToListAction,\n  onAdvancedSearchAction,\n  onCurrentKeyChange,\n  onFieldBlur,\n  onFieldFocus,\n  onFieldInput,\n  onFieldKeyDown,\n  onFieldKeyUp,\n  onItemAction,\n  onLoadRange,\n  placeholder,\n  propIsLoading,\n  searchText,\n  selectedKeys,\n  setDropdownOpen,\n  setUserInput,\n  stopFiltering,\n  textAlign,\n  userAssistanceDensity,\n  userInput,\n  virtualKeyboard\n}: Props<K, D>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n    useTextField({\n      ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: false,\n      isFocused,\n      isLoading,\n      isReadonly: false,\n      isRequiredShown: false,\n      labelEdge: 'inside',\n      styleVariant: 'default',\n      value: ''\n    });\n  const { selectSingleFieldInputProps, selectSingleFieldProps } = useMobileDropdown({\n    clearValue,\n    displayValue,\n    inputRef: mainFieldInputRef,\n    isDropdownOpen: isOpen,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    userInput\n  });\n\n  // JET-54256 - inside label animates up on initial display with selected value\n  // If we're waiting for the selected values to load, the component should look like it\n  // has a value in the meantime.\n  // Use the original propIsLoading instead of isLoading because we don't want to delay\n  // the inside label position by a timer like we do the progressive loading indicator.\n  formFieldContext.hasValue = propIsLoading || formFieldContext.hasValue;\n\n  const mobileDropdownFieldLabelProps = {\n    label: <Label {...labelProps}>{label}</Label>,\n    labelEdge: 'inside' as const\n  };\n\n  const dropdownInlineUserAssistance =\n    isOpen &&\n    (assistiveText || helpSourceLink) &&\n    (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n      <DropdownUserAssistance\n        assistiveText={assistiveText}\n        fieldLabel={label}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        userAssistanceDensity={userAssistanceDensity}\n        {...userAssistanceProps}\n      />\n    ) : undefined;\n\n  const dropdownListContent = isEmptyResults ? (\n    isAddToListShown || isAdvancedSearchShown ? undefined : (\n      <EmptyResults />\n    )\n  ) : (\n    <DefaultList\n      aria-label={label ?? ''}\n      currentKey={currentKey}\n      data={data}\n      itemRenderer={itemRenderer}\n      itemText={itemText}\n      onCurrentKeyChange={onCurrentKeyChange}\n      onItemAction={onItemAction}\n      onLoadRange={onLoadRange}\n      searchText={isUserFiltering ? searchText : undefined}\n      selectedKeys={selectedKeys}\n      selectionMode=\"single\"\n    />\n  );\n\n  const addToListContent = isAddToListShown ? (\n    <LinkItem onAction={onAddToListAction}>{translations.select_addToList()}</LinkItem>\n  ) : undefined;\n\n  const advancedSearchContent = isAdvancedSearchShown ? (\n    <>\n      <div onMouseDown={preventDefault}>\n        <Separator />\n      </div>\n      <LinkItem onAction={onAdvancedSearchAction}>\n        {translations.select_moreSearchOptions()}\n      </LinkItem>\n    </>\n  ) : undefined;\n\n  return (\n    <SelectMobileDropdown\n      header={\n        <FormFieldContext.Provider value={formFieldContext}>\n          <View>\n            <SelectSingleField\n              {...textFieldProps}\n              {...mobileDropdownFieldLabelProps}\n              {...selectSingleFieldProps}\n              onFocus={onFieldFocus}\n              onBlur={onFieldBlur}>\n              <SelectSingleFieldInput\n                {...inputProps}\n                {...selectSingleFieldInputProps}\n                aria-controls={dropdownId}\n                aria-expanded={isOpen}\n                aria-label={ariaLabel}\n                isAddToListShown={isAddToListShown}\n                isAdvancedSearchShown={isAdvancedSearchShown}\n                isRequired={isRequired}\n                liveRegionText={liveRegionText}\n                placeholder={placeholder}\n                textAlign={textAlign}\n                virtualKeyboard={virtualKeyboard}\n                onInput={onFieldInput}\n                onKeyDown={onFieldKeyDown}\n                onKeyUp={onFieldKeyUp}\n              />\n            </SelectSingleField>\n          </View>\n          {dropdownInlineUserAssistance}\n          {advancedSearchContent}\n        </FormFieldContext.Provider>\n      }\n      hasHeaderSeparator={!(isAdvancedSearchShown && isEmptyResults)}\n      id={dropdownId}\n      isOpen={isOpen}>\n      <DropdownList\n        isLoading={data === null}\n        hasTopGap={!(isAddToListShown || isAdvancedSearchShown)}>\n        {dropdownListContent}\n        {addToListContent}\n      </DropdownList>\n    </SelectMobileDropdown>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { renderItemText } from '../PRIVATE_SelectCommon';\n\nexport function useDisplayValue<K, D>(\n  itemText: ItemTextType<K, D>,\n  valueItem?: Item<K, D>\n): string {\n  // create the text displayed in the field from the selected value\n  const displayValue = useMemo(() => {\n    return valueItem === undefined ? '' : renderItemText(valueItem, itemText) ?? '';\n  }, [valueItem, itemText]);\n\n  return displayValue;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { Ref, useCallback, useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useEffectEvent } from '#hooks/PRIVATE_useEffectEvent';\nimport { DataState, ItemActionDetail } from '../UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { isControlOrFunctionKey, KEYS } from '../utils/PRIVATE_keyboardUtils';\nimport {\n  isBeforeDataFetch,\n  isPhone,\n  isSearchTextEmptyOrUndefined,\n  useSelectCommon\n} from '../PRIVATE_SelectCommon';\nimport { SelectSingle } from './SelectSingle';\n\ntype PickedPropsFromSelectSingle = Pick<\n  ComponentProps<typeof SelectSingle>,\n  | 'addToList'\n  | 'advancedSearch'\n  | 'isDisabled'\n  | 'isReadonly'\n  | 'onAddToListAction'\n  | 'onAdvancedSearchAction'\n  | 'onFilter'\n>;\ntype UseSelectSingleProps<K, D> = PickedPropsFromSelectSingle & {\n  data?: DataState<K, D> | null;\n  inputRef: Ref<HTMLInputElement>;\n  isFocused?: boolean;\n  onCommit: (detail: ValueUpdateDetail<K>) => void;\n  valueItem?: Item<K, D>;\n};\n\n/**\n * Hook that manages SelectSingle state and behavior.  This hook creates state variables and\n * event listeners, returning properties to apply to components internally rendered by\n * SelectSingle, as well as state information.\n *\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element.\n * @param isDisabled Specifies whether the component is disabled.\n * @param isFocused Specifies whether the component has focus.\n * @param isReadonly Specifies whether the component is readonly.\n * @param onCommit Callback invoked when the selected value is committed.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n * @param valueItem Specifies the key, data, and optional metadata for the selected value.\n *\n * @returns Properties to apply to internal components that SelectSingle renders, and component\n * state.\n */\nexport function useSelectSingle<K, D>({\n  addToList,\n  advancedSearch,\n  data,\n  inputRef,\n  isDisabled,\n  isFocused: propIsFocused,\n  isReadonly,\n  onAddToListAction,\n  onAdvancedSearchAction,\n  onCommit: propOnCommit,\n  onFilter,\n  valueItem\n}: UseSelectSingleProps<K, D>) {\n  const {\n    currentRow,\n    dropdownRef,\n    getDropdownTabbableElems,\n    handleDropdownArrowClick,\n    handleDropdownAutoDismiss: baseHandleDropdownAutoDismiss,\n    handleDropdownPosition,\n    handleInput,\n    handleMainFieldKeyDown: baseHandleMainFieldKeyDown,\n    handleMainFieldKeyUp,\n    isDropdownAbove,\n    isDropdownOpen,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    onCurrentKeyChange,\n    onMouseDown,\n    searchText,\n    setCurrentRow,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    userInput\n  } = useSelectCommon<K, D>({\n    data,\n    inputRef,\n    isFocused: propIsFocused,\n    onFilter\n  });\n\n  const [selectedKeys, setSelectedKeys] = useState<Set<K>>();\n  const [isBlurClearValue, setBlurClearValue] = useState(false);\n  const [prevIsFocused, setPrevIsFocused] = useState(isFocused);\n  const [isTabbingOutOfDropdown, setTabbingOutOfDropdown] = useState(false);\n\n  // refs used by some of the effects below to determine whether the effect needs to run,\n  // for when the list of dependencies is longer than what we want the trigger to actually be\n  const prevDataRef = useRef(data);\n  const prevDropdownOpenRef = useRef(isDropdownOpen);\n  const prevSearchText = useRef(searchText);\n\n  const isAdvancedSearchShown =\n    advancedSearch === 'on' && isUserFiltering && searchText != null && searchText.length > 0;\n  const isDataFetched = data !== undefined && data !== null && !isBeforeDataFetch<K, D>(data);\n  const isEmptyResults = isDataFetched && data?.totalSize === 0;\n  // advanced search and add to list should not be shown at the same time, so if both are on,\n  // let advanced search win because it is shown more often than add to list in the dropdown\n  // (even when the list is not empty) and its external UI could potentially include the\n  // ability to add to list too\n  const isAddToListShown =\n    addToList === 'on' &&\n    advancedSearch !== 'on' &&\n    isUserFiltering &&\n    searchText != null &&\n    searchText.length > 0 &&\n    isEmptyResults;\n\n  const handleAddToListAction = useCallback(() => {\n    setDropdownOpen(false);\n    stopFiltering();\n    onAddToListAction?.({ searchText: isUserFiltering ? searchText : undefined });\n  }, [isUserFiltering, onAddToListAction, searchText, setDropdownOpen, stopFiltering]);\n\n  const handleAdvancedSearchAction = useCallback(() => {\n    setDropdownOpen(false);\n    stopFiltering();\n    onAdvancedSearchAction?.({ searchText: isUserFiltering ? searchText : undefined });\n  }, [isUserFiltering, onAdvancedSearchAction, searchText, setDropdownOpen, stopFiltering]);\n\n  const onCommit = useCallback(\n    (value?: K) => {\n      propOnCommit?.({\n        value: value,\n        previousValue: valueItem !== undefined ? valueItem.key : undefined\n      });\n    },\n    [propOnCommit, valueItem]\n  );\n\n  const clearValue = useCallback(\n    (shouldCloseDropdown = true) => {\n      if (shouldCloseDropdown) {\n        setDropdownOpen(false);\n      }\n\n      setSelectedKeys(new Set<K>());\n\n      // call the onCommit callback so that the consuming code can update the valueItem\n      onCommit(undefined);\n    },\n    [onCommit, setDropdownOpen]\n  );\n\n  // determine if we need to clear the value because the user has deleted all the text\n  const isClearValueNeeded = useCallback(() => {\n    return isUserFiltering && userInput === '' && valueItem !== undefined;\n  }, [isUserFiltering, userInput, valueItem]);\n\n  const clearValueIfNeeded = useCallback(() => {\n    if (isClearValueNeeded()) {\n      clearValue();\n      return true;\n    }\n    return false;\n  }, [clearValue, isClearValueNeeded]);\n\n  // JET-65757 - Empty value rejected when not confirmed by Enter/Tab\n  // When the field loses focus, check to see if we need to clear the value and set a state flag\n  // to later check in a useEffect.\n  // (We have to make this check outside of the useEffect itself because by the time the useEffect\n  // is called, the state we check here to see if we need to clear the value may have already\n  // been changed.)\n  if (\n    prevIsFocused &&\n    !isFocused &&\n    !isTabbingOutOfDropdown &&\n    !isBlurClearValue &&\n    isClearValueNeeded()\n  ) {\n    setBlurClearValue(true);\n  }\n  // Create this function with useEffectEvent so that it is stable and by itself won't cause\n  // the below dependent useEffect to trigger.\n  const handleBlur_stable = useEffectEvent(() => {\n    // if we need to clear the value, do it now and reset the flag\n    if (isBlurClearValue) {\n      clearValue();\n      setBlurClearValue(false);\n    }\n    // if we were tabbing out of the dropdown, reset the flag now that we've lost focus\n    if (isTabbingOutOfDropdown) {\n      setTabbingOutOfDropdown(false);\n    }\n  });\n  // only run this effect when focus changes (handleBlur_stable has to be listed\n  // as a dependency, but it's stable and won't change across renders)\n  useEffect(() => {\n    if (!isFocused) {\n      handleBlur_stable();\n    }\n  }, [handleBlur_stable, isFocused]);\n\n  // JET-60376 - Evaluate unit test driving strategy for SelectSingle\n  // Add a _changeValue method to the root DOM element so that a test adapter can call it\n  // to simulate the user changing the value, similar to what we do in the core pack select\n  // component test adapters.\n  const textFieldRef = useRef<HTMLElement>();\n  const changeValue = useCallback(\n    (value?: K) => {\n      // we always want this method available on the DOM element so that a test can call it,\n      // but we only want it to change the value when the component is enabled because that's\n      // the only time the user could change the value through the UI\n      if (!isReadonly && !isDisabled) {\n        onCommit(value);\n        return Promise.resolve();\n      }\n      return Promise.reject('Component is readonly or disabled');\n    },\n    [isDisabled, isReadonly, onCommit]\n  );\n  useEffect(() => {\n    const ref = isReadonly ? mainFieldRef : textFieldRef;\n    if (ref.current) {\n      (ref.current as any)._changeValue = changeValue;\n    }\n  }, [changeValue, isReadonly, mainFieldRef]);\n\n  const focusInput = useCallback(() => {\n    inputRef.current?.focus();\n  }, [inputRef]);\n\n  const removeDropdown = useCallback(() => {\n    dropdownRef.current?.parentElement?.removeChild(dropdownRef.current);\n  }, [dropdownRef]);\n\n  const myHandleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        if (event?.type === 'keydown') {\n          const keyboardEvent = event as KeyboardEvent;\n          switch (keyboardEvent.code) {\n            case KEYS.TAB:\n              // if there are multiple tabbable elements in the dropdown, like the list and\n              // the advanced search link, then leave the dropdown open when tabbing among them\n              const isShift = keyboardEvent.shiftKey;\n              const tabbableElems = getDropdownTabbableElems();\n              if (tabbableElems && tabbableElems.length > 1) {\n                const firstTabbableElem = tabbableElems[0];\n                const lastTabbableElem = tabbableElems[tabbableElems.length - 1];\n                // check if tabbing forwards and focus is not on the last tabbable elem or\n                // tabbing backwards and focus is not on the first tabbable elem,\n                // then keep the dropdown open and simply return\n                if (\n                  (!isShift && document.activeElement !== lastTabbableElem) ||\n                  (isShift && document.activeElement !== firstTabbableElem)\n                ) {\n                  setDropdownOpen(true);\n                  return;\n                }\n              }\n\n              // if there is a currentRow in the dropdown, select it and commit it\n              if (\n                currentRow !== undefined &&\n                currentRow.rowKey !== undefined &&\n                data != null &&\n                data.data.length > 0\n              ) {\n                setSelectedKeys(new Set<K>([currentRow.rowKey]));\n                onCommit(currentRow.rowKey);\n\n                // set flag that we're tabbing out of dropdown so that we can check it in a\n                // useEffect that gets executed when we lose focus\n                setTabbingOutOfDropdown(true);\n              }\n\n              // Put focus on an element in the main field, but don't kill the event, so that\n              // the browser can naturally transfer focus to the next focusable item relative\n              // to the element in the main field.\n              focusInput();\n\n              // Remove the dropdown immediately, without waiting for a rerender based on changing\n              // state, so that the open dropdown cannot get focus when the browser handles the\n              // Tab key.\n              removeDropdown();\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    },\n    [\n      currentRow,\n      data,\n      focusInput,\n      getDropdownTabbableElems,\n      isDropdownOpen,\n      onCommit,\n      removeDropdown,\n      setDropdownOpen\n    ]\n  );\n\n  const myHandleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.TAB:\n          // if we're not going to clear the value when the component loses focus,\n          // check whether we need to select the current item\n          const isValueClearedTab = isClearValueNeeded();\n          if (!isValueClearedTab && isDropdownOpen && data != null && data.data.length > 0) {\n            // if there is a currentRow in the dropdown (meaning a highlighted item that would\n            // have keyboard focus if the dropdown list had physical focus, which may be different\n            // from the currently selected item), select it and commit it;\n            // otherwise commit the currently selected value again so that a valueAction event\n            // will be fired\n            if (currentRow !== undefined && currentRow.rowKey !== undefined) {\n              setSelectedKeys(new Set<K>([currentRow.rowKey]));\n              onCommit(currentRow.rowKey);\n            } else {\n              onCommit(valueItem?.key ?? undefined);\n            }\n          }\n\n          // Remove the dropdown immediately, without waiting for a rerender based on changing\n          // state, so that the open dropdown cannot get focus when the browser handles the\n          // Tab key.\n          removeDropdown();\n\n          setDropdownOpen(false);\n          break;\n\n        case KEYS.ENTER:\n          // if this is on a mobile device (only phone and not in tablet devices), do not do anything\n          if (isPhone()) {\n            return;\n          }\n\n          // if add to list is shown, there are no results, so trigger the add to list link\n          if (isAddToListShown) {\n            handleAddToListAction();\n            return;\n          }\n\n          // if advanced search is shown and there are no results, trigger the advanced\n          // search link\n          if (isAdvancedSearchShown && isEmptyResults) {\n            handleAdvancedSearchAction();\n            return;\n          }\n\n          // check whether we need to clear the value;\n          // if not, check whether we need to select the current item\n          const isValueCleared = clearValueIfNeeded();\n          if (!isValueCleared && isDropdownOpen && data != null && data.data.length > 0) {\n            setDropdownOpen(false);\n\n            // after selecting a value, the user is no longer actively filtering, so update related\n            // state accordingly so that the newly selected value appears in the field\n            stopFiltering();\n\n            // if there is a currentRow in the dropdown, select it and commit it;\n            // otherwise commit the currently selected value again\n            if (currentRow !== undefined && currentRow.rowKey !== undefined) {\n              setSelectedKeys(new Set<K>([currentRow.rowKey]));\n              onCommit(currentRow.rowKey);\n            } else {\n              onCommit(valueItem?.key ?? undefined);\n            }\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [\n      clearValueIfNeeded,\n      currentRow,\n      data,\n      handleAddToListAction,\n      handleAdvancedSearchAction,\n      isAddToListShown,\n      isAdvancedSearchShown,\n      isClearValueNeeded,\n      isDropdownOpen,\n      isEmptyResults,\n      onCommit,\n      removeDropdown,\n      setDropdownOpen,\n      stopFiltering,\n      valueItem\n    ]\n  );\n\n  // when the valueItem changes, save the new selectedKeys\n  useEffect(() => {\n    setSelectedKeys(valueItem === undefined ? undefined : new Set([valueItem.key]));\n  }, [valueItem]);\n\n  const onItemAction = useCallback(\n    (detail: ItemActionDetail<K, D>) => {\n      focusInput();\n      setDropdownOpen(false);\n\n      // after selecting a value, the user is no longer actively filtering, so update related\n      // state accordingly so that the newly selected value appears in the field\n      stopFiltering();\n\n      const newKey = detail.context.metadata.key;\n      // update the selectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for a new valueItem to be set\n      setSelectedKeys(new Set([newKey]));\n      // call the onCommit callback so that the consuming code can update the valueItem\n      onCommit(newKey);\n    },\n    [focusInput, onCommit, setDropdownOpen, stopFiltering]\n  );\n\n  useEffect(() => {\n    // only run this effect when data changes because we need to wait for the new set of\n    // filtered data to be set before highlighting the first result\n    if (data === prevDataRef.current) {\n      return;\n    }\n\n    // when filtering, set the first result of the filtered data set to be the current item\n    // (check the data offset so we don't try to highlight again if the user scrolls through\n    // the list and more data is fetched)\n    if (\n      isDropdownOpen &&\n      isUserFiltering &&\n      data != null &&\n      data.offset === 0 &&\n      data.data.length > 0\n    ) {\n      // if there are results and search text, highlight the first row, otherwise clear\n      // an existing highlight\n      setCurrentRow({\n        rowKey: !isSearchTextEmptyOrUndefined(searchText) ? data.data[0].metadata.key : undefined\n      });\n    }\n  }, [data, isDropdownOpen, isUserFiltering, searchText, setCurrentRow]);\n\n  useEffect(() => {\n    // only run this effect when the state of the dropdown changes\n    if (isDropdownOpen === prevDropdownOpenRef.current) {\n      return;\n    }\n\n    // JET-66783 - <oj-c-select-single> scroll position is not at selected item when we open the list second time.\n    // set the current item to the selected item (if there is one)\n    // when the dropdown opens if there is no filter text\n    if (\n      isDropdownOpen &&\n      (!isUserFiltering || searchText === undefined || searchText.length === 0)\n    ) {\n      setCurrentRow({ rowKey: [...(selectedKeys ?? [undefined])][0] });\n    }\n  }, [isDropdownOpen, isUserFiltering, searchText, selectedKeys, setCurrentRow]);\n\n  const dropdownEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onAutoDismiss: baseHandleDropdownAutoDismiss,\n        onPosition: handleDropdownPosition\n      },\n      { onAutoDismiss: myHandleDropdownAutoDismiss }\n    );\n  }, [baseHandleDropdownAutoDismiss, handleDropdownPosition, myHandleDropdownAutoDismiss]);\n\n  const inputEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onInput: handleInput,\n        onKeyDown: baseHandleMainFieldKeyDown,\n        onKeyUp: handleMainFieldKeyUp\n      },\n      { onKeyDown: myHandleMainFieldKeyDown }\n    );\n  }, [baseHandleMainFieldKeyDown, handleInput, handleMainFieldKeyUp, myHandleMainFieldKeyDown]);\n\n  if (isFocused !== prevIsFocused) {\n    setPrevIsFocused(isFocused);\n  }\n\n  // update refs used in some of the above effects in a useEffect on every render so that they\n  // update after the above effects run\n  useEffect(() => {\n    prevDataRef.current = data;\n    prevDropdownOpenRef.current = isDropdownOpen;\n    prevSearchText.current = searchText;\n  });\n\n  return {\n    addToListEventHandlers: {\n      onAction: handleAddToListAction\n    },\n    advancedSearchEventHandlers: {\n      onAction: handleAdvancedSearchAction\n    },\n    collectionProps: {\n      currentKey: currentRow.rowKey,\n      onCurrentKeyChange,\n      onItemAction,\n      selectedKeys\n    },\n    dropdownArrowEventHandlers: {\n      onClick: handleDropdownArrowClick\n    },\n    clearValue,\n    dropdownEventHandlers,\n    dropdownRef,\n    inputEventHandlers,\n    inputRef,\n    isAddToListShown,\n    isAdvancedSearchShown,\n    isDataFetched,\n    isDropdownAbove,\n    isDropdownOpen,\n    isEmptyResults,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    mouseProps: isDisabled || isReadonly ? {} : { onMouseDown },\n    searchText,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    textFieldRef,\n    userInput\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  SelectMobileFieldInput,\n  isBeforeDataFetch,\n  isPhone,\n  isTablet\n} from '#PRIVATE_SelectCommon';\nimport { DataState, ListItemRendererContext, Metadata } from '#UNSAFE_Collection';\nimport { Label } from '#UNSAFE_Label';\nimport { ReadonlyTextField, ReadonlyTextFieldInput } from '#UNSAFE_TextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '#UNSAFE_UserAssistance';\nimport { VirtualizedListView } from '#UNSAFE_VirtualizedListView';\nimport { FocusableHandle, useFocusableTextField } from '#hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useLoadingIndicatorTimer } from '#hooks/UNSAFE_useLoadingIndicatorTimer';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { useTextField } from '#hooks/UNSAFE_useTextField';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { Item } from '#utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '#utils/UNSAFE_selectUtils';\nimport { Size } from '#utils/UNSAFE_size';\nimport { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { ComponentChildren, ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { MutableRef } from 'preact/hooks';\nimport { SelectSingleDesktopDropdown } from './SelectSingleDesktopDropdown';\nimport { SelectSingleField } from './SelectSingleField';\nimport { SelectSingleFieldInput } from './SelectSingleFieldInput';\nimport { SelectSingleMobileDropdown } from './SelectSingleMobileDropdown';\nimport { useDisplayValue } from './useDisplayValue';\nimport { useSelectSingle } from './useSelectSingle';\n\ntype SelectSingleFieldInputProps = ComponentProps<typeof SelectSingleFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\n// pick the props from the ListItemContext instead of extending it directly so that we\n// don't automatically expose any new props that may be added to it\ntype PickedPropsFromListItemContext<K, D> = Pick<ListItemRendererContext<K, D>, 'data' | 'index'>;\ntype SelectionDetail<K> = {\n  value: Set<K>;\n  target: EventTarget | null;\n};\ntype ItemRendererMetadata<K> = Pick<Metadata<K>, 'key' | 'suggestion'>;\ntype ItemRendererProps<K, D> = PickedPropsFromListItemContext<K, D> & {\n  /**\n   * Metadata for the item.\n   */\n  metadata: ItemRendererMetadata<K>;\n  /**\n   * User-entered search text.\n   * This property will be undefined for the default, unfiltered list.\n   */\n  searchText?: string;\n  /**\n   * The selected keys in the dropdown.\n   * This property will be undefined when nothing is selected.\n   */\n  selectedKeys?: Set<K>;\n  /**\n   * Callback function to trigger when the selection changes\n   *\n   * @param detail The selection change details\n   */\n  onSelectionChange: (detail: SelectionDetail<K>) => void;\n};\n\ntype Props<K extends string | number, D extends Record<string, any>> = TestIdProps & {\n  /**\n   * Specifies whether the add to list link is shown in the dropdown when the user filters\n   * and there are no results.\n   * It is up to the application to show its own UI when the link is triggered.\n   *\n   * Advanced search and add to list should not be enabled at the same time.  If both are on,\n   * advanced search will take precedence because the conditions for when it is shown are\n   * more relaxed than add to list and its external UI could also potentially include the\n   * ability to add to list.\n   */\n  addToList?: 'on' | 'off';\n  /**\n   * Specifies whether the advanced search link is shown in the dropdown when the user filters.\n   * It is up to the application to show its own UI when the link is triggered.\n   *\n   * Advanced search and add to list should not be enabled at the same time.  If both are on,\n   * advanced search will take precedence because the conditions for when it is shown are\n   * more relaxed than add to list and its external UI could also potentially include the\n   * ability to add to list.\n   */\n  advancedSearch?: 'on' | 'off';\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: SelectSingleFieldInputProps['aria-describedby'];\n  /**\n   * Text to provide guidance to help the user understand what data to enter or select.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * Specifies data for the dropdown list.\n   *\n   * Note that the <code>itemText</code> property allows for customizing the rendering\n   * of each data item.\n   */\n  data?: DataState<K, D> | null;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is waiting for <code>valueItems</code> to load.\n   * While loading, SelectSingle will show the progressive loading indicator in the text field.\n   */\n  isLoading?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * selected by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be selected by the user.\n   */\n  isRequired?: SelectSingleFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has selected a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Render function for an item in the default list in the dropdown.\n   */\n  itemRenderer?: (itemRendererProps: ItemRendererProps<K, D>) => ComponentChildren;\n  /**\n   * Specifies how to get the text string to render for a data item.\n   * This property can be set to either:\n   * <ul>\n   * <li>a string that specifies the name of a top level data attribute to render as text, or</li>\n   * <li>a callback function that takes a properties object and returns the text string to\n   * display.</li>\n   * </ul>\n   *\n   * This text will be rendered for the selected <code>valueItems</code> of the component.\n   * It will also be rendered for each item in the dropdown.  When rendered for the\n   * dropdown items, default matching search term highlighting will still be applied.\n   */\n  itemText: ItemTextType<K, D>;\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user selects or enters a value.\n   */\n  placeholder?: SelectSingleFieldInputProps['placeholder'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: SelectSingleFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * Specifies the key, data, and optional metadata for the selected value.\n   */\n  valueItem?: Item<K, D>;\n  /**\n   * The style variant of the component.\n   */\n  variant?: SelectSingleFieldInputProps['variant'];\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n  /**\n   * Callback function called when the user triggers the add to list link shown in the dropdown.\n   */\n  onAddToListAction?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback function called when the user triggers the advanced search link shown in the dropdown.\n   */\n  onAdvancedSearchAction?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback invoked when the user commits the selected value.\n   *\n   * The function should set a new <code>valueItem</code> property.\n   */\n  onCommit: (detail: ValueUpdateDetail<K>) => void;\n  /**\n   * Callback function to trigger loading data for the dropdown list, which may or may not be\n   * filtered by user entered search text.\n   *\n   * The function should set a new <code>DataState</code> as the <code>data</code> property.\n   */\n  onFilter?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback function to handle when the viewport of the dropdown list has changed, for example\n   * by scrolling, including the case where the user scrolls to the end of the list and there are\n   * more items to load.\n   *\n   * The function should set a new <code>DataState</code> for the specified range as the\n   * <code>data</code> property.\n   */\n  onLoadRange?: ComponentProps<typeof VirtualizedListView>['onLoadRange'];\n};\n\n/**\n * A SelectSingle is a dropdown list that supports single selection and search filtering.\n */\nexport const SelectSingle = forwardRef(\n  <K extends string | number, D extends Record<string, any>>(\n    {\n      addToList = 'off',\n      advancedSearch = 'off',\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      columnSpan,\n      data,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isLoading: propIsLoading,\n      isReadonly: propIsReadonly,\n      isRequired,\n      isRequiredShown,\n      itemRenderer,\n      itemText,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      onAddToListAction,\n      onAdvancedSearchAction,\n      onCommit,\n      onFilter,\n      onLoadRange,\n      placeholder,\n      testId,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      valueItem,\n      variant = 'default',\n      virtualKeyboard\n    }: Props<K, D>,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const {\n      enabledElementRef,\n      focusProps,\n      isFocused: origIsFocused,\n      readonlyElementRef\n    } = useFocusableTextField<HTMLInputElement, HTMLDivElement>({ isDisabled, isReadonly, ref });\n\n    const {\n      addToListEventHandlers,\n      advancedSearchEventHandlers,\n      clearValue,\n      collectionProps,\n      dropdownArrowEventHandlers,\n      dropdownEventHandlers,\n      dropdownRef,\n      inputEventHandlers,\n      isAddToListShown,\n      isAdvancedSearchShown,\n      isDataFetched,\n      isDropdownAbove,\n      isDropdownOpen,\n      isEmptyResults,\n      isFocused,\n      isUserFiltering,\n      mainFieldRef,\n      mouseProps,\n      searchText,\n      setDropdownOpen,\n      setUserInput,\n      stopFiltering,\n      textFieldRef,\n      userInput\n    } = useSelectSingle<K, D>({\n      addToList,\n      advancedSearch,\n      data,\n      inputRef: enabledElementRef as MutableRef<HTMLInputElement>,\n      isDisabled,\n      isFocused: origIsFocused,\n      isReadonly,\n      onAddToListAction,\n      onAdvancedSearchAction,\n      onCommit,\n      onFilter,\n      valueItem\n    });\n\n    // The incoming propIsLoading tells us that we are in a loading state, but we don't want to\n    // show the loading indicator until after a delay, because showing it immediately could result\n    // in unwanted flashing.  The isLoading var below will be set to true by useLoadingIndicatorTimer\n    // after the delay, when the timer expires, at which point we should show the loading indicator.\n    // If propIsLoading is set to false before the timer expires, then the timer will be cancelled\n    // and no loading indicator will be shown.\n    // (ListView detects its loading state by checking data === null.  While it would be nice for\n    // us to be consistent and check valueItems === null, we need to use a separate isLoading prop.\n    // If valueItems === null triggers our loading state, then the selections in the dropdown\n    // are cleared for that period of time, which is undesirable.)\n    const isLoading = useLoadingIndicatorTimer(propIsLoading ?? false);\n\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isFocused,\n      isLoading,\n      isReadonly,\n      isRequiredShown,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      userAssistanceDensity,\n      value: valueItem !== undefined ? true : undefined\n    });\n\n    // JET-54256 - inside label animates up on initial display with selected value\n    // If we're waiting for the selected values to load, the component should look like it\n    // has a value in the meantime.\n    // Use the original propIsLoading instead of isLoading because we don't want to delay\n    // the inside label position by a timer like we do the progressive loading indicator.\n    formFieldContext.hasValue = propIsLoading || formFieldContext.hasValue;\n\n    const dropdownId = `${baseId}-dropdown`;\n\n    const displayValue = useDisplayValue(itemText, valueItem);\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={mainFieldRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n    if (isReadonly) {\n      const mainContent = (\n        <ReadonlyTextFieldInput\n          aria-describedby={inputProps['aria-describedby']}\n          aria-label={ariaLabel}\n          aria-labelledby={labelProps.id}\n          as=\"div\"\n          elementRef={readonlyElementRef}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n          textAlign={textAlign}\n          value={displayValue}\n        />\n      );\n\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onFocusOut}\n            onFocus={focusProps.onFocusIn}\n            ref={mainFieldRef}\n            mainContent={mainContent}\n            testId={testId}\n            {...fieldLabelProps}></ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const hasInsideLabel = labelComp !== undefined && labelEdge === 'inside';\n    const liveRegionText =\n      isDropdownOpen && isDataFetched\n        ? data?.totalSize === 0\n          ? translations.select_noMatchesFound()\n          : data?.totalSize === 1\n          ? translations.select_oneMatchFound()\n          : data?.sizePrecision === 'exact'\n          ? translations.select_sizeMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n          : translations.select_sizeOrMoreMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n        : '';\n\n    const hasEmptyLabel = label === '' && labelEdge === 'none';\n    // Use the mobile field if the component is being rendered in a phone\n    // and it is not disabled.\n    const isPhoneMainFieldInput = isPhone() && !isDisabled;\n    const mainContent = !isPhoneMainFieldInput ? (\n      <SelectSingleFieldInput\n        aria-controls={dropdownId}\n        aria-expanded={isDropdownOpen}\n        aria-label={ariaLabel}\n        displayValue={displayValue}\n        hasEmptyLabel={label === '' && labelEdge === 'none'}\n        hasInsideLabel={hasInsideLabel}\n        inputRef={enabledElementRef}\n        isAddToListShown={isAddToListShown}\n        isAdvancedSearchShown={isAdvancedSearchShown}\n        isRequired={isRequired}\n        isUserFiltering={isUserFiltering}\n        liveRegionText={liveRegionText}\n        placeholder={placeholder}\n        textAlign={textAlign}\n        userInput={userInput}\n        // In tablet, we would want to show the virtual keyboard\n        virtualKeyboard={isTablet() ? virtualKeyboard : undefined}\n        {...inputProps}\n        {...inputEventHandlers}\n      />\n    ) : (\n      <SelectMobileFieldInput\n        aria-controls={dropdownId}\n        aria-describedby={inputProps['aria-describedby']}\n        aria-expanded={isDropdownOpen}\n        aria-invalid={inputProps['aria-invalid']}\n        aria-label={ariaLabel}\n        aria-labelledby={labelProps.id}\n        displayValue={displayValue}\n        hasEmptyLabel={hasEmptyLabel}\n        hasInsideLabel={hasInsideLabel}\n        isRequired={isRequired}\n        onBlur={inputProps.onBlur}\n        onFocus={inputProps.onFocus}\n        placeholder={placeholder}\n        ref={enabledElementRef as Ref<HTMLDivElement>}\n        textAlign={textAlign}\n        variant={inputProps.variant}\n      />\n    );\n\n    const shouldShowDropdown =\n      isDropdownOpen &&\n      data !== undefined &&\n      (data === null || data.totalSize > 0 || isBeforeDataFetch<K, D>(data) || isEmptyResults);\n    const dropdown = !shouldShowDropdown ? null : isPhone() ? (\n      <SelectSingleMobileDropdown\n        {...collectionProps}\n        aria-describedby={ariaDescribedBy}\n        aria-label={ariaLabel}\n        assistiveText={assistiveText}\n        clearValue={clearValue}\n        data={data}\n        displayValue={displayValue}\n        dropdownId={dropdownId}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        isAddToListShown={isAddToListShown}\n        isAdvancedSearchShown={isAdvancedSearchShown}\n        isEmptyResults={isEmptyResults}\n        isFocused={isFocused}\n        isLoading={isLoading}\n        isOpen={shouldShowDropdown}\n        isRequired={isRequired}\n        isUserFiltering={isUserFiltering}\n        itemRenderer={itemRenderer}\n        itemText={itemText}\n        label={label}\n        liveRegionText={liveRegionText}\n        mainFieldInputRef={enabledElementRef}\n        onAddToListAction={addToListEventHandlers.onAction}\n        onAdvancedSearchAction={advancedSearchEventHandlers.onAction}\n        onFieldBlur={focusProps.onFocusOut}\n        onFieldFocus={focusProps.onFocusIn}\n        onFieldInput={inputEventHandlers.onInput}\n        onFieldKeyDown={inputEventHandlers.onKeyDown}\n        onFieldKeyUp={inputEventHandlers.onKeyUp}\n        onLoadRange={onLoadRange}\n        placeholder={placeholder}\n        propIsLoading={propIsLoading}\n        searchText={searchText}\n        setDropdownOpen={setDropdownOpen}\n        stopFiltering={stopFiltering}\n        setUserInput={setUserInput}\n        textAlign={textAlign}\n        userAssistanceDensity={userAssistanceDensity}\n        userInput={userInput}\n        virtualKeyboard={virtualKeyboard}\n      />\n    ) : (\n      <SelectSingleDesktopDropdown\n        {...collectionProps}\n        {...dropdownEventHandlers}\n        assistiveText={assistiveText}\n        data={data}\n        dropdownId={dropdownId}\n        dropdownRef={dropdownRef}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        isAddToListShown={isAddToListShown}\n        isAdvancedSearchShown={isAdvancedSearchShown}\n        isDisabled={isDisabled}\n        isDropdownAbove={isDropdownAbove}\n        isEmptyResults={isEmptyResults}\n        isOpen={shouldShowDropdown}\n        isReadonly={isReadonly}\n        isUserFiltering={isUserFiltering}\n        itemRenderer={itemRenderer}\n        itemText={itemText}\n        label={label}\n        mainFieldRef={mainFieldRef}\n        onAddToListAction={addToListEventHandlers.onAction}\n        onAdvancedSearchAction={advancedSearchEventHandlers.onAction}\n        onLoadRange={onLoadRange}\n        searchText={searchText}\n        userAssistanceDensity={userAssistanceDensity}\n      />\n    );\n\n    return (\n      <Fragment>\n        <FormFieldContext.Provider value={formFieldContext}>\n          <SelectSingleField\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            hasInsideLabel={hasInsideLabel}\n            inlineUserAssistance={inlineUserAssistance}\n            isDropdownArrowShown={true}\n            mainFieldRef={mainFieldRef}\n            onBlur={focusProps?.onFocusOut}\n            onDropdownArrowClick={dropdownArrowEventHandlers.onClick}\n            onFocus={focusProps?.onFocusIn}\n            rootRef={textFieldRef as Ref<HTMLElement> | undefined}\n            testId={testId}\n            {...textFieldProps}\n            {...fieldLabelProps}\n            {...mouseProps}>\n            {mainContent}\n          </SelectSingleField>\n        </FormFieldContext.Provider>\n        {dropdown}\n      </Fragment>\n    );\n  }\n);\n"],"names":["useTranslationBundle","_jsx","TabbableModeContext","DropdownUserAssistance","EmptyResults","DefaultList","LinkItem","_jsxs","preventDefault","Separator","Dropdown","DropdownList","useFormFieldContext","IconButton","NavLeft","_Fragment","CancelS","DropdownArrow","TextField","TextFieldInput","LiveRegion","useRef","useCallback","useEffect","isSearchTextEmptyOrUndefined","useTextField","Label","SelectMobileDropdown","FormFieldContext","View","useMemo","renderItemText","useSelectCommon","useState","isBeforeDataFetch","useEffectEvent","KEYS","isControlOrFunctionKey","isPhone","mergeProps","forwardRef","useFormContext","useFocusableTextField","useLoadingIndicatorTimer","InlineUserAssistance","CompactUserAssistance","ReadonlyTextFieldInput","ReadonlyTextField","isTablet","SelectMobileFieldInput","Fragment"],"mappings":"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"}
{"version":3,"file":"useSelection-c12f7802.js","sources":["../../src/hooks/PRIVATE_useVisSelection/ClearSelectionButton.tsx","../../src/hooks/PRIVATE_useVisSelection/useClearSelection.tsx","../../src/hooks/PRIVATE_useVisSelection/useSelection.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { BaseButton } from '../../UNSAFE_BaseButton';\nimport { Text } from '#UNSAFE_Text';\nimport { useTranslationBundle } from '../UNSAFE_useTranslationBundle';\nimport type { BundleType } from '../../resources/nls/bundle';\nimport { clearButtonStyles } from './themes/ClearSelection.css';\n\ntype Props = {\n  onAction: () => void;\n};\n\n/**\n * Clear selection button component\n */\nexport const ClearSelectionButton = ({ onAction }: Props) => {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const clearSelectionLabel = `${translations.vis_clearSelection()}`;\n  return (\n    <div class={clearButtonStyles.base}>\n      <BaseButton\n        styling={['default']}\n        elementDetails={{ type: 'span', isFocusable: false, isLabel: true }}\n        variant=\"outlined\"\n        onAction={onAction}>\n        <Text truncation={'ellipsis'} weight={'inherit'}>\n          {clearSelectionLabel}\n        </Text>\n      </BaseButton>\n    </div>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef, useState } from 'preact/hooks';\nimport { ClearSelectionButton } from './ClearSelectionButton';\nimport { Layer } from '../../UNSAFE_Layer';\nimport { Floating } from '../../UNSAFE_Floating';\n\n/**\n * The default offset for clear selection mainAxis.\n */\nconst DEFAULT_OFFSET = 18;\ntype Props = {\n  clearSelection: () => void;\n};\ntype SelectionMode = 'none' | 'single' | 'multiple';\n\nexport function useClearSelection<K>({ clearSelection }: Props) {\n  const [isVisible, setIsVisible] = useState(false);\n  const coordinates = useRef({ x: 0, y: 0 });\n\n  const tryToggleClearButton = (\n    event: PointerEvent,\n    key: K | undefined,\n    selectionMode: SelectionMode,\n    selectedIds: Set<K>\n  ) => {\n    if (\n      event.pointerType === 'touch' &&\n      key === undefined &&\n      selectionMode === 'multiple' &&\n      selectedIds.size > 1\n    ) {\n      setIsVisible(!isVisible);\n      coordinates.current = { x: event.clientX, y: event.clientY };\n      return true;\n    }\n    return false;\n  };\n\n  const offsetValue = { mainAxis: 2 * DEFAULT_OFFSET };\n  const anchorRef = { current: coordinates.current };\n\n  const clearSelectionContent = isVisible ? (\n    <Layer>\n      <Floating\n        anchorRef={anchorRef}\n        offsetValue={offsetValue}\n        placement=\"top\"\n        flipOptions={{ crossAxis: false, mainAxis: false }}\n        shiftOptions={{ crossAxis: true, mainAxis: true }}>\n        <ClearSelectionButton\n          onAction={() => {\n            setIsVisible(false);\n            clearSelection();\n          }}\n        />\n      </Floating>\n    </Layer>\n  ) : null;\n\n  return {\n    clearSelectionContent,\n    tryToggleClearButton\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useCallback, useRef } from 'preact/hooks';\nimport { isEqual } from '../../utils/UNSAFE_visUtils/eventsUtils';\nimport { useClearSelection } from './useClearSelection';\n\nexport type SelectionMode = 'none' | 'single' | 'multiple';\nexport type SelectionDetail<K, D> = {\n  ids: K[];\n  data: (D | undefined)[];\n};\ntype SelectionBehavior = 'toggle' | 'replace';\n\nconst NAVKEYS = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\n/**\n * The constant that defines time to wait to change selection after pointer up is fired.\n * If double click didn't happen\n */\nconst DBLCLICK_THRESHOLD = 250;\n\n/**\n * Handles the selection.\n * @param itemId The id of the item.\n * @param selectedIds The set of selected item ids.\n * @param selectionMode The selection mode.\n * @param selectionBehavior The selection behavior. If 'toggle', unselected item will be selected and\n * vice versa. If 'replace', the item will replace the previous selection.\n * @param getDataById The callback to get item data from idDataMap.\n * @param onChange The callback to trigger when selection changes.\n */\nconst handleSelect = <K, D>(\n  itemId: K | undefined,\n  selectedIds: Set<K>,\n  selectionMode: SelectionMode,\n  selectionBehavior: SelectionBehavior,\n  getDataById: (id: K) => D | undefined,\n  onChange?: (detail: SelectionDetail<K, D>) => void\n) => {\n  let ids = new Set<K>([]);\n  if (itemId != null) {\n    ids = new Set(selectedIds);\n    const isSelected = selectedIds.has(itemId);\n\n    if (selectionBehavior === 'toggle') {\n      if (isSelected) {\n        ids.delete(itemId);\n      } else if (selectionMode === 'single') {\n        ids = new Set([itemId]); // only selection\n      } else {\n        ids.add(itemId); // add to selection in \"multiple\" selectionMode\n      }\n    } else if (!isSelected) {\n      // In \"multiple\" selection mode, only replace selection if unselected item is selected.\n      // In \"single\" selection mode, only need to replace if unselected item is selected.\n      ids = new Set([itemId]);\n    }\n  }\n\n  if (!isEqual<K>(ids, selectedIds)) {\n    onChange?.({ ids: [...ids], data: [...ids].map(getDataById) });\n  }\n};\n\ntype Props<K, D> = {\n  selection?: K[];\n  selectionMode?: SelectionMode;\n  idExtracter: (event: Event) => K | undefined;\n  onChange?: (detail: SelectionDetail<K, D>) => void;\n  isKeyboardSelection?: (event: KeyboardEvent) => boolean;\n  isDrillEnabled?: boolean;\n  getDataById: (id: K) => D | undefined;\n};\n\n/**\n * The hook to handle the selection behavior in vizualization components.\n */\nexport function useSelection<K, D>({\n  selection = [],\n  selectionMode = 'none',\n  idExtracter,\n  onChange,\n  isDrillEnabled,\n  isKeyboardSelection,\n  getDataById\n}: Props<K, D>) {\n  const setTimeOutRef = useRef<ReturnType<typeof setTimeout>>();\n\n  const clearSelection = () => {\n    handleSelect<K, D>(\n      undefined,\n      new Set(selection),\n      selectionMode,\n      'replace',\n      getDataById,\n      onChange\n    );\n  };\n\n  const { clearSelectionContent, tryToggleClearButton } = useClearSelection<K>({ clearSelection });\n\n  const onPointerUp = useCallback(\n    (event: PointerEvent) => {\n      const selectedIds = new Set(selection);\n      if (setTimeOutRef.current && isDrillEnabled) {\n        clearTimeout(setTimeOutRef.current);\n        setTimeOutRef.current = undefined;\n        // doubleClick happened\n        return;\n      }\n\n      const key = idExtracter(event);\n\n      if (tryToggleClearButton(event, key, selectionMode, selectedIds)) {\n        return;\n      }\n\n      const isMeta = event.metaKey;\n      const isCtrl = event.ctrlKey;\n      // If there was a previous pointerUp event that occurred that should prevent selection,\n      // event.preventDefault was called\n      if (event.defaultPrevented || (key == null && (isMeta || isCtrl))) {\n        return;\n      }\n\n      // TODO: Encorporate more logic of dvt.EventManager.prototype._onClick\n      // this is a simple version of EventManager.prototype._onClick. Currently we are not checking\n      // for event.pageX, event.pageY to determine if they are exactly clicked on the same point.\n      // for now, the assumption is that if the pointerups are within 250ms, they are for a same double click.\n      if (isDrillEnabled) {\n        setTimeOutRef.current = setTimeout(() => {\n          // double pointer up didn't happen\n          handleSelect<K, D>(\n            key,\n            selectedIds,\n            selectionMode,\n            isMeta || isCtrl || event.pointerType === 'touch' ? 'toggle' : 'replace',\n            getDataById,\n            onChange\n          );\n          setTimeOutRef.current = undefined;\n        }, DBLCLICK_THRESHOLD);\n      } else {\n        handleSelect<K, D>(\n          key,\n          selectedIds,\n          selectionMode,\n          isMeta || isCtrl || event.pointerType === 'touch' ? 'toggle' : 'replace',\n          getDataById,\n          onChange\n        );\n      }\n    },\n    [\n      selection,\n      selectionMode,\n      onChange,\n      idExtracter,\n      isDrillEnabled,\n      getDataById,\n      tryToggleClearButton\n    ]\n  );\n\n  const onContextMenu = useCallback(\n    (event: MouseEvent) => {\n      const key = idExtracter(event);\n      const isCtrl = event.ctrlKey;\n      handleSelect<K, D>(\n        key,\n        new Set(selection),\n        selectionMode,\n        isCtrl ? 'toggle' : 'replace',\n        getDataById,\n        onChange\n      );\n    },\n    [selection, selectionMode, onChange, idExtracter, getDataById]\n  );\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      const isShift = event.shiftKey;\n      const isSpaceCtrl = event.ctrlKey && event.key === ' ';\n      const isArrowKey = NAVKEYS.indexOf(event.key) !== -1;\n      const itemKey = idExtracter(event);\n\n      if (isArrowKey || isSpaceCtrl || (isKeyboardSelection && isKeyboardSelection(event))) {\n        const behavior = isShift || isSpaceCtrl ? 'toggle' : 'replace';\n        handleSelect<K, D>(\n          itemKey,\n          new Set(selection),\n          selectionMode,\n          behavior,\n          getDataById,\n          onChange\n        );\n      }\n    },\n    [selection, selectionMode, onChange, idExtracter, isKeyboardSelection, getDataById]\n  );\n\n  return {\n    selectionContent: clearSelectionContent,\n    selectionProps:\n      selectionMode === 'none' || onChange == null\n        ? {}\n        : {\n            onKeyUp,\n            onContextMenu,\n            onPointerUp\n          }\n  };\n}\n"],"names":["_jsx"],"mappings":"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"}
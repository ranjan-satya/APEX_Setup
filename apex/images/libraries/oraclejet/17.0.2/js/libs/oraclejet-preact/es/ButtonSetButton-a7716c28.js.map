{"version":3,"file":"ButtonSetButton-a7716c28.js","sources":["../../src/UNSAFE_ButtonSetButton/ButtonSetButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\n\nimport { BaseButton } from '#UNSAFE_BaseButton';\nimport { ToggleDetail } from '#hooks/UNSAFE_useToggleAction';\nimport { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport type { DimensionProps } from '#utils/UNSAFE_interpolations/dimensions';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { useButtonSetContext } from '#hooks/UNSAFE_useButtonSetContext';\nimport { ToggleButtonLabel } from '../UNSAFE_ToggleButtonLabel';\nimport {\n  toggleStyling,\n  processSetButtonProps,\n  LayoutWidths,\n  ButtonSetPosition,\n  type InputTypes,\n  type ButtonIntrinsicProps\n} from '#utils/UNSAFE_buttonUtils';\n\ntype WidthProps = Pick<DimensionProps, 'width'>;\n\nexport type ButtonSetButtonProps = ButtonIntrinsicProps &\n  WidthProps &\n  TestIdProps & {\n    /**\n     * The startIcon is the button's start icon. This should not vary depending on state.\n     */\n    startIcon?: ComponentChildren;\n\n    /**\n     * The endIcon is the button's end icon. This should not vary depending on state.\n     */\n    endIcon?: ComponentChildren;\n\n    /**\n     * Input type indicate if the toggle is intended as a radio or checkbox.\n     */\n    inputType?: InputTypes;\n\n    /**\n     * The name of the input group\n     */\n    inputName?: string;\n\n    /**\n     * Specifies that the buttonsetbutton element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * label - buttonsetbutton label, used for accessibility if no override\n     */\n    label?: string;\n\n    /**\n     * value - buttonsetbutton value\n     */\n    value?: string;\n\n    /**\n     * aria-label - override label for accessibility\n     */\n    'aria-label'?: string;\n\n    /**\n     * Indicates in what states the buttonsetbutton has chrome (background and border).\n     *     \"borderless\"': \"Borderless buttonsetbuttons are a more prominent variation. Borderless\n     * buttonsetbuttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttonsetbuttons are salient, but lighter weight than\n     * solid buttonsetbuttons. Outlined buttonsetbuttons are useful for secondary actions.\",\n     */\n    variant?: 'outlined' | 'borderless';\n\n    /**\n     * The size indicates how large the buttonsetbutton is rendered.\n     */\n    size?: 'sm' | 'md' | 'lg';\n\n    /**\n     * Specifies if the toggle button is selected\n     */\n    isSelected?: boolean;\n\n    /**\n     * The position modifies the borders for usage inside a buttonÂ group.\n     */\n    position?: ButtonSetPosition;\n\n    /**\n     * Property that triggers a callback immediately when toggle happens and value of isSelected property should be updated\n     */\n    onToggle?: (details: ToggleDetail) => void;\n\n    /**\n     * Display indicates whether only the label or all elements should be rendered by the buttonsetbutton.\n     */\n    display?: 'label' | 'all';\n\n    /**\n     * The ID of an element (or space separated IDs of multiple elements) that\n     * describes the buttonsetbutton.\n     */\n    'aria-describedby'?: string;\n\n    /**\n     * The layoutWidth specifies if the toggle button width fits the contents or\n     * the container.\n     */\n    layoutWidth?: LayoutWidths;\n  };\n\n/**\n * Toggle buttons allow users to switch between states when pressed.\n */\nexport const ButtonSetButton = forwardRef(\n  (\n    {\n      startIcon,\n      endIcon,\n      isSelected = false,\n      onToggle,\n      position,\n      autofocus,\n      testId,\n      label,\n      value,\n      'aria-label': accessibleLabel,\n      'aria-describedby': ariaDescribedBy,\n      width,\n      ...props\n    }: ButtonSetButtonProps,\n    ref?: Ref<HTMLButtonElement>\n  ) => {\n    const buttonSetProps = useButtonSetContext();\n    const {\n      inputProps: baseInputProps,\n      buttonSetButtonProps,\n      globalEventProps,\n      isDisabled\n    } = processSetButtonProps(props, buttonSetProps);\n    const inputProps = {\n      ...baseInputProps,\n      display: buttonSetProps.display ?? props.display ?? 'all'\n    };\n\n    const styling = toggleStyling(\n      buttonSetButtonProps.layoutWidth,\n      isSelected,\n      false, // switch\n      true, // label\n      buttonSetButtonProps.variant === 'outlined',\n      position,\n      true, // hasLabel\n      false // iconOnly\n    );\n\n    return (\n      <BaseButton\n        {...mergeProps(globalEventProps, buttonSetButtonProps)}\n        ref={ref as Ref<HTMLButtonElement> & Ref<HTMLAnchorElement> & Ref<HTMLSpanElement>}\n        elementDetails={{ type: 'span', isFocusable: false, isLabel: true }}\n        width={buttonSetProps.width ? '100%' : width}\n        autofocus={autofocus}\n        styling={styling}\n        aria-describedby={ariaDescribedBy}\n        testId={testId}>\n        <ToggleButtonLabel\n          onAction={() => onToggle?.({ value: isSelected })}\n          label={label}\n          isSelected={isSelected}\n          isDisabled={isDisabled}\n          startIcon={startIcon}\n          endIcon={endIcon}\n          value={value}\n          {...inputProps}></ToggleButtonLabel>\n      </BaseButton>\n    );\n  }\n);\n\nButtonSetButton.displayName = 'ButtonSetButton';\n"],"names":["_jsx"],"mappings":";;;;;;;;;;AAsHA;;AAEG;MACU,eAAe,GAAG,UAAU,CACvC,CACE,EACE,SAAS,EACT,OAAO,EACP,UAAU,GAAG,KAAK,EAClB,QAAQ,EACR,QAAQ,EACR,SAAS,EACT,MAAM,EACN,KAAK,EACL,KAAK,EACL,YAAY,EAAE,eAAe,EAC7B,kBAAkB,EAAE,eAAe,EACnC,KAAK,EACL,GAAG,KAAK,EACa,EACvB,GAA4B,KAC1B;AACF,IAAA,MAAM,cAAc,GAAG,mBAAmB,EAAE,CAAC;AAC7C,IAAA,MAAM,EACJ,UAAU,EAAE,cAAc,EAC1B,oBAAoB,EACpB,gBAAgB,EAChB,UAAU,EACX,GAAG,qBAAqB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;AACjD,IAAA,MAAM,UAAU,GAAG;AACjB,QAAA,GAAG,cAAc;QACjB,OAAO,EAAE,cAAc,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK;KAC1D,CAAC;AAEF,IAAA,MAAM,OAAO,GAAG,aAAa,CAC3B,oBAAoB,CAAC,WAAW,EAChC,UAAU,EACV,KAAK;AACL,IAAA,IAAI;IACJ,oBAAoB,CAAC,OAAO,KAAK,UAAU,EAC3C,QAAQ,EACR,IAAI;AACJ,IAAA,KAAK;KACN,CAAC;IAEF,QACEA,IAAC,UAAU,EAAA,EAAA,GACL,UAAU,CAAC,gBAAgB,EAAE,oBAAoB,CAAC,EACtD,GAAG,EAAE,GAA6E,EAClF,cAAc,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EACnE,KAAK,EAAE,cAAc,CAAC,KAAK,GAAG,MAAM,GAAG,KAAK,EAC5C,SAAS,EAAE,SAAS,EACpB,OAAO,EAAE,OAAO,sBACE,eAAe,EACjC,MAAM,EAAE,MAAM,YACdA,GAAC,CAAA,iBAAiB,EAChB,EAAA,QAAQ,EAAE,MAAM,QAAQ,GAAG,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,EACjD,KAAK,EAAE,KAAK,EACZ,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,EACtB,SAAS,EAAE,SAAS,EACpB,OAAO,EAAE,OAAO,EAChB,KAAK,EAAE,KAAK,KACR,UAAU,EAAA,CAAsB,EAC3B,CAAA,EACb;AACJ,CAAC,EACD;AAEF,eAAe,CAAC,WAAW,GAAG,iBAAiB;;;;"}
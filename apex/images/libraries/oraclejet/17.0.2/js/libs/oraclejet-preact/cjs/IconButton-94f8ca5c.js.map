{"version":3,"file":"IconButton-94f8ca5c.js","sources":["../../src/UNSAFE_IconButton/IconButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChild, ComponentProps, Fragment, Ref } from 'preact';\nimport { BaseButton } from '../UNSAFE_BaseButton';\nimport { ButtonLabelLayout } from '../UNSAFE_ButtonLabelLayout';\nimport { forwardRef } from 'preact/compat';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { useTooltip } from '../hooks/UNSAFE_useTooltip';\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport type { ButtonIntrinsicProps } from '../utils/UNSAFE_buttonUtils';\nimport { processGlobals } from '../utils/UNSAFE_buttonUtils';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLButtonElement>, 'autofocus'>;\ntype WidthInterpolationProps = Pick<DimensionProps, 'width'>;\ntype BaseButtonProps = ComponentProps<typeof BaseButton>;\n\ntype BaseProps = IntrinsicProps &\n  ButtonIntrinsicProps &\n  Pick<BaseButtonProps, 'aria-haspopup'> &\n  WidthInterpolationProps & {\n    /**\n     * Specifies the icon for the button.\n     */\n    children?: ComponentChild;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Specifies if repeated events are dispatched for key or pointer held down\n     */\n    isRepeat?: boolean;\n\n    /**\n     * Specifes the button type\n     */\n    type?: 'button' | 'submit';\n\n    /**\n     * The ID of an element (or space separated IDs of multiple elements) that\n     * describes the button.\n     */\n    'aria-describedby'?: string;\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: () => void | null;\n\n    /**\n     * Indicates in what states the button has chrome (background and border).\n     *     \"ghost\": \"Ghost buttons are the least prominent variant. Ghost buttons are\n     * useful for performing low-priority tasks, such as manipulating the UI.\",\n     *     \"borderless\"': \"Borderless buttons are a more prominent variant. Borderless\n     * buttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\",\n     *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n     * complete the action that is the main goal of the page or page section. There\n     * should only be one CTA button on a page at any given time.\",\n     *     \"danger\"': \"A Danger button alerts the user to a dangerous situation.\"\n     */\n    variant?: 'ghost' | 'borderless' | 'outlined' | 'solid' | 'callToAction' | 'danger';\n    /**\n     * The size indicates how large the button is rendered.\n     */\n    size?: 'xs' | 'sm' | 'md' | 'lg';\n  };\n\n/**\n * Note that either an aria-label or tooltip must be specified.\n */\ntype VariationAccessibleLabelProps =\n  | {\n      /**\n       * aria-label - the aria label\n       */\n      'aria-label': string;\n\n      /**\n       * tooltip - overrides the aria-label for the tooltip\n       */\n      tooltip?: string;\n    }\n  | {\n      'aria-label'?: string;\n\n      tooltip: string;\n    };\n/**\n * Icon buttons are buttons that only show an icon and no label. They direct users to initiate or take actions and work with a single tap, click, or keystroke.\n */\nexport const IconButton = forwardRef(\n  (\n    {\n      variant = 'outlined',\n      isDisabled = false,\n      isRepeat = false,\n      size = 'md',\n      type: buttonType = 'button',\n      autofocus,\n      onAction,\n      width,\n      tooltip,\n      testId,\n      'aria-haspopup': ariaHasPopup,\n      'aria-label': accessibleLabel,\n      'aria-describedby': ariaDescribedBy,\n      ...props\n    }: BaseProps & VariationAccessibleLabelProps & TestIdProps,\n    ref?: Ref<HTMLButtonElement>\n  ) => {\n    const { globalEventProps } = processGlobals(props);\n\n    const { tooltipContent, tooltipProps } = useTooltip({\n      text: tooltip ? tooltip : accessibleLabel,\n      isDisabled\n    });\n\n    const elementDetails = {\n      type: 'button' as const,\n      buttonType: buttonType\n    };\n\n    const ariaProps = ariaDescribedBy ? { 'aria-describedby': ariaDescribedBy } : {};\n\n    return (\n      <Fragment>\n        <BaseButton\n          {...mergeProps(tooltipProps, globalEventProps, ariaProps)}\n          ref={ref as Ref<HTMLButtonElement> & Ref<HTMLAnchorElement> & Ref<HTMLSpanElement>}\n          elementDetails={elementDetails}\n          isDisabled={isDisabled}\n          isRepeat={isRepeat}\n          size={size}\n          autofocus={autofocus}\n          variant={variant}\n          width={width}\n          styling={['min']}\n          onAction={onAction}\n          aria-label={accessibleLabel ?? tooltip}\n          aria-haspopup={ariaHasPopup}\n          testId={testId}>\n          <ButtonLabelLayout\n            display={'icons'}\n            startIcon={props.children}\n            size={size}></ButtonLabelLayout>\n        </BaseButton>\n        {tooltipContent}\n      </Fragment>\n    );\n  }\n);\n\nIconButton.displayName = 'IconButton';\n"],"names":["forwardRef","processGlobals","useTooltip","_jsxs","Fragment","_jsx","BaseButton","mergeProps","ButtonLabelLayout"],"mappings":";;;;;;;;;;;;;AAoGA;;AAEG;AACU,MAAA,UAAU,GAAGA,iBAAU,CAClC,CACE,EACE,OAAO,GAAG,UAAU,EACpB,UAAU,GAAG,KAAK,EAClB,QAAQ,GAAG,KAAK,EAChB,IAAI,GAAG,IAAI,EACX,IAAI,EAAE,UAAU,GAAG,QAAQ,EAC3B,SAAS,EACT,QAAQ,EACR,KAAK,EACL,OAAO,EACP,MAAM,EACN,eAAe,EAAE,YAAY,EAC7B,YAAY,EAAE,eAAe,EAC7B,kBAAkB,EAAE,eAAe,EACnC,GAAG,KAAK,EACgD,EAC1D,GAA4B,KAC1B;IACF,MAAM,EAAE,gBAAgB,EAAE,GAAGC,0BAAc,CAAC,KAAK,CAAC,CAAC;AAEnD,IAAA,MAAM,EAAE,cAAc,EAAE,YAAY,EAAE,GAAGC,qBAAU,CAAC;QAClD,IAAI,EAAE,OAAO,GAAG,OAAO,GAAG,eAAe;QACzC,UAAU;AACX,KAAA,CAAC,CAAC;AAEH,IAAA,MAAM,cAAc,GAAG;AACrB,QAAA,IAAI,EAAE,QAAiB;AACvB,QAAA,UAAU,EAAE,UAAU;KACvB,CAAC;AAEF,IAAA,MAAM,SAAS,GAAG,eAAe,GAAG,EAAE,kBAAkB,EAAE,eAAe,EAAE,GAAG,EAAE,CAAC;AAEjF,IAAA,QACEC,eAAC,CAAAC,eAAQ,eACPC,cAAC,CAAAC,qBAAU,OACLC,qBAAU,CAAC,YAAY,EAAE,gBAAgB,EAAE,SAAS,CAAC,EACzD,GAAG,EAAE,GAA6E,EAClF,cAAc,EAAE,cAAc,EAC9B,UAAU,EAAE,UAAU,EACtB,QAAQ,EAAE,QAAQ,EAClB,IAAI,EAAE,IAAI,EACV,SAAS,EAAE,SAAS,EACpB,OAAO,EAAE,OAAO,EAChB,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,CAAC,KAAK,CAAC,EAChB,QAAQ,EAAE,QAAQ,EACN,YAAA,EAAA,eAAe,IAAI,OAAO,EAAA,eAAA,EACvB,YAAY,EAC3B,MAAM,EAAE,MAAM,EAAA,QAAA,EACdF,eAACG,mCAAiB,EAAA,EAChB,OAAO,EAAE,OAAO,EAChB,SAAS,EAAE,KAAK,CAAC,QAAQ,EACzB,IAAI,EAAE,IAAI,EAAsB,CAAA,EAAA,CACvB,EACZ,cAAc,CAAA,EAAA,CACN,EACX;AACJ,CAAC,EACD;AAEF,UAAU,CAAC,WAAW,GAAG,YAAY;;;;"}
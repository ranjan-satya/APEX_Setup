{"version":3,"file":"render-c90e85c7.js","sources":["../../src/__tests__/utils/render.tsx"],"sourcesContent":["import { RenderOptions, RenderResult, render } from '@testing-library/preact';\nimport userEvent from '@testing-library/user-event';\nimport { ComponentProps } from 'preact';\nimport { RootEnvironment, RootEnvironmentProvider } from '../../UNSAFE_Environment';\nimport translations from '../../resources/nls/en/bundle';\n\ntype RootEnvironmentProviderProps = ComponentProps<typeof RootEnvironmentProvider>;\n\nconst defaultEnvironment: Partial<RootEnvironment> = {\n  translations: { '@oracle/oraclejet-preact': translations },\n  mode: 'test'\n};\n\nexport const renderInEnv = (\n  children: RootEnvironmentProviderProps['children'],\n  environment = defaultEnvironment,\n  options?: Omit<RenderOptions, 'queries'>\n) => {\n  // We merge the provided environment with the default environment here. This way tests\n  // can override some part of the environment without having to provide the other parts.\n  // For example, if a test wants to provide `user.locale`, then it can do:\n  //\n  // renderInEnv(<SomeComponent />, { user: { locale: 'en-US' } });\n  //\n  // With this call, the test do not have to provide `translations` and `mode`. The provided\n  // `user` object will be merged with the default environment. The final environment object\n  // will have `translations`, `mode`, and `user` properties specified in it.\n  const mergedEnvironment = { ...defaultEnvironment, ...environment };\n\n  const { rerender: _rerender, ...result } = render(\n    <RootEnvironmentProvider environment={mergedEnvironment}>{children}</RootEnvironmentProvider>,\n    options\n  );\n  const rerender = (children: RootEnvironmentProviderProps['children']) =>\n    _rerender(\n      <RootEnvironmentProvider environment={mergedEnvironment}>{children}</RootEnvironmentProvider>\n    );\n  return { rerender, ...result } as RenderResult;\n};\n\nexport const renderAndSetupInEnv = (...args: Parameters<typeof renderInEnv>) => ({\n  user: userEvent.setup(),\n  ...renderInEnv(...args)\n});\n"],"names":["translations","_jsx"],"mappings":";;;;;;;;AAQA,MAAM,kBAAkB,GAA6B;AACnD,IAAA,YAAY,EAAE,EAAE,0BAA0B,EAAEA,MAAY,EAAE;AAC1D,IAAA,IAAI,EAAE,MAAM;CACb,CAAC;AAEK,MAAM,WAAW,GAAG,CACzB,QAAkD,EAClD,WAAW,GAAG,kBAAkB,EAChC,OAAwC,KACtC;;;;;;;;;;IAUF,MAAM,iBAAiB,GAAG,EAAE,GAAG,kBAAkB,EAAE,GAAG,WAAW,EAAE,CAAC;IAEpE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,MAAM,EAAE,GAAG,MAAM,CAC/CC,IAAC,uBAAuB,EAAA,EAAC,WAAW,EAAE,iBAAiB,EAAA,QAAA,EAAG,QAAQ,EAA2B,CAAA,EAC7F,OAAO,CACR,CAAC;AACF,IAAA,MAAM,QAAQ,GAAG,CAAC,QAAkD,KAClE,SAAS,CACPA,IAAC,uBAAuB,EAAA,EAAC,WAAW,EAAE,iBAAiB,YAAG,QAAQ,EAAA,CAA2B,CAC9F,CAAC;AACJ,IAAA,OAAO,EAAE,QAAQ,EAAE,GAAG,MAAM,EAAkB,CAAC;AACjD,EAAE;AAEW,MAAA,mBAAmB,GAAG,CAAC,GAAG,IAAoC,MAAM;AAC/E,IAAA,IAAI,EAAE,SAAS,CAAC,KAAK,EAAE;AACvB,IAAA,GAAG,WAAW,CAAC,GAAG,IAAI,CAAC;AACxB,CAAA;;;;"}
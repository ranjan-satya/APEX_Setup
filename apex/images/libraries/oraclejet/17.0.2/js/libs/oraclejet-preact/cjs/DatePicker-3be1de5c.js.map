{"version":3,"file":"DatePicker-3be1de5c.js","sources":["../../src/UNSAFE_DatePicker/useDatePickerState.ts","../../src/UNSAFE_DatePicker/useDatePicker.ts","../../src/UNSAFE_DatePicker/TodayButton.tsx","../../src/UNSAFE_DatePicker/DatePicker.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { CalendarDateRequired } from '#utils/UNSAFE_calendarDateUtils';\nimport {\n  addToCalendarDate,\n  addToMonth,\n  addToYear,\n  compareDates,\n  getDaysInMonth\n} from '#utils/UNSAFE_calendarDateUtils';\nimport { useMemo, useReducer, useRef } from 'preact/compat';\n\n// This is the type of the state that is returned from the useDatePickerState reducer.\n// This is a single state that will handle the different views of the DatePicker, the\n// MonthView, the MonthGridView, and the YearGridView. Initially we have implemented\n// the state for the MonthView.\ntype DatePickerState = {\n  /**\n   * Specifies the current view the DatePicker is showing.\n   */\n  currentView: 'monthView' | 'monthsGridView' | 'yearsGridView';\n\n  /**\n   * The focusableDate is the one day in the MonthView that has tabIndex: 0 on it.\n   * If nothing is selected, the DatePicker initially renders\n   * with Today as the focusableDate. The focusableDate doesn't have focus until the user tabs in\n   * to the Month View.\n   * When the user navigates the days with the arrow keys,\n   * the focusableDate changes along with the focusedDate, and they will be the same date.\n   * This is a 'roving' index.\n   * The focusableDate is never undefined.\n   * <p>\n   * If the user keyboards to the next month (Fn+Down Arrow on a Mac),\n   * then the focusableDate and the focusedDate of the next month\n   * is the same day number, or as close as possible to stay in the same month. For example,\n   * if the focusedDate and focusableDate is April 2, 2024, the focusedDate and focusableDate for the next month is May 2, 2024.\n   * If the focusedDate and focusableDate is February 28, 2024, the focusedDate and focusableDate for the next month is March 28, 2024.\n   * If the focusedDate and focusableDate is January 31, 2024, the focusedDate and focusableDate for the next month is February 29, 2024 (2024 is a leap year).\n   * </p>\n   * <p>\n   * If the user clicks the Next Month button in the DatePicker's header, then\n   * there is no date that has focus, so the focusedDate is undefined.\n   * The focusableDate will be set.\n   * For example,\n   * if the focusableDate is April 2, 2024, the focusableDate for the next month is May 2, 2024.\n   * If the focusableDate is February 28, 2024, the focusableDate for the next month is March 28, 2024.\n   * If the focusableDate is January 31, 2024, the focusableDate for the next month is February 29, 2024 (2024 is a leap year).\n   *\n   * </p>\n   */\n  focusableDate: CalendarDateRequired;\n\n  /**\n   * The focusableMonth is the one month in the MonthsGridView that has tabIndex: 0 on it.\n   * If nothing is selected, the DatePicker initially renders with Today's month as the\n   * focusableMonth. The focusableMonth doesn't have focus until the user tabs in\n   * to the Months Grid View.\n   *\n   * When the user navigates the month with the arrow keys, the focusableMonth changes\n   * along with the focusedMonth, and they will be the same date. This is a 'roving' index.\n   *\n   * The focusableMonth is never undefined.\n   */\n  focusableMonth: CalendarDateRequired['month'];\n\n  /**\n   * The focusableYear is the one month in the YearsGridView that has tabIndex: 0 on it.\n   * If nothing is selected, the DatePicker initially renders with Today's month as the\n   * focusableYear. The focusableYear doesn't have focus until the user tabs in\n   * to the Months Grid View.\n   *\n   * When the user navigates the month with the arrow keys, the focusableYear changes\n   * along with the focusedYear, and they will be the same date. This is a 'roving' index.\n   *\n   * The focusableYear is never undefined.\n   */\n  focusableYear: CalendarDateRequired['year'];\n\n  /**\n   * A boolean to indicate if the focus is in the view.\n   */\n  isViewFocused: boolean;\n\n  /**\n   * Specifies whether to hide the previous navigation button is hidden from the header.\n   */\n  isPreviousNavigationButtonHidden: boolean;\n\n  /**\n   * Specifies whether to hide the today navigation button is hidden from the header.\n   */\n  isTodayNavigationButtonHidden: boolean;\n\n  /**\n   * Specifies whether to hide the next navigation button is hidden from the header.\n   */\n  isNextNavigationButtonHidden: boolean;\n};\n\nconst datePickerResetActionTypes = ['reset'] as const;\n\nconst datePickerViewActionTypes = [\n  'monthView',\n  'monthsGridView',\n  'yearsGridView',\n  'viewFocus',\n  'viewBlur'\n] as const;\n\nconst monthViewActionTypes = [\n  'daySelected',\n  'goToToday',\n  'previousDay',\n  'nextDay',\n  'previousWeek',\n  'nextWeek',\n  'previousMonth',\n  'previousMonthAndFocus',\n  'nextMonth',\n  'nextMonthAndFocus',\n  'previousYear',\n  'nextYear',\n  'firstDayOfMonth',\n  'lastDayOfMonth'\n] as const;\n\nconst monthsGridViewActionTypes = [\n  'previousMonthInGridView',\n  'nextMonthInGridView',\n  'previousMonthRowInGridView',\n  'nextMonthRowInGridView',\n  'monthSelected'\n] as const;\n\nconst yearsGridViewActionTypes = [\n  'previousYearInGridView',\n  'nextYearInGridView',\n  'previousYearRowInGridView',\n  'nextYearRowInGridView',\n  'previousDecade',\n  'previousDecadeAndFocus',\n  'nextDecade',\n  'nextDecadeAndFocus',\n  'yearSelected'\n] as const;\n\ntype DatePickerViewActionTypes = (typeof datePickerViewActionTypes)[number];\ntype DatePickerResetActionTypes = (typeof datePickerResetActionTypes)[number];\ntype MonthViewActionTypes = (typeof monthViewActionTypes)[number];\ntype MonthsGridViewActionTypes = (typeof monthsGridViewActionTypes)[number];\ntype YearsGridViewActionTypes = (typeof yearsGridViewActionTypes)[number];\n\n// This is the type of the actions that the hook returns.\ntype DatePickerStateAction = ReturnType<typeof useDatePickerState>['actions'];\n\n// Type for the action of the datePickerReducer.\ntype DatePickerViewAction = {\n  [Type in DatePickerViewActionTypes]: { type: Type; payload?: undefined };\n}[DatePickerViewActionTypes];\n\ntype DatePickerResetAction = {\n  [Type in DatePickerResetActionTypes]: { type: Type; payload: DatePickerState };\n}[DatePickerResetActionTypes];\n\ntype MonthViewAction = {\n  [Type in MonthViewActionTypes]: { type: Type; payload: CalendarDateRequired };\n}[MonthViewActionTypes];\n\ntype MonthsGridViewAction = {\n  [Type in MonthsGridViewActionTypes]: { type: Type; payload: Pick<CalendarDateRequired, 'month'> };\n}[MonthsGridViewActionTypes];\n\ntype YearsGridViewAction = {\n  [Type in YearsGridViewActionTypes]: { type: Type; payload: Pick<CalendarDateRequired, 'year'> };\n}[YearsGridViewActionTypes];\n\ntype DatePickerReducerAction =\n  | DatePickerResetAction\n  | DatePickerViewAction\n  | MonthViewAction\n  | MonthsGridViewAction\n  | YearsGridViewAction;\n\n// A reducer is a plain old function you write that takes the current state,\n// and the action to be processed, and returns the state as it should be, based on that action occurring.\n// The reducer, not the sender,  determines how a given report (action) affects the state.\nconst datePickerReducer = (\n  state: DatePickerState,\n  action: DatePickerReducerAction\n): DatePickerState => {\n  // On mount, the reducer is initialized with initial state derived from the DatePicker's value.\n  // If that value is changed programmatically afterwards, the only way to push that update\n  // into the reducer is to define a \"reset\" action.\n  if (action.type === 'reset') {\n    return action.payload!;\n  }\n\n  switch (action.type) {\n    case 'monthView': {\n      return {\n        ...state,\n        currentView: 'monthView',\n        isViewFocused: false,\n        isNextNavigationButtonHidden: false,\n        isPreviousNavigationButtonHidden: false,\n        isTodayNavigationButtonHidden: false\n      };\n    }\n    case 'monthsGridView': {\n      return {\n        ...state,\n        currentView: 'monthsGridView',\n        focusableMonth: state.focusableDate.month,\n        isViewFocused: false,\n        isNextNavigationButtonHidden: true,\n        isPreviousNavigationButtonHidden: true,\n        isTodayNavigationButtonHidden: true\n      };\n    }\n    case 'yearsGridView': {\n      return {\n        ...state,\n        currentView: 'yearsGridView',\n        focusableYear: state.focusableDate.year,\n        isViewFocused: false,\n        isNextNavigationButtonHidden: false,\n        isPreviousNavigationButtonHidden: false,\n        isTodayNavigationButtonHidden: true\n      };\n    }\n    case 'viewFocus': {\n      return state.isViewFocused ? state : { ...state, isViewFocused: true };\n    }\n    case 'viewBlur': {\n      return state.isViewFocused ? { ...state, isViewFocused: false } : state;\n    }\n    case 'daySelected': {\n      return { ...state, isViewFocused: true, focusableDate: action.payload };\n    }\n    case 'goToToday': {\n      // User clicked on the 'Today' icon, which means they want to navigate to show the month of Today\n      // payload is Today's date. We also set the focus to Today.\n      return { ...state, isViewFocused: true, focusableDate: action.payload };\n    }\n    case 'previousDay': {\n      const previousDay = addToCalendarDate(action.payload, { days: -1 });\n      return { ...state, isViewFocused: true, focusableDate: previousDay };\n    }\n    case 'nextDay': {\n      const nextDay = addToCalendarDate(action.payload, { days: 1 });\n      return { ...state, isViewFocused: true, focusableDate: nextDay };\n    }\n    case 'previousWeek': {\n      const previousDay = addToCalendarDate(action.payload, { days: -7 });\n      return { ...state, isViewFocused: true, focusableDate: previousDay };\n    }\n    case 'nextWeek': {\n      const nextDay = addToCalendarDate(action.payload, { days: 7 });\n      return { ...state, isViewFocused: true, focusableDate: nextDay };\n    }\n    case 'previousMonth':\n    case 'previousMonthAndFocus': {\n      // PageUp moves focus to the previous month.\n      // We also get here if the DatePicker while in month view header's Previous navigation button is pressed.\n      const prevMonth = addToCalendarDate(action.payload, { months: -1 });\n      return {\n        ...state,\n        isViewFocused: action.type === 'previousMonthAndFocus',\n        focusableDate: prevMonth\n      };\n    }\n    case 'nextMonth':\n    case 'nextMonthAndFocus': {\n      // Shift PageDown moves focus to the next month. TODO: Confirm this works on a Windows machine.\n      // Shift Fn Arrow Down works on my Mac.\n      // We also get here if the DatePicker while in month view header's Next navigation button is pressed.\n      const nextMonth = addToCalendarDate(action.payload, { months: 1 });\n      return {\n        ...state,\n        isViewFocused: action.type === 'nextMonthAndFocus',\n        focusableDate: nextMonth\n      };\n    }\n    case 'previousYear': {\n      // Shift Page Up moves focus to the previous year. TODO: Confirm this works on a Windows machine.\n      const previousYear = addToCalendarDate(action.payload, { years: -1 });\n      return { ...state, isViewFocused: true, focusableDate: previousYear };\n    }\n    case 'nextYear': {\n      const nextYear = addToCalendarDate(action.payload, { years: 1 });\n      return { ...state, isViewFocused: true, focusableDate: nextYear };\n    }\n    case 'firstDayOfMonth': {\n      // Home moves focus to the first day of the month (Fn+LeftArrow on a mouse.)\n      const currentDate = action.payload;\n      const firstDayOfMonthDate = {\n        year: currentDate.year,\n        month: currentDate.month,\n        day: 1\n      } as CalendarDateRequired;\n      return { ...state, isViewFocused: true, focusableDate: firstDayOfMonthDate };\n    }\n    case 'lastDayOfMonth': {\n      // End moves focus to the last day of the month\n      const currentDate = action.payload;\n      const lastDay = getDaysInMonth(currentDate.month, currentDate.year);\n      const lastDayOfMonthDate = {\n        year: currentDate.year,\n        month: currentDate.month,\n        day: lastDay\n      } as CalendarDateRequired;\n      return { ...state, isViewFocused: true, focusableDate: lastDayOfMonthDate };\n    }\n\n    case 'previousMonthInGridView': {\n      const previousMonth = addToMonth(action.payload.month, -1);\n      return { ...state, focusableMonth: previousMonth, isViewFocused: true };\n    }\n    case 'previousMonthRowInGridView': {\n      const previousMonth = addToMonth(action.payload.month, -4);\n      return { ...state, focusableMonth: previousMonth, isViewFocused: true };\n    }\n    case 'nextMonthInGridView': {\n      const nextMonth = addToMonth(action.payload.month, 1);\n      return { ...state, focusableMonth: nextMonth, isViewFocused: true };\n    }\n    case 'nextMonthRowInGridView': {\n      const nextMonth = addToMonth(action.payload.month, 4);\n      return { ...state, focusableMonth: nextMonth, isViewFocused: true };\n    }\n    case 'monthSelected': {\n      const monthSteps = action.payload.month - state.focusableDate.month;\n      const goToDate = addToCalendarDate(state.focusableDate, { months: monthSteps });\n      return {\n        ...state,\n        currentView: 'monthView',\n        focusableDate: goToDate,\n        isViewFocused: true,\n        isNextNavigationButtonHidden: false,\n        isPreviousNavigationButtonHidden: false,\n        isTodayNavigationButtonHidden: false\n      };\n    }\n\n    case 'previousYearInGridView': {\n      const previousYear = addToYear(action.payload.year, -1);\n      return { ...state, focusableYear: previousYear, isViewFocused: true };\n    }\n    case 'previousYearRowInGridView': {\n      const previousYear = addToYear(action.payload.year, -4);\n      return { ...state, focusableYear: previousYear, isViewFocused: true };\n    }\n    case 'previousDecade':\n    case 'previousDecadeAndFocus': {\n      const previousYear = addToYear(action.payload.year, -10);\n      return {\n        ...state,\n        focusableYear: previousYear,\n        isViewFocused: action.type === 'previousDecadeAndFocus'\n      };\n    }\n    case 'nextYearInGridView': {\n      const nextYear = addToYear(action.payload.year, 1);\n      return { ...state, focusableYear: nextYear, isViewFocused: true };\n    }\n    case 'nextYearRowInGridView': {\n      const nextYear = addToYear(action.payload.year, 4);\n      return { ...state, focusableYear: nextYear, isViewFocused: true };\n    }\n    case 'nextDecade':\n    case 'nextDecadeAndFocus': {\n      const nextYear = addToYear(action.payload.year, 10);\n      return {\n        ...state,\n        focusableYear: nextYear,\n        isViewFocused: action.type === 'nextDecadeAndFocus'\n      };\n    }\n    case 'yearSelected': {\n      const yearSteps = action.payload.year - state.focusableDate.year;\n      const goToDate = addToCalendarDate(state.focusableDate, { years: yearSteps });\n      return {\n        ...state,\n        currentView: 'monthView',\n        focusableDate: goToDate,\n        isViewFocused: true,\n        isNextNavigationButtonHidden: false,\n        isPreviousNavigationButtonHidden: false,\n        isTodayNavigationButtonHidden: false\n      };\n    }\n    default:\n      return state;\n  }\n};\n\ntype Props = {\n  /**\n   * This becomes the state's focusableDate.\n   */\n  initialFocusableDate: CalendarDateRequired;\n};\n\n/**\n * useDatePickerState takes an object with the initialFocusableDate and\n * determines the initial state; i.e., focusableDate and focusedDate. It returns the state\n * and actions a user can take on the DatePicker that will update the state. The actions are functions\n * that call dispatch with the type and payload.\n * @param param0\n * @returns\n */\nconst useDatePickerState = ({ initialFocusableDate }: Props) => {\n  // Create the initial state to pass to our reducer.\n  const initialState: DatePickerState = {\n    currentView: 'monthView',\n    focusableDate: initialFocusableDate,\n    focusableMonth: initialFocusableDate.month,\n    focusableYear: initialFocusableDate.year,\n    isViewFocused: false,\n    isNextNavigationButtonHidden: false,\n    isPreviousNavigationButtonHidden: false,\n    isTodayNavigationButtonHidden: false\n  };\n\n  const [state, dispatch] = useReducer(datePickerReducer, initialState);\n\n  // initialFocusableDate is the controlled value passed from the parent.\n  const lastValueFromParentRef = useRef<CalendarDateRequired>(initialFocusableDate);\n\n  // If a new value is being pushed from the parent, and that value differs from\n  // the current focusableDate of the reducer, then this is a programmatic update\n  // and we need to call 'reset' to update the reducer state. Otherwise, the only\n  // time the reducer state is updated from the value is on mount.\n  if (compareDates(lastValueFromParentRef.current, initialFocusableDate) !== 0) {\n    lastValueFromParentRef.current = initialFocusableDate;\n    if (compareDates(initialFocusableDate, state.focusableDate) !== 0) {\n      dispatch({ type: 'reset', payload: initialState });\n    }\n  }\n\n  // Using an action creator like this is nice because now each time we want to add an action,\n  // we don't have to remember the action constant to use or how the payload should be structured. (from the redux doc)\n\n  // memoize the actions object since we pass this around to our components.\n  const actions = useMemo(() => {\n    const actionsObject: {\n      [Type in\n        | DatePickerViewActionTypes\n        | MonthViewActionTypes\n        | MonthsGridViewActionTypes\n        | YearsGridViewActionTypes]: (\n        payload: Extract<DatePickerReducerAction, { type: Type }>['payload']\n      ) => void;\n    } = {} as any;\n\n    datePickerViewActionTypes.forEach((type) => {\n      actionsObject[type] = () => dispatch({ type });\n    });\n\n    monthViewActionTypes.forEach((type) => {\n      actionsObject[type] = (\n        payload: Extract<DatePickerReducerAction, { type: MonthViewActionTypes }>['payload']\n      ) => dispatch({ type, payload });\n    });\n\n    monthsGridViewActionTypes.forEach((type) => {\n      actionsObject[type] = (\n        payload: Extract<DatePickerReducerAction, { type: MonthsGridViewActionTypes }>['payload']\n      ) => dispatch({ type, payload });\n    });\n\n    yearsGridViewActionTypes.forEach((type) => {\n      actionsObject[type] = (\n        payload: Extract<DatePickerReducerAction, { type: YearsGridViewActionTypes }>['payload']\n      ) => dispatch({ type, payload });\n    });\n\n    return actionsObject;\n  }, [dispatch]);\n\n  return { state, actions };\n};\n\nexport { useDatePickerState };\nexport type {\n  DatePickerState,\n  DatePickerStateAction,\n  DatePickerViewActionTypes,\n  MonthViewActionTypes,\n  MonthsGridViewActionTypes,\n  YearsGridViewActionTypes\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { MonthView } from '#PRIVATE_MonthView';\nimport type { MonthsGridView, YearsGridView } from '#PRIVATE_MonthYearGridView';\nimport { useFocusWithin } from '#hooks/UNSAFE_useFocusWithin';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport {\n  constrainCalendarDate,\n  getCalendarDateToday,\n  isCalendarDateBefore,\n  type CalendarDateRequired\n} from '#utils/UNSAFE_calendarDateUtils';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { ComponentProps, useCallback, useMemo } from 'preact/compat';\nimport { useDatePickerState } from './useDatePickerState';\n\n/**\n * A map that specifies the selection of the header toggle button based on the\n * view we are in.\n */\nconst headerToggleSelection = {\n  monthView: 'none',\n  monthsGridView: 'month',\n  yearsGridView: 'year'\n} as const;\n\ntype MonthViewProps = ComponentProps<typeof MonthView>;\ntype MonthsGridViewProps = ComponentProps<typeof MonthsGridView>;\ntype YearsGridViewProps = ComponentProps<typeof YearsGridView>;\n\ntype UseDatePickerProps = {\n  isReadonly?: boolean;\n  max?: CalendarDateRequired;\n  min?: CalendarDateRequired;\n  todayTimeZone?: Intl.DateTimeFormatOptions['timeZone'];\n  value?: CalendarDateRequired;\n  onCommit: (detail: ValueUpdateDetail<CalendarDateRequired>) => void;\n};\n\n/**\n * A custom hook that adds functionality to the DatePicker component.\n */\nexport const useDatePicker = ({\n  isReadonly,\n  max,\n  min,\n  todayTimeZone,\n  value,\n  onCommit\n}: UseDatePickerProps) => {\n  // Check for errors first\n  if (min && max && isCalendarDateBefore(max, min)) {\n    throw new Error('DatePicker: min must be equal or less than max.');\n  }\n\n  const todaysDate = getCalendarDateToday(todayTimeZone);\n\n  // We need to make sure that this initialFocusableDate is within the min/max range.\n  // When there is no min or max set, we draw the month of the value if value is set, otherwise we draw today's month.\n  // If the initialFocusableDate is not within the min/max range, then we constrain the calendar date by changing the month to draw\n  // so that the initialFocusableDate is the min date if the initialFocusableDate is < min or the max month if the initialFocusableDate is > max.\n  const initialFocusableDate = useMemo(\n    () => constrainCalendarDate(value ?? todaysDate, min, max),\n    [value, todaysDate, min, max]\n  );\n\n  const { state, actions } = useDatePickerState({ initialFocusableDate });\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const accessibleLabels = {\n    next: translations.datePicker_next(),\n    previous: translations.datePicker_prev(),\n    goToToday: translations.datePicker_goToToday(),\n    today: translations.datePicker_today()\n  };\n\n  const handlers = {\n    /**\n     * Handler for DatePickerHeader.onMonthToggle.\n     * This is used for toggling between the MonthView and\n     * MonthsGridView.\n     */\n    handleMonthToggle: useCallback(() => {\n      if (state.currentView !== 'monthsGridView') {\n        actions.monthsGridView(undefined);\n      } else {\n        actions.monthView(undefined);\n      }\n    }, [actions, state.currentView]),\n\n    /**\n     * Handler for DatePickerHeader.onYearToggle.\n     * This is used for toggling between the MonthView and\n     * YearsGridView.\n     */\n    handleYearToggle: useCallback(() => {\n      if (state.currentView !== 'yearsGridView') {\n        actions.yearsGridView(undefined);\n      } else {\n        actions.monthView(undefined);\n      }\n    }, [actions, state.currentView]),\n\n    /**\n     * Handler for DatePickerHeader.onTodayNavigation.\n     * This is used for navigating to today in the MonthView.\n     */\n    handleTodayNavigation: useCallback(() => {\n      actions.goToToday(todaysDate);\n    }, [actions, todaysDate]),\n\n    /**\n     * Handler for DatePickerHeader.onPreviousNavigation.\n     * This is used for navigating to the previous month in MonthView\n     * and previous decade in YearsGridView.\n     */\n    handlePreviousNavigation: useCallback(() => {\n      if (state.currentView === 'monthView') {\n        return actions.previousMonth(state.focusableDate);\n      }\n\n      if (state.currentView === 'yearsGridView') {\n        return actions.previousDecade({ year: state.focusableYear });\n      }\n    }, [actions, state.currentView, state.focusableDate, state.focusableYear]),\n\n    /**\n     * Handler for DatePickerHeader.onNextNavigation.\n     * This is used for navigating to the next month in MonthView\n     * and next decade in YearsGridView.\n     */\n    handleNextNavigation: useCallback(() => {\n      if (state.currentView === 'monthView') {\n        return actions.nextMonth(state.focusableDate);\n      }\n\n      if (state.currentView === 'yearsGridView') {\n        return actions.nextDecade({ year: state.focusableYear });\n      }\n    }, [actions, state.currentView, state.focusableDate, state.focusableYear]),\n\n    /**\n     * Handler for MonthView.onAction.\n     * This is used for selecting a date in MonthView.\n     */\n    handleMonthViewAction: useCallback<MonthViewProps['onAction']>(\n      (payload) => {\n        if (payload.date === undefined || isReadonly) return;\n        actions.daySelected(payload.date);\n        // We purposely send onCommit even if the value is the same.\n        // The InputDatePicker closes the datepicker when the user commits,\n        // even if it is the already selected date.\n        onCommit?.({ previousValue: value, value: payload.date });\n      },\n      [actions, isReadonly, onCommit, value]\n    ),\n\n    /**\n     * Handler for MonthView.onNavigation.\n     * This is used for navigating in the MonthView like moving around the\n     * dates in the month and going to the prev/next month/year.\n     */\n    handleMonthViewNavigation: useCallback<MonthViewProps['onNavigation']>(\n      (detail) => {\n        switch (detail.direction) {\n          case 'previousMonth':\n            return actions.previousMonthAndFocus(detail.date);\n          case 'nextMonth':\n            return actions.nextMonthAndFocus(detail.date);\n          case 'today':\n            return actions.goToToday(todaysDate);\n          default:\n            return actions[detail.direction](detail.date);\n        }\n      },\n      [actions, todaysDate]\n    ),\n\n    /**\n     * Handler for MonthsGridView.onAction.\n     * This is used for selecting a month in MonthsGridView and navigating to\n     * the selected month in MonthView.\n     */\n    handleMonthsGridViewAction: useCallback<MonthsGridViewProps['onAction']>(\n      (detail) => {\n        actions.monthSelected(detail);\n      },\n      [actions]\n    ),\n\n    /**\n     * Handler for MonthsGridView.onNavigation.\n     * This is used for navigating through the MonthsGridView.\n     */\n    handleMonthsGridViewNavigation: useCallback<MonthsGridViewProps['onNavigation']>(\n      (detail) => {\n        switch (detail.direction) {\n          case 'down':\n            return actions.nextMonthRowInGridView({ month: detail.month });\n          case 'next':\n            return actions.nextMonthInGridView({ month: detail.month });\n          case 'previous':\n            return actions.previousMonthInGridView({ month: detail.month });\n          case 'up':\n            return actions.previousMonthRowInGridView({ month: detail.month });\n        }\n      },\n      [actions]\n    ),\n\n    /**\n     * Handler for YearsGridView.onAction.\n     * This is used for selecting a year in YearsGridView and navigating to\n     * the selected year in MonthView.\n     */\n    handleYearsGridViewAction: useCallback<YearsGridViewProps['onAction']>(\n      (detail) => {\n        actions.yearSelected(detail);\n      },\n      [actions]\n    ),\n\n    /**\n     * Handler for YearsGridView.onNavigation.\n     * This is used for navigating through the YearsGridView.\n     */\n    handleYearsGridViewNavigation: useCallback<YearsGridViewProps['onNavigation']>(\n      (detail) => {\n        switch (detail.direction) {\n          case 'down':\n            return actions.nextYearRowInGridView({ year: detail.year });\n          case 'next':\n            return actions.nextYearInGridView({ year: detail.year });\n          case 'nextDecade':\n            return actions.nextDecadeAndFocus({ year: detail.year });\n          case 'previous':\n            return actions.previousYearInGridView({ year: detail.year });\n          case 'previousDecade':\n            return actions.previousDecadeAndFocus({ year: detail.year });\n          case 'up':\n            return actions.previousYearRowInGridView({ year: detail.year });\n        }\n      },\n      [actions]\n    )\n  };\n\n  const { focusProps } = useFocusWithin({\n    // keep the state in sync with the actual focus state\n    onBlurWithin: useCallback(() => actions.viewBlur(undefined), [actions]),\n    onFocusWithin: useCallback(() => actions.viewFocus(undefined), [actions])\n  });\n\n  return {\n    accessibleLabels,\n    actions,\n    handlers,\n    state,\n    todaysDate,\n    toggleSelection: headerToggleSelection[state.currentView],\n    viewContainerProps: { ...focusProps }\n  };\n};\n","import { Flex } from '#UNSAFE_Flex';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { Button } from '#UNSAFE_Button';\nimport { ComponentProps } from 'preact/compat';\n\ntype ButtonOnAction = NonNullable<ComponentProps<typeof Button>['onAction']>;\n\ntype Props = TestIdProps & {\n  /**\n   * Accessible label for the today navigation button that is in the footer of the DatePicker\n   * in small screens.\n   *\n   * Use this property to provide a screen reader aria-label for the\n   * footer today navigation button.\n   */\n  todayNavigationAriaLabel: string;\n\n  /**\n   * Label for the today navigation button that is in the footer of the DatePicker in small screens.\n   * Use this property to provide a label for the footer today navigation button.\n   */\n  todayNavigationLabel: string;\n\n  /**\n   * A callback function to be called when the today button is clicked. Only\n   * applicable when `isTodayNavigationButtonHidden` is set to `false`.\n   */\n  onTodayNavigationAction?: ButtonOnAction;\n};\n\n/**\n * A Today button. The DatePicker puts this in its footer on small screens.\n * When a user presses the button, the DatePicker navigates to Today and sets focus on Today.\n */\nexport const TodayButton = ({\n  onTodayNavigationAction,\n  testId,\n  todayNavigationAriaLabel,\n  todayNavigationLabel\n}: Props) => {\n  return (\n    <Flex direction=\"column\">\n      <Button\n        testId={testId}\n        label={todayNavigationLabel}\n        aria-label={todayNavigationAriaLabel}\n        size=\"sm\"\n        onAction={onTodayNavigationAction}\n      />\n    </Flex>\n  );\n};\n","import { DatePickerHeader } from '#PRIVATE_DatePickerHeader';\nimport { MonthView } from '#PRIVATE_MonthView';\nimport { MonthsGridView, YearsGridView } from '#PRIVATE_MonthYearGridView';\nimport { Flex } from '#UNSAFE_Flex';\nimport { useTestId, type TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { type CalendarDateRequired } from '#utils/UNSAFE_calendarDateUtils';\nimport type { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { useDatePicker } from './useDatePicker';\nimport { useBreakpointValues } from '#hooks/UNSAFE_useBreakpointValues';\nimport { TodayButton } from './TodayButton';\nimport { datePickerPropVars } from './themes/DatePickerContract.css';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { DatePickerRedwoodTheme } from './themes/redwood/DatePickerTheme';\nimport { Size } from '#utils/UNSAFE_size';\n\nexport type DayFormatOptions = {\n  state: 'enabled' | 'disabled' | 'restricted';\n};\n\ntype Props = TestIdProps & {\n  /**\n   * A function that receives a date and returns an object specifying how to format the provided date.\n   * This function is called for each date that is rendered and this can be used to control how individual\n   * dates are rendered - disabled, restricted, or enabled.\n   * @param date The date to format\n   * @returns The format options\n   */\n  dayFormatter?: (date: CalendarDateRequired) => DayFormatOptions;\n\n  /**\n   * The daysOutsideMonth property affects the day cells that are outside of the current month.\n   * If set to 'hidden', then the days outside of the current month will be hidden.\n   * If set to 'selectable', then the days outside of the current month will be visible and selectable.\n   * This defaults to 'hidden'.\n   */\n  daysOutsideMonth?: 'hidden' | 'selectable';\n\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n\n  /**\n   * The monthAndYearPicker property can be used to specify whether or not the DatePicker should show the\n   * Months Grid View and Years Grid View.\n   */\n  monthAndYearPicker?: 'on' | 'off';\n\n  /**\n   * The maximum selectable date. The max must be equal or greater than the min if they are both specified or an error is thrown.\n   */\n  max?: CalendarDateRequired;\n\n  /**\n   * Specifies the component style maxWidth.\n   * <p>If not specified, defaults to the theme specified maxWidth.<br/>\n   * This attribute accepts values of type:<br/>\n   * 0 | `${number}${CssUnits}` | `${number}x` | `--${string}` | `var($string})` | `${number}%`</p>\n   * <p>When this component is used in composition and the component should take up 100% of the parent container's\n   * width, set maxWidth to '100%'.<br/>\n   * Because there is a theme default value for maxWidth, when setting the width property to achieve a fixed width,\n   * set the maxWidth property to the same value.</p>\n   */\n  maxWidth?: Size;\n\n  /**\n   * The minimum selectable date. The min must be equal or less than the max if they are both specified or an error is thrown.\n   */\n  min?: CalendarDateRequired;\n\n  /**\n   * The todayTimeZone property is used to compute what the highlighted today cell is for the DatePicker.\n   * This defaults to the user's system timezone.\n   * <p>\n   * The only reason an application would set the todayTimeZone property is if they want the\n   * highlighted today cell to be in a different timezone than the user's system's timezone,\n   * like if the user has a preferred timezone that is not where they are physically working.\n   * </p>\n   */\n  todayTimeZone?: Intl.DateTimeFormatOptions['timeZone'];\n\n  /**\n   * Specifies how to render the 'Go to today' button.\n   * <ul>\n   * <li>'visible' - set this property to 'visible' to show the 'Go to today' button.</li>\n   * <li>'hidden' - set this property to 'hidden' to hide the 'Go to today' button.</li>\n   * </ul>\n   */\n  todayButton?: 'visible' | 'hidden';\n\n  /**\n   * The value of the DatePicker. The value property is the date that looks selected in the DatePicker.\n   * If the value is undefined, no day will look selected.\n   * <p>\n   * The DatePicker initially opens to the selected date if there is one and it is within the min/max range.\n   * If there is no value, the DatePicker initially opens to today's month.\n   * </p>\n   */\n  value?: CalendarDateRequired;\n\n  /**\n   * Specifies the component style width.\n   * <p>If not specified, defaults to '100%'.</p>\n   * <p>This attribute accepts values of type:</p>\n   * <p>0 | `${number}${CssUnits}` | `${number}x` | `--${string}`  | `var($string})` | `${number}%`</p>\n   * <br/>\n   * <p>Because there is a theme default value for maxWidth, when setting the width property to achieve a fixed width,\n   * set the maxWidth property to the same value.</p>\n   */\n  width?: Size;\n\n  /**\n   * Callback invoked when the user selects a date in the DatePicker. This callback is called even when the previous\n   * value and the value are the same, that is, when the user selects an already selected date.\n   * The app needs to handle this to write back the controlled 'value' property, or else no date will be shown\n   * to be selected.\n   * If the app is using a DatePicker to control another component, like as a way to navigate an Event Calendar,\n   * then they would listen to the onCommit to get the value of the selected date.\n   */\n  onCommit: (detail: ValueUpdateDetail<CalendarDateRequired>) => void;\n};\n\n/**\n * A DatePicker is a calendar interface that allows users to select a single date.\n */\nexport const DatePicker = ({\n  dayFormatter,\n  daysOutsideMonth,\n  isReadonly = false,\n  monthAndYearPicker = 'on',\n  max,\n  maxWidth,\n  min,\n  value,\n  testId,\n  todayTimeZone,\n  todayButton = 'visible',\n  width,\n  onCommit\n}: Props) => {\n  const { accessibleLabels, handlers, state, todaysDate, toggleSelection, viewContainerProps } =\n    useDatePicker({\n      isReadonly,\n      max,\n      min,\n      todayTimeZone,\n      value,\n      onCommit\n    });\n  const { month, year } = state.focusableDate;\n  const isMonthYearPickerEnabled = monthAndYearPicker === 'on' && !isReadonly;\n  // When the screen is < 360px, we hide the DatePickerHeader's today button and show a Today button\n  // on the bottom of the DatePicker instead.\n  // NOTE: I cannot use xs, sm here since useBreakpointValues's types do not allow it.\n  const shouldShowTodayFooterButton = useBreakpointValues(\n    {\n      sm: true,\n      md: false\n    },\n    { sm: '0px', md: '360px' }\n  );\n\n  const showTodayFooterButton =\n    !state.isTodayNavigationButtonHidden &&\n    shouldShowTodayFooterButton &&\n    todayButton === 'visible';\n\n  // we need to render the baseTheme on the root dom element so that the CSS vars in datePickerPropVars will be defined.\n  const { baseTheme } = useComponentTheme(DatePickerRedwoodTheme);\n\n  const testIdProps = useTestId(testId);\n\n  return (\n    <div class={baseTheme} {...testIdProps}>\n      <Flex\n        direction=\"column\"\n        gap={\n          state.currentView === 'monthView'\n            ? datePickerPropVars.calendarGridRowGap\n            : datePickerPropVars.monthYearGridRowGap\n        }\n        height={\n          showTodayFooterButton\n            ? datePickerPropVars.todayFooterButtonHeight\n            : datePickerPropVars.height\n        }\n        width={width !== undefined ? width : datePickerPropVars.width}\n        maxWidth={maxWidth !== undefined ? maxWidth : datePickerPropVars.maxWidth}>\n        <DatePickerHeader\n          testId={testId ? testId + '_header' : undefined}\n          month={month}\n          year={year}\n          isPreviousNavigationButtonHidden={state.isPreviousNavigationButtonHidden}\n          isTodayNavigationButtonHidden={\n            todayButton === 'hidden' ||\n            state.isTodayNavigationButtonHidden ||\n            shouldShowTodayFooterButton\n          }\n          isNextNavigationButtonHidden={state.isNextNavigationButtonHidden}\n          monthYearHeader={isMonthYearPickerEnabled ? 'independentButtons' : 'text'}\n          toggleSelection={isMonthYearPickerEnabled ? toggleSelection : undefined}\n          previousNavigationAccessibleLabel={accessibleLabels.previous}\n          todayNavigationAccessibleLabel={accessibleLabels.goToToday}\n          nextNavigationAccessibleLabel={accessibleLabels.next}\n          onTodayNavigationAction={handlers.handleTodayNavigation}\n          onPreviousNavigationAction={handlers.handlePreviousNavigation}\n          onNextNavigationAction={handlers.handleNextNavigation}\n          onMonthToggle={isMonthYearPickerEnabled ? handlers.handleMonthToggle : undefined}\n          onYearToggle={isMonthYearPickerEnabled ? handlers.handleYearToggle : undefined}\n        />\n        <div {...viewContainerProps}>\n          {state.currentView === 'monthView' && (\n            <MonthView\n              dayFormatter={dayFormatter}\n              daysOutsideMonth={daysOutsideMonth}\n              isReadonly={isReadonly}\n              max={max}\n              min={min}\n              selectedDate={value}\n              focusableDate={state.focusableDate}\n              isFocused={state.isViewFocused}\n              testId={testId ? testId + '_monthView' : undefined}\n              todaysDate={todaysDate}\n              onNavigation={handlers.handleMonthViewNavigation}\n              onAction={handlers.handleMonthViewAction}\n            />\n          )}\n          {state.currentView === 'monthsGridView' && (\n            <MonthsGridView\n              currentMonth={todaysDate.month}\n              focusableMonth={state.focusableMonth}\n              isFocused={state.isViewFocused}\n              selectedMonth={month}\n              testId={testId ? testId + '_monthsGridView' : undefined}\n              onAction={handlers.handleMonthsGridViewAction}\n              onNavigation={handlers.handleMonthsGridViewNavigation}\n            />\n          )}\n          {state.currentView === 'yearsGridView' && (\n            <YearsGridView\n              currentYear={todaysDate.year}\n              focusableYear={state.focusableYear}\n              isFocused={state.isViewFocused}\n              selectedYear={year}\n              testId={testId ? testId + '_yearsGridView' : undefined}\n              onAction={handlers.handleYearsGridViewAction}\n              onNavigation={handlers.handleYearsGridViewNavigation}\n            />\n          )}\n        </div>\n        {showTodayFooterButton && (\n          <div>\n            <TodayButton\n              testId={testId ? testId + '_footerTodayButton' : undefined}\n              todayNavigationLabel={accessibleLabels.today}\n              todayNavigationAriaLabel={accessibleLabels.goToToday}\n              onTodayNavigationAction={handlers.handleTodayNavigation}\n            />\n          </div>\n        )}\n      </Flex>\n    </div>\n  );\n};\n"],"names":["addToCalendarDate","getDaysInMonth","addToMonth","addToYear","useReducer","useRef","compareDates","useMemo","isCalendarDateBefore","getCalendarDateToday","constrainCalendarDate","useTranslationBundle","useCallback","useFocusWithin","_jsx","Flex","Button","useBreakpointValues","useComponentTheme","DatePickerRedwoodTheme","useTestId","_jsxs","datePickerPropVars","DatePickerHeader","MonthView","MonthsGridView","YearsGridView"],"mappings":"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"}
{"version":3,"file":"useTooltipControlled-abf886f2.js","sources":["../../src/hooks/UNSAFE_useTooltip/TooltipContent.tsx","../../src/hooks/UNSAFE_useTooltip/useTooltipControlled.tsx","../../src/hooks/UNSAFE_useTooltip/TooltipManager.ts"],"sourcesContent":["import { useAnimation } from '../UNSAFE_useAnimation';\nimport { useComponentTheme } from '../UNSAFE_useComponentTheme';\nimport { useEffect, useRef } from 'preact/hooks';\nimport { HTMLAttributesSignalExcluded } from '../../utils/UNSAFE_attributeUtils';\nimport {\n  TooltipContentVariantOptions,\n  TooltipContentStyles\n} from './themes/TooltipContentStyles.css';\n\nimport { useTestId, TestIdProps } from '../UNSAFE_useTestId';\nimport { useThemeInterpolations } from '../UNSAFE_useThemeInterpolations';\nimport { classNames } from '../../utils/UNSAFE_classNames';\nimport { TooltipContentRedwoodTheme } from './themes/redwood/TooltipContentTheme';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'children'>;\n\ntype Status = 'mounted' | 'unmounted';\n\ntype ContentProps = IntrinsicProps & {\n  id: string;\n  isOpen: boolean;\n  isDatatip: boolean;\n  onTransitionEnd: () => void;\n} & TestIdProps;\n\nexport const TooltipContent = ({\n  children,\n  id,\n  isOpen,\n  isDatatip,\n  onTransitionEnd,\n  testId,\n  ...props\n}: ContentProps) => {\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const popoverRef = useRef<HTMLDivElement>(null);\n\n  const testIdProps = useTestId(testId);\n\n  const { baseTheme, variantClasses, styles } = useComponentTheme<\n    TooltipContentVariantOptions,\n    TooltipContentStyles\n  >(TooltipContentRedwoodTheme, {\n    variant: isDatatip ? 'datatip' : 'tooltip'\n  });\n\n  const schemeClass = useThemeInterpolations();\n\n  const { nodeRef } = useAnimation<Status, HTMLDivElement>(isOpen ? 'mounted' : 'unmounted', {\n    animationStates: {\n      mounted: (_node) => {\n        const childNode = _node.firstChild as HTMLDivElement;\n        return {\n          from: {\n            maxHeight: '0',\n            opacity: '0%'\n          },\n          to: {\n            maxHeight: `${childNode?.offsetHeight}px`,\n            opacity: isDatatip ? '100%' : '95%'\n          },\n          options: {\n            duration: isDatatip ? 1 : 100,\n            easing: [0.0, 0.0, 0.2, 1]\n          }\n        };\n      },\n      unmounted: (_node) => {\n        return {\n          from: {\n            opacity: isDatatip ? '100%' : '95%'\n          },\n          to: {\n            maxHeight: '0',\n            opacity: '0%'\n          },\n          options: {\n            duration: isDatatip ? 1 : 100,\n            easing: [0.0, 0.0, 0.2, 1]\n          }\n        };\n      }\n    },\n    isAnimatedOnMount: true,\n    onAnimationEnd: () => onTransitionEnd?.()\n  });\n\n  // Set up initial wrapper height so Tooltip can animate from the bottom to the top\n  useEffect(() => {\n    if (wrapperRef.current && popoverRef.current?.offsetHeight) {\n      wrapperRef.current.style.height = `${popoverRef.current?.offsetHeight}px`;\n    }\n  }, []);\n\n  return (\n    <div\n      ref={wrapperRef}\n      id={id}\n      role=\"tooltip\"\n      class={classNames([styles.wrapper, schemeClass, baseTheme])}\n      {...testIdProps}>\n      <div ref={nodeRef} class={styles.inner} {...props}>\n        <div ref={popoverRef} class={classNames([variantClasses, styles.content])}>\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChild } from 'preact';\nimport { useState, useRef, useEffect, useCallback } from 'preact/hooks';\nimport { useId } from '../UNSAFE_useId';\nimport { Floating, Placement, Coords } from '../../UNSAFE_Floating';\nimport { Layer } from '../../UNSAFE_Layer';\nimport { useHover } from '../UNSAFE_useHover';\nimport { useFocus } from '../UNSAFE_useFocus';\nimport { useTouch } from '../UNSAFE_useTouch';\nimport { mergeProps } from '../../utils/UNSAFE_mergeProps';\nimport { TooltipContent } from './TooltipContent';\nimport { EnvironmentProvider } from '../../UNSAFE_Environment';\nimport { useColorScheme } from '../UNSAFE_useColorScheme';\nimport { TestIdProps } from '../UNSAFE_useTestId';\nimport { TooltipManager } from './TooltipManager';\n\n// Global TooltipManager singleton instance\nconst globalTooltipManager = new TooltipManager();\n\nexport const positions = [\n  'start',\n  'top-start',\n  'top',\n  'top-end',\n  'end',\n  'bottom-end',\n  'bottom',\n  'bottom-start'\n] as const;\ntype Position = (typeof positions)[number];\n\nconst positionToPlacement = (position: Position) => {\n  let placement: Placement = 'bottom';\n\n  switch (position) {\n    case 'top':\n    case 'end':\n    case 'bottom':\n    case 'start':\n      placement = position as Placement;\n      break;\n\n    case 'top-end':\n      placement = 'top-end-corner';\n      break;\n\n    case 'bottom-end':\n      placement = 'bottom-end-corner';\n      break;\n\n    case 'bottom-start':\n      placement = 'bottom-start-corner';\n      break;\n\n    case 'top-start':\n      placement = 'top-start-corner';\n      break;\n  }\n\n  return placement;\n};\n\nexport const anchorTos = ['element', 'pointer'] as const;\ntype AnchorTo = (typeof anchorTos)[number];\n\ntype AnchorModel = { x: AnchorTo; y: AnchorTo };\n\ntype Props = {\n  text?: string;\n  variant?: 'tooltip' | 'datatip';\n  isOpen: boolean;\n  position?: Position;\n  isDisabled?: boolean;\n  focusStrategy?: 'browser' | 'logical';\n  anchor?: AnchorModel;\n  offset?: { mainAxis?: number; crossAxis?: number };\n  onToggle?: (details: { value: boolean }) => void;\n} & TestIdProps;\n\n/**\n * The 'mounting' and 'unmounting' states are related to the animation. The 'unmounted' state\n * is used for conditional rendering. In this state, the Tooltip content is completely removed\n * from the DOM. The 'mountPending' and 'unmountPending' are used when timeout is active.\n * The 'reposition' state is used to trigger a transition with new coordinates within\n * the same element.\n */\ntype Status =\n  | 'unmounted'\n  | 'mountPending'\n  | 'mounting'\n  | 'mounted'\n  | 'unmountPending'\n  | 'unmounting';\n\nexport const useTooltipControlled = ({\n  text,\n  isOpen = false,\n  variant = 'tooltip',\n  position = 'bottom',\n  focusStrategy = 'browser',\n  isDisabled = false,\n  anchor = { x: 'element', y: 'element' },\n  offset = { mainAxis: 0, crossAxis: 0 },\n  onToggle,\n  testId\n}: Props): {\n  tooltipContent: ComponentChild;\n  tooltipProps: Record<string, any>;\n} => {\n  const disabled = isDisabled || !text;\n  const isInitialRenderState = useRef<boolean>(true);\n\n  const [state, _setState] = useState<Status>(!disabled && isOpen ? 'mounting' : 'unmounted');\n  const stateRef = useRef<Status>(state);\n  const setState = (newState: Status) => {\n    stateRef.current = newState;\n    _setState(newState);\n  };\n\n  // const tooltipId = useRef<string>(useId());\n\n  const [needsUpdate, setNeedsUpdate] = useState<boolean>(false);\n  setNeedsUpdate(false);\n\n  const isDatatip = variant === 'datatip';\n\n  const [isLogicalFocus, setLogicalFocus] = useState<boolean>(false);\n  const isLogicalFocusStrategy = focusStrategy === 'logical';\n  const isInitialRenderTrigger = useRef<boolean>(true);\n  const { hoverProps, isHover } = useHover({});\n  const { touchProps, isTouch } = useTouch({ isDisabled }); // TODO replace by useLongPress actionhook\n  // we only care about keyboard focus, don't enable useFocus hook if isHover or isTouch are active\n  const { focusProps, isFocus } = useFocus({\n    isDisabled: isLogicalFocusStrategy\n  });\n  const { hoverProps: popoverHoverProps, isHover: popoverIsHover } = useHover({ isDisabled });\n\n  const isPointer = anchor.x === 'pointer' || anchor.y === 'pointer';\n\n  const uniqueIdRef = useRef<string>(useId());\n  const targetRef = useRef<HTMLElement | null>(null);\n  const coordsRef = useRef<Coords>({ x: -9999, y: -9999 });\n  // if anchor is set to pointer and target does not have keyboard focus, use coords\n  const usedRef = isPointer && !isFocus ? coordsRef : targetRef;\n  const delay = isDatatip ? 0 : 250;\n  const toggleTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n  const currentColorScheme = useColorScheme();\n  const newColorScheme = !currentColorScheme || currentColorScheme === 'light' ? 'dark' : 'light';\n\n  const focusActive = useRef<boolean>(false);\n  const hoverActive = useRef<boolean>(false);\n\n  const toggleTimeoutClear = () => {\n    if (toggleTimeoutRef.current) {\n      clearTimeout(toggleTimeoutRef.current);\n      toggleTimeoutRef.current = null;\n    }\n  };\n\n  /*\n   * This effect executes when isFocus/isLogicalFocus changes\n   * - focusActive ref is set if the focus change follows a Tab key\n   * - hoverActive ref is reset, if focusActive becomes true\n   */\n  useEffect(() => {\n    if (isLogicalFocusStrategy) {\n      focusActive.current = isLogicalFocus;\n    } else {\n      focusActive.current = isFocus && globalTooltipManager.isTabKeyActive();\n    }\n    if (focusActive.current) {\n      hoverActive.current = false;\n    }\n  }, [isFocus, isLogicalFocus, isLogicalFocusStrategy]);\n\n  /*\n   * This effect executes when isHover state changes\n   * - focusActive ref is reset, if hoverActive becomes true\n   */\n  useEffect(() => {\n    hoverActive.current = isHover;\n    if (hoverActive.current) {\n      focusActive.current = false;\n    }\n  }, [isHover]);\n\n  useEffect(() => {\n    // inner function for state transitions on various trigger changes\n    const updateState = (open: boolean) => {\n      if (open) {\n        // At least one toggle event is set to true\n        switch (state) {\n          case 'unmounted':\n            setState('mountPending'); // Set mount pending state if tooltip is unmounted\n            break;\n          case 'unmounting': // Switch back to mounting when unmounting was in progress and the tooltip should stay on\n            setState('mounting');\n            onToggle?.({ value: true });\n            break;\n          case 'unmountPending':\n            toggleTimeoutClear();\n            setState('mounted'); // Clear timers immediately and keep the tooltip mounted\n            break;\n        }\n      } else {\n        // No toggle events are set to true\n        switch (state) {\n          case 'mounting':\n          case 'mounted':\n            setState('unmountPending'); // Set unmount pending state if tooltip is mounted or in mounting transition\n            break;\n          case 'mountPending':\n            toggleTimeoutClear();\n            __resetCoords();\n            setState('unmounted'); // Unmount tooltip immediately if mounting is pending\n            break;\n        }\n      }\n    };\n\n    if (isInitialRenderTrigger.current) {\n      // On onitial render do not trigger rerender\n      isInitialRenderTrigger.current = false;\n      return;\n    }\n    // When pointer is used, handleMouseMove method is responsible for state updates\n    // until the tooltip is mounted\n    if (isPointer && isHover && state === 'unmounted') {\n      return;\n    }\n    updateState(\n      (isHover && hoverActive.current) ||\n        ((isFocus || isLogicalFocus) && focusActive.current) ||\n        popoverIsHover ||\n        isTouch\n    );\n  }, [isHover, isFocus, isLogicalFocus, popoverIsHover, isTouch, isPointer, state, onToggle]);\n\n  const destroyCallback = useCallback(() => {\n    focusActive.current = false;\n    hoverActive.current = false;\n    onToggle?.({ value: false });\n  }, []); // cannot depend on the 'onToggle' prop as some clients tend to pass a new callback on each render\n\n  useEffect(() => {\n    if (isInitialRenderState.current) {\n      // On onitial render do not trigger rerender\n      isInitialRenderState.current = false;\n      return;\n    }\n    setState(isOpen ? 'mounting' : 'unmounting');\n  }, [isOpen]);\n\n  useEffect(() => {\n    return () => {\n      // make sure to clear the toggle timeout on unmount\n      toggleTimeoutClear();\n      // reset focusActive and hoverActive refs\n      focusActive.current = false;\n      hoverActive.current = false;\n    };\n  }, []);\n\n  /*\n   * This effect executes when the component state changes.\n   * On 'mounted' state, the tooltip registers itself with the global tooltip manager.\n   * On 'unmounted', the tooltip unregisters from the global tooltip manager.\n   */\n  useEffect(() => {\n    if (state === 'mounted') {\n      globalTooltipManager.register(destroyCallback);\n    } else if (state === 'unmounted') {\n      globalTooltipManager.unregister(destroyCallback);\n    }\n  }, [state, destroyCallback]);\n\n  /*\n   * Set a timer to toggle the state afer the 'pending' period expires\n   */\n  useEffect(() => {\n    if (!toggleTimeoutRef.current && (state === 'mountPending' || state === 'unmountPending')) {\n      toggleTimeoutRef.current = setTimeout(() => {\n        toggleTimeoutClear();\n        // make sure the state has not changed in the mean time before onToggle\n        if (\n          (state === 'mountPending' || state === 'unmountPending') &&\n          state === stateRef.current\n        ) {\n          onToggle?.({ value: state === 'mountPending' });\n        }\n      }, delay);\n    }\n    return () => {\n      toggleTimeoutClear();\n    };\n  }, [state, delay, onToggle]);\n\n  const handleMouseMove = (event: MouseEvent) => {\n    // we only want track mouse move while the state is 'unmounted' or when moving a 'mounted' datatip\n    if (state !== 'unmounted' && !(variant === 'datatip' && state === 'mounted')) {\n      return;\n    }\n    const targetRect = targetRef?.current?.getBoundingClientRect();\n\n    // Tooltip maintains static offset from left side of window\n    const distanceX = document.body.scrollLeft + (targetRect?.left || 0) + (targetRect?.width || 0);\n\n    // Tooltip maintains static offset from top side of the window\n    const distanceY = document.body.scrollTop + (targetRect?.top || 0) + (targetRect?.height || 0);\n\n    // Display tooltip at the mouse position if both anchors are set to pointer\n    const x = anchor.x === 'pointer' ? event.clientX : distanceX;\n    const y = anchor.y === 'pointer' ? event.clientY : distanceY;\n\n    if (state === 'mounted') {\n      coordsRef.current = { x, y };\n      if (needsUpdate !== true) setNeedsUpdate(true);\n    } else if (state === 'unmounted') {\n      toggleTimeoutClear();\n      toggleTimeoutRef.current = setTimeout(() => {\n        if (state === 'unmounted') {\n          coordsRef.current = { x, y };\n          onToggle?.({ value: true });\n        }\n      }, delay);\n    }\n  };\n\n  const onLogicalFocus = (target: HTMLElement) => {\n    setLogicalFocus(true);\n    targetRef.current = target;\n    usedRef.current = target;\n  };\n\n  const onLogicalBlur = () => {\n    setLogicalFocus(false);\n  };\n\n  const onFocusCallback = useCallback(\n    (event: FocusEvent) => {\n      if (\n        event.eventPhase === Event.AT_TARGET ||\n        (event.eventPhase === Event.BUBBLING_PHASE && isDatatip)\n      ) {\n        targetRef.current = event.target as HTMLElement;\n      }\n    },\n    [isDatatip]\n  );\n\n  const onBlurCallback = useCallback((event: FocusEvent) => {\n    if (event.eventPhase === Event.AT_TARGET) {\n      // reset focusActive flag\n      focusActive.current = false;\n    }\n  }, []);\n\n  const focusInitProps = isLogicalFocusStrategy\n    ? {}\n    : {\n        onFocus: onFocusCallback,\n        onBlur: onBlurCallback\n      };\n\n  const hoverInitProps = {\n    onMouseEnter: useCallback((event: MouseEvent) => {\n      targetRef.current = event.target as HTMLElement;\n    }, [])\n  };\n\n  const keyInitProps = {\n    onKeyDown: useCallback(\n      (event: KeyboardEvent) => {\n        if (event.code === 'Escape' && focusActive.current) {\n          event.preventDefault();\n          // focus no longer active after Escape\n          focusActive.current = false;\n          onToggle?.({ value: false });\n        }\n      },\n      [onToggle]\n    )\n  };\n\n  let actionableProps;\n\n  const __resetCoords = () => {\n    coordsRef.current = { x: -9999, y: -9999 };\n  };\n\n  if (disabled) {\n    actionableProps = mergeProps(hoverProps, focusProps, hoverInitProps, focusInitProps);\n  } else {\n    const anchorInitProps = {\n      'aria-describedby': uniqueIdRef.current,\n\n      ...(isPointer && {\n        onMouseLeave: () => {\n          if (state === 'mounting') {\n            return;\n          }\n          toggleTimeoutClear();\n        },\n        onMouseMove: (event: MouseEvent) => {\n          handleMouseMove(event);\n        }\n      })\n    };\n    actionableProps = mergeProps(\n      hoverProps,\n      focusProps,\n      touchProps,\n      hoverInitProps,\n      focusInitProps,\n      anchorInitProps,\n      keyInitProps,\n      isLogicalFocusStrategy ? { onLogicalFocus, onLogicalBlur } : {}\n    );\n  }\n\n  // No need to process tooltip if disabled or no text is provided\n  // Include actionableProps to detect mouseenter in components\n  // hovered state won't update unless actionableProps are already present in the component when mouse enters\n  if (disabled) {\n    toggleTimeoutClear();\n    __resetCoords();\n    return {\n      tooltipContent: null,\n      tooltipProps: actionableProps\n    };\n  }\n\n  const placement = positionToPlacement(position);\n\n  const handleTransitionEnd = () => {\n    if (state === 'mounting') {\n      setState('mounted');\n    }\n    if (state === 'unmounting') {\n      __resetCoords();\n      setState('unmounted');\n    }\n  };\n\n  const renderRawContent = (\n    <TooltipContent\n      id={uniqueIdRef.current}\n      testId={testId}\n      isOpen={['mounting', 'mounted', 'unmountPending'].includes(state)}\n      {...popoverHoverProps}\n      isDatatip={isDatatip}\n      onTransitionEnd={handleTransitionEnd}>\n      {text}\n    </TooltipContent>\n  );\n\n  const renderTooltipOrDatatip = () => {\n    if (variant === 'tooltip') {\n      return (\n        <EnvironmentProvider environment={{ colorScheme: newColorScheme }}>\n          {renderRawContent}\n        </EnvironmentProvider>\n      );\n    } else {\n      return <>{renderRawContent}</>;\n    }\n  };\n\n  const renderContent = (\n    <Layer>\n      <Floating anchorRef={usedRef} placement={placement} offsetValue={offset}>\n        {renderTooltipOrDatatip()}\n      </Floating>\n    </Layer>\n  );\n\n  return {\n    tooltipContent: !['unmounted', 'mountPending'].includes(state) && renderContent,\n    tooltipProps: actionableProps\n  };\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport type TooltipManagerCallback = () => void;\n\n/**\n * A global tooltip manager that\n * - ensures that only one tooltip is shown at a time\n * - detects a Tab key press and allows tooltips to check if their target was focused via keyboard\n */\nexport class TooltipManager {\n  private activeCallback: TooltipManagerCallback | null;\n\n  private tabKeyActive: boolean;\n\n  private keyDownHandler = (event: KeyboardEvent) => {\n    if (event.key === 'Tab') {\n      this.tabKeyActive = true;\n      setTimeout(() => {\n        this.tabKeyActive = false;\n      }, 100);\n    }\n  };\n\n  constructor() {\n    this.activeCallback = null;\n    this.tabKeyActive = false;\n    window.addEventListener('keydown', this.keyDownHandler, true);\n  }\n\n  /**\n   * notifies the previously registered active tooltip callback and registers a new one\n   */\n  public register = (callback: TooltipManagerCallback) => {\n    if (this.activeCallback && this.activeCallback !== callback) {\n      this.activeCallback();\n    }\n    this.activeCallback = callback;\n  };\n\n  /**\n   * resets the registered active callback\n   */\n  public unregister = (callback: TooltipManagerCallback) => {\n    if (this.activeCallback === callback) {\n      this.activeCallback = null;\n    }\n  };\n\n  /**\n   * returns the active Tab key status ('active' means a Tab key press within the last 100ms)\n   */\n  public isTabKeyActive = () => {\n    return this.tabKeyActive;\n  };\n}\n"],"names":["TooltipContent","children","id","isOpen","isDatatip","onTransitionEnd","testId","props","wrapperRef","useRef","popoverRef","testIdProps","useTestId","baseTheme","variantClasses","styles","useComponentTheme","TooltipContentRedwoodTheme","variant","schemeClass","useThemeInterpolations","nodeRef","useAnimation","animationStates","mounted","_node","childNode","firstChild","from","maxHeight","opacity","to","offsetHeight","options","duration","easing","unmounted","isAnimatedOnMount","onAnimationEnd","useEffect","current","style","height","_jsx","jsx","ref","role","class","classNames","wrapper","inner","content","globalTooltipManager","constructor","this","keyDownHandler","event","key","tabKeyActive","setTimeout","register","callback","activeCallback","unregister","isTabKeyActive","window","addEventListener","text","position","focusStrategy","isDisabled","anchor","x","y","offset","mainAxis","crossAxis","onToggle","disabled","isInitialRenderState","state","_setState","useState","stateRef","setState","newState","needsUpdate","setNeedsUpdate","isLogicalFocus","setLogicalFocus","isLogicalFocusStrategy","isInitialRenderTrigger","hoverProps","isHover","useHover","touchProps","isTouch","useTouch","focusProps","isFocus","useFocus","popoverHoverProps","popoverIsHover","isPointer","uniqueIdRef","useId","targetRef","coordsRef","usedRef","delay","toggleTimeoutRef","currentColorScheme","useColorScheme","newColorScheme","focusActive","hoverActive","toggleTimeoutClear","clearTimeout","open","value","__resetCoords","updateState","destroyCallback","useCallback","onLogicalFocus","target","onLogicalBlur","onFocusCallback","eventPhase","Event","AT_TARGET","BUBBLING_PHASE","onBlurCallback","focusInitProps","onFocus","onBlur","hoverInitProps","onMouseEnter","keyInitProps","onKeyDown","code","preventDefault","actionableProps","mergeProps","anchorInitProps","onMouseLeave","onMouseMove","targetRect","getBoundingClientRect","distanceX","document","body","scrollLeft","left","width","distanceY","scrollTop","top","clientX","clientY","handleMouseMove","tooltipContent","tooltipProps","placement","positionToPlacement","renderRawContent","includes","renderContent","Layer","Floating","anchorRef","offsetValue","EnvironmentProvider","environment","colorScheme","_Fragment","Fragment"],"mappings":"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"}
{"version":3,"file":"UNSAFE_useTableViewColumnResizing.js","sources":["../../../src/hooks/UNSAFE_useTableViewColumnResizing/useTableViewColumnResizing.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback, useRef, useState } from 'preact/hooks';\nimport { ColumnResizeDetail, ColumnWidths } from '../../UNSAFE_TableView';\n\nconst _defaultMinWidth = 33;\n\nexport type TableViewColumnResizingProps<C extends string> = {\n  columnOrder: C[];\n  applyWidths?: 'onResizing' | 'onResize';\n  columnWidths?: ColumnWidths<C>;\n  onColumnWidthsChange?: (columnWidths: ColumnWidths<C>) => void;\n  minColumnWidth?: number;\n  resizeBehavior?: 'dividerOnly' | 'singleColumn';\n};\n\n/**\n * Utility hook for controlling a TableView's sizing\n */\nfunction useTableViewColumnResizing<C extends string>({\n  columnOrder,\n  columnWidths,\n  onColumnWidthsChange,\n  applyWidths = 'onResizing',\n  minColumnWidth = 33,\n  resizeBehavior = 'dividerOnly'\n}: TableViewColumnResizingProps<C>) {\n  const minWidth = minColumnWidth != null ? minColumnWidth : _defaultMinWidth;\n\n  const columnWidthsRef = useRef<ColumnWidths<C> | undefined>(columnWidths);\n  columnWidthsRef.current = columnWidths;\n\n  const [columnResizingIndicator, setColumnResizingIndicator] = useState<\n    { key: C; delta: number } | undefined\n  >();\n  const columnResizingStartingColumnWidthsRef = useRef<ColumnWidths<C>>();\n\n  const _cloneColumnWidths = useCallback(\n    (columnWidths: ColumnWidths<C>) => {\n      const newColumnWidths = {} as ColumnWidths<C>;\n      for (const key of columnOrder) {\n        newColumnWidths[key] = columnWidths[key];\n      }\n      return newColumnWidths;\n    },\n    [columnOrder]\n  );\n\n  /**\n   * Helper method to update the Table's column widths while a column resize operation is ongoing.\n   */\n  const onColumnResizing = useCallback(\n    (detail: ColumnResizeDetail<C>) => {\n      // save the initial state when column resize begins\n      if (columnResizingStartingColumnWidthsRef.current == null) {\n        columnResizingStartingColumnWidthsRef.current = detail.allColumnWidths;\n      }\n      const newStaticColumnWidths = _cloneColumnWidths(\n        columnWidthsRef.current != null ? columnWidthsRef.current : ({} as ColumnWidths<C>)\n      );\n      const startKey = detail.key;\n      const endKey = columnOrder[columnOrder.indexOf(startKey) + 1];\n      const initialStartWidth = columnResizingStartingColumnWidthsRef.current[startKey];\n      const initialEndWidth = columnResizingStartingColumnWidthsRef.current[endKey];\n      const newStartWidth = Math.min(\n        Math.max(initialStartWidth + detail.delta, minWidth),\n        initialStartWidth + initialEndWidth - minWidth\n      );\n      newStaticColumnWidths[startKey] = newStartWidth;\n      const newEndWidth = initialEndWidth + initialStartWidth - newStartWidth;\n      newStaticColumnWidths[endKey] = newEndWidth;\n\n      if (onColumnWidthsChange != null) {\n        onColumnWidthsChange(newStaticColumnWidths);\n        columnWidthsRef.current = newStaticColumnWidths;\n      }\n      setColumnResizingIndicator({ key: startKey, delta: 0 });\n    },\n    [onColumnWidthsChange, minWidth, columnOrder, _cloneColumnWidths]\n  );\n\n  /**\n   * Helper method to update the Table's column resize indicator line only.\n   */\n  const onColumnIndicatorResizing = useCallback(\n    (detail: ColumnResizeDetail<C>) => {\n      const startKey = detail.key;\n      const endKey = columnOrder[columnOrder.indexOf(startKey) + 1];\n      const initialStartWidth = detail.allColumnWidths[startKey];\n      const initialEndWidth = detail.allColumnWidths[endKey];\n      const newStartWidth = Math.min(\n        Math.max(initialStartWidth + detail.delta, minWidth),\n        initialStartWidth + initialEndWidth - minWidth\n      );\n      setColumnResizingIndicator({ key: startKey, delta: newStartWidth - initialStartWidth });\n    },\n    [columnOrder, minWidth]\n  );\n\n  /**\n   * Helper method to update the Table's column widths at the end of column resize operation. This is\n   * the same as during an ongoing resize operation, but additionally pushes back the resized column widths\n   * to the consumer if a 'setInitialColumnWidths' callback is provided, and removes the indicator line.\n   */\n  const onColumnResize = useCallback(\n    (detail: ColumnResizeDetail<C>) => {\n      const initialWidths =\n        columnResizingStartingColumnWidthsRef.current != null\n          ? columnResizingStartingColumnWidthsRef.current\n          : detail.allColumnWidths;\n      const newStaticColumnWidths = _cloneColumnWidths(\n        columnWidthsRef.current != null ? columnWidthsRef.current : ({} as ColumnWidths<C>)\n      );\n      const startKey = detail.key;\n      const endKey = columnOrder[columnOrder.indexOf(startKey) + 1];\n      const initialStartWidth = initialWidths[startKey];\n      const initialEndWidth = initialWidths[endKey];\n      const newStartWidth = Math.min(\n        Math.max(initialStartWidth + detail.delta, minWidth),\n        initialStartWidth + initialEndWidth - minWidth\n      );\n      newStaticColumnWidths[startKey] = newStartWidth;\n      const newEndWidth = initialEndWidth + initialStartWidth - newStartWidth;\n      newStaticColumnWidths[endKey] = newEndWidth;\n\n      if (onColumnWidthsChange != null) {\n        onColumnWidthsChange(newStaticColumnWidths);\n        columnWidthsRef.current = newStaticColumnWidths;\n      }\n      columnResizingStartingColumnWidthsRef.current = undefined;\n      setColumnResizingIndicator(undefined);\n    },\n    [onColumnWidthsChange, minWidth, columnOrder, _cloneColumnWidths]\n  );\n\n  /**\n   * Helper method to update the Table's column widths while a column resize operation is ongoing.\n   */\n  const onSingleColumnResizing = useCallback(\n    (detail: ColumnResizeDetail<C>) => {\n      // save the initial state when column resize begins\n      if (columnResizingStartingColumnWidthsRef.current == null) {\n        columnResizingStartingColumnWidthsRef.current = detail.allColumnWidths;\n      }\n      const newStaticColumnWidths = _cloneColumnWidths(\n        columnResizingStartingColumnWidthsRef.current != null\n          ? columnResizingStartingColumnWidthsRef.current\n          : detail.allColumnWidths\n      );\n\n      const startKey = detail.key;\n      const initialStartWidth = columnResizingStartingColumnWidthsRef.current[startKey];\n      const newStartWidth = Math.max(initialStartWidth + detail.delta, minWidth);\n      newStaticColumnWidths[startKey] = newStartWidth;\n\n      if (onColumnWidthsChange != null) {\n        onColumnWidthsChange(newStaticColumnWidths);\n        columnWidthsRef.current = newStaticColumnWidths;\n      }\n      setColumnResizingIndicator({ key: startKey, delta: 0 });\n    },\n    [onColumnWidthsChange, minWidth, _cloneColumnWidths]\n  );\n\n  /**\n   * Helper method to update the Table's column resize indicator line only.\n   */\n  const onSingleColumnIndicatorResizing = useCallback(\n    (detail: ColumnResizeDetail<C>) => {\n      const startKey = detail.key;\n      const initialStartWidth = detail.allColumnWidths[startKey];\n      const newStartWidth = Math.max(initialStartWidth + detail.delta, minWidth);\n      setColumnResizingIndicator({ key: startKey, delta: newStartWidth - initialStartWidth });\n    },\n    [minWidth]\n  );\n\n  /**\n   * Helper method to update the Table's column widths at the end of column resize operation. This is\n   * the same as during an ongoing resize operation, but additionally pushes back the resized column widths\n   * to the consumer if a 'setInitialColumnWidths' callback is provided, and removes the indicator line.\n   */\n  const onSingleColumnResize = useCallback(\n    (detail: ColumnResizeDetail<C>) => {\n      const initialWidths =\n        columnResizingStartingColumnWidthsRef.current != null\n          ? columnResizingStartingColumnWidthsRef.current\n          : detail.allColumnWidths;\n      const newStaticColumnWidths = _cloneColumnWidths(\n        columnResizingStartingColumnWidthsRef.current != null\n          ? columnResizingStartingColumnWidthsRef.current\n          : detail.allColumnWidths\n      );\n      const startKey = detail.key;\n      const initialStartWidth = initialWidths[startKey];\n      const newStartWidth = Math.max(initialStartWidth + detail.delta, minWidth);\n      newStaticColumnWidths[startKey] = newStartWidth;\n\n      if (onColumnWidthsChange != null) {\n        onColumnWidthsChange(newStaticColumnWidths);\n        columnWidthsRef.current = newStaticColumnWidths;\n      }\n      columnResizingStartingColumnWidthsRef.current = undefined;\n      setColumnResizingIndicator(undefined);\n    },\n    [onColumnWidthsChange, minWidth, _cloneColumnWidths]\n  );\n\n  const onColumnResizingHandler =\n    applyWidths === 'onResize'\n      ? resizeBehavior === 'singleColumn'\n        ? onSingleColumnIndicatorResizing\n        : onColumnIndicatorResizing\n      : resizeBehavior === 'singleColumn'\n      ? onSingleColumnResizing\n      : onColumnResizing;\n\n  const onColumnResizeHandler =\n    resizeBehavior === 'singleColumn' ? onSingleColumnResize : onColumnResize;\n\n  return {\n    columnResizingProps: {\n      onColumnResizing: onColumnResizingHandler,\n      onColumnResize: onColumnResizeHandler,\n      columnResizingIndicator: columnResizingIndicator\n    }\n  };\n}\n\nexport { useTableViewColumnResizing };\n"],"names":[],"mappings":"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"}
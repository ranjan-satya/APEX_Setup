{"version":3,"file":"ButtonSet-fa7e8acd.js","sources":["../../src/UNSAFE_ButtonSet/ButtonSetItems.tsx","../../src/UNSAFE_ButtonSet/ButtonSet.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, ComponentChild, toChildArray, isValidElement, Fragment } from 'preact';\nimport { ButtonSetPositionContext } from '../hooks/UNSAFE_useButtonSetPositionContext';\nimport { indexToPosition } from '../utils/UNSAFE_buttonUtils';\n\ntype ButtonSetItemsProps = {\n  /**\n   * The children are an array of buttonsetitems\n   */\n  children: ComponentChildren;\n};\n\n/**\n * ButtonSetItems renders the ButtonSet children\n */\nexport function ButtonSetItems({ children }: ButtonSetItemsProps) {\n  const childrenArray: ComponentChild[] = toChildArray(children);\n\n  return (\n    <Fragment>\n      {childrenArray.map((value, index) => {\n        if (!isValidElement(value)) return null;\n        else\n          return (\n            <ButtonSetPositionContext.Provider\n              value={{\n                position: indexToPosition(index, childrenArray.length)\n              }}>\n              {value}\n            </ButtonSetPositionContext.Provider>\n          );\n      })}\n    </Fragment>\n  );\n}\n\nButtonSetItems.displayName = 'ButtonSetItems';\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { styles } from './themes/ButtonSetStyles.css';\nimport { useButtonSetContext } from '../hooks/UNSAFE_useButtonSetContext';\nimport { ButtonSetItems } from './ButtonSetItems';\nimport { useContext } from 'preact/hooks';\n\nimport { useTestId, TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { useRovingTabIndexContainer } from '../hooks/PRIVATE_useRovingTabIndexContainer';\nimport { TabbableModeContext, useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { mergeRefs } from '../utils/PRIVATE_refUtils';\n\ntype WidthProps = Pick<DimensionProps, 'width'>;\n\nexport type ButtonSetProps = WidthProps &\n  TestIdProps & {\n    /**\n     * The children are an array of buttonsetitems\n     */\n    children?: ComponentChildren;\n\n    /**\n     * aria-label - label for accessibility\n     */\n    'aria-label'?: string;\n\n    /**\n     * aria-labelledby - label for accessibility\n     */\n    'aria-labelledby'?: string;\n\n    /**\n     * aria-controls - specifies what this buttonset control controls.\n     */\n    'aria-controls'?: string;\n\n    /**\n     * The ID of an element (or space separated IDs of multiple elements) that\n     * describes the buttonsetsingle.\n     */\n    'aria-describedby'?: string;\n  };\n\nconst interpolations = [...Object.values(dimensionInterpolations)];\nconst styleInterpolations = mergeInterpolations<DimensionProps>(interpolations);\n\n/**\n * ButtonSet allow users to select the state of one or more related options.\n */\nexport const ButtonSet = forwardRef(\n  (\n    {\n      children,\n      testId,\n      'aria-label': accessibleLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-controls': ariaControls,\n      'aria-describedby': ariaDescribedBy,\n      width\n    }: ButtonSetProps,\n    ref?: Ref<HTMLSpanElement>\n  ) => {\n    const { layoutWidth } = useButtonSetContext();\n    const testIdProps = useTestId(testId);\n\n    const { isTabbable } = useTabbableMode();\n    const { isRoving } = useContext(TabbableModeContext);\n\n    const {\n      focusedId,\n      rovingTabIndexContainerProps: { ref: rovingRef, ...rovingProps }\n    } = useRovingTabIndexContainer(!isTabbable);\n\n    const { class: cls, ...intStyles } = styleInterpolations({ width });\n    const rootStyles = classNames([\n      styles.base,\n      cls,\n      layoutWidth === 'equal' ? styles.fullWidth : undefined\n    ]);\n\n    return (\n      <span\n        role=\"toolbar\"\n        class={rootStyles}\n        style={intStyles}\n        ref={isRoving ? ref : mergeRefs(ref, rovingRef)}\n        aria-label={accessibleLabel}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={ariaDescribedBy}\n        aria-controls={ariaControls}\n        {...testIdProps}\n        {...rovingProps}>\n        {isRoving ? (\n          <ButtonSetItems>{children}</ButtonSetItems>\n        ) : (\n          <TabbableModeContext.Provider\n            value={{ isTabbable: isTabbable, isRoving: true, focusedId: focusedId }}>\n            <ButtonSetItems>{children}</ButtonSetItems>\n          </TabbableModeContext.Provider>\n        )}\n      </span>\n    );\n  }\n);\n\nButtonSet.displayName = 'ButtonSet';\n"],"names":["_jsx"],"mappings":";;;;;;;;;;;;;;;;;;AAkBA;;AAEG;AACa,SAAA,cAAc,CAAC,EAAE,QAAQ,EAAuB,EAAA;AAC9D,IAAA,MAAM,aAAa,GAAqB,YAAY,CAAC,QAAQ,CAAC,CAAC;AAE/D,IAAA,QACEA,GAAA,CAAC,QAAQ,EAAA,EAAA,QAAA,EACN,aAAa,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,KAAI;AAClC,YAAA,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;AAAE,gBAAA,OAAO,IAAI,CAAC;;AAEtC,gBAAA,QACEA,GAAC,CAAA,wBAAwB,CAAC,QAAQ,EAAA,EAChC,KAAK,EAAE;wBACL,QAAQ,EAAE,eAAe,CAAC,KAAK,EAAE,aAAa,CAAC,MAAM,CAAC;qBACvD,EACA,QAAA,EAAA,KAAK,EAC4B,CAAA,EACpC;SACL,CAAC,EACO,CAAA,EACX;AACJ,CAAC;AAED,cAAc,CAAC,WAAW,GAAG,gBAAgB;;ACY7C,MAAM,cAAc,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;AACnE,MAAM,mBAAmB,GAAG,mBAAmB,CAAiB,cAAc,CAAC,CAAC;AAEhF;;AAEG;AACI,MAAM,SAAS,GAAG,UAAU,CACjC,CACE,EACE,QAAQ,EACR,MAAM,EACN,YAAY,EAAE,eAAe,EAC7B,iBAAiB,EAAE,cAAc,EACjC,eAAe,EAAE,YAAY,EAC7B,kBAAkB,EAAE,eAAe,EACnC,KAAK,EACU,EACjB,GAA0B,KACxB;AACF,IAAA,MAAM,EAAE,WAAW,EAAE,GAAG,mBAAmB,EAAE,CAAC;AAC9C,IAAA,MAAM,WAAW,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;AAEtC,IAAA,MAAM,EAAE,UAAU,EAAE,GAAG,eAAe,EAAE,CAAC;IACzC,MAAM,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAC,mBAAmB,CAAC,CAAC;IAErD,MAAM,EACJ,SAAS,EACT,4BAA4B,EAAE,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,WAAW,EAAE,EACjE,GAAG,0BAA0B,CAAC,CAAC,UAAU,CAAC,CAAC;AAE5C,IAAA,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,SAAS,EAAE,GAAG,mBAAmB,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IACpE,MAAM,UAAU,GAAG,UAAU,CAAC;AAC5B,QAAA,MAAM,CAAC,IAAI;QACX,GAAG;QACH,WAAW,KAAK,OAAO,GAAG,MAAM,CAAC,SAAS,GAAG,SAAS;AACvD,KAAA,CAAC,CAAC;AAEH,IAAA,QACEA,GACE,CAAA,MAAA,EAAA,EAAA,IAAI,EAAC,SAAS,EACd,KAAK,EAAE,UAAU,EACjB,KAAK,EAAE,SAAS,EAChB,GAAG,EAAE,QAAQ,GAAG,GAAG,GAAG,SAAS,CAAC,GAAG,EAAE,SAAS,CAAC,EACnC,YAAA,EAAA,eAAe,qBACV,cAAc,EAAA,kBAAA,EACb,eAAe,EAClB,eAAA,EAAA,YAAY,KACvB,WAAW,EAAA,GACX,WAAW,EACd,QAAA,EAAA,QAAQ,IACPA,GAAA,CAAC,cAAc,EAAE,EAAA,QAAA,EAAA,QAAQ,GAAkB,KAE3CA,IAAC,mBAAmB,CAAC,QAAQ,EAC3B,EAAA,KAAK,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,YACvEA,GAAC,CAAA,cAAc,cAAE,QAAQ,EAAA,CAAkB,GACd,CAChC,EAAA,CACI,EACP;AACJ,CAAC,EACD;AAEF,SAAS,CAAC,WAAW,GAAG,WAAW;;;;"}
{"version":3,"file":"SelectSingle-34d636a8.js","sources":["../../src/UNSAFE_SelectSingle/SelectSingleDesktopDropdown.tsx","../../src/UNSAFE_SelectSingle/SelectSingleField.tsx","../../src/UNSAFE_SelectSingle/SelectSingleFieldInput.tsx","../../src/UNSAFE_SelectSingle/SelectSingleMobileDropdown.tsx","../../src/UNSAFE_SelectSingle/useMobileDropdown.ts","../../src/UNSAFE_SelectSingle/SelectSingle.tsx","../../src/UNSAFE_SelectSingle/useSelectSingle.ts","../../src/UNSAFE_SelectSingle/useDisplayValue.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  DefaultList,\n  Dropdown,\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  LinkItem,\n  preventDefault\n} from '#PRIVATE_SelectCommon';\nimport { Separator } from '#UNSAFE_Separator';\nimport { InlineUserAssistance, UserAssistanceDensityType } from '#UNSAFE_UserAssistance';\nimport { TabbableModeContext } from '#hooks/UNSAFE_useTabbableMode';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { ComponentProps } from 'preact';\nimport { Ref } from 'preact/hooks';\n\ntype PickedDefaultListProps<K extends string | number, D extends Record<string, any>> = Pick<\n  ComponentProps<typeof DefaultList<K, D>>,\n  | 'currentKey'\n  | 'data'\n  | 'itemRenderer'\n  | 'itemText'\n  | 'onCurrentKeyChange'\n  | 'onItemAction'\n  | 'onLoadRange'\n  | 'searchText'\n  | 'selectedKeys'\n>;\n\ntype PickedDropdownProps = Pick<\n  ComponentProps<typeof Dropdown>,\n  'isOpen' | 'onAutoDismiss' | 'onPosition'\n>;\n\ntype PickedInlineUserAssistanceProps = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  'assistiveText' | 'helpSourceLink' | 'helpSourceText'\n>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = PickedDefaultListProps<\n  K,\n  D\n> &\n  PickedDropdownProps &\n  PickedInlineUserAssistanceProps & {\n    dropdownId: string;\n    dropdownRef: Ref<HTMLDivElement>;\n    isAddToListShown?: boolean;\n    isAdvancedSearchShown: boolean;\n    isDisabled?: boolean;\n    isDropdownAbove: boolean;\n    isEmptyResults: boolean;\n    isReadonly?: false;\n    isUserFiltering: boolean;\n    label: string;\n    mainFieldRef: Ref<HTMLDivElement>;\n    onAddToListAction?: () => void;\n    onAdvancedSearchAction?: () => void;\n    userAssistanceDensity?: UserAssistanceDensityType;\n  };\n\nexport function SelectSingleDesktopDropdown<\n  K extends string | number,\n  D extends Record<string, any>\n>({\n  assistiveText,\n  currentKey,\n  data,\n  dropdownId,\n  dropdownRef,\n  helpSourceLink,\n  helpSourceText,\n  isAddToListShown,\n  isAdvancedSearchShown,\n  isDisabled,\n  isDropdownAbove,\n  isEmptyResults,\n  isOpen,\n  isReadonly,\n  isUserFiltering,\n  itemRenderer,\n  itemText,\n  label,\n  mainFieldRef,\n  onAddToListAction,\n  onAdvancedSearchAction,\n  onAutoDismiss,\n  onCurrentKeyChange,\n  onItemAction,\n  onLoadRange,\n  onPosition,\n  searchText,\n  selectedKeys,\n  userAssistanceDensity\n}: Props<K, D>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const dropdownInlineUserAssistance =\n    isOpen &&\n    !isDropdownAbove &&\n    !isDisabled &&\n    !isReadonly &&\n    (assistiveText || helpSourceLink) &&\n    (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n      <TabbableModeContext.Provider value={{ isTabbable: false }}>\n        <DropdownUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          userAssistanceDensity={userAssistanceDensity}\n        />\n      </TabbableModeContext.Provider>\n    ) : undefined;\n\n  const dropdownListContent = isEmptyResults ? (\n    isAddToListShown || isAdvancedSearchShown ? undefined : (\n      <EmptyResults />\n    )\n  ) : (\n    <DefaultList\n      aria-label={label ?? ''}\n      currentItemVariant=\"highlight\"\n      currentKey={currentKey}\n      data={data}\n      itemRenderer={itemRenderer}\n      itemText={itemText}\n      onCurrentKeyChange={onCurrentKeyChange}\n      onItemAction={onItemAction}\n      onLoadRange={onLoadRange}\n      searchText={isUserFiltering ? searchText : undefined}\n      selectedKeys={selectedKeys}\n      selectionMode=\"single\"\n    />\n  );\n\n  const addToListContent = isAddToListShown ? (\n    <LinkItem isHighlighted={isEmptyResults} onAction={onAddToListAction}>\n      {translations.select_addToList()}\n    </LinkItem>\n  ) : undefined;\n\n  const advancedSearchContent = isAdvancedSearchShown ? (\n    <>\n      {!isEmptyResults && (\n        <div onMouseDown={preventDefault}>\n          <Separator />\n        </div>\n      )}\n      <LinkItem isHighlighted={isEmptyResults} onAction={onAdvancedSearchAction}>\n        {translations.select_moreSearchOptions()}\n      </LinkItem>\n    </>\n  ) : undefined;\n\n  return (\n    <Dropdown\n      anchorRef={mainFieldRef}\n      dropdownRef={dropdownRef}\n      id={dropdownId}\n      isOpen={isOpen}\n      onAutoDismiss={onAutoDismiss}\n      onPosition={onPosition}>\n      <DropdownList\n        hasBottomGap={dropdownInlineUserAssistance === undefined}\n        isLoading={data === null}>\n        {dropdownListContent}\n        {addToListContent}\n        {advancedSearchContent}\n      </DropdownList>\n      {dropdownInlineUserAssistance}\n    </Dropdown>\n  );\n}\n","import { DropdownArrow } from '#PRIVATE_SelectCommon';\nimport { IconButton } from '#UNSAFE_IconButton';\nimport { CancelS } from '#UNSAFE_RedwoodIcons/CancelS';\nimport { NavLeft } from '#UNSAFE_RedwoodIcons/NavLeft';\nimport { TextField } from '#UNSAFE_TextField';\nimport { useFormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { ComponentProps } from 'preact';\n\ntype PickedTextFieldProps = Pick<\n  ComponentProps<typeof TextField>,\n  | 'columnSpan'\n  | 'compactUserAssistance'\n  | 'contentVariant'\n  | 'endContent'\n  | 'hasZeroStartMargin'\n  | 'id'\n  | 'inlineUserAssistance'\n  | 'label'\n  | 'labelEdge'\n  | 'labelStartWidth'\n  | 'mainFieldRef'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onKeyDown'\n  | 'onMouseDown'\n  | 'onMouseEnter'\n  | 'onMouseLeave'\n  | 'resize'\n  | 'rootRef'\n  | 'startContent'\n  | 'statusVariant'\n  | 'styleVariant'\n  | 'testId'\n> & {\n  children: ComponentProps<typeof TextField>['mainContent'];\n};\n\ntype Props = PickedTextFieldProps & {\n  hasInsideLabel?: boolean;\n  isBackButtonShown?: boolean;\n  isClearButtonShown?: boolean;\n  isDropdownArrowShown?: boolean;\n  onBackButtonClick?: ComponentProps<typeof IconButton>['onAction'];\n  onClearButtonClick?: ComponentProps<typeof IconButton>['onAction'];\n  onDropdownArrowClick?: ComponentProps<typeof DropdownArrow>['onClick'];\n};\n\nexport function SelectSingleField({\n  children,\n  hasInsideLabel,\n  isBackButtonShown,\n  isClearButtonShown,\n  isDropdownArrowShown,\n  onBackButtonClick,\n  onClearButtonClick,\n  onDropdownArrowClick,\n  ...passThroughTextFieldProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const { isDisabled, isLoading } = useFormFieldContext();\n\n  const startContent = isBackButtonShown ? (\n    <IconButton\n      aria-label={translations.selectMultiple_back()}\n      size=\"xs\"\n      variant=\"ghost\"\n      onAction={onBackButtonClick}>\n      <NavLeft />\n    </IconButton>\n  ) : null;\n\n  const endContent = isLoading ? undefined : (\n    <>\n      {isClearButtonShown && (\n        <IconButton\n          aria-label={translations.formControl_clear()}\n          size=\"sm\"\n          variant=\"ghost\"\n          onAction={onClearButtonClick}>\n          <CancelS />\n        </IconButton>\n      )}\n      {isDropdownArrowShown && (\n        <DropdownArrow\n          isDisabled={isDisabled}\n          onClick={onDropdownArrowClick}\n          testId={`${passThroughTextFieldProps.testId}_dropdownarrow`}\n        />\n      )}\n    </>\n  );\n\n  return (\n    <TextField\n      startContent={startContent}\n      mainContent={children}\n      endContent={endContent}\n      {...passThroughTextFieldProps}\n    />\n  );\n}\n","import { LiveRegion } from '#UNSAFE_LiveRegion';\nimport { TextFieldInput } from '#UNSAFE_TextField';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { ComponentProps, Ref } from 'preact';\n\ntype PickedTextFieldInputProps = Pick<\n  ComponentProps<typeof TextFieldInput>,\n  | 'aria-controls'\n  | 'aria-describedby'\n  | 'aria-expanded'\n  | 'aria-invalid'\n  | 'aria-label'\n  | 'hasEmptyLabel'\n  | 'hasInsideLabel'\n  | 'id'\n  | 'isRequired'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onInput'\n  | 'onKeyDown'\n  | 'onKeyUp'\n  | 'placeholder'\n  | 'textAlign'\n  | 'variant'\n> & {\n  inputRef?: Ref<HTMLInputElement>;\n};\n\ntype Props = PickedTextFieldInputProps & {\n  displayValue: string;\n  isAddToListShown: boolean;\n  isAdvancedSearchShown: boolean;\n  isUserFiltering: boolean;\n  liveRegionText?: string;\n  userInput?: string;\n  virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n};\n\nexport function SelectSingleFieldInput({\n  displayValue,\n  isAddToListShown,\n  isAdvancedSearchShown,\n  isUserFiltering,\n  liveRegionText,\n  userInput,\n  virtualKeyboard,\n  ...passThroughTextFieldInputProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const addToListAccText = translations.select_addToListAvailable();\n  const advancedSearchAccText = translations.select_moreSearchOptionsAvailable();\n\n  return (\n    <>\n      <TextFieldInput\n        {...passThroughTextFieldInputProps}\n        hasEndContent={true}\n        aria-autocomplete=\"list\"\n        autoComplete=\"off\"\n        role=\"combobox\"\n        spellcheck={false}\n        type={virtualKeyboard === 'auto' ? 'search' : virtualKeyboard}\n        value={isUserFiltering ? userInput : displayValue}\n      />\n      <LiveRegion>{liveRegionText}</LiveRegion>\n      {isAddToListShown ? <LiveRegion>{addToListAccText}</LiveRegion> : undefined}\n      {isAdvancedSearchShown ? <LiveRegion>{advancedSearchAccText}</LiveRegion> : undefined}\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  DefaultList,\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  LinkItem,\n  SelectMobileDropdown,\n  preventDefault\n} from '#PRIVATE_SelectCommon';\nimport { Label } from '#UNSAFE_Label';\nimport { Separator } from '#UNSAFE_Separator';\nimport { InlineUserAssistance, UserAssistanceDensityType } from '#UNSAFE_UserAssistance';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useTextField } from '#hooks/UNSAFE_useTextField';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { ComponentProps } from 'preact';\nimport { SelectSingleField } from './SelectSingleField';\nimport { SelectSingleFieldInput } from './SelectSingleFieldInput';\nimport { useMobileDropdown, type UseMobileDropdownProps } from './useMobileDropdown';\nimport { View } from '#UNSAFE_View';\n\ntype SelectSingleFieldInputProps = ComponentProps<typeof SelectSingleFieldInput>;\n\ntype PickedInlineUserAssistanceProps = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  'assistiveText' | 'helpSourceLink' | 'helpSourceText'\n>;\ntype PickedSelectSingleFieldInputProps = Pick<\n  ComponentProps<typeof SelectSingleFieldInput>,\n  | 'aria-describedby'\n  | 'aria-label'\n  | 'displayValue'\n  | 'isAddToListShown'\n  | 'isAdvancedSearchShown'\n  | 'isRequired'\n  | 'isUserFiltering'\n  | 'placeholder'\n  | 'textAlign'\n  | 'virtualKeyboard'\n> & {\n  onFieldBlur?: ComponentProps<typeof SelectSingleFieldInput>['onBlur'];\n  onFieldFocus?: ComponentProps<typeof SelectSingleFieldInput>['onFocus'];\n  onFieldInput?: ComponentProps<typeof SelectSingleFieldInput>['onInput'];\n  onFieldKeyDown?: ComponentProps<typeof SelectSingleFieldInput>['onKeyDown'];\n  onFieldKeyUp?: ComponentProps<typeof SelectSingleFieldInput>['onKeyUp'];\n};\ntype PickedDefaultListProps<K extends string | number, D extends Record<string, any>> = Pick<\n  ComponentProps<typeof DefaultList<K, D>>,\n  | 'currentKey'\n  | 'data'\n  | 'itemRenderer'\n  | 'itemText'\n  | 'onCurrentKeyChange'\n  | 'onItemAction'\n  | 'onLoadRange'\n  | 'searchText'\n  | 'selectedKeys'\n>;\ntype PickedSelectMobileDropdownProps = Pick<ComponentProps<typeof SelectMobileDropdown>, 'isOpen'>;\ntype PickedUseMobileDropdownProps<K, D> = Pick<\n  UseMobileDropdownProps<K, D>,\n  'clearValue' | 'setDropdownOpen' | 'stopFiltering' | 'setUserInput'\n> & {\n  mainFieldInputRef: UseMobileDropdownProps<K, D>['inputRef'];\n};\n\ntype Props<K extends string | number, D extends Record<string, any>> = PickedDefaultListProps<\n  K,\n  D\n> &\n  PickedInlineUserAssistanceProps &\n  PickedSelectMobileDropdownProps &\n  PickedSelectSingleFieldInputProps &\n  PickedUseMobileDropdownProps<K, D> & {\n    dropdownId: string;\n    isEmptyResults: boolean;\n    isFocused: boolean;\n    isLoading: boolean;\n    label: string;\n    liveRegionText?: string;\n\n    onAddToListAction?: () => void;\n    onAdvancedSearchAction?: () => void;\n    propIsLoading?: boolean;\n    userAssistanceDensity?: UserAssistanceDensityType;\n    userInput?: string;\n    virtualKeyboard?: SelectSingleFieldInputProps['virtualKeyboard'];\n  };\n\nexport function SelectSingleMobileDropdown<\n  K extends string | number,\n  D extends Record<string, any>\n>({\n  'aria-describedby': ariaDescribedBy,\n  'aria-label': ariaLabel,\n  assistiveText,\n  clearValue,\n  currentKey,\n  data,\n  displayValue,\n  dropdownId,\n  helpSourceLink,\n  helpSourceText,\n  isAddToListShown,\n  isAdvancedSearchShown,\n  isEmptyResults,\n  isFocused,\n  isLoading,\n  isOpen = false,\n  isRequired,\n  isUserFiltering,\n  itemRenderer,\n  itemText,\n  label,\n  liveRegionText,\n  mainFieldInputRef,\n  onAddToListAction,\n  onAdvancedSearchAction,\n  onCurrentKeyChange,\n  onFieldBlur,\n  onFieldFocus,\n  onFieldInput,\n  onFieldKeyDown,\n  onFieldKeyUp,\n  onItemAction,\n  onLoadRange,\n  placeholder,\n  propIsLoading,\n  searchText,\n  selectedKeys,\n  setDropdownOpen,\n  setUserInput,\n  stopFiltering,\n  textAlign,\n  userAssistanceDensity,\n  userInput,\n  virtualKeyboard\n}: Props<K, D>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n    useTextField({\n      ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: false,\n      isFocused,\n      isLoading,\n      isReadonly: false,\n      isRequiredShown: false,\n      labelEdge: 'inside',\n      styleVariant: 'default',\n      value: ''\n    });\n  const { selectSingleFieldInputProps, selectSingleFieldProps } = useMobileDropdown({\n    clearValue,\n    displayValue,\n    inputRef: mainFieldInputRef,\n    isDropdownOpen: isOpen,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    userInput\n  });\n\n  // JET-54256 - inside label animates up on initial display with selected value\n  // If we're waiting for the selected values to load, the component should look like it\n  // has a value in the meantime.\n  // Use the original propIsLoading instead of isLoading because we don't want to delay\n  // the inside label position by a timer like we do the progressive loading indicator.\n  formFieldContext.hasValue = propIsLoading || formFieldContext.hasValue;\n\n  const mobileDropdownFieldLabelProps = {\n    label: <Label {...labelProps}>{label}</Label>,\n    labelEdge: 'inside' as const\n  };\n\n  const dropdownInlineUserAssistance =\n    isOpen &&\n    (assistiveText || helpSourceLink) &&\n    (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n      <DropdownUserAssistance\n        assistiveText={assistiveText}\n        fieldLabel={label}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        userAssistanceDensity={userAssistanceDensity}\n        {...userAssistanceProps}\n      />\n    ) : undefined;\n\n  const dropdownListContent = isEmptyResults ? (\n    isAddToListShown || isAdvancedSearchShown ? undefined : (\n      <EmptyResults />\n    )\n  ) : (\n    <DefaultList\n      aria-label={label ?? ''}\n      currentKey={currentKey}\n      data={data}\n      itemRenderer={itemRenderer}\n      itemText={itemText}\n      onCurrentKeyChange={onCurrentKeyChange}\n      onItemAction={onItemAction}\n      onLoadRange={onLoadRange}\n      searchText={isUserFiltering ? searchText : undefined}\n      selectedKeys={selectedKeys}\n      selectionMode=\"single\"\n    />\n  );\n\n  const addToListContent = isAddToListShown ? (\n    <LinkItem onAction={onAddToListAction}>{translations.select_addToList()}</LinkItem>\n  ) : undefined;\n\n  const advancedSearchContent = isAdvancedSearchShown ? (\n    <>\n      <div onMouseDown={preventDefault}>\n        <Separator />\n      </div>\n      <LinkItem onAction={onAdvancedSearchAction}>\n        {translations.select_moreSearchOptions()}\n      </LinkItem>\n    </>\n  ) : undefined;\n\n  return (\n    <SelectMobileDropdown\n      header={\n        <FormFieldContext.Provider value={formFieldContext}>\n          <View>\n            <SelectSingleField\n              {...textFieldProps}\n              {...mobileDropdownFieldLabelProps}\n              {...selectSingleFieldProps}\n              onFocus={onFieldFocus}\n              onBlur={onFieldBlur}>\n              <SelectSingleFieldInput\n                {...inputProps}\n                {...selectSingleFieldInputProps}\n                aria-controls={dropdownId}\n                aria-expanded={isOpen}\n                aria-label={ariaLabel}\n                isAddToListShown={isAddToListShown}\n                isAdvancedSearchShown={isAdvancedSearchShown}\n                isRequired={isRequired}\n                liveRegionText={liveRegionText}\n                placeholder={placeholder}\n                textAlign={textAlign}\n                virtualKeyboard={virtualKeyboard}\n                onInput={onFieldInput}\n                onKeyDown={onFieldKeyDown}\n                onKeyUp={onFieldKeyUp}\n              />\n            </SelectSingleField>\n          </View>\n          {dropdownInlineUserAssistance}\n          {advancedSearchContent}\n        </FormFieldContext.Provider>\n      }\n      hasHeaderSeparator={!(isAdvancedSearchShown && isEmptyResults)}\n      id={dropdownId}\n      isOpen={isOpen}>\n      <DropdownList\n        isLoading={data === null}\n        hasTopGap={!(isAddToListShown || isAdvancedSearchShown)}>\n        {dropdownListContent}\n        {addToListContent}\n      </DropdownList>\n    </SelectMobileDropdown>\n  );\n}\n","import { useCallback, useEffect, useRef } from 'preact/hooks';\nimport { isSearchTextEmptyOrUndefined } from '#PRIVATE_SelectCommon';\nimport type { useSelectSingle } from './useSelectSingle';\n\ntype PickedPropsFromUseSelectSingle<K, D> = Pick<\n  ReturnType<typeof useSelectSingle<K, D>>,\n  | 'clearValue'\n  | 'inputRef'\n  | 'isDropdownOpen'\n  | 'setDropdownOpen'\n  | 'setUserInput'\n  | 'stopFiltering'\n  | 'userInput'\n>;\nexport type UseMobileDropdownProps<K, D> = PickedPropsFromUseSelectSingle<K, D> & {\n  displayValue: string;\n};\n\nexport function useMobileDropdown<K extends string | number, D>({\n  clearValue,\n  displayValue,\n  inputRef,\n  isDropdownOpen,\n  userInput,\n  setDropdownOpen,\n  stopFiltering,\n  setUserInput\n}: UseMobileDropdownProps<K, D>) {\n  // Create a ref for the input in the dropdown\n  const dropdownInputRef = useRef<HTMLInputElement>(null);\n\n  const closeDropdown = useCallback(() => {\n    setDropdownOpen(false);\n    // stop filtering before closing the dropdown\n    stopFiltering();\n    // revert the focus back to the main field\n    inputRef.current?.focus();\n  }, [inputRef, setDropdownOpen, stopFiltering]);\n\n  const onBackButtonClick = useCallback(() => {\n    closeDropdown();\n  }, [closeDropdown]);\n\n  const onClearButtonClick = useCallback(() => {\n    // reset the user filter and the value of the component\n    stopFiltering();\n    // clear the value but do not close the dropdown\n    clearValue(false);\n    // set focus to the dropdown input field\n    dropdownInputRef.current?.focus();\n  }, [clearValue, stopFiltering]);\n\n  const wasDropdownOpen = useRef(isDropdownOpen);\n  useEffect(() => {\n    // if the dropdown is open, ignore any valueItems update\n    if (isDropdownOpen) {\n      // this dropdown is opened now, so set the focus on the input field\n      setTimeout(() => dropdownInputRef.current?.focus(), 0);\n    }\n    wasDropdownOpen.current = isDropdownOpen;\n  }, [isDropdownOpen]);\n\n  const isInitialRender = useRef(true);\n  if (isInitialRender.current) {\n    isInitialRender.current = false;\n    setUserInput(displayValue);\n  }\n\n  return {\n    selectSingleFieldInputProps: {\n      displayValue: userInput ?? '',\n      hasEmptyLabel: false,\n      hasInsideLabel: true,\n      inputRef: dropdownInputRef,\n      isUserFiltering: true,\n      removeIcon: 'always' as const,\n      userInput\n    },\n    selectSingleFieldProps: {\n      hasInsideLabel: true,\n      isBackButtonShown: true,\n      isClearButtonShown:\n        !isSearchTextEmptyOrUndefined(userInput) || !isSearchTextEmptyOrUndefined(displayValue),\n      isDropdownArrowShown: false,\n      styleVariant: 'embedded' as const,\n      onBackButtonClick,\n      onClearButtonClick\n    }\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  SelectMobileFieldInput,\n  isBeforeDataFetch,\n  isPhone,\n  isTablet\n} from '#PRIVATE_SelectCommon';\nimport { DataState, ListItemRendererContext, Metadata } from '#UNSAFE_Collection';\nimport { Label } from '#UNSAFE_Label';\nimport { ReadonlyTextField, ReadonlyTextFieldInput } from '#UNSAFE_TextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '#UNSAFE_UserAssistance';\nimport { VirtualizedListView } from '#UNSAFE_VirtualizedListView';\nimport { FocusableHandle, useFocusableTextField } from '#hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useLoadingIndicatorTimer } from '#hooks/UNSAFE_useLoadingIndicatorTimer';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { useTextField } from '#hooks/UNSAFE_useTextField';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { Item } from '#utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '#utils/UNSAFE_selectUtils';\nimport { Size } from '#utils/UNSAFE_size';\nimport { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { ComponentChildren, ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { MutableRef } from 'preact/hooks';\nimport { SelectSingleDesktopDropdown } from './SelectSingleDesktopDropdown';\nimport { SelectSingleField } from './SelectSingleField';\nimport { SelectSingleFieldInput } from './SelectSingleFieldInput';\nimport { SelectSingleMobileDropdown } from './SelectSingleMobileDropdown';\nimport { useDisplayValue } from './useDisplayValue';\nimport { useSelectSingle } from './useSelectSingle';\n\ntype SelectSingleFieldInputProps = ComponentProps<typeof SelectSingleFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\n// pick the props from the ListItemContext instead of extending it directly so that we\n// don't automatically expose any new props that may be added to it\ntype PickedPropsFromListItemContext<K, D> = Pick<ListItemRendererContext<K, D>, 'data' | 'index'>;\ntype SelectionDetail<K> = {\n  value: Set<K>;\n  target: EventTarget | null;\n};\ntype ItemRendererMetadata<K> = Pick<Metadata<K>, 'key' | 'suggestion'>;\ntype ItemRendererProps<K, D> = PickedPropsFromListItemContext<K, D> & {\n  /**\n   * Metadata for the item.\n   */\n  metadata: ItemRendererMetadata<K>;\n  /**\n   * User-entered search text.\n   * This property will be undefined for the default, unfiltered list.\n   */\n  searchText?: string;\n  /**\n   * The selected keys in the dropdown.\n   * This property will be undefined when nothing is selected.\n   */\n  selectedKeys?: Set<K>;\n  /**\n   * Callback function to trigger when the selection changes\n   *\n   * @param detail The selection change details\n   */\n  onSelectionChange: (detail: SelectionDetail<K>) => void;\n};\n\ntype Props<K extends string | number, D extends Record<string, any>> = TestIdProps & {\n  /**\n   * Specifies whether the add to list link is shown in the dropdown when the user filters\n   * and there are no results.\n   * It is up to the application to show its own UI when the link is triggered.\n   *\n   * Advanced search and add to list should not be enabled at the same time.  If both are on,\n   * advanced search will take precedence because the conditions for when it is shown are\n   * more relaxed than add to list and its external UI could also potentially include the\n   * ability to add to list.\n   */\n  addToList?: 'on' | 'off';\n  /**\n   * Specifies whether the advanced search link is shown in the dropdown when the user filters.\n   * It is up to the application to show its own UI when the link is triggered.\n   *\n   * Advanced search and add to list should not be enabled at the same time.  If both are on,\n   * advanced search will take precedence because the conditions for when it is shown are\n   * more relaxed than add to list and its external UI could also potentially include the\n   * ability to add to list.\n   */\n  advancedSearch?: 'on' | 'off';\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: SelectSingleFieldInputProps['aria-describedby'];\n  /**\n   * Text to provide guidance to help the user understand what data to enter or select.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * Specifies data for the dropdown list.\n   *\n   * Note that the <code>itemText</code> property allows for customizing the rendering\n   * of each data item.\n   */\n  data?: DataState<K, D> | null;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is waiting for <code>valueItems</code> to load.\n   * While loading, SelectSingle will show the progressive loading indicator in the text field.\n   */\n  isLoading?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * selected by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be selected by the user.\n   */\n  isRequired?: SelectSingleFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has selected a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Render function for an item in the default list in the dropdown.\n   */\n  itemRenderer?: (itemRendererProps: ItemRendererProps<K, D>) => ComponentChildren;\n  /**\n   * Specifies how to get the text string to render for a data item.\n   * This property can be set to either:\n   * <ul>\n   * <li>a string that specifies the name of a top level data attribute to render as text, or</li>\n   * <li>a callback function that takes a properties object and returns the text string to\n   * display.</li>\n   * </ul>\n   *\n   * This text will be rendered for the selected <code>valueItems</code> of the component.\n   * It will also be rendered for each item in the dropdown.  When rendered for the\n   * dropdown items, default matching search term highlighting will still be applied.\n   */\n  itemText: ItemTextType<K, D>;\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user selects or enters a value.\n   */\n  placeholder?: SelectSingleFieldInputProps['placeholder'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: SelectSingleFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * Specifies the key, data, and optional metadata for the selected value.\n   */\n  valueItem?: Item<K, D>;\n  /**\n   * The style variant of the component.\n   */\n  variant?: SelectSingleFieldInputProps['variant'];\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n  /**\n   * Callback function called when the user triggers the add to list link shown in the dropdown.\n   */\n  onAddToListAction?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback function called when the user triggers the advanced search link shown in the dropdown.\n   */\n  onAdvancedSearchAction?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback invoked when the user commits the selected value.\n   *\n   * The function should set a new <code>valueItem</code> property.\n   */\n  onCommit: (detail: ValueUpdateDetail<K>) => void;\n  /**\n   * Callback function to trigger loading data for the dropdown list, which may or may not be\n   * filtered by user entered search text.\n   *\n   * The function should set a new <code>DataState</code> as the <code>data</code> property.\n   */\n  onFilter?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback function to handle when the viewport of the dropdown list has changed, for example\n   * by scrolling, including the case where the user scrolls to the end of the list and there are\n   * more items to load.\n   *\n   * The function should set a new <code>DataState</code> for the specified range as the\n   * <code>data</code> property.\n   */\n  onLoadRange?: ComponentProps<typeof VirtualizedListView>['onLoadRange'];\n};\n\n/**\n * A SelectSingle is a dropdown list that supports single selection and search filtering.\n */\nexport const SelectSingle = forwardRef(\n  <K extends string | number, D extends Record<string, any>>(\n    {\n      addToList = 'off',\n      advancedSearch = 'off',\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      columnSpan,\n      data,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isLoading: propIsLoading,\n      isReadonly: propIsReadonly,\n      isRequired,\n      isRequiredShown,\n      itemRenderer,\n      itemText,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      onAddToListAction,\n      onAdvancedSearchAction,\n      onCommit,\n      onFilter,\n      onLoadRange,\n      placeholder,\n      testId,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      valueItem,\n      variant = 'default',\n      virtualKeyboard\n    }: Props<K, D>,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const {\n      enabledElementRef,\n      focusProps,\n      isFocused: origIsFocused,\n      readonlyElementRef\n    } = useFocusableTextField<HTMLInputElement, HTMLDivElement>({ isDisabled, isReadonly, ref });\n\n    const {\n      addToListEventHandlers,\n      advancedSearchEventHandlers,\n      clearValue,\n      collectionProps,\n      dropdownArrowEventHandlers,\n      dropdownEventHandlers,\n      dropdownRef,\n      inputEventHandlers,\n      isAddToListShown,\n      isAdvancedSearchShown,\n      isDataFetched,\n      isDropdownAbove,\n      isDropdownOpen,\n      isEmptyResults,\n      isFocused,\n      isUserFiltering,\n      mainFieldRef,\n      mouseProps,\n      searchText,\n      setDropdownOpen,\n      setUserInput,\n      stopFiltering,\n      textFieldRef,\n      userInput\n    } = useSelectSingle<K, D>({\n      addToList,\n      advancedSearch,\n      data,\n      inputRef: enabledElementRef as MutableRef<HTMLInputElement>,\n      isDisabled,\n      isFocused: origIsFocused,\n      isReadonly,\n      onAddToListAction,\n      onAdvancedSearchAction,\n      onCommit,\n      onFilter,\n      valueItem\n    });\n\n    // The incoming propIsLoading tells us that we are in a loading state, but we don't want to\n    // show the loading indicator until after a delay, because showing it immediately could result\n    // in unwanted flashing.  The isLoading var below will be set to true by useLoadingIndicatorTimer\n    // after the delay, when the timer expires, at which point we should show the loading indicator.\n    // If propIsLoading is set to false before the timer expires, then the timer will be cancelled\n    // and no loading indicator will be shown.\n    // (ListView detects its loading state by checking data === null.  While it would be nice for\n    // us to be consistent and check valueItems === null, we need to use a separate isLoading prop.\n    // If valueItems === null triggers our loading state, then the selections in the dropdown\n    // are cleared for that period of time, which is undesirable.)\n    const isLoading = useLoadingIndicatorTimer(propIsLoading ?? false);\n\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isFocused,\n      isLoading,\n      isReadonly,\n      isRequiredShown,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      userAssistanceDensity,\n      value: valueItem !== undefined ? true : undefined\n    });\n\n    // JET-54256 - inside label animates up on initial display with selected value\n    // If we're waiting for the selected values to load, the component should look like it\n    // has a value in the meantime.\n    // Use the original propIsLoading instead of isLoading because we don't want to delay\n    // the inside label position by a timer like we do the progressive loading indicator.\n    formFieldContext.hasValue = propIsLoading || formFieldContext.hasValue;\n\n    const dropdownId = `${baseId}-dropdown`;\n\n    const displayValue = useDisplayValue(itemText, valueItem);\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={mainFieldRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n    if (isReadonly) {\n      const mainContent = (\n        <ReadonlyTextFieldInput\n          aria-describedby={inputProps['aria-describedby']}\n          aria-label={ariaLabel}\n          aria-labelledby={labelProps.id}\n          as=\"div\"\n          elementRef={readonlyElementRef}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n          textAlign={textAlign}\n          value={displayValue}\n        />\n      );\n\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onFocusOut}\n            onFocus={focusProps.onFocusIn}\n            ref={mainFieldRef}\n            mainContent={mainContent}\n            testId={testId}\n            {...fieldLabelProps}></ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const hasInsideLabel = labelComp !== undefined && labelEdge === 'inside';\n    const liveRegionText =\n      isDropdownOpen && isDataFetched\n        ? data?.totalSize === 0\n          ? translations.select_noMatchesFound()\n          : data?.totalSize === 1\n          ? translations.select_oneMatchFound()\n          : data?.sizePrecision === 'exact'\n          ? translations.select_sizeMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n          : translations.select_sizeOrMoreMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n        : '';\n\n    const hasEmptyLabel = label === '' && labelEdge === 'none';\n    // Use the mobile field if the component is being rendered in a phone\n    // and it is not disabled.\n    const isPhoneMainFieldInput = isPhone() && !isDisabled;\n    const mainContent = !isPhoneMainFieldInput ? (\n      <SelectSingleFieldInput\n        aria-controls={dropdownId}\n        aria-expanded={isDropdownOpen}\n        aria-label={ariaLabel}\n        displayValue={displayValue}\n        hasEmptyLabel={label === '' && labelEdge === 'none'}\n        hasInsideLabel={hasInsideLabel}\n        inputRef={enabledElementRef}\n        isAddToListShown={isAddToListShown}\n        isAdvancedSearchShown={isAdvancedSearchShown}\n        isRequired={isRequired}\n        isUserFiltering={isUserFiltering}\n        liveRegionText={liveRegionText}\n        placeholder={placeholder}\n        textAlign={textAlign}\n        userInput={userInput}\n        // In tablet, we would want to show the virtual keyboard\n        virtualKeyboard={isTablet() ? virtualKeyboard : undefined}\n        {...inputProps}\n        {...inputEventHandlers}\n      />\n    ) : (\n      <SelectMobileFieldInput\n        aria-controls={dropdownId}\n        aria-describedby={inputProps['aria-describedby']}\n        aria-expanded={isDropdownOpen}\n        aria-invalid={inputProps['aria-invalid']}\n        aria-label={ariaLabel}\n        aria-labelledby={labelProps.id}\n        displayValue={displayValue}\n        hasEmptyLabel={hasEmptyLabel}\n        hasInsideLabel={hasInsideLabel}\n        isRequired={isRequired}\n        onBlur={inputProps.onBlur}\n        onFocus={inputProps.onFocus}\n        placeholder={placeholder}\n        ref={enabledElementRef as Ref<HTMLDivElement>}\n        textAlign={textAlign}\n        variant={inputProps.variant}\n      />\n    );\n\n    const shouldShowDropdown =\n      isDropdownOpen &&\n      data !== undefined &&\n      (data === null || data.totalSize > 0 || isBeforeDataFetch<K, D>(data) || isEmptyResults);\n    const dropdown = !shouldShowDropdown ? null : isPhone() ? (\n      <SelectSingleMobileDropdown\n        {...collectionProps}\n        aria-describedby={ariaDescribedBy}\n        aria-label={ariaLabel}\n        assistiveText={assistiveText}\n        clearValue={clearValue}\n        data={data}\n        displayValue={displayValue}\n        dropdownId={dropdownId}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        isAddToListShown={isAddToListShown}\n        isAdvancedSearchShown={isAdvancedSearchShown}\n        isEmptyResults={isEmptyResults}\n        isFocused={isFocused}\n        isLoading={isLoading}\n        isOpen={shouldShowDropdown}\n        isRequired={isRequired}\n        isUserFiltering={isUserFiltering}\n        itemRenderer={itemRenderer}\n        itemText={itemText}\n        label={label}\n        liveRegionText={liveRegionText}\n        mainFieldInputRef={enabledElementRef}\n        onAddToListAction={addToListEventHandlers.onAction}\n        onAdvancedSearchAction={advancedSearchEventHandlers.onAction}\n        onFieldBlur={focusProps.onFocusOut}\n        onFieldFocus={focusProps.onFocusIn}\n        onFieldInput={inputEventHandlers.onInput}\n        onFieldKeyDown={inputEventHandlers.onKeyDown}\n        onFieldKeyUp={inputEventHandlers.onKeyUp}\n        onLoadRange={onLoadRange}\n        placeholder={placeholder}\n        propIsLoading={propIsLoading}\n        searchText={searchText}\n        setDropdownOpen={setDropdownOpen}\n        stopFiltering={stopFiltering}\n        setUserInput={setUserInput}\n        textAlign={textAlign}\n        userAssistanceDensity={userAssistanceDensity}\n        userInput={userInput}\n        virtualKeyboard={virtualKeyboard}\n      />\n    ) : (\n      <SelectSingleDesktopDropdown\n        {...collectionProps}\n        {...dropdownEventHandlers}\n        assistiveText={assistiveText}\n        data={data}\n        dropdownId={dropdownId}\n        dropdownRef={dropdownRef}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        isAddToListShown={isAddToListShown}\n        isAdvancedSearchShown={isAdvancedSearchShown}\n        isDisabled={isDisabled}\n        isDropdownAbove={isDropdownAbove}\n        isEmptyResults={isEmptyResults}\n        isOpen={shouldShowDropdown}\n        isReadonly={isReadonly}\n        isUserFiltering={isUserFiltering}\n        itemRenderer={itemRenderer}\n        itemText={itemText}\n        label={label}\n        mainFieldRef={mainFieldRef}\n        onAddToListAction={addToListEventHandlers.onAction}\n        onAdvancedSearchAction={advancedSearchEventHandlers.onAction}\n        onLoadRange={onLoadRange}\n        searchText={searchText}\n        userAssistanceDensity={userAssistanceDensity}\n      />\n    );\n\n    return (\n      <Fragment>\n        <FormFieldContext.Provider value={formFieldContext}>\n          <SelectSingleField\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            hasInsideLabel={hasInsideLabel}\n            inlineUserAssistance={inlineUserAssistance}\n            isDropdownArrowShown={true}\n            mainFieldRef={mainFieldRef}\n            onBlur={focusProps?.onFocusOut}\n            onDropdownArrowClick={dropdownArrowEventHandlers.onClick}\n            onFocus={focusProps?.onFocusIn}\n            rootRef={textFieldRef as Ref<HTMLElement> | undefined}\n            testId={testId}\n            {...textFieldProps}\n            {...fieldLabelProps}\n            {...mouseProps}>\n            {mainContent}\n          </SelectSingleField>\n        </FormFieldContext.Provider>\n        {dropdown}\n      </Fragment>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { Ref, useCallback, useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useEffectEvent } from '#hooks/PRIVATE_useEffectEvent';\nimport { DataState, ItemActionDetail } from '../UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { isControlOrFunctionKey, KEYS } from '../utils/PRIVATE_keyboardUtils';\nimport {\n  isBeforeDataFetch,\n  isPhone,\n  isSearchTextEmptyOrUndefined,\n  useSelectCommon\n} from '../PRIVATE_SelectCommon';\nimport { SelectSingle } from './SelectSingle';\n\ntype PickedPropsFromSelectSingle = Pick<\n  ComponentProps<typeof SelectSingle>,\n  | 'addToList'\n  | 'advancedSearch'\n  | 'isDisabled'\n  | 'isReadonly'\n  | 'onAddToListAction'\n  | 'onAdvancedSearchAction'\n  | 'onFilter'\n>;\ntype UseSelectSingleProps<K, D> = PickedPropsFromSelectSingle & {\n  data?: DataState<K, D> | null;\n  inputRef: Ref<HTMLInputElement>;\n  isFocused?: boolean;\n  onCommit: (detail: ValueUpdateDetail<K>) => void;\n  valueItem?: Item<K, D>;\n};\n\n/**\n * Hook that manages SelectSingle state and behavior.  This hook creates state variables and\n * event listeners, returning properties to apply to components internally rendered by\n * SelectSingle, as well as state information.\n *\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element.\n * @param isDisabled Specifies whether the component is disabled.\n * @param isFocused Specifies whether the component has focus.\n * @param isReadonly Specifies whether the component is readonly.\n * @param onCommit Callback invoked when the selected value is committed.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n * @param valueItem Specifies the key, data, and optional metadata for the selected value.\n *\n * @returns Properties to apply to internal components that SelectSingle renders, and component\n * state.\n */\nexport function useSelectSingle<K, D>({\n  addToList,\n  advancedSearch,\n  data,\n  inputRef,\n  isDisabled,\n  isFocused: propIsFocused,\n  isReadonly,\n  onAddToListAction,\n  onAdvancedSearchAction,\n  onCommit: propOnCommit,\n  onFilter,\n  valueItem\n}: UseSelectSingleProps<K, D>) {\n  const {\n    currentRow,\n    dropdownRef,\n    getDropdownTabbableElems,\n    handleDropdownArrowClick,\n    handleDropdownAutoDismiss: baseHandleDropdownAutoDismiss,\n    handleDropdownPosition,\n    handleInput,\n    handleMainFieldKeyDown: baseHandleMainFieldKeyDown,\n    handleMainFieldKeyUp,\n    isDropdownAbove,\n    isDropdownOpen,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    onCurrentKeyChange,\n    onMouseDown,\n    searchText,\n    setCurrentRow,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    userInput\n  } = useSelectCommon<K, D>({\n    data,\n    inputRef,\n    isFocused: propIsFocused,\n    onFilter\n  });\n\n  const [selectedKeys, setSelectedKeys] = useState<Set<K>>();\n  const [isBlurClearValue, setBlurClearValue] = useState(false);\n  const [prevIsFocused, setPrevIsFocused] = useState(isFocused);\n  const [isTabbingOutOfDropdown, setTabbingOutOfDropdown] = useState(false);\n\n  // refs used by some of the effects below to determine whether the effect needs to run,\n  // for when the list of dependencies is longer than what we want the trigger to actually be\n  const prevDataRef = useRef(data);\n  const prevDropdownOpenRef = useRef(isDropdownOpen);\n  const prevSearchText = useRef(searchText);\n\n  const isAdvancedSearchShown =\n    advancedSearch === 'on' && isUserFiltering && searchText != null && searchText.length > 0;\n  const isDataFetched = data !== undefined && data !== null && !isBeforeDataFetch<K, D>(data);\n  const isEmptyResults = isDataFetched && data?.totalSize === 0;\n  // advanced search and add to list should not be shown at the same time, so if both are on,\n  // let advanced search win because it is shown more often than add to list in the dropdown\n  // (even when the list is not empty) and its external UI could potentially include the\n  // ability to add to list too\n  const isAddToListShown =\n    addToList === 'on' &&\n    advancedSearch !== 'on' &&\n    isUserFiltering &&\n    searchText != null &&\n    searchText.length > 0 &&\n    isEmptyResults;\n\n  const handleAddToListAction = useCallback(() => {\n    setDropdownOpen(false);\n    stopFiltering();\n    onAddToListAction?.({ searchText: isUserFiltering ? searchText : undefined });\n  }, [isUserFiltering, onAddToListAction, searchText, setDropdownOpen, stopFiltering]);\n\n  const handleAdvancedSearchAction = useCallback(() => {\n    setDropdownOpen(false);\n    stopFiltering();\n    onAdvancedSearchAction?.({ searchText: isUserFiltering ? searchText : undefined });\n  }, [isUserFiltering, onAdvancedSearchAction, searchText, setDropdownOpen, stopFiltering]);\n\n  const onCommit = useCallback(\n    (value?: K) => {\n      propOnCommit?.({\n        value: value,\n        previousValue: valueItem !== undefined ? valueItem.key : undefined\n      });\n    },\n    [propOnCommit, valueItem]\n  );\n\n  const clearValue = useCallback(\n    (shouldCloseDropdown = true) => {\n      if (shouldCloseDropdown) {\n        setDropdownOpen(false);\n      }\n\n      setSelectedKeys(new Set<K>());\n\n      // call the onCommit callback so that the consuming code can update the valueItem\n      onCommit(undefined);\n    },\n    [onCommit, setDropdownOpen]\n  );\n\n  // determine if we need to clear the value because the user has deleted all the text\n  const isClearValueNeeded = useCallback(() => {\n    return isUserFiltering && userInput === '' && valueItem !== undefined;\n  }, [isUserFiltering, userInput, valueItem]);\n\n  const clearValueIfNeeded = useCallback(() => {\n    if (isClearValueNeeded()) {\n      clearValue();\n      return true;\n    }\n    return false;\n  }, [clearValue, isClearValueNeeded]);\n\n  // JET-65757 - Empty value rejected when not confirmed by Enter/Tab\n  // When the field loses focus, check to see if we need to clear the value and set a state flag\n  // to later check in a useEffect.\n  // (We have to make this check outside of the useEffect itself because by the time the useEffect\n  // is called, the state we check here to see if we need to clear the value may have already\n  // been changed.)\n  if (\n    prevIsFocused &&\n    !isFocused &&\n    !isTabbingOutOfDropdown &&\n    !isBlurClearValue &&\n    isClearValueNeeded()\n  ) {\n    setBlurClearValue(true);\n  }\n  // Create this function with useEffectEvent so that it is stable and by itself won't cause\n  // the below dependent useEffect to trigger.\n  const handleBlur_stable = useEffectEvent(() => {\n    // if we need to clear the value, do it now and reset the flag\n    if (isBlurClearValue) {\n      clearValue();\n      setBlurClearValue(false);\n    }\n    // if we were tabbing out of the dropdown, reset the flag now that we've lost focus\n    if (isTabbingOutOfDropdown) {\n      setTabbingOutOfDropdown(false);\n    }\n  });\n  // only run this effect when focus changes (handleBlur_stable has to be listed\n  // as a dependency, but it's stable and won't change across renders)\n  useEffect(() => {\n    if (!isFocused) {\n      handleBlur_stable();\n    }\n  }, [handleBlur_stable, isFocused]);\n\n  // JET-60376 - Evaluate unit test driving strategy for SelectSingle\n  // Add a _changeValue method to the root DOM element so that a test adapter can call it\n  // to simulate the user changing the value, similar to what we do in the core pack select\n  // component test adapters.\n  const textFieldRef = useRef<HTMLElement>();\n  const changeValue = useCallback(\n    (value?: K) => {\n      // we always want this method available on the DOM element so that a test can call it,\n      // but we only want it to change the value when the component is enabled because that's\n      // the only time the user could change the value through the UI\n      if (!isReadonly && !isDisabled) {\n        onCommit(value);\n        return Promise.resolve();\n      }\n      return Promise.reject('Component is readonly or disabled');\n    },\n    [isDisabled, isReadonly, onCommit]\n  );\n  useEffect(() => {\n    const ref = isReadonly ? mainFieldRef : textFieldRef;\n    if (ref.current) {\n      (ref.current as any)._changeValue = changeValue;\n    }\n  }, [changeValue, isReadonly, mainFieldRef]);\n\n  const focusInput = useCallback(() => {\n    inputRef.current?.focus();\n  }, [inputRef]);\n\n  const removeDropdown = useCallback(() => {\n    dropdownRef.current?.parentElement?.removeChild(dropdownRef.current);\n  }, [dropdownRef]);\n\n  const myHandleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        if (event?.type === 'keydown') {\n          const keyboardEvent = event as KeyboardEvent;\n          switch (keyboardEvent.code) {\n            case KEYS.TAB:\n              // if there are multiple tabbable elements in the dropdown, like the list and\n              // the advanced search link, then leave the dropdown open when tabbing among them\n              const isShift = keyboardEvent.shiftKey;\n              const tabbableElems = getDropdownTabbableElems();\n              if (tabbableElems && tabbableElems.length > 1) {\n                const firstTabbableElem = tabbableElems[0];\n                const lastTabbableElem = tabbableElems[tabbableElems.length - 1];\n                // check if tabbing forwards and focus is not on the last tabbable elem or\n                // tabbing backwards and focus is not on the first tabbable elem,\n                // then keep the dropdown open and simply return\n                if (\n                  (!isShift && document.activeElement !== lastTabbableElem) ||\n                  (isShift && document.activeElement !== firstTabbableElem)\n                ) {\n                  setDropdownOpen(true);\n                  return;\n                }\n              }\n\n              // if there is a currentRow in the dropdown, select it and commit it\n              if (\n                currentRow !== undefined &&\n                currentRow.rowKey !== undefined &&\n                data != null &&\n                data.data.length > 0\n              ) {\n                setSelectedKeys(new Set<K>([currentRow.rowKey]));\n                onCommit(currentRow.rowKey);\n\n                // set flag that we're tabbing out of dropdown so that we can check it in a\n                // useEffect that gets executed when we lose focus\n                setTabbingOutOfDropdown(true);\n              }\n\n              // Put focus on an element in the main field, but don't kill the event, so that\n              // the browser can naturally transfer focus to the next focusable item relative\n              // to the element in the main field.\n              focusInput();\n\n              // Remove the dropdown immediately, without waiting for a rerender based on changing\n              // state, so that the open dropdown cannot get focus when the browser handles the\n              // Tab key.\n              removeDropdown();\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    },\n    [\n      currentRow,\n      data,\n      focusInput,\n      getDropdownTabbableElems,\n      isDropdownOpen,\n      onCommit,\n      removeDropdown,\n      setDropdownOpen\n    ]\n  );\n\n  const myHandleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.TAB:\n          // if we're not going to clear the value when the component loses focus,\n          // check whether we need to select the current item\n          const isValueClearedTab = isClearValueNeeded();\n          if (!isValueClearedTab && isDropdownOpen && data != null && data.data.length > 0) {\n            // if there is a currentRow in the dropdown (meaning a highlighted item that would\n            // have keyboard focus if the dropdown list had physical focus, which may be different\n            // from the currently selected item), select it and commit it;\n            // otherwise commit the currently selected value again so that a valueAction event\n            // will be fired\n            if (currentRow !== undefined && currentRow.rowKey !== undefined) {\n              setSelectedKeys(new Set<K>([currentRow.rowKey]));\n              onCommit(currentRow.rowKey);\n            } else {\n              onCommit(valueItem?.key ?? undefined);\n            }\n          }\n\n          // Remove the dropdown immediately, without waiting for a rerender based on changing\n          // state, so that the open dropdown cannot get focus when the browser handles the\n          // Tab key.\n          removeDropdown();\n\n          setDropdownOpen(false);\n          break;\n\n        case KEYS.ENTER:\n          // if this is on a mobile device (only phone and not in tablet devices), do not do anything\n          if (isPhone()) {\n            return;\n          }\n\n          // if add to list is shown, there are no results, so trigger the add to list link\n          if (isAddToListShown) {\n            handleAddToListAction();\n            return;\n          }\n\n          // if advanced search is shown and there are no results, trigger the advanced\n          // search link\n          if (isAdvancedSearchShown && isEmptyResults) {\n            handleAdvancedSearchAction();\n            return;\n          }\n\n          // check whether we need to clear the value;\n          // if not, check whether we need to select the current item\n          const isValueCleared = clearValueIfNeeded();\n          if (!isValueCleared && isDropdownOpen && data != null && data.data.length > 0) {\n            setDropdownOpen(false);\n\n            // after selecting a value, the user is no longer actively filtering, so update related\n            // state accordingly so that the newly selected value appears in the field\n            stopFiltering();\n\n            // if there is a currentRow in the dropdown, select it and commit it;\n            // otherwise commit the currently selected value again\n            if (currentRow !== undefined && currentRow.rowKey !== undefined) {\n              setSelectedKeys(new Set<K>([currentRow.rowKey]));\n              onCommit(currentRow.rowKey);\n            } else {\n              onCommit(valueItem?.key ?? undefined);\n            }\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [\n      clearValueIfNeeded,\n      currentRow,\n      data,\n      handleAddToListAction,\n      handleAdvancedSearchAction,\n      isAddToListShown,\n      isAdvancedSearchShown,\n      isClearValueNeeded,\n      isDropdownOpen,\n      isEmptyResults,\n      onCommit,\n      removeDropdown,\n      setDropdownOpen,\n      stopFiltering,\n      valueItem\n    ]\n  );\n\n  // when the valueItem changes, save the new selectedKeys\n  useEffect(() => {\n    setSelectedKeys(valueItem === undefined ? undefined : new Set([valueItem.key]));\n  }, [valueItem]);\n\n  const onItemAction = useCallback(\n    (detail: ItemActionDetail<K, D>) => {\n      focusInput();\n      setDropdownOpen(false);\n\n      // after selecting a value, the user is no longer actively filtering, so update related\n      // state accordingly so that the newly selected value appears in the field\n      stopFiltering();\n\n      const newKey = detail.context.metadata.key;\n      // update the selectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for a new valueItem to be set\n      setSelectedKeys(new Set([newKey]));\n      // call the onCommit callback so that the consuming code can update the valueItem\n      onCommit(newKey);\n    },\n    [focusInput, onCommit, setDropdownOpen, stopFiltering]\n  );\n\n  useEffect(() => {\n    // only run this effect when data changes because we need to wait for the new set of\n    // filtered data to be set before highlighting the first result\n    if (data === prevDataRef.current) {\n      return;\n    }\n\n    // when filtering, set the first result of the filtered data set to be the current item\n    // (check the data offset so we don't try to highlight again if the user scrolls through\n    // the list and more data is fetched)\n    if (\n      isDropdownOpen &&\n      isUserFiltering &&\n      data != null &&\n      data.offset === 0 &&\n      data.data.length > 0\n    ) {\n      // if there are results and search text, highlight the first row, otherwise clear\n      // an existing highlight\n      setCurrentRow({\n        rowKey: !isSearchTextEmptyOrUndefined(searchText) ? data.data[0].metadata.key : undefined\n      });\n    }\n  }, [data, isDropdownOpen, isUserFiltering, searchText, setCurrentRow]);\n\n  useEffect(() => {\n    // only run this effect when the state of the dropdown changes\n    if (isDropdownOpen === prevDropdownOpenRef.current) {\n      return;\n    }\n\n    // JET-66783 - <oj-c-select-single> scroll position is not at selected item when we open the list second time.\n    // set the current item to the selected item (if there is one)\n    // when the dropdown opens if there is no filter text\n    if (\n      isDropdownOpen &&\n      (!isUserFiltering || searchText === undefined || searchText.length === 0)\n    ) {\n      setCurrentRow({ rowKey: [...(selectedKeys ?? [undefined])][0] });\n    }\n  }, [isDropdownOpen, isUserFiltering, searchText, selectedKeys, setCurrentRow]);\n\n  const dropdownEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onAutoDismiss: baseHandleDropdownAutoDismiss,\n        onPosition: handleDropdownPosition\n      },\n      { onAutoDismiss: myHandleDropdownAutoDismiss }\n    );\n  }, [baseHandleDropdownAutoDismiss, handleDropdownPosition, myHandleDropdownAutoDismiss]);\n\n  const inputEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onInput: handleInput,\n        onKeyDown: baseHandleMainFieldKeyDown,\n        onKeyUp: handleMainFieldKeyUp\n      },\n      { onKeyDown: myHandleMainFieldKeyDown }\n    );\n  }, [baseHandleMainFieldKeyDown, handleInput, handleMainFieldKeyUp, myHandleMainFieldKeyDown]);\n\n  if (isFocused !== prevIsFocused) {\n    setPrevIsFocused(isFocused);\n  }\n\n  // update refs used in some of the above effects in a useEffect on every render so that they\n  // update after the above effects run\n  useEffect(() => {\n    prevDataRef.current = data;\n    prevDropdownOpenRef.current = isDropdownOpen;\n    prevSearchText.current = searchText;\n  });\n\n  return {\n    addToListEventHandlers: {\n      onAction: handleAddToListAction\n    },\n    advancedSearchEventHandlers: {\n      onAction: handleAdvancedSearchAction\n    },\n    collectionProps: {\n      currentKey: currentRow.rowKey,\n      onCurrentKeyChange,\n      onItemAction,\n      selectedKeys\n    },\n    dropdownArrowEventHandlers: {\n      onClick: handleDropdownArrowClick\n    },\n    clearValue,\n    dropdownEventHandlers,\n    dropdownRef,\n    inputEventHandlers,\n    inputRef,\n    isAddToListShown,\n    isAdvancedSearchShown,\n    isDataFetched,\n    isDropdownAbove,\n    isDropdownOpen,\n    isEmptyResults,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    mouseProps: isDisabled || isReadonly ? {} : { onMouseDown },\n    searchText,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    textFieldRef,\n    userInput\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { renderItemText } from '../PRIVATE_SelectCommon';\n\nexport function useDisplayValue<K, D>(\n  itemText: ItemTextType<K, D>,\n  valueItem?: Item<K, D>\n): string {\n  // create the text displayed in the field from the selected value\n  const displayValue = useMemo(() => {\n    return valueItem === undefined ? '' : renderItemText(valueItem, itemText) ?? '';\n  }, [valueItem, itemText]);\n\n  return displayValue;\n}\n"],"names":["SelectSingleDesktopDropdown","assistiveText","currentKey","data","dropdownId","dropdownRef","helpSourceLink","helpSourceText","isAddToListShown","isAdvancedSearchShown","isDisabled","isDropdownAbove","isEmptyResults","isOpen","isReadonly","isUserFiltering","itemRenderer","itemText","label","mainFieldRef","onAddToListAction","onAdvancedSearchAction","onAutoDismiss","onCurrentKeyChange","onItemAction","onLoadRange","onPosition","searchText","selectedKeys","userAssistanceDensity","translations","useTranslationBundle","dropdownInlineUserAssistance","undefined","_jsx","TabbableModeContext","Provider","value","isTabbable","children","jsx","DropdownUserAssistance","fieldLabel","dropdownListContent","EmptyResults","DefaultList","currentItemVariant","selectionMode","addToListContent","LinkItem","isHighlighted","onAction","select_addToList","advancedSearchContent","_jsxs","onMouseDown","preventDefault","Separator","select_moreSearchOptions","Dropdown","anchorRef","id","jsxs","DropdownList","hasBottomGap","isLoading","SelectSingleField","hasInsideLabel","isBackButtonShown","isClearButtonShown","isDropdownArrowShown","onBackButtonClick","onClearButtonClick","onDropdownArrowClick","passThroughTextFieldProps","useFormFieldContext","startContent","IconButton","selectMultiple_back","size","variant","NavLeft","endContent","_Fragment","Fragment","formControl_clear","CancelS","SvgCancelS","DropdownArrow","onClick","testId","TextField","mainContent","SelectSingleFieldInput","displayValue","liveRegionText","userInput","virtualKeyboard","passThroughTextFieldInputProps","addToListAccText","select_addToListAvailable","advancedSearchAccText","select_moreSearchOptionsAvailable","TextFieldInput","hasEndContent","autoComplete","role","spellcheck","type","LiveRegion","SelectSingleMobileDropdown","ariaDescribedBy","ariaLabel","clearValue","isFocused","isRequired","mainFieldInputRef","onFieldBlur","onFieldFocus","onFieldInput","onFieldKeyDown","onFieldKeyUp","placeholder","propIsLoading","setDropdownOpen","setUserInput","stopFiltering","textAlign","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","isRequiredShown","labelEdge","styleVariant","selectSingleFieldInputProps","selectSingleFieldProps","inputRef","isDropdownOpen","dropdownInputRef","useRef","closeDropdown","useCallback","current","focus","wasDropdownOpen","useEffect","setTimeout","isInitialRender","hasEmptyLabel","removeIcon","isSearchTextEmptyOrUndefined","useMobileDropdown","hasValue","mobileDropdownFieldLabelProps","Label","SelectMobileDropdown","header","FormFieldContext","View","onFocus","onBlur","onInput","onKeyDown","onKeyUp","hasHeaderSeparator","hasTopGap","SelectSingle","forwardRef","addToList","advancedSearch","columnSpan","propIsDisabled","propIsReadonly","propLabelEdge","labelStartWidth","propLabelStartWidth","messages","onCommit","onFilter","propTextAlign","propUserAssistanceDensity","valueItem","ref","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","enabledElementRef","focusProps","origIsFocused","readonlyElementRef","useFocusableTextField","addToListEventHandlers","advancedSearchEventHandlers","collectionProps","dropdownArrowEventHandlers","dropdownEventHandlers","inputEventHandlers","isDataFetched","mouseProps","textFieldRef","propIsFocused","propOnCommit","currentRow","getDropdownTabbableElems","handleDropdownArrowClick","handleDropdownAutoDismiss","baseHandleDropdownAutoDismiss","handleDropdownPosition","handleInput","handleMainFieldKeyDown","baseHandleMainFieldKeyDown","handleMainFieldKeyUp","setCurrentRow","useSelectCommon","setSelectedKeys","useState","isBlurClearValue","setBlurClearValue","prevIsFocused","setPrevIsFocused","isTabbingOutOfDropdown","setTabbingOutOfDropdown","prevDataRef","prevDropdownOpenRef","prevSearchText","length","isBeforeDataFetch","totalSize","handleAddToListAction","handleAdvancedSearchAction","previousValue","key","shouldCloseDropdown","Set","isClearValueNeeded","clearValueIfNeeded","handleBlur_stable","useEffectEvent","changeValue","Promise","reject","resolve","_changeValue","focusInput","removeDropdown","parentElement","removeChild","myHandleDropdownAutoDismiss","event","keyboardEvent","code","KEYS","TAB","isShift","shiftKey","tabbableElems","firstTabbableElem","lastTabbableElem","document","activeElement","rowKey","myHandleMainFieldKeyDown","isControlOrFunctionKey","ENTER","isPhone","detail","newKey","context","metadata","offset","useMemo","mergeProps","useSelectSingle","useLoadingIndicatorTimer","baseId","renderItemText","useDisplayValue","labelComp","fieldLabelProps","inlineUserAssistance","InlineUserAssistance","compactUserAssistance","CompactUserAssistance","ReadonlyTextFieldInput","as","elementRef","ReadonlyTextField","onFocusOut","onFocusIn","select_noMatchesFound","select_oneMatchFound","sizePrecision","select_sizeMatchesFound","TOTAL_SIZE","select_sizeOrMoreMatchesFound","SelectMobileFieldInput","isTablet","shouldShowDropdown","dropdown","rootRef"],"mappings":"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"}
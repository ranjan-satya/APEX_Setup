{"version":3,"file":"meterUtils-b625ddb8.js","sources":["../../src/utils/PRIVATE_meterUtils/meterUtils.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Threshold, ThresholdDisplay, getVisThresholdColor } from '../UNSAFE_meterUtils';\nimport { HTMLAttributesSignalExcluded } from '../UNSAFE_attributeUtils';\nimport { ColorProps } from '../UNSAFE_interpolations/colors';\nimport { xUnits } from '#UNSAFE_Theme';\n\n/**\n * Validates the min, max, value and step passed to the meter are in appropriate range.\n * @throws { RangeError }\n * @param min The minimum value of the meter.\n * @param max The maximum value of the meter.\n * @param value The metric value of the meter.\n * @param step The step value of the meter.\n */\nexport function validateRange(min: number, max: number, value: number, step: number): void {\n  if (min > max) {\n    throw new RangeError('The min must be lower or equal to max.');\n  }\n\n  if (value < min || value > max) {\n    throw new RangeError('The value must be between min and max.');\n  }\n\n  if (step > max - min) {\n    throw new RangeError('The step value must be less than the difference of max and min');\n  }\n}\n\n/**\n * Returns the threshold that the current value belongs to. Returns undefined if the current value does not belong to\n * any threshold or if thresholds is undefined.\n * @param value The value in meter.\n * @param thresholds The list of thresholds.\n * @returns The Threshold that current value belongs to.\n */\nexport function findThreshold(value: number, thresholds?: Threshold[]): Threshold | undefined {\n  if (!thresholds) {\n    return;\n  }\n  if (value <= thresholds[0].max) {\n    return thresholds[0];\n  }\n  let minValue = thresholds[0].max;\n  for (let i = 1; i < thresholds.length; i++) {\n    if (minValue < value && value <= thresholds[i].max) {\n      return thresholds[i];\n    }\n    minValue = thresholds[i].max;\n  }\n  return;\n}\n\n/**\n * Returns the color of track for the meter.\n * @param trackColor The color provided via trackColor prop of the meter.\n * @param thresholdDisplay  Specifies whether current threshold to display in track, indicator or all thresholds in track.\n * @param currentThreshold Current threshold for the meter value.\n * @returns The color of the track for the meter.\n */\nfunction getTrackColor(\n  thresholdDisplay: ThresholdDisplay,\n  currentThreshold: Threshold | undefined,\n  trackColor?: ColorProps['color']\n): string | undefined {\n  if (thresholdDisplay === 'track' && currentThreshold?.color) {\n    return getVisThresholdColor(currentThreshold?.color);\n  }\n  return trackColor;\n}\n\n/**\n * Returns the color of indicator for the meter.\n * @param indicatorColor The color provided via indicatorColor prop of the meter.\n * @param thresholdDisplay  Specifies whether current threshold to display in track, indicator or all thresholds in track.\n * @param currentThreshold Current threshold for the meter value.\n * @returns The color of the indicator of the meter.\n */\nfunction getIndicatorColor(\n  thresholdDisplay: ThresholdDisplay,\n  currentThreshold: Threshold | undefined,\n  indicatorColor?: ColorProps['color']\n): string | undefined {\n  if (currentThreshold?.color && thresholdDisplay === 'indicator') {\n    return getVisThresholdColor(currentThreshold.color);\n  }\n  return indicatorColor;\n}\n\n/**\n * Returns the color of track and indicator of the meter.\n * @param value The value of the meter.\n * @param trackColor The color provided via trackColor prop.\n * @param indicatorColor The color provided via indicatorColor prop.\n * @param thresholdDisplay Specifies whether current threshold to display in track, indicator or all thresholds in track.\n * @param thresholds The thresholds for metric value of the meter.\n * @returns The color of the indicator and track of the meter.\n */\nexport function getTrackAndIndicatorColor(\n  value: number,\n  thresholdDisplay: ThresholdDisplay,\n  trackColor?: ColorProps['color'],\n  indicatorColor?: ColorProps['color'],\n  thresholds?: Threshold[]\n): {\n  trackColor?: ColorProps['color'];\n  indicatorColor?: ColorProps['color'];\n} {\n  const currentThreshold = findThreshold(value, thresholds);\n  return {\n    trackColor: getTrackColor(thresholdDisplay, currentThreshold, trackColor),\n    indicatorColor: getIndicatorColor(thresholdDisplay, currentThreshold, indicatorColor)\n  };\n}\n\n/**\n * Returns the aria properties of the meter bar.\n * @param value The value of the meter bar.\n * @param min The minimum value of the meter bar.\n * @param max The maximum value of the meter bar.\n * @param ariaLabel The aria label of the meter bar.\n * @param ariaLabelledby The ariaLabelledBy of the meter bar.\n * @param thresholds The thresholds values for the meter bar.\n * @param isDisabled The gauge is disabled or not.\n * @param isReadonly the gauge is readonly or not.\n * @param tooltip The tooltip values for the rating gauge.\n * @returns The aria properties of the meter\n */\nexport function getMeterAriaProps(\n  value: number,\n  min: number,\n  max: number,\n  ariaLabel?: string,\n  ariaLabelledby?: string,\n  thresholds?: Threshold[],\n  isDisabled?: boolean,\n  isReadonly?: boolean,\n  tooltip?: string\n): {\n  'aria-label'?: HTMLAttributesSignalExcluded['aria-label'];\n  'aria-valuenow': HTMLAttributesSignalExcluded['aria-valuenow'];\n  'aria-valuemin': HTMLAttributesSignalExcluded['aria-valuemin'];\n  'aria-valuetext': HTMLAttributesSignalExcluded['aria-valuetext'];\n  'aria-valuemax': HTMLAttributesSignalExcluded['aria-valuemax'];\n  'aria-labelledby'?: HTMLAttributesSignalExcluded['aria-labelledby'];\n  'aria-disabled'?: HTMLAttributesSignalExcluded['aria-disabled'];\n  'aria-readonly'?: HTMLAttributesSignalExcluded['aria-readonly'];\n  role: HTMLAttributesSignalExcluded['role'];\n} {\n  const currentThreshold = findThreshold(value, thresholds);\n  const ariaValueText = currentThreshold?.accessibleLabel\n    ? `${value} ${currentThreshold.accessibleLabel}`\n    : `${value}`;\n  const ariaLabelText = ariaLabel\n    ? ariaLabel\n    : tooltip && isReadonly && !isDisabled\n    ? tooltip\n    : undefined;\n  return {\n    'aria-label': ariaLabelText,\n    'aria-valuenow': value,\n    'aria-valuemin': min,\n    'aria-valuetext': ariaValueText,\n    'aria-valuemax': max,\n    'aria-labelledby': ariaLabelledby,\n    'aria-disabled': isDisabled ? true : undefined,\n    'aria-readonly': isReadonly && !isDisabled ? true : undefined,\n    role: 'slider'\n  };\n}\n\n/**\n * Returns the threshold color that the current value belongs to. Returns component color if the current value does not belong to\n * any threshold or if thresholds is undefined.\n * @param value The value in meter.\n * @param thresholds The list of thresholds.\n * @returns The threshold color that current value belongs to.\n */\nexport function getThresholdColorFromValue(value: number, color: any, thresholds?: Threshold[]) {\n  const currentThreshold = findThreshold(value, thresholds);\n  if (currentThreshold?.color) {\n    return currentThreshold?.color;\n  }\n  return color;\n}\n\n/**\n * Returns the resolved values for the legend vars.\n */\nexport const meterVars = [\n  {\n    tokenVar: xUnits(1),\n    key: 'unit',\n    cssProp: 'padding'\n  }\n];\n"],"names":["getVisThresholdColor","xUnits"],"mappings":"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"}
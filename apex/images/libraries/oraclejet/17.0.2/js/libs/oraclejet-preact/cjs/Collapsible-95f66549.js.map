{"version":3,"file":"Collapsible-95f66549.js","sources":["../../src/UNSAFE_Collapsible/CollapsibleHeaderIcon.tsx","../../src/UNSAFE_Collapsible/useCollapsiblePress.ts","../../src/UNSAFE_Collapsible/CollapsibleHeader.tsx","../../src/UNSAFE_Collapsible/CollapsibleContent.tsx","../../src/UNSAFE_Collapsible/Collapsible.tsx"],"sourcesContent":["import { ExpandIcon } from '../PRIVATE_ThemedIcons/ExpandIcon';\nimport { CollapseIcon } from '../PRIVATE_ThemedIcons/CollapseIcon';\nimport { CollapseUpIcon } from '../PRIVATE_ThemedIcons/CollapseUpIcon';\n\ntype IconProps = {\n  isExpanded: boolean;\n  isDisabled?: boolean;\n  iconPosition?: 'start' | 'end';\n};\n\n/**\n * Header icon subcomponent\n */\nexport const CollapsibleHeaderIcon = ({ isExpanded, isDisabled, iconPosition }: IconProps) => {\n  const color = isDisabled ? 'disabled' : 'primary';\n  const startIcon = iconPosition === 'start' && isExpanded ? ExpandIcon : CollapseIcon;\n  const endIcon = iconPosition === 'end' && isExpanded ? CollapseUpIcon : ExpandIcon;\n  const Icon = iconPosition === 'start' ? startIcon : endIcon;\n\n  return <Icon size=\"6x\" color={color} />;\n};\n","import { useMemo, useCallback, useState } from 'preact/hooks';\n\nexport type CollapsiblePressOptions = {\n  isDisabled?: boolean;\n};\n\nconst DefaultSettings = {\n  isDisabled: false\n};\n\n/**\n * Returns a click handler that can make a target element either clickable or keyboard pressable.\n *\n * @param onPressHandler function\n * @param isDisabled boolean\n * @returns\n */\nexport function useCollapsiblePress(\n  onPressHandler: (event: Event) => void,\n  settings: CollapsiblePressOptions = DefaultSettings\n): { pressProps: Record<string, any> } {\n  const [isPressed, setIsPressed] = useState<boolean>(false);\n  const mergedSettings = useMemo(() => {\n    return { ...DefaultSettings, ...settings };\n  }, [settings]);\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.code === 'Space' || event.code === 'Enter') {\n        // event.preventDefault();\n        setIsPressed(true);\n      }\n    },\n    [setIsPressed]\n  );\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.code === 'Space' || event.code === 'Enter') {\n        setIsPressed(false);\n        event.preventDefault();\n        onPressHandler(event);\n      }\n    },\n    [onPressHandler, setIsPressed]\n  );\n\n  const onBlur = useCallback(() => {\n    setIsPressed(false);\n  }, [setIsPressed]);\n\n  const onClickSingle = useCallback(\n    (event: Event) => {\n      // See note above about why propagation is stopped: to prevent nested component bubbling clicks issue\n      event.stopPropagation();\n      if (!isPressed) {\n        onPressHandler(event);\n      }\n    },\n    [onPressHandler, isPressed]\n  );\n\n  const pressProps = mergedSettings.isDisabled\n    ? {}\n    : {\n        onKeyDown,\n        onKeyUp,\n        onBlur,\n        onClick: onClickSingle\n      };\n\n  return {\n    pressProps\n  };\n}\n","import { Fragment } from 'preact';\nimport { useCallback, useState, useRef } from 'preact/hooks';\n\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { CollapsibleVariantOptions, CollapsibleStyles } from './themes/CollapsibleStyles.css';\n\nimport { Flex } from '../UNSAFE_Flex';\nimport { Separator } from '../UNSAFE_Separator';\nimport { CollapsibleHeaderIcon } from './CollapsibleHeaderIcon';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { useCollapsiblePress } from './useCollapsiblePress';\nimport { CollapsibleRedwoodTheme } from './themes/redwood/CollapsibleTheme';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'id' | 'children'>;\n\ntype HeaderProps = IntrinsicProps & {\n  id: string;\n  contentId: string;\n  isDisabled: boolean;\n  isExpanded: boolean;\n  iconPosition?: 'start' | 'end';\n  variant?: 'basic' | 'horizontal-rule';\n  toggleHandler: (target: EventTarget | null) => void;\n  accessibleLabel?: string;\n  accessibleLabelId?: string;\n};\n\n/**\n * Header subcomponent\n */\n\nexport const CollapsibleHeader = ({\n  children,\n  id,\n  contentId,\n  isDisabled,\n  isExpanded,\n  iconPosition,\n  variant = 'basic',\n  toggleHandler,\n  accessibleLabel,\n  accessibleLabelId\n}: HeaderProps) => {\n  const [hasFocus, setFocus] = useState<boolean>(false);\n  const isMouseDown = useRef<boolean>(false);\n\n  const { classes, styles } = useComponentTheme<CollapsibleVariantOptions, CollapsibleStyles>(\n    CollapsibleRedwoodTheme,\n    {\n      disabled: isDisabled ? 'isDisabled' : 'notDisabled',\n      divider: variant === 'horizontal-rule' ? 'hasDivider' : 'noDivider',\n      focused: hasFocus ? 'isFocused' : 'notFocused'\n    }\n  );\n\n  const childrenClasses = classNames([\n    styles.headerChildrenStyle,\n    iconPosition === 'end' && styles.iconEndStyle,\n    iconPosition === 'start' && styles.iconStartStyle\n  ]);\n\n  const pressHandler = useCallback(\n    (event: Event) => {\n      toggleHandler(event.target);\n      // if the header has focus highlight and the toggle was caused by a pointer action,\n      // remove focus highlight from the header div\n      // the test environment may not support PointerEvent, make sure it is supported\n      if (hasFocus) {\n        const hasPointerEvent = window && 'PointerEvent' in window;\n        if ((hasPointerEvent && event instanceof PointerEvent) || event instanceof MouseEvent) {\n          setFocus(false);\n        }\n      }\n    },\n    [toggleHandler, hasFocus]\n  );\n\n  const { pressProps } = useCollapsiblePress(pressHandler, {\n    isDisabled\n  });\n\n  // if focused, we want to render the focus highlight on the collapsible header div\n  const onFocus = useCallback((event: Event) => {\n    if (event.type === 'focusin' && !isMouseDown.current) {\n      setFocus(true);\n    } else {\n      setFocus(false);\n    }\n  }, []);\n\n  const mouseDownHandler = () => {\n    isMouseDown.current = true;\n  };\n\n  const mouseUpHandler = () => {\n    isMouseDown.current = false;\n  };\n\n  // Resolve accessible label. By default, the expand button is labelled by the header content.\n  // If accessibleLabel or accessibleLabeleId is specified, they get used instead.\n  const ariaLabelProp = accessibleLabel\n    ? { 'aria-label': accessibleLabel }\n    : accessibleLabelId\n    ? { 'aria-labelledby': accessibleLabelId }\n    : { 'aria-labelledby': id };\n\n  const getHeader = () => (\n    <Fragment>\n      {iconPosition === 'end' && <div className={childrenClasses}>{children}</div>}\n      <div\n        tabIndex={0}\n        role={'button'}\n        aria-controls={contentId}\n        aria-expanded={isExpanded}\n        onFocus={onFocus}\n        onBlur={onFocus}\n        onMouseDown={mouseDownHandler}\n        onMouseUp={mouseUpHandler}\n        className={styles.chevronStyle}\n        {...ariaLabelProp}>\n        <CollapsibleHeaderIcon\n          iconPosition={iconPosition}\n          isExpanded={isExpanded}\n          isDisabled={isDisabled}\n        />\n      </div>\n      {iconPosition === 'start' && <div className={childrenClasses}>{children}</div>}\n    </Fragment>\n  );\n\n  return (\n    <>\n      <div id={id} className={classes} {...pressProps}>\n        <Flex align=\"center\" justify={iconPosition === 'start' ? 'start' : 'between'}>\n          {getHeader()}\n        </Flex>\n      </div>\n      {variant === 'horizontal-rule' && <Separator />}\n    </>\n  );\n};\n","import { JSX } from 'preact';\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { useAnimation, UseAnimationConfig } from '../hooks/UNSAFE_useAnimation';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { CollapsibleStyles } from './themes/CollapsibleStyles.css';\n\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { CollapsibleRedwoodTheme } from './themes/redwood/CollapsibleTheme';\nimport { classNames } from '../utils/UNSAFE_classNames';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'children'>;\n\ntype ContentProps = IntrinsicProps & {\n  id: string;\n  isExpanded: boolean;\n  onTransitionEnd: () => void;\n};\n\n/**\n * The 'collapsing' and 'expanding' states are related to the animation. The 'unmounted' state\n * is used for conditional rendering. In this state, the Collapsible content is completely removed\n * from the DOM. The 'unmounted' state is set either as an initial state or when collapsing\n * animation ends.\n */\ntype Status = 'collapsing' | 'expanding' | 'unmounted';\n\nexport const CollapsibleContent = ({ children, id, isExpanded, onTransitionEnd }: ContentProps) => {\n  const [state, setState] = useState<Status>(isExpanded ? 'expanding' : 'unmounted');\n\n  const { styles } = useComponentTheme<never, CollapsibleStyles>(CollapsibleRedwoodTheme);\n\n  const classes = classNames([\n    styles.contentChildrenStyle,\n    state === 'unmounted' && styles.contentHiddenStyle\n  ]);\n\n  /**\n   * 1. On initial render, Preact sets style.maxHeight field to 0 or 'none'.\n   * 2. During expanding animation, useAnimation hook uses WAAPI to animate the maxHeight out\n   *    to the expanded value.\n   * 3. On subsequent re-renders, Preact does never updates the style.maxHeight value\n   *    because even though we are telling Preact that maxHeight should be 0 or 'none', Preact\n   *    considers the maxHeight value is 0 or 'none' as it is not aware that we changed this value\n   *    in step 2. So from Preact's perspective there is no difference.\n   */\n  const contentInitialStyle = useRef<JSX.CSSProperties>({\n    overflowY: 'hidden',\n    maxHeight: isExpanded ? 'none' : '0'\n  });\n\n  useEffect(() => {\n    // Ignore state update on initial render\n    if (state === 'unmounted' && !isExpanded) {\n      return;\n    }\n    setState(isExpanded ? 'expanding' : 'collapsing');\n  }, [isExpanded, state]);\n\n  const { nodeRef } = useAnimation<Status, HTMLDivElement>(state, {\n    animationStates,\n    onAnimationEnd: ({ animationState }) => {\n      if (animationState === 'collapsing') {\n        setState('unmounted');\n      }\n      onTransitionEnd?.();\n    }\n  });\n\n  return (\n    <div\n      className={classes}\n      ref={nodeRef}\n      id={id}\n      tabIndex={-1}\n      style={contentInitialStyle.current}\n      aria-hidden={!isExpanded || undefined}>\n      {children}\n    </div>\n  );\n};\n\n/**\n * The transition from collapsed to expanded works as follows:\n * 1. When the component is initially rendered in the collapsed state, we\n *    explicitly set maxHeight and overflowY from \"to\" configuration.\n * 2. When the expanded prop changes from false to true, we first mount the content children.\n * 3. Once this is mounted we trigger an animation updating animationState value of useAnimationHook.\n * 4. Configuration is represented inside hook. Passed config depends if previous animation was completed or not.\n *    We could check that based on node.style.maxHeight.\n *\n * The transition from expanded to collapsed is similar:\n * 1. We trigger an animation updating animationState value of useAnimationHook.\n * 2. Once animation is completed, with the help of end config,we set max-Height as 'none'.\n *    This will allow us to keep adding content.\n * 3. Once this is done, onAnimationEnd is called(as 'from collapsed to expanded\"). Here, content children are unmouunted.\n */\nconst animationStates: UseAnimationConfig<Status, HTMLDivElement>['animationStates'] = {\n  expanding: (node) => ({\n    to: {\n      maxHeight: `${node.scrollHeight}px`\n    },\n    options: {\n      duration: 400\n    },\n    end: {\n      maxHeight: 'none'\n    }\n  }),\n  collapsing: (node) => ({\n    ...(node.style.maxHeight === 'none' && {\n      from: {\n        maxHeight: `${node.scrollHeight}px`\n      }\n    }),\n    to: {\n      maxHeight: '0'\n    },\n    options: {\n      duration: 400\n    }\n  })\n};\n","import { ComponentChildren } from 'preact';\nimport { useCallback } from 'preact/hooks';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { CollapsibleHeader } from './CollapsibleHeader';\nimport { CollapsibleContent } from './CollapsibleContent';\nimport { useTestId, TestIdProps } from '../hooks/UNSAFE_useTestId';\n\ntype Props = {\n  /**\n   * Collapsible's header. If not specified, the header contains only an open/close icon. Note that the header text is required for JET collapsible for accessibility purposes.\n   */\n  header?: ComponentChildren;\n\n  /**\n   * The content node to be collapsed\n   */\n  children?: ComponentChildren;\n\n  /**\n   * Disables the collapsible if set to true\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Specifies if the content is expanded\n   */\n  isExpanded?: boolean;\n\n  /**\n   * Changes chevron icon placement at the end of the collapsible header\n   */\n  iconPosition?: 'start' | 'end';\n\n  /**\n   * Controls the header display which con include a divider below the collapsible header\n   */\n  variant?: 'basic' | 'horizontal-rule';\n\n  /**\n   * Property that triggers a callback immediately when toggle happens and value of expanded property should be updated\n   */\n  onToggle?: (details: ToggleDetail) => void;\n\n  /**\n   * Property that triggers a callback after toggle animation is done\n   */\n  onTransitionEnd?: (details: TransitionEnd) => void;\n\n  /**\n   * An alternative accessible label. By default, the header content is used as Collapsible's accessible label.\n   * If required, the user can set a custom 'accessibleLabel' value.\n   */\n  'aria-label'?: string;\n\n  /**\n   * An alternative accessible label id. By default, the header content is used as Collapsible's accessible label.\n   * If required, the user can specify an element id within the header to be used as the accessible label.\n   * If both 'accessibleLabel' and 'accessibilityId' are specified, the 'accessibleLabelId' is ignored.\n   */\n  'aria-labelledby'?: string;\n} & TestIdProps;\n\ntype ToggleDetail = TransitionEnd & {\n  target: EventTarget | null;\n};\n\ntype TransitionEnd = {\n  value: boolean;\n};\n\n/**\n * A collapsible displays a header that can be expanded to show its content.\n */\n\nexport const Collapsible = ({\n  header,\n  children,\n  isDisabled = false,\n  isExpanded = false,\n  iconPosition = 'start',\n  variant = 'basic',\n  onToggle,\n  onTransitionEnd,\n  'aria-label': accessibleLabel,\n  'aria-labelledby': accessibleLabelId,\n  testId\n}: Props) => {\n  const uniqueID = useId();\n  const headerId = `oj-collapsible-header-${uniqueID}`;\n  const contentId = `oj-collapsible-content-${uniqueID}`;\n\n  const testIdProps = useTestId(testId);\n\n  /**\n   * Function handling toggle and invoking callback for collapsing/expanding\n   */\n  const toggleHandler = useCallback(\n    (target: EventTarget | null) => {\n      if (isDisabled) {\n        return;\n      }\n      onToggle?.({\n        value: !isExpanded,\n        target\n      });\n    },\n    [isDisabled, onToggle, isExpanded]\n  );\n\n  /**\n   * Function that is triggerd when animation ends\n   */\n  const transitionEndHandler = useCallback(() => {\n    onTransitionEnd?.({\n      value: isExpanded\n    });\n  }, [onTransitionEnd, isExpanded]);\n\n  return (\n    <div {...testIdProps}>\n      <CollapsibleHeader\n        id={headerId}\n        contentId={contentId}\n        toggleHandler={toggleHandler}\n        isDisabled={isDisabled}\n        isExpanded={isExpanded}\n        iconPosition={iconPosition}\n        variant={variant}\n        accessibleLabel={accessibleLabel}\n        accessibleLabelId={accessibleLabelId}>\n        {header}\n      </CollapsibleHeader>\n      <CollapsibleContent\n        id={contentId}\n        isExpanded={isExpanded}\n        onTransitionEnd={transitionEndHandler}>\n        {children}\n      </CollapsibleContent>\n    </div>\n  );\n};\n"],"names":["ExpandIcon","CollapseIcon","CollapseUpIcon","_jsx","useState","useMemo","useCallback","useRef","useComponentTheme","CollapsibleRedwoodTheme","classNames","_jsxs","Fragment","Flex","Separator","useEffect","useAnimation","useId","useTestId"],"mappings":"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"}
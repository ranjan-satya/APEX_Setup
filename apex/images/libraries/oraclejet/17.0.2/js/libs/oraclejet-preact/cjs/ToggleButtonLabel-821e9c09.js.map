{"version":3,"file":"ToggleButtonLabel-821e9c09.js","sources":["../../src/UNSAFE_ToggleButtonLabel/ToggleButtonInput.tsx","../../src/UNSAFE_ToggleButtonLabel/ToggleButtonLabel.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Vers.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { HiddenAccessible } from '#UNSAFE_HiddenAccessible';\nimport { usePress } from '#hooks/UNSAFE_usePress';\nimport { ButtonLabelLayout } from '#UNSAFE_ButtonLabelLayout';\nimport { styles } from '#UNSAFE_BaseButton/themes/BaseButtonStyles.css';\nimport { classNames } from '#/utils/UNSAFE_classNames';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\n\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\n\ntype IntrinsicProps = Pick<\n  HTMLAttributesSignalExcluded<HTMLElement>,\n  | 'autofocus'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onMouseEnter'\n  | 'onMouseLeave'\n  | 'onTouchEnd'\n  | 'onTouchStart'\n>;\n\nexport type Props = IntrinsicProps & {\n  /**\n   * Specifies that the button separator should be rendered disabled.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Specifies that the input is intended for use in a switch button\n   */\n  isSwitch?: boolean;\n\n  /**\n   * Specifies if input is checked or not, controlled pattern\n   */\n  isChecked?: boolean;\n\n  /**\n   * onAction is invoked when then input is pressed\n   */\n  onAction?: (event: Event) => void;\n\n  /**\n   * inputType specifies what type of input is needed\n   */\n  inputType?: 'radio' | 'checkbox';\n\n  /**\n   * inputName is the name of the radio or checkbox\n   */\n  inputName?: string;\n\n  /**\n   * value is the value of the radio or checkbox\n   */\n  value?: string;\n\n  /**\n   * inputId is the id used by the label\n   */\n  inputId?: string;\n\n  /**\n   * The startIcon is the button's start icon.\n   */\n  startIcon?: ComponentChildren;\n\n  /**\n   * The endIcon is the button's end icon.\n   */\n  endIcon?: ComponentChildren;\n\n  /**\n   * Display indicates whether only the label or all elements should be rendered by the togglebutton.\n   */\n  display?: 'label' | 'all' | 'icons';\n\n  /**\n   * The size indicates how large the togglebutton is rendered.\n   */\n  size?: 'sm' | 'md' | 'lg';\n\n  /**\n   * label - togglebutton label\n   */\n  label?: string;\n};\n\nexport const ToggleButtonInput = ({\n  isDisabled,\n  isChecked,\n  isSwitch,\n  inputName,\n  inputType,\n  value,\n  inputId,\n  startIcon,\n  endIcon,\n  display,\n  onAction,\n  size,\n  label,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  onTouchEnd,\n  onTouchStart\n}: Props) => {\n  const { pressProps } = usePress((e) => onAction?.(e));\n  const { tabbableModeProps } = useTabbableMode(isDisabled);\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const key = event.key;\n    switch (key) {\n      case 'ArrowLeft':\n      case 'ArrowRight': {\n        event.preventDefault();\n        break;\n      }\n    }\n  };\n  const keyProps = { onKeyDown };\n\n  const mergedProps = mergeProps(pressProps, tabbableModeProps, keyProps);\n  const inputElement = (\n    <HiddenAccessible>\n      <input\n        {...(isSwitch ? { role: 'switch' } : {})}\n        type={inputType}\n        checked={isChecked}\n        name={inputName}\n        value={value}\n        disabled={isDisabled}\n        {...mergedProps}\n        id={inputId}></input>\n    </HiddenAccessible>\n  );\n\n  const isLabel = (!startIcon && !endIcon) || display === 'label';\n\n  const isIcon = display === 'icons';\n\n  const wrapperClasses = classNames([\n    styles.inputLabel,\n    !isIcon ? styles.labelSizes[size ?? 'md'] : undefined,\n    !isLabel && styles.min\n  ]);\n\n  // For input types, must use labels and modify approach for button\n  return isLabel ? (\n    <label\n      for={inputId}\n      class={wrapperClasses}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onTouchEnd={onTouchEnd}\n      onTouchStart={onTouchStart}>\n      {label}\n      {inputElement}\n    </label>\n  ) : (\n    <label\n      for={inputId}\n      class={wrapperClasses}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onTouchEnd={onTouchEnd}\n      onTouchStart={onTouchStart}>\n      <ButtonLabelLayout display={display} startIcon={startIcon} endIcon={endIcon} size={size}>\n        {label}\n      </ButtonLabelLayout>\n      {inputElement}\n      {display === 'icons' ? <HiddenAccessible>{label}</HiddenAccessible> : undefined}\n    </label>\n  );\n};\n\nToggleButtonInput.displayName = 'ToggleButtonInput';\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Vers.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, Fragment } from 'preact';\nimport { ButtonLabelLayout } from '#UNSAFE_ButtonLabelLayout';\nimport { InputTypes, ToggleButtonTypes } from '#utils/UNSAFE_buttonUtils/toggle.types';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { ToggleButtonInput } from './ToggleButtonInput';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\n\ntype IntrinsicProps = Pick<\n  HTMLAttributesSignalExcluded<HTMLElement>,\n  | 'autofocus'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onMouseEnter'\n  | 'onMouseLeave'\n  | 'onTouchEnd'\n  | 'onTouchStart'\n>;\n\nexport type ToggleButtonLabelProps = IntrinsicProps & {\n  /**\n   * Specifies that the button separator should be rendered disabled.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Specifies if button is selected\n   */\n  isSelected?: boolean;\n\n  /**\n   * Specifies if button is toggle\n   */\n  isToggle?: boolean;\n\n  /**\n   * onAction is invoked when then input is pressed\n   */\n  onAction?: (event: Event) => void;\n\n  /**\n   * inputType specifies what type of input is needed\n   */\n  inputType?: ToggleButtonTypes;\n\n  /**\n   * inputName is the name of the radio or checkbox\n   */\n  inputName?: string;\n\n  /**\n   *  value is the value of the radio or checkbox\n   */\n  value?: string;\n\n  /**\n   * The startIcon is the button's start icon.\n   */\n  startIcon?: ComponentChildren;\n\n  /**\n   * The endIcon is the button's end icon.\n   */\n  endIcon?: ComponentChildren;\n\n  /**\n   * Display indicates whether only the label or all elements should be rendered by the togglebutton.\n   */\n  display?: 'label' | 'all' | 'icons';\n\n  /**\n   * The size indicates how large the togglebutton is rendered.\n   */\n  size?: 'sm' | 'md' | 'lg';\n\n  /**\n   * label - togglebutton label\n   */\n  label?: string;\n};\n\nexport const ToggleButtonLabel = ({\n  isDisabled,\n  isSelected,\n  isToggle = true,\n  inputName,\n  inputType,\n  value,\n  startIcon,\n  endIcon,\n  display,\n  onAction,\n  size,\n  label,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  onTouchEnd,\n  onTouchStart\n}: ToggleButtonLabelProps) => {\n  const isInput = inputType === 'radio' || inputType === 'checkbox';\n  const labelOnly = (!startIcon && !endIcon) || display === 'label';\n\n  // preact useId fails to be unique on storybook pages, each canvas starts from scratch\n  //const childId = useId() + '-' + (isInput ? inputName : '');\n  const childId = useId();\n\n  const inputElement = isInput ? (\n    <ToggleButtonInput\n      isSwitch={!isToggle}\n      onAction={onAction}\n      isChecked={isSelected}\n      inputType={inputType as InputTypes}\n      inputName={inputName}\n      value={value}\n      inputId={childId}\n      isDisabled={isDisabled}\n      label={label}\n      display={display}\n      startIcon={startIcon}\n      endIcon={endIcon}\n      size={size}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onTouchEnd={onTouchEnd}\n      onTouchStart={onTouchStart}\n    />\n  ) : undefined;\n\n  if (!isInput) {\n    // For standalone toggles, no need for labels\n    return labelOnly ? (\n      <Fragment>{label}</Fragment>\n    ) : (\n      <ButtonLabelLayout display={display} startIcon={startIcon} endIcon={endIcon} size={size}>\n        {label}\n      </ButtonLabelLayout>\n    );\n  } else {\n    // For input types, must use labels and modify approach for button\n    return <Fragment>{inputElement}</Fragment>;\n  }\n};\n\nToggleButtonLabel.displayName = 'ToggleButtonLabel';\n"],"names":["usePress","useTabbableMode","mergeProps","_jsx","HiddenAccessible","classNames","styles","_jsxs","ButtonLabelLayout","useId","Fragment"],"mappings":"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"}
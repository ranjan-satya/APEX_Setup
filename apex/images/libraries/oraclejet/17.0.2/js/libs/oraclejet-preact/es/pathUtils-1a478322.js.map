{"version":3,"file":"pathUtils-1a478322.js","sources":["../../src/utils/PRIVATE_visSVGUtils/lineUtils.ts","../../src/utils/PRIVATE_visSVGUtils/pathUtils.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2008 %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport type Point = [number, number];\n\n/**\n * Adapted from D3.js -- d3_svg_lineLinear\n * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].\n * @return {string} Path commands.\n */\nexport function lineLinear(points: Point[]) {\n  return points.join('L');\n}\n\n/**\n * Adapted from D3.js -- d3_svg_lineCardinalClosed\n * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].\n * @param {number} tension A number from 0 to 1 specifying the tension.\n * @return {string} Path commands.\n */\nexport function lineCardinalClosed(points: Point[], tension: number) {\n  // TODO: remove ts-ignores\n  if (points.length < 3) {\n    return lineLinear(points);\n  }\n  /** @ts-ignore */\n  const tangents: Point[] = lineCardinalTangents(\n    [points[points.length - 2]].concat(points, [points[1]]),\n    tension\n  );\n\n  return (\n    points[0] +\n    lineHermite(\n      (points.push(points[0]), points),\n      points,\n      /** @ts-ignore */\n      tangents\n    )\n  );\n}\n\n/**\n * Adapted from D3.js -- d3_svg_lineCardinal\n * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].\n * @param {number} tension A number from 0 to 1 specifying the tension.\n * @return {string} Path commands.\n */\nexport function lineCardinal(points: Point[], tension: number) {\n  return points.length < 3\n    ? lineLinear(points)\n    : points[0] +\n        lineHermite(\n          points,\n          // @ts-ignore\n          lineCardinalTangents(points, tension)\n        );\n}\n\n/**\n * Adapted from D3.js -- d3_svg_lineHermite\n * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].\n * @param {array} tangents Tangents in the form of [[t0x t0y] [t1x t1y] ...].\n * @return {string} Path commands.\n */\nexport function lineHermite(points: Point[], tangents: Point[]) {\n  if (\n    tangents.length < 1 ||\n    (points.length != tangents.length && points.length != tangents.length + 2)\n  ) {\n    return lineLinear(points);\n  }\n  const quad = points.length != tangents.length;\n  let path = '';\n  let p0 = points[0];\n  let p = points[1];\n  const t0 = tangents[0];\n  let t = t0;\n  let pi = 1;\n  if (quad) {\n    path +=\n      'Q' +\n      Math.round(p[0] - (t0[0] * 2) / 3) +\n      ',' +\n      Math.round(p[1] - (t0[1] * 2) / 3) +\n      ',' +\n      Math.round(p[0]) +\n      ',' +\n      Math.round(p[1]);\n    p0 = points[1];\n    pi = 2;\n  }\n  if (tangents.length > 1) {\n    t = tangents[1];\n    p = points[pi];\n    pi++;\n    path +=\n      'C' +\n      Math.round(p0[0] + t0[0]) +\n      ',' +\n      Math.round(p0[1] + t0[1]) +\n      ',' +\n      Math.round(p[0] - t[0]) +\n      ',' +\n      Math.round(p[1] - t[1]) +\n      ',' +\n      Math.round(p[0]) +\n      ',' +\n      Math.round(p[1]);\n    for (let i = 2; i < tangents.length; i++, pi++) {\n      p = points[pi];\n      t = tangents[i];\n      path +=\n        'S' +\n        Math.round(p[0] - t[0]) +\n        ',' +\n        Math.round(p[1] - t[1]) +\n        ',' +\n        Math.round(p[0]) +\n        ',' +\n        Math.round(p[1]);\n    }\n  }\n  if (quad) {\n    const lp = points[pi];\n    path +=\n      'Q' +\n      Math.round(p[0] + (t[0] * 2) / 3) +\n      ',' +\n      Math.round(p[1] + (t[1] * 2) / 3) +\n      ',' +\n      Math.round(lp[0]) +\n      ',' +\n      Math.round(lp[1]);\n  }\n  return path;\n}\n\n/**\n * Adapted from D3.js -- d3_svg_lineCardinalTangents\n * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].\n * @param {number} tension A number from 0 to 1 specifying the tension.\n * @return {array} Tangents in the form of [[t0x t0y] [t1x t1y] ...].\n */\nexport function lineCardinalTangents(points: Point[], tension: number) {\n  const tangents = [];\n  const a = (1 - tension) / 2;\n  let p0;\n  let p1 = points[0];\n  let p2 = points[1];\n  let i = 1;\n  const n = points.length;\n  while (++i < n) {\n    p0 = p1;\n    p1 = p2;\n    p2 = points[i];\n    tangents.push([a * (p2[0] - p0[0]), a * (p2[1] - p0[1])]);\n  }\n  return tangents;\n}\n\n/**\n * Adapted from D3.js -- d3_svg_lineSlope\n * @param {array} p0 Point in the form of [x y].\n * @param {array} p1 Point in the form of [x y].\n * @return {number} Slope.\n */\nexport function lineSlope(p0: Point, p1: Point) {\n  return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n}\n\n/**\n * Adapted from D3.js -- d3_svg_lineFiniteDifferences\n * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].\n * @return {array} Finite differences.\n */\nexport function lineFiniteDifferences(points: Point[]) {\n  let i = 0;\n  const j = points.length - 1;\n  const m = [];\n  let p0 = points[0];\n  let p1 = points[1];\n  let d = (m[0] = lineSlope(p0, p1));\n  while (++i < j) {\n    m[i] = (d + (d = lineSlope((p0 = p1), (p1 = points[i + 1])))) / 2;\n  }\n  m[i] = d;\n  return m;\n}\n\n/**\n * Adapted from D3.js -- d3_svg_lineMonotoneTangents\n * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].\n * @param {boolean} isHoriz If true, the spline is monotonic in X. Otherwise, it is monotonic in Y.\n * @return {array} Tangents in the form of [[t0x t0y] [t1x t1y] ...].\n */\nexport function lineMonotoneTangents(points: Point[], isHoriz: boolean) {\n  if (isHoriz)\n    // swap x and y\n    points = _rotatePoints(points);\n\n  let tangents: Point[] = [],\n    d,\n    a,\n    b,\n    s;\n  const m = lineFiniteDifferences(points);\n  let i = -1;\n  const j = points.length - 1;\n  while (++i < j) {\n    d = lineSlope(points[i], points[i + 1]);\n    if (Math.abs(d) < 1e-6) {\n      m[i] = m[i + 1] = 0;\n    } else {\n      a = m[i] / d;\n      b = m[i + 1] / d;\n      s = a * a + b * b;\n      if (s > 9) {\n        s = (d * 3) / Math.sqrt(s);\n        m[i] = s * a;\n        m[i + 1] = s * b;\n      }\n    }\n  }\n  i = -1;\n  while (++i <= j) {\n    s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n    tangents.push([s || 0, m[i] * s || 0]);\n  }\n\n  if (isHoriz)\n    // swap x and y again\n    tangents = _rotatePoints(tangents);\n\n  return tangents;\n}\n\n/**\n * Adapted from D3.js -- d3_svg_lineMonotone\n * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].\n * @param {boolean} isHoriz If true, the spline is monotonic in X. Otherwise, it is monotonic in Y.\n * @return {string} Path commands.\n */\nexport function lineMonotone(points: Point[], isHoriz: boolean) {\n  return points.length < 3\n    ? lineLinear(points)\n    : points[0] + lineHermite(points, lineMonotoneTangents(points, isHoriz));\n}\n\n/**\n * Rotate the points by swapping the x and y.\n * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].\n * @return {array} Rotated points.\n * @private\n */\nexport function _rotatePoints(points: Point[]): Point[] {\n  const rPoints: Point[] = [];\n  for (let i = 0; i < points.length; i++) {\n    rPoints.push([points[i][1], points[i][0]]);\n  }\n  return rPoints;\n}\n","/**\n * @license\n * Copyright (c) 2008 %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Point, lineCardinal, lineCardinalClosed, lineMonotone } from './lineUtils';\n\nconst SPLINE_TYPE_MONOTONE_VERTICAL = 'mv';\nconst SPLINE_TYPE_MONOTONE_HORIZONTAL = 'mh';\nconst SPLINE_TYPE_CARDINAL_CLOSED = 'cc';\n\n/**\n * Returns a curved path command, based on cubic hermite splines, that goes through the points in the points array.\n * @param {array} points Polyline points array.\n * @param {boolean} connectWithLine Whether the first point is reached using lineTo. Otherwise, moveTo is used.\n * @param {string} type The spline type.\n * @return {string} Path commands.\n */\nexport function curveThroughPoints(points: Point[], connectWithLine: boolean, splineType: string) {\n  if (points.length == 0) return '';\n\n  const prefix = connectWithLine ? 'L' : 'M';\n\n  if (splineType == SPLINE_TYPE_MONOTONE_VERTICAL) {\n    return prefix + lineMonotone(points, false);\n  } else if (splineType == SPLINE_TYPE_MONOTONE_HORIZONTAL) {\n    return prefix + lineMonotone(points, true);\n  } else if (splineType == SPLINE_TYPE_CARDINAL_CLOSED) {\n    return prefix + lineCardinalClosed(points, 0.7);\n  } else {\n    return prefix + lineCardinal(points, 0.7);\n  }\n}\n\n/**\n * Returns a path command for a move to the specified coordinates\n * @param x the destination x coordinate\n * @param y the destination y coordinate\n * @returns the moveTo path command\n */\nexport function moveTo(x: number, y: number) {\n  return 'M' + x + ',' + y;\n}\n\n/**\n * Returns a path command for a line to the specified coordinates\n * @param x the destination x coordinate\n * @param y the destination y coordinate\n * @returns the lineTo path command\n */\nexport function lineTo(x: number, y: number) {\n  return 'L' + x + ',' + y;\n}\n\n/**\n * Returns a path command for a vertical line to the specified x coordinate\n * @param x the destination x coordinate\n * @returns the horizontal line path command\n */\nexport function horizontalLineTo(x: number) {\n  return 'H' + x;\n}\n\n/**\n * Returns a path command for a horizontal line to the specified y coordinate\n * @param y the destination y coordinate\n * @returns the vertical line path command\n */\nexport function verticalLineTo(y: number) {\n  return 'V' + y;\n}\n\n/**\n * Returns a path command for a rectangle.\n * @param x Rectangle x.\n * @param y Rectangle y.\n * @param w Rectangle width.\n * @param h Rectangle height.\n * @returns Path command.\n */\nfunction rectangle(x: number, y: number, w: number, h: number) {\n  const cmd =\n    moveTo(x, y) +\n    horizontalLineTo(x + w) +\n    verticalLineTo(y + h) +\n    horizontalLineTo(x) +\n    closePath();\n\n  return cmd;\n}\n\n/**\n * Returns a path command for an arc to the specified coordinates\n * @param rx the x radius of the ellipse whose arc will be drawn\n * @param ry the y radius of the ellipse whose arc will be drawn\n * @param angleExtent the sweep of the arc to be drawn\n * @param direction 1 for clockwise, 0 for counter-clockwise\n * @param x the ending x coordinate\n * @param y the ending y coordinate\n */\nexport function arcTo(\n  rx: number,\n  ry: number,\n  angleExtent: number,\n  direction: number,\n  x: number,\n  y: number\n) {\n  let cmd = 'A' + rx + ',' + ry + ',0,';\n  if (angleExtent > Math.PI) {\n    cmd += '1,';\n  } else {\n    cmd += '0,';\n  }\n  cmd += direction + ',' + x + ',' + y;\n  return cmd;\n}\n\n/**\n * Returns a path command that closes the path.\n */\nexport function closePath() {\n  return 'Z';\n}\n\n/**\n * Parse corner radii and return the new shape.\n *\n * Sample (valid) radius values:\n *  '5px' - 5px all corners\n *  '50% 50% 0 0' - 50% top corners, 0 bottom corners\n *  '50% 10' - 50% top left bottom right, 10px top right bottom left.\n *  '5px / 10px' - 5px horizontal radius, 10px vertical radius all corners\n *  '50% 50% 25% 25% / 25% 25% 50% 50%' - 50% h radius 25% v radius top corners, 25% h radius 50% v radius bottom corners\n *\n * Note that all non-% values (including unitless) get interpreted as 'px'.\n *\n * @param x Rectangle x.\n * @param y Rectangle y.\n * @param w Rectangle width.\n * @param h Rectangle height.\n * @param radius The string to be parsed.\n * @param multiplier The value used for when a percent radius is provided\n * @param defaultValue A specified value for the border radius\n * @returns Path command of shape with border radius.\n */\nexport function rectangleWithBorderRadius(\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n  radius: string,\n  multiplier: number,\n  defaultValue: string\n) {\n  if (radius == '0' || radius === '0px') return rectangle(x, y, w, h);\n\n  let topLeftX = defaultValue;\n  let topLeftY = defaultValue;\n  let topRightX = defaultValue;\n  let topRightY = defaultValue;\n  let bottomRightX = defaultValue;\n  let bottomRightY = defaultValue;\n  let bottomLeftX = defaultValue;\n  let bottomLeftY = defaultValue;\n  if (radius.indexOf('/') != -1) {\n    const splitHorizVert = radius.split('/');\n    const horiz = splitHorizVert[0].trim().split(/\\s+/);\n    const vert = splitHorizVert[1].trim().split(/\\s+/);\n    if (horiz.length == 1) topLeftX = topRightX = bottomRightX = bottomLeftX = horiz[0];\n    else if (horiz.length == 2) {\n      topLeftX = bottomRightX = horiz[0];\n      topRightX = bottomLeftX = horiz[1];\n    } else if (horiz.length == 3) {\n      topLeftX = horiz[0];\n      topRightX = bottomLeftX = horiz[1];\n      bottomRightX = horiz[2];\n    } else if (horiz.length == 4) {\n      topLeftX = horiz[0];\n      topRightX = horiz[1];\n      bottomRightX = horiz[2];\n      bottomLeftX = horiz[3];\n    }\n    if (vert.length == 1) topLeftY = topRightY = bottomRightY = bottomLeftY = vert[0];\n    else if (vert.length == 2) {\n      topLeftY = bottomRightY = vert[0];\n      topRightY = bottomLeftY = vert[1];\n    } else if (vert.length == 3) {\n      topLeftY = vert[0];\n      topRightY = bottomLeftY = vert[1];\n      bottomRightY = vert[2];\n    } else if (vert.length == 4) {\n      topLeftY = vert[0];\n      topRightY = vert[1];\n      bottomRightY = vert[2];\n      bottomLeftY = vert[3];\n    }\n  } else if (radius != 'auto') {\n    const split = radius.trim().split(/\\s+/);\n    if (split.length == 1) {\n      topLeftX =\n        topRightX =\n        bottomRightX =\n        bottomLeftX =\n        topLeftY =\n        topRightY =\n        bottomRightY =\n        bottomLeftY =\n          split[0];\n    } else if (split.length == 2) {\n      topLeftX = bottomRightX = topLeftY = bottomRightY = split[0];\n      topRightX = bottomLeftX = topRightY = bottomLeftY = split[1];\n    } else if (split.length == 3) {\n      topLeftX = topLeftY = split[0];\n      topRightX = bottomLeftX = topRightY = bottomLeftY = split[1];\n      bottomRightX = bottomRightY = split[2];\n    } else if (split.length == 4) {\n      topLeftX = topLeftY = split[0];\n      topRightX = topRightY = split[1];\n      bottomRightX = bottomRightY = split[2];\n      bottomLeftX = bottomLeftY = split[3];\n    }\n  }\n\n  return roundedRectangle(\n    x,\n    y,\n    w,\n    h,\n    parseBorderRadiusItem(topLeftX, multiplier),\n    parseBorderRadiusItem(topLeftY, multiplier),\n    parseBorderRadiusItem(topRightX, multiplier),\n    parseBorderRadiusItem(topRightY, multiplier),\n    parseBorderRadiusItem(bottomRightX, multiplier),\n    parseBorderRadiusItem(bottomRightY, multiplier),\n    parseBorderRadiusItem(bottomLeftX, multiplier),\n    parseBorderRadiusItem(bottomLeftY, multiplier)\n  );\n}\n\n/**\n * Parses a single corner radius dimension\n * @param item The x or y radius input need to be parsed\n * @param multiplier The value used for when a percent radius is provided\n * @returns The integer value of the corner radius\n */\nfunction parseBorderRadiusItem(item: string, multiplier: number) {\n  let radius = Math.min(parseFloat(item), multiplier / 2);\n  if (item.indexOf('%') != -1) {\n    radius = Math.min(50, parseFloat(item)) * 0.01 * multiplier;\n  }\n  return radius;\n}\n\n/**\n * Returns a path command for a rounded rectangle.\n * @param x Rectangle x.\n * @param y Rectangle y.\n * @param w Rectangle width.\n * @param h Rectangle height.\n * @param tlcrX Top left corner x radius.\n * @param tlcrY Top left corner y radius.\n * @param trcrX Top right corner x radius.\n * @param trcrY Top right corner y radius.\n * @param brcrX Bottom right corner x radius.\n * @param brcrY Bottom right corner y radius.\n * @param blcrX Bottom left corner x radius.\n * @param blcrY Bottom left corner  y radius.\n * @returns Path command.\n */\nfunction roundedRectangle(\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n  tlcrX: number,\n  tlcrY: number,\n  trcrX: number,\n  trcrY: number,\n  brcrX: number,\n  brcrY: number,\n  blcrX: number,\n  blcrY: number\n) {\n  tlcrY = Math.min(tlcrY, 0.5 * h);\n  trcrY = Math.min(trcrY, 0.5 * h);\n  brcrY = Math.min(brcrY, 0.5 * h);\n  blcrY = Math.min(blcrY, 0.5 * h);\n  tlcrX = Math.min(tlcrX, 0.5 * w);\n  trcrX = Math.min(trcrX, 0.5 * w);\n  brcrX = Math.min(brcrX, 0.5 * w);\n  blcrX = Math.min(blcrX, 0.5 * w);\n  const cmd =\n    moveTo(x + tlcrX, y) +\n    lineTo(x + w - trcrX, y) +\n    arcTo(trcrX, trcrY, Math.PI / 2, 1, x + w, y + trcrY) +\n    lineTo(x + w, y + h - brcrY) +\n    arcTo(brcrX, brcrY, Math.PI / 2, 1, x + w - brcrX, y + h) +\n    lineTo(x + blcrX, y + h) +\n    arcTo(blcrX, blcrY, Math.PI / 2, 1, x, y + h - blcrY) +\n    lineTo(x, y + tlcrY) +\n    arcTo(tlcrX, tlcrY, Math.PI / 2, 1, x + tlcrX, y) +\n    closePath();\n\n  return cmd;\n}\n"],"names":[],"mappings":"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"}
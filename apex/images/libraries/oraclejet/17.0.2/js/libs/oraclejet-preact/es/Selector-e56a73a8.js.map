{"version":3,"file":"Selector-e56a73a8.js","sources":["../../src/UNSAFE_Selector/Selector.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback, useRef } from 'preact/hooks';\n\nimport { Keys, containsKey, addKey, removeKey } from '../utils/UNSAFE_keys';\nimport { SelectionDetail } from '../UNSAFE_Collection';\nimport { styles } from './themes/SelectorStyles.css';\nimport { StyledCheckbox } from '../PRIVATE_StyledCheckbox';\nimport { useActive } from '../hooks/UNSAFE_useActive';\nimport { useFocus } from '../hooks/UNSAFE_useFocus';\nimport { useTestId, TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { useHover } from '../hooks/UNSAFE_useHover/useHover';\n\n/**\n * Props for the Selector Component\n */\nexport type Props<K> = {\n  /**\n   * The key associated with the Selector.\n   */\n  rowKey: K;\n  /**\n   * The selected keys.\n   */\n  selectedKeys: Keys<K>;\n  /**\n   * aria-label for this selector\n   */\n  'aria-label'?: string;\n  /**\n   * Determine whether to show the visual partial icon when selector is checked. If the\n   * selector is checked and isPartial is set to true, the selector would show a partially\n   * checked icon.\n   */\n  isPartial?: boolean;\n  /**\n   * Specifies the selection mode. For selection mode 'all', please refer to SelectorAll component.\n   */\n  selectionMode?: 'multiple' | 'single';\n  /**\n   * Callback function to invoke when the selected keys has changed when\n   * the checkbox is toggled.\n   */\n  onChange?: (detail: SelectionDetail<K>) => void;\n  /**\n   * One or more ids (separated by spaces) of elements that label the selected item. This will be used for the aria-labelledby of the DOM element.\n   */\n  'aria-labelledby'?: string;\n};\n\n/**\n * The Selector component renders checkboxes in collections to support selection.\n */\nexport function Selector<K>({\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledby,\n  rowKey,\n  selectedKeys,\n  isPartial,\n  selectionMode = 'multiple',\n  onChange,\n  testId\n}: Props<K> & TestIdProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isActive, activeProps } = useActive();\n  const { isFocus, focusProps } = useFocus();\n  const { onKeyUp: onActiveKeyUp, ...activeRest } = activeProps;\n\n  const { isHover, hoverProps } = useHover();\n\n  const onSelectionHandler = useCallback(\n    (event: KeyboardEvent | MouseEvent) => {\n      const { key } = event as KeyboardEvent;\n      if (key !== undefined && key !== ' ') {\n        return;\n      }\n\n      handleSelect(event, rowKey, selectedKeys, selectionMode, onChange);\n    },\n    [rowKey, selectedKeys, selectionMode, onChange]\n  );\n\n  // because we stop event propagation on selection, we must ensure\n  // that the event gets passed to useActive's onKeyUp handler first\n  // so that it doesn't get stuck in \"active\" mode\n  const onKeyUpHandler = useCallback(\n    (e: KeyboardEvent) => {\n      onActiveKeyUp(e);\n      onSelectionHandler(e);\n    },\n    [onActiveKeyUp, onSelectionHandler]\n  );\n\n  const onClick = useCallback(\n    (e: MouseEvent) => {\n      inputRef.current?.focus();\n      onSelectionHandler(e);\n    },\n    [onSelectionHandler]\n  );\n\n  const isChecked = isPartial\n    ? 'partial'\n    : containsKey(selectedKeys, rowKey)\n    ? 'checked'\n    : 'unchecked';\n\n  const testIdProps = useTestId(testId);\n\n  return (\n    <div\n      class={styles.base}\n      onClick={onClick}\n      onKeyUp={onKeyUpHandler}\n      {...activeRest}\n      {...testIdProps}\n      {...hoverProps}>\n      <StyledCheckbox\n        ref={inputRef}\n        isHover={isHover}\n        isActive={isActive}\n        isChecked={isChecked}\n        isFocusRingShown={isFocus}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledby}\n        onKeyDown={onKeyDown}\n        {...focusProps}\n      />\n    </div>\n  );\n}\n\nconst handleSelect = <K,>(\n  event: MouseEvent | KeyboardEvent,\n  rowKey: K,\n  selectedKeys: Props<K>['selectedKeys'],\n  selectionMode: Props<K>['selectionMode'],\n  onChange?: Props<K>['onChange']\n) => {\n  if (onChange) {\n    const newKeys = getNewKeys(rowKey, selectedKeys, selectionMode);\n    onChange({ value: newKeys, target: event.target });\n\n    // we don't want container component like ListView to process the click event,\n    // and we also stop the event propagation in keyup due to issue in JET-60156\n    event.stopPropagation();\n  }\n};\n\nconst getNewKeys = <K,>(\n  rowKey: K,\n  selectedKeys: Props<K>['selectedKeys'],\n  selectionMode: Props<K>['selectionMode']\n) => {\n  let newKeys;\n  const checked = containsKey(selectedKeys, rowKey);\n  if (checked) {\n    newKeys = removeKey(selectedKeys, rowKey, false);\n  } else {\n    if (selectionMode === 'single') {\n      newKeys = { all: false, keys: new Set([rowKey]) } as Keys<K>;\n    } else {\n      newKeys = addKey(selectedKeys, rowKey);\n    }\n  }\n  return newKeys;\n};\n\nconst onKeyDown = (event: KeyboardEvent) => {\n  if (event.key == ' ') {\n    // prevent auto scrolling\n    event.preventDefault();\n  } else if (event.key == 'Enter') {\n    // prevent active styles applied to checkbox\n    event.stopPropagation();\n  }\n};\n"],"names":["_jsx"],"mappings":";;;;;;;;;;;AAuDA;;AAEG;AACG,SAAU,QAAQ,CAAI,EAC1B,YAAY,EAAE,SAAS,EACvB,iBAAiB,EAAE,cAAc,EACjC,MAAM,EACN,YAAY,EACZ,SAAS,EACT,aAAa,GAAG,UAAU,EAC1B,QAAQ,EACR,MAAM,EACiB,EAAA;AACvB,IAAA,MAAM,QAAQ,GAAG,MAAM,CAAmB,IAAI,CAAC,CAAC;IAChD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,SAAS,EAAE,CAAC;IAC9C,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,QAAQ,EAAE,CAAC;IAC3C,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,GAAG,UAAU,EAAE,GAAG,WAAW,CAAC;IAE9D,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,QAAQ,EAAE,CAAC;AAE3C,IAAA,MAAM,kBAAkB,GAAG,WAAW,CACpC,CAAC,KAAiC,KAAI;AACpC,QAAA,MAAM,EAAE,GAAG,EAAE,GAAG,KAAsB,CAAC;QACvC,IAAI,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,GAAG,EAAE;YACpC,OAAO;SACR;QAED,YAAY,CAAC,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;KACpE,EACD,CAAC,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,QAAQ,CAAC,CAChD,CAAC;;;;AAKF,IAAA,MAAM,cAAc,GAAG,WAAW,CAChC,CAAC,CAAgB,KAAI;QACnB,aAAa,CAAC,CAAC,CAAC,CAAC;QACjB,kBAAkB,CAAC,CAAC,CAAC,CAAC;AACxB,KAAC,EACD,CAAC,aAAa,EAAE,kBAAkB,CAAC,CACpC,CAAC;AAEF,IAAA,MAAM,OAAO,GAAG,WAAW,CACzB,CAAC,CAAa,KAAI;AAChB,QAAA,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC;QAC1B,kBAAkB,CAAC,CAAC,CAAC,CAAC;AACxB,KAAC,EACD,CAAC,kBAAkB,CAAC,CACrB,CAAC;IAEF,MAAM,SAAS,GAAG,SAAS;AACzB,UAAE,SAAS;AACX,UAAE,WAAW,CAAC,YAAY,EAAE,MAAM,CAAC;AACnC,cAAE,SAAS;cACT,WAAW,CAAC;AAEhB,IAAA,MAAM,WAAW,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;IAEtC,QACEA,GACE,CAAA,KAAA,EAAA,EAAA,KAAK,EAAE,MAAM,CAAC,IAAI,EAClB,OAAO,EAAE,OAAO,EAChB,OAAO,EAAE,cAAc,EAAA,GACnB,UAAU,EAAA,GACV,WAAW,EAAA,GACX,UAAU,EAAA,QAAA,EACdA,GAAC,CAAA,cAAc,EACb,EAAA,GAAG,EAAE,QAAQ,EACb,OAAO,EAAE,OAAO,EAChB,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,SAAS,EACpB,gBAAgB,EAAE,OAAO,EAAA,YAAA,EACb,SAAS,EAAA,iBAAA,EACJ,cAAc,EAC/B,SAAS,EAAE,SAAS,EAAA,GAChB,UAAU,EAAA,CACd,EACE,CAAA,EACN;AACJ,CAAC;AAED,MAAM,YAAY,GAAG,CACnB,KAAiC,EACjC,MAAS,EACT,YAAsC,EACtC,aAAwC,EACxC,QAA+B,KAC7B;IACF,IAAI,QAAQ,EAAE;QACZ,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;AAChE,QAAA,QAAQ,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;;;QAInD,KAAK,CAAC,eAAe,EAAE,CAAC;KACzB;AACH,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,CACjB,MAAS,EACT,YAAsC,EACtC,aAAwC,KACtC;AACF,IAAA,IAAI,OAAO,CAAC;IACZ,MAAM,OAAO,GAAG,WAAW,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;IAClD,IAAI,OAAO,EAAE;QACX,OAAO,GAAG,SAAS,CAAC,YAAY,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;KAClD;SAAM;AACL,QAAA,IAAI,aAAa,KAAK,QAAQ,EAAE;AAC9B,YAAA,OAAO,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,EAAa,CAAC;SAC9D;aAAM;AACL,YAAA,OAAO,GAAG,MAAM,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;SACxC;KACF;AACD,IAAA,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,MAAM,SAAS,GAAG,CAAC,KAAoB,KAAI;AACzC,IAAA,IAAI,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE;;QAEpB,KAAK,CAAC,cAAc,EAAE,CAAC;KACxB;AAAM,SAAA,IAAI,KAAK,CAAC,GAAG,IAAI,OAAO,EAAE;;QAE/B,KAAK,CAAC,eAAe,EAAE,CAAC;KACzB;AACH,CAAC;;;;"}
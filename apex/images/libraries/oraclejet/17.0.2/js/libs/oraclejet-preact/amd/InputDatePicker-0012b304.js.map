{"version":3,"file":"InputDatePicker-0012b304.js","sources":["../../src/UNSAFE_InputDatePicker/InputDatePickerDropdown.tsx","../../src/UNSAFE_InputDatePicker/useInputDatePickerState.ts","../../src/UNSAFE_InputDatePicker/useInputDatePicker.ts","../../src/UNSAFE_InputDatePicker/InputDatePicker.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { useCallback, useState } from 'preact/hooks';\nimport { BundleType } from '../resources/nls/bundle';\nimport { DatePicker } from '#UNSAFE_DatePicker';\nimport { type CloseDetail as DropdownCloseDetail } from '#UNSAFE_Dropdown';\nimport { getClientHints } from '#utils/PRIVATE_clientHints';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { InputDatePicker } from './InputDatePicker';\nimport { dropdownStyles, userAssistanceStyles } from './themes/InputDatePickerDropdownStyles.css';\nimport { PositionData } from '../UNSAFE_Floating';\nimport { StickyPositioningDropdown } from '#PRIVATE_FormControls';\nimport { SectionedContent } from '#PRIVATE_FormControls';\nimport { type CloseDetail as SheetCloseDetail, Sheet } from '#UNSAFE_Sheet';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { SizeOptions } from '#UNSAFE_Floating/Floating';\nimport { datePickerPropVars } from '#UNSAFE_DatePicker/themes/DatePickerContract.css';\n\ntype StickyPositioningDropdownProps = ComponentProps<typeof StickyPositioningDropdown>;\ntype InputDatePickerProps = ComponentProps<typeof InputDatePicker>;\ntype PickedPropsFromInputDatePicker = Pick<\n  InputDatePickerProps,\n  | 'assistiveText'\n  | 'dayFormatter'\n  | 'daysOutsideMonth'\n  | 'helpSourceLink'\n  | 'helpSourceText'\n  | 'isDisabled'\n  | 'isReadonly'\n  | 'label'\n  | 'messages'\n  | 'min'\n  | 'max'\n  | 'monthAndYearPicker'\n  | 'todayButton'\n  | 'todayTimeZone'\n  | 'userAssistanceDensity'\n  | 'value'\n>;\ntype DatePickerProps = ComponentProps<typeof DatePicker>;\ntype PickedPropsFromDatePicker = Pick<DatePickerProps, 'value' | 'onCommit'>;\ntype PickedPropsFromDropdown = Omit<StickyPositioningDropdownProps, 'onClose'>;\ntype CloseDetail = SheetCloseDetail | DropdownCloseDetail;\n\ntype Props = PickedPropsFromDatePicker &\n  PickedPropsFromInputDatePicker &\n  PickedPropsFromDropdown &\n  TestIdProps & {\n    /**\n     * Called when the dropdown or sheet is supposed to be closed.\n     */\n    onClose?: (detail: CloseDetail) => void;\n  };\n\n/**\n * Component that renders DatePicker either inside a dropdown or sheet; at small screen\n * widths, it renders inside a sheet. Additionally, when a dropdown is being shown beneath\n * the component, we also show any user assistance text or messages below the picker\n * because otherwise that information would be obscured from view. When a sheet is being\n * shown, it will always display UA and messages at the bottom of the sheet.\n */\nconst InputDatePickerDropdown = ({\n  anchorRef,\n  assistiveText,\n  dayFormatter,\n  daysOutsideMonth,\n  helpSourceLink,\n  helpSourceText,\n  isDisabled,\n  isOpen,\n  isReadonly,\n  label,\n  onClose,\n  onCommit,\n  max,\n  messages,\n  min,\n  monthAndYearPicker,\n  testId,\n  todayButton,\n  todayTimeZone,\n  userAssistanceDensity,\n  value\n}: Props) => {\n  // If the dropdown opens above the component, we don't want to show UA or messages.\n  const [isDropdownAbove, setDropdownAbove] = useState(false);\n  const [prevIsOpen, setPrevIsOpen] = useState(isOpen);\n  const handleDropdownPosition = useCallback<\n    NonNullable<StickyPositioningDropdownProps['onPosition']>\n  >((data: PositionData) => {\n    setDropdownAbove(data.placement.startsWith('top'));\n  }, []);\n  // Reset the flag when the dropdown is closed.\n  if (prevIsOpen !== isOpen) {\n    setPrevIsOpen(isOpen);\n    if (!isOpen) {\n      setDropdownAbove(false);\n    }\n  }\n\n  const sizeOptions: SizeOptions = {\n    isMaxWidthAdjusted: false,\n    isMaxHeightAdjusted: true\n  };\n\n  // On mobile phones, the dropdown becomes a sheet.\n  const shouldShowSheet = isPhone();\n\n  const { datePicker_label } = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const datePickerAriaLabel = datePicker_label();\n\n  const datePickerMainContent = (\n    <DatePicker\n      dayFormatter={dayFormatter}\n      daysOutsideMonth={daysOutsideMonth}\n      onCommit={onCommit}\n      max={max}\n      min={min}\n      // for sheet, we want the width to grow to the width of the sheet, otherwise it will use the theme default.\n      maxWidth={shouldShowSheet ? '100%' : undefined}\n      // for dropdown, we want a fixed width, so set width to the same var used for default maxWidth\n      width={!shouldShowSheet ? datePickerPropVars.maxWidth : '100%'}\n      monthAndYearPicker={monthAndYearPicker}\n      testId={testId}\n      todayTimeZone={todayTimeZone}\n      todayButton={todayButton}\n      value={value}\n    />\n  );\n\n  const inlineUserAssistanceFooter =\n    isOpen &&\n    (!isDropdownAbove || shouldShowSheet) &&\n    !isDisabled &&\n    !isReadonly &&\n    (assistiveText || helpSourceLink || (messages && messages.length > 0)) &&\n    (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n      <FormFieldContext.Provider value={{ isFocused: true }}>\n        <div class={userAssistanceStyles}>\n          <InlineUserAssistance\n            assistiveText={assistiveText}\n            fieldLabel={label}\n            helpSourceLink={helpSourceLink}\n            helpSourceText={helpSourceText}\n            messages={messages}\n            userAssistanceDensity={userAssistanceDensity}\n          />\n        </div>\n      </FormFieldContext.Provider>\n    ) : undefined;\n\n  const contentTestId = testId ? testId + (shouldShowSheet ? '_sheet' : '_dropdown') : undefined;\n\n  // The same content is displayed either in a dropdown or sheet: date picker and inline UA.\n  // Add styling to the dropdown to enforce a fixed width.\n  const dropdownContent = (\n    <div class={dropdownStyles}>\n      <SectionedContent\n        aria-label={datePickerAriaLabel}\n        footer={inlineUserAssistanceFooter}\n        hasFocusTrap={true}\n        main={datePickerMainContent}\n        role=\"dialog\"\n        testId={contentTestId}\n      />\n    </div>\n  );\n\n  const dropdown = shouldShowSheet ? (\n    <Sheet initialFocus=\"firstFocusable\" isOpen={isOpen} onClose={onClose}>\n      <SectionedContent\n        aria-label={datePickerAriaLabel}\n        footer={inlineUserAssistanceFooter}\n        hasFocusTrap={true}\n        main={datePickerMainContent}\n        role=\"dialog\"\n        testId={contentTestId}\n      />\n    </Sheet>\n  ) : (\n    <StickyPositioningDropdown\n      anchorRef={anchorRef}\n      initialFocus=\"firstFocusable\"\n      isOpen={isOpen}\n      onClose={onClose}\n      onPosition={handleDropdownPosition}\n      sizeOptions={sizeOptions}>\n      {dropdownContent}\n    </StickyPositioningDropdown>\n  );\n\n  return dropdown;\n};\n\nconst isPhone = () => {\n  return getClientHints().deviceType === 'phone';\n};\n\nexport { InputDatePickerDropdown, type CloseDetail };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useReducer } from 'preact/hooks';\nimport type { CalendarDate, CalendarDateRequired } from '#utils/UNSAFE_calendarDateUtils';\nimport { isCompleteCalendarDate } from '#utils/UNSAFE_calendarDateUtils';\n\ntype InputDatePickerState = {\n  /**\n   * If dateValue is a complete date, then completeDateValue is the same as dateValue\n   * otherwise is is undefined. We need to maintain separate states because\n   * InputDateMask uses CalendarDate, but DatePicker uses CalendarDateRequired.\n   * If the user types a partial date then opens the picker, we treat that as\n   * no selection. The picker opens to the current month showing today.\n   */\n  completeDateValue?: CalendarDateRequired;\n\n  /**\n   * Represents the current date value of the component. The user either selected\n   * the date in the picker, or typed it into the date field.\n   */\n  dateValue?: CalendarDate;\n};\n\ntype DateChangedAction = { type: 'dateChanged'; data?: CalendarDate };\ntype DateResetAction = { type: 'reset'; data?: CalendarDate };\ntype DateSelectedAction = { type: 'dateSelected'; data?: CalendarDateRequired };\ntype InputDatePickerReducerAction = DateChangedAction | DateResetAction | DateSelectedAction;\n\n// If dateVal is a complete date, return it as a CalendarDateRequired\n// otherwise return undefined.\nconst convertToCalendarDateRequired = (dateVal?: CalendarDate) => {\n  return !dateVal || !isCompleteCalendarDate(dateVal)\n    ? undefined\n    : (dateVal as CalendarDateRequired);\n};\n\n// Use a reducer function to manage InputDatePickerState.\nconst inputDatePickerReducer = (\n  state: InputDatePickerState,\n  action: InputDatePickerReducerAction\n): InputDatePickerState => {\n  switch (action.type) {\n    case 'dateChanged': {\n      return {\n        ...state,\n        dateValue: action.data,\n        completeDateValue: convertToCalendarDateRequired(action.data)\n      };\n    }\n    case 'dateSelected': {\n      return { ...state, dateValue: action.data, completeDateValue: action.data };\n    }\n    case 'reset': {\n      return {\n        completeDateValue: convertToCalendarDateRequired(action.data),\n        dateValue: action.data\n      };\n    }\n    default:\n      return state;\n  }\n};\n\ntype Props = {\n  /**\n   * The value of the InputDatePicker, or undefined.\n   */\n  value?: CalendarDate;\n};\n\n/**\n * useInputDatePickerState calls useReducer to determine the initial state. Any changes to that state\n * are managed by dispatching actions to the reducer function.\n */\nconst useInputDatePickerState = ({ value }: Props) => {\n  const [state, dispatch] = useReducer(inputDatePickerReducer, {\n    completeDateValue: convertToCalendarDateRequired(value),\n    dateValue: value\n  });\n\n  return { state, dispatch };\n};\n\nexport { useInputDatePickerState };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, RefObject } from 'preact';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport type { CalendarDate, CalendarDateRequired } from '#utils/UNSAFE_calendarDateUtils';\nimport { calendarDatesAreDifferent } from '#utils/PRIVATE_dayUtils';\nimport { DatePicker } from '#UNSAFE_DatePicker';\nimport { CloseDetail, InputDatePickerDropdown } from './InputDatePickerDropdown';\nimport { IconButton } from '#UNSAFE_IconButton';\nimport { InputDateMask } from '#UNSAFE_InputDateMask';\nimport { InputDatePicker } from './InputDatePicker';\nimport { useInputDatePickerState } from './useInputDatePickerState';\nimport type { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\n\ntype InputDatePickerProps = ComponentProps<typeof InputDatePicker>;\ntype InputDateMaskProps = ComponentProps<typeof InputDateMask>;\ntype DatePickerProps = ComponentProps<typeof DatePicker>;\ntype IconButtonProps = ComponentProps<typeof IconButton>;\ntype DropdownProps = ComponentProps<typeof InputDatePickerDropdown>;\n\ntype Props = {\n  onCommit: InputDatePickerProps['onCommit'];\n  onInput: InputDatePickerProps['onInput'];\n  value: InputDatePickerProps['value'];\n};\n\n/**\n * Hook that provides handlers and other functionality for InputDatePicker.\n */\nconst useInputDatePicker = ({ onCommit, onInput, value: currentValue }: Props) => {\n  // Whether the dropdown is open.\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Ref to the calendar icon button.\n  const iconRef: RefObject<HTMLButtonElement> = useRef<HTMLButtonElement>(null);\n\n  // Ref to the InputDateMask component.\n  const maskRef: RefObject<HTMLElement> = useRef<HTMLElement>(null);\n\n  // Keep track of whether the dropdown was just dismissed from an outside mousedown event.\n  const outsideMousedownRef = useRef<boolean>(false);\n  const outsideMousedownTimerRef = useRef<ReturnType<typeof setTimeout> | undefined>();\n\n  // Keep track of whether the calendar icon is focused after a date is selected\n  // and the date picker is closed.\n  const calendarFocusAfterSelect = useRef<boolean>(false);\n  const calendarFocusAfterSelectTimerRef = useRef<ReturnType<typeof setTimeout> | undefined>();\n\n  // Keep track of the last date values passed to onInput and onCommit.\n  const lastCommittedDateRef = useRef<CalendarDate | undefined>(currentValue);\n  const lastDateRef = useRef<CalendarDate | undefined>(currentValue);\n\n  // Keep track of the last controlled value passed from the parent, so we can detect a programmatic change.\n  const lastValueFromParentRef = useRef<CalendarDate | undefined>(currentValue);\n\n  // Keep track of whether a date was selected in the date picker.\n  const dateSelectedRef = useRef<boolean>(false);\n\n  const { state, dispatch } = useInputDatePickerState({ value: currentValue });\n\n  // If a new value is being pushed from the parent, and that value differs from\n  // the current value of the reducer, then this is a programmatic update\n  // and we need to call 'reset' to update the reducer state. Otherwise, the only\n  // time the reducer state is updated from the value is on mount.\n  if (calendarDatesAreDifferent(lastValueFromParentRef.current, currentValue)) {\n    lastValueFromParentRef.current = currentValue;\n    if (calendarDatesAreDifferent(currentValue, state.dateValue)) {\n      dispatch({ type: 'reset', data: currentValue });\n      lastDateRef.current = currentValue;\n      lastCommittedDateRef.current = currentValue;\n    }\n  }\n\n  // Reducer updates are async, so wait until the state updates and then call our callbacks.\n  useEffect(() => {\n    if (calendarDatesAreDifferent(state.dateValue, lastDateRef.current)) {\n      onInput({ previousValue: lastDateRef.current, value: state.dateValue });\n      lastDateRef.current = state.dateValue;\n    }\n    if (\n      dateSelectedRef.current &&\n      calendarDatesAreDifferent(state.dateValue, lastCommittedDateRef.current)\n    ) {\n      onCommit?.({ previousValue: lastCommittedDateRef.current, value: state.dateValue });\n      lastCommittedDateRef.current = state.dateValue;\n      dateSelectedRef.current = false;\n    }\n  }, [onCommit, onInput, state.dateValue]);\n\n  // Handle onInput from InputDateMask as segment values are being added or changed in the input field.\n  // We wait for the state to update before calling onInput.\n  const maskInputHandler = useCallback<InputDateMaskProps['onInput']>(\n    (detail: ValueUpdateDetail<CalendarDate>) => {\n      dispatch({ type: 'dateChanged', data: detail.value });\n    },\n    [dispatch]\n  );\n\n  // Handle onCommit from InputDateMask, which is called when the user presses Enter or the field is blurred.\n  const maskCommitHandler = useCallback<NonNullable<InputDateMaskProps['onCommit']>>(() => {\n    // If the current date value differs from the last committed value, then call onCommit.\n    if (calendarDatesAreDifferent(lastCommittedDateRef.current, state.dateValue)) {\n      onCommit?.({ value: state.dateValue, previousValue: lastCommittedDateRef.current });\n      lastCommittedDateRef.current = state.dateValue;\n    }\n  }, [onCommit, state.dateValue]);\n\n  // Respond to onAction event from the calendar icon button. Toggles the date picker dropdown.\n  const calendarIconActionHandler = useCallback<NonNullable<IconButtonProps['onAction']>>(() => {\n    // Only toggle the value of isOpen if we didn't just dismiss the dropdown.\n    if (!outsideMousedownRef.current && !calendarFocusAfterSelect.current) {\n      setIsOpen((prevIsOpen) => !prevIsOpen);\n    }\n    outsideMousedownRef.current = false;\n    calendarFocusAfterSelect.current = false;\n  }, []);\n\n  const dropdownCloseHandler = useCallback<NonNullable<DropdownProps['onClose']>>(\n    (detail: CloseDetail) => {\n      // Keep track of when the dropdown is closed via outside mousedown, including when the calendar icon\n      // is clicked. We need this in order to toggle visibility of the picker and dropdown.\n      if (detail.reason === 'outsideMousedown') {\n        outsideMousedownRef.current = true;\n        clearTimeout(outsideMousedownTimerRef.current);\n\n        // Clear the flag after a short delay to ensure the dropdown can be opened again.\n        outsideMousedownTimerRef.current = setTimeout(() => {\n          outsideMousedownRef.current = false;\n        }, 200);\n      } else if (detail.reason === 'dismissed' || detail.reason === 'keyboardDismissed') {\n        // Focus the calendar icon when the dropdown is closed.\n        iconRef.current?.focus();\n      }\n      setIsOpen(false);\n    },\n    []\n  );\n\n  // Handle date selection in the picker.\n  //   - Updates the value in state.\n  //   - Closes the dropdown.\n  //   - Sets focus to the date field.\n  const datePickerCommitHandler = useCallback<DatePickerProps['onCommit']>(\n    (detail: ValueUpdateDetail<CalendarDateRequired>) => {\n      // Set focus to the calendar icon when a date is selected.\n      iconRef.current?.focus();\n\n      // If user is using the keyboard, date selection happens on keyDown.\n      // If we transfer focus to the calendar icon, it then sees the corresponding\n      // keyUp and thinks the button was triggered again (usePress reacts to\n      // keyUp, not keyDown). Maintain a flag that prevents this from happening,\n      // and clear it after a short delay in case selection was made with the mouse.\n      // TODO: Investigate a better way to prevent the dropdown from reopening (JET-67580).\n      calendarFocusAfterSelect.current = true;\n      clearTimeout(calendarFocusAfterSelectTimerRef.current);\n      calendarFocusAfterSelectTimerRef.current = setTimeout(() => {\n        calendarFocusAfterSelect.current = false;\n      }, 500);\n\n      // Set a ref indicating a date was selected.\n      dateSelectedRef.current = true;\n      dispatch({ type: 'dateSelected', data: detail.value });\n      setIsOpen(false);\n    },\n    [dispatch]\n  );\n\n  return {\n    calendarIconActionHandler,\n    datePickerCommitHandler,\n    dropdownCloseHandler,\n    completeDateValue: state.completeDateValue,\n    dateValue: state.dateValue,\n    iconRef,\n    isOpen,\n    maskCommitHandler,\n    maskInputHandler,\n    maskRef\n  };\n};\n\nexport { useInputDatePicker };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentProps, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useImperativeHandle, useRef } from 'preact/hooks';\nimport { BundleType } from '../resources/nls/bundle';\nimport { CalendarIcon } from '#PRIVATE_ThemedIcons/CalendarIcon';\nimport {\n  CalendarDate,\n  CalendarDatePlaceholders,\n  InputDateMask,\n  InputDateMaskContext\n} from '#UNSAFE_InputDateMask';\nimport { DatePicker } from '#UNSAFE_DatePicker';\nimport { HiddenAccessible } from '#UNSAFE_HiddenAccessible';\nimport { IconButton } from '#UNSAFE_IconButton';\nimport { InputDatePickerDropdown } from './InputDatePickerDropdown';\nimport { FocusableHandle } from '#hooks/UNSAFE_useFocusableTextField';\nimport { merge } from '#utils/UNSAFE_stringUtils';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { useInputDatePicker } from './useInputDatePicker';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\n\ntype InputDateMaskProps = ComponentProps<typeof InputDateMask>;\ntype PickedPropsFromInputDateMask = Pick<\n  InputDateMaskProps,\n  | 'aria-describedby'\n  | 'assistiveText'\n  | 'columnSpan'\n  | 'helpSourceLink'\n  | 'helpSourceText'\n  | 'isDisabled'\n  | 'isReadonly'\n  | 'isRequired'\n  | 'isRequiredShown'\n  | 'label'\n  | 'labelEdge'\n  | 'labelStartWidth'\n  | 'messages'\n  | 'textAlign'\n  | 'testId'\n  | 'userAssistanceDensity'\n  | 'variant'\n>;\n\ntype DatePickerProps = ComponentProps<typeof DatePicker>;\ntype PickedPropsFromDatePicker = Pick<\n  DatePickerProps,\n  | 'dayFormatter'\n  | 'daysOutsideMonth'\n  | 'max'\n  | 'min'\n  | 'monthAndYearPicker'\n  | 'todayTimeZone'\n  | 'todayButton'\n>;\n\ntype Props = PickedPropsFromInputDateMask &\n  PickedPropsFromDatePicker & {\n    /**\n     * If specified, overrides the locale specific order of the individual date segments\n     * in the date field as well as the locale specific separator. The value of each placeholder\n     * is only used when the type is 'literal', otherwise it is replaced with a translated\n     * placeholder for month, day, or year. The placeholders must include month, day, and year.\n     */\n    masks?: CalendarDatePlaceholders;\n\n    /**\n     * The current display value of the component.\n     * This is a CalendarDate, not CalendarDateRequired, because this is a controlled component and\n     * the user may type the month, day, and year separately. If a selection is made in the date\n     * picker, then the value is a complete date.\n     */\n    value?: CalendarDate;\n\n    /**\n     * Callback invoked when the user commits the entered value by blurring or hitting the enter key.\n     * It is also called when a selection is made in the date picker.\n     */\n    onCommit?: (detail: ValueUpdateDetail<CalendarDate>) => void;\n\n    /**\n     * Callback invoked each time the user changes the value of a segment. For example, if the user\n     * types '12' into the month segment, this callback will be called twice to change the month\n     * first to '1' and then '12'.\n     */\n    onInput: (detail: ValueUpdateDetail<CalendarDate>) => void;\n  };\n\n/**\n * InputDatePicker allows users to enter or select a single date using a calendar interface.\n */\nexport const InputDatePicker = forwardRef(\n  (\n    {\n      'aria-describedby': propDescribedBy,\n      assistiveText,\n      dayFormatter,\n      daysOutsideMonth,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isReadonly,\n      label,\n      max,\n      messages,\n      min,\n      monthAndYearPicker,\n      todayTimeZone,\n      todayButton,\n      value,\n      onCommit,\n      onInput,\n      testId,\n      userAssistanceDensity: propUserAssistanceDensity,\n      ...dateMaskProps\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      calendarIconActionHandler,\n      datePickerCommitHandler,\n      completeDateValue,\n      dateValue,\n      dropdownCloseHandler,\n      iconRef,\n      isOpen,\n      maskCommitHandler,\n      maskInputHandler,\n      maskRef\n    } = useInputDatePicker({\n      onCommit,\n      onInput,\n      value\n    });\n\n    const mainFieldRef = useRef<HTMLDivElement>(null);\n    const { inputDatePicker_selectDate, inputDatePicker_instruction } =\n      useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n    const calendarIconAriaLabel = inputDatePicker_selectDate();\n\n    // We need this to determine if UA/messaging should be shown in the dropdown.\n    const { userAssistanceDensity: formUserAssistanceDensity } = useFormContext();\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    useImperativeHandle(ref!, () => ({\n      focus: () => {\n        maskRef.current?.focus();\n      },\n      blur: () => {\n        maskRef.current?.blur();\n      }\n    }));\n\n    const maskFieldInstructionId = useId();\n    const maskFieldInstructionText = inputDatePicker_instruction();\n    const maskFieldInstruction =\n      !isDisabled && !isReadonly ? (\n        <HiddenAccessible id={maskFieldInstructionId} isHidden={true}>\n          {maskFieldInstructionText}\n        </HiddenAccessible>\n      ) : undefined;\n    const ariaDescribedBy =\n      !isDisabled && !isReadonly\n        ? merge([propDescribedBy, maskFieldInstructionId])\n        : propDescribedBy;\n\n    const endContent = (\n      <IconButton\n        aria-haspopup=\"dialog\"\n        aria-label={calendarIconAriaLabel}\n        isDisabled={isDisabled}\n        ref={iconRef}\n        size=\"sm\"\n        testId={testId ? testId + '_calendarIcon' : undefined}\n        variant=\"ghost\"\n        onAction={calendarIconActionHandler}>\n        <CalendarIcon />\n      </IconButton>\n    );\n\n    const shouldShowDropdown = isOpen as boolean;\n\n    return (\n      <>\n        <InputDateMaskContext.Provider\n          value={{ isDropdownOpen: isOpen, isInputDatePickerParent: true }}>\n          <InputDateMask\n            aria-describedby={ariaDescribedBy}\n            assistiveText={assistiveText}\n            endContent={endContent}\n            helpSourceLink={helpSourceLink}\n            helpSourceText={helpSourceText}\n            isDisabled={isDisabled}\n            isReadonly={isReadonly}\n            label={label}\n            onCommit={maskCommitHandler}\n            onInput={maskInputHandler}\n            mainFieldRef={mainFieldRef}\n            messages={messages}\n            testId={testId}\n            ref={maskRef}\n            userAssistanceDensity={propUserAssistanceDensity}\n            value={dateValue}\n            {...dateMaskProps}\n          />\n        </InputDateMaskContext.Provider>\n\n        {maskFieldInstruction}\n\n        {shouldShowDropdown && (\n          <InputDatePickerDropdown\n            anchorRef={mainFieldRef}\n            assistiveText={assistiveText}\n            dayFormatter={dayFormatter}\n            daysOutsideMonth={daysOutsideMonth}\n            helpSourceLink={helpSourceLink}\n            helpSourceText={helpSourceText}\n            isDisabled={isDisabled}\n            isReadonly={isReadonly}\n            isOpen={isOpen}\n            label={label}\n            onClose={dropdownCloseHandler}\n            onCommit={datePickerCommitHandler}\n            max={max}\n            messages={messages}\n            min={min}\n            monthAndYearPicker={monthAndYearPicker}\n            testId={testId ? testId + '_datePicker' : undefined}\n            todayTimeZone={todayTimeZone}\n            todayButton={todayButton}\n            userAssistanceDensity={userAssistanceDensity}\n            value={completeDateValue}\n          />\n        )}\n      </>\n    );\n  }\n);\n"],"names":["InputDatePickerDropdown","anchorRef","assistiveText","dayFormatter","daysOutsideMonth","helpSourceLink","helpSourceText","isDisabled","isOpen","isReadonly","label","onClose","onCommit","max","messages","min","monthAndYearPicker","testId","todayButton","todayTimeZone","userAssistanceDensity","value","isDropdownAbove","setDropdownAbove","useState","prevIsOpen","setPrevIsOpen","handleDropdownPosition","useCallback","data","placement","startsWith","shouldShowSheet","isPhone","datePicker_label","useTranslationBundle","datePickerAriaLabel","datePickerMainContent","_jsx","jsx","DatePicker","maxWidth","undefined","width","datePickerPropVars","inlineUserAssistanceFooter","length","FormFieldContext","Provider","isFocused","children","class","userAssistanceStyles","InlineUserAssistance","fieldLabel","contentTestId","dropdownContent","dropdownStyles","SectionedContent","footer","hasFocusTrap","main","role","Sheet","initialFocus","StickyPositioningDropdown","onPosition","sizeOptions","isMaxWidthAdjusted","isMaxHeightAdjusted","getClientHints","deviceType","convertToCalendarDateRequired","dateVal","isCompleteCalendarDate","inputDatePickerReducer","state","action","type","dateValue","completeDateValue","useInputDatePicker","onInput","currentValue","setIsOpen","iconRef","useRef","maskRef","outsideMousedownRef","outsideMousedownTimerRef","calendarFocusAfterSelect","calendarFocusAfterSelectTimerRef","lastCommittedDateRef","lastDateRef","lastValueFromParentRef","dateSelectedRef","dispatch","useReducer","useInputDatePickerState","calendarDatesAreDifferent","current","useEffect","previousValue","maskInputHandler","detail","maskCommitHandler","calendarIconActionHandler","dropdownCloseHandler","reason","clearTimeout","setTimeout","focus","datePickerCommitHandler","InputDatePicker","forwardRef","propDescribedBy","propUserAssistanceDensity","dateMaskProps","ref","mainFieldRef","inputDatePicker_selectDate","inputDatePicker_instruction","calendarIconAriaLabel","formUserAssistanceDensity","useFormContext","useImperativeHandle","blur","maskFieldInstructionId","useId","maskFieldInstructionText","maskFieldInstruction","HiddenAccessible","id","isHidden","ariaDescribedBy","merge","endContent","IconButton","size","variant","onAction","CalendarIcon","shouldShowDropdown","_jsxs","InputDateMaskContext","isDropdownOpen","isInputDatePickerParent","InputDateMask"],"mappings":"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"}
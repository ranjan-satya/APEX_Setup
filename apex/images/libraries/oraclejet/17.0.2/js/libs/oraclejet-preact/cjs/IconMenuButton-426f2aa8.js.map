{"version":3,"file":"IconMenuButton-426f2aa8.js","sources":["../../src/UNSAFE_IconMenuButton/IconMenuButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ButtonLabelLayout } from '../UNSAFE_ButtonLabelLayout';\n\nimport { MenuButtonDropdownIcon } from '../PRIVATE_ThemedIcons/MenuButtonDropdownIcon';\n\nimport { Menu } from '../UNSAFE_Menu';\nimport { useMenuAction, MenuToggleDetail } from '../hooks/UNSAFE_useMenuAction';\nimport { useTooltip } from '../hooks/UNSAFE_useTooltip';\n\nimport { BaseButton } from '../UNSAFE_BaseButton';\n\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\n\nimport { ComponentChildren, ComponentChild, Fragment } from 'preact';\nimport { forwardRef, ForwardedRef } from 'preact/compat';\nimport { useRef, useImperativeHandle } from 'preact/hooks';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\n\ntype WidthInterpolationProps = Pick<DimensionProps, 'width'>;\n\nexport type BaseProps = WidthInterpolationProps & {\n  /**\n   * children - One or more MenuItems, dividers, or Menu groups\n   */\n  children?: ComponentChildren;\n\n  /**\n   * The icon is the button's icon.  Note that this is not the menu\n   * expand icon shown on the right (or to the left in right to left mode).\n   */\n  icon?: ComponentChild;\n\n  /**\n   * Specifies that the button element should be disabled.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Specifies if only the icon is shown, and no down chevron.\n   */\n  isIconOnly?: boolean;\n\n  /**\n   * Specifes the button type\n   */\n  type?: 'button' | 'submit';\n\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the button.\n   */\n  'aria-describedby'?: string;\n\n  /**\n   * Specifies if the menu is open\n   */\n  isMenuOpen?: boolean;\n\n  /**\n   * Indicates in what states the button has chrome (background and border).\n   *     \"ghost\": \"Ghost buttons are the least prominent variant. Ghost buttons are\n   * useful for performing low-priority tasks, such as manipulating the UI.\",\n   *     \"borderless\"': \"Borderless buttons are a more prominent variant. Borderless\n   * buttons are useful for supplemental actions that require minimal emphasis.\",\n   *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n   * solid buttons. Outlined buttons are useful for secondary actions.\",\n   *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n   *  most important actions in the UI.\",\n   */\n  variant?: 'ghost' | 'borderless' | 'outlined' | 'solid';\n\n  /**\n   * The size indicates how large the button is rendered.\n   */\n  size?: 'xs' | 'sm' | 'md' | 'lg';\n\n  /**\n   * Property that triggers a callback immediately when toggle happens and value of expanded property should be updated\n   */\n  onToggleMenu?: (details: MenuToggleDetail) => void;\n};\n\n/**\n * Note that either an accessibleLabel or tooltip must be specified.\n */\ntype VariationAccessibleLabelProps =\n  | {\n      /**\n       * accessibleLabel - the aria label\n       */\n      accessibleLabel: string;\n\n      /**\n       * tooltip - overrides the accessibleLabel for the tooltip\n       */\n      tooltip?: string;\n    }\n  | {\n      accessibleLabel?: string;\n\n      tooltip: string;\n    };\n\n/**\n * A IconMenuButton is a combined action and menu button.\n */\nexport const IconMenuButton = forwardRef(\n  (\n    {\n      children,\n      tooltip,\n      accessibleLabel,\n      variant = 'outlined',\n      isDisabled = false,\n      isMenuOpen = false,\n      isIconOnly = false,\n      onToggleMenu,\n      size = 'md',\n      type: buttonType = 'button',\n      testId,\n      width,\n      icon,\n      'aria-describedby': ariaDescribedBy\n    }: BaseProps & VariationAccessibleLabelProps & TestIdProps,\n    ref?: ForwardedRef<HTMLButtonElement>\n  ) => {\n    const buttonRef = useRef<HTMLButtonElement>(null);\n    useImperativeHandle(ref!, () => buttonRef.current!, [buttonRef]);\n\n    const { triggerProps, menuProps } = useMenuAction({\n      isDisabled: isDisabled,\n      onToggleMenu: onToggleMenu,\n      isMenuOpen: isMenuOpen,\n      anchorRef: buttonRef\n    });\n\n    const { tooltipContent, tooltipProps } = useTooltip({\n      text: tooltip ? tooltip : accessibleLabel,\n      isDisabled: isMenuOpen || isDisabled\n    });\n\n    const elementDetails = {\n      type: 'button' as const,\n      buttonType: buttonType\n    };\n\n    const ariaProps = { 'aria-describedby': ariaDescribedBy };\n\n    const rootButton = (\n      <Fragment>\n        <BaseButton\n          {...mergeProps(tooltipProps, triggerProps, ariaProps)}\n          styling={isMenuOpen ? ['min', 'active'] : ['min']}\n          elementDetails={elementDetails}\n          isDisabled={isDisabled}\n          variant={variant}\n          width={width}\n          size={size}\n          ref={buttonRef}\n          aria-label={accessibleLabel ?? tooltip}\n          testId={testId}>\n          <ButtonLabelLayout\n            display={'icons'}\n            startIcon={icon}\n            endIcon={isIconOnly ? null : <MenuButtonDropdownIcon />}\n            size={size}></ButtonLabelLayout>\n          {tooltipContent}\n        </BaseButton>\n      </Fragment>\n    );\n\n    /*TODO: Remove this hardcoded offsetValue so we have dropdown offset only set on one single place.\n     Could be done via menu props or having a dropdownMenu component. JET-60595*/\n    return isDisabled ? (\n      rootButton\n    ) : (\n      <Fragment>\n        {rootButton}\n        <Menu {...menuProps} offsetValue={4} aria-label={accessibleLabel ?? tooltip}>\n          {children}\n        </Menu>\n      </Fragment>\n    );\n  }\n);\n\nIconMenuButton.displayName = 'IconMenuButton';\n"],"names":["forwardRef","useRef","useImperativeHandle","useMenuAction","useTooltip","_jsx","Fragment","_jsxs","BaseButton","mergeProps","ButtonLabelLayout","MenuButtonDropdownIcon","Menu"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;;AAEG;AACU,MAAA,cAAc,GAAGA,iBAAU,CACtC,CACE,EACE,QAAQ,EACR,OAAO,EACP,eAAe,EACf,OAAO,GAAG,UAAU,EACpB,UAAU,GAAG,KAAK,EAClB,UAAU,GAAG,KAAK,EAClB,UAAU,GAAG,KAAK,EAClB,YAAY,EACZ,IAAI,GAAG,IAAI,EACX,IAAI,EAAE,UAAU,GAAG,QAAQ,EAC3B,MAAM,EACN,KAAK,EACL,IAAI,EACJ,kBAAkB,EAAE,eAAe,EACqB,EAC1D,GAAqC,KACnC;AACF,IAAA,MAAM,SAAS,GAAGC,YAAM,CAAoB,IAAI,CAAC,CAAC;AAClD,IAAAC,yBAAmB,CAAC,GAAI,EAAE,MAAM,SAAS,CAAC,OAAQ,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;AAEjE,IAAA,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,GAAGC,2BAAa,CAAC;AAChD,QAAA,UAAU,EAAE,UAAU;AACtB,QAAA,YAAY,EAAE,YAAY;AAC1B,QAAA,UAAU,EAAE,UAAU;AACtB,QAAA,SAAS,EAAE,SAAS;AACrB,KAAA,CAAC,CAAC;AAEH,IAAA,MAAM,EAAE,cAAc,EAAE,YAAY,EAAE,GAAGC,qBAAU,CAAC;QAClD,IAAI,EAAE,OAAO,GAAG,OAAO,GAAG,eAAe;QACzC,UAAU,EAAE,UAAU,IAAI,UAAU;AACrC,KAAA,CAAC,CAAC;AAEH,IAAA,MAAM,cAAc,GAAG;AACrB,QAAA,IAAI,EAAE,QAAiB;AACvB,QAAA,UAAU,EAAE,UAAU;KACvB,CAAC;AAEF,IAAA,MAAM,SAAS,GAAG,EAAE,kBAAkB,EAAE,eAAe,EAAE,CAAC;IAE1D,MAAM,UAAU,IACdC,cAAA,CAACC,eAAQ,EACP,EAAA,QAAA,EAAAC,eAAA,CAACC,qBAAU,EAAA,EAAA,GACLC,qBAAU,CAAC,YAAY,EAAE,YAAY,EAAE,SAAS,CAAC,EACrD,OAAO,EAAE,UAAU,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EACjD,cAAc,EAAE,cAAc,EAC9B,UAAU,EAAE,UAAU,EACtB,OAAO,EAAE,OAAO,EAChB,KAAK,EAAE,KAAK,EACZ,IAAI,EAAE,IAAI,EACV,GAAG,EAAE,SAAS,EAAA,YAAA,EACF,eAAe,IAAI,OAAO,EACtC,MAAM,EAAE,MAAM,aACdJ,cAAC,CAAAK,mCAAiB,IAChB,OAAO,EAAE,OAAO,EAChB,SAAS,EAAE,IAAI,EACf,OAAO,EAAE,UAAU,GAAG,IAAI,GAAGL,cAAA,CAACM,0BAAsB,EAAG,EAAA,CAAA,EACvD,IAAI,EAAE,IAAI,EAAA,CAAsB,EACjC,cAAc,CAAA,EAAA,CACJ,EACJ,CAAA,CACZ,CAAC;AAEF;AAC6E;AAC7E,IAAA,OAAO,UAAU,IACf,UAAU,KAEVJ,eAAC,CAAAD,eAAQ,eACN,UAAU,EACXD,cAAC,CAAAO,SAAI,EAAK,EAAA,GAAA,SAAS,EAAE,WAAW,EAAE,CAAC,EAAA,YAAA,EAAc,eAAe,IAAI,OAAO,EACxE,QAAA,EAAA,QAAQ,EACJ,CAAA,CAAA,EAAA,CACE,CACZ,CAAC;AACJ,CAAC,EACD;AAEF,cAAc,CAAC,WAAW,GAAG,gBAAgB;;;;"}
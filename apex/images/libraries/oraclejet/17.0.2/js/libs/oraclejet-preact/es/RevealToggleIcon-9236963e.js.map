{"version":3,"file":"RevealToggleIcon-9236963e.js","sources":["../../src/PRIVATE_RevealToggleIcon/RevealToggleIcon.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentProps } from 'preact';\nimport { ViewHideIcon } from '#PRIVATE_ThemedIcons/ViewHideIcon';\nimport { ViewIcon } from '#PRIVATE_ThemedIcons/ViewIcon';\nimport { IconSwitchButton } from '#PRIVATE_IconSwitchButton';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { TestIdProps } from '#hooks/UNSAFE_useTestId';\n\ntype IconSwitchButtonProps = ComponentProps<typeof IconSwitchButton>;\n\ntype RevealToggleIconProps = TestIdProps & {\n  /**\n   * The aria label of the toggle.\n   */\n  accessibleLabel: IconSwitchButtonProps['accessibleLabel'];\n  /**\n   * Specifies whether the content is shown or hidden.\n   */\n  isRevealed?: boolean;\n  /**\n   * Property that triggers a callback immediately when toggle happens and value of isRevealed property should be updated\n   */\n  onToggle?: IconSwitchButtonProps['onToggle'];\n  /**\n   * Tooltip text to indicate that the toggle will hide the content.\n   */\n  tooltipHide?: string;\n  /**\n   * Tooltip text to indicate that the toggle will show the content.\n   */\n  tooltipShow?: string;\n};\n\n/**\n * RevealToggleIcon is a controlled toggle icon component with tooltip that displays\n * hide or show icons. It is used internally for input components that hide and show the content.\n */\nexport function RevealToggleIcon({\n  accessibleLabel,\n  isRevealed,\n  onToggle,\n  testId,\n  tooltipHide,\n  tooltipShow\n}: RevealToggleIconProps) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const hide = tooltipHide || translations.formControl_hide();\n  const show = tooltipShow || translations.formControl_show();\n\n  return (\n    <IconSwitchButton\n      // we want to display the tooltip title of the expected action on toggle\n      tooltip={isRevealed ? hide : show}\n      accessibleLabel={accessibleLabel}\n      // denote that the switch is selected when in the \"masked\" state\n      isSelected={!isRevealed}\n      onToggle={onToggle}\n      testId={testId}\n      size=\"sm\">\n      {/* we want to display the icon of the expected action on toggle */}\n      {isRevealed ? <ViewHideIcon /> : <ViewIcon />}\n    </IconSwitchButton>\n  );\n}\n"],"names":["_jsx","ViewHideIcon","ViewIcon"],"mappings":";;;;;;;AAwCA;;;AAGG;AACa,SAAA,gBAAgB,CAAC,EAC/B,eAAe,EACf,UAAU,EACV,QAAQ,EACR,MAAM,EACN,WAAW,EACX,WAAW,EACW,EAAA;AACtB,IAAA,MAAM,YAAY,GAAG,oBAAoB,CAAa,0BAA0B,CAAC,CAAC;IAClF,MAAM,IAAI,GAAG,WAAW,IAAI,YAAY,CAAC,gBAAgB,EAAE,CAAC;IAC5D,MAAM,IAAI,GAAG,WAAW,IAAI,YAAY,CAAC,gBAAgB,EAAE,CAAC;IAE5D,QACEA,IAAC,gBAAgB;;;;AAEf,QAAA,OAAO,EAAE,UAAU,GAAG,IAAI,GAAG,IAAI,EACjC,eAAe,EAAE,eAAe;;AAEhC,QAAA,UAAU,EAAE,CAAC,UAAU,EACvB,QAAQ,EAAE,QAAQ,EAClB,MAAM,EAAE,MAAM,EACd,IAAI,EAAC,IAAI,EAER,QAAA,EAAA,UAAU,GAAGA,GAAA,CAACC,WAAY,EAAG,EAAA,CAAA,GAAGD,GAAC,CAAAE,OAAQ,EAAG,EAAA,CAAA,EAAA,CAC5B,EACnB;AACJ;;;;"}
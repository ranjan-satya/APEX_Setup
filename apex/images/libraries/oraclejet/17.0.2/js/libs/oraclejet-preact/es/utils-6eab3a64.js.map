{"version":3,"file":"utils-6eab3a64.js","sources":["../../src/UNSAFE_Theme/utils.ts"],"sourcesContent":["import type { CSSVarFunction } from '@vanilla-extract/private';\nimport { densityVars, scaleVars } from '../Common/themes/themeContract.css';\nimport { rgb as toRgbString } from '../utils/PRIVATE_colorUtils';\n// Importing this here so we can export it as extendThemeContractVars for readability\nimport { mergeDeepRight as extendThemeContractVars } from 'ramda';\n\n// Added: new types\ntype RGBType = `rgb(${CSSVarFunction})`;\ntype RGBAType = `rgba(${CSSVarFunction}, ${number})`;\n\nconst rgb = (rgb: CSSVarFunction) => toRgbString(rgb) as RGBType;\n// TODO: create rgba function in PRIVATE_colorUtils\nconst rgba = (rgb: CSSVarFunction, alpha: number): RGBAType => `rgba(${rgb}, ${alpha})`;\n\n// JET-59344 refactor of 'fallbackVar' from '@vanilla-extract/css'.\n// directly importing the function was causing vanilla-extract to be bundled into\n// the preact packages and causing issues with testing\nconst fallbackVar = (...values: [string, ...Array<string>]): CSSVarFunction => {\n  const finalValue = values.reverse().reduce((acc: string, value: string) => {\n    if (acc === '') {\n      acc = String(value);\n    } else {\n      if (typeof value !== 'string' || !/^var\\(--.*\\)$/.test(value)) {\n        throw new Error(`Invalid variable name: ${value}`);\n      }\n\n      acc = value.replace(/\\)$/, `, ${acc})`);\n    }\n    return acc;\n  }, '');\n\n  return finalValue as CSSVarFunction;\n};\n\n// For the default, where no scale var is specified, we use rem units, so that it will scale based on the root font-size.\nconst scaleFallback = () => fallbackVar(scaleVars.size.units, '0.25rem');\nconst xUnits = (unit: number) =>\n  unit === 1 ? scaleFallback() : `calc(${unit} * ${scaleFallback()})`;\n\n// For the default, where no density var is specified, we set it to 0px.\nconst densityFallback = () => fallbackVar(densityVars.density.units, '0px');\nconst densityUnits = (unit: number) =>\n  unit === 1 ? densityFallback() : `calc(${unit} * ${densityFallback()})`;\n\nconst min = (val: string, minVal: string): string => `min(${val},${minVal})`;\nconst max = (val: string, minVal: string): string => `max(${val},${minVal})`;\n\nexport { rgb, rgba, xUnits, densityUnits, fallbackVar, min, max, extendThemeContractVars };\n\nexport type { RGBType, RGBAType };\n"],"names":["toRgbString"],"mappings":";;;;AAUM,MAAA,GAAG,GAAG,CAAC,GAAmB,KAAKA,KAAW,CAAC,GAAG,EAAa;AACjE;AACA,MAAM,IAAI,GAAG,CAAC,GAAmB,EAAE,KAAa,KAAe,CAAQ,KAAA,EAAA,GAAG,CAAK,EAAA,EAAA,KAAK,IAAI;AAExF;AACA;AACA;AACA,MAAM,WAAW,GAAG,CAAC,GAAG,MAAkC,KAAoB;AAC5E,IAAA,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,GAAW,EAAE,KAAa,KAAI;AACxE,QAAA,IAAI,GAAG,KAAK,EAAE,EAAE;AACd,YAAA,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;SACrB;aAAM;AACL,YAAA,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AAC7D,gBAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,KAAK,CAAA,CAAE,CAAC,CAAC;aACpD;YAED,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,CAAK,EAAA,EAAA,GAAG,CAAG,CAAA,CAAA,CAAC,CAAC;SACzC;AACD,QAAA,OAAO,GAAG,CAAC;KACZ,EAAE,EAAE,CAAC,CAAC;AAEP,IAAA,OAAO,UAA4B,CAAC;AACtC,EAAE;AAEF;AACA,MAAM,aAAa,GAAG,MAAM,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AACnE,MAAA,MAAM,GAAG,CAAC,IAAY,KAC1B,IAAI,KAAK,CAAC,GAAG,aAAa,EAAE,GAAG,CAAA,KAAA,EAAQ,IAAI,CAAM,GAAA,EAAA,aAAa,EAAE,CAAA,CAAA,EAAI;AAEtE;AACA,MAAM,eAAe,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACtE,MAAA,YAAY,GAAG,CAAC,IAAY,KAChC,IAAI,KAAK,CAAC,GAAG,eAAe,EAAE,GAAG,CAAA,KAAA,EAAQ,IAAI,CAAM,GAAA,EAAA,eAAe,EAAE,CAAA,CAAA,EAAI;AAE1E,MAAM,GAAG,GAAG,CAAC,GAAW,EAAE,MAAc,KAAa,CAAO,IAAA,EAAA,GAAG,CAAI,CAAA,EAAA,MAAM,IAAI;AAC7E,MAAM,GAAG,GAAG,CAAC,GAAW,EAAE,MAAc,KAAa,CAAO,IAAA,EAAA,GAAG,CAAI,CAAA,EAAA,MAAM;;;;"}
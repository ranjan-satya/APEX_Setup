{"version":3,"file":"size-782ed57a.js","sources":["../../src/utils/UNSAFE_size/size.ts"],"sourcesContent":["import { xUnits } from '../../UNSAFE_Theme';\n\n// The Size type is used for gap and dimensions (e.g., width/height) and padding and similar\n// properties. Using the sizeToCSS function below we transform the property of this type into\n// something that is usable in a css style property.\nexport type Size =\n  | 0\n  | `calc(${string})`\n  | `var(${string})`\n  | `--${string}`\n  | `${number}x`\n  | `${number}%`\n  | `${number}${CssUnits}`;\n\ntype CssUnits = (typeof cssUnits)[number];\n\n// list of supported length units https://www.w3schools.com/cssref/css_units.php\nconst cssUnits = [\n  'ch',\n  'cm',\n  'mm',\n  'in',\n  'pc',\n  'pt',\n  'px',\n  'em',\n  'ex',\n  'rem',\n  'vh',\n  'vw',\n  'vmin',\n  'vmax'\n] as const;\n\nconst cssUnitRegex = new RegExp(`^-?\\\\d*\\\\.?\\\\d+(${cssUnits.join('|')})$`);\nconst xUnitRegex = new RegExp(`^-?\\\\d*\\\\.?\\\\d+x$`);\n\nconst isStringZero = (v: string) => parseFloat(v) === 0;\nconst isPercent = (v: string) => v.endsWith('%');\nconst isCalcExpression = (v: string) => v.startsWith('calc(') && v.endsWith(')');\nconst isVarFunction = (v: string) => v.startsWith('var(') && v.endsWith(')');\nconst isCssVar = (v: string) => v.startsWith('--');\nconst isCssUnit = (v: string) => cssUnitRegex.test(v);\nconst isXUnit = (v: string) => xUnitRegex.test(v);\n\n/**\n * This transforms a number + 'x' to a css calc.\n * @param {string } v - a value to transform\n * @returns {string | 0}\n */\nconst xToCSS = (v: string) => {\n  // parse out the 'x'\n  const nStr = v.slice(0, v.length - 1);\n  // nStr should now only contain characters that could be part of a floating number.\n  // I don't want a string with random characters in it to be ignored as it would with\n  // parseFloat, so I'm using Number here. parseFloat('1.2p') -> 1.2. whereas\n  // Number('1.2p') returns NaN.\n  const num = Number(nStr);\n  if (isNaN(num)) return 0;\n\n  // Note: 1x is equal to about 4px\n  return xUnits(num);\n};\n\n/**\n * Given a value that is of type Size, transform the value into\n * something that is usable in a css style property.\n * @param {string | 0 } v - a value to transform\n * @returns {string | 0}\n */\nexport const sizeToCSS = (v: Size) => {\n  return v === 0 || isStringZero(v) // We want 0, '0%' and '0x' to return 0\n    ? 0\n    : isVarFunction(v) || isCalcExpression(v) || isPercent(v) || isCssUnit(v)\n    ? v\n    : isCssVar(v)\n    ? `var(${v})`\n    : isXUnit(v)\n    ? xToCSS(v)\n    : 0; // return 0 for any invalid v.\n};\n"],"names":[],"mappings":";;;AAgBA;AACA,MAAM,QAAQ,GAAG;IACf,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,KAAK;IACL,IAAI;IACJ,IAAI;IACJ,MAAM;IACN,MAAM;CACE,CAAC;AAEX,MAAM,YAAY,GAAG,IAAI,MAAM,CAAC,CAAmB,gBAAA,EAAA,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA,EAAA,CAAI,CAAC,CAAC;AAC3E,MAAM,UAAU,GAAG,IAAI,MAAM,CAAC,CAAA,iBAAA,CAAmB,CAAC,CAAC;AAEnD,MAAM,YAAY,GAAG,CAAC,CAAS,KAAK,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AACxD,MAAM,SAAS,GAAG,CAAC,CAAS,KAAK,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AACjD,MAAM,gBAAgB,GAAG,CAAC,CAAS,KAAK,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AACjF,MAAM,aAAa,GAAG,CAAC,CAAS,KAAK,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC7E,MAAM,QAAQ,GAAG,CAAC,CAAS,KAAK,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACnD,MAAM,SAAS,GAAG,CAAC,CAAS,KAAK,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACtD,MAAM,OAAO,GAAG,CAAC,CAAS,KAAK,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAElD;;;;AAIG;AACH,MAAM,MAAM,GAAG,CAAC,CAAS,KAAI;;AAE3B,IAAA,MAAM,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;;;;;AAKtC,IAAA,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IACzB,IAAI,KAAK,CAAC,GAAG,CAAC;AAAE,QAAA,OAAO,CAAC,CAAC;;AAGzB,IAAA,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;AACrB,CAAC,CAAC;AAEF;;;;;AAKG;AACU,MAAA,SAAS,GAAG,CAAC,CAAO,KAAI;IACnC,OAAO,CAAC,KAAK,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC;AAC/B,UAAE,CAAC;AACH,UAAE,aAAa,CAAC,CAAC,CAAC,IAAI,gBAAgB,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC;AACzE,cAAE,CAAC;AACH,cAAE,QAAQ,CAAC,CAAC,CAAC;kBACX,CAAO,IAAA,EAAA,CAAC,CAAG,CAAA,CAAA;AACb,kBAAE,OAAO,CAAC,CAAC,CAAC;AACZ,sBAAE,MAAM,CAAC,CAAC,CAAC;AACX,sBAAE,CAAC,CAAC;AACR;;;;"}
{"version":3,"file":"listViewSelectionTests-a0132dcc.js","sources":["../../src/PRIVATE_List/__tests__/shared/listViewTests.tsx","../../src/PRIVATE_List/__tests__/shared/listViewSelectionTests.tsx"],"sourcesContent":["import { fireEvent, render, screen, waitFor } from '@testing-library/preact';\nimport userEvent from '@testing-library/user-event';\nimport { expect } from 'chai';\nimport { VNode } from 'preact';\n\nimport {\n  CurrentItemVariant,\n  ItemActionDetail,\n  Metadata,\n  SelectionMode\n} from '../../../UNSAFE_Collection';\nimport { RootEnvironmentProvider } from '../../../UNSAFE_Environment';\nimport type { RootEnvironment } from '../../../UNSAFE_Environment';\nimport { Gridlines, ListViewScrollPosition } from '../../../UNSAFE_ListView';\nimport { Keys } from '../../../utils/UNSAFE_keys';\nimport { matchTranslationBundle } from '../../../utils/UNSAFE_matchTranslationBundle';\nimport { CollectionGestureContext } from '../../../hooks/PRIVATE_useCollectionGestureContext';\nimport { MenuItem } from '../../../UNSAFE_Menu';\nimport translations from '../../../resources/nls/en/bundle';\n\nimport { populateData } from './listViewTestFixtures';\nimport type { Employee } from './listViewTestFixtures';\nimport {\n  getContents,\n  getItems,\n  getRoot,\n  mouseItemSelection,\n  fireDragAndDropEvent,\n  keyboardReorder\n} from './testHelpers';\nimport {\n  getAllMenuItemsByRole,\n  getMenuItemByRole,\n  getLabel\n} from '../../../UNSAFE_Menu/__tests__/menuTestsUtils';\nimport { xUnits } from '../../../UNSAFE_Theme/utils';\nimport { ListViewContextMenuConfig } from '../../../UNSAFE_ListView/List.types';\nimport { getClientHints } from '../../../utils/PRIVATE_clientHints';\n\n//TODO: JET-63873\nfunction getSparkle(grid: HTMLElement) {\n  return grid.querySelector('.oj-collection-sparkle')?.firstElementChild as HTMLElement;\n}\nexport type Props<K, D> = {\n  currentItemVariant?: CurrentItemVariant;\n  data: { data: Employee<K>; metadata: Metadata<K> }[];\n  gridlines?: Gridlines;\n  initialKey?: K;\n  onItemAction?: (detail: ItemActionDetail<K, D>) => void;\n  selectedKeys?: Keys<K>;\n  selectionMode?: SelectionMode;\n  onClick?: () => void;\n  scrollPositionOverride?: ListViewScrollPosition<K>;\n  isReorderEnabled?: boolean;\n  contextMenuConfig?: ListViewContextMenuConfig<K, D>;\n};\n\ntype TestComponentProps<K extends string | number, D> = (props: Props<K, D>) => VNode;\n\nexport const testRender = (TestComponent: TestComponentProps<any, any>) => {\n  it('initial render', async function () {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata}></TestComponent>);\n    const items = await getItems();\n    expect(items.length).eq(25);\n  });\n\n  // skip this test in jest, only run it in karma mocha\n  if (typeof jest == typeof undefined) {\n    it('initial render with sparkle', async () => {\n      const data = populateData(100) as Employee<string>[];\n      let dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n        (data) => {\n          return { data: data, metadata: { key: data.id } };\n        }\n      );\n\n      // add suggestions\n      dataMetadata[3].metadata.suggestion = { enable: true };\n      dataMetadata[7].metadata.suggestion = { enable: true };\n      dataMetadata[9].metadata.suggestion = { enable: true };\n\n      const suggestions = dataMetadata.filter((d) => d.metadata.suggestion);\n      dataMetadata = dataMetadata.filter((d) => !d.metadata.suggestion);\n      dataMetadata.unshift(...suggestions);\n\n      render(<TestComponent data={dataMetadata}></TestComponent>);\n      const grid = await getRoot();\n      const sparkle = getSparkle(grid);\n      expect(sparkle !== undefined).eq(true);\n\n      const items = await getItems();\n      expect(items?.length).eq(25);\n      expect(items[0].dataset['ojSuggestion']).eq('true');\n      expect(items[1].dataset['ojSuggestion']).eq('true');\n      expect(items[2].dataset['ojSuggestion']).eq('true');\n\n      const sparkleHeight = items[0].offsetHeight + items[1].offsetHeight + items[2].offsetHeight;\n      expect(sparkleHeight).eq(sparkle.offsetHeight);\n    });\n  }\n};\n\nexport const testContextMenu = (TestComponent: TestComponentProps<string, Employee<any>>) => {\n  it(\"Jet context menu appears when there's no text selection\", async () => {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent\n          data={dataMetadata}\n          contextMenuConfig={{\n            itemsRenderer: (context) => {\n              const data = context.data;\n              return (\n                <>\n                  <MenuItem label={`MenuItem${data ? data.id : ''}`}></MenuItem>\n                  <MenuItem label=\"MenuItem2\"></MenuItem>\n                  <MenuItem label=\"MenuItem3\"></MenuItem>\n                </>\n              );\n            }\n          }}></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const items = await getContents();\n    const grid = await getRoot();\n    const firstItem = items[0];\n\n    fireEvent.contextMenu(firstItem, {\n      clientX: 50,\n      clientY: 50,\n      currentTarget: grid\n    });\n\n    const menu = getMenuItemByRole('menu');\n    const menuItems = getAllMenuItemsByRole('menuitem');\n    //With this we check context menu context was set correctly\n    const menuItemGotByLabel = getLabel('MenuItemi0');\n\n    expect(menu).not.null;\n    expect(menuItems.length).equals(3);\n    expect(menuItemGotByLabel).not.null;\n  });\n\n  it('ContextMenu on Shift-F10', async () => {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent\n          data={dataMetadata}\n          contextMenuConfig={{\n            itemsRenderer: (context) => {\n              const data = context.data;\n              return (\n                <>\n                  <MenuItem label={`MenuItem${data ? data.id : ''}`}></MenuItem>\n                  <MenuItem label=\"MenuItem2\"></MenuItem>\n                  <MenuItem label=\"MenuItem3\"></MenuItem>\n                </>\n              );\n            }\n          }}></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const grid = await getRoot();\n    const items = await getContents();\n    const firstItem = items[0];\n\n    //We do the necessary to have firstItem as current item\n    fireEvent.click(items[0]);\n    expect(grid.getAttribute('aria-activedescendant')).eq(firstItem.id);\n\n    fireEvent.keyDown(grid, { key: 'F10', shiftKey: true });\n\n    const menu = getMenuItemByRole('menu');\n    const menuItems = getAllMenuItemsByRole('menuitem');\n    //With this we check context menu context was set correctly\n    const menuItemGotByLabel = getLabel('MenuItemi0');\n\n    expect(menu).not.null;\n    expect(menuItems.length).equals(3);\n    expect(menuItemGotByLabel).not.null;\n  });\n\n  it(\"Jet context menu doesn't appear when there is text selection\", async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    render(\n      <RootEnvironmentProvider>\n        <TestComponent\n          data={dataMetadata}\n          contextMenuConfig={{\n            itemsRenderer: (context) => {\n              const data = context.data;\n              return (\n                <>\n                  <MenuItem label={`MenuItem${data ? data.id : ''}`}></MenuItem>\n                  <MenuItem label=\"MenuItem2\"></MenuItem>\n                  <MenuItem label=\"MenuItem3\"></MenuItem>\n                </>\n              );\n            }\n          }}></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const items = await getContents();\n    const grid = await getRoot();\n    const firstItem = items[0];\n\n    const elem = await screen.findByText(firstItem.textContent || '');\n\n    // Set text selection\n    await userEvent.pointer([\n      { target: elem, offset: 0, keys: '[MouseLeft>]' },\n      { offset: 5 },\n      { keys: '[/MouseLeft]' }\n    ]);\n\n    fireEvent.contextMenu(firstItem, {\n      clientX: 50,\n      clientY: 50,\n      currentTarget: grid\n    });\n\n    const menu = screen.queryByRole('menu');\n\n    expect(menu).null;\n  });\n\n  it('Ios context menu appears after 1500ms', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    render(\n      <RootEnvironmentProvider>\n        <TestComponent\n          data={dataMetadata}\n          contextMenuConfig={{\n            itemsRenderer: (context) => {\n              const data = context.data;\n              return (\n                <>\n                  <MenuItem label={`MenuItem${data ? data.id : ''}`}></MenuItem>\n                  <MenuItem label=\"MenuItem2\"></MenuItem>\n                  <MenuItem label=\"MenuItem3\"></MenuItem>\n                </>\n              );\n            }\n          }}></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n    const firstItem = items[0];\n\n    if (typeof jest === 'undefined') {\n      const { deviceType, platform } = getClientHints();\n      const isMobile = deviceType === 'phone';\n      const isIos = platform === 'ios';\n\n      if (isMobile && isIos) {\n        const timeout = (ms: number) => {\n          return new Promise((resolve) => setTimeout(resolve, ms));\n        };\n        // Touch objects are created so we can replicate this in fake touch events\n        // This stuff is based on what useSwipe triggers and could change depending on the final decision\n        // on what events to trigger on useSwipe.\n        const touch1 = new Touch({\n          target: firstItem,\n          identifier: 0,\n          pageX: 386,\n          pageY: 224\n        });\n\n        if (firstItem) {\n          fireEvent.touchStart(firstItem, {\n            timeStamp: 10406,\n            currentTarget: firstItem,\n            touches: [touch1]\n          });\n        }\n        await timeout(1550);\n        const menu = getMenuItemByRole('menu');\n        const menuItems = getAllMenuItemsByRole('menuitem');\n        //With this we check context menu context was set correctly\n        const menuItemGotByLabel = getLabel('MenuItemi0');\n\n        expect(menu).not.null;\n        expect(menuItems.length).equals(3);\n        expect(menuItemGotByLabel).not.null;\n      }\n    }\n  });\n};\n\nexport const testAria = (TestComponent: TestComponentProps<any, any>) => {\n  it('aria structure and properties (select-none)', async function () {\n    const data = populateData(10) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata}></TestComponent>);\n    const grid = await getRoot();\n    expect(grid.getAttribute('aria-rowcount')).eq('10');\n    expect(grid.getAttribute('aria-multiselectable')).eq(null);\n\n    const items = await getItems();\n    expect(items.length).eq(10);\n    expect(items[0].getAttribute('aria-rowindex')).eq('1');\n\n    const cells = await getContents();\n    expect(cells.length).eq(10);\n    expect(cells[0].getAttribute('aria-colindex')).eq('1');\n    expect(cells[0].getAttribute('aria-selected')).eq(null);\n  });\n\n  it('aria structure and properties (single-select)', async function () {\n    const data = populateData(10) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata} selectionMode=\"single\"></TestComponent>);\n    const grid = await getRoot();\n    expect(grid.getAttribute('aria-rowcount')).eq('10');\n    expect(grid.getAttribute('aria-multiselectable')).eq('false');\n\n    const items = await getItems();\n    expect(items.length).eq(10);\n    expect(items[0].getAttribute('aria-rowindex')).eq('1');\n\n    const cells = await getContents();\n    expect(cells.length).eq(10);\n    expect(cells[0].getAttribute('aria-colindex')).eq('1');\n    expect(cells[0].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('aria structure and properties (multi-select)', async function () {\n    const data = populateData(10) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    expect(grid.getAttribute('aria-rowcount')).eq('10');\n    expect(grid.getAttribute('aria-multiselectable')).eq('true');\n\n    const items = await getItems();\n    expect(items.length).eq(10);\n    expect(items[0].getAttribute('aria-rowindex')).eq('1');\n\n    const cells = await getContents();\n    expect(cells.length).eq(10);\n    expect(cells[0].getAttribute('aria-colindex')).eq('1');\n    expect(cells[0].getAttribute('aria-selected')).eq('false');\n  });\n};\n\nexport const testKeys = (TestComponent: TestComponentProps<any, any>) => {\n  it('supports currentKey logic with numeric key', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata}></TestComponent>);\n    const grid = await getRoot();\n    expect(grid.hasAttribute('aria-activedescendant')).eq(false);\n    const items = await getContents();\n    fireEvent.click(items[0]);\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[1].id);\n    fireEvent.keyDown(grid, { key: 'ArrowUp' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n  });\n\n  it('supports currentKey logic with string key', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata}></TestComponent>);\n    const grid = await getRoot();\n    expect(grid.hasAttribute('aria-activedescendant')).eq(false);\n    const items = await getContents();\n    fireEvent.click(items[0]);\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[1].id);\n    fireEvent.keyDown(grid, { key: 'ArrowUp' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n  });\n\n  it('checking key type - string key', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata}></TestComponent>);\n    const items = await getItems();\n    expect((items[0] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n    expect((items[1] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n    expect((items[2] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n  });\n\n  it('checking key type - numeric key', async () => {\n    const data = populateData(3, true) as Employee<number>[];\n    const dataMetadata: { data: Employee<number>; metadata: Metadata<number> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata}></TestComponent>);\n    const items = await getItems();\n    expect((items[0] as HTMLElement).dataset['ojKeyType']).eq('number');\n    expect((items[1] as HTMLElement).dataset['ojKeyType']).eq('number');\n    expect((items[2] as HTMLElement).dataset['ojKeyType']).eq('number');\n  });\n};\n\nexport const testGridlines = (TestComponent: TestComponentProps<any, any>) => {\n  const isTopGridlineVisible = (item: HTMLElement) => {\n    const className = item.className;\n    return className.indexOf('gridlineTop_visible') > 0;\n  };\n\n  const isBottomGridlineVisible = (item: HTMLElement) => {\n    const className = item.className;\n    return className.indexOf('gridlineBottom_visible') > 0;\n  };\n\n  const isGridlineHidden = (item: HTMLElement) => {\n    return !isTopGridlineVisible(item) && !isBottomGridlineVisible(item);\n  };\n\n  it('gridlines - gridlines are hidden', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata}></TestComponent>);\n    const items = await getItems();\n    expect(isGridlineHidden(items[0])).to.be.true;\n    expect(isGridlineHidden(items[1])).to.be.true;\n    expect(isGridlineHidden(items[2])).to.be.true;\n  });\n\n  it('gridlines - bottom gridlines are visible', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const visible = { item: 'visible' as const, bottom: 'visible' as const };\n    render(<TestComponent data={dataMetadata} gridlines={visible}></TestComponent>);\n    const items = await getItems();\n    expect(isBottomGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[1])).to.be.true;\n    expect(isBottomGridlineVisible(items[2])).to.be.true;\n  });\n\n  it('gridlines - bottom gridlines are visible except for the last list item', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const visibleExceptLast = { item: 'visible' as const };\n    render(<TestComponent data={dataMetadata} gridlines={visibleExceptLast}></TestComponent>);\n    const items = await getItems();\n    expect(isBottomGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[1])).to.be.true;\n    expect(isBottomGridlineVisible(items[2])).to.be.false;\n  });\n\n  it('gridlines - bottom gridlines are visible; The top gridlines of the first list item is visible', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const visibleWithFirst = {\n      item: 'visible' as const,\n      top: 'visible' as const,\n      bottom: 'visible' as const\n    };\n    render(<TestComponent data={dataMetadata} gridlines={visibleWithFirst}></TestComponent>);\n    const items = await getItems();\n    expect(isTopGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[1])).to.be.true;\n    expect(isBottomGridlineVisible(items[2])).to.be.true;\n  });\n\n  it('gridlines - bottom gridlines are visible except for the last list item. The top gridlines of the first list item is visible.', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const visibleWithFirstButNotLast = { item: 'visible' as const, top: 'visible' as const };\n    render(\n      <TestComponent data={dataMetadata} gridlines={visibleWithFirstButNotLast}></TestComponent>\n    );\n    const items = await getItems();\n    expect(isTopGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[1])).to.be.true;\n    expect(isBottomGridlineVisible(items[2])).to.be.false;\n  });\n};\n\nexport const testItemAction = (TestComponent: TestComponentProps<any, any>) => {\n  const isMetadataEqual = (metadata1: Metadata<any>, metadata2: Metadata<any>) => {\n    return metadata1.key === metadata2.key;\n  };\n\n  const isFocusHighlight = (item: HTMLElement) => {\n    const className = item.className;\n    return (\n      className.indexOf('focusHighlight_isFocusHighlight') > 0 ||\n      className.indexOf('MultiVariantStyles_compound') > 0\n    );\n  };\n\n  it('ItemAction - test click on item', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    let count = 0;\n    const onItemAction = <K, D>(detail: ItemActionDetail<K, D>) => {\n      if (count === 0) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 1) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 2) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[2].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[2].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      }\n      count++;\n    };\n    render(<TestComponent data={dataMetadata} onItemAction={onItemAction}></TestComponent>);\n    const items = await getItems('row');\n    fireEvent.click(items[1]);\n    fireEvent.click(items[1]);\n    fireEvent.click(items[2]);\n    expect(count).eq(3);\n  });\n\n  it('ItemAction - test press enter on item', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    let count = 0;\n    const onItemAction = <K, D>(detail: ItemActionDetail<K, D>) => {\n      if (count === 1) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 2) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 3) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[2].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[2].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      }\n      count++;\n    };\n    render(<TestComponent data={dataMetadata} onItemAction={onItemAction}></TestComponent>);\n    const grid = await getRoot();\n    const items = await getItems('row');\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[1], { key: 'Enter' });\n    fireEvent.keyDown(items[1], { key: 'Enter' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[2], { key: 'Enter' });\n    expect(count).eq(4);\n  });\n\n  it('ItemAction - test press spacebar on item (Context value is embedded)', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    let count = 0;\n    const onItemAction = <K, D>(detail: ItemActionDetail<K, D>) => {\n      if (count === 1) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 2) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 3) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[2].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[2].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      }\n      count++;\n    };\n    render(\n      <CollectionGestureContext.Provider value={'embedded'}>\n        <TestComponent data={dataMetadata} onItemAction={onItemAction}></TestComponent>\n      </CollectionGestureContext.Provider>\n    );\n    const grid = await getRoot();\n    const items = await getItems('row');\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[1], { key: ' ' });\n    fireEvent.keyDown(items[1], { key: ' ' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[2], { key: ' ' });\n    expect(count).eq(4);\n  });\n\n  it('ItemAction - test press spacebar on item (Context value is default)', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    let count = 0;\n    const onItemAction = <K, D>(detail: ItemActionDetail<K, D>) => {\n      if (count === 1) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[1].metadata);\n      } else if (count === 2) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[1].metadata);\n      } else if (count === 3) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[2].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[2].metadata);\n      }\n      count++;\n    };\n    render(\n      <CollectionGestureContext.Provider value={'default'}>\n        <TestComponent data={dataMetadata} onItemAction={onItemAction}></TestComponent>\n      </CollectionGestureContext.Provider>\n    );\n    const grid = await getRoot();\n    const items = await getItems('row');\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[1], { key: ' ' });\n    fireEvent.keyDown(items[1], { key: ' ' });\n    expect(count).eq(1);\n  });\n\n  it('currentItemVariant - highlight', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: {\n      data: Employee<string>;\n      metadata: Metadata<string>;\n    }[] = data.map((data) => {\n      return { data: data, metadata: { key: data.id } };\n    });\n    render(\n      <TestComponent\n        data={dataMetadata}\n        initialKey={dataMetadata[1].metadata.key}\n        currentItemVariant=\"highlight\"></TestComponent>\n    );\n    const items = await getItems();\n    expect(isFocusHighlight(items[0])).to.be.false;\n\n    fireEvent.click(items[0]);\n    expect(isFocusHighlight(items[0])).to.be.true;\n  });\n\n  it('currentItemVariant - none', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: {\n      data: Employee<string>;\n      metadata: Metadata<string>;\n    }[] = data.map((data) => {\n      return { data: data, metadata: { key: data.id } };\n    });\n    render(\n      <TestComponent\n        data={dataMetadata}\n        initialKey={dataMetadata[1].metadata.key}\n        currentItemVariant=\"none\"></TestComponent>\n    );\n    const items = await getItems();\n    expect(isFocusHighlight(items[0])).to.be.false;\n\n    fireEvent.click(items[0]);\n    expect(isFocusHighlight(items[0])).to.be.false;\n  });\n};\n\nexport const testNavigation = (TestComponent: TestComponentProps<any, any>) => {\n  it('arrow keys', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata}></TestComponent>);\n    const grid = await getRoot();\n    expect(grid.hasAttribute('aria-activedescendant')).eq(false);\n    const items = await getContents();\n    fireEvent.click(items[0]);\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[1].id);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[2].id);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[2].id);\n    fireEvent.keyDown(grid, { key: 'ArrowUp' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[1].id);\n    fireEvent.keyDown(grid, { key: 'ArrowUp' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n    fireEvent.keyDown(grid, { key: 'ArrowUp' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n  });\n\n  // test in karma mocha only since it involves scrolling\n  if (typeof jest === 'undefined') {\n    it('test scroll into view when listview regains focus', async () => {\n      const data = populateData(10) as Employee<string>[];\n      const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n        (data) => {\n          return { data: data, metadata: { key: data.id } };\n        }\n      );\n\n      // the initial current item is Employee 9\n      render(<TestComponent data={dataMetadata} initialKey={data[9].id}></TestComponent>);\n\n      const grid = await getRoot();\n      await waitFor(() => {\n        expect(grid.scrollTop).to.greaterThanOrEqual(280);\n      });\n\n      // scroll listview up until scrollTop is 0\n      grid.scrollTop = 0;\n      await waitFor(() => {\n        expect(grid.scrollTop).to.eq(0);\n      });\n\n      // tab into listview, should scroll Employee 9 into view\n      await userEvent.tab();\n      await waitFor(() => {\n        expect(grid.scrollTop).to.greaterThanOrEqual(280);\n      });\n    });\n  }\n};\n\nexport const testScrollPosition = (TestComponent: TestComponentProps<any, any>) => {\n  if (typeof jest === 'undefined') {\n    it('Scroll position', async () => {\n      const data = populateData(20) as Employee<string>[];\n      const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n        (data) => {\n          return { data: data, metadata: { key: data.id } };\n        }\n      );\n\n      render(\n        <div style={`height: ${xUnits(50)}; overflow: auto`}>\n          <TestComponent\n            data={dataMetadata}\n            scrollPositionOverride={{\n              key: data[4].id\n            }}></TestComponent>\n        </div>\n      );\n      const position = screen.getByText(data[4].id + ' 200 0');\n      expect(position).to.exist;\n    });\n  }\n};\n\nexport const testReorder = (TestComponent: TestComponentProps<any, any>) => {\n  it('reorder - fire Drag and Drop Event', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const { queryByTestId } = render(<TestComponent data={dataMetadata} isReorderEnabled={true} />);\n\n    let items = await getItems();\n    const count = items.length;\n    const firstItemDragIcon = queryByTestId(\n      `drag-icon-${items[0].dataset['ojKey']}`\n    ) as HTMLElement;\n    const thirdItemDragIcon = queryByTestId(\n      `drag-icon-${items[2].dataset['ojKey']}`\n    ) as HTMLElement;\n    const firstItem = items[0];\n\n    // drag the first item and drop on the third item\n    fireDragAndDropEvent(firstItemDragIcon, thirdItemDragIcon);\n    await waitFor(async () => {\n      items = await getItems();\n      const updatedThirdItem = items[2];\n      expect(firstItem).equals(updatedThirdItem);\n      expect(items.length).equal(count);\n    });\n  });\n\n  it('reorder - reorder the first item to down using keyboard', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata} isReorderEnabled={true} />);\n\n    const list = await getRoot();\n    let items = await getItems();\n    const count = items.length;\n    const firstItem = items[0];\n\n    // reorder the first item up\n    mouseItemSelection(firstItem);\n    keyboardReorder(list, 'ArrowUp');\n    await waitFor(async () => {\n      items = await getItems();\n      const reorderedItem = items[0];\n      expect(firstItem).equals(reorderedItem);\n      expect(items.length).equal(count);\n    });\n\n    // reorder the first item down\n    keyboardReorder(list, 'ArrowDown');\n    await waitFor(async () => {\n      items = await getItems();\n      const reorderedItem = items[1];\n      expect(firstItem).equals(reorderedItem);\n      expect(items.length).equal(count);\n    });\n\n    // continuous reorder the first item down\n    keyboardReorder(list, 'ArrowDown');\n    await waitFor(async () => {\n      items = await getItems();\n      const reorderedItem = items[2];\n      expect(firstItem).equals(reorderedItem);\n      expect(items.length).equal(count);\n    });\n  });\n\n  it('reorder - reorder the last item to up using keyboard', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata} isReorderEnabled={true} />);\n\n    const list = await getRoot();\n    let items = await getItems();\n    const count = items.length;\n    const startIndex = items.length - 1;\n    const lastItem = items[startIndex];\n\n    // reorder the last item down\n    mouseItemSelection(lastItem.firstElementChild as HTMLElement);\n    keyboardReorder(list, 'ArrowDown');\n    await waitFor(async () => {\n      items = await getItems();\n      const reorderedItem = items[startIndex];\n      expect(lastItem).equals(reorderedItem);\n      expect(items.length).equal(count);\n    });\n\n    // reorder the last item up\n    keyboardReorder(list, 'ArrowUp');\n    await waitFor(async () => {\n      items = await getItems();\n      const reorderedItem = items[startIndex - 1];\n      expect(lastItem).equals(reorderedItem);\n      expect(items.length).equal(count);\n    });\n\n    // continuous reorder the last item up\n    keyboardReorder(list, 'ArrowUp');\n    await waitFor(async () => {\n      items = await getItems();\n      const reorderedItem = items[startIndex - 2];\n      expect(lastItem).equals(reorderedItem);\n      expect(items.length).equal(count);\n    });\n  });\n\n  if (typeof jest == typeof undefined) {\n    it('reorder - test instruction text', async () => {\n      const data = populateData(3) as Employee<string>[];\n      const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n        (data) => {\n          return { data: data, metadata: { key: data.id } };\n        }\n      );\n\n      // get instruction text\n      const { deviceType, platform } = getClientHints();\n      const keyPressed =\n        platform === 'windows' ? translations.accControlKey() : translations.accCommandKey();\n      const reorderInstructions =\n        deviceType === 'phone' || deviceType === 'tablet'\n          ? ''\n          : translations.accReorderInstructions({\n              keyPressed: keyPressed\n            });\n\n      // instruction text should exist when reorder is enabled\n      const { rerender } = render(<TestComponent data={dataMetadata} isReorderEnabled={true} />);\n      let instructionText = screen.queryByText(reorderInstructions);\n      expect(instructionText).not.to.be.null;\n\n      // instruction text should not exist when reorder is disabled\n      rerender(<TestComponent data={dataMetadata} />);\n      instructionText = screen.queryByText(reorderInstructions);\n      expect(instructionText).to.be.null;\n    });\n  }\n};\n","import { fireEvent, render, waitFor } from '@testing-library/preact';\nimport userEvent from '@testing-library/user-event';\nimport { expect } from 'chai';\nimport { VNode } from 'preact';\n\nimport { Metadata, SelectionMode } from '../../../UNSAFE_Collection';\nimport { RootEnvironmentProvider } from '../../../UNSAFE_Environment';\nimport type { RootEnvironment } from '../../../UNSAFE_Environment';\nimport { Gridlines } from '../../../UNSAFE_ListView';\nimport { Keys } from '../../../utils/UNSAFE_keys';\nimport { matchTranslationBundle } from '../../../utils/UNSAFE_matchTranslationBundle';\nimport { CollectionGestureContext } from '../../../hooks/PRIVATE_useCollectionGestureContext';\n\nimport { populateData } from './listViewTestFixtures';\nimport type { Employee } from './listViewTestFixtures';\nimport { getContents, getRoot, mouseCheckboxSelection, mouseItemSelection } from './testHelpers';\n\ntype Props<K> = {\n  data: { data: Employee<K>; metadata: Metadata<K> }[];\n  selectedKeys?: Keys<K>;\n  selectionMode?: SelectionMode;\n  gridlines?: Gridlines;\n  onClick?: () => void;\n};\n\ntype TestComponentProps<K extends string | number> = (props: Props<K>) => VNode;\n\nexport const testSelection = (TestComponent: TestComponentProps<any>) => {\n  it('select single - numeric key', async () => {\n    const data = populateData(10, true) as Employee<number>[];\n    const dataMetadata: { data: Employee<number>; metadata: Metadata<number> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(\n      <TestComponent\n        data={dataMetadata}\n        selectionMode=\"single\"\n        onClick={() => {\n          expect(false, 'Click event should not propagate').to.be.true;\n        }}></TestComponent>\n    );\n    const items = await getContents();\n\n    mouseItemSelection(items[3]);\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n    });\n\n    mouseItemSelection(items[5]);\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    mouseItemSelection(items[7]);\n    await waitFor(() => {\n      expect(items[7].getAttribute('aria-selected')).eq('true');\n    });\n  });\n\n  it('select multiple items using shift click', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    // console.log('here');\n    // console.log(list.debug());\n    await waitFor(() => {\n      //TODO: Add a reliable way to use waitFor correctly.JET-63874\n      /* eslint-disable */\n      expect(items[1].getAttribute('aria-selected')).eq('false');\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n      expect(items[6].getAttribute('aria-selected')).eq('false');\n      /* eslint-enable */\n    });\n  }, 3000);\n\n  it('select multiple items using shift space bar', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    fireEvent.keyUp(items[2], { key: ' ' });\n    fireEvent.keyUp(items[5], { key: ' ', shiftKey: true });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('selects multiple items when clicking on Selector checkboxes', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const selected: Keys<string> = { all: false, keys: new Set([data[2].id]) };\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent\n          data={dataMetadata}\n          selectionMode=\"multiple\"\n          selectedKeys={selected}></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('false');\n\n    mouseCheckboxSelection(4);\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n    });\n  });\n\n  it('correctly modifies range selection when using SPACE to select', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    fireEvent.keyUp(items[2], { key: ' ' });\n    fireEvent.keyUp(items[5], { key: ' ', shiftKey: true });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('false');\n\n    // keyboard select to \"toggle\" one item off\n    fireEvent.keyUp(items[3], { key: ' ' });\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n\n    // keyboard select again to \"replace\" with single selection only\n    fireEvent.keyUp(items[3], { key: ' ' });\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('selects single items using space keypress', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    fireEvent.keyUp(items[2], { key: ' ' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    fireEvent.keyUp(items[3], { key: ' ' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  }, 3000);\n\n  it('selects single items using enter keypress (Context value is embedded)', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <CollectionGestureContext.Provider value={'embedded'}>\n          <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n        </CollectionGestureContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    fireEvent.keyUp(items[2], { key: 'Enter' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    fireEvent.keyUp(items[3], { key: 'Enter' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('selects single items using enter keypress (Context value is default)', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <CollectionGestureContext.Provider value={'default'}>\n          <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n        </CollectionGestureContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    fireEvent.keyUp(items[2], { key: 'Enter' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('select multiple items then click on a selected items', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    mouseItemSelection(items[3]);\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('false');\n    });\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[4].getAttribute('aria-selected')).eq('false');\n    });\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('false');\n    });\n  });\n\n  it('select multiple items then shift click on a selected items', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    mouseItemSelection(items[3], { shiftKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[4].getAttribute('aria-selected')).eq('false');\n    });\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('false');\n    });\n  });\n\n  it('select multiple items then metaKey click on a selected items, to select and unselect', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    // first click to deselect\n    mouseItemSelection(items[3], { metaKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('false');\n    });\n    await waitFor(() => {\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    // second click to reselect\n    mouseItemSelection(items[3], { metaKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    // click outside of range should be additive too\n    mouseItemSelection(items[7], { metaKey: true });\n    await waitFor(() => {\n      /* eslint-disable */\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n      expect(items[6].getAttribute('aria-selected')).eq('false');\n      expect(items[7].getAttribute('aria-selected')).eq('true');\n      /* eslint-enable */\n    });\n  }, 3000);\n\n  it('supports multi-select (and deselect) via keyboard arrow keys', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // select items 1-3\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n\n    // deselect 2 and 3 via up-arrow\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // continue up past initial anchor, to select items 0 and 1\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('supports extending mouse initiated range select via arrow keys', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // select items 2-5 via click\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('false');\n    expect(items[7].getAttribute('aria-selected')).eq('false');\n\n    // now extend by two more rows\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('true');\n    expect(items[7].getAttribute('aria-selected')).eq('true');\n\n    // now deselect those via up-arrow\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('false');\n    expect(items[7].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('supports range selection from current item to shift+click item', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + click the 3rd item\n    fireEvent.click(items[2], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('supports range selection from current item to shift+arrow items', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + arrow to the 3rd item\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('supports range selection from current item, shift+click and then shift+click', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + click the 2nd item\n    fireEvent.click(items[1], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // shift + click the 4th item\n    fireEvent.click(items[3], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('supports range selection from current item, shift+click and then shift+arrow  ', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + click the 2nd item\n    fireEvent.click(items[1], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // shift + arrow to the 4th item\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('supports range selection from current item, shift+click and then shift+space', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + click the 2nd item\n    fireEvent.click(items[1], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // shift + space the 4th item\n    fireEvent.keyUp(items[3], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('supports range selection from current item, shift+arrow and then shift+click  ', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + arrow to the 2nd item\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // shift + click the 4th item\n    fireEvent.click(items[3], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('supports range selection from current item, shift+arrow and then shift+arrow  ', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + arrow to the 2nd item\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // arrow to the 3rd item, then shift + arrow to the 4th item\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('supports range selection from current item, shift+arrow and then shift+space', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + arrow to the 2nd item\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // shift + space the 4th item\n    fireEvent.keyUp(items[3], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('supports range selection from current item, shift+space and then shift+space', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + space to select the 1st item\n    fireEvent.keyUp(items[0], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // arrow down to the 3rd item, then shift + space the 3rd item\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyUp(items[2], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('supports range selection shift+space and then shift+space', async () => {\n    const data = populateData(5) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n    mouseItemSelection(items[0]);\n\n    // shift + space to select the 2nd item\n    fireEvent.keyUp(items[2], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n    expect(items[4].getAttribute('aria-selected')).eq('false');\n\n    // shift + space the last item\n    fireEvent.keyUp(items[4], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('supports range selection and deselect selected item by shift+space', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n    mouseItemSelection(items[0]);\n\n    // shift + space to select the 2nd item\n    fireEvent.keyUp(items[2], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n\n    fireEvent.keyUp(items[1], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('supports range selection backward shift+space and then shift+space', async () => {\n    const data = populateData(5) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n    mouseItemSelection(items[2]);\n\n    // shift + space to select the 1st item\n    fireEvent.keyUp(items[0], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n    expect(items[4].getAttribute('aria-selected')).eq('false');\n\n    // shift + space the last item\n    fireEvent.keyUp(items[4], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('supports range selection backward shift+click and then shift+space', async () => {\n    const data = populateData(5) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n    mouseItemSelection(items[2]);\n\n    // shift + click to select the 1st item\n    mouseItemSelection(items[0], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n    expect(items[4].getAttribute('aria-selected')).eq('false');\n\n    // shift + space the last item\n    fireEvent.keyUp(items[4], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('supports range selection backward shift+arrow and then shift+space', async () => {\n    const data = populateData(5) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n    mouseItemSelection(items[2]);\n\n    // shift + arrow to select the 1st item\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n    expect(items[4].getAttribute('aria-selected')).eq('false');\n\n    // shift + space the last item\n    fireEvent.keyUp(items[4], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n  });\n};\n"],"names":["TestComponent","it","async","dataMetadata","populateData","map","data","metadata","key","id","render","_jsx","grid","getRoot","expect","getAttribute","eq","items","getItems","length","cells","getContents","selectionMode","locale","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime2__","env","RootEnvironmentProvider","environment","jsx","__variableDynamicImportRuntime0__","children","contextMenuConfig","itemsRenderer","context","_jsxs","jsxs","_Fragment","Fragment","MenuItem","label","firstItem","fireEvent","contextMenu","clientX","clientY","currentTarget","menu","getMenuItemByRole","menuItems","getAllMenuItemsByRole","menuItemGotByLabel","getLabel","not","null","equals","__variableDynamicImportRuntime1__","click","keyDown","shiftKey","elem","screen","findByText","textContent","userEvent","pointer","target","offset","keys","queryByRole","jest","deviceType","platform","getClientHints","timeout","ms","Promise","resolve","setTimeout","touch1","Touch","identifier","pageX","pageY","touchStart","timeStamp","touches","isTopGridlineVisible","item","className","indexOf","isBottomGridlineVisible","isGridlineHidden","to","be","true","gridlines","bottom","false","top","isMetadataEqual","metadata1","metadata2","isFocusHighlight","count","onItemAction","detail","CollectionGestureContext","Provider","value","initialKey","currentItemVariant","hasAttribute","undefined","dataset","waitFor","scrollTop","greaterThanOrEqual","tab","suggestion","enable","suggestions","filter","d","unshift","sparkle","querySelector","firstElementChild","getSparkle","sparkleHeight","offsetHeight","queryByTestId","isReorderEnabled","firstItemDragIcon","thirdItemDragIcon","fireDragAndDropEvent","updatedThirdItem","equal","list","mouseItemSelection","keyboardReorder","reorderedItem","startIndex","lastItem","keyPressed","accControlKey","accCommandKey","reorderInstructions","accReorderInstructions","rerender","instructionText","queryByText","style","xUnits","scrollPositionOverride","position","getByText","exist","onClick","keyUp","selected","all","selectedKeys","mouseCheckboxSelection","__variableDynamicImportRuntime3__","__variableDynamicImportRuntime4__","__variableDynamicImportRuntime5__","__variableDynamicImportRuntime6__","__variableDynamicImportRuntime7__","__variableDynamicImportRuntime8__","__variableDynamicImportRuntime9__","metaKey","__variableDynamicImportRuntime10__","__variableDynamicImportRuntime11__","__variableDynamicImportRuntime12__","matches","__variableDynamicImportRuntime13__","__variableDynamicImportRuntime14__","__variableDynamicImportRuntime15__","__variableDynamicImportRuntime16__","__variableDynamicImportRuntime17__","__variableDynamicImportRuntime18__","__variableDynamicImportRuntime19__","__variableDynamicImportRuntime20__","__variableDynamicImportRuntime21__","__variableDynamicImportRuntime22__","__variableDynamicImportRuntime23__","__variableDynamicImportRuntime24__","__variableDynamicImportRuntime25__"],"mappings":"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"}
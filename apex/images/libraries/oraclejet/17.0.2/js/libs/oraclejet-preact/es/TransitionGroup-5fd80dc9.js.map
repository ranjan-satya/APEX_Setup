{"version":3,"file":"TransitionGroup-5fd80dc9.js","sources":["../../src/PRIVATE_TransitionGroup/TransitionUtils.ts","../../src/PRIVATE_TransitionGroup/TransitionGroup.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { cloneElement, VNode } from 'preact';\nimport { TransitionProps } from './Transition';\n\nexport type ChildKey = number | string;\nexport type ChildMapping = Map<string | number, VNode<TransitionProps>>;\nexport type ChildrenRecord<T = any> = {\n  [Key in number | string | any]: T[];\n};\n\n/**\n * @classdesc\n * A utility class consisting of helper functions for handling transitions\n * related operations.\n */\nexport class TransitionUtils {\n  /**\n   * Creates a map of the children array with the calculated in prop\n   *\n   * @param children The newly received children\n   * @param prevChildMapping The previous child mapping\n   * @returns the newly created child mapping\n   */\n  public static getChildMapping(\n    children: VNode<TransitionProps>[],\n    prevChildMapping: ChildMapping = new Map(),\n    onExited: (child: VNode<TransitionProps>, node: Element, key?: ChildKey) => void = () => {}\n  ): ChildMapping {\n    // A symbol to store trailing children\n    const TRAILING = Symbol();\n    let mappedDeletions = {} as ChildrenRecord;\n\n    if (prevChildMapping.size !== 0) {\n      // If previous children exists, get the mapped deleted children\n      mappedDeletions = TransitionUtils._getMappedDeletions(children, prevChildMapping, TRAILING);\n    }\n\n    // Create a new Map with the new children along with the deletions inserted in their\n    // respective positions\n    const mergedChildrenMap: ChildMapping = children.reduce<ChildMapping>(\n      (accumulator, currentChild) => {\n        if (mappedDeletions[currentChild.key]) {\n          // There are keys from prev that are deleted before the current\n          // next key, so add them first\n          const deletedChildren = mappedDeletions[currentChild.key];\n          for (const key of deletedChildren) {\n            const previousChild = prevChildMapping.get(key);\n            // Set the in property to false, as this is children is removed\n            accumulator.set(key, cloneElement(previousChild!, { in: false }));\n          }\n          // Then add the current key. Do not change the 'in' or 'onExited' properties as this is a\n          // retained child.\n          const previousChild = prevChildMapping.get(currentChild.key);\n          accumulator.set(\n            currentChild.key,\n            cloneElement(currentChild, {\n              onExited: previousChild!.props.onExited,\n              in: previousChild!.props.in\n            })\n          );\n        } else {\n          // This is a new children. Set the in property to true\n          const newChild = cloneElement(currentChild, {\n            // bind the original child so that the original callbacks can be\n            // called in the onExited callback from the argument.\n            onExited: onExited.bind(null, currentChild),\n            in: true\n          });\n          accumulator.set(currentChild.key, newChild);\n        }\n\n        return accumulator;\n      },\n      new Map() as ChildMapping\n    );\n\n    // Finally add any trailing deleted children present in the mappedDeletions[TRAILING]\n    for (const key of mappedDeletions[TRAILING as any] || []) {\n      const previousChild = prevChildMapping.get(key);\n      // Set the in property to false, as this is children is removed\n      mergedChildrenMap.set(key, cloneElement(previousChild!, { in: false }));\n    }\n\n    // Finally return the merged children map\n    return mergedChildrenMap;\n  }\n\n  ////////////////////////////\n  // Private helper methods //\n  ////////////////////////////\n\n  /**\n   * Creates a map of deleted children wrt to the keys in the new data.\n   *\n   * @param children The newly received children\n   * @param prevChildMapping The previous child mapping\n   * @param TRAILING A unique symbol to be used for storing the trailing children\n   * @returns A map containing deleted children\n   */\n  private static _getMappedDeletions(\n    children: VNode<TransitionProps>[],\n    prevChildMapping: ChildMapping,\n    TRAILING: symbol\n  ): ChildrenRecord<ChildKey> {\n    // Create a set with keys of next children\n    const nextChildrenKeys = new Set(children.map((children) => children.key));\n\n    return [...prevChildMapping.keys()].reduce<ChildrenRecord<ChildKey>>(\n      (accumulator, currentKey) => {\n        if (nextChildrenKeys.has(currentKey)) {\n          // We have reached a point where the closest prevKey that\n          // is in the next, so if there are any pending keys add them\n          // to this key in mappedDeletions so that the pending keys will\n          // be added before the current next key\n          accumulator[currentKey] = accumulator[TRAILING as any];\n          delete accumulator[TRAILING as any];\n        } else {\n          // If key is not found in next, then add it to the trailing keys.\n          const trailingChildren = accumulator[TRAILING as any]\n            ? [...accumulator[TRAILING as any], currentKey]\n            : [currentKey];\n          accumulator[TRAILING as any] = trailingChildren;\n        }\n\n        return accumulator;\n      },\n      {} as ChildrenRecord<ChildKey>\n    );\n  }\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Component, ComponentChild, ComponentType, VNode } from 'preact';\nimport { TransitionProps } from './Transition';\nimport { ChildKey, ChildMapping, TransitionUtils } from './TransitionUtils';\n\n/**\n * Props for the TransitionGroup Component\n */\ntype TransitionGroupProps = {\n  /**\n   * @description\n   * <TransitionGroup> renders a '<div>' by default. You can change this\n   * behavior by providing a different ComponentType value to this prop.\n   */\n  elementType?: 'div' | ComponentType;\n\n  /**\n   * @description\n   * Children component should be a collection of TransitionComponent. The child\n   * components should be a Transition Component.\n   */\n  children: VNode<TransitionProps>[];\n};\n\n/**\n * State for the TransitionGroup component\n */\ntype State = {\n  childMapping?: ChildMapping;\n  handleExited?: (child: VNode<TransitionProps>, node: Element, key?: ChildKey) => void;\n};\n\n/**\n * @classdesc\n * The <TransitionGroup> component manages a set of components that involves animations.\n * This component does not handle any animation, rather just a state machine that manages\n * the mounting and unmounting of the components over the time. The actual animation needs\n * to be handled by the content component.\n *\n * Consider the example below:\n * <TransitionGroup>\n *   {\n *      messages.map(message => {\n *        <Transition key={message.key}>\n *          <Message\n *            type={type}\n *            index={index}\n *            item={data.message}\n *            onOjClose={onOjClose}\n *          />\n *        </Transition>\n *      });\n *   }\n * </TransitionGroup>\n * As the messages are added/removed, the TransitionGroup Component automatically\n * toggles the 'in' prop of the Transition Component.\n *\n * @ignore\n */\nexport class TransitionGroup extends Component<TransitionGroupProps, State> {\n  static defaultProps: Partial<TransitionGroupProps> = {\n    elementType: 'div'\n  };\n\n  /**\n   * Derives state from the current props\n   *\n   * @param props The current Props that will be used to get the new state\n   * @param state The current state\n   *\n   * @returns The new state\n   */\n  static getDerivedStateFromProps(\n    props: Readonly<TransitionGroupProps>,\n    state: Readonly<State>\n  ): State | null {\n    const { childMapping, handleExited } = state;\n    return {\n      childMapping: TransitionUtils.getChildMapping(props.children, childMapping, handleExited)\n    };\n  }\n\n  private _mounted: boolean;\n\n  ////////////////////////////////////////////////////////////////////////\n  // Handler functions are created as members to have them 'this' bound //\n  ////////////////////////////////////////////////////////////////////////\n\n  /**\n   * Handles when a transition component exits\n   *\n   * @param child The child instance that exited\n   * @param node The corresponding transition element\n   * @param metadata The metadata of the corresponding transition component\n   */\n  private readonly _handleExited = (\n    child: VNode<TransitionProps>,\n    node?: Element,\n    metadata?: any\n  ) => {\n    const { children } = this.props;\n    // get the child mapping for the current children\n    const currentChildMapping = TransitionUtils.getChildMapping(children);\n\n    // if the exited child is added again, do nothing here\n    if (currentChildMapping.has(child.key)) return;\n\n    // The child component has exited, call the original onExited callback\n    child.props.onExited?.(node, metadata);\n\n    // Check if this component is still mounted, if so update the state\n    if (this._mounted) {\n      this.setState((state: Readonly<State>): Partial<State> => {\n        const childMapping = new Map(state.childMapping!);\n        // delete the exited child\n        childMapping.delete(child.key);\n        return { childMapping };\n      });\n    }\n  };\n\n  ///////////////////////////\n  // Handler functions end //\n  ///////////////////////////\n\n  /**\n   * Instantiates Component\n   *\n   * @param props The component properties\n   */\n  constructor(props: Readonly<TransitionGroupProps>) {\n    super(props);\n\n    this.state = {\n      childMapping: undefined,\n      handleExited: this._handleExited\n    };\n    this._mounted = false;\n  }\n\n  //////////////////////////////////////\n  // Component Life Cycle Hooks Start //\n  //////////////////////////////////////\n\n  /**\n   * Life cycle hook that gets called when the component is mounted on to\n   * the DOM\n   */\n  componentDidMount() {\n    this._mounted = true;\n  }\n\n  /**\n   * Life cycle hook that gets called when the component is unmounted from\n   * the DOM\n   */\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n\n  ////////////////////////////////////\n  // Component Life Cycle Hooks End //\n  ////////////////////////////////////\n\n  /**\n   * Renders the transition components\n   */\n  render(): ComponentChild {\n    const WrapperComponent = this.props.elementType!;\n    const { childMapping } = this.state;\n    const children = [...childMapping!.values()];\n    return <WrapperComponent>{children}</WrapperComponent>;\n  }\n}\n"],"names":["_jsx"],"mappings":"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"}
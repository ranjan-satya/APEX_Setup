{"version":3,"file":"SelectMultiple-fabd883c.js","sources":["../../src/UNSAFE_SelectMultiple/SelectMultipleDesktopDropdown.tsx","../../src/UNSAFE_SelectMultiple/SelectedValuesCount.tsx","../../src/UNSAFE_SelectMultiple/SelectMultipleField.tsx","../../src/UNSAFE_SelectMultiple/TextTag.tsx","../../src/UNSAFE_SelectMultiple/TextTagList.tsx","../../src/UNSAFE_SelectMultiple/SelectMultipleFieldInput.tsx","../../src/UNSAFE_SelectMultiple/MobileDropdownFooter.tsx","../../src/UNSAFE_SelectMultiple/useDisplayValues.ts","../../src/UNSAFE_SelectMultiple/useSelectedOnlyData.ts","../../src/UNSAFE_SelectMultiple/useMobileDropdown.ts","../../src/UNSAFE_SelectMultiple/SelectMultipleMobileDropdown.tsx","../../src/UNSAFE_SelectMultiple/useSelectMultiple.ts","../../src/UNSAFE_SelectMultiple/SelectMultiple.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps } from 'preact';\nimport { Ref } from 'preact/hooks';\nimport {\n  DefaultList,\n  Dropdown,\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  LinkItem\n} from '../PRIVATE_SelectCommon';\nimport { CurrentKeyDetail, DataState, SelectionDetail } from '../UNSAFE_Collection';\nimport { InlineUserAssistance, UserAssistanceDensityType } from '../UNSAFE_UserAssistance';\nimport { PositionData } from '../UNSAFE_Floating';\nimport { VirtualizedListView } from '../UNSAFE_VirtualizedListView';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { ItemRendererProps } from './SelectMultiple.types';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = {\n  assistiveText?: string;\n  currentKey?: K;\n  data?: DataState<K, D> | null;\n  dropdownId: string;\n  dropdownRef: Ref<HTMLDivElement>;\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  isAddToListShown?: boolean;\n  isDisabled?: boolean;\n  isDropdownAbove: boolean;\n  isEmptyResults: boolean;\n  isOpen: boolean;\n  isReadonly?: false;\n  isSelectedOnlyView: boolean;\n  isUserFiltering: boolean;\n  itemRenderer?: (itemRendererProps: ItemRendererProps<K, D>) => ComponentChildren;\n  itemText: ItemTextType<K, D>;\n  label: string;\n  mainFieldRef: Ref<HTMLDivElement>;\n  searchText?: string;\n  selectedKeys?: Set<K>;\n  userAssistanceDensity?: UserAssistanceDensityType;\n  onAddToListAction?: () => void;\n  onAutoDismiss: ((event?: Event | undefined) => void) | ((event?: Event | undefined) => void);\n  onCurrentKeyChange?: (detail: CurrentKeyDetail<K>) => void;\n  onLoadRange?: ComponentProps<typeof VirtualizedListView>['onLoadRange'];\n  onPosition: (data: PositionData) => void;\n  onSelectionChange?: (detail: SelectionDetail<K>) => void;\n};\n\nexport function SelectMultipleDesktopDropdown<\n  K extends string | number,\n  D extends Record<string, any>\n>({\n  assistiveText,\n  currentKey,\n  data,\n  dropdownId,\n  dropdownRef,\n  helpSourceLink,\n  helpSourceText,\n  isAddToListShown,\n  isDisabled,\n  isDropdownAbove,\n  isEmptyResults,\n  isOpen,\n  isReadonly,\n  isSelectedOnlyView,\n  isUserFiltering,\n  itemRenderer,\n  itemText,\n  label,\n  mainFieldRef,\n  searchText,\n  selectedKeys,\n  userAssistanceDensity,\n  onAddToListAction,\n  onAutoDismiss,\n  onCurrentKeyChange,\n  onLoadRange,\n  onPosition,\n  onSelectionChange\n}: Props<K, D>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const dropdownInlineUserAssistance =\n    isOpen &&\n    !isDropdownAbove &&\n    !isDisabled &&\n    !isReadonly &&\n    (assistiveText || helpSourceLink) &&\n    (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n      <DropdownUserAssistance\n        assistiveText={assistiveText}\n        fieldLabel={label}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        userAssistanceDensity={userAssistanceDensity}\n      />\n    ) : undefined;\n\n  const dropdownListContent = isEmptyResults ? (\n    isAddToListShown ? undefined : (\n      <EmptyResults />\n    )\n  ) : (\n    <DefaultList<K, D>\n      aria-label={label ?? ''}\n      currentItemVariant=\"highlight\"\n      currentKey={currentKey}\n      data={data}\n      itemRenderer={itemRenderer}\n      itemText={itemText}\n      searchText={isSelectedOnlyView ? undefined : isUserFiltering ? searchText : undefined}\n      selectedKeys={selectedKeys}\n      selectionMode=\"multiple\"\n      onCurrentKeyChange={onCurrentKeyChange}\n      onLoadRange={onLoadRange}\n      onSelectionChange={onSelectionChange}\n    />\n  );\n\n  const addToListContent = isAddToListShown ? (\n    <LinkItem isHighlighted={isEmptyResults} onAction={onAddToListAction}>\n      {translations.select_addToList()}\n    </LinkItem>\n  ) : undefined;\n\n  return (\n    <Dropdown\n      dropdownRef={dropdownRef}\n      id={dropdownId}\n      isOpen={isOpen}\n      anchorRef={mainFieldRef}\n      onAutoDismiss={onAutoDismiss}\n      onPosition={onPosition}>\n      <DropdownList\n        hasBottomGap={dropdownInlineUserAssistance === undefined}\n        isLoading={data === null}>\n        {dropdownListContent}\n        {addToListContent}\n      </DropdownList>\n      {dropdownInlineUserAssistance}\n    </Dropdown>\n  );\n}\n","import { ComponentProps } from 'preact';\nimport { Chip } from '../UNSAFE_Chip';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { selectedValueCountStyles } from './themes/SelectedValuesCountStyles.css';\n\ntype PickedPropsFromChip = Pick<\n  ComponentProps<typeof Chip>,\n  'aria-label' | 'isDisabled' | 'isSelected' | 'onToggle'\n>;\n\ntype Props = PickedPropsFromChip & {\n  count?: number;\n  onKeyDown?: (event: KeyboardEvent) => void;\n  onKeyUp?: (event: KeyboardEvent) => void;\n  onMouseDown?: (event: MouseEvent) => void;\n};\n\n// This component renders a badge showing the number of selected values\nexport function SelectedValuesCount({\n  'aria-label': ariaLabel,\n  count = 0,\n  onKeyDown,\n  onKeyUp,\n  onMouseDown,\n  ...passThroughProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const instructions = translations.selectMultiple_showSelectedValues();\n  const accLabel = ariaLabel ? `${ariaLabel}. ` : '';\n\n  const ninetyNinePlus = translations.selectMultiple_countPlus({ COUNT: `99` });\n  // The Chip shows the number of values selected or 99+ if the number is over 99.\n  const chipCount = count > 99 ? `${ninetyNinePlus}` : `${count}`;\n  // The screenreader will hear what the number of selected values is along with instructions\n  // like Click to see the full list.\n  const valuesSelectedText = translations.selectMultiple_valuesSelected({\n    VALUE_COUNT: `${count}`\n  });\n  const label = `${accLabel}${valuesSelectedText} ${instructions}`;\n  return (\n    <div\n      class={selectedValueCountStyles.base}\n      onKeyDown={onKeyDown}\n      onKeyUp={onKeyUp}\n      onMouseDown={onMouseDown}>\n      <Chip aria-label={label} {...passThroughProps}>\n        {chipCount}\n      </Chip>\n    </div>\n  );\n}\n","import { ComponentChildren, ComponentProps } from 'preact';\nimport { DropdownArrow } from '../PRIVATE_SelectCommon';\nimport { Flex } from '../UNSAFE_Flex';\nimport { TextField } from '../UNSAFE_TextField';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { IconButton } from '../UNSAFE_IconButton';\nimport { NavLeft } from '../UNSAFE_RedwoodIcons/NavLeft';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { CancelS } from '../UNSAFE_RedwoodIcons/CancelS';\nimport { LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\n\ntype TextFieldProps = ComponentProps<typeof TextField>;\ntype PassThroughTextFieldProps = TestIdProps &\n  Pick<\n    TextFieldProps,\n    | 'compactUserAssistance'\n    | 'contentVariant'\n    | 'id'\n    | 'inlineUserAssistance'\n    | 'label'\n    | 'labelEdge'\n    | 'labelStartWidth'\n    | 'mainFieldRef'\n    | 'onBlur'\n    | 'onFocus'\n    | 'onMouseDown'\n    | 'statusVariant'\n    | 'styleVariant'\n  >;\n\ntype DropdownArrowProps = ComponentProps<typeof DropdownArrow>;\ntype IconButtonProps = ComponentProps<typeof IconButton>;\ntype SelectedValuesCountProps = ComponentProps<typeof SelectedValuesCount>;\n\ntype Props = PassThroughTextFieldProps & {\n  children?: ComponentChildren;\n  columnSpan?: LayoutColumnSpan;\n  fieldLabel?: string;\n  hasInsideLabel?: boolean;\n  isBackButtonShown?: boolean;\n  isClearButtonShown?: boolean;\n  isDropdownArrowShown?: boolean;\n  isDropdownSelectedOnlyView?: boolean;\n  isSelectedValuesCountShown?: boolean;\n  selectedValuesCount?: number;\n  onBackButtonClick?: IconButtonProps['onAction'];\n  onClearButtonClick?: IconButtonProps['onAction'];\n  onDropdownArrowClick?: DropdownArrowProps['onClick'];\n  onSelectedValuesCountKeyDown?: SelectedValuesCountProps['onKeyDown'];\n  onSelectedValuesCountKeyUp?: SelectedValuesCountProps['onKeyUp'];\n  onSelectedValuesCountMouseDown?: SelectedValuesCountProps['onMouseDown'];\n  onSelectedValuesCountToggle?: SelectedValuesCountProps['onToggle'];\n};\n\nexport function SelectMultipleField({\n  children,\n  columnSpan,\n  fieldLabel,\n  hasInsideLabel,\n  isBackButtonShown,\n  isClearButtonShown,\n  isDropdownArrowShown,\n  isDropdownSelectedOnlyView,\n  isSelectedValuesCountShown,\n  selectedValuesCount,\n  onBackButtonClick,\n  onClearButtonClick,\n  onDropdownArrowClick,\n  onSelectedValuesCountKeyDown,\n  onSelectedValuesCountKeyUp,\n  onSelectedValuesCountMouseDown,\n  onSelectedValuesCountToggle,\n  ...passThroughTextFieldProps\n}: Props) {\n  const { isDisabled, isLoading } = useFormFieldContext();\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const backButton = isBackButtonShown ? (\n    <IconButton\n      aria-label={translations.selectMultiple_back()}\n      size=\"xs\"\n      variant=\"ghost\"\n      onAction={onBackButtonClick}>\n      <NavLeft />\n    </IconButton>\n  ) : null;\n\n  const clearButton = isClearButtonShown ? (\n    <IconButton\n      aria-label={translations.formControl_clear()}\n      size=\"sm\"\n      variant=\"ghost\"\n      onAction={onClearButtonClick}>\n      <CancelS />\n    </IconButton>\n  ) : null;\n\n  const dropdownArrow = isDropdownArrowShown ? (\n    <DropdownArrow\n      isDisabled={isDisabled}\n      onClick={onDropdownArrowClick}\n      testId={`${passThroughTextFieldProps.testId}_dropdownarrow`}\n    />\n  ) : null;\n\n  const endContent = isLoading ? undefined : !isSelectedValuesCountShown ? (\n    <>\n      {isClearButtonShown && clearButton}\n      {isDropdownArrowShown && dropdownArrow}\n    </>\n  ) : (\n    <Flex align=\"center\" justify=\"center\" gap={[0, '1x']}>\n      <SelectedValuesCount\n        aria-label={fieldLabel}\n        count={selectedValuesCount}\n        isDisabled={isDisabled}\n        isSelected={isDropdownSelectedOnlyView}\n        onKeyDown={onSelectedValuesCountKeyDown}\n        onKeyUp={onSelectedValuesCountKeyUp}\n        onMouseDown={onSelectedValuesCountMouseDown}\n        onToggle={onSelectedValuesCountToggle}\n      />\n      {isClearButtonShown && clearButton}\n      {isDropdownArrowShown && dropdownArrow}\n    </Flex>\n  );\n\n  return (\n    <TextField\n      columnSpan={columnSpan}\n      startContent={isBackButtonShown && backButton}\n      mainContent={children}\n      endContent={endContent}\n      {...passThroughTextFieldProps}\n    />\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useCallback, useEffect, useRef } from 'preact/hooks';\nimport { preventDefault } from '../PRIVATE_SelectCommon';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { IconButton } from '../UNSAFE_IconButton';\nimport { Text } from '../UNSAFE_Text';\nimport { CloseIcon } from '../PRIVATE_ThemedIcons/CloseIcon';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { TabbableModeContext } from '../hooks/UNSAFE_useTabbableMode';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { isBackspaceOrDelete } from '../utils/PRIVATE_keyboardUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { textTagStyles } from './themes/TextTagStyles.css';\n\n/**\n * Props for the TextTag component\n */\ntype Props<V> = {\n  /**\n   * The label for the text tag\n   */\n  children: string;\n\n  /**\n   * Specifies whether to show the remove icon\n   */\n  removeIcon?: 'always' | 'never';\n\n  /**\n   * Indicates whether the component is focused\n   */\n  isFocused?: boolean;\n\n  /**\n   * Specifies if the TextTag component is selected\n   */\n  isSelected?: boolean;\n\n  /**\n   * Callback to be invoked when Delete/Backspace is pressed\n   */\n  onRemoveAction?: (value: V) => void;\n\n  /**\n   * Callback to be invoked when clicking on the text tag\n   */\n  onSelect?: (value: V) => void;\n\n  /**\n   * Callback to be invoked when the remove icon is clicked\n   */\n  onRemoveIconClick?: (value: V) => void;\n\n  /**\n   * The value of the text tag\n   */\n  value: V;\n};\n\n/**\n * The component for rendering selectable/removable TextTag\n *\n * @param param0 The props for the TextTag component\n */\nexport function TextTag<V>({\n  children,\n  removeIcon = 'never',\n  isSelected = false,\n  onRemoveAction,\n  onSelect,\n  onRemoveIconClick,\n  isFocused,\n  value\n}: Props<V>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const spanRef = useRef<HTMLSpanElement>(null);\n  const navigationTextId = useId();\n\n  const rootClasses = classNames([textTagStyles.base, isSelected && textTagStyles.selected]);\n\n  const onRemoveActionCallback = useCallback(() => {\n    onRemoveAction?.(value);\n  }, [value, onRemoveAction]);\n  const onSelectCallback = useCallback(() => {\n    onSelect?.(value);\n  }, [value, onSelect]);\n  const onRemoveIconClickCallback = useCallback(() => {\n    onRemoveIconClick?.(value);\n  }, [value, onRemoveIconClick]);\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (isBackspaceOrDelete(event)) {\n        onRemoveActionCallback();\n        return;\n      }\n    },\n    [onRemoveActionCallback]\n  );\n\n  useEffect(() => {\n    if (isFocused && isSelected) {\n      spanRef.current?.focus();\n      spanRef.current?.scrollIntoView({ block: 'nearest' });\n    }\n  }, [isFocused, isSelected]);\n\n  return (\n    <>\n      <span\n        ref={spanRef}\n        class={rootClasses}\n        tabIndex={-1}\n        onClick={onSelectCallback}\n        onKeyUp={onKeyUp}\n        // Kill mouse down event to prevent focus transfer done by the parent container.\n        // We will programmatically take back focus in response to the onClick event.\n        onMouseDown={preventDefault}\n        role=\"option\"\n        aria-describedby={navigationTextId}\n        aria-selected={isSelected ? 'true' : 'false'}>\n        <Text size=\"md\" variant=\"inherit\">\n          {children}\n        </Text>\n        {removeIcon === 'always' && (\n          <TabbableModeContext.Provider value={{ isTabbable: false }}>\n            <IconButton size=\"xs\" variant=\"ghost\" onAction={onRemoveIconClickCallback}>\n              <CloseIcon />\n            </IconButton>\n          </TabbableModeContext.Provider>\n        )}\n      </span>\n      <HiddenAccessible id={navigationTextId}>\n        {translations.selectMultiple_removeSelectedTagInstructionText()}\n      </HiddenAccessible>\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback, useEffect, useImperativeHandle, useRef, useState } from 'preact/hooks';\nimport { useFocusWithin } from '../hooks/UNSAFE_useFocusWithin';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { isSelectAll } from '../utils/PRIVATE_keyboardUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { DimensionProps, dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { TextTag } from './TextTag';\nimport { textTagListStyles } from './themes/TextTagListStyles.css';\n\n/**\n * Data structure of the text tag item\n */\ntype TextTagItem<V> = {\n  label: string;\n  value: V;\n};\n\n/**\n * Type of the ref handle of the component\n */\ntype TextTagListHandle = {\n  /**\n   * Focuses the text tag container\n   */\n  focus: () => void;\n\n  /**\n   * Blurs the text tag container\n   */\n  blur: () => void;\n};\n\n/**\n * Supported style props\n */\nconst supportedDimensions = ['maxWidth'] as const;\ntype SupportedDimensions = (typeof supportedDimensions)[number];\ntype StyleProps = Pick<DimensionProps, SupportedDimensions>;\n\n/**\n * Props for the TextTag component\n */\ntype Props<V> = StyleProps & {\n  /**\n   * Specifies accessible screen reader text.\n   */\n  'aria-label'?: string;\n\n  /**\n   * An array of objects which is used to stamp out the TextTag components\n   */\n  data: TextTagItem<V>[];\n\n  /**\n   * Flag to indicate if the label is inside the container\n   * TODO: Handle this in a more generic way if/when we make this component generic\n   */\n  hasInsideLabel?: boolean;\n\n  /**\n   * Specifies whether to show the remove icon in the TextTag components\n   */\n  removeIcon?: 'always' | 'never';\n\n  /**\n   * A callback function to be invoked when the component wants to exit the navigation.\n   * This happens when one presses Right arrow after reaching the end of the list (or Left\n   * arrow in RTL mode).\n   */\n  onExitNavigation?: () => void;\n\n  /**\n   * A callback function to be invoked when one or more text tags are removed\n   */\n  onRemove?: (items: V[]) => void;\n};\n\n/**\n * Setting up interpolations\n */\nconst supportedInterpolations = Array.from(supportedDimensions, (x) => dimensionInterpolations[x]);\nconst styleInterpolations = mergeInterpolations<StyleProps>(supportedInterpolations);\n\n/**\n * TextTagList component for rendering the collection of TextTags as well\n * as managing the navigation.\n *\n * @param param0 The props for the TextTagList component\n * @param ref The ref for the component\n */\nfunction _TextTagList<V>(props: Props<V>, ref: Ref<TextTagListHandle> = () => {}) {\n  // destructure props\n  const {\n    'aria-label': ariaLabel,\n    data,\n    hasInsideLabel = false,\n    removeIcon = 'never',\n    onExitNavigation,\n    onRemove\n  } = props;\n\n  // ref for setting the scroll position for the div\n  const divRef = useRef<HTMLDivElement>(null);\n\n  // Internal state for storing the current selected tags\n  const [selectedTags, setSelectedTags] = useState<V[]>([]);\n\n  // The navigation of focus will depend on the reading direction, so we need to\n  // get the current reading direction\n  const { direction } = useUser();\n\n  // Create a ref for maintaining the current selected tag. This is used for\n  // determining which tag needs to be selected next when pressing ArrowLeft or\n  // ArrowRight.\n  const currentSelectedTagIndex = useRef(-1);\n  // Create a ref that holds the last tag which is needed when receiving focus\n  // programmatically.\n  const lastTag = data.at(-1)?.value;\n  const lastTagMeta = useRef({ value: lastTag, index: data.length - 1 });\n  lastTagMeta.current = { value: lastTag, index: data.length - 1 };\n\n  // A function to select the tag at the given index\n  const selectTagAtIndex = useCallback(\n    (index: number) => {\n      const key = data.at(index)?.value;\n      if (key == null) return;\n      setSelectedTags([key]);\n    },\n    [data] // setSelectedTags is stable and not needed in dep array\n  );\n  // A function to clear the selection\n  const clearSelection = useCallback(() => {\n    setSelectedTags((previousSelectedTags) => {\n      currentSelectedTagIndex.current = -1;\n      return previousSelectedTags.length ? [] : previousSelectedTags;\n    });\n  }, []); // setSelectedTags is stable and not needed in dep array\n\n  // Handle the remove & delete events from the tags\n  const onTagRemoveIconClick = useCallback(\n    (value: V) => {\n      // on remove icon click we only need to remove the tag that\n      // invoked the event\n      onRemove?.([value]);\n      onExitNavigation?.();\n      // Firefox & Safari are not calling onBlur when focusing out of the\n      // tag list through onExitNavigation, so clear the selections explicitly\n      // here.\n      clearSelection();\n    },\n    [clearSelection, onExitNavigation, onRemove]\n  );\n  const onTagRemoveAction = useCallback(\n    (value: V) => {\n      // on delete action we need to remove the tag that invoked the delete action\n      // as well as the selected tags.\n      const valuesToRemove = [...selectedTags];\n      if (!selectedTags.includes(value)) {\n        valuesToRemove.push(value);\n      }\n      onRemove?.(valuesToRemove);\n      onExitNavigation?.();\n      // Firefox & Safari are not calling onBlur when focusing out of the\n      // tag list through onExitNavigation, so clear the selections explicitly\n      // here.\n      clearSelection();\n    },\n    [selectedTags, clearSelection, onExitNavigation, onRemove]\n  );\n\n  // Handle the select event from the tags\n  const onTagSelect = useCallback(\n    (value: V) => {\n      setSelectedTags([value]);\n      currentSelectedTagIndex.current = data.findIndex((tag) => tag.value === value);\n    },\n    [data, setSelectedTags]\n  );\n\n  // Handle keyDown event on the tags container\n  const onTagKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (data.length === 0) return;\n      // Move towards the beginning of the list when pressing\n      // Left arrow (or Right arrow in rtl).\n      if (\n        (direction === 'ltr' && event.code === 'ArrowLeft') ||\n        (direction === 'rtl' && event.code === 'ArrowRight')\n      ) {\n        if (currentSelectedTagIndex.current === 0) return;\n        currentSelectedTagIndex.current -= 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // Move towards the end of the list when pressing\n      // Right arrow (or Left arrow in rtl). If at the end,\n      // invoke onExitNavigation.\n      if (\n        (direction === 'ltr' && event.code === 'ArrowRight') ||\n        (direction === 'rtl' && event.code === 'ArrowLeft')\n      ) {\n        if (currentSelectedTagIndex.current === data.length - 1) {\n          // We have reached the end, so exit navigation\n          onExitNavigation?.();\n          return;\n        }\n        currentSelectedTagIndex.current += 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // When pressing the Home key, move the focus to the first tag\n      if (event.code === 'Home') {\n        currentSelectedTagIndex.current = 0;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // When pressing the End key, move the focus to the last tag\n      if (event.code === 'End') {\n        currentSelectedTagIndex.current = data.length - 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // If it is a Select All event, then select all the tags and do\n      // not move the focus\n      if (isSelectAll(event)) {\n        setSelectedTags(data.map((tag) => tag.value));\n        // prevent default to prevent selection of the whole screen\n        event.preventDefault();\n        return;\n      }\n    },\n    [data, direction, onExitNavigation, selectTagAtIndex, setSelectedTags]\n  );\n\n  const handleOnFocus = useCallback(() => {\n    setSelectedTags((previousSelectedTags) => {\n      // select the tag only if there are no current selected tags\n      // and there is data\n      if (previousSelectedTags.length || lastTagMeta.current.value === undefined)\n        return previousSelectedTags;\n\n      currentSelectedTagIndex.current = lastTagMeta.current.index;\n      return [lastTagMeta.current.value];\n    });\n  }, []); // setSelectedTags is stable and not needed in the dep array\n  const handleOnBlur = useCallback(() => {\n    clearSelection();\n  }, [clearSelection]);\n\n  // When blurring out of the component, remove all selections\n  const { focusProps } = useFocusWithin({\n    onBlurWithin: handleOnBlur\n  });\n\n  // Update the ref to include the handler methods\n  useImperativeHandle(\n    ref,\n    () => ({\n      blur: handleOnBlur,\n      focus: handleOnFocus\n    }),\n    [handleOnBlur, handleOnFocus]\n  );\n\n  useEffect(() => {\n    // every time the data is changed, scroll to the end of the list to show the latest added\n    // pill\n    // In ltr we need to scroll to the right, so positive value should be passed and in rtl we\n    // need to scroll to the left, so negative value should be passed\n    divRef.current?.scrollTo({\n      left: divRef.current.scrollWidth * (direction === 'ltr' ? 1 : -1)\n    });\n  }, [data, direction]);\n\n  // the styles for the component\n  const styles = styleInterpolations(props);\n  // TODO: use theming and multi-variant styles\n  // \n  const rootClasses = classNames([\n    textTagListStyles.textTagListBase,\n    hasInsideLabel && textTagListStyles.textTagListInsideLabel\n  ]);\n\n  return (\n    <div\n      class={rootClasses}\n      ref={divRef}\n      tabIndex={-1}\n      onKeyDown={onTagKeyDown}\n      role=\"listbox\"\n      aria-label={ariaLabel}\n      aria-multiselectable=\"true\"\n      style={styles}\n      {...focusProps}>\n      {data.map((tag, index) => (\n        <TextTag\n          isFocused={currentSelectedTagIndex.current === index}\n          isSelected={selectedTags.includes(tag.value)}\n          key={tag.value}\n          onRemoveAction={onTagRemoveAction}\n          onSelect={onTagSelect}\n          onRemoveIconClick={onTagRemoveIconClick}\n          removeIcon={removeIcon}\n          value={tag.value}>\n          {tag.label}\n        </TextTag>\n      ))}\n    </div>\n  );\n}\n\nexport const TextTagList = forwardRef<TextTagListHandle, Props<any>>(_TextTagList);\n","import { ComponentProps, Ref } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { TextTagList } from './TextTagList';\nimport { Flex } from '../UNSAFE_Flex';\nimport { TextFieldInput } from '../UNSAFE_TextField';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport { useFormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype TextTagListProps = ComponentProps<typeof TextTagList>;\n\ntype PassThroughTextFieldInputProps = Pick<\n  TextFieldInputProps,\n  | 'aria-controls'\n  | 'aria-describedby'\n  | 'aria-expanded'\n  | 'aria-invalid'\n  | 'aria-label'\n  | 'autoFocus'\n  | 'hasEmptyLabel'\n  | 'hasInsideLabel'\n  | 'id'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onInput'\n  | 'onKeyDown'\n  | 'onKeyUp'\n  | 'isRequired'\n  | 'placeholder'\n  | 'textAlign'\n  | 'variant'\n> & {\n  inputRef?: Ref<HTMLInputElement>;\n};\ntype PassThroughTextTagListProps = Pick<\n  TextTagListProps,\n  'onExitNavigation' | 'onRemove' | 'removeIcon'\n>;\n\ntype Props = PassThroughTextFieldInputProps &\n  PassThroughTextTagListProps & {\n    displayValue?: string;\n    isAddToListShown?: boolean;\n    isKeyboardNavigable?: boolean;\n    isTextTagListShown?: boolean;\n    isUserFiltering?: boolean;\n    liveRegionText?: string;\n    selectedValuesDescriptionId?: string;\n    selectedValuesKeyboardNavDescriptionId?: string;\n    textTagListData: TextTagListProps['data'];\n    textTagListRef?: TextTagListProps['ref'];\n    userInput?: string;\n    virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n  };\n\nexport function SelectMultipleFieldInput({\n  displayValue,\n  isAddToListShown,\n  isKeyboardNavigable,\n  isTextTagListShown,\n  isUserFiltering,\n  liveRegionText,\n  onExitNavigation,\n  onRemove,\n  removeIcon,\n  selectedValuesDescriptionId,\n  selectedValuesKeyboardNavDescriptionId,\n  textTagListData,\n  textTagListRef,\n  userInput,\n  virtualKeyboard,\n  ...passThroughTextFieldInputProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const addToListAccText = isAddToListShown ? translations.select_addToListAvailable() : undefined;\n\n  // Add the text tags navigation accessible text to the aria description for the input if there\n  // are any selected values and the component is keyboard navigable.\n  // Also add an aria live region if the status changes while the input already has focus because\n  // at that time the aria description will not be read out again.  Remove the aria live region\n  // when the input loses focus.\n  const accTextTagsNav =\n    isKeyboardNavigable && displayValue && displayValue.length > 0\n      ? translations.selectMultiple_highlightSelectedTagsInstructionText()\n      : undefined;\n  const { isInputFocused } = useFormFieldContext();\n  const [prevAccTextTagsNav, setPrevAccTextTagsNav] = useState(accTextTagsNav);\n  const [isAccTextTagsNavLive, setIsAccTextTagsNavLive] = useState(false);\n  isInputFocused &&\n  isTextTagListShown &&\n  !prevAccTextTagsNav &&\n  accTextTagsNav &&\n  !isAccTextTagsNavLive\n    ? setIsAccTextTagsNavLive(true)\n    : !isInputFocused && isAccTextTagsNavLive\n    ? setIsAccTextTagsNavLive(false)\n    : {};\n  if (prevAccTextTagsNav !== accTextTagsNav) {\n    setPrevAccTextTagsNav(accTextTagsNav);\n  }\n\n  return (\n    <>\n      {isTextTagListShown && (\n        <TextTagList\n          aria-label={translations.selectMultiple_selectedValues()}\n          data={textTagListData}\n          hasInsideLabel={passThroughTextFieldInputProps.hasInsideLabel}\n          maxWidth=\"50%\"\n          onExitNavigation={onExitNavigation}\n          onRemove={onRemove}\n          ref={textTagListRef}\n          removeIcon={removeIcon}\n        />\n      )}\n      <Flex flex={1}>\n        <TextFieldInput\n          aria-autocomplete=\"list\"\n          autoComplete=\"off\"\n          // When focused, we show the tag list, which can be treated as having prefix\n          hasPrefix={isTextTagListShown}\n          role=\"combobox\"\n          hasEndContent={true}\n          spellcheck={false}\n          type={virtualKeyboard === 'auto' ? 'search' : virtualKeyboard}\n          value={isUserFiltering || isTextTagListShown ? userInput : displayValue}\n          {...passThroughTextFieldInputProps}\n        />\n      </Flex>\n      {\n        // Show description text when focused as we will not be\n        // showing display text in the input.\n        isTextTagListShown && (\n          <HiddenAccessible\n            id={selectedValuesDescriptionId}\n            // We want the content to be hidden for screen readers too by default.\n            // But, it will be overridden when we link the aria-describedby attribute.\n            // Otherwise, the content here will be read twice.\n            isHidden={true}>\n            {displayValue}\n          </HiddenAccessible>\n        )\n      }\n      {\n        // Add the text tags navigation accessible text to the aria description for the input\n        // if there are any selected values and the component is keyboard navigable.\n        // (Don't add it if we're adding a live region for the same text because then it\n        // gets read out twice by the screen reader, for some reason.)\n        isTextTagListShown && accTextTagsNav && !isAccTextTagsNavLive && (\n          <HiddenAccessible\n            id={selectedValuesKeyboardNavDescriptionId}\n            // We want the content to be hidden for screen readers too by default.\n            // But, it will be overridden when we link the aria-describedby attribute.\n            // Otherwise, the content here will be read twice.\n            isHidden={true}>\n            {accTextTagsNav}\n          </HiddenAccessible>\n        )\n      }\n      <LiveRegion>{liveRegionText}</LiveRegion>\n      {\n        // Add an aria live region for the text tags navigation accessible text if the status\n        // changes while the input already has focus because at that time the aria description\n        // will not be read out again.\n        // (Add the region itself whenever the text tags are shown so that it's already in the\n        // DOM when we want to populate it with text.  If we dynamically add the region itself\n        // at that time, the screen reader (JAWS) may not read it at all, for some reason.)\n        isTextTagListShown && (\n          <LiveRegion>{isAccTextTagsNavLive ? accTextTagsNav : undefined}</LiveRegion>\n        )\n      }\n      {isAddToListShown ? <LiveRegion>{addToListAccText}</LiveRegion> : undefined}\n    </>\n  );\n}\n","import { ComponentProps } from 'preact';\nimport { Button } from '../UNSAFE_Button';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { mobileDropdownFooterStyles } from './themes/MobileDropdownFooterStyles.css';\n\ntype ButtonProps = ComponentProps<typeof Button>;\ntype Props = {\n  onApply?: ButtonProps['onAction'];\n};\n\nexport function MobileDropdownFooter({ onApply }: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  return (\n    <div class={mobileDropdownFooterStyles.base}>\n      <Button\n        display=\"label\"\n        edge=\"bottom\"\n        label={translations.selectMultiple_apply()}\n        size=\"sm\"\n        variant=\"callToAction\"\n        onAction={onApply}\n      />\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { renderItemText } from '../PRIVATE_SelectCommon';\n\nexport function useDisplayValues<K, D>(itemText: ItemTextType<K, D>, valueItems?: Item<K, D>[]) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const separator = translations.plural_separator();\n\n  // create the text displayed in the field from the selected values\n  const concatenatedDisplayValues = useMemo(() => {\n    if (valueItems === undefined) {\n      return '';\n    }\n    const displayValues = createDisplayValues(itemText, valueItems);\n    const concatenatedDisplayValues = concatDisplayValues(displayValues, separator);\n    return concatenatedDisplayValues;\n  }, [itemText, separator, valueItems]);\n\n  // create the text tags to display when the component is focused\n  const textTags = useMemo(\n    () => (valueItems === undefined ? [] : createTextTags(itemText, valueItems)),\n    [itemText, valueItems]\n  );\n\n  return {\n    displayValue: concatenatedDisplayValues,\n    textTags\n  };\n}\n\nfunction concatDisplayValues(displayValues: Set<string>, separator: string) {\n  return Array.from(displayValues.values()).join(separator);\n}\n\nfunction createDisplayValues<K, D>(itemText: ItemTextType<K, D>, selectedItems?: Item<K, D>[]) {\n  const arValues = selectedItems ? [...selectedItems?.values()] : [];\n  const mapFunc = (itemContext: Item<K, D>) => renderItemText(itemContext, itemText);\n  const mappedArray = arValues.map(mapFunc);\n  return new Set<string>(mappedArray as string[]);\n}\n\nfunction createTextTags<K, D>(itemText: ItemTextType<K, D>, selectedItems: Item<K, D>[] = []) {\n  return selectedItems.map((item) => ({\n    label: renderItemText(item, itemText) ?? '',\n    value: item.key\n  }));\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { DataState } from 'src/UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { useEffectEvent } from '#hooks/PRIVATE_useEffectEvent';\n\ntype Props<K, D> = {\n  isDropdownSelectedOnlyView?: boolean;\n  valueItems?: Item<K, D>[];\n};\n\n/**\n * Get the data to show in the dropdown for the selected-only view.\n * While the component is showing only selected values in the dropdown, that list of values should\n * not change as the user deselects items within it.  For example, if the list initially shows\n * selected items \"Item A\" and \"Item B\", and the user deselects \"Item B\", we do not want to remove\n * \"Item B\" from the list.  The reason is that the user may want to reselect it again.  So the\n * list should remain static as of the time the user toggled the selected-only view on.\n * If isDropdownSelectedOnlyView is false, then the data returned from this hook will be undefined.\n * If isDropdownSelectedOnlyView is true, then the data returned from this hook will consist of\n * all of the valueItems that were selected at the time isDropdownSelectedOnlyView was set to true.\n * @param isDropdownSelectedOnlyView Whether the component is showing only selected\n * values in the dropdown: true if so, false if not.\n * @param valueItems The keys, data, and optional metadata for the selected values.\n * @returns An object with data and onLoadRange properties that can be passed on to the\n * list in the dropdown.\n */\nexport function useSelectedOnlyData<K, D>({\n  isDropdownSelectedOnlyView = false,\n  valueItems\n}: Props<K, D>) {\n  const STABLE_dataStateFactory = useEffectEvent((isDropdownSelectedOnlyView: boolean) =>\n    !isDropdownSelectedOnlyView || !valueItems || valueItems.length === 0\n      ? undefined\n      : ({\n          offset: 0,\n          totalSize: valueItems.length,\n          sizePrecision: 'exact',\n          data: valueItems.map((valueItem: Item<K, D>) => {\n            return { data: valueItem.data, metadata: valueItem.metadata ?? { key: valueItem.key } };\n          })\n          // Need to specify type of useMemo here so that dependent code in SelectMultiple and\n          // useSelectMultiple doesn't show a type error related to the sizePrecision prop on DataState:\n          //   Type 'string' is not assignable to type '\"exact\" | \"atLeast\"'.\n        } as DataState<K, D>)\n  );\n\n  // Note that useMemo here only depends on isDropdownSelectedOnlyView because we only want to\n  // recalculate when that value changes.  While the selected only view is shown, we want the\n  // data set to remain static with the set of valueItems as of the time the view was changed to\n  // only show selected items so that the user can deselect and reselect items.\n  // If useMemo depended on the valueItems too, then the data set would change as the user\n  // deselected items, which means those items would disappear from the dropdown and the user\n  // could not reselect them.\n  // STABLE_dataStateFactory is guaranteed to be stable, so its reference will not change between\n  // renders.\n  const data = useMemo(() => {\n    return STABLE_dataStateFactory(isDropdownSelectedOnlyView);\n  }, [STABLE_dataStateFactory, isDropdownSelectedOnlyView]);\n\n  return {\n    data,\n    onLoadRange: undefined\n  };\n}\n","import { isSearchTextEmptyOrUndefined } from '#PRIVATE_SelectCommon';\nimport type { ComponentProps } from 'preact';\nimport { Ref, useCallback, useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { equals } from 'ramda';\nimport { CurrentKeyDetail, DataState, SelectionDetail } from '../UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport type { SelectedValuesCount } from './SelectedValuesCount';\nimport { useDisplayValues } from './useDisplayValues';\nimport type { UseSelectMultipleProps, useSelectMultiple } from './useSelectMultiple';\nimport { useSelectedOnlyData } from './useSelectedOnlyData';\n\ntype UseSelectMultipleReturn = ReturnType<typeof useSelectMultiple>;\ntype PickedPropsFromUseSelectMultiple = Pick<\n  UseSelectMultipleReturn,\n  | 'isDropdownOpen'\n  | 'isDropdownSelectedOnlyView'\n  | 'setDropdownOpen'\n  | 'setUserInput'\n  | 'stopFiltering'\n  | 'userInput'\n>;\ntype SelectedValuesCountOnToggle = NonNullable<\n  ComponentProps<typeof SelectedValuesCount>['onToggle']\n>;\n\nexport type UseMobileDropdownProps<K, D> = PickedPropsFromUseSelectMultiple & {\n  data: UseSelectMultipleProps<K, D>['data'];\n  inputRef: Ref<HTMLElement>;\n  itemText: ItemTextType<K, D>;\n  textTagListRef: UseSelectMultipleReturn['textTagListProps']['textTagListRef'];\n  valueItems: UseSelectMultipleProps<K, D>['valueItems'];\n  onCommit: UseSelectMultipleProps<K, D>['onCommit'];\n  onLoadRange: UseSelectMultipleProps<K, D>['onLoadRange'];\n};\n\n// use const for default valueItems so that it doesn't create a new empty array on every render\nconst DEFAULT_VALUE_ITEMS = [] as UseMobileDropdownProps<\n  string | number,\n  Record<string, any>\n>['valueItems'];\n\nexport function useMobileDropdown<K extends string | number, D>({\n  data,\n  inputRef,\n  isDropdownOpen,\n  isDropdownSelectedOnlyView,\n  itemText,\n  textTagListRef,\n  userInput,\n  valueItems = DEFAULT_VALUE_ITEMS as NonNullable<UseMobileDropdownProps<K, D>['valueItems']>,\n  onCommit,\n  onLoadRange,\n  setDropdownOpen,\n  setUserInput,\n  stopFiltering\n}: UseMobileDropdownProps<K, D>) {\n  const [currentRow, setCurrentRow] = useState<{ rowKey?: K }>({\n    rowKey: undefined\n  });\n  const [dropdownSelectedKeys, setDropdownSelectedKeys] = useState(keysFromValueItems(valueItems));\n  const [isInternalSelectedOnlyView, setIsInternalSelectedOnlyView] = useState(\n    isDropdownSelectedOnlyView\n  );\n  const dataCache = useRef(new Map<K, Item<K, D>>());\n  const currentValueItems = useMemo(() => {\n    const items: Item<K, D>[] = [];\n    dropdownSelectedKeys.forEach((key) => {\n      // Initially check if they are in valueItems\n      const item = valueItems.find((item) => item.key === key);\n      if (item) {\n        items.push(item);\n        return;\n      }\n\n      // otherwise check if it is available in the dataCache\n      if (dataCache.current.has(key)) {\n        items.push(dataCache.current.get(key)!);\n      }\n    });\n    return items;\n  }, [dropdownSelectedKeys, valueItems]);\n  const { textTags, displayValue } = useDisplayValues(itemText, currentValueItems);\n\n  // Create a ref for the input in the dropdown\n  const dropdownInputRef = useRef<HTMLInputElement>(null);\n\n  // show only the selected values in the dropdown if isDropdownSelectedOnlyView is true,\n  // otherwise show the full data set\n  // TODO: We may need to revisit this for hierarchical data because the selected valueItems\n  // won't have any information about ancestor group nodes, and we should probably show selected\n  // items in context within the hierarchy.  Also, the order of the items in the selected-only\n  // view right now follows the order in which they were selected, not the order in which they\n  // would appear in the full data set.  This may be more of a problem for hierarchical data\n  // if items have to appear within the correct group ancestors.  We may need to move\n  // construction of the selected-only DataState out of the component to the consuming code,\n  // and take a callback that we can call as a notification that the app should provide this\n  // special DataState to us (kind of like onLoadRange).  Note that we may also need an\n  // enhancement on the DataProvider API to be able to specify a filterCriterion to filter by\n  // the selected keys through a fetchFirst call, because a regular fetchByKeys call would\n  // still return results in the order in which the keys were specified and would not return\n  // data for the ancestor group nodes.\n  const { data: selectedOnlyData, onLoadRange: selectedOnlyOnLoadRange } = useSelectedOnlyData<\n    K,\n    D\n  >({\n    isDropdownSelectedOnlyView: isInternalSelectedOnlyView,\n    valueItems: currentValueItems\n  });\n\n  const onCurrentKeyChange = useCallback(\n    (detail: CurrentKeyDetail<K>) => {\n      setCurrentRow({ rowKey: detail.value });\n    },\n    [setCurrentRow]\n  );\n\n  const onSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      const newKeys = new Set(detail.value.keys?.values());\n      // update the dropdownSelectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for new valueItems to be set\n      setDropdownSelectedKeys(newKeys);\n\n      // clear the filter text typed by the user, but do NOT clear the actual filter criterion\n      // or highlighting in the list\n      setUserInput('');\n\n      // update the data cache on each selection if data is present\n      if (data) {\n        updateCache(dataCache.current, data, newKeys);\n      }\n    },\n    [data, setDropdownSelectedKeys, setUserInput]\n  );\n\n  const onSelectedValuesCountToggle = useCallback<SelectedValuesCountOnToggle>(\n    ({ value = false }) => {\n      setIsInternalSelectedOnlyView((currentIsInternalSelectedOnlyView) => {\n        // if the selected only toggle is enabled, we need to stop user filtering\n        if (currentIsInternalSelectedOnlyView !== value) {\n          stopFiltering();\n        }\n        return value;\n      });\n    },\n    [setIsInternalSelectedOnlyView, stopFiltering]\n  );\n\n  const closeDropdown = useCallback(() => {\n    // reset dropdownSelectedKeys as you close the dropdown so that\n    // the next time the dropdown is opened, it will have the actual component's valueItems\n    setDropdownSelectedKeys(new Set(valueItems.map((v) => v.key)));\n    // Empty the cached map\n    dataCache.current.clear();\n    setDropdownOpen(false);\n    // stop filtering before closing the dropdown\n    stopFiltering();\n    // revert the focus back to the main field\n    inputRef.current?.focus();\n  }, [inputRef, setDropdownOpen, stopFiltering, valueItems]);\n\n  const onApply = useCallback(() => {\n    // Commit the current value items and close the dropdown\n    onCommit({\n      previousValue: keysFromValueItems(valueItems),\n      value: dropdownSelectedKeys\n    });\n    closeDropdown();\n  }, [dropdownSelectedKeys, valueItems, closeDropdown, onCommit]);\n\n  const onBackButtonClick = useCallback(() => {\n    closeDropdown();\n  }, [closeDropdown]);\n\n  const onClearButtonClick = useCallback(() => {\n    setDropdownSelectedKeys(new Set());\n    stopFiltering();\n  }, [stopFiltering]);\n\n  const onTextTagRemove = useCallback(\n    (keys: K[]) => {\n      const newSelectedKeys = new Set(dropdownSelectedKeys);\n      keys.forEach((key) => newSelectedKeys.delete(key));\n      setDropdownSelectedKeys(newSelectedKeys);\n    },\n    [dropdownSelectedKeys]\n  );\n\n  const onTextTagExitNavigation = useCallback(() => {\n    // Focus the input on the next tick. Doing it in the same event cycle will\n    // trigger the key press on the input element which makes the caret move by\n    // one character.\n    setTimeout(() => dropdownInputRef.current?.focus(), 0);\n  }, []);\n\n  const wasDropdownOpen = useRef(isDropdownOpen);\n  useEffect(() => {\n    // if the dropdown is open, ignore any valueItems update\n    if (isDropdownOpen) {\n      // if it was open before, then this is a valueItems change, so no action\n      if (wasDropdownOpen.current) return;\n\n      // otherwise this dropdown is opened now, so set the focus on the input field\n      setTimeout(() => dropdownInputRef.current?.focus(), 0);\n      wasDropdownOpen.current = true;\n      return;\n    }\n    wasDropdownOpen.current = false;\n  }, [isDropdownOpen]);\n\n  const [prevValueItems, setPrevValueItems] = useState(valueItems);\n  if (prevValueItems !== valueItems) {\n    // if dropdown is closed, keep the valueItems in sync with the dropdown selected keys\n    if (!isDropdownOpen) {\n      setDropdownSelectedKeys((prevDropdownSelectedKeys) => {\n        const nextDropdownSelectedKeys = keysFromValueItems(valueItems);\n        // since valueItems can be a different array with the same values and keysFromValueItems\n        // will create a new set every time, compare the value and update the set only if the\n        // values have changed\n        return equals(prevDropdownSelectedKeys, nextDropdownSelectedKeys)\n          ? prevDropdownSelectedKeys\n          : nextDropdownSelectedKeys;\n      });\n    }\n    setPrevValueItems(valueItems);\n  }\n\n  return {\n    collectionProps: {\n      currentKey: currentRow.rowKey,\n      data: isInternalSelectedOnlyView ? selectedOnlyData : data,\n      selectedKeys: dropdownSelectedKeys,\n      onCurrentKeyChange,\n      onLoadRange: isInternalSelectedOnlyView ? selectedOnlyOnLoadRange : onLoadRange,\n      onSelectionChange\n    },\n    footerProps: {\n      onApply\n    },\n    selectMultipleFieldInputProps: {\n      displayValue,\n      hasEmptyLabel: false,\n      hasInsideLabel: true,\n      inputRef: dropdownInputRef,\n      isTextTagListShown: textTags.length > 0,\n      isUserFiltering: true,\n      removeIcon: 'always' as const,\n      userInput,\n      textTagListData: textTags,\n      textTagListRef: textTagListRef,\n      onExitNavigation: onTextTagExitNavigation,\n      onRemove: onTextTagRemove\n    },\n    selectMultipleFieldProps: {\n      hasInsideLabel: true,\n      isBackButtonShown: true,\n      isClearButtonShown: !isSearchTextEmptyOrUndefined(userInput) || textTags.length !== 0,\n      isDropdownArrowShown: false,\n      isDropdownSelectedOnlyView: isInternalSelectedOnlyView,\n      isSelectedValuesCountShown: dropdownSelectedKeys.size > 0 || isInternalSelectedOnlyView,\n      selectedValuesCount: dropdownSelectedKeys.size,\n      styleVariant: 'embedded' as const,\n      onBackButtonClick,\n      onClearButtonClick\n    },\n    selectedValuesCountProps: {\n      onSelectedValuesCountToggle\n    },\n    isDropdownSelectedOnlyView: isInternalSelectedOnlyView\n  };\n}\n\n/**\n * A function to cache the data for the current set of keys from the current data state\n * and current set of keys.\n *\n * The idea is that, the data state might not contain all the selected keys. However, as\n * a key is selected, if we update the cache, it will always contain the data for the selected\n * keys. Reason is that, when a key is selected, at that moment it will be in the current data\n * state. We will fetch that information and store it. While the current data state might not\n * contain information about all the selected keys, it will always have the information about\n * current selected key.\n *\n * @param cache The data cache\n * @param data The current data state\n * @param keys The current set of keys\n */\nconst updateCache = <K, D>(cache: Map<K, Item<K, D>>, data: DataState<K, D>, keys: Set<K>) =>\n  // iterate through the data and if a selected key's match is found, update the cache\n  data.data.forEach((item) => {\n    if (!keys.has(item.metadata.key)) return;\n\n    cache.set(item.metadata.key, {\n      data: item.data,\n      key: item.metadata.key,\n      metadata: item.metadata\n    });\n  });\n\n/**\n * Extract keys from a value items array.\n *\n * @param valueItems The value items from which the keys are to be extracted\n * @returns The set of keys\n */\nconst keysFromValueItems = <K, D>(valueItems: Item<K, D>[]) =>\n  new Set(valueItems.map((i) => i.key));\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps } from 'preact';\nimport { Ref, StateUpdater, Dispatch } from 'preact/hooks';\nimport {\n  DefaultList,\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  LinkItem,\n  SelectMobileDropdown\n} from '../PRIVATE_SelectCommon';\nimport { DataState } from '../UNSAFE_Collection';\nimport { Label } from '../UNSAFE_Label';\nimport { TextFieldInput } from '../UNSAFE_TextField';\nimport { InlineUserAssistance, UserAssistanceDensityType } from '../UNSAFE_UserAssistance';\nimport { View } from '../UNSAFE_View';\nimport { VirtualizedListView } from '../UNSAFE_VirtualizedListView';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { BundleType } from '#resources/nls/bundle';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { Handle } from '../utils/UNSAFE_typeUtils';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { MobileDropdownFooter } from './MobileDropdownFooter';\nimport { ItemRendererProps } from './SelectMultiple.types';\nimport { SelectMultipleField } from './SelectMultipleField';\nimport { SelectMultipleFieldInput } from './SelectMultipleFieldInput';\nimport { TextTagList } from './TextTagList';\nimport { useMobileDropdown } from './useMobileDropdown';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\ntype SelectMultipleFieldInputProps = ComponentProps<typeof SelectMultipleFieldInput>;\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype TextTagListHandle = Handle<typeof TextTagList, 'ref'>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = {\n  'aria-describedby'?: string;\n  'aria-label'?: string;\n  assistiveText?: string;\n  data?: DataState<K, D> | null;\n  dropdownId: string;\n  enabledElementRef: Ref<HTMLElement>;\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  isAddToListShown?: boolean;\n  isDisabled?: boolean;\n  isEmptyResults: boolean;\n  isFocused: boolean;\n  isLoading: boolean;\n  isOpen: boolean;\n  isReadonly?: false;\n  isRequired?: boolean;\n  isSelectedOnlyView: boolean;\n  isUserFiltering: boolean;\n  itemRenderer?: (itemRendererProps: ItemRendererProps<K, D>) => ComponentChildren;\n  itemText: ItemTextType<K, D>;\n  label: string;\n  liveRegionText?: string;\n  placeholder?: TextFieldInputProps['placeholder'];\n  propIsLoading?: boolean;\n  searchText?: string;\n  selectedValuesDescriptionId?: string;\n  setDropdownOpen: Dispatch<StateUpdater<boolean>>;\n  setUserInput: Dispatch<StateUpdater<string | undefined>>;\n  stopFiltering: () => void;\n  textAlign?: TextFieldInputProps['textAlign'];\n  textTagListRef: Ref<TextTagListHandle>;\n  userAssistanceDensity?: UserAssistanceDensityType;\n  userInput?: string;\n  valueItems?: Item<K, D>[];\n  virtualKeyboard?: SelectMultipleFieldInputProps['virtualKeyboard'];\n  onAddToListAction?: () => void;\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  onFieldBlur?: (event: FocusEvent) => void;\n  onFieldFocus?: (event: FocusEvent) => void;\n  onFieldInput?: SelectMultipleFieldInputProps['onInput'];\n  onFieldKeyDown?: SelectMultipleFieldInputProps['onKeyDown'];\n  onFieldKeyUp?: SelectMultipleFieldInputProps['onKeyUp'];\n  onLoadRange?: ComponentProps<typeof VirtualizedListView>['onLoadRange'];\n};\n\nexport function SelectMultipleMobileDropdown<\n  K extends string | number,\n  D extends Record<string, any>\n>({\n  'aria-describedby': ariaDescribedBy,\n  'aria-label': ariaLabel,\n  assistiveText,\n  data,\n  dropdownId,\n  enabledElementRef,\n  helpSourceLink,\n  helpSourceText,\n  isAddToListShown,\n  isDisabled,\n  isEmptyResults,\n  isFocused,\n  isLoading,\n  isOpen,\n  isReadonly,\n  isRequired,\n  isSelectedOnlyView: propIsSelectedOnlyView,\n  isUserFiltering,\n  itemRenderer,\n  itemText,\n  label,\n  liveRegionText,\n  placeholder,\n  propIsLoading,\n  searchText,\n  selectedValuesDescriptionId,\n  setDropdownOpen,\n  setUserInput,\n  stopFiltering,\n  textAlign,\n  textTagListRef,\n  userAssistanceDensity,\n  userInput,\n  valueItems,\n  virtualKeyboard,\n  onAddToListAction,\n  onCommit,\n  onFieldBlur,\n  onFieldFocus,\n  onFieldInput,\n  onFieldKeyDown,\n  onFieldKeyUp,\n  onLoadRange\n}: Props<K, D>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const {\n    collectionProps: mobileDropdownCollectionProps,\n    footerProps: mobileDropdownFooterProps,\n    selectMultipleFieldInputProps: mobileDropdownSelectMultipleFieldInputProps,\n    selectMultipleFieldProps: mobileDropdownSelectMultipleFieldProps,\n    selectedValuesCountProps: mobileDropdownSelectedValueCountProps,\n    isDropdownSelectedOnlyView\n  } = useMobileDropdown<K, D>({\n    data,\n    inputRef: enabledElementRef,\n    isDropdownOpen: isOpen,\n    isDropdownSelectedOnlyView: propIsSelectedOnlyView,\n    itemText,\n    textTagListRef,\n    userInput,\n    valueItems,\n    onCommit,\n    onLoadRange,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering\n  });\n\n  // for dropdown field\n  const {\n    formFieldContext: mobileDropdownFormFieldContext,\n    inputProps: mobileDropdownInputProps,\n    labelProps: mobileDropdownLabelProps,\n    textFieldProps: mobileDropdownTextFieldProps,\n    userAssistanceProps: mobileDropdownUserAssistanceProps\n  } = useTextField({\n    ariaDescribedBy,\n    helpSourceLink,\n    helpSourceText,\n    isDisabled: false,\n    isFocused,\n    isLoading,\n    isReadonly: false,\n    isRequiredShown: false,\n    labelEdge: 'inside',\n    styleVariant: 'default',\n    value: mobileDropdownSelectMultipleFieldProps.selectedValuesCount > 0 ? true : undefined\n  });\n\n  // JET-54256 - inside label animates up on initial display with selected value\n  // If we're waiting for the selected values to load, the component should look like it\n  // has a value in the meantime.\n  // Use the original propIsLoading instead of isLoading because we don't want to delay\n  // the inside label position by a timer like we do the progressive loading indicator.\n  mobileDropdownFormFieldContext.hasValue =\n    propIsLoading || mobileDropdownFormFieldContext.hasValue;\n\n  const mobileDropdownFieldLabelProps = {\n    label: <Label {...mobileDropdownLabelProps}>{label}</Label>,\n    labelEdge: 'inside' as const\n  };\n\n  const dropdownInlineUserAssistance =\n    isOpen &&\n    !isDisabled &&\n    !isReadonly &&\n    (assistiveText || helpSourceLink) &&\n    (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n      <DropdownUserAssistance\n        assistiveText={assistiveText}\n        fieldLabel={label}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        userAssistanceDensity={userAssistanceDensity}\n        {...mobileDropdownUserAssistanceProps}\n      />\n    ) : undefined;\n\n  const dropdownListContent = isEmptyResults ? (\n    isAddToListShown ? undefined : (\n      <EmptyResults />\n    )\n  ) : (\n    <DefaultList<K, D>\n      {...mobileDropdownCollectionProps}\n      aria-label={label ?? ''}\n      itemRenderer={itemRenderer}\n      itemText={itemText}\n      searchText={isDropdownSelectedOnlyView ? undefined : isUserFiltering ? searchText : undefined}\n      selectionMode=\"multiple\"\n    />\n  );\n\n  const addToListContent = isAddToListShown ? (\n    <LinkItem onAction={onAddToListAction}>{translations.select_addToList()}</LinkItem>\n  ) : undefined;\n\n  return (\n    <SelectMobileDropdown\n      header={\n        <FormFieldContext.Provider value={mobileDropdownFormFieldContext}>\n          <View>\n            <SelectMultipleField\n              fieldLabel={label}\n              onBlur={onFieldBlur}\n              onFocus={onFieldFocus}\n              {...mobileDropdownFieldLabelProps}\n              {...mobileDropdownTextFieldProps}\n              {...mobileDropdownSelectMultipleFieldProps}\n              {...mobileDropdownSelectedValueCountProps}>\n              <SelectMultipleFieldInput\n                aria-controls={dropdownId}\n                aria-expanded={isOpen}\n                aria-label={ariaLabel}\n                isAddToListShown={isAddToListShown}\n                isRequired={isRequired}\n                liveRegionText={liveRegionText}\n                placeholder={placeholder}\n                selectedValuesDescriptionId={selectedValuesDescriptionId}\n                textAlign={textAlign}\n                virtualKeyboard={virtualKeyboard}\n                onInput={onFieldInput}\n                onKeyDown={onFieldKeyDown}\n                onKeyUp={onFieldKeyUp}\n                {...mobileDropdownInputProps}\n                {...mobileDropdownSelectMultipleFieldInputProps}\n              />\n            </SelectMultipleField>\n          </View>\n          {dropdownInlineUserAssistance}\n        </FormFieldContext.Provider>\n      }\n      footer={<MobileDropdownFooter {...mobileDropdownFooterProps} />}\n      id={dropdownId}\n      isOpen={isOpen}>\n      <DropdownList hasTopGap={!addToListContent} hasBottomGap={true} isLoading={data === null}>\n        {dropdownListContent}\n        {addToListContent}\n      </DropdownList>\n    </SelectMobileDropdown>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { Ref, useCallback, useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { isBeforeDataFetch, isPhone, useSelectCommon } from '../PRIVATE_SelectCommon';\nimport { isControlOrFunctionKey, KEYS } from '../utils/PRIVATE_keyboardUtils';\nimport { DataState, SelectionDetail } from '../UNSAFE_Collection';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { merge } from '../utils/UNSAFE_stringUtils';\nimport { Handle } from '../utils/UNSAFE_typeUtils';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { SelectMultiple } from './SelectMultiple';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { TextTagList } from './TextTagList';\nimport { useSelectedOnlyData } from './useSelectedOnlyData';\nimport { isSearchTextEmptyOrUndefined } from '#PRIVATE_SelectCommon';\n\ntype TextTagListHandle = Handle<typeof TextTagList, 'ref'>;\ntype PickedPropsFromSelectMultiple = Pick<\n  ComponentProps<typeof SelectMultiple>,\n  | 'addToList'\n  | 'aria-describedby'\n  | 'isDisabled'\n  | 'isReadonly'\n  | 'onAddToListAction'\n  | 'onFilter'\n  | 'onLoadRange'\n>;\ntype RenamedPropsFromSelectMultiple = Omit<PickedPropsFromSelectMultiple, 'aria-describedby'> & {\n  ariaDescribedBy: PickedPropsFromSelectMultiple['aria-describedby'];\n};\nexport type UseSelectMultipleProps<K, D> = RenamedPropsFromSelectMultiple & {\n  data?: DataState<K, D> | null;\n  inputRef: Ref<HTMLElement>;\n  isFocused?: boolean;\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  valueItems?: Item<K, D>[];\n};\n\ntype SelectedValuesCountToggleType = ComponentProps<typeof SelectedValuesCount>['onToggle'];\ntype SelectedValuesCountToggleDetailType = Parameters<\n  Exclude<SelectedValuesCountToggleType, undefined>\n>[0];\n\n/**\n * Hook that manages SelectMultiple state and behavior.  This hook creates state variables and\n * event listeners, returning properties to apply to components internally rendered by\n * SelectMultiple, as well as state information.\n *\n * @param ariaDescribedBy Specifies the ID of elements that describe the input.\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element (this can be an input in desktop and a div in mobile).\n * @param isDisabled Specifies whether the component is disabled.\n * @param isFocused Specifies whether the component has focus.\n * @param isReadonly Specifies whether the component is readonly.\n * @param onCommit Callback invoked when the selected values are committed.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n * @param onLoadRange Callback function to handle when the viewport of the dropdown list has\n * changed, including the case where the user scrolls to the end of the list and there are more\n * items to load.  The function should set a new DataState on the component for the specified\n * range.\n * @param valueItems Specifies the keys, data, and optional metadata for the selected values.\n *\n * @returns Properties to apply to internal components that SelectMultiple renders, and component\n * state.\n */\nexport function useSelectMultiple<K, D>({\n  addToList,\n  ariaDescribedBy,\n  data: propData,\n  inputRef,\n  isDisabled,\n  isFocused: propIsFocused,\n  isReadonly,\n  onAddToListAction,\n  onCommit,\n  onFilter,\n  onLoadRange: propOnLoadRange,\n  valueItems\n}: UseSelectMultipleProps<K, D>) {\n  const [isDropdownSelectedOnlyView, setDropdownSelectedOnlyView] = useState(false);\n\n  const selectedValuesCount = valueItems?.length;\n  const hasSelectedValuesCount =\n    (selectedValuesCount !== undefined && selectedValuesCount > 0) || isDropdownSelectedOnlyView;\n\n  // show only the selected values in the dropdown if isDropdownSelectedOnlyView is true,\n  // otherwise show the full data set\n  // TODO: We may need to revisit this for hierarchical data because the selected valueItems\n  // won't have any information about ancestor group nodes, and we should probably show selected\n  // items in context within the hierarchy.  Also, the order of the items in the selected-only\n  // view right now follows the order in which they were selected, not the order in which they\n  // would appear in the full data set.  This may be more of a problem for hierarchical data\n  // if items have to appear within the correct group ancestors.  We may need to move\n  // construction of the selected-only DataState out of the component to the consuming code,\n  // and take a callback that we can call as a notification that the app should provide this\n  // special DataState to us (kind of like onLoadRange).  Note that we may also need an\n  // enhancement on the DataProvider API to be able to specify a filterCriterion to filter by\n  // the selected keys through a fetchFirst call, because a regular fetchByKeys call would\n  // still return results in the order in which the keys were specified and would not return\n  // data for the ancestor group nodes.\n  const selectedOnlyDataProps = useSelectedOnlyData<K, D>({\n    isDropdownSelectedOnlyView,\n    valueItems\n  });\n  const data = isDropdownSelectedOnlyView ? selectedOnlyDataProps.data : propData;\n  const onLoadRange = isDropdownSelectedOnlyView\n    ? selectedOnlyDataProps.onLoadRange\n    : propOnLoadRange;\n  const handleOnFilter = useCallback<NonNullable<typeof onFilter>>(\n    (args) => {\n      // when the user is filtering, we need to toggle out from selected only view\n      // we consider it filtering only if there is a non-empty filter text is present\n      if (!isSearchTextEmptyOrUndefined(args.searchText)) {\n        setDropdownSelectedOnlyView(false);\n      }\n      onFilter?.(args);\n    },\n    [onFilter]\n  ); // setDropdownSelectedOnlyView is stable so not needed in dep array\n\n  const {\n    currentRow,\n    dropdownRef,\n    handleDropdownArrowClick,\n    handleDropdownAutoDismiss: baseHandleDropdownAutoDismiss,\n    handleDropdownPosition,\n    handleInput,\n    handleMainFieldKeyDown: baseHandleMainFieldKeyDown,\n    handleMainFieldKeyUp,\n    handleUpDownArrowKeys,\n    isDropdownAbove,\n    isDropdownOpen,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    onCurrentKeyChange,\n    onMouseDown,\n    searchText,\n    setCurrentRow,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    userInput\n  } = useSelectCommon<K, D>({\n    data,\n    inputRef,\n    isFocused: propIsFocused,\n    onFilter: handleOnFilter\n  });\n\n  const [prevIsDropdownOpen, setPrevIsDropdownOpen] = useState(isDropdownOpen);\n  const [prevValueItems, setPrevValueItems] = useState(valueItems);\n\n  const [selectedKeys, setSelectedKeys] = useState<Set<K> | undefined>(\n    createKeysFromValueItems<K, D>(valueItems)\n  );\n\n  const isDataFetched = data !== undefined && data !== null && !isBeforeDataFetch<K, D>(data);\n  const isEmptyResults = isDataFetched && data?.totalSize === 0;\n  const isAddToListShown =\n    addToList === 'on' &&\n    isUserFiltering &&\n    searchText != null &&\n    searchText.length > 0 &&\n    isEmptyResults;\n\n  const handleAddToListAction = useCallback(() => {\n    setDropdownOpen(false);\n    stopFiltering();\n    onAddToListAction?.({ searchText: isUserFiltering ? searchText : undefined });\n  }, [isUserFiltering, onAddToListAction, searchText, setDropdownOpen, stopFiltering]);\n\n  const textTagListRef = useRef<TextTagListHandle>(null);\n  const { direction } = useUser();\n  const selectedValuesDescriptionId = useId();\n  const selectedValuesKeyboardNavDescriptionId = useId();\n  const combinedAriaDescribedBy = merge([\n    // when focused, we will show the text tag list.\n    // so, we need the screen readers to read them when focusing on the input.\n    isFocused && selectedValuesKeyboardNavDescriptionId,\n    isFocused && selectedValuesDescriptionId,\n    ariaDescribedBy\n  ]);\n\n  const removeDropdown = useCallback(() => {\n    dropdownRef.current?.parentElement?.removeChild(dropdownRef.current);\n  }, [dropdownRef]);\n\n  const shouldSelectCurrentRow = useCallback(\n    (currentRowArg: typeof currentRow): currentRowArg is Required<typeof currentRow> => {\n      // current row needs to be selected if all the conditions below are satisfied\n      // 1. user is filtering\n      // 2. dropdown is open\n      // 3. user has entered a search text\n      // 4. current data state has data\n      // 5. currentRow exists\n\n      return (\n        isUserFiltering &&\n        isDropdownOpen &&\n        !isSearchTextEmptyOrUndefined(userInput) &&\n        (data?.data.length ?? 0) > 0 &&\n        currentRowArg.rowKey !== undefined\n      );\n    },\n    [data, isDropdownOpen, isUserFiltering, userInput]\n  );\n\n  const selectRow = useCallback(\n    (key: K) => {\n      // If the key is already selected, do nothing\n      if (selectedKeys?.has(key)) return;\n      // If it is not already selected, add it to the selection\n      const newValue =\n        selectedKeys === undefined ? new Set([key]) : new Set([...selectedKeys.values(), key]);\n      onCommit({ previousValue: selectedKeys, value: newValue });\n      setSelectedKeys(newValue);\n    },\n    [onCommit, selectedKeys, setSelectedKeys]\n  );\n\n  const myHandleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        if (event?.type === 'keydown') {\n          const keyboardEvent = event as KeyboardEvent;\n          switch (keyboardEvent.code) {\n            case KEYS.TAB:\n              // Put focus on an element in the main field, but don't kill the event, so that\n              // the browser can naturally transfer focus to the next focusable item relative\n              // to the element in the main field.\n              if (keyboardEvent.shiftKey || !hasSelectedValuesCount) {\n                inputRef.current?.focus();\n              } else {\n                chipRef.current?.focus();\n              }\n\n              // Remove the dropdown immediately, without waiting for a rerender based on changing\n              // state, so that the open dropdown cannot get focus when the browser handles the\n              // Tab key.\n              removeDropdown();\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    },\n    [hasSelectedValuesCount, inputRef, isDropdownOpen, removeDropdown]\n  );\n\n  const myHandleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // const target = event.target as HTMLElement;\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.TAB:\n          if (isDropdownOpen && (event.shiftKey || (!hasSelectedValuesCount && !event.shiftKey))) {\n            // Remove the dropdown immediately, without waiting for a rerender based on changing\n            // state, so that the open dropdown cannot get focus when the browser handles the\n            // Tab key.\n            removeDropdown();\n\n            setDropdownOpen(false);\n          }\n\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to jump focus to the next cell and skip\n          // over the selected values count chip\n          if (hasSelectedValuesCount && !event.shiftKey) {\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.LEFT:\n          // Move focus to the text tag if we are in LTR and the cursor is at the\n          // beginning of the text (and there is no selection)\n          if (\n            direction === 'ltr' &&\n            inputRef.current instanceof HTMLInputElement &&\n            inputRef.current?.selectionStart === 0 &&\n            inputRef.current?.selectionEnd === 0\n          ) {\n            textTagListRef.current?.focus();\n          }\n          break;\n\n        case KEYS.RIGHT:\n          // Move focus to the text tag if we are in RTL and the cursor is at the\n          // beginning of the text (and there is no selection)\n          if (\n            direction === 'rtl' &&\n            inputRef.current instanceof HTMLInputElement &&\n            inputRef.current?.selectionStart === 0 &&\n            inputRef.current?.selectionEnd === 0\n          ) {\n            textTagListRef.current?.focus();\n          }\n          break;\n\n        case KEYS.ENTER:\n        case KEYS.NUMPAD_ENTER:\n          // if this is on a mobile device (only phone and not a tablet device), do not do anything\n          if (isPhone()) {\n            return;\n          }\n\n          // if add to list is shown, there are no results, so trigger the add to list link\n          if (isAddToListShown) {\n            handleAddToListAction();\n            return;\n          }\n\n          // if there is a currentRow in the dropdown (meaning a highlighted item that would\n          // have keyboard focus if the dropdown list had physical focus, which may be different\n          // from the currently selected item), select it and commit it;\n          if (shouldSelectCurrentRow(currentRow)) {\n            setDropdownOpen(false);\n            // after selecting a value, the user is no longer actively filtering, so update related\n            // state accordingly so that the newly selected value appears in the field\n            stopFiltering();\n            selectRow(currentRow.rowKey);\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [\n      currentRow,\n      direction,\n      handleAddToListAction,\n      hasSelectedValuesCount,\n      inputRef,\n      isAddToListShown,\n      isDropdownOpen,\n      removeDropdown,\n      selectRow,\n      setDropdownOpen,\n      shouldSelectCurrentRow,\n      stopFiltering\n    ]\n  );\n\n  // when the array of valueItems changes, pull out the new set of selectedKeys\n  // (don't need to set selectedKeys here on first render because the state was initialized with\n  // the correct value)\n  if (prevValueItems !== valueItems) {\n    const keys = createKeysFromValueItems<K, D>(valueItems);\n    setSelectedKeys(keys);\n  }\n\n  const chipRef = useRef<HTMLElement | null>(null);\n  useEffect(() => {\n    chipRef.current =\n      hasSelectedValuesCount && mainFieldRef.current?.querySelector\n        ? mainFieldRef.current.querySelector('[role=\"switch\"]')\n        : null;\n  }, [hasSelectedValuesCount, isDisabled, isReadonly, mainFieldRef]);\n\n  const handleSelectedValuesCountKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.TAB:\n          if (isDropdownOpen && !event.shiftKey) {\n            // Remove the dropdown immediately, without waiting for a rerender based on changing\n            // state, so that the open dropdown cannot get focus when the browser handles the\n            // Tab key.\n            removeDropdown();\n\n            setDropdownOpen(false);\n          }\n\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to jump focus to the next cell and skip\n          // over the input\n          if (event.shiftKey) {\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.UP:\n        case KEYS.DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n          break;\n\n        case KEYS.ESC:\n          if (isDropdownOpen) {\n            setDropdownOpen(false);\n\n            event.preventDefault();\n\n            // JET-53183 - core pack compat: stop propagation of handled events\n            // we don't want a parent collection component to stop editing the row when we close\n            // the dropdown\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.ENTER:\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to move focus to the next row when\n          // we toggle between the full and selected only list in the dropdown\n          event.stopPropagation();\n          break;\n\n        default:\n          break;\n      }\n    },\n    [isDropdownOpen, removeDropdown, setDropdownOpen]\n  );\n\n  const handleSelectedValuesCountKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.UP:\n        case KEYS.DOWN:\n          handleUpDownArrowKeys(event);\n          break;\n\n        default:\n          break;\n      }\n    },\n    [handleUpDownArrowKeys]\n  );\n\n  const handleSelectedValuesCountMouseDown = useCallback(\n    (event: MouseEvent) => {\n      // call preventDefault so that the dropdown doesn't open showing the full list on mousedown\n      // on the chip before switching to show only the selected values on mouseup when the click\n      // is handled\n      event.preventDefault();\n      // explicitly focus the input because it won't happen naturally due to preventDefault()\n      inputRef.current?.focus();\n    },\n    [inputRef]\n  );\n\n  const handleSelectedValuesCountToggle = useCallback(\n    (detail: SelectedValuesCountToggleDetailType) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n\n      const value = detail.value ?? false;\n      if (value !== isDropdownSelectedOnlyView) {\n        setDropdownSelectedOnlyView(value);\n\n        // if the selected only toggle is enabled, we need to stop user filtering\n        if (value) {\n          stopFiltering();\n        }\n      }\n    },\n    [isDropdownOpen, isDropdownSelectedOnlyView, setDropdownOpen, stopFiltering]\n  );\n\n  // when the dropdown closes, automatically turn off isDropdownSelectedOnlyView\n  if (!isDropdownOpen && isDropdownSelectedOnlyView) {\n    setDropdownSelectedOnlyView(false);\n  }\n\n  const onSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      const newKeys = new Set(detail.value.keys?.values());\n      // update the selectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for new valueItems to be set\n      setSelectedKeys(newKeys);\n\n      // clear the filter text typed by the user, but do NOT clear the actual filter criterion\n      // or highlighting in the list\n      setUserInput('');\n\n      // call the onCommit callback so that the consuming code can update the valueItems\n      onCommit?.({ value: newKeys, previousValue: selectedKeys });\n    },\n    [onCommit, selectedKeys, setSelectedKeys, setUserInput]\n  );\n\n  const onTextTagListExitNavigation = useCallback(() => {\n    // Focus the input on the next tick. Doing it in the same event cycle will\n    // trigger the key press on the input element which makes the caret move by\n    // one character.\n    setTimeout(() => inputRef.current?.focus(), 0);\n  }, [inputRef]);\n\n  const onTextTagListRemove = useCallback(\n    (keys: K[]) => {\n      const previousValue = selectedKeys;\n      const value = new Set(selectedKeys);\n      keys.forEach((key) => value.delete(key));\n      onCommit?.({ previousValue, value });\n    },\n    [onCommit, selectedKeys]\n  );\n\n  const dropdownEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onAutoDismiss: baseHandleDropdownAutoDismiss,\n        onPosition: handleDropdownPosition\n      },\n      { onAutoDismiss: myHandleDropdownAutoDismiss }\n    );\n  }, [baseHandleDropdownAutoDismiss, handleDropdownPosition, myHandleDropdownAutoDismiss]);\n\n  const inputEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onInput: handleInput,\n        onKeyDown: baseHandleMainFieldKeyDown,\n        onKeyUp: handleMainFieldKeyUp\n      },\n      { onKeyDown: myHandleMainFieldKeyDown }\n    );\n  }, [baseHandleMainFieldKeyDown, handleInput, handleMainFieldKeyUp, myHandleMainFieldKeyDown]);\n\n  const textTagListProps = useMemo(\n    () => ({\n      textTagListRef,\n      onExitNavigation: onTextTagListExitNavigation,\n      onRemove: onTextTagListRemove\n    }),\n    [onTextTagListExitNavigation, onTextTagListRemove]\n  );\n\n  // clear the current item when the dropdown opens\n  if (isDropdownOpen && !prevIsDropdownOpen) {\n    setCurrentRow({ rowKey: undefined });\n  }\n\n  // when the dropdown closes, if the user input is empty, reset filtering\n  const isDropdownClosing = prevIsDropdownOpen && !isDropdownOpen;\n  if (isDropdownClosing && !userInput) {\n    stopFiltering();\n  }\n\n  // We need to highlight the first result whenever the data changes\n  // We cannot use state for the prevData and update it during the render as it is\n  // returned by a useMemo hook.\n  // There is a bug in preact where if a return value of a useMemo is used for\n  // updating a state during the render, it creates an infinite render cycle.\n  // See https://github.com/preactjs/preact/issues/4422.\n  // Till this issue is fixed, we need to use a ref for this use case.\n  const prevData = useRef(data);\n  if (prevData.current !== data) {\n    // when filtering, set the first result of the filtered data set to be the current item\n    // (check the data offset so we don't try to highlight again if the user scrolls through\n    // the list and more data is fetched)\n    const firstResultKey = data?.data[0]?.metadata.key;\n    if (isDropdownOpen && isUserFiltering && firstResultKey != null && data?.offset === 0) {\n      // if there are results and search text, highlight the first row, otherwise clear\n      // an existing highlight\n      setCurrentRow({\n        rowKey: isSearchTextEmptyOrUndefined(searchText) ? undefined : firstResultKey\n      });\n    }\n\n    prevData.current = data;\n  }\n\n  if (prevIsDropdownOpen !== isDropdownOpen) {\n    setPrevIsDropdownOpen(isDropdownOpen);\n  }\n  if (prevValueItems !== valueItems) {\n    setPrevValueItems(valueItems);\n  }\n\n  return {\n    addToListEventHandlers: {\n      onAction: handleAddToListAction\n    },\n    ariaProps: {\n      ariaDescribedBy: combinedAriaDescribedBy\n    },\n    collectionProps: {\n      currentKey: currentRow.rowKey,\n      data,\n      onCurrentKeyChange,\n      onSelectionChange,\n      onLoadRange,\n      selectedKeys\n    },\n    data,\n    dropdownArrowEventHandlers: {\n      onClick: handleDropdownArrowClick\n    },\n    dropdownEventHandlers,\n    dropdownRef,\n    hasSelectedValuesCount,\n    inputEventHandlers,\n    inputRef,\n    isAddToListShown,\n    isDataFetched,\n    isDropdownAbove,\n    isDropdownOpen,\n    isDropdownSelectedOnlyView,\n    isEmptyResults,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    mouseProps: isDisabled || isReadonly ? {} : { onMouseDown },\n    searchText,\n    selectedValuesCountProps: {\n      onKeyDown: handleSelectedValuesCountKeyDown,\n      onKeyUp: handleSelectedValuesCountKeyUp,\n      onMouseDown: handleSelectedValuesCountMouseDown,\n      onToggle: handleSelectedValuesCountToggle\n    },\n    selectedValuesDescriptionId,\n    selectedValuesKeyboardNavDescriptionId,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    textTagListProps,\n    userInput\n  };\n}\n\nfunction createKeysFromValueItems<K, D>(valueItems?: Item<K, D>[]) {\n  const keys = valueItems?.reduce((accumKeys, currentItem) => {\n    accumKeys.add(currentItem.key);\n    return accumKeys;\n  }, new Set<K>());\n  return keys;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  SelectMobileFieldInput,\n  isBeforeDataFetch,\n  isMobile,\n  isPhone,\n  isTablet\n} from '#PRIVATE_SelectCommon';\nimport { DataState } from '#UNSAFE_Collection';\nimport { Label } from '#UNSAFE_Label';\nimport { ReadonlyTextField, ReadonlyTextFieldInput, TextFieldInput } from '#UNSAFE_TextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '#UNSAFE_UserAssistance';\nimport { VirtualizedListView } from '#UNSAFE_VirtualizedListView';\nimport { FocusableHandle, useFocusableTextField } from '#hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useLoadingIndicatorTimer } from '#hooks/UNSAFE_useLoadingIndicatorTimer';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { useTextField } from '#hooks/UNSAFE_useTextField';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { Item } from '#utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '#utils/UNSAFE_selectUtils';\nimport { Size } from '#utils/UNSAFE_size';\nimport { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { ComponentChildren, ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { ItemRendererProps } from './SelectMultiple.types';\nimport { SelectMultipleDesktopDropdown } from './SelectMultipleDesktopDropdown';\nimport { SelectMultipleField } from './SelectMultipleField';\nimport { SelectMultipleFieldInput } from './SelectMultipleFieldInput';\nimport { SelectMultipleMobileDropdown } from './SelectMultipleMobileDropdown';\nimport { useDisplayValues } from './useDisplayValues';\nimport { useSelectMultiple } from './useSelectMultiple';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\ntype SelectMultipleFieldInputProps = ComponentProps<typeof SelectMultipleFieldInput>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = TestIdProps & {\n  /**\n   * Specifies whether the add to list link is shown in the dropdown when the user filters\n   * and there are no results.\n   * It is up to the application to show its own UI when the link is triggered.\n   */\n  addToList?: 'on' | 'off';\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n  /**\n   * Text to provide guidance to help the user understand what data to enter or select.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * Specifies data for the dropdown list.\n   *\n   * Note that the <code>itemText</code> property allows for customizing the rendering\n   * of each data item.\n   */\n  data?: DataState<K, D> | null;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is waiting for <code>valueItems</code> to load.\n   * While loading, SelectMultiple will show the progressive loading indicator in the text field.\n   */\n  isLoading?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * selected by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be selected by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has selected a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Render function for an item in the default list in the dropdown.\n   */\n  itemRenderer?: (itemRendererProps: ItemRendererProps<K, D>) => ComponentChildren;\n  /**\n   * Specifies how to get the text string to render for a data item.\n   * This property can be set to either:\n   * <ul>\n   * <li>a string that specifies the name of a top level data attribute to render as text, or</li>\n   * <li>a callback function that takes a properties object and returns the text string to\n   * display.</li>\n   * </ul>\n   *\n   * This text will be rendered for the selected <code>valueItems</code> of the component.\n   * It will also be rendered for each item in the dropdown.  When rendered for the\n   * dropdown items, default matching search term highlighting will still be applied.\n   */\n  itemText: ItemTextType<K, D>;\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user selects or enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * Specifies the keys, data, and optional metadata for the selected values.\n   */\n  valueItems?: Item<K, D>[];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: SelectMultipleFieldInputProps['virtualKeyboard'];\n  /**\n   * Callback function called when the user triggers the add to list link shown in the dropdown.\n   */\n  onAddToListAction?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback invoked when the user commits the selected values.\n   *\n   * The function should set a new array as the <code>valueItems</code> property.\n   */\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  /**\n   * Callback function to trigger loading data for the dropdown list, which may or may not be\n   * filtered by user entered search text.\n   *\n   * The function should set a new <code>DataState</code> as the <code>data</code> property.\n   */\n  onFilter?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback function to handle when the viewport of the dropdown list has changed, for example\n   * by scrolling, including the case where the user scrolls to the end of the list and there are\n   * more items to load.\n   *\n   * The function should set a new <code>DataState</code> for the specified range as the\n   * <code>data</code> property.\n   */\n  onLoadRange?: ComponentProps<typeof VirtualizedListView>['onLoadRange'];\n};\n\n/**\n * A SelectMultiple is a dropdown list that supports multiple selection and search filtering.\n */\nexport const SelectMultiple = forwardRef(\n  <K extends string | number, D extends Record<string, any>>(\n    {\n      addToList = 'off',\n      'aria-describedby': propAriaDescribedBy,\n      assistiveText,\n      columnSpan,\n      data: propData,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isLoading: propIsLoading,\n      isReadonly: propIsReadonly,\n      isRequired,\n      isRequiredShown,\n      itemRenderer,\n      itemText,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      onAddToListAction,\n      onCommit,\n      onFilter,\n      onLoadRange: propOnLoadRange,\n      placeholder,\n      testId,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      valueItems,\n      variant = 'default',\n      virtualKeyboard\n    }: Props<K, D>,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const {\n      enabledElementRef,\n      focusProps,\n      isFocused: origIsFocused,\n      readonlyElementRef\n    } = useFocusableTextField<HTMLElement, HTMLDivElement>({ isDisabled, isReadonly, ref });\n\n    const {\n      addToListEventHandlers,\n      ariaProps,\n      collectionProps,\n      data,\n      dropdownArrowEventHandlers,\n      dropdownEventHandlers,\n      dropdownRef,\n      hasSelectedValuesCount,\n      inputEventHandlers,\n      isAddToListShown,\n      isDataFetched,\n      isDropdownAbove,\n      isDropdownOpen,\n      isDropdownSelectedOnlyView,\n      isEmptyResults,\n      isFocused,\n      isUserFiltering,\n      mainFieldRef,\n      mouseProps,\n      searchText,\n      selectedValuesCountProps,\n      selectedValuesDescriptionId,\n      selectedValuesKeyboardNavDescriptionId,\n      setDropdownOpen,\n      setUserInput,\n      stopFiltering,\n      textTagListProps,\n      userInput\n    } = useSelectMultiple<K, D>({\n      addToList,\n      ariaDescribedBy: propAriaDescribedBy,\n      data: propData,\n      inputRef: enabledElementRef,\n      isDisabled,\n      isFocused: origIsFocused,\n      isReadonly,\n      onAddToListAction,\n      onCommit,\n      onFilter,\n      onLoadRange: propOnLoadRange,\n      valueItems\n    });\n\n    // The incoming propIsLoading tells us that we are in a loading state, but we don't want to\n    // show the loading indicator until after a delay, because showing it immediately could result\n    // in unwanted flashing.  The isLoading var below will be set to true by useLoadingIndicatorTimer\n    // after the delay, when the timer expires, at which point we should show the loading indicator.\n    // If propIsLoading is set to false before the timer expires, then the timer will be cancelled\n    // and no loading indicator will be shown.\n    // (ListView detects its loading state by checking data === null.  While it would be nice for\n    // us to be consistent and check valueItems === null, we need to use a separate isLoading prop.\n    // If valueItems === null triggers our loading state, then the selections in the dropdown\n    // are cleared for that period of time, which is undesirable.)\n    const isLoading = useLoadingIndicatorTimer(propIsLoading ?? false);\n\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy: ariaProps.ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isFocused,\n      isLoading,\n      isReadonly,\n      isRequiredShown,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      userAssistanceDensity,\n      value: valueItems !== undefined && valueItems.length > 0 ? true : undefined\n    });\n\n    // JET-54256 - inside label animates up on initial display with selected value\n    // If we're waiting for the selected values to load, the component should look like it\n    // has a value in the meantime.\n    // Use the original propIsLoading instead of isLoading because we don't want to delay\n    // the inside label position by a timer like we do the progressive loading indicator.\n    formFieldContext.hasValue = propIsLoading || formFieldContext.hasValue;\n\n    const dropdownId = `${baseId}-dropdown`;\n\n    const { displayValue, textTags } = useDisplayValues(itemText, valueItems);\n\n    // Do not set a forId in phone as we will be using aria-labelledby instead.\n    // This is because we will using a div and not input when rendering in a phone.\n    const labelComp =\n      labelEdge !== 'none' ? (\n        <Label {...labelProps} {...(isPhone() ? { forId: undefined } : {})}>\n          {label}\n        </Label>\n      ) : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={mainFieldRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n    if (isReadonly) {\n      const mainContent = (\n        <ReadonlyTextFieldInput\n          aria-describedby={inputProps['aria-describedby']}\n          aria-label={ariaLabel}\n          aria-labelledby={labelProps.id}\n          as=\"div\"\n          elementRef={readonlyElementRef}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n          textAlign={textAlign}\n          value={displayValue}\n        />\n      );\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onFocusOut}\n            onFocus={focusProps.onFocusIn}\n            ref={mainFieldRef}\n            mainContent={mainContent}\n            testId={testId}\n            {...fieldLabelProps}></ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const hasInsideLabel = labelEdge === 'inside';\n    const liveRegionText =\n      isDropdownOpen && isDataFetched\n        ? data?.totalSize === 0\n          ? translations.select_noMatchesFound()\n          : data?.totalSize === 1\n          ? translations.select_oneMatchFound()\n          : data?.sizePrecision === 'exact'\n          ? translations.select_sizeMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n          : translations.select_sizeOrMoreMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n        : '';\n\n    const shouldShowDropdown =\n      isDropdownOpen &&\n      data !== undefined &&\n      (data === null || data.totalSize > 0 || isBeforeDataFetch<K, D>(data) || isEmptyResults);\n\n    const hasEmptyLabel = label === '' && labelEdge === 'none';\n\n    // Use the mobile field if the component is being rendered in a phone\n    // and it is not disabled.\n    const isPhoneMainFieldInput = isPhone() && !isDisabled;\n    const mainFieldInput = !isPhoneMainFieldInput ? (\n      <SelectMultipleFieldInput\n        aria-controls={dropdownId}\n        aria-expanded={isDropdownOpen}\n        aria-label={ariaLabel}\n        displayValue={displayValue}\n        hasEmptyLabel={hasEmptyLabel}\n        hasInsideLabel={hasInsideLabel}\n        inputRef={enabledElementRef as Ref<HTMLInputElement>}\n        isAddToListShown={isAddToListShown}\n        isKeyboardNavigable={!isDisabled && !isMobile()}\n        isRequired={isRequired}\n        isTextTagListShown={isFocused && textTags.length !== 0}\n        isUserFiltering={isUserFiltering}\n        liveRegionText={liveRegionText}\n        placeholder={placeholder}\n        // we only want the remove icon in the main field for tablets\n        removeIcon={isTablet() ? 'always' : 'never'}\n        selectedValuesDescriptionId={selectedValuesDescriptionId}\n        selectedValuesKeyboardNavDescriptionId={selectedValuesKeyboardNavDescriptionId}\n        textAlign={textAlign}\n        textTagListData={textTags}\n        userInput={userInput}\n        // In tablet, we would want to show the virtual keyboard\n        virtualKeyboard={isTablet() ? virtualKeyboard : undefined}\n        {...inputEventHandlers}\n        {...inputProps}\n        {...textTagListProps}\n      />\n    ) : (\n      <SelectMobileFieldInput\n        aria-controls={dropdownId}\n        aria-describedby={inputProps['aria-describedby']}\n        aria-expanded={isDropdownOpen}\n        aria-invalid={inputProps['aria-invalid']}\n        aria-label={ariaLabel}\n        aria-labelledby={labelProps.id}\n        displayValue={displayValue}\n        hasEmptyLabel={hasEmptyLabel}\n        hasInsideLabel={hasInsideLabel}\n        isRequired={isRequired}\n        onBlur={inputProps.onBlur}\n        onFocus={inputProps.onFocus}\n        placeholder={placeholder}\n        ref={enabledElementRef as Ref<HTMLDivElement>}\n        textAlign={textAlign}\n        variant={inputProps.variant}\n      />\n    );\n\n    const dropdown = !shouldShowDropdown ? null : isPhone() ? (\n      <SelectMultipleMobileDropdown\n        aria-describedby={ariaProps.ariaDescribedBy}\n        aria-label={ariaLabel}\n        assistiveText={assistiveText}\n        // We always pass the whole data here. As the change made in the mobile dropdown\n        // exists only in the mobile dropdown, we let it decide how to render the data.\n        data={propData}\n        dropdownId={dropdownId}\n        enabledElementRef={enabledElementRef}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        isAddToListShown={isAddToListShown}\n        isDisabled={isDisabled}\n        isEmptyResults={isEmptyResults}\n        isFocused={isFocused}\n        isLoading={isLoading}\n        isOpen={shouldShowDropdown}\n        isReadonly={isReadonly}\n        isRequired={isRequired}\n        isSelectedOnlyView={isDropdownSelectedOnlyView}\n        isUserFiltering={isUserFiltering}\n        itemRenderer={itemRenderer}\n        itemText={itemText}\n        label={label}\n        liveRegionText={liveRegionText}\n        placeholder={placeholder}\n        propIsLoading={propIsLoading}\n        searchText={searchText}\n        selectedValuesDescriptionId={selectedValuesDescriptionId}\n        setDropdownOpen={setDropdownOpen}\n        setUserInput={setUserInput}\n        stopFiltering={stopFiltering}\n        textAlign={textAlign}\n        textTagListRef={textTagListProps.textTagListRef}\n        userAssistanceDensity={userAssistanceDensity}\n        userInput={userInput}\n        valueItems={valueItems}\n        virtualKeyboard={virtualKeyboard}\n        onAddToListAction={addToListEventHandlers.onAction}\n        onCommit={onCommit}\n        onFieldBlur={focusProps.onFocusOut}\n        onFieldFocus={focusProps.onFocusIn}\n        onFieldInput={inputEventHandlers.onInput}\n        onFieldKeyDown={inputEventHandlers.onKeyDown}\n        onFieldKeyUp={inputEventHandlers.onKeyUp}\n        onLoadRange={propOnLoadRange}\n      />\n    ) : (\n      <SelectMultipleDesktopDropdown\n        {...collectionProps}\n        {...dropdownEventHandlers}\n        assistiveText={assistiveText}\n        dropdownId={dropdownId}\n        dropdownRef={dropdownRef}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        isAddToListShown={isAddToListShown}\n        isDisabled={isDisabled}\n        isDropdownAbove={isDropdownAbove}\n        isEmptyResults={isEmptyResults}\n        isOpen={shouldShowDropdown}\n        isReadonly={isReadonly}\n        isSelectedOnlyView={isDropdownSelectedOnlyView}\n        isUserFiltering={isUserFiltering}\n        itemRenderer={itemRenderer}\n        itemText={itemText}\n        label={label}\n        mainFieldRef={mainFieldRef}\n        onAddToListAction={addToListEventHandlers.onAction}\n        searchText={searchText}\n        userAssistanceDensity={userAssistanceDensity}\n      />\n    );\n\n    return (\n      <Fragment>\n        <FormFieldContext.Provider value={formFieldContext}>\n          <SelectMultipleField\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            fieldLabel={label}\n            hasInsideLabel={hasInsideLabel}\n            inlineUserAssistance={inlineUserAssistance}\n            isDropdownArrowShown={true}\n            isDropdownSelectedOnlyView={isDropdownSelectedOnlyView}\n            isSelectedValuesCountShown={hasSelectedValuesCount}\n            mainFieldRef={mainFieldRef}\n            onBlur={focusProps.onFocusOut}\n            onFocus={focusProps.onFocusIn}\n            onDropdownArrowClick={dropdownArrowEventHandlers.onClick}\n            onSelectedValuesCountKeyDown={selectedValuesCountProps.onKeyDown}\n            onSelectedValuesCountKeyUp={selectedValuesCountProps.onKeyUp}\n            onSelectedValuesCountMouseDown={selectedValuesCountProps.onMouseDown}\n            onSelectedValuesCountToggle={selectedValuesCountProps.onToggle}\n            selectedValuesCount={valueItems?.length}\n            testId={testId}\n            {...fieldLabelProps}\n            {...mouseProps}\n            {...textFieldProps}>\n            {mainFieldInput}\n          </SelectMultipleField>\n        </FormFieldContext.Provider>\n        {dropdown}\n      </Fragment>\n    );\n  }\n);\n"],"names":["SelectMultipleDesktopDropdown","assistiveText","currentKey","data","dropdownId","dropdownRef","helpSourceLink","helpSourceText","isAddToListShown","isDisabled","isDropdownAbove","isEmptyResults","isOpen","isReadonly","isSelectedOnlyView","isUserFiltering","itemRenderer","itemText","label","mainFieldRef","searchText","selectedKeys","userAssistanceDensity","onAddToListAction","onAutoDismiss","onCurrentKeyChange","onLoadRange","onPosition","onSelectionChange","translations","useTranslationBundle","dropdownInlineUserAssistance","undefined","_jsx","DropdownUserAssistance","fieldLabel","dropdownListContent","EmptyResults","DefaultList","currentItemVariant","selectionMode","addToListContent","LinkItem","isHighlighted","onAction","children","select_addToList","_jsxs","Dropdown","id","anchorRef","DropdownList","hasBottomGap","isLoading","SelectedValuesCount","ariaLabel","count","onKeyDown","onKeyUp","onMouseDown","passThroughProps","instructions","selectMultiple_showSelectedValues","accLabel","ninetyNinePlus","selectMultiple_countPlus","COUNT","chipCount","selectMultiple_valuesSelected","VALUE_COUNT","class","selectedValueCountStyles","base","jsx","Chip","SelectMultipleField","columnSpan","hasInsideLabel","isBackButtonShown","isClearButtonShown","isDropdownArrowShown","isDropdownSelectedOnlyView","isSelectedValuesCountShown","selectedValuesCount","onBackButtonClick","onClearButtonClick","onDropdownArrowClick","onSelectedValuesCountKeyDown","onSelectedValuesCountKeyUp","onSelectedValuesCountMouseDown","onSelectedValuesCountToggle","passThroughTextFieldProps","useFormFieldContext","backButton","IconButton","selectMultiple_back","size","variant","NavLeft","clearButton","formControl_clear","CancelS","dropdownArrow","DropdownArrow","onClick","testId","endContent","Flex","align","justify","gap","isSelected","onToggle","TextField","startContent","mainContent","TextTag","removeIcon","onRemoveAction","onSelect","onRemoveIconClick","isFocused","value","spanRef","useRef","navigationTextId","useId","rootClasses","classNames","textTagStyles","selected","onRemoveActionCallback","useCallback","onSelectCallback","onRemoveIconClickCallback","event","isBackspaceOrDelete","useEffect","current","focus","scrollIntoView","block","jsxs","ref","tabIndex","preventDefault","role","Text","TabbableModeContext","Provider","isTabbable","CloseIcon","SvgClose","HiddenAccessible","selectMultiple_removeSelectedTagInstructionText","supportedInterpolations","Array","from","x","dimensionInterpolations","styleInterpolations","mergeInterpolations","TextTagList","forwardRef","props","onExitNavigation","onRemove","divRef","selectedTags","setSelectedTags","useState","direction","useUser","currentSelectedTagIndex","lastTag","at","lastTagMeta","index","length","selectTagAtIndex","key","clearSelection","previousSelectedTags","onTagRemoveIconClick","onTagRemoveAction","valuesToRemove","includes","push","onTagSelect","findIndex","tag","onTagKeyDown","code","isSelectAll","map","handleOnFocus","handleOnBlur","focusProps","useFocusWithin","onBlurWithin","useImperativeHandle","blur","scrollTo","left","scrollWidth","styles","textTagListStyles","textTagListBase","textTagListInsideLabel","style","SelectMultipleFieldInput","displayValue","isKeyboardNavigable","isTextTagListShown","liveRegionText","selectedValuesDescriptionId","selectedValuesKeyboardNavDescriptionId","textTagListData","textTagListRef","userInput","virtualKeyboard","passThroughTextFieldInputProps","addToListAccText","select_addToListAvailable","accTextTagsNav","selectMultiple_highlightSelectedTagsInstructionText","isInputFocused","prevAccTextTagsNav","setPrevAccTextTagsNav","isAccTextTagsNavLive","setIsAccTextTagsNavLive","_Fragment","Fragment","selectMultiple_selectedValues","maxWidth","flex","TextFieldInput","autoComplete","hasPrefix","hasEndContent","spellcheck","type","isHidden","LiveRegion","MobileDropdownFooter","onApply","mobileDropdownFooterStyles","Button","display","edge","selectMultiple_apply","useDisplayValues","valueItems","separator","plural_separator","useMemo","displayValues","selectedItems","arValues","values","mapFunc","itemContext","renderItemText","mappedArray","Set","createDisplayValues","concatenatedDisplayValues","join","concatDisplayValues","textTags","item","createTextTags","useSelectedOnlyData","STABLE_dataStateFactory","useEffectEvent","offset","totalSize","sizePrecision","valueItem","metadata","DEFAULT_VALUE_ITEMS","updateCache","cache","keys","forEach","has","set","keysFromValueItems","i","SelectMultipleMobileDropdown","ariaDescribedBy","enabledElementRef","isRequired","propIsSelectedOnlyView","placeholder","propIsLoading","setDropdownOpen","setUserInput","stopFiltering","textAlign","onCommit","onFieldBlur","onFieldFocus","onFieldInput","onFieldKeyDown","onFieldKeyUp","collectionProps","mobileDropdownCollectionProps","footerProps","mobileDropdownFooterProps","selectMultipleFieldInputProps","mobileDropdownSelectMultipleFieldInputProps","selectMultipleFieldProps","mobileDropdownSelectMultipleFieldProps","selectedValuesCountProps","mobileDropdownSelectedValueCountProps","inputRef","isDropdownOpen","currentRow","setCurrentRow","rowKey","dropdownSelectedKeys","setDropdownSelectedKeys","isInternalSelectedOnlyView","setIsInternalSelectedOnlyView","dataCache","Map","currentValueItems","items","find","get","dropdownInputRef","selectedOnlyData","selectedOnlyOnLoadRange","detail","newKeys","currentIsInternalSelectedOnlyView","closeDropdown","v","clear","previousValue","onTextTagRemove","newSelectedKeys","delete","onTextTagExitNavigation","setTimeout","wasDropdownOpen","prevValueItems","setPrevValueItems","prevDropdownSelectedKeys","nextDropdownSelectedKeys","equals","hasEmptyLabel","isSearchTextEmptyOrUndefined","styleVariant","useMobileDropdown","formFieldContext","mobileDropdownFormFieldContext","inputProps","mobileDropdownInputProps","labelProps","mobileDropdownLabelProps","textFieldProps","mobileDropdownTextFieldProps","userAssistanceProps","mobileDropdownUserAssistanceProps","useTextField","isRequiredShown","labelEdge","hasValue","mobileDropdownFieldLabelProps","Label","SelectMobileDropdown","header","FormFieldContext","View","onBlur","onFocus","onInput","footer","hasTopGap","createKeysFromValueItems","reduce","accumKeys","currentItem","add","SelectMultiple","addToList","propAriaDescribedBy","propData","propIsDisabled","propIsReadonly","propLabelEdge","labelStartWidth","propLabelStartWidth","messages","onFilter","propOnLoadRange","propTextAlign","propUserAssistanceDensity","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","origIsFocused","readonlyElementRef","useFocusableTextField","addToListEventHandlers","ariaProps","dropdownArrowEventHandlers","dropdownEventHandlers","hasSelectedValuesCount","inputEventHandlers","isDataFetched","mouseProps","textTagListProps","propIsFocused","setDropdownSelectedOnlyView","selectedOnlyDataProps","handleOnFilter","args","handleDropdownArrowClick","handleDropdownAutoDismiss","baseHandleDropdownAutoDismiss","handleDropdownPosition","handleInput","handleMainFieldKeyDown","baseHandleMainFieldKeyDown","handleMainFieldKeyUp","handleUpDownArrowKeys","useSelectCommon","prevIsDropdownOpen","setPrevIsDropdownOpen","setSelectedKeys","isBeforeDataFetch","handleAddToListAction","combinedAriaDescribedBy","merge","removeDropdown","parentElement","removeChild","shouldSelectCurrentRow","currentRowArg","selectRow","newValue","myHandleDropdownAutoDismiss","keyboardEvent","KEYS","TAB","shiftKey","chipRef","myHandleMainFieldKeyDown","isControlOrFunctionKey","stopPropagation","LEFT","HTMLInputElement","selectionStart","selectionEnd","RIGHT","ENTER","NUMPAD_ENTER","isPhone","querySelector","handleSelectedValuesCountKeyDown","UP","DOWN","ESC","handleSelectedValuesCountKeyUp","handleSelectedValuesCountMouseDown","handleSelectedValuesCountToggle","onTextTagListExitNavigation","onTextTagListRemove","mergeProps","prevData","firstResultKey","useSelectMultiple","useLoadingIndicatorTimer","baseId","labelComp","forId","fieldLabelProps","inlineUserAssistance","InlineUserAssistance","compactUserAssistance","CompactUserAssistance","ReadonlyTextFieldInput","as","elementRef","ReadonlyTextField","onFocusOut","onFocusIn","select_noMatchesFound","select_oneMatchFound","select_sizeMatchesFound","TOTAL_SIZE","select_sizeOrMoreMatchesFound","shouldShowDropdown","mainFieldInput","SelectMobileFieldInput","isMobile","isTablet","dropdown"],"mappings":"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"}
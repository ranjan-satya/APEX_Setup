{"version":3,"file":"TextFieldInput-3c39cb7b.js","sources":["../../src/UNSAFE_TextField/TextFieldInput.tsx"],"sourcesContent":["import { Ref } from 'preact';\nimport { useRef, useLayoutEffect } from 'preact/hooks';\nimport { useAccessibleContext } from '#hooks/UNSAFE_useAccessibleContext';\nimport { useFormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useTabbableMode } from '#hooks/UNSAFE_useTabbableMode';\nimport { useTextFieldInputHandlers } from '../hooks/UNSAFE_useTextFieldInputHandlers';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport type { TextProps } from '#utils/UNSAFE_interpolations/text';\nimport { textInterpolations } from '#utils/UNSAFE_interpolations/text';\nimport { mergeInterpolations } from '#utils/UNSAFE_mergeInterpolations';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { isInputPlaceholderShown } from './TextFieldUtils';\nimport {\n  AriaAttributesSignalExcluded,\n  HTMLAttributesSignalExcluded\n} from '#utils/UNSAFE_attributeUtils';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { TextFieldInputVariantOptions } from './themes/TextFieldInputStyles.css';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { TextFieldInputRedwoodTheme } from './themes/redwood/TextFieldInputTheme';\n\nconst interpolations = [...Object.values(textInterpolations)];\n\nconst styleInterpolations = mergeInterpolations<Props>(interpolations);\n\n// The WHATWG forms spec specifies the following input types that support setSelectedRange\nconst supportsSetSelection = ['text', 'search', 'url', 'tel', 'password', 'textarea'];\n\ntype Autocomplete = 'off' | 'on' | string;\n\ntype OrigPickedPropsFromInput = Pick<\n  HTMLAttributesSignalExcluded<HTMLInputElement>,\n  'autofocus' | 'id' | 'placeholder' | 'required' | 'role' | 'spellcheck' | 'type'\n>;\ntype RenamedPropsFromInput = Omit<\n  OrigPickedPropsFromInput,\n  'autofocus' | 'readonly' | 'required'\n> & {\n  autoFocus?: OrigPickedPropsFromInput['autofocus'];\n  isRequired?: OrigPickedPropsFromInput['required'];\n};\ntype InputProps = {\n  as?: 'input';\n  type?: Pick<HTMLAttributesSignalExcluded<HTMLInputElement>, 'type'>['type'];\n  rows?: never;\n  inputRef?: Ref<HTMLInputElement>;\n  hasPrefix?: boolean;\n  hasSuffix?: boolean;\n};\n\ntype TextAreaProps = {\n  as: 'textarea';\n  type?: never;\n  rows?: number;\n  inputRef?: Ref<HTMLTextAreaElement>;\n  hasPrefix?: never;\n  hasSuffix?: never;\n};\n\ntype FocusProps = Pick<HTMLAttributesSignalExcluded<HTMLElement>, 'onBlur' | 'onFocus'>;\n\ntype UniqueProps = InputProps | TextAreaProps;\n\ntype AriaProps = Pick<\n  AriaAttributesSignalExcluded,\n  | 'aria-autocomplete'\n  | 'aria-controls'\n  | 'aria-describedby'\n  | 'aria-expanded'\n  | 'aria-invalid'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-valuemax'\n  | 'aria-valuemin'\n  | 'aria-valuenow'\n  | 'aria-valuetext'\n>;\n\ntype Props = UniqueProps &\n  TextProps &\n  RenamedPropsFromInput &\n  AriaProps &\n  FocusProps & {\n    autoComplete?: Autocomplete;\n    // TODO: Should we expose has* props like these or should we pass this info\n    // via FormFieldContext?  (from review on 3/8/22)\n    currentCommitValue?: string;\n    hasEmptyLabel?: boolean;\n    hasEndContent?: boolean;\n    hasInsideLabel?: boolean;\n    hasStartContent?: boolean;\n    value?: string;\n    variant?: 'default' | 'embedded';\n    onInput?: (detail: ValueUpdateDetail<string>) => void;\n    onCommit?: (detail: ValueUpdateDetail<string>) => void;\n    onKeyDown?: (event: KeyboardEvent) => void;\n    onKeyUp?: (event: KeyboardEvent) => void;\n  };\n\n/**\n * Merge multiple ids into a space-separated list\n * @param ids The ids to be merged\n * @returns The space separated string of ids\n */\nfunction mergeIDs(...ids: (string | undefined)[]) {\n  return ids.filter(Boolean).join(' ') || undefined;\n}\n\nexport const TextFieldInput = ({\n  as = 'input',\n  'aria-autocomplete': ariaAutoComplete,\n  'aria-controls': ariaControls,\n  'aria-describedby': ariaDescribedBy,\n  'aria-expanded': ariaExpanded,\n  'aria-invalid': ariaInvalid,\n  'aria-label': ariaLabel,\n  'aria-labelledby': inputLabelledBy,\n  'aria-valuemax': ariaValueMax,\n  'aria-valuemin': ariaValueMin,\n  'aria-valuenow': ariaValueNow,\n  'aria-valuetext': ariaValueText,\n  autoComplete,\n  autoFocus,\n  currentCommitValue,\n  hasEmptyLabel,\n  hasEndContent = false,\n  hasInsideLabel = false,\n  hasPrefix = false,\n  hasStartContent = false,\n  hasSuffix = false,\n  id,\n  inputRef,\n  placeholder,\n  isRequired,\n  role,\n  rows,\n  spellcheck,\n  type,\n  value = '',\n  variant = 'default',\n  onInput,\n  onCommit,\n  onKeyDown,\n  onKeyUp,\n  onBlur,\n  onFocus,\n  ...props\n}: Props) => {\n  const { isDisabled, isFocused, isLoading, isReadonly } = useFormFieldContext();\n  const { class: styleInterpolationClasses } = styleInterpolations(props);\n  const hasValue = value !== '';\n  const isTextArea = as === 'textarea';\n  const isInput = as === 'input';\n  const isPassword = type === 'password';\n  const renderPrefix = !isDisabled && hasPrefix;\n  const renderSuffix = !isDisabled && hasSuffix;\n  const myPlaceholder = isInputPlaceholderShown(hasInsideLabel, hasValue, isFocused)\n    ? placeholder\n    : undefined;\n\n  const { classes } = useComponentTheme<TextFieldInputVariantOptions>(TextFieldInputRedwoodTheme, {\n    type: isPassword ? 'isPassword' : 'notPassword',\n    styleVariant: variant,\n    textarea: isTextArea ? 'isTextArea' : 'notTextArea',\n    input: isInput ? 'isInput' : 'notInput',\n    div: 'notDiv',\n    prefix: renderPrefix ? 'hasPrefix' : 'noPrefix',\n    suffix: renderSuffix ? 'hasSuffix' : 'noSuffix',\n    startContent: hasStartContent ? 'hasStartContent' : 'noStartContent',\n    endContent: hasEndContent ? 'hasEndContent' : 'noEndContent',\n    insideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n    value: hasValue ? 'hasValue' : 'noValue',\n    focused: isFocused ? 'isFocused' : 'notFocused',\n    disabled: isDisabled ? 'isDisabled' : 'notDisabled'\n  });\n\n  const inputClasses = classNames([classes, styleInterpolationClasses]);\n  const Comp = as || 'input';\n\n  // ref to hold the text selection to restore.\n  const selectionRef = useRef({\n    start: 0,\n    end: 0\n  });\n\n  const textFieldInputHandlers = useTextFieldInputHandlers({\n    currentCommitValue,\n    // Enter should not commit for textarea.\n    isCommitOnEnter: as === 'input',\n    value,\n    onInput,\n    onCommit,\n    onKeyDown,\n    selectionRef\n  });\n  const handlers = mergeProps(textFieldInputHandlers, { onBlur, onFocus });\n  // the implicit default for tabindex on an input is 0, so do not explicitly set it.\n  // JET-52914 - Implement Tabbable mode API contract in InputText\n  // if not tabbable, spread tabbableModeProps on component\n  const { isTabbable, tabbableModeProps } = useTabbableMode();\n  // TODO: for autoComplete='off', need to configure attrs appropriately to make sure it\n  // works across browsers and versions  (from review on 3/11/22)\n\n  // JET-52089: add unsafe API for specifying an external label which is added to ariaLabelledBy on the input,\n  // only when labelEdge is 'none' and label is ''. Since ariaLabelledBy takes precedence over all other\n  // kinds of labels, this helps to ensure we don't override a meaningful label.\n  const { UNSAFE_ariaLabelledBy } = useAccessibleContext();\n  const ariaLabelledBy = hasEmptyLabel\n    ? mergeIDs(inputLabelledBy, UNSAFE_ariaLabelledBy)\n    : inputLabelledBy;\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const loadingAriaLabel = translations.formControl_loading();\n\n  // Restore the saved selection when the value changes.  See JET-62763 for info on why this is needed.\n  useLayoutEffect(() => {\n    // This should never be a function in this case, This is here because of the Ref type.\n    if (typeof inputRef !== 'function') {\n      const inpElem = inputRef?.current;\n      // only set the selection range if the element has focus\n      // only set the selection range on supported types.\n      if (\n        document.activeElement === inpElem &&\n        inpElem &&\n        supportsSetSelection.includes(inpElem.type)\n      ) {\n        inpElem.setSelectionRange(selectionRef.current.start, selectionRef.current.end);\n      }\n    }\n  }, [value, inputRef]);\n\n  return (\n    <Comp\n      aria-autocomplete={ariaAutoComplete}\n      aria-controls={ariaControls}\n      aria-describedby={ariaDescribedBy}\n      aria-expanded={ariaExpanded}\n      aria-invalid={ariaInvalid}\n      aria-label={isLoading ? loadingAriaLabel : ariaLabel ? ariaLabel : undefined}\n      aria-labelledby={ariaLabelledBy}\n      aria-required={isRequired ? true : undefined}\n      aria-valuemax={ariaValueMax}\n      aria-valuemin={ariaValueMin}\n      aria-valuenow={ariaValueNow}\n      aria-valuetext={ariaValueText}\n      autocomplete={autoComplete}\n      autofocus={autoFocus}\n      class={inputClasses}\n      disabled={isDisabled}\n      id={id}\n      onKeyUp={onKeyUp}\n      placeholder={myPlaceholder}\n      readonly={isReadonly}\n      // @ts-ignore\n      ref={inputRef}\n      role={role}\n      rows={rows}\n      spellcheck={spellcheck}\n      type={type}\n      value={value}\n      {...handlers}\n      {...(!isTabbable && tabbableModeProps)}\n    />\n  );\n};\n"],"names":["_jsx"],"mappings":"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"}
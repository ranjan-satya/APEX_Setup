{"version":3,"file":"MenuButton-58fd9f46.js","sources":["../../src/UNSAFE_MenuButton/MenuButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ButtonLabelLayout } from '../UNSAFE_ButtonLabelLayout';\nimport { MenuButtonDropdownIcon } from '../PRIVATE_ThemedIcons/MenuButtonDropdownIcon';\nimport { Menu } from '../UNSAFE_Menu';\nimport { useMenuAction, MenuToggleDetail } from '../hooks/UNSAFE_useMenuAction';\nimport { BaseButton } from '../UNSAFE_BaseButton';\n\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\n\nimport { ComponentChildren, ComponentChild, Fragment } from 'preact';\nimport { forwardRef, ForwardedRef } from 'preact/compat';\nimport { useRef, useImperativeHandle } from 'preact/hooks';\n\ntype IntrinsicProps = Pick<\n  HTMLAttributesSignalExcluded<HTMLElement>,\n  | 'autofocus'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onMouseEnter'\n  | 'onMouseLeave'\n  | 'onTouchEnd'\n  | 'onTouchStart'\n>;\n\ntype WidthInterpolationProps = Pick<DimensionProps, 'width'>;\n\nexport type Props = IntrinsicProps &\n  WidthInterpolationProps &\n  TestIdProps & {\n    /**\n     * children - One or more MenuItems, dividers, or Menu groups\n     */\n    children?: ComponentChildren;\n\n    /**\n     * The icon shown to the left of the label (or to the right of the\n     * label in right to left mode). Note that this is not the menu\n     * expand icon shown to the right of the label (or to the left of\n     * the label in right to left mode).\n     */\n    icon?: ComponentChild;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Specifes the button type\n     */\n    type?: 'button' | 'submit';\n\n    /**\n     * The button label\n     */\n    label?: string;\n\n    /**\n     * Specifies if the menu is open\n     */\n    isMenuOpen?: boolean;\n\n    /**\n     * Property that triggers a callback immediately when toggle happens and value of expanded property should be updated\n     */\n    onToggleMenu?: (details: MenuToggleDetail) => void;\n\n    /**\n     * A suffix to the label that can be rendered differently.  Used to identify\n     * which child MenuItem is invoked.\n     */\n    suffix?: string;\n\n    /**\n     * Indicates in what states the button has chrome (background and border).\n     *     \"ghost\": \"Ghost buttons are the least prominent variant. Ghost buttons are\n     * useful for performing low-priority tasks, such as manipulating the UI.\",\n     *     \"borderless\"': \"Borderless buttons are a more prominent variation. Borderless\n     * buttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\"\n     */\n    variant?: 'ghost' | 'borderless' | 'outlined' | 'solid';\n\n    /**\n     * The size indicates how large the button is rendered: \"sm\", \"md\" (default), \"lg\".\n     */\n    size?: 'xs' | 'sm' | 'md' | 'lg';\n\n    /**\n     * The ID of an element (or space separated IDs of multiple elements) that\n     * describes the button.\n     */\n    'aria-describedby'?: string;\n  };\n\n/**\n * A MenuButton is a combined action and menu button.\n */\nexport const MenuButton = forwardRef(\n  (\n    {\n      children,\n      label,\n      suffix,\n      variant = 'outlined',\n      isDisabled = false,\n      isMenuOpen = false,\n      onToggleMenu,\n      size = 'md',\n      type: buttonType = 'button',\n      width,\n      icon,\n      testId,\n      'aria-describedby': ariaDescribedBy,\n      onBlur,\n      onFocus,\n      onMouseEnter,\n      onMouseLeave,\n      onTouchEnd,\n      onTouchStart\n    }: Props,\n    ref?: ForwardedRef<HTMLButtonElement>\n  ) => {\n    const buttonRef = useRef<HTMLButtonElement>(null);\n    useImperativeHandle(ref!, () => buttonRef.current!, [buttonRef]);\n\n    const { triggerProps, menuProps } = useMenuAction({\n      isDisabled: isDisabled,\n      onToggleMenu: onToggleMenu,\n      isMenuOpen: isMenuOpen,\n      anchorRef: buttonRef\n    });\n\n    const elementDetails = {\n      type: 'button' as const,\n      buttonType: buttonType\n    };\n\n    const globalEventProps = {\n      onBlur,\n      onFocus,\n      onMouseEnter,\n      onMouseLeave,\n      onTouchEnd,\n      onTouchStart\n    };\n\n    const rootButton = (\n      <BaseButton\n        {...mergeProps(triggerProps, globalEventProps)}\n        styling={isMenuOpen ? ['min', 'active'] : ['min']}\n        elementDetails={elementDetails}\n        isDisabled={isDisabled}\n        variant={variant}\n        width={width}\n        size={size}\n        ref={buttonRef}\n        testId={testId}\n        aria-label={suffix ? `${label} ${suffix}` : label}\n        aria-describedby={ariaDescribedBy}>\n        <ButtonLabelLayout\n          display={'all'}\n          suffix={suffix}\n          startIcon={icon}\n          endIcon={<MenuButtonDropdownIcon />}\n          size={size}>\n          {label}\n        </ButtonLabelLayout>\n      </BaseButton>\n    );\n\n    /*TODO: Remove this hardcoded offsetValue so we have dropdown offset only set on one single place.\n     Could be done via menu props or having a dropdownMenu component. JET-60595*/\n\n    /*TODO: Once menu expose a prop to set min width we would need to calculate offset width of button\n      so we set the correct min width since dropdown menus are 200px but if triggered element width is\n      bigger should be that size. JET-60745 */\n\n    return isDisabled ? (\n      rootButton\n    ) : (\n      <Fragment>\n        {rootButton}\n        <Menu {...menuProps} aria-label={label} offsetValue={4}>\n          {children}\n        </Menu>\n      </Fragment>\n    );\n  }\n);\n\nMenuButton.displayName = 'MenuButton';\n"],"names":["forwardRef","useRef","useImperativeHandle","useMenuAction","_jsx","BaseButton","mergeProps","ButtonLabelLayout","MenuButtonDropdownIcon","_jsxs","Fragment","Menu"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AA2GA;;AAEG;AACI,MAAM,UAAU,GAAGA,iBAAU,CAClC,CACE,EACE,QAAQ,EACR,KAAK,EACL,MAAM,EACN,OAAO,GAAG,UAAU,EACpB,UAAU,GAAG,KAAK,EAClB,UAAU,GAAG,KAAK,EAClB,YAAY,EACZ,IAAI,GAAG,IAAI,EACX,IAAI,EAAE,UAAU,GAAG,QAAQ,EAC3B,KAAK,EACL,IAAI,EACJ,MAAM,EACN,kBAAkB,EAAE,eAAe,EACnC,MAAM,EACN,OAAO,EACP,YAAY,EACZ,YAAY,EACZ,UAAU,EACV,YAAY,EACN,EACR,GAAqC,KACnC;AACF,IAAA,MAAM,SAAS,GAAGC,YAAM,CAAoB,IAAI,CAAC,CAAC;AAClD,IAAAC,yBAAmB,CAAC,GAAI,EAAE,MAAM,SAAS,CAAC,OAAQ,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;AAEjE,IAAA,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,GAAGC,2BAAa,CAAC;AAChD,QAAA,UAAU,EAAE,UAAU;AACtB,QAAA,YAAY,EAAE,YAAY;AAC1B,QAAA,UAAU,EAAE,UAAU;AACtB,QAAA,SAAS,EAAE,SAAS;AACrB,KAAA,CAAC,CAAC;AAEH,IAAA,MAAM,cAAc,GAAG;AACrB,QAAA,IAAI,EAAE,QAAiB;AACvB,QAAA,UAAU,EAAE,UAAU;KACvB,CAAC;AAEF,IAAA,MAAM,gBAAgB,GAAG;QACvB,MAAM;QACN,OAAO;QACP,YAAY;QACZ,YAAY;QACZ,UAAU;QACV,YAAY;KACb,CAAC;IAEF,MAAM,UAAU,IACdC,cAAA,CAACC,qBAAU,EACL,EAAA,GAAAC,qBAAU,CAAC,YAAY,EAAE,gBAAgB,CAAC,EAC9C,OAAO,EAAE,UAAU,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EACjD,cAAc,EAAE,cAAc,EAC9B,UAAU,EAAE,UAAU,EACtB,OAAO,EAAE,OAAO,EAChB,KAAK,EAAE,KAAK,EACZ,IAAI,EAAE,IAAI,EACV,GAAG,EAAE,SAAS,EACd,MAAM,EAAE,MAAM,gBACF,MAAM,GAAG,CAAG,EAAA,KAAK,IAAI,MAAM,CAAA,CAAE,GAAG,KAAK,sBAC/B,eAAe,EAAA,QAAA,EACjCF,cAAC,CAAAG,mCAAiB,EAChB,EAAA,OAAO,EAAE,KAAK,EACd,MAAM,EAAE,MAAM,EACd,SAAS,EAAE,IAAI,EACf,OAAO,EAAEH,eAACI,0BAAsB,EAAA,EAAA,CAAG,EACnC,IAAI,EAAE,IAAI,YACT,KAAK,EAAA,CACY,EACT,CAAA,CACd,CAAC;AAEF;AAC6E;AAE7E;;AAE0C;AAE1C,IAAA,OAAO,UAAU,IACf,UAAU,KAEVC,eAAA,CAACC,eAAQ,EACN,EAAA,QAAA,EAAA,CAAA,UAAU,EACXN,cAAA,CAACO,SAAI,EAAA,EAAA,GAAK,SAAS,EAAA,YAAA,EAAc,KAAK,EAAE,WAAW,EAAE,CAAC,EACnD,QAAA,EAAA,QAAQ,EACJ,CAAA,CAAA,EAAA,CACE,CACZ,CAAC;AACJ,CAAC,EACD;AAEF,UAAU,CAAC,WAAW,GAAG,YAAY;;;;"}
{"version":3,"file":"circleUtils-4af93948.js","sources":["../../src/utils/PRIVATE_meterUtils/circleUtils.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport type Sector = 'top' | 'bottom' | 'left' | 'right' | 'full';\n\n/**\n * Returns the angle in radians\n * @param angle The angle in degrees.\n * @returns The angle in radians.\n */\nfunction toRad(angle: number): number {\n  return (angle * Math.PI) / 180;\n}\n\n/**\n * Returns equivalent angle between 0 and 360 (exclusive) corresponding to given angle.\n * @param angle The angle in degrees.\n * @returns Returns the posiive angle for a given angle.\n */\nexport function getPositiveAngle(angle: number): number {\n  return (angle + 360) % 360;\n}\n\n/**\n * Returns the polar coordinate of point (x,y) relative to center (cx, cy)\n * @param cx The x coordinate of the center.\n * @param cy The y coordinate of the center.\n * @param x  The x coordinate of the point.\n * @param y  The y coordinate of the point.\n * @returns The polar coordinate of point (x,y) relative to center (cx, cy)\n */\nexport function convertToPolar(\n  cx: number,\n  cy: number,\n  x: number,\n  y: number\n): { radius: number; angle: number } {\n  return {\n    radius: Math.sqrt((x - cx) ** 2 + (y - cy) ** 2),\n    angle: (Math.atan2(cy - y, x - cx) * 180) / Math.PI\n  };\n}\n\n/**\n * Transforms the coordinate x, y in a unit square to the coordinates in given half sector. For eg, (0.5, 0.5) in full\n * unit square will be (0.5, 1) in top half and (0.5, 0) for bottom half.\n * @param x The x coordinate of the point.\n * @param y The y coordinate of the point.\n * @param sector The Sector to trasform\n * @returns The coordinate of point relative to center of the sector.\n */\nfunction transformCoord(x: number, y: number, sector: Sector): { x: number; y: number } {\n  switch (sector) {\n    case 'top':\n      y = 2 * y;\n      break;\n    case 'bottom':\n      y = 2 * y - 1;\n      break;\n    case 'left':\n      x = 2 * x;\n      break;\n    case 'right':\n      x = 2 * x - 1;\n      break;\n  }\n  return { x, y };\n}\n\n/**\n * For a given angle and section, returns the relative coordinate of the point where the radius for\n * the angle intersects the bounding box.\n * @param angle The angle in degrees\n * @param section The section in which the meter circle lies.\n * @returns The relative coordinate of point of intersection of radius and bounding box.\n */\nfunction getPolygonCoord(angle: number, section: Sector): { x: number; y: number } {\n  angle = getPositiveAngle(angle);\n  let x, y;\n  if (angle < 45) {\n    y = 0.5 - 0.5 * Math.tan(toRad(angle));\n    x = 1;\n  } else if (angle < 135) {\n    if (angle < 90) {\n      x = 0.5 + 0.5 * Math.tan(toRad(90 - angle));\n    } else {\n      x = 0.5 - 0.5 * Math.tan(toRad(angle - 90));\n    }\n    y = 0;\n  } else if (angle < 225) {\n    if (angle < 180) {\n      y = 0.5 - 0.5 * Math.tan(toRad(180 - angle));\n    } else {\n      y = 0.5 + 0.5 * Math.tan(toRad(angle - 180));\n    }\n    x = 0;\n  } else if (angle < 315) {\n    if (angle < 270) {\n      x = 0.5 - 0.5 * Math.tan(toRad(270 - angle));\n    } else {\n      x = 0.5 + 0.5 * Math.tan(toRad(angle - 270));\n    }\n    y = 1;\n  } else {\n    x = 1;\n    y = 0.5 + 0.5 * Math.tan(toRad(360 - angle));\n  }\n\n  return transformCoord(x, y, section);\n}\n\n/**\n * Returns the relative coordinate of the center of the half/full circle in which the meter circle lies.\n * @param sector The section in which the meter circle lies.\n * @returns The relative coordinate of the center.\n */\nexport function getCenterCoord(sector: Sector): { x: number; y: number } {\n  return transformCoord(0.5, 0.5, sector);\n}\n\n/**\n * Returns whether the angle lies on top half of the circle\n * @param angle The angle in degrees\n * @returns Whether the angle lies on top half of the circle.\n */\nfunction OnTopHalf(angle: number): boolean {\n  return angle <= 180;\n}\n\n/**\n * Returns whether the angle lies on right half of the circle\n * @param angle The angle in degrees\n * @returns Whether the angle lies on right half of the circle.\n */\nfunction OnRightHalf(angle: number): boolean {\n  return angle <= 90 || angle >= 270;\n}\n\n/**\n * Returns whether the angle lies on left half of the circle\n * @param angle The angle in degrees\n * @returns Whether the angle lies on left half of the circle.\n */\nfunction OnLeftHalf(angle: number): boolean {\n  return angle >= 90 && angle <= 270;\n}\n\n/**\n * Returns whether the angle lies on bottom half of the circle\n * @param angle The angle in degrees\n * @returns Whether the angle lies on bottom half of the circle.\n */\nfunction OnBottomHalf(angle: number): boolean {\n  return angle >= 180 || angle === 0;\n}\n\n/**\n * Returns the Sector the meter circle lies on.\n * @param startAngle The start angle.\n * @param angleExtent The angle extent.\n * @param isRtl If the reading mode is rtl\n * @returns Which half the meter circle lies on.\n */\nexport function getCircleSection(startAngle: number, angleExtent: number, isRtl: boolean): Sector {\n  if (angleExtent > 180) {\n    return 'full';\n  }\n\n  const meanAngle = getPositiveAngle(startAngle + (isRtl ? 0.5 : -0.5) * angleExtent);\n  const endAngle = getPositiveAngle(startAngle + (isRtl ? 1 : -1) * angleExtent);\n\n  if (OnTopHalf(startAngle) && OnTopHalf(meanAngle) && OnTopHalf(endAngle)) {\n    return 'top';\n  } else if (OnRightHalf(startAngle) && OnRightHalf(meanAngle) && OnRightHalf(endAngle)) {\n    return 'right';\n  } else if (OnLeftHalf(startAngle) && OnLeftHalf(meanAngle) && OnLeftHalf(endAngle)) {\n    return 'left';\n  } else if (OnBottomHalf(startAngle) && OnBottomHalf(meanAngle) && OnBottomHalf(endAngle)) {\n    return 'bottom';\n  }\n  return 'full';\n}\n\n/**\n * Returns the clip polygon for given startAngle and angleExtent.\n * @param startAngle The start angle of arc in degrees.\n * @param angleExtent The angle extent of arc in degrees.\n * @param isRtl  The reading mode of the document.\n * @param section The Sector circular meter lies on.\n * @returns The clippath for given startAngle and angleExtent\n */\nexport function getClipPath(\n  startAngle: number,\n  angleExtent: number,\n  isRtl: boolean,\n  section: Sector\n): string {\n  let start = isRtl ? startAngle + angleExtent : startAngle;\n  const firstVertexCoords = getPolygonCoord(start, section);\n  let clipPath = `${firstVertexCoords.x * 100}% ${firstVertexCoords.y * 100}%`;\n  let nextVertex, nextVertexCoords;\n  do {\n    nextVertex = Math.max(start - angleExtent, 45 * (Math.ceil(start / 45) - 1));\n    nextVertexCoords = getPolygonCoord(nextVertex, section);\n    clipPath += `, ${nextVertexCoords.x * 100}% ${nextVertexCoords.y * 100}%`;\n    angleExtent = angleExtent - (start - nextVertex);\n    start = nextVertex;\n  } while (nextVertex > start - angleExtent);\n\n  const centerVertex = getCenterCoord(section);\n  // close the polygon with a vertex in center to get the radial clipping\n  return `polygon(${clipPath}, ${centerVertex.x * 100}% ${centerVertex.y * 100}%)`;\n}\n\n/**\n * Returns the clip polygon for given percentage.\n * @param percentage The percentage of the circle the clipPath covers.\n * @returns The clippath for given percentage it covers\n */\nexport function getProgressClipPath(percentage: number) {\n  let tangent;\n  if (percentage < 0.125) {\n    tangent = _calculateTangent(percentage) + 50;\n    return `polygon(50% 0, ${tangent}% 0, 50% 50%)`;\n  } else if (percentage < 0.375) {\n    if (percentage < 0.25) {\n      tangent = 50 - _calculateTangent(0.25 - percentage);\n    } else {\n      tangent = _calculateTangent(percentage - 0.25) + 50;\n    }\n    return `polygon(50% 0, 100% 0, 100% ${tangent}%, 50% 50%)`;\n  } else if (percentage < 0.625) {\n    if (percentage < 0.5) {\n      tangent = 50 + _calculateTangent(0.5 - percentage);\n    } else {\n      tangent = 50 - _calculateTangent(percentage - 0.5);\n    }\n    return `polygon(50% 0, 100% 0, 100% 100%, ${tangent}% 100%, 50% 50%)`;\n  } else if (percentage < 0.875) {\n    if (percentage < 0.75) {\n      tangent = 50 + _calculateTangent(0.75 - percentage);\n    } else {\n      tangent = 50 - _calculateTangent(percentage - 0.75);\n    }\n    return `polygon(50% 0, 100% 0, 100% 100%, 0% 100%, 0% ${tangent}%, 50% 50%)`;\n  }\n  tangent = 50 - _calculateTangent(1 - percentage);\n  return `polygon(50% 0, 100% 0, 100% 100%, 0% 100%, 0% 0%, ${tangent}% 0%, 50% 50%)`;\n}\n\nfunction _calculateTangent(percentage: number) {\n  return 50 * Math.tan(percentage * 2 * Math.PI);\n}\n"],"names":[],"mappings":"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"}
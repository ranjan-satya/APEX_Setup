{"version":3,"file":"useChartDatatip-672232af.js","sources":["../../src/utils/PRIVATE_chartUtils/dataTipUtils.tsx","../../src/hooks/PRIVATE_useChartDatatip/useChartDatatip.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ChartItemData, ChartSeriesData, ValueFormats, Group } from '../UNSAFE_visTypes/chart';\nimport { VisTabularDatatip } from '../../PRIVATE_VisTabularDatatip';\nimport { TableRowData } from '../../PRIVATE_VisTabularDatatip';\n\n/**\n * Returns the data required for the VisTabularDatatip to render.\n * @param activeInfo active item info.\n * @param series The array of chart series.\n * @param groups The array of chart groups.\n * @param valueFormats The array of chart series.\n * @param getDataItem function which returns chartItem\n */\nexport function getChartTabularData<K, D extends ChartItemData<K>>(\n  data: D,\n  seriesValue: string,\n  groupValue: string,\n  valueFormats?: ValueFormats,\n  isTimeAxis?: boolean\n) {\n  //TODO: Use translation strings\n  const value = data.value;\n  const itemValue = valueFormats?.value?.format ? valueFormats?.value?.format?.(value) : value;\n  const tableData: TableRowData[] = [];\n\n  if (valueFormats?.series?.isDisplayed != false) {\n    tableData.push({\n      key: valueFormats?.series?.label || 'Series',\n      value: seriesValue\n    });\n  }\n  if (valueFormats?.group?.isDisplayed != false) {\n    tableData.push({\n      key: valueFormats?.group?.label || (isTimeAxis ? 'Date' : 'Group'),\n      value: groupValue\n    });\n  }\n  if (valueFormats?.value?.isDisplayed != false) {\n    tableData.push({ key: valueFormats?.value?.label || 'Value', value: itemValue });\n  }\n  return tableData;\n}\n\nexport function getDefaultDatatipRenderer<\n  K extends string | number,\n  D extends ChartItemData<K>\n>(options: {\n  series: ChartSeriesData<K, D>;\n  groups: Group;\n  valueFormats?: ValueFormats;\n  timeAxisType?: 'mixedFrequency' | 'enabled' | 'skipGaps';\n}) {\n  const isMixedFrequency = options.timeAxisType === 'mixedFrequency';\n  const isRegularTimeAxis =\n    options.timeAxisType === 'enabled' || options.timeAxisType === 'skipGaps';\n\n  return (context: { data: D }) => {\n    const groupValue = options.groups.name || options.groups.id;\n    const timeValue = isMixedFrequency\n      ? context.data.x\n      : isRegularTimeAxis\n      ? groupValue\n      : undefined;\n    return {\n      content: (\n        <VisTabularDatatip\n          tableData={getChartTabularData<K, D>(\n            context.data,\n            options.series.name || options.series.id.toString(),\n            timeValue || options.groups.name || options.groups.id,\n            options.valueFormats,\n            options.timeAxisType != null\n          )}\n        />\n      ),\n      borderColor: context.data.color || options.series.color\n    };\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { calculateOffset, useDatatip } from '../PRIVATE_useDatatip';\nimport {\n  DataCursorPosition,\n  Group,\n  ChartItemData,\n  Info,\n  Scale,\n  ValueFormats\n} from '../../utils/UNSAFE_visTypes/chart';\nimport { BarSeriesData } from '../../UNSAFE_BarChart/barChart.types';\nimport { Dimension } from '../../utils/UNSAFE_visTypes/common';\nimport { getDefaultDatatipRenderer } from '../../utils/PRIVATE_chartUtils/dataTipUtils';\nimport { LineAreaSeriesData } from '../../UNSAFE_LineAreaChart/lineAreaChart.types';\nimport { getColorRamp } from '../../utils/UNSAFE_visUtils';\nimport { Placement } from '../../UNSAFE_Floating';\nimport { useUser } from '../../hooks/UNSAFE_useUser';\nimport { Property } from 'csstype';\n\ntype Props<K extends string | number, D extends ChartItemData<K>> = {\n  series: (BarSeriesData<K, D> | LineAreaSeriesData<K, D>)[];\n  groups: Group[];\n  isDataCursorEnabled?: boolean;\n  dataCursorPosition?: DataCursorPosition;\n  isHoriz: boolean;\n  getDataItemPos: (seriesIndex: number, groupIndex: number) => Dimension | undefined;\n  datatip?: (context: { data: D; seriesIndex: number; groupIndex: number; id: K }) => {\n    content: ComponentChildren;\n    borderColor?: Property.BorderColor;\n  };\n  xScale: Scale;\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined;\n  hoveredItemInfo?: Info;\n  focusedItemInfo?: Info;\n  width: number;\n  height: number;\n  valueFormats?: ValueFormats;\n  findNearest: (x: number, y: number) => any;\n  timeAxisType?: 'mixedFrequency' | 'skipGaps' | 'enabled';\n  touchResponse: 'touchStart' | 'touchHold';\n  isDisabled: boolean;\n};\nconst DATA_CURSOR_OFFSET = 10;\n\nexport const useChartDatatip = <K extends string | number, D extends ChartItemData<K>>({\n  isDataCursorEnabled,\n  dataCursorPosition,\n  isHoriz,\n  datatip,\n  xScale,\n  getDataItem,\n  getDataItemPos,\n  hoveredItemInfo,\n  focusedItemInfo,\n  series,\n  valueFormats,\n  groups,\n  width,\n  height,\n  findNearest,\n  timeAxisType,\n  touchResponse,\n  isDisabled\n}: Props<K, D>) => {\n  let activeInfo = !isDisabled\n    ? focusedItemInfo?.isCurrent\n      ? focusedItemInfo\n      : hoveredItemInfo?.isCurrent &&\n        hoveredItemInfo.seriesIndex !== undefined &&\n        hoveredItemInfo.groupIndex !== undefined\n      ? hoveredItemInfo\n      : undefined\n    : undefined;\n\n  const anchor = focusedItemInfo?.isCurrent || isDataCursorEnabled ? 'element' : 'pointer';\n  const elementBounds = focusedItemInfo?.isCurrent\n    ? getDataItemPos(focusedItemInfo.seriesIndex!, focusedItemInfo.groupIndex!)\n    : undefined;\n\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  let placement = 'top-start' as Placement;\n  let offset = calculateOffset(isRtl, width, elementBounds);\n  if (isDataCursorEnabled && dataCursorPosition?.x != null && dataCursorPosition?.y != null) {\n    // TOD0: The offset for data cursor should be calculated according to\n    // datatip content dimensions as well.\n    activeInfo = activeInfo || findNearest?.(dataCursorPosition.x, dataCursorPosition.y);\n    const xPos = xScale.transform(dataCursorPosition.x);\n    offset = { mainAxis: -1, crossAxis: -1 };\n    if (isHoriz) {\n      placement = 'end';\n      offset.mainAxis = -1 * DATA_CURSOR_OFFSET;\n      offset.crossAxis = xPos - height / 2;\n    } else {\n      placement = 'top';\n      offset.crossAxis = isRtl ? width / 2 - xPos : xPos - width / 2;\n      offset.mainAxis = -1 * DATA_CURSOR_OFFSET;\n    }\n  }\n\n  let dtContent;\n  let item: D | undefined;\n  if (activeInfo?.seriesIndex != null && activeInfo?.groupIndex != null) {\n    item = getDataItem(activeInfo.seriesIndex, activeInfo.groupIndex!);\n    const datatipContext = item\n      ? {\n          data: item,\n          seriesIndex: activeInfo.seriesIndex,\n          groupIndex: activeInfo.groupIndex,\n          id: item.id\n        }\n      : undefined;\n\n    if (datatipContext) {\n      const datatipRenderer =\n        datatip ||\n        getDefaultDatatipRenderer({\n          series: series[activeInfo.seriesIndex],\n          groups: groups[activeInfo.groupIndex],\n          valueFormats,\n          timeAxisType\n        });\n      dtContent = datatipRenderer(datatipContext);\n    }\n  }\n  const colors = getColorRamp();\n  const borderColor =\n    dtContent?.borderColor ||\n    (activeInfo &&\n      ((series[activeInfo.seriesIndex!] as BarSeriesData<K, D>).color ||\n        (series[activeInfo.seriesIndex!] as LineAreaSeriesData<K, D>).lineColor ||\n        (series[activeInfo.seriesIndex!] as LineAreaSeriesData<K, D>).areaColor)) ||\n    (activeInfo && colors[activeInfo.seriesIndex! % colors.length]);\n\n  const { datatipContent, datatipProps } = useDatatip({\n    content: dtContent?.content,\n    anchor,\n    placement,\n    offset,\n    borderColor,\n    touchResponse\n  });\n\n  return { datatipContent, datatipProps };\n};\n"],"names":["getChartTabularData","data","seriesValue","groupValue","valueFormats","isTimeAxis","value","itemValue","format","tableData","series","isDisplayed","push","key","label","group","isDataCursorEnabled","dataCursorPosition","isHoriz","datatip","xScale","getDataItem","getDataItemPos","hoveredItemInfo","focusedItemInfo","groups","width","height","findNearest","timeAxisType","touchResponse","isDisabled","activeInfo","undefined","isCurrent","seriesIndex","groupIndex","anchor","elementBounds","direction","useUser","isRtl","dtContent","item","placement","offset","calculateOffset","x","y","xPos","transform","mainAxis","crossAxis","datatipContext","id","options","isMixedFrequency","isRegularTimeAxis","context","name","timeValue","content","_jsx","VisTabularDatatip","toString","borderColor","color","getDefaultDatatipRenderer","colors","getColorRamp","lineColor","areaColor","length","datatipContent","datatipProps","useDatatip"],"mappings":"4NAoBM,SAAUA,EACdC,EACAC,EACAC,EACAC,EACAC,GAGA,MAAMC,EAAQL,EAAKK,MACbC,EAAYH,GAAcE,OAAOE,OAASJ,GAAcE,OAAOE,SAASF,GAASA,EACjFG,EAA4B,GAiBlC,OAfyC,GAArCL,GAAcM,QAAQC,aACxBF,EAAUG,KAAK,CACbC,IAAKT,GAAcM,QAAQI,OAAS,SACpCR,MAAOJ,IAG6B,GAApCE,GAAcW,OAAOJ,aACvBF,EAAUG,KAAK,CACbC,IAAKT,GAAcW,OAAOD,QAAUT,EAAa,OAAS,SAC1DC,MAAOH,IAG6B,GAApCC,GAAcE,OAAOK,aACvBF,EAAUG,KAAK,CAAEC,IAAKT,GAAcE,OAAOQ,OAAS,QAASR,MAAOC,IAE/DE,CACT,mBCG+B,EAC7BO,sBACAC,qBACAC,UACAC,UACAC,SACAC,cACAC,iBACAC,kBACAC,kBACAd,SACAN,eACAqB,SACAC,QACAC,SACAC,cACAC,eACAC,gBACAC,iBAEA,IAAIC,EAAcD,OAQdE,EAPAT,GAAiBU,UACfV,EACAD,GAAiBW,gBACeD,IAAhCV,EAAgBY,kBACeF,IAA/BV,EAAgBa,WAChBb,OACAU,EAGN,MAAMI,EAASb,GAAiBU,WAAalB,EAAsB,UAAY,UACzEsB,EAAgBd,GAAiBU,UACnCZ,EAAeE,EAAgBW,YAAcX,EAAgBY,iBAC7DH,GAEEM,UAAEA,GAAcC,EAAAA,UAChBC,EAAsB,QAAdF,EAEd,IAmBIG,EACAC,EApBAC,EAAY,YACZC,EAASC,EAAeA,gBAACL,EAAOf,EAAOY,GAC3C,GAAItB,GAAgD,MAAzBC,GAAoB8B,GAAsC,MAAzB9B,GAAoB+B,EAAW,CAGzFhB,EAAaA,GAAcJ,IAAcX,EAAmB8B,EAAG9B,EAAmB+B,GAClF,MAAMC,EAAO7B,EAAO8B,UAAUjC,EAAmB8B,GACjDF,EAAS,CAAEM,UAAW,EAAGC,WAAY,GACjClC,GACF0B,EAAY,MACZC,EAAOM,UAAW,GAClBN,EAAOO,UAAYH,EAAOtB,EAAS,IAEnCiB,EAAY,MACZC,EAAOO,UAAYX,EAAQf,EAAQ,EAAIuB,EAAOA,EAAOvB,EAAQ,EAC7DmB,EAAOM,UAAW,GAErB,CAID,GAA+B,MAA3BnB,GAAYG,aAAiD,MAA1BH,GAAYI,WAAoB,CACrEO,EAAOtB,EAAYW,EAAWG,YAAaH,EAAWI,YACtD,MAAMiB,EAAiBV,EACnB,CACE1C,KAAM0C,EACNR,YAAaH,EAAWG,YACxBC,WAAYJ,EAAWI,WACvBkB,GAAIX,EAAKW,SAEXrB,EAEJ,GAAIoB,EAAgB,CASlBX,GAPEvB,GDzEF,SAGJoC,GAMA,MAAMC,EAA4C,mBAAzBD,EAAQ1B,aAC3B4B,EACqB,YAAzBF,EAAQ1B,cAAuD,aAAzB0B,EAAQ1B,aAEhD,OAAQ6B,IACN,MAAMvD,EAAaoD,EAAQ9B,OAAOkC,MAAQJ,EAAQ9B,OAAO6B,GACnDM,EAAYJ,EACdE,EAAQzD,KAAK8C,EACbU,EACAtD,OACA8B,EACJ,MAAO,CACL4B,QACEC,EAAAA,IAACC,EAAAA,kBAAiB,CAChBtD,UAAWT,EACT0D,EAAQzD,KACRsD,EAAQ7C,OAAOiD,MAAQJ,EAAQ7C,OAAO4C,GAAGU,WACzCJ,GAAaL,EAAQ9B,OAAOkC,MAAQJ,EAAQ9B,OAAO6B,GACnDC,EAAQnD,aACgB,MAAxBmD,EAAQ1B,gBAIdoC,YAAaP,EAAQzD,KAAKiE,OAASX,EAAQ7C,OAAOwD,MACnD,CAEL,CCuCQC,CAA0B,CACxBzD,OAAQA,EAAOsB,EAAWG,aAC1BV,OAAQA,EAAOO,EAAWI,YAC1BhC,eACAyB,kBAEwBwB,EAC7B,CACF,CACD,MAAMe,EAASC,EAAAA,eACTJ,EACJvB,GAAWuB,aACVjC,IACGtB,EAAOsB,EAAWG,aAAsC+B,OACvDxD,EAAOsB,EAAWG,aAA2CmC,WAC7D5D,EAAOsB,EAAWG,aAA2CoC,YACjEvC,GAAcoC,EAAOpC,EAAWG,YAAeiC,EAAOI,SAEnDC,eAAEA,EAAcC,aAAEA,GAAiBC,aAAW,CAClDd,QAASnB,GAAWmB,QACpBxB,SACAO,YACAC,SACAoB,cACAnC,kBAGF,MAAO,CAAE2C,iBAAgBC,eAAc"}
{"version":3,"file":"MonthView-94676cd6.js","sources":["../../src/PRIVATE_MonthView/useDayCell.ts","../../src/PRIVATE_MonthView/DayCell.tsx","../../src/PRIVATE_MonthView/MonthView.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { CalendarDateRequired } from '#utils/UNSAFE_calendarDateUtils';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { formatFullCalendarDate, toJSDate } from '#utils/UNSAFE_calendarDateUtils';\nimport { ComponentProps, useCallback } from 'preact/compat';\n\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { useFocusableCell } from '#UNSAFE_DatePicker/useFocusableCell';\nimport { useCellNavigation } from '#UNSAFE_DatePicker/useCellNavigation';\nimport { StyledDatePickerButton } from '#PRIVATE_StyledDatePickerButton';\n\ntype NavigationDirections =\n  | 'previousDay'\n  | 'nextDay'\n  | 'previousWeek'\n  | 'nextWeek'\n  | 'previousMonth'\n  | 'nextMonth'\n  | 'previousYear'\n  | 'nextYear'\n  | 'firstDayOfMonth'\n  | 'lastDayOfMonth'\n  | 'today';\n\nexport type DayFormatOptions = {\n  state: 'enabled' | 'disabled' | 'restricted';\n};\n\n// These are the properties the useDayCell hook takes.\nexport type UseDayCellProps = {\n  /**\n   * Date of the day cell. This will be formatted as a full date and put in the aria-label.\n   */\n  date: CalendarDateRequired;\n  /**\n   * A function that receives a date and returns an object specifying how to format the provided date.\n   * This function is called for each date that is rendered and this can be used to control how individual\n   * dates are rendered - disabled, restricted, or enabled.\n   * @param date The date to format\n   * @returns The format options\n   */\n  dayFormatter?: (date: CalendarDateRequired) => DayFormatOptions;\n  /**\n   * Whether the day cell is in an adjacent month, not the current month.\n   */\n  isAdjacentMonth: boolean;\n  /**\n   * Whether the day cell is disabled, like if it is out of the min/max range.\n   */\n  isDisabled?: boolean;\n  /**\n   * Whether the day cell is focusable, meaning it will have tabIndex 0.\n   */\n  isFocusable: boolean;\n  /**\n   * Whether the day cell has focus.\n   */\n  isFocused: boolean;\n  /**\n   * Whether the day cell is hidden. For example, days outside of the current month are hidden by default.\n   */\n  isHidden: boolean;\n  /**\n   * Whether the day cell is readonly. It is not activeable.\n   */\n  isReadonly: boolean;\n  /**\n   * Whether the day cell looks selected.\n   */\n  isSelected: boolean;\n  /**\n   * Whether the day cell's date is today.\n   */\n  isToday: boolean;\n  /**\n   * A callback that will be invoked when the user selects the date by clicking on a day cell or selecting the enter or space key on a day cell.\n   * @param payload The payload containing the date represented by this cell.\n   */\n  onAction: (payload: { date: CalendarDateRequired }) => void;\n  /**\n   * A callback that will be invoked when the user navigates.\n   */\n  onNavigation: (detail: { direction: NavigationDirections; date: CalendarDateRequired }) => void;\n};\n\n/**\n * The useDayCell hook returns properties for an individual DayCell. The properties returned should be spread on the StyledDatePickerButton.\n * These include the event handlers for keydown and click.\n */\nexport const useDayCell = ({\n  date,\n  dayFormatter = defaultDayFormatter,\n  isAdjacentMonth,\n  isDisabled,\n  isFocusable,\n  isFocused,\n  isHidden,\n  isReadonly,\n  isSelected,\n  isToday,\n  onAction,\n  onNavigation\n}: UseDayCellProps) => {\n  const { locale } = useUser();\n\n  // apply day formatting\n  const { state } = dayFormatter(date);\n  const isDisabledFormat = state === 'disabled';\n  const isRestrictedFormat = state === 'restricted';\n\n  // Focus the day cell with isFocused true when the state updates.\n  const buttonProps = useFocusableCell({ isFocusable, isFocused });\n  // Override onAction to not call it if disabled, readonly or restricted\n  const handleAction: UseDayCellProps['onAction'] = useCallback(\n    (payload) => {\n      if (isDisabled || isReadonly || isDisabledFormat || isRestrictedFormat) return;\n      onAction(payload);\n    },\n    [isDisabled, isDisabledFormat, isReadonly, isRestrictedFormat, onAction]\n  );\n  const buttonEventHandlers = useCellNavigation({\n    navigationMap: {\n      ArrowLeft: { ltr: 'previousDay', rtl: 'nextDay' },\n      ArrowRight: { ltr: 'nextDay', rtl: 'previousDay' },\n      ArrowDown: 'nextWeek',\n      ArrowUp: 'previousWeek',\n      PageDown: 'nextMonth',\n      PageUp: 'previousMonth',\n      Home: 'firstDayOfMonth',\n      End: 'lastDayOfMonth',\n      ShiftPageDown: 'nextYear',\n      ShiftPageUp: 'previousYear',\n      CtrlAltT: 'today'\n    },\n    payload: { date },\n    onAction: handleAction,\n    onNavigation\n  });\n\n  // For accessibility, we want a full date.\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const today = translations.datePicker_today();\n  const selected = translations.datePicker_selected();\n  const restricted = translations.datePicker_restricted();\n\n  const formattedDate = formatFullCalendarDate(locale, date, 'day');\n  let ariaLabel = isToday ? `${today}, ${formattedDate}` : formattedDate;\n  ariaLabel = isRestrictedFormat ? `${ariaLabel}, ${restricted}` : ariaLabel;\n  ariaLabel = isSelected ? `${ariaLabel}, ${selected}` : ariaLabel;\n  const dayOfMonth = toJSDate(date.year, date.month, date.day).getDate().toString();\n\n  return {\n    buttonProps: {\n      'aria-label': ariaLabel,\n      ...((isHidden || isDisabled || isDisabledFormat || isRestrictedFormat) && {\n        'aria-disabled': true\n      }),\n      isActivable: !(isDisabled || isReadonly || isDisabledFormat || isRestrictedFormat),\n      isAdjacentMonth,\n      isDimmed: isDisabled || isDisabledFormat,\n      isHidden,\n      isHoverable: !(isDisabled || isReadonly || isDisabledFormat || isRestrictedFormat),\n      isReadonly,\n      isSelected,\n      isRestricted: isRestrictedFormat,\n      isToday,\n      label: dayOfMonth,\n      ...buttonProps,\n      ...buttonEventHandlers\n    } as ComponentProps<typeof StyledDatePickerButton>\n  };\n};\n\n/**\n * A default day formatter that always formats as enabled state.\n */\nconst defaultDayFormatter = () => ({ state: 'enabled' }) as DayFormatOptions;\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { StyledDatePickerButton } from '#PRIVATE_StyledDatePickerButton';\nimport { UseDayCellProps, useDayCell } from './useDayCell';\nimport { dayCellStyles } from './themes/DayCellStyles.css';\n\ntype PickedUseDayCellProps = Pick<\n  UseDayCellProps,\n  | 'date'\n  | 'dayFormatter'\n  | 'isAdjacentMonth'\n  | 'isDisabled'\n  | 'isFocusable'\n  | 'isFocused'\n  | 'isHidden'\n  | 'isReadonly'\n  | 'isSelected'\n  | 'isToday'\n  | 'onAction'\n  | 'onNavigation'\n>;\n\ntype DayCellProps = PickedUseDayCellProps;\n\n/**\n * The DayCell is the cell within the DatePicker's month view that contains the day in the month view.\n * This component will format the date for the aria-label.\n * The DayCell components uses the useDayCell hook to handle the user interactions with the day cell.\n */\nexport const DayCell = (props: DayCellProps) => {\n  const { buttonProps } = useDayCell(props);\n  // buttonProps, e.g., tabIndex, aria-label, onclick, onkeydown and visual states\n  return (\n    <div role=\"gridcell\" class={dayCellStyles}>\n      <StyledDatePickerButton {...buttonProps} />\n    </div>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport {\n  getWeeksInMonth,\n  getDatesInWeek,\n  getStartOfWeek,\n  getDaysOfWeekNames,\n  WeekInMonthIndex\n} from '#utils/PRIVATE_dayUtils';\nimport { ComponentProps } from 'preact/compat';\nimport {\n  CalendarDateRequired,\n  formatFullCalendarDate,\n  isDateOutOfRange\n} from '#utils/UNSAFE_calendarDateUtils';\nimport { DayCell } from './DayCell';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { Grid } from '#UNSAFE_Grid';\nimport { MonthViewVariantOptions } from '#PRIVATE_MonthView/themes/MonthViewStyles.css';\nimport { MonthViewRedwoodTheme } from '#PRIVATE_MonthView/themes/redwood/MonthViewTheme';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { monthViewScaleVars } from '#PRIVATE_MonthView/themes/MonthViewContract.css';\n\ntype PickedDayCellProps = Pick<\n  ComponentProps<typeof DayCell>,\n  'dayFormatter' | 'onAction' | 'onNavigation'\n>;\n\ntype MonthViewProps = TestIdProps &\n  PickedDayCellProps & {\n    /**\n     * The daysOutsideMonth property affects the day cells that are outside of the current month.\n     * If set to 'hidden', then the days outside of the current month will be hidden.\n     * If set to 'selectable', then the days outside of the current month will be visible and selectable.\n     * This defaults to 'hidden'.\n     */\n    daysOutsideMonth?: 'hidden' | 'selectable';\n    /**\n     * The MonthView renders with the month of the focusableDate.\n     * The focusableDate is the only day in the MonthView that has tabIndex: 0 on it.\n     * The focusableDate doesn't have focus until the user tabs in to the Month View.\n     * The focusableDate is never undefined.\n     */\n    focusableDate: CalendarDateRequired;\n    /**\n     * If set to true, the focusableDate will be focused and you will see the focus ring. It will be\n     * false when no date has focus.\n     * @default false\n     */\n    isFocused?: boolean;\n    /**\n     * Specifies whether the component is readonly.\n     */\n    isReadonly?: boolean;\n    /**\n     * The maximum selectable date. The max must be greater than the min if they are both specified.\n     */\n    max?: CalendarDateRequired;\n    /**\n     * The minimum selectable date. The min must be less than the max if they are both specified.\n     */\n    min?: CalendarDateRequired;\n    /**\n     * The selected date of the MonthView, or undefined is there is no selected date. This\n     * is used to highlight the selected day cell if it is within the min/max range.\n     */\n    selectedDate?: CalendarDateRequired;\n    /**\n     * Today's date. This is used to highlight the Today day cell.\n     */\n    todaysDate: CalendarDateRequired;\n  };\n\n/**\n * A MonthView is a month interface that allows users to select a single date. The MonthView is the week day header\n * abbreviations and the days of the month. A MonthView is used inside of a DatePicker\n * along with the DatePickerHeader and the MonthGridView and YearGridView.\n */\nexport const MonthView = ({\n  dayFormatter,\n  daysOutsideMonth = 'hidden',\n  isReadonly = false,\n  max,\n  min,\n  onAction,\n  onNavigation,\n  selectedDate,\n  focusableDate,\n  isFocused = false,\n  testId,\n  todaysDate\n}: MonthViewProps) => {\n  const { locale } = useUser();\n  const weeksInMonth = getWeeksInMonth(focusableDate.year, focusableDate.month, locale);\n  const { baseTheme, styles } = useComponentTheme<MonthViewVariantOptions>(\n    MonthViewRedwoodTheme,\n    {}\n  );\n\n  const renderMonthViewHeaderRow = () => {\n    const weekDays = getDaysOfWeekNames(locale, 'short');\n    return (\n      <Grid\n        role=\"row\"\n        aria-hidden=\"true\"\n        gridTemplateColumns=\"repeat(7, 1fr)\"\n        gap={monthViewScaleVars.columnGap}>\n        {weekDays.map((day) => (\n          <div role=\"columnheader\" class={styles['doyOfTheWeek']}>\n            <span>{day}</span>\n          </div>\n        ))}\n      </Grid>\n    );\n  };\n\n  const renderMonthView = () => {\n    const calendarGrid: JSX.Element[] = [];\n\n    for (let weekIndex = 0; weekIndex < weeksInMonth; weekIndex++) {\n      const startDateOfWeek = getStartOfWeek(focusableDate.year, focusableDate.month, 1, locale);\n      const weekDates = getDatesInWeek(\n        weekIndex as WeekInMonthIndex,\n        startDateOfWeek.year,\n        startDateOfWeek.month,\n        startDateOfWeek.day\n      );\n\n      const weekCells = weekDates.map((dayCellDate) => {\n        // This figures out the visual state of the DayCell.\n        const isDisabled = isDateOutOfRange(dayCellDate, min, max);\n\n        // Even if the selected date is out of range, the UX design shows it as selected.\n        const isSelected = selectedDate ? isSameDate(dayCellDate, selectedDate) : false;\n        const isToday = isSameDate(dayCellDate, todaysDate);\n        const isFocusable = isSameDate(dayCellDate, focusableDate);\n        const isAdjacentMonth = isOutOfMonth(dayCellDate, focusableDate);\n        const isHidden = isAdjacentMonth && daysOutsideMonth === 'hidden';\n\n        return (\n          <DayCell\n            key={`${dayCellDate.year}-${dayCellDate.month}-${dayCellDate.day}`}\n            date={dayCellDate}\n            dayFormatter={dayFormatter}\n            isAdjacentMonth={isAdjacentMonth}\n            isDisabled={isDisabled}\n            isFocusable={isFocusable}\n            isFocused={isFocusable && isFocused}\n            isHidden={isHidden}\n            isReadonly={isReadonly}\n            isSelected={isSelected}\n            isToday={isToday}\n            onAction={onAction}\n            onNavigation={onNavigation}></DayCell>\n        );\n      });\n\n      calendarGrid.push(\n        <Grid\n          key={weekIndex}\n          role=\"row\"\n          gridTemplateColumns=\"repeat(7, 1fr)\"\n          gap={monthViewScaleVars.columnGap}>\n          {weekCells}\n        </Grid>\n      );\n    }\n\n    return calendarGrid;\n  };\n\n  const monthViewAriaLabel = formatFullCalendarDate(locale, focusableDate, 'month');\n  return (\n    <div class={baseTheme}>\n      <Grid\n        gap={monthViewScaleVars.rowGap}\n        aria-label={monthViewAriaLabel}\n        role=\"grid\"\n        testId={testId}>\n        {renderMonthViewHeaderRow()}\n        {renderMonthView()}\n      </Grid>\n    </div>\n  );\n};\n\nfunction isSameDate(date1: CalendarDateRequired, date2: CalendarDateRequired) {\n  return date1.year === date2.year && date1.month === date2.month && date1.day === date2.day;\n}\n\nfunction isOutOfMonth(date1: CalendarDateRequired, currentMonthDate: CalendarDateRequired) {\n  return date1.month !== currentMonthDate.month;\n}\n"],"names":["useUser","useFocusableCell","useCallback","useCellNavigation","useTranslationBundle","formatFullCalendarDate","toJSDate","_jsx","dayCellStyles","StyledDatePickerButton","getWeeksInMonth","useComponentTheme","MonthViewRedwoodTheme","getDaysOfWeekNames","Grid","monthViewScaleVars","getStartOfWeek","getDatesInWeek","isDateOutOfRange","_jsxs"],"mappings":"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"}
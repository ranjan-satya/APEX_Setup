{"version":3,"file":"useDetectTruncation-a99bfd14.js","sources":["../../src/hooks/PRIVATE_useDetectTruncation/useDetectTruncation.tsx"],"sourcesContent":["import { useResizeObserver } from '#hooks/UNSAFE_useResizeObserver';\nimport { useCallback, useRef, useState } from 'preact/hooks';\n\nconst useDetectTruncation = () => {\n  const rootRef = useRef<HTMLElement>(null);\n  const [isTextTruncated, setIsTextTruncated] = useState<boolean>(false);\n\n  const detectTruncation = useCallback(() => {\n    if (rootRef.current) {\n      setIsTextTruncated(rootRef.current.scrollWidth > rootRef.current.offsetWidth);\n    }\n  }, []);\n  useResizeObserver(rootRef, detectTruncation);\n\n  const detectTruncationProps = {\n    ref: rootRef\n  };\n\n  return { detectTruncationProps, isTextTruncated };\n};\n\nexport { useDetectTruncation };\n"],"names":[],"mappings":";;;;AAGM,MAAA,mBAAmB,GAAG,MAAK;AAC/B,IAAA,MAAM,OAAO,GAAG,MAAM,CAAc,IAAI,CAAC,CAAC;IAC1C,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,QAAQ,CAAU,KAAK,CAAC,CAAC;AAEvE,IAAA,MAAM,gBAAgB,GAAG,WAAW,CAAC,MAAK;AACxC,QAAA,IAAI,OAAO,CAAC,OAAO,EAAE;AACnB,YAAA,kBAAkB,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;SAC/E;KACF,EAAE,EAAE,CAAC,CAAC;AACP,IAAA,iBAAiB,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;AAE7C,IAAA,MAAM,qBAAqB,GAAG;AAC5B,QAAA,GAAG,EAAE,OAAO;KACb,CAAC;AAEF,IAAA,OAAO,EAAE,qBAAqB,EAAE,eAAe,EAAE,CAAC;AACpD;;;;"}
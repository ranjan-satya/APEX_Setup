{"version":3,"file":"buttonUtils-252661e7.js","sources":["../../src/utils/UNSAFE_buttonUtils/buttonUtils.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ButtonIntrinsicProps } from './toggle.types';\nimport { useButtonSetContext } from '#hooks/UNSAFE_useButtonSetContext';\nimport { ButtonSetButton } from '#UNSAFE_ButtonSetButton';\nimport { ButtonSetIconButton } from '#UNSAFE_ButtonSetIconButton';\nimport { ComponentProps } from 'preact';\nimport { ToggleButtonLabel } from '#UNSAFE_ToggleButtonLabel';\nimport { generateId } from '#utils/PRIVATE_id';\n\ntype ButtonSetContextProps = ReturnType<typeof useButtonSetContext>;\ntype ButtonSetButtonProps = ComponentProps<typeof ButtonSetButton>;\ntype ButtonSetIconButtonProps = ComponentProps<typeof ButtonSetIconButton>;\n\n/**\n *\n * @param buttonProps\n * @returns globalEventProps that can be spread onto target element\n */\nexport function processGlobals(buttonProps: ButtonIntrinsicProps): {\n  globalEventProps: ButtonIntrinsicProps;\n} {\n  const globalEventProps = {\n    onBlur: buttonProps.onBlur,\n    onFocus: buttonProps.onFocus,\n    onMouseEnter: buttonProps.onMouseEnter,\n    onMouseLeave: buttonProps.onMouseLeave,\n    onTouchEnd: buttonProps.onTouchEnd,\n    onTouchStart: buttonProps.onTouchStart\n  };\n\n  return {\n    globalEventProps\n  };\n}\n\n/**\n * Merge buttonset props with toggle props for spreadable properties and flags\n * @param toggleProps\n * @param buttonSetProps\n * @returns\n */\nexport function processSetButtonProps(\n  toggleProps: (ButtonSetButtonProps | ButtonSetIconButtonProps) & ButtonIntrinsicProps,\n  buttonSetProps: ButtonSetContextProps\n): {\n  isDisabled: boolean | undefined;\n  buttonSetButtonProps: ButtonSetButtonProps | ButtonSetIconButtonProps;\n  inputProps: ComponentProps<typeof ToggleButtonLabel>;\n  globalEventProps: ButtonIntrinsicProps;\n} {\n  const isDisabled = toggleProps.isDisabled ?? buttonSetProps.isDisabled ? true : undefined;\n\n  const commonProps = {\n    size: toggleProps.size ?? buttonSetProps.size,\n    isDisabled: isDisabled\n  };\n  const buttonProps = {\n    variant: toggleProps.variant ?? buttonSetProps.variant,\n    ...commonProps\n  };\n\n  const buttonSetButtonProps = {\n    layoutWidth: toggleProps.layoutWidth ?? buttonSetProps.layoutWidth,\n    ...buttonProps\n  };\n\n  const inputProps = {\n    inputType: buttonSetProps.inputType ?? toggleProps.inputType ?? 'checkbox',\n    inputName: buttonSetProps.inputName ?? toggleProps.inputName ?? generateId(),\n    ...commonProps\n  };\n\n  const { globalEventProps } = processGlobals(toggleProps);\n\n  return {\n    isDisabled,\n    buttonSetButtonProps,\n    inputProps,\n    globalEventProps\n  };\n}\n"],"names":["generateId"],"mappings":";;;;;AAmBA;;;;AAIG;AACG,SAAU,cAAc,CAAC,WAAiC,EAAA;AAG9D,IAAA,MAAM,gBAAgB,GAAG;QACvB,MAAM,EAAE,WAAW,CAAC,MAAM;QAC1B,OAAO,EAAE,WAAW,CAAC,OAAO;QAC5B,YAAY,EAAE,WAAW,CAAC,YAAY;QACtC,YAAY,EAAE,WAAW,CAAC,YAAY;QACtC,UAAU,EAAE,WAAW,CAAC,UAAU;QAClC,YAAY,EAAE,WAAW,CAAC,YAAY;KACvC,CAAC;IAEF,OAAO;QACL,gBAAgB;KACjB,CAAC;AACJ,CAAC;AAED;;;;;AAKG;AACa,SAAA,qBAAqB,CACnC,WAAqF,EACrF,cAAqC,EAAA;AAOrC,IAAA,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,IAAI,cAAc,CAAC,UAAU,GAAG,IAAI,GAAG,SAAS,CAAC;AAE1F,IAAA,MAAM,WAAW,GAAG;AAClB,QAAA,IAAI,EAAE,WAAW,CAAC,IAAI,IAAI,cAAc,CAAC,IAAI;AAC7C,QAAA,UAAU,EAAE,UAAU;KACvB,CAAC;AACF,IAAA,MAAM,WAAW,GAAG;AAClB,QAAA,OAAO,EAAE,WAAW,CAAC,OAAO,IAAI,cAAc,CAAC,OAAO;AACtD,QAAA,GAAG,WAAW;KACf,CAAC;AAEF,IAAA,MAAM,oBAAoB,GAAG;AAC3B,QAAA,WAAW,EAAE,WAAW,CAAC,WAAW,IAAI,cAAc,CAAC,WAAW;AAClE,QAAA,GAAG,WAAW;KACf,CAAC;AAEF,IAAA,MAAM,UAAU,GAAG;QACjB,SAAS,EAAE,cAAc,CAAC,SAAS,IAAI,WAAW,CAAC,SAAS,IAAI,UAAU;QAC1E,SAAS,EAAE,cAAc,CAAC,SAAS,IAAI,WAAW,CAAC,SAAS,IAAIA,aAAU,EAAE;AAC5E,QAAA,GAAG,WAAW;KACf,CAAC;IAEF,MAAM,EAAE,gBAAgB,EAAE,GAAG,cAAc,CAAC,WAAW,CAAC,CAAC;IAEzD,OAAO;QACL,UAAU;QACV,oBAAoB;QACpB,UAAU;QACV,gBAAgB;KACjB,CAAC;AACJ;;;;;"}
{"version":3,"file":"UNSAFE_ExpandableList.js","sources":["../../src/UNSAFE_ExpandableList/useExpandCollapse.ts","../../src/UNSAFE_ExpandableList/ExpandableList.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback } from 'preact/hooks';\nimport { ToggleDetail } from '../UNSAFE_Collection';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { containsKey, Keys } from '../utils/UNSAFE_keys';\n\n/**\n * A hook that handles mouse and keyboard gesture that toggles the expanded state.\n * @param keyExtractor\n * @param expanded\n * @param onToggle\n * @returns\n */\nexport function useExpandCollapse<K>(\n  keyExtractor: (element: HTMLElement) => K | null,\n  expanded: Keys<K>,\n  onToggle?: (detail: ToggleDetail<K>) => void\n) {\n  const { direction } = useUser();\n\n  const onClick = useCallback(\n    (event: MouseEvent) => {\n      handleToggle(event, keyExtractor, onToggle);\n    },\n    [keyExtractor, onToggle]\n  );\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === 'Enter' || event.key === ' ') {\n        handleToggle(event, keyExtractor, onToggle);\n      } else if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {\n        const isRtl = direction === 'rtl';\n        const isLeftArrow = event.key === 'ArrowLeft' && !isRtl;\n        handleArrowKey(isLeftArrow, event.target as HTMLElement, expanded, keyExtractor, onToggle);\n        // arrow key might cause it to scroll horizontally\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    },\n    [keyExtractor, onToggle, expanded, direction]\n  );\n\n  return onToggle ? { onClick, onKeyDown, onKeyUp } : {};\n}\n\n// prevent default (propagation) for keyDown to prevent scrolling the container\nconst onKeyDown = (event: KeyboardEvent) => {\n  if (event.key === 'Enter' || event.key === 'ArrowLeft' || event.key === 'ArrowRight') {\n    event.preventDefault();\n  }\n};\n\nconst handleArrowKey = <K>(\n  isLeftArrow: boolean,\n  target: HTMLElement,\n  expanded: Keys<K>,\n  keyExtractor: (element: HTMLElement) => K | null,\n  onToggle?: (detail: ToggleDetail<K>) => void\n) => {\n  const itemKey = keyExtractor(target);\n  if (onToggle && itemKey) {\n    const contains = containsKey(expanded, itemKey);\n    if ((isLeftArrow && contains) || (!isLeftArrow && !contains)) {\n      onToggle({ value: itemKey });\n    }\n  }\n};\n\nconst handleToggle = <K>(\n  event: Event,\n  keyExtractor: (element: HTMLElement) => K | null,\n  onToggle?: (detail: ToggleDetail<K>) => void\n) => {\n  const itemKey = keyExtractor(event.target as HTMLElement);\n  if (onToggle && itemKey) {\n    onToggle({ value: itemKey });\n    if (event.type === 'click') {\n      event.stopPropagation();\n    }\n  }\n};\n","import { ComponentChildren, Fragment } from 'preact';\nimport { useState, useCallback, useRef } from 'preact/hooks';\nimport { memo } from 'preact/compat';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport {\n  ListItemRendererContext,\n  SelectionDetail,\n  ToggleDetail,\n  FlattenedDataState,\n  HierarchicalItemRendererContext\n} from '../UNSAFE_Collection';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '../resources/nls/bundle';\nimport { Keys, containsKey, isSameKey } from '../utils/UNSAFE_keys';\nimport { Button } from '../UNSAFE_Button';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { ExpandIcon } from '../PRIVATE_ThemedIcons/ExpandIcon';\nimport { CollapseIcon } from '../PRIVATE_ThemedIcons/CollapseIcon';\nimport {\n  List,\n  ListGroupHeader,\n  GROUP_SELECTOR,\n  excludeGroup,\n  GroupLoadingIndicator\n} from '../PRIVATE_List';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport { CustomRendererContext, PublicListProps } from '../UNSAFE_ListView/List.types';\nimport { useExpandCollapse } from './useExpandCollapse';\nimport { keyExtractor } from '../utils/PRIVATE_collectionUtils';\n\n// these are the props that are different from ListView\ntype SpecificTypes<K, D> = {\n  /**\n   * A function to render an item or a group header.\n   */\n  children: (context: HierarchicalItemRendererContext<K, D>) => ComponentChildren;\n  /**\n   * A FlattenedDataState object that provides information including data and metadata to this ExpandableList.\n   * If the value is null, then ExpandableList will show loading indicator until a FlattenedDataState is set.\n   */\n  data: FlattenedDataState<K, D> | null;\n  /**\n   * A function to handle when user performs a gesture that toggles the expansion state of a group header\n   */\n  onToggle?: (detail: ToggleDetail<K>) => void;\n};\n\n/**\n * Props for the ExpandableList Component, which consist of all props from ListView\n * except some which have different signatures.\n */\ntype ExpandableListProps<K, D> = Omit<PublicListProps<K, D>, 'children' | 'data'> &\n  SpecificTypes<K, D>;\n\n/**\n * An ExpandableList shows a two-level group of items where each group header can be expand or collapse.\n */\nexport function ExpandableList<K extends string | number, D>({\n  children,\n  currentKey,\n  data,\n  onSelectionChange,\n  onToggle,\n  ...props\n}: ExpandableListProps<K, D>) {\n  const [statusText, setStatusText] = useState('');\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const updateStateText = useCallback(\n    (detail: ToggleDetail<K>) => {\n      onToggle?.(detail);\n      if (data) {\n        const previouslyExpanded = containsKey(data?.expanded, detail.value);\n        setStatusText(\n          previouslyExpanded\n            ? translations.expandableList_groupCollapse()\n            : translations.expandableList_groupExpand()\n        );\n        // we need to clear the live region text otherwise screenreader\n        // won't read again if the content did not change the next time\n        setTimeout(() => {\n          setStatusText('');\n        }, 1000);\n      }\n    },\n    [onToggle, data, translations]\n  );\n  const expandCollapseProps = useExpandCollapse(\n    (element: HTMLElement) => {\n      if (element.getAttribute('role') === 'treegrid') {\n        return currentKey === undefined ? null : currentKey;\n      }\n      return keyExtractor(element, GROUP_SELECTOR) as K;\n    },\n    data == null ? (emptyKeys as Keys<K>) : data.expanded,\n    onToggle && updateStateText\n  );\n\n  const descId = useId();\n  const stableDescIdRef = useRef(descId);\n\n  const createHierarchicalContext = <K, D>(\n    context: ListItemRendererContext<K, D>,\n    options?: { expanded: boolean; onToggle: (detail: ToggleDetail<K>) => void }\n  ) => {\n    const expanderRenderer =\n      options !== undefined\n        ? () => (\n            <Expander\n              itemKey={context.metadata.key}\n              expanded={options.expanded}\n              onToggle={options.onToggle}\n            />\n          )\n        : undefined;\n\n    return {\n      ...context,\n      parentKey: context.metadata.parentKey,\n      leaf: context.metadata.isLeaf ?? true,\n      depth: context.metadata.treeDepth ?? 1,\n      expander: expanderRenderer\n    };\n  };\n\n  const handleSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      if (onSelectionChange && data) {\n        const keys = excludeGroup(data, detail.value);\n        if (isSameKey(keys, detail.value)) {\n          onSelectionChange(detail);\n        } else if (keys.keys && keys.keys.size > 0) {\n          onSelectionChange({ ...detail, value: keys });\n        }\n      }\n    },\n    [onSelectionChange, data]\n  );\n\n  const customItemRenderer = (context: CustomRendererContext<K, D>) => {\n    const itemKey = context.listItemContext.metadata.key;\n    const options =\n      data && onToggle ? { expanded: containsKey(data.expanded, itemKey), onToggle } : undefined;\n    const itemContext = createHierarchicalContext(context.listItemContext, options);\n    if (itemContext.leaf) {\n      return context.defaultListItem(itemContext, { itemDepth: itemContext.depth + 1 });\n    } else {\n      return (\n        <ListGroupHeader\n          key={itemContext.metadata.key}\n          ariaDescribedBy={stableDescIdRef.current}\n          itemKey={itemContext.metadata.key}\n          itemIndex={itemContext.index}\n          itemDepth={itemContext.depth}\n          isFocused={context.isFocused}\n          isFocusRingVisible={context.isFocusRingVisible}\n          isActive={context.isActive}\n          isGridlineVisible={false}\n          isExpandable={true}\n          expandedKeys={data == null ? (emptyKeys as Keys<K>) : data.expanded}\n          onToggle={onToggle}>\n          {children(itemContext)}\n        </ListGroupHeader>\n      );\n    }\n  };\n\n  return (\n    <Fragment>\n      <List\n        currentKey={currentKey}\n        data={data}\n        role=\"treegrid\"\n        loadingIndicator={<GroupLoadingIndicator />}\n        onSelectionChange={handleSelectionChange}\n        customItemRenderer={customItemRenderer}\n        {...{ ...props, ...expandCollapseProps }}>\n        {(context: ListItemRendererContext<K, D>) => {\n          return children(context as HierarchicalItemRendererContext<K, D>);\n        }}\n      </List>\n      {onToggle && (\n        <Fragment>\n          <LiveRegion>{statusText}</LiveRegion>\n          <span id={stableDescIdRef.current}>\n            <HiddenAccessible>\n              {translations.expandableList_expandCollapseInstructionText()}\n            </HiddenAccessible>\n          </span>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n}\n\nconst emptyKeys = { all: false, keys: new Set() };\n\nconst Expander = memo(\n  <K,>(props: { itemKey: K; expanded: boolean; onToggle: (detail: ToggleDetail<K>) => void }) => {\n    const classes = classNames(['oj-listview-expander']);\n\n    const actionHandler = () => {\n      props.onToggle({ value: props.itemKey });\n    };\n\n    return (\n      <span class={classes} role=\"presentation\">\n        <Button\n          onAction={actionHandler}\n          variant=\"ghost\"\n          startIcon={props.expanded ? <ExpandIcon size=\"6x\" /> : <CollapseIcon size=\"6x\" />}\n        />\n      </span>\n    );\n  },\n  (prev: any, next: any) => {\n    return (\n      prev.itemKey === next.itemKey &&\n      prev.expanded === next.expanded &&\n      prev.onToggle === next.onToggle\n    );\n  }\n);\n"],"names":["onKeyDown","event","key","preventDefault","handleArrowKey","isLeftArrow","target","expanded","keyExtractor","onToggle","itemKey","contains","containsKey","value","handleToggle","type","stopPropagation","emptyKeys","all","keys","Set","Expander","memo","props","classes","classNames","_jsx","class","role","children","jsx","Button","onAction","variant","startIcon","ExpandIcon","size","CollapseIcon","prev","next","currentKey","data","onSelectionChange","statusText","setStatusText","useState","translations","useTranslationBundle","updateStateText","useCallback","detail","previouslyExpanded","expandableList_groupCollapse","expandableList_groupExpand","setTimeout","expandCollapseProps","direction","useUser","onClick","onKeyUp","isRtl","useExpandCollapse","element","getAttribute","undefined","GROUP_SELECTOR","descId","useId","stableDescIdRef","useRef","handleSelectionChange","excludeGroup","isSameKey","_jsxs","jsxs","Fragment","List","loadingIndicator","GroupLoadingIndicator","customItemRenderer","context","listItemContext","metadata","options","itemContext","expanderRenderer","parentKey","leaf","isLeaf","depth","treeDepth","expander","createHierarchicalContext","defaultListItem","itemDepth","ListGroupHeader","ariaDescribedBy","current","itemIndex","index","isFocused","isFocusRingVisible","isActive","isGridlineVisible","isExpandable","expandedKeys","LiveRegion","id","HiddenAccessible","expandableList_expandCollapseInstructionText"],"mappings":"0vMAqDA,MAAMA,GAAaC,IACC,UAAdA,EAAMC,KAAiC,cAAdD,EAAMC,KAAqC,eAAdD,EAAMC,KAC9DD,EAAME,gBACP,EAGGC,GAAiB,CACrBC,EACAC,EACAC,EACAC,EACAC,KAEA,MAAMC,EAAUF,EAAaF,GAC7B,GAAIG,GAAYC,EAAS,CACvB,MAAMC,EAAWC,EAAAA,YAAYL,EAAUG,IAClCL,GAAeM,IAAeN,IAAgBM,IACjDF,EAAS,CAAEI,MAAOH,GAErB,GAGGI,GAAe,CACnBb,EACAO,EACAC,KAEA,MAAMC,EAAUF,EAAaP,EAAMK,QAC/BG,GAAYC,IACdD,EAAS,CAAEI,MAAOH,IACC,UAAfT,EAAMc,MACRd,EAAMe,kBAET,EC8GH,MAAMC,GAAY,CAAEC,KAAK,EAAOC,KAAM,IAAIC,KAEpCC,GAAWC,EAAAA,MACVC,IACH,MAAMC,EAAUC,EAAAA,WAAW,CAAC,yBAM5B,OACEC,EAAAA,YAAMC,MAAOH,EAASI,KAAK,eACzBC,SAAAH,EAAAI,IAACC,EAAMA,OACL,CAAAC,SAPgB,KACpBT,EAAMd,SAAS,CAAEI,MAAOU,EAAMb,SAAU,EAOpCuB,QAAQ,QACRC,UAAWX,EAAMhB,SAAWmB,EAAAA,IAACS,EAAAA,eAAW,CAAAC,KAAK,OAAUV,EAAAI,IAACO,EAAYA,aAAA,CAACD,KAAK,UAG9E,IAEJ,CAACE,EAAWC,IAERD,EAAK5B,UAAY6B,EAAK7B,SACtB4B,EAAK/B,WAAagC,EAAKhC,UACvB+B,EAAK7B,WAAa8B,EAAK9B,sCAlKgCoB,SAC3DA,EAAQW,WACRA,EAAUC,KACVA,EAAIC,kBACJA,EAAiBjC,SACjBA,KACGc,IAEH,MAAOoB,EAAYC,GAAiBC,EAAQA,SAAC,IACvCC,EAAeC,uBAAiC,4BAEhDC,EAAkBC,eACrBC,IAEC,GADAzC,IAAWyC,GACPT,EAAM,CACR,MAAMU,EAAqBvC,EAAAA,YAAY6B,GAAMlC,SAAU2C,EAAOrC,OAC9D+B,EACEO,EACIL,EAAaM,+BACbN,EAAaO,8BAInBC,YAAW,KACTV,EAAc,GAAG,GAChB,IACJ,IAEH,CAACnC,EAAUgC,EAAMK,IAEbS,WDpEN/C,EACAD,EACAE,GAEA,MAAM+C,UAAEA,GAAcC,EAAAA,UAEhBC,EAAUT,eACbhD,IACCa,GAAab,EAAOO,EAAcC,EAAS,GAE7C,CAACD,EAAcC,IAGXkD,EAAUV,eACbhD,IACC,GAAkB,UAAdA,EAAMC,KAAiC,MAAdD,EAAMC,IACjCY,GAAab,EAAOO,EAAcC,QAC7B,GAAkB,cAAdR,EAAMC,KAAqC,eAAdD,EAAMC,IAAsB,CAClE,MAAM0D,EAAsB,QAAdJ,EACRnD,EAA4B,cAAdJ,EAAMC,MAAwB0D,EAClDxD,GAAeC,EAAaJ,EAAMK,OAAuBC,EAAUC,EAAcC,GAEjFR,EAAME,iBACNF,EAAMe,iBACP,IAEH,CAACR,EAAcC,EAAUF,EAAUiD,IAGrC,OAAO/C,EAAW,CAAEiD,UAAS1D,aAAW2D,WAAY,CAAA,CACtD,CCsC8BE,EACzBC,GACsC,aAAjCA,EAAQC,aAAa,aACDC,IAAfxB,EAA2B,KAAOA,EAEpChC,EAAYA,aAACsD,EAASG,EAAAA,iBAEvB,MAARxB,EAAgBxB,GAAwBwB,EAAKlC,SAC7CE,GAAYuC,GAGRkB,EAASC,EAAAA,QACTC,EAAkBC,SAAOH,GA0BzBI,EAAwBrB,eAC3BC,IACC,GAAIR,GAAqBD,EAAM,CAC7B,MAAMtB,EAAOoD,EAAYA,aAAC9B,EAAMS,EAAOrC,OACnC2D,YAAUrD,EAAM+B,EAAOrC,OACzB6B,EAAkBQ,GACT/B,EAAKA,MAAQA,EAAKA,KAAKiB,KAAO,GACvCM,EAAkB,IAAKQ,EAAQrC,MAAOM,GAEzC,IAEH,CAACuB,EAAmBD,IA+BtB,OACEgC,EAACC,KAAAC,EAAQA,oBACPjD,EAAAA,IAACkD,EAAAA,MACCpC,WAAYA,EACZC,KAAMA,EACNb,KAAK,WACLiD,iBAAkBnD,EAAAA,IAACoD,EAAAA,0BACnBpC,kBAAmB4B,EACnBS,mBApCsBC,IAC1B,MAAMtE,EAAUsE,EAAQC,gBAAgBC,SAAShF,IAC3CiF,EACJ1C,GAAQhC,EAAW,CAAEF,SAAUK,EAAAA,YAAY6B,EAAKlC,SAAUG,GAAUD,iBAAauD,EAC7EoB,EA1C0B,EAChCJ,EACAG,KAEA,MAAME,OACQrB,IAAZmB,EACI,IACEzD,EAAAI,IAACT,GAAQ,CACPX,QAASsE,EAAQE,SAAShF,IAC1BK,SAAU4E,EAAQ5E,SAClBE,SAAU0E,EAAQ1E,gBAGtBuD,EAEN,MAAO,IACFgB,EACHM,UAAWN,EAAQE,SAASI,UAC5BC,KAAMP,EAAQE,SAASM,SAAU,EACjCC,MAAOT,EAAQE,SAASQ,WAAa,EACrCC,SAAUN,EACX,EAqBmBO,CAA0BZ,EAAQC,gBAAiBE,GACvE,OAAIC,EAAYG,KACPP,EAAQa,gBAAgBT,EAAa,CAAEU,UAAWV,EAAYK,MAAQ,IAG3E/D,EAACI,IAAAiE,mBAECC,gBAAiB5B,EAAgB6B,QACjCvF,QAAS0E,EAAYF,SAAShF,IAC9BgG,UAAWd,EAAYe,MACvBL,UAAWV,EAAYK,MACvBW,UAAWpB,EAAQoB,UACnBC,mBAAoBrB,EAAQqB,mBAC5BC,SAAUtB,EAAQsB,SAClBC,mBAAmB,EACnBC,cAAc,EACdC,aAAsB,MAARhE,EAAgBxB,GAAwBwB,EAAKlC,SAC3DE,SAAUA,WACToB,EAASuD,IAZLA,EAAYF,SAAShF,IAe/B,KAYYqB,KAAUgC,WACjByB,GACOnD,EAASmD,KAGnBvE,GACCgE,EAACC,KAAAC,EAAQA,SACP,CAAA9C,SAAA,CAAAH,EAAAI,IAAC4E,EAAUA,WAAE,CAAA7E,SAAAc,IACbjB,EAAAA,YAAMiF,GAAIvC,EAAgB6B,QAAOpE,SAC/BH,EAACI,IAAA8E,EAAgBA,2BACd9D,EAAa+D,wDAO5B"}
{"version":3,"file":"InputDatePicker-005c03d0.js","sources":["../../src/UNSAFE_InputDatePicker/InputDatePickerDropdown.tsx","../../src/UNSAFE_InputDatePicker/useInputDatePickerState.ts","../../src/UNSAFE_InputDatePicker/useInputDatePicker.ts","../../src/UNSAFE_InputDatePicker/InputDatePicker.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { useCallback, useState } from 'preact/hooks';\nimport { BundleType } from '../resources/nls/bundle';\nimport { DatePicker } from '#UNSAFE_DatePicker';\nimport { type CloseDetail as DropdownCloseDetail } from '#UNSAFE_Dropdown';\nimport { getClientHints } from '#utils/PRIVATE_clientHints';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { InputDatePicker } from './InputDatePicker';\nimport { dropdownStyles, userAssistanceStyles } from './themes/InputDatePickerDropdownStyles.css';\nimport { PositionData } from '../UNSAFE_Floating';\nimport { StickyPositioningDropdown } from '#PRIVATE_FormControls';\nimport { SectionedContent } from '#PRIVATE_FormControls';\nimport { type CloseDetail as SheetCloseDetail, Sheet } from '#UNSAFE_Sheet';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { SizeOptions } from '#UNSAFE_Floating/Floating';\nimport { datePickerPropVars } from '#UNSAFE_DatePicker/themes/DatePickerContract.css';\n\ntype StickyPositioningDropdownProps = ComponentProps<typeof StickyPositioningDropdown>;\ntype InputDatePickerProps = ComponentProps<typeof InputDatePicker>;\ntype PickedPropsFromInputDatePicker = Pick<\n  InputDatePickerProps,\n  | 'assistiveText'\n  | 'dayFormatter'\n  | 'daysOutsideMonth'\n  | 'helpSourceLink'\n  | 'helpSourceText'\n  | 'isDisabled'\n  | 'isReadonly'\n  | 'label'\n  | 'messages'\n  | 'min'\n  | 'max'\n  | 'monthAndYearPicker'\n  | 'todayButton'\n  | 'todayTimeZone'\n  | 'userAssistanceDensity'\n  | 'value'\n>;\ntype DatePickerProps = ComponentProps<typeof DatePicker>;\ntype PickedPropsFromDatePicker = Pick<DatePickerProps, 'value' | 'onCommit'>;\ntype PickedPropsFromDropdown = Omit<StickyPositioningDropdownProps, 'onClose'>;\ntype CloseDetail = SheetCloseDetail | DropdownCloseDetail;\n\ntype Props = PickedPropsFromDatePicker &\n  PickedPropsFromInputDatePicker &\n  PickedPropsFromDropdown &\n  TestIdProps & {\n    /**\n     * Called when the dropdown or sheet is supposed to be closed.\n     */\n    onClose?: (detail: CloseDetail) => void;\n  };\n\n/**\n * Component that renders DatePicker either inside a dropdown or sheet; at small screen\n * widths, it renders inside a sheet. Additionally, when a dropdown is being shown beneath\n * the component, we also show any user assistance text or messages below the picker\n * because otherwise that information would be obscured from view. When a sheet is being\n * shown, it will always display UA and messages at the bottom of the sheet.\n */\nconst InputDatePickerDropdown = ({\n  anchorRef,\n  assistiveText,\n  dayFormatter,\n  daysOutsideMonth,\n  helpSourceLink,\n  helpSourceText,\n  isDisabled,\n  isOpen,\n  isReadonly,\n  label,\n  onClose,\n  onCommit,\n  max,\n  messages,\n  min,\n  monthAndYearPicker,\n  testId,\n  todayButton,\n  todayTimeZone,\n  userAssistanceDensity,\n  value\n}: Props) => {\n  // If the dropdown opens above the component, we don't want to show UA or messages.\n  const [isDropdownAbove, setDropdownAbove] = useState(false);\n  const [prevIsOpen, setPrevIsOpen] = useState(isOpen);\n  const handleDropdownPosition = useCallback<\n    NonNullable<StickyPositioningDropdownProps['onPosition']>\n  >((data: PositionData) => {\n    setDropdownAbove(data.placement.startsWith('top'));\n  }, []);\n  // Reset the flag when the dropdown is closed.\n  if (prevIsOpen !== isOpen) {\n    setPrevIsOpen(isOpen);\n    if (!isOpen) {\n      setDropdownAbove(false);\n    }\n  }\n\n  const sizeOptions: SizeOptions = {\n    isMaxWidthAdjusted: false,\n    isMaxHeightAdjusted: true\n  };\n\n  // On mobile phones, the dropdown becomes a sheet.\n  const shouldShowSheet = isPhone();\n\n  const { datePicker_label } = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const datePickerAriaLabel = datePicker_label();\n\n  const datePickerMainContent = (\n    <DatePicker\n      dayFormatter={dayFormatter}\n      daysOutsideMonth={daysOutsideMonth}\n      onCommit={onCommit}\n      max={max}\n      min={min}\n      // for sheet, we want the width to grow to the width of the sheet, otherwise it will use the theme default.\n      maxWidth={shouldShowSheet ? '100%' : undefined}\n      // for dropdown, we want a fixed width, so set width to the same var used for default maxWidth\n      width={!shouldShowSheet ? datePickerPropVars.maxWidth : '100%'}\n      monthAndYearPicker={monthAndYearPicker}\n      testId={testId}\n      todayTimeZone={todayTimeZone}\n      todayButton={todayButton}\n      value={value}\n    />\n  );\n\n  const inlineUserAssistanceFooter =\n    isOpen &&\n    (!isDropdownAbove || shouldShowSheet) &&\n    !isDisabled &&\n    !isReadonly &&\n    (assistiveText || helpSourceLink || (messages && messages.length > 0)) &&\n    (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n      <FormFieldContext.Provider value={{ isFocused: true }}>\n        <div class={userAssistanceStyles}>\n          <InlineUserAssistance\n            assistiveText={assistiveText}\n            fieldLabel={label}\n            helpSourceLink={helpSourceLink}\n            helpSourceText={helpSourceText}\n            messages={messages}\n            userAssistanceDensity={userAssistanceDensity}\n          />\n        </div>\n      </FormFieldContext.Provider>\n    ) : undefined;\n\n  const contentTestId = testId ? testId + (shouldShowSheet ? '_sheet' : '_dropdown') : undefined;\n\n  // The same content is displayed either in a dropdown or sheet: date picker and inline UA.\n  // Add styling to the dropdown to enforce a fixed width.\n  const dropdownContent = (\n    <div class={dropdownStyles}>\n      <SectionedContent\n        aria-label={datePickerAriaLabel}\n        footer={inlineUserAssistanceFooter}\n        hasFocusTrap={true}\n        main={datePickerMainContent}\n        role=\"dialog\"\n        testId={contentTestId}\n      />\n    </div>\n  );\n\n  const dropdown = shouldShowSheet ? (\n    <Sheet initialFocus=\"firstFocusable\" isOpen={isOpen} onClose={onClose}>\n      <SectionedContent\n        aria-label={datePickerAriaLabel}\n        footer={inlineUserAssistanceFooter}\n        hasFocusTrap={true}\n        main={datePickerMainContent}\n        role=\"dialog\"\n        testId={contentTestId}\n      />\n    </Sheet>\n  ) : (\n    <StickyPositioningDropdown\n      anchorRef={anchorRef}\n      initialFocus=\"firstFocusable\"\n      isOpen={isOpen}\n      onClose={onClose}\n      onPosition={handleDropdownPosition}\n      sizeOptions={sizeOptions}>\n      {dropdownContent}\n    </StickyPositioningDropdown>\n  );\n\n  return dropdown;\n};\n\nconst isPhone = () => {\n  return getClientHints().deviceType === 'phone';\n};\n\nexport { InputDatePickerDropdown, type CloseDetail };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useReducer } from 'preact/hooks';\nimport type { CalendarDate, CalendarDateRequired } from '#utils/UNSAFE_calendarDateUtils';\nimport { isCompleteCalendarDate } from '#utils/UNSAFE_calendarDateUtils';\n\ntype InputDatePickerState = {\n  /**\n   * If dateValue is a complete date, then completeDateValue is the same as dateValue\n   * otherwise is is undefined. We need to maintain separate states because\n   * InputDateMask uses CalendarDate, but DatePicker uses CalendarDateRequired.\n   * If the user types a partial date then opens the picker, we treat that as\n   * no selection. The picker opens to the current month showing today.\n   */\n  completeDateValue?: CalendarDateRequired;\n\n  /**\n   * Represents the current date value of the component. The user either selected\n   * the date in the picker, or typed it into the date field.\n   */\n  dateValue?: CalendarDate;\n};\n\ntype DateChangedAction = { type: 'dateChanged'; data?: CalendarDate };\ntype DateResetAction = { type: 'reset'; data?: CalendarDate };\ntype DateSelectedAction = { type: 'dateSelected'; data?: CalendarDateRequired };\ntype InputDatePickerReducerAction = DateChangedAction | DateResetAction | DateSelectedAction;\n\n// If dateVal is a complete date, return it as a CalendarDateRequired\n// otherwise return undefined.\nconst convertToCalendarDateRequired = (dateVal?: CalendarDate) => {\n  return !dateVal || !isCompleteCalendarDate(dateVal)\n    ? undefined\n    : (dateVal as CalendarDateRequired);\n};\n\n// Use a reducer function to manage InputDatePickerState.\nconst inputDatePickerReducer = (\n  state: InputDatePickerState,\n  action: InputDatePickerReducerAction\n): InputDatePickerState => {\n  switch (action.type) {\n    case 'dateChanged': {\n      return {\n        ...state,\n        dateValue: action.data,\n        completeDateValue: convertToCalendarDateRequired(action.data)\n      };\n    }\n    case 'dateSelected': {\n      return { ...state, dateValue: action.data, completeDateValue: action.data };\n    }\n    case 'reset': {\n      return {\n        completeDateValue: convertToCalendarDateRequired(action.data),\n        dateValue: action.data\n      };\n    }\n    default:\n      return state;\n  }\n};\n\ntype Props = {\n  /**\n   * The value of the InputDatePicker, or undefined.\n   */\n  value?: CalendarDate;\n};\n\n/**\n * useInputDatePickerState calls useReducer to determine the initial state. Any changes to that state\n * are managed by dispatching actions to the reducer function.\n */\nconst useInputDatePickerState = ({ value }: Props) => {\n  const [state, dispatch] = useReducer(inputDatePickerReducer, {\n    completeDateValue: convertToCalendarDateRequired(value),\n    dateValue: value\n  });\n\n  return { state, dispatch };\n};\n\nexport { useInputDatePickerState };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, RefObject } from 'preact';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport type { CalendarDate, CalendarDateRequired } from '#utils/UNSAFE_calendarDateUtils';\nimport { calendarDatesAreDifferent } from '#utils/PRIVATE_dayUtils';\nimport { DatePicker } from '#UNSAFE_DatePicker';\nimport { CloseDetail, InputDatePickerDropdown } from './InputDatePickerDropdown';\nimport { IconButton } from '#UNSAFE_IconButton';\nimport { InputDateMask } from '#UNSAFE_InputDateMask';\nimport { InputDatePicker } from './InputDatePicker';\nimport { useInputDatePickerState } from './useInputDatePickerState';\nimport type { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\n\ntype InputDatePickerProps = ComponentProps<typeof InputDatePicker>;\ntype InputDateMaskProps = ComponentProps<typeof InputDateMask>;\ntype DatePickerProps = ComponentProps<typeof DatePicker>;\ntype IconButtonProps = ComponentProps<typeof IconButton>;\ntype DropdownProps = ComponentProps<typeof InputDatePickerDropdown>;\n\ntype Props = {\n  onCommit: InputDatePickerProps['onCommit'];\n  onInput: InputDatePickerProps['onInput'];\n  value: InputDatePickerProps['value'];\n};\n\n/**\n * Hook that provides handlers and other functionality for InputDatePicker.\n */\nconst useInputDatePicker = ({ onCommit, onInput, value: currentValue }: Props) => {\n  // Whether the dropdown is open.\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Ref to the calendar icon button.\n  const iconRef: RefObject<HTMLButtonElement> = useRef<HTMLButtonElement>(null);\n\n  // Ref to the InputDateMask component.\n  const maskRef: RefObject<HTMLElement> = useRef<HTMLElement>(null);\n\n  // Keep track of whether the dropdown was just dismissed from an outside mousedown event.\n  const outsideMousedownRef = useRef<boolean>(false);\n  const outsideMousedownTimerRef = useRef<ReturnType<typeof setTimeout> | undefined>();\n\n  // Keep track of whether the calendar icon is focused after a date is selected\n  // and the date picker is closed.\n  const calendarFocusAfterSelect = useRef<boolean>(false);\n  const calendarFocusAfterSelectTimerRef = useRef<ReturnType<typeof setTimeout> | undefined>();\n\n  // Keep track of the last date values passed to onInput and onCommit.\n  const lastCommittedDateRef = useRef<CalendarDate | undefined>(currentValue);\n  const lastDateRef = useRef<CalendarDate | undefined>(currentValue);\n\n  // Keep track of the last controlled value passed from the parent, so we can detect a programmatic change.\n  const lastValueFromParentRef = useRef<CalendarDate | undefined>(currentValue);\n\n  // Keep track of whether a date was selected in the date picker.\n  const dateSelectedRef = useRef<boolean>(false);\n\n  const { state, dispatch } = useInputDatePickerState({ value: currentValue });\n\n  // If a new value is being pushed from the parent, and that value differs from\n  // the current value of the reducer, then this is a programmatic update\n  // and we need to call 'reset' to update the reducer state. Otherwise, the only\n  // time the reducer state is updated from the value is on mount.\n  if (calendarDatesAreDifferent(lastValueFromParentRef.current, currentValue)) {\n    lastValueFromParentRef.current = currentValue;\n    if (calendarDatesAreDifferent(currentValue, state.dateValue)) {\n      dispatch({ type: 'reset', data: currentValue });\n      lastDateRef.current = currentValue;\n      lastCommittedDateRef.current = currentValue;\n    }\n  }\n\n  // Reducer updates are async, so wait until the state updates and then call our callbacks.\n  useEffect(() => {\n    if (calendarDatesAreDifferent(state.dateValue, lastDateRef.current)) {\n      onInput({ previousValue: lastDateRef.current, value: state.dateValue });\n      lastDateRef.current = state.dateValue;\n    }\n    if (\n      dateSelectedRef.current &&\n      calendarDatesAreDifferent(state.dateValue, lastCommittedDateRef.current)\n    ) {\n      onCommit?.({ previousValue: lastCommittedDateRef.current, value: state.dateValue });\n      lastCommittedDateRef.current = state.dateValue;\n      dateSelectedRef.current = false;\n    }\n  }, [onCommit, onInput, state.dateValue]);\n\n  // Handle onInput from InputDateMask as segment values are being added or changed in the input field.\n  // We wait for the state to update before calling onInput.\n  const maskInputHandler = useCallback<InputDateMaskProps['onInput']>(\n    (detail: ValueUpdateDetail<CalendarDate>) => {\n      dispatch({ type: 'dateChanged', data: detail.value });\n    },\n    [dispatch]\n  );\n\n  // Handle onCommit from InputDateMask, which is called when the user presses Enter or the field is blurred.\n  const maskCommitHandler = useCallback<NonNullable<InputDateMaskProps['onCommit']>>(() => {\n    // If the current date value differs from the last committed value, then call onCommit.\n    if (calendarDatesAreDifferent(lastCommittedDateRef.current, state.dateValue)) {\n      onCommit?.({ value: state.dateValue, previousValue: lastCommittedDateRef.current });\n      lastCommittedDateRef.current = state.dateValue;\n    }\n  }, [onCommit, state.dateValue]);\n\n  // Respond to onAction event from the calendar icon button. Toggles the date picker dropdown.\n  const calendarIconActionHandler = useCallback<NonNullable<IconButtonProps['onAction']>>(() => {\n    // Only toggle the value of isOpen if we didn't just dismiss the dropdown.\n    if (!outsideMousedownRef.current && !calendarFocusAfterSelect.current) {\n      setIsOpen((prevIsOpen) => !prevIsOpen);\n    }\n    outsideMousedownRef.current = false;\n    calendarFocusAfterSelect.current = false;\n  }, []);\n\n  const dropdownCloseHandler = useCallback<NonNullable<DropdownProps['onClose']>>(\n    (detail: CloseDetail) => {\n      // Keep track of when the dropdown is closed via outside mousedown, including when the calendar icon\n      // is clicked. We need this in order to toggle visibility of the picker and dropdown.\n      if (detail.reason === 'outsideMousedown') {\n        outsideMousedownRef.current = true;\n        clearTimeout(outsideMousedownTimerRef.current);\n\n        // Clear the flag after a short delay to ensure the dropdown can be opened again.\n        outsideMousedownTimerRef.current = setTimeout(() => {\n          outsideMousedownRef.current = false;\n        }, 200);\n      } else if (detail.reason === 'dismissed' || detail.reason === 'keyboardDismissed') {\n        // Focus the calendar icon when the dropdown is closed.\n        iconRef.current?.focus();\n      }\n      setIsOpen(false);\n    },\n    []\n  );\n\n  // Handle date selection in the picker.\n  //   - Updates the value in state.\n  //   - Closes the dropdown.\n  //   - Sets focus to the date field.\n  const datePickerCommitHandler = useCallback<DatePickerProps['onCommit']>(\n    (detail: ValueUpdateDetail<CalendarDateRequired>) => {\n      // Set focus to the calendar icon when a date is selected.\n      iconRef.current?.focus();\n\n      // If user is using the keyboard, date selection happens on keyDown.\n      // If we transfer focus to the calendar icon, it then sees the corresponding\n      // keyUp and thinks the button was triggered again (usePress reacts to\n      // keyUp, not keyDown). Maintain a flag that prevents this from happening,\n      // and clear it after a short delay in case selection was made with the mouse.\n      // TODO: Investigate a better way to prevent the dropdown from reopening (JET-67580).\n      calendarFocusAfterSelect.current = true;\n      clearTimeout(calendarFocusAfterSelectTimerRef.current);\n      calendarFocusAfterSelectTimerRef.current = setTimeout(() => {\n        calendarFocusAfterSelect.current = false;\n      }, 500);\n\n      // Set a ref indicating a date was selected.\n      dateSelectedRef.current = true;\n      dispatch({ type: 'dateSelected', data: detail.value });\n      setIsOpen(false);\n    },\n    [dispatch]\n  );\n\n  return {\n    calendarIconActionHandler,\n    datePickerCommitHandler,\n    dropdownCloseHandler,\n    completeDateValue: state.completeDateValue,\n    dateValue: state.dateValue,\n    iconRef,\n    isOpen,\n    maskCommitHandler,\n    maskInputHandler,\n    maskRef\n  };\n};\n\nexport { useInputDatePicker };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentProps, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useImperativeHandle, useRef } from 'preact/hooks';\nimport { BundleType } from '../resources/nls/bundle';\nimport { CalendarIcon } from '#PRIVATE_ThemedIcons/CalendarIcon';\nimport {\n  CalendarDate,\n  CalendarDatePlaceholders,\n  InputDateMask,\n  InputDateMaskContext\n} from '#UNSAFE_InputDateMask';\nimport { DatePicker } from '#UNSAFE_DatePicker';\nimport { HiddenAccessible } from '#UNSAFE_HiddenAccessible';\nimport { IconButton } from '#UNSAFE_IconButton';\nimport { InputDatePickerDropdown } from './InputDatePickerDropdown';\nimport { FocusableHandle } from '#hooks/UNSAFE_useFocusableTextField';\nimport { merge } from '#utils/UNSAFE_stringUtils';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { useInputDatePicker } from './useInputDatePicker';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\n\ntype InputDateMaskProps = ComponentProps<typeof InputDateMask>;\ntype PickedPropsFromInputDateMask = Pick<\n  InputDateMaskProps,\n  | 'aria-describedby'\n  | 'assistiveText'\n  | 'columnSpan'\n  | 'helpSourceLink'\n  | 'helpSourceText'\n  | 'isDisabled'\n  | 'isReadonly'\n  | 'isRequired'\n  | 'isRequiredShown'\n  | 'label'\n  | 'labelEdge'\n  | 'labelStartWidth'\n  | 'messages'\n  | 'textAlign'\n  | 'testId'\n  | 'userAssistanceDensity'\n  | 'variant'\n>;\n\ntype DatePickerProps = ComponentProps<typeof DatePicker>;\ntype PickedPropsFromDatePicker = Pick<\n  DatePickerProps,\n  | 'dayFormatter'\n  | 'daysOutsideMonth'\n  | 'max'\n  | 'min'\n  | 'monthAndYearPicker'\n  | 'todayTimeZone'\n  | 'todayButton'\n>;\n\ntype Props = PickedPropsFromInputDateMask &\n  PickedPropsFromDatePicker & {\n    /**\n     * If specified, overrides the locale specific order of the individual date segments\n     * in the date field as well as the locale specific separator. The value of each placeholder\n     * is only used when the type is 'literal', otherwise it is replaced with a translated\n     * placeholder for month, day, or year. The placeholders must include month, day, and year.\n     */\n    masks?: CalendarDatePlaceholders;\n\n    /**\n     * The current display value of the component.\n     * This is a CalendarDate, not CalendarDateRequired, because this is a controlled component and\n     * the user may type the month, day, and year separately. If a selection is made in the date\n     * picker, then the value is a complete date.\n     */\n    value?: CalendarDate;\n\n    /**\n     * Callback invoked when the user commits the entered value by blurring or hitting the enter key.\n     * It is also called when a selection is made in the date picker.\n     */\n    onCommit?: (detail: ValueUpdateDetail<CalendarDate>) => void;\n\n    /**\n     * Callback invoked each time the user changes the value of a segment. For example, if the user\n     * types '12' into the month segment, this callback will be called twice to change the month\n     * first to '1' and then '12'.\n     */\n    onInput: (detail: ValueUpdateDetail<CalendarDate>) => void;\n  };\n\n/**\n * InputDatePicker allows users to enter or select a single date using a calendar interface.\n */\nexport const InputDatePicker = forwardRef(\n  (\n    {\n      'aria-describedby': propDescribedBy,\n      assistiveText,\n      dayFormatter,\n      daysOutsideMonth,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isReadonly,\n      label,\n      max,\n      messages,\n      min,\n      monthAndYearPicker,\n      todayTimeZone,\n      todayButton,\n      value,\n      onCommit,\n      onInput,\n      testId,\n      userAssistanceDensity: propUserAssistanceDensity,\n      ...dateMaskProps\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      calendarIconActionHandler,\n      datePickerCommitHandler,\n      completeDateValue,\n      dateValue,\n      dropdownCloseHandler,\n      iconRef,\n      isOpen,\n      maskCommitHandler,\n      maskInputHandler,\n      maskRef\n    } = useInputDatePicker({\n      onCommit,\n      onInput,\n      value\n    });\n\n    const mainFieldRef = useRef<HTMLDivElement>(null);\n    const { inputDatePicker_selectDate, inputDatePicker_instruction } =\n      useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n    const calendarIconAriaLabel = inputDatePicker_selectDate();\n\n    // We need this to determine if UA/messaging should be shown in the dropdown.\n    const { userAssistanceDensity: formUserAssistanceDensity } = useFormContext();\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    useImperativeHandle(ref!, () => ({\n      focus: () => {\n        maskRef.current?.focus();\n      },\n      blur: () => {\n        maskRef.current?.blur();\n      }\n    }));\n\n    const maskFieldInstructionId = useId();\n    const maskFieldInstructionText = inputDatePicker_instruction();\n    const maskFieldInstruction =\n      !isDisabled && !isReadonly ? (\n        <HiddenAccessible id={maskFieldInstructionId} isHidden={true}>\n          {maskFieldInstructionText}\n        </HiddenAccessible>\n      ) : undefined;\n    const ariaDescribedBy =\n      !isDisabled && !isReadonly\n        ? merge([propDescribedBy, maskFieldInstructionId])\n        : propDescribedBy;\n\n    const endContent = (\n      <IconButton\n        aria-haspopup=\"dialog\"\n        aria-label={calendarIconAriaLabel}\n        isDisabled={isDisabled}\n        ref={iconRef}\n        size=\"sm\"\n        testId={testId ? testId + '_calendarIcon' : undefined}\n        variant=\"ghost\"\n        onAction={calendarIconActionHandler}>\n        <CalendarIcon />\n      </IconButton>\n    );\n\n    const shouldShowDropdown = isOpen as boolean;\n\n    return (\n      <>\n        <InputDateMaskContext.Provider\n          value={{ isDropdownOpen: isOpen, isInputDatePickerParent: true }}>\n          <InputDateMask\n            aria-describedby={ariaDescribedBy}\n            assistiveText={assistiveText}\n            endContent={endContent}\n            helpSourceLink={helpSourceLink}\n            helpSourceText={helpSourceText}\n            isDisabled={isDisabled}\n            isReadonly={isReadonly}\n            label={label}\n            onCommit={maskCommitHandler}\n            onInput={maskInputHandler}\n            mainFieldRef={mainFieldRef}\n            messages={messages}\n            testId={testId}\n            ref={maskRef}\n            userAssistanceDensity={propUserAssistanceDensity}\n            value={dateValue}\n            {...dateMaskProps}\n          />\n        </InputDateMaskContext.Provider>\n\n        {maskFieldInstruction}\n\n        {shouldShowDropdown && (\n          <InputDatePickerDropdown\n            anchorRef={mainFieldRef}\n            assistiveText={assistiveText}\n            dayFormatter={dayFormatter}\n            daysOutsideMonth={daysOutsideMonth}\n            helpSourceLink={helpSourceLink}\n            helpSourceText={helpSourceText}\n            isDisabled={isDisabled}\n            isReadonly={isReadonly}\n            isOpen={isOpen}\n            label={label}\n            onClose={dropdownCloseHandler}\n            onCommit={datePickerCommitHandler}\n            max={max}\n            messages={messages}\n            min={min}\n            monthAndYearPicker={monthAndYearPicker}\n            testId={testId ? testId + '_datePicker' : undefined}\n            todayTimeZone={todayTimeZone}\n            todayButton={todayButton}\n            userAssistanceDensity={userAssistanceDensity}\n            value={completeDateValue}\n          />\n        )}\n      </>\n    );\n  }\n);\n"],"names":["useState","useCallback","useTranslationBundle","_jsx","DatePicker","datePickerPropVars","FormFieldContext","userAssistanceStyles","InlineUserAssistance","dropdownStyles","SectionedContent","Sheet","StickyPositioningDropdown","getClientHints","isCompleteCalendarDate","useReducer","useRef","calendarDatesAreDifferent","useEffect","forwardRef","useFormContext","useImperativeHandle","useId","HiddenAccessible","merge","IconButton","CalendarIcon","_jsxs","InputDateMaskContext","InputDateMask"],"mappings":"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"}
{"version":3,"file":"keyboardUtils-f835e1ee.js","sources":["../../src/utils/PRIVATE_keyboardUtils/keyboardUtils.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { getClientHints } from '../PRIVATE_clientHints';\n\nconst clientHints = getClientHints();\n\n/**\n * Checks if the key pressed is the backspace/delete key.\n *\n * @param event The keyboard event\n * @return the result of the check\n */\nexport function isBackspaceOrDelete(event: KeyboardEvent) {\n  return event.code === 'Backspace' || event.code === 'Delete';\n}\n\n/**\n * Checks if the current event is a select-all event\n *\n * @param event The keyboard event\n * @returns the result of the check\n */\nexport function isSelectAll(event: KeyboardEvent) {\n  return (\n    ((clientHints.platform === 'mac' && event.metaKey) ||\n      (clientHints.platform === 'windows' && event.ctrlKey)) &&\n    event.code === 'KeyA'\n  );\n}\n\nexport const KEYS = {\n  TAB: 'Tab',\n  ENTER: 'Enter',\n  NUMPAD_ENTER: 'NumpadEnter',\n  ESC: 'Escape',\n  SPACE: 'Space',\n  LEFT: 'ArrowLeft',\n  UP: 'ArrowUp',\n  RIGHT: 'ArrowRight',\n  DOWN: 'ArrowDown',\n  SHIFT_LEFT: 'ShiftLeft',\n  SHIFT_RIGHT: 'ShiftRight',\n  CTRL_LEFT: 'ControlLeft',\n  CTRL_RIGHT: 'ControlRight',\n  ALT_LEFT: 'AltLeft',\n  ALT_RIGHT: 'AltRight',\n  PAGE_UP: 'PageUp',\n  PAGE_DOWN: 'PageDown',\n  HOME: 'Home',\n  END: 'End',\n  BACKSPACE: 'Backspace',\n  DELETE: 'Delete'\n};\n\nexport const isControlKey = (event: KeyboardEvent) => {\n  switch (event.code) {\n    case KEYS.SHIFT_LEFT:\n    case KEYS.SHIFT_RIGHT:\n    case KEYS.CTRL_LEFT:\n    case KEYS.CTRL_RIGHT:\n    case KEYS.ALT_LEFT:\n    case KEYS.ALT_RIGHT:\n      return true;\n    default:\n      return event.metaKey || event.ctrlKey;\n  }\n};\n\nexport const isFunctionKey = (event: KeyboardEvent) => {\n  return /\\bF([1-9]|1[0-2])\\b/i.test(event.code);\n};\n\nexport const isControlOrFunctionKey = (event: KeyboardEvent) => {\n  return isControlKey(event) || isFunctionKey(event);\n};\n"],"names":["getClientHints"],"mappings":";;;;;AAAA;;;;;;AAMG;AAIH,MAAM,WAAW,GAAGA,4BAAc,EAAE,CAAC;AAErC;;;;;AAKG;AACG,SAAU,mBAAmB,CAAC,KAAoB,EAAA;IACtD,OAAO,KAAK,CAAC,IAAI,KAAK,WAAW,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC;AAC/D,CAAC;AAED;;;;;AAKG;AACG,SAAU,WAAW,CAAC,KAAoB,EAAA;AAC9C,IAAA,QACE,CAAC,CAAC,WAAW,CAAC,QAAQ,KAAK,KAAK,IAAI,KAAK,CAAC,OAAO;SAC9C,WAAW,CAAC,QAAQ,KAAK,SAAS,IAAI,KAAK,CAAC,OAAO,CAAC;AACvD,QAAA,KAAK,CAAC,IAAI,KAAK,MAAM,EACrB;AACJ,CAAC;AAEY,MAAA,IAAI,GAAG;AAClB,IAAA,GAAG,EAAE,KAAK;AACV,IAAA,KAAK,EAAE,OAAO;AACd,IAAA,YAAY,EAAE,aAAa;AAC3B,IAAA,GAAG,EAAE,QAAQ;AACb,IAAA,KAAK,EAAE,OAAO;AACd,IAAA,IAAI,EAAE,WAAW;AACjB,IAAA,EAAE,EAAE,SAAS;AACb,IAAA,KAAK,EAAE,YAAY;AACnB,IAAA,IAAI,EAAE,WAAW;AACjB,IAAA,UAAU,EAAE,WAAW;AACvB,IAAA,WAAW,EAAE,YAAY;AACzB,IAAA,SAAS,EAAE,aAAa;AACxB,IAAA,UAAU,EAAE,cAAc;AAC1B,IAAA,QAAQ,EAAE,SAAS;AACnB,IAAA,SAAS,EAAE,UAAU;AACrB,IAAA,OAAO,EAAE,QAAQ;AACjB,IAAA,SAAS,EAAE,UAAU;AACrB,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,GAAG,EAAE,KAAK;AACV,IAAA,SAAS,EAAE,WAAW;AACtB,IAAA,MAAM,EAAE,QAAQ;EAChB;AAEK,MAAM,YAAY,GAAG,CAAC,KAAoB,KAAI;AACnD,IAAA,QAAQ,KAAK,CAAC,IAAI;QAChB,KAAK,IAAI,CAAC,UAAU,CAAC;QACrB,KAAK,IAAI,CAAC,WAAW,CAAC;QACtB,KAAK,IAAI,CAAC,SAAS,CAAC;QACpB,KAAK,IAAI,CAAC,UAAU,CAAC;QACrB,KAAK,IAAI,CAAC,QAAQ,CAAC;QACnB,KAAK,IAAI,CAAC,SAAS;AACjB,YAAA,OAAO,IAAI,CAAC;AACd,QAAA;AACE,YAAA,OAAO,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC;KACzC;AACH,CAAC,CAAC;AAEK,MAAM,aAAa,GAAG,CAAC,KAAoB,KAAI;IACpD,OAAO,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACjD,CAAC,CAAC;AAEW,MAAA,sBAAsB,GAAG,CAAC,KAAoB,KAAI;IAC7D,OAAO,YAAY,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC;AACrD;;;;;;;"}
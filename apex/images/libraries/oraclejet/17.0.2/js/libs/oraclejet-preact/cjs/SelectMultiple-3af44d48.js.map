{"version":3,"file":"SelectMultiple-3af44d48.js","sources":["../../src/UNSAFE_SelectMultiple/SelectMultipleDesktopDropdown.tsx","../../src/UNSAFE_SelectMultiple/SelectedValuesCount.tsx","../../src/UNSAFE_SelectMultiple/SelectMultipleField.tsx","../../src/UNSAFE_SelectMultiple/TextTag.tsx","../../src/UNSAFE_SelectMultiple/TextTagList.tsx","../../src/UNSAFE_SelectMultiple/SelectMultipleFieldInput.tsx","../../src/UNSAFE_SelectMultiple/MobileDropdownFooter.tsx","../../src/UNSAFE_SelectMultiple/useDisplayValues.ts","../../src/UNSAFE_SelectMultiple/useSelectedOnlyData.ts","../../src/UNSAFE_SelectMultiple/useMobileDropdown.ts","../../src/UNSAFE_SelectMultiple/SelectMultipleMobileDropdown.tsx","../../src/UNSAFE_SelectMultiple/useSelectMultiple.ts","../../src/UNSAFE_SelectMultiple/SelectMultiple.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps } from 'preact';\nimport { Ref } from 'preact/hooks';\nimport {\n  DefaultList,\n  Dropdown,\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  LinkItem\n} from '../PRIVATE_SelectCommon';\nimport { CurrentKeyDetail, DataState, SelectionDetail } from '../UNSAFE_Collection';\nimport { InlineUserAssistance, UserAssistanceDensityType } from '../UNSAFE_UserAssistance';\nimport { PositionData } from '../UNSAFE_Floating';\nimport { VirtualizedListView } from '../UNSAFE_VirtualizedListView';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { ItemRendererProps } from './SelectMultiple.types';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = {\n  assistiveText?: string;\n  currentKey?: K;\n  data?: DataState<K, D> | null;\n  dropdownId: string;\n  dropdownRef: Ref<HTMLDivElement>;\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  isAddToListShown?: boolean;\n  isDisabled?: boolean;\n  isDropdownAbove: boolean;\n  isEmptyResults: boolean;\n  isOpen: boolean;\n  isReadonly?: false;\n  isSelectedOnlyView: boolean;\n  isUserFiltering: boolean;\n  itemRenderer?: (itemRendererProps: ItemRendererProps<K, D>) => ComponentChildren;\n  itemText: ItemTextType<K, D>;\n  label: string;\n  mainFieldRef: Ref<HTMLDivElement>;\n  searchText?: string;\n  selectedKeys?: Set<K>;\n  userAssistanceDensity?: UserAssistanceDensityType;\n  onAddToListAction?: () => void;\n  onAutoDismiss: ((event?: Event | undefined) => void) | ((event?: Event | undefined) => void);\n  onCurrentKeyChange?: (detail: CurrentKeyDetail<K>) => void;\n  onLoadRange?: ComponentProps<typeof VirtualizedListView>['onLoadRange'];\n  onPosition: (data: PositionData) => void;\n  onSelectionChange?: (detail: SelectionDetail<K>) => void;\n};\n\nexport function SelectMultipleDesktopDropdown<\n  K extends string | number,\n  D extends Record<string, any>\n>({\n  assistiveText,\n  currentKey,\n  data,\n  dropdownId,\n  dropdownRef,\n  helpSourceLink,\n  helpSourceText,\n  isAddToListShown,\n  isDisabled,\n  isDropdownAbove,\n  isEmptyResults,\n  isOpen,\n  isReadonly,\n  isSelectedOnlyView,\n  isUserFiltering,\n  itemRenderer,\n  itemText,\n  label,\n  mainFieldRef,\n  searchText,\n  selectedKeys,\n  userAssistanceDensity,\n  onAddToListAction,\n  onAutoDismiss,\n  onCurrentKeyChange,\n  onLoadRange,\n  onPosition,\n  onSelectionChange\n}: Props<K, D>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const dropdownInlineUserAssistance =\n    isOpen &&\n    !isDropdownAbove &&\n    !isDisabled &&\n    !isReadonly &&\n    (assistiveText || helpSourceLink) &&\n    (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n      <DropdownUserAssistance\n        assistiveText={assistiveText}\n        fieldLabel={label}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        userAssistanceDensity={userAssistanceDensity}\n      />\n    ) : undefined;\n\n  const dropdownListContent = isEmptyResults ? (\n    isAddToListShown ? undefined : (\n      <EmptyResults />\n    )\n  ) : (\n    <DefaultList<K, D>\n      aria-label={label ?? ''}\n      currentItemVariant=\"highlight\"\n      currentKey={currentKey}\n      data={data}\n      itemRenderer={itemRenderer}\n      itemText={itemText}\n      searchText={isSelectedOnlyView ? undefined : isUserFiltering ? searchText : undefined}\n      selectedKeys={selectedKeys}\n      selectionMode=\"multiple\"\n      onCurrentKeyChange={onCurrentKeyChange}\n      onLoadRange={onLoadRange}\n      onSelectionChange={onSelectionChange}\n    />\n  );\n\n  const addToListContent = isAddToListShown ? (\n    <LinkItem isHighlighted={isEmptyResults} onAction={onAddToListAction}>\n      {translations.select_addToList()}\n    </LinkItem>\n  ) : undefined;\n\n  return (\n    <Dropdown\n      dropdownRef={dropdownRef}\n      id={dropdownId}\n      isOpen={isOpen}\n      anchorRef={mainFieldRef}\n      onAutoDismiss={onAutoDismiss}\n      onPosition={onPosition}>\n      <DropdownList\n        hasBottomGap={dropdownInlineUserAssistance === undefined}\n        isLoading={data === null}>\n        {dropdownListContent}\n        {addToListContent}\n      </DropdownList>\n      {dropdownInlineUserAssistance}\n    </Dropdown>\n  );\n}\n","import { ComponentProps } from 'preact';\nimport { Chip } from '../UNSAFE_Chip';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { selectedValueCountStyles } from './themes/SelectedValuesCountStyles.css';\n\ntype PickedPropsFromChip = Pick<\n  ComponentProps<typeof Chip>,\n  'aria-label' | 'isDisabled' | 'isSelected' | 'onToggle'\n>;\n\ntype Props = PickedPropsFromChip & {\n  count?: number;\n  onKeyDown?: (event: KeyboardEvent) => void;\n  onKeyUp?: (event: KeyboardEvent) => void;\n  onMouseDown?: (event: MouseEvent) => void;\n};\n\n// This component renders a badge showing the number of selected values\nexport function SelectedValuesCount({\n  'aria-label': ariaLabel,\n  count = 0,\n  onKeyDown,\n  onKeyUp,\n  onMouseDown,\n  ...passThroughProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const instructions = translations.selectMultiple_showSelectedValues();\n  const accLabel = ariaLabel ? `${ariaLabel}. ` : '';\n\n  const ninetyNinePlus = translations.selectMultiple_countPlus({ COUNT: `99` });\n  // The Chip shows the number of values selected or 99+ if the number is over 99.\n  const chipCount = count > 99 ? `${ninetyNinePlus}` : `${count}`;\n  // The screenreader will hear what the number of selected values is along with instructions\n  // like Click to see the full list.\n  const valuesSelectedText = translations.selectMultiple_valuesSelected({\n    VALUE_COUNT: `${count}`\n  });\n  const label = `${accLabel}${valuesSelectedText} ${instructions}`;\n  return (\n    <div\n      class={selectedValueCountStyles.base}\n      onKeyDown={onKeyDown}\n      onKeyUp={onKeyUp}\n      onMouseDown={onMouseDown}>\n      <Chip aria-label={label} {...passThroughProps}>\n        {chipCount}\n      </Chip>\n    </div>\n  );\n}\n","import { ComponentChildren, ComponentProps } from 'preact';\nimport { DropdownArrow } from '../PRIVATE_SelectCommon';\nimport { Flex } from '../UNSAFE_Flex';\nimport { TextField } from '../UNSAFE_TextField';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { IconButton } from '../UNSAFE_IconButton';\nimport { NavLeft } from '../UNSAFE_RedwoodIcons/NavLeft';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { CancelS } from '../UNSAFE_RedwoodIcons/CancelS';\nimport { LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\n\ntype TextFieldProps = ComponentProps<typeof TextField>;\ntype PassThroughTextFieldProps = TestIdProps &\n  Pick<\n    TextFieldProps,\n    | 'compactUserAssistance'\n    | 'contentVariant'\n    | 'id'\n    | 'inlineUserAssistance'\n    | 'label'\n    | 'labelEdge'\n    | 'labelStartWidth'\n    | 'mainFieldRef'\n    | 'onBlur'\n    | 'onFocus'\n    | 'onMouseDown'\n    | 'statusVariant'\n    | 'styleVariant'\n  >;\n\ntype DropdownArrowProps = ComponentProps<typeof DropdownArrow>;\ntype IconButtonProps = ComponentProps<typeof IconButton>;\ntype SelectedValuesCountProps = ComponentProps<typeof SelectedValuesCount>;\n\ntype Props = PassThroughTextFieldProps & {\n  children?: ComponentChildren;\n  columnSpan?: LayoutColumnSpan;\n  fieldLabel?: string;\n  hasInsideLabel?: boolean;\n  isBackButtonShown?: boolean;\n  isClearButtonShown?: boolean;\n  isDropdownArrowShown?: boolean;\n  isDropdownSelectedOnlyView?: boolean;\n  isSelectedValuesCountShown?: boolean;\n  selectedValuesCount?: number;\n  onBackButtonClick?: IconButtonProps['onAction'];\n  onClearButtonClick?: IconButtonProps['onAction'];\n  onDropdownArrowClick?: DropdownArrowProps['onClick'];\n  onSelectedValuesCountKeyDown?: SelectedValuesCountProps['onKeyDown'];\n  onSelectedValuesCountKeyUp?: SelectedValuesCountProps['onKeyUp'];\n  onSelectedValuesCountMouseDown?: SelectedValuesCountProps['onMouseDown'];\n  onSelectedValuesCountToggle?: SelectedValuesCountProps['onToggle'];\n};\n\nexport function SelectMultipleField({\n  children,\n  columnSpan,\n  fieldLabel,\n  hasInsideLabel,\n  isBackButtonShown,\n  isClearButtonShown,\n  isDropdownArrowShown,\n  isDropdownSelectedOnlyView,\n  isSelectedValuesCountShown,\n  selectedValuesCount,\n  onBackButtonClick,\n  onClearButtonClick,\n  onDropdownArrowClick,\n  onSelectedValuesCountKeyDown,\n  onSelectedValuesCountKeyUp,\n  onSelectedValuesCountMouseDown,\n  onSelectedValuesCountToggle,\n  ...passThroughTextFieldProps\n}: Props) {\n  const { isDisabled, isLoading } = useFormFieldContext();\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const backButton = isBackButtonShown ? (\n    <IconButton\n      aria-label={translations.selectMultiple_back()}\n      size=\"xs\"\n      variant=\"ghost\"\n      onAction={onBackButtonClick}>\n      <NavLeft />\n    </IconButton>\n  ) : null;\n\n  const clearButton = isClearButtonShown ? (\n    <IconButton\n      aria-label={translations.formControl_clear()}\n      size=\"sm\"\n      variant=\"ghost\"\n      onAction={onClearButtonClick}>\n      <CancelS />\n    </IconButton>\n  ) : null;\n\n  const dropdownArrow = isDropdownArrowShown ? (\n    <DropdownArrow\n      isDisabled={isDisabled}\n      onClick={onDropdownArrowClick}\n      testId={`${passThroughTextFieldProps.testId}_dropdownarrow`}\n    />\n  ) : null;\n\n  const endContent = isLoading ? undefined : !isSelectedValuesCountShown ? (\n    <>\n      {isClearButtonShown && clearButton}\n      {isDropdownArrowShown && dropdownArrow}\n    </>\n  ) : (\n    <Flex align=\"center\" justify=\"center\" gap={[0, '1x']}>\n      <SelectedValuesCount\n        aria-label={fieldLabel}\n        count={selectedValuesCount}\n        isDisabled={isDisabled}\n        isSelected={isDropdownSelectedOnlyView}\n        onKeyDown={onSelectedValuesCountKeyDown}\n        onKeyUp={onSelectedValuesCountKeyUp}\n        onMouseDown={onSelectedValuesCountMouseDown}\n        onToggle={onSelectedValuesCountToggle}\n      />\n      {isClearButtonShown && clearButton}\n      {isDropdownArrowShown && dropdownArrow}\n    </Flex>\n  );\n\n  return (\n    <TextField\n      columnSpan={columnSpan}\n      startContent={isBackButtonShown && backButton}\n      mainContent={children}\n      endContent={endContent}\n      {...passThroughTextFieldProps}\n    />\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useCallback, useEffect, useRef } from 'preact/hooks';\nimport { preventDefault } from '../PRIVATE_SelectCommon';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { IconButton } from '../UNSAFE_IconButton';\nimport { Text } from '../UNSAFE_Text';\nimport { CloseIcon } from '../PRIVATE_ThemedIcons/CloseIcon';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { TabbableModeContext } from '../hooks/UNSAFE_useTabbableMode';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { isBackspaceOrDelete } from '../utils/PRIVATE_keyboardUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { textTagStyles } from './themes/TextTagStyles.css';\n\n/**\n * Props for the TextTag component\n */\ntype Props<V> = {\n  /**\n   * The label for the text tag\n   */\n  children: string;\n\n  /**\n   * Specifies whether to show the remove icon\n   */\n  removeIcon?: 'always' | 'never';\n\n  /**\n   * Indicates whether the component is focused\n   */\n  isFocused?: boolean;\n\n  /**\n   * Specifies if the TextTag component is selected\n   */\n  isSelected?: boolean;\n\n  /**\n   * Callback to be invoked when Delete/Backspace is pressed\n   */\n  onRemoveAction?: (value: V) => void;\n\n  /**\n   * Callback to be invoked when clicking on the text tag\n   */\n  onSelect?: (value: V) => void;\n\n  /**\n   * Callback to be invoked when the remove icon is clicked\n   */\n  onRemoveIconClick?: (value: V) => void;\n\n  /**\n   * The value of the text tag\n   */\n  value: V;\n};\n\n/**\n * The component for rendering selectable/removable TextTag\n *\n * @param param0 The props for the TextTag component\n */\nexport function TextTag<V>({\n  children,\n  removeIcon = 'never',\n  isSelected = false,\n  onRemoveAction,\n  onSelect,\n  onRemoveIconClick,\n  isFocused,\n  value\n}: Props<V>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const spanRef = useRef<HTMLSpanElement>(null);\n  const navigationTextId = useId();\n\n  const rootClasses = classNames([textTagStyles.base, isSelected && textTagStyles.selected]);\n\n  const onRemoveActionCallback = useCallback(() => {\n    onRemoveAction?.(value);\n  }, [value, onRemoveAction]);\n  const onSelectCallback = useCallback(() => {\n    onSelect?.(value);\n  }, [value, onSelect]);\n  const onRemoveIconClickCallback = useCallback(() => {\n    onRemoveIconClick?.(value);\n  }, [value, onRemoveIconClick]);\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (isBackspaceOrDelete(event)) {\n        onRemoveActionCallback();\n        return;\n      }\n    },\n    [onRemoveActionCallback]\n  );\n\n  useEffect(() => {\n    if (isFocused && isSelected) {\n      spanRef.current?.focus();\n      spanRef.current?.scrollIntoView({ block: 'nearest' });\n    }\n  }, [isFocused, isSelected]);\n\n  return (\n    <>\n      <span\n        ref={spanRef}\n        class={rootClasses}\n        tabIndex={-1}\n        onClick={onSelectCallback}\n        onKeyUp={onKeyUp}\n        // Kill mouse down event to prevent focus transfer done by the parent container.\n        // We will programmatically take back focus in response to the onClick event.\n        onMouseDown={preventDefault}\n        role=\"option\"\n        aria-describedby={navigationTextId}\n        aria-selected={isSelected ? 'true' : 'false'}>\n        <Text size=\"md\" variant=\"inherit\">\n          {children}\n        </Text>\n        {removeIcon === 'always' && (\n          <TabbableModeContext.Provider value={{ isTabbable: false }}>\n            <IconButton size=\"xs\" variant=\"ghost\" onAction={onRemoveIconClickCallback}>\n              <CloseIcon />\n            </IconButton>\n          </TabbableModeContext.Provider>\n        )}\n      </span>\n      <HiddenAccessible id={navigationTextId}>\n        {translations.selectMultiple_removeSelectedTagInstructionText()}\n      </HiddenAccessible>\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback, useEffect, useImperativeHandle, useRef, useState } from 'preact/hooks';\nimport { useFocusWithin } from '../hooks/UNSAFE_useFocusWithin';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { isSelectAll } from '../utils/PRIVATE_keyboardUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { DimensionProps, dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { TextTag } from './TextTag';\nimport { textTagListStyles } from './themes/TextTagListStyles.css';\n\n/**\n * Data structure of the text tag item\n */\ntype TextTagItem<V> = {\n  label: string;\n  value: V;\n};\n\n/**\n * Type of the ref handle of the component\n */\ntype TextTagListHandle = {\n  /**\n   * Focuses the text tag container\n   */\n  focus: () => void;\n\n  /**\n   * Blurs the text tag container\n   */\n  blur: () => void;\n};\n\n/**\n * Supported style props\n */\nconst supportedDimensions = ['maxWidth'] as const;\ntype SupportedDimensions = (typeof supportedDimensions)[number];\ntype StyleProps = Pick<DimensionProps, SupportedDimensions>;\n\n/**\n * Props for the TextTag component\n */\ntype Props<V> = StyleProps & {\n  /**\n   * Specifies accessible screen reader text.\n   */\n  'aria-label'?: string;\n\n  /**\n   * An array of objects which is used to stamp out the TextTag components\n   */\n  data: TextTagItem<V>[];\n\n  /**\n   * Flag to indicate if the label is inside the container\n   * TODO: Handle this in a more generic way if/when we make this component generic\n   */\n  hasInsideLabel?: boolean;\n\n  /**\n   * Specifies whether to show the remove icon in the TextTag components\n   */\n  removeIcon?: 'always' | 'never';\n\n  /**\n   * A callback function to be invoked when the component wants to exit the navigation.\n   * This happens when one presses Right arrow after reaching the end of the list (or Left\n   * arrow in RTL mode).\n   */\n  onExitNavigation?: () => void;\n\n  /**\n   * A callback function to be invoked when one or more text tags are removed\n   */\n  onRemove?: (items: V[]) => void;\n};\n\n/**\n * Setting up interpolations\n */\nconst supportedInterpolations = Array.from(supportedDimensions, (x) => dimensionInterpolations[x]);\nconst styleInterpolations = mergeInterpolations<StyleProps>(supportedInterpolations);\n\n/**\n * TextTagList component for rendering the collection of TextTags as well\n * as managing the navigation.\n *\n * @param param0 The props for the TextTagList component\n * @param ref The ref for the component\n */\nfunction _TextTagList<V>(props: Props<V>, ref: Ref<TextTagListHandle> = () => {}) {\n  // destructure props\n  const {\n    'aria-label': ariaLabel,\n    data,\n    hasInsideLabel = false,\n    removeIcon = 'never',\n    onExitNavigation,\n    onRemove\n  } = props;\n\n  // ref for setting the scroll position for the div\n  const divRef = useRef<HTMLDivElement>(null);\n\n  // Internal state for storing the current selected tags\n  const [selectedTags, setSelectedTags] = useState<V[]>([]);\n\n  // The navigation of focus will depend on the reading direction, so we need to\n  // get the current reading direction\n  const { direction } = useUser();\n\n  // Create a ref for maintaining the current selected tag. This is used for\n  // determining which tag needs to be selected next when pressing ArrowLeft or\n  // ArrowRight.\n  const currentSelectedTagIndex = useRef(-1);\n  // Create a ref that holds the last tag which is needed when receiving focus\n  // programmatically.\n  const lastTag = data.at(-1)?.value;\n  const lastTagMeta = useRef({ value: lastTag, index: data.length - 1 });\n  lastTagMeta.current = { value: lastTag, index: data.length - 1 };\n\n  // A function to select the tag at the given index\n  const selectTagAtIndex = useCallback(\n    (index: number) => {\n      const key = data.at(index)?.value;\n      if (key == null) return;\n      setSelectedTags([key]);\n    },\n    [data] // setSelectedTags is stable and not needed in dep array\n  );\n  // A function to clear the selection\n  const clearSelection = useCallback(() => {\n    setSelectedTags((previousSelectedTags) => {\n      currentSelectedTagIndex.current = -1;\n      return previousSelectedTags.length ? [] : previousSelectedTags;\n    });\n  }, []); // setSelectedTags is stable and not needed in dep array\n\n  // Handle the remove & delete events from the tags\n  const onTagRemoveIconClick = useCallback(\n    (value: V) => {\n      // on remove icon click we only need to remove the tag that\n      // invoked the event\n      onRemove?.([value]);\n      onExitNavigation?.();\n      // Firefox & Safari are not calling onBlur when focusing out of the\n      // tag list through onExitNavigation, so clear the selections explicitly\n      // here.\n      clearSelection();\n    },\n    [clearSelection, onExitNavigation, onRemove]\n  );\n  const onTagRemoveAction = useCallback(\n    (value: V) => {\n      // on delete action we need to remove the tag that invoked the delete action\n      // as well as the selected tags.\n      const valuesToRemove = [...selectedTags];\n      if (!selectedTags.includes(value)) {\n        valuesToRemove.push(value);\n      }\n      onRemove?.(valuesToRemove);\n      onExitNavigation?.();\n      // Firefox & Safari are not calling onBlur when focusing out of the\n      // tag list through onExitNavigation, so clear the selections explicitly\n      // here.\n      clearSelection();\n    },\n    [selectedTags, clearSelection, onExitNavigation, onRemove]\n  );\n\n  // Handle the select event from the tags\n  const onTagSelect = useCallback(\n    (value: V) => {\n      setSelectedTags([value]);\n      currentSelectedTagIndex.current = data.findIndex((tag) => tag.value === value);\n    },\n    [data, setSelectedTags]\n  );\n\n  // Handle keyDown event on the tags container\n  const onTagKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (data.length === 0) return;\n      // Move towards the beginning of the list when pressing\n      // Left arrow (or Right arrow in rtl).\n      if (\n        (direction === 'ltr' && event.code === 'ArrowLeft') ||\n        (direction === 'rtl' && event.code === 'ArrowRight')\n      ) {\n        if (currentSelectedTagIndex.current === 0) return;\n        currentSelectedTagIndex.current -= 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // Move towards the end of the list when pressing\n      // Right arrow (or Left arrow in rtl). If at the end,\n      // invoke onExitNavigation.\n      if (\n        (direction === 'ltr' && event.code === 'ArrowRight') ||\n        (direction === 'rtl' && event.code === 'ArrowLeft')\n      ) {\n        if (currentSelectedTagIndex.current === data.length - 1) {\n          // We have reached the end, so exit navigation\n          onExitNavigation?.();\n          return;\n        }\n        currentSelectedTagIndex.current += 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // When pressing the Home key, move the focus to the first tag\n      if (event.code === 'Home') {\n        currentSelectedTagIndex.current = 0;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // When pressing the End key, move the focus to the last tag\n      if (event.code === 'End') {\n        currentSelectedTagIndex.current = data.length - 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // If it is a Select All event, then select all the tags and do\n      // not move the focus\n      if (isSelectAll(event)) {\n        setSelectedTags(data.map((tag) => tag.value));\n        // prevent default to prevent selection of the whole screen\n        event.preventDefault();\n        return;\n      }\n    },\n    [data, direction, onExitNavigation, selectTagAtIndex, setSelectedTags]\n  );\n\n  const handleOnFocus = useCallback(() => {\n    setSelectedTags((previousSelectedTags) => {\n      // select the tag only if there are no current selected tags\n      // and there is data\n      if (previousSelectedTags.length || lastTagMeta.current.value === undefined)\n        return previousSelectedTags;\n\n      currentSelectedTagIndex.current = lastTagMeta.current.index;\n      return [lastTagMeta.current.value];\n    });\n  }, []); // setSelectedTags is stable and not needed in the dep array\n  const handleOnBlur = useCallback(() => {\n    clearSelection();\n  }, [clearSelection]);\n\n  // When blurring out of the component, remove all selections\n  const { focusProps } = useFocusWithin({\n    onBlurWithin: handleOnBlur\n  });\n\n  // Update the ref to include the handler methods\n  useImperativeHandle(\n    ref,\n    () => ({\n      blur: handleOnBlur,\n      focus: handleOnFocus\n    }),\n    [handleOnBlur, handleOnFocus]\n  );\n\n  useEffect(() => {\n    // every time the data is changed, scroll to the end of the list to show the latest added\n    // pill\n    // In ltr we need to scroll to the right, so positive value should be passed and in rtl we\n    // need to scroll to the left, so negative value should be passed\n    divRef.current?.scrollTo({\n      left: divRef.current.scrollWidth * (direction === 'ltr' ? 1 : -1)\n    });\n  }, [data, direction]);\n\n  // the styles for the component\n  const styles = styleInterpolations(props);\n  // TODO: use theming and multi-variant styles\n  // \n  const rootClasses = classNames([\n    textTagListStyles.textTagListBase,\n    hasInsideLabel && textTagListStyles.textTagListInsideLabel\n  ]);\n\n  return (\n    <div\n      class={rootClasses}\n      ref={divRef}\n      tabIndex={-1}\n      onKeyDown={onTagKeyDown}\n      role=\"listbox\"\n      aria-label={ariaLabel}\n      aria-multiselectable=\"true\"\n      style={styles}\n      {...focusProps}>\n      {data.map((tag, index) => (\n        <TextTag\n          isFocused={currentSelectedTagIndex.current === index}\n          isSelected={selectedTags.includes(tag.value)}\n          key={tag.value}\n          onRemoveAction={onTagRemoveAction}\n          onSelect={onTagSelect}\n          onRemoveIconClick={onTagRemoveIconClick}\n          removeIcon={removeIcon}\n          value={tag.value}>\n          {tag.label}\n        </TextTag>\n      ))}\n    </div>\n  );\n}\n\nexport const TextTagList = forwardRef<TextTagListHandle, Props<any>>(_TextTagList);\n","import { ComponentProps, Ref } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { TextTagList } from './TextTagList';\nimport { Flex } from '../UNSAFE_Flex';\nimport { TextFieldInput } from '../UNSAFE_TextField';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport { useFormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype TextTagListProps = ComponentProps<typeof TextTagList>;\n\ntype PassThroughTextFieldInputProps = Pick<\n  TextFieldInputProps,\n  | 'aria-controls'\n  | 'aria-describedby'\n  | 'aria-expanded'\n  | 'aria-invalid'\n  | 'aria-label'\n  | 'autoFocus'\n  | 'hasEmptyLabel'\n  | 'hasInsideLabel'\n  | 'id'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onInput'\n  | 'onKeyDown'\n  | 'onKeyUp'\n  | 'isRequired'\n  | 'placeholder'\n  | 'textAlign'\n  | 'variant'\n> & {\n  inputRef?: Ref<HTMLInputElement>;\n};\ntype PassThroughTextTagListProps = Pick<\n  TextTagListProps,\n  'onExitNavigation' | 'onRemove' | 'removeIcon'\n>;\n\ntype Props = PassThroughTextFieldInputProps &\n  PassThroughTextTagListProps & {\n    displayValue?: string;\n    isAddToListShown?: boolean;\n    isKeyboardNavigable?: boolean;\n    isTextTagListShown?: boolean;\n    isUserFiltering?: boolean;\n    liveRegionText?: string;\n    selectedValuesDescriptionId?: string;\n    selectedValuesKeyboardNavDescriptionId?: string;\n    textTagListData: TextTagListProps['data'];\n    textTagListRef?: TextTagListProps['ref'];\n    userInput?: string;\n    virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n  };\n\nexport function SelectMultipleFieldInput({\n  displayValue,\n  isAddToListShown,\n  isKeyboardNavigable,\n  isTextTagListShown,\n  isUserFiltering,\n  liveRegionText,\n  onExitNavigation,\n  onRemove,\n  removeIcon,\n  selectedValuesDescriptionId,\n  selectedValuesKeyboardNavDescriptionId,\n  textTagListData,\n  textTagListRef,\n  userInput,\n  virtualKeyboard,\n  ...passThroughTextFieldInputProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const addToListAccText = isAddToListShown ? translations.select_addToListAvailable() : undefined;\n\n  // Add the text tags navigation accessible text to the aria description for the input if there\n  // are any selected values and the component is keyboard navigable.\n  // Also add an aria live region if the status changes while the input already has focus because\n  // at that time the aria description will not be read out again.  Remove the aria live region\n  // when the input loses focus.\n  const accTextTagsNav =\n    isKeyboardNavigable && displayValue && displayValue.length > 0\n      ? translations.selectMultiple_highlightSelectedTagsInstructionText()\n      : undefined;\n  const { isInputFocused } = useFormFieldContext();\n  const [prevAccTextTagsNav, setPrevAccTextTagsNav] = useState(accTextTagsNav);\n  const [isAccTextTagsNavLive, setIsAccTextTagsNavLive] = useState(false);\n  isInputFocused &&\n  isTextTagListShown &&\n  !prevAccTextTagsNav &&\n  accTextTagsNav &&\n  !isAccTextTagsNavLive\n    ? setIsAccTextTagsNavLive(true)\n    : !isInputFocused && isAccTextTagsNavLive\n    ? setIsAccTextTagsNavLive(false)\n    : {};\n  if (prevAccTextTagsNav !== accTextTagsNav) {\n    setPrevAccTextTagsNav(accTextTagsNav);\n  }\n\n  return (\n    <>\n      {isTextTagListShown && (\n        <TextTagList\n          aria-label={translations.selectMultiple_selectedValues()}\n          data={textTagListData}\n          hasInsideLabel={passThroughTextFieldInputProps.hasInsideLabel}\n          maxWidth=\"50%\"\n          onExitNavigation={onExitNavigation}\n          onRemove={onRemove}\n          ref={textTagListRef}\n          removeIcon={removeIcon}\n        />\n      )}\n      <Flex flex={1}>\n        <TextFieldInput\n          aria-autocomplete=\"list\"\n          autoComplete=\"off\"\n          // When focused, we show the tag list, which can be treated as having prefix\n          hasPrefix={isTextTagListShown}\n          role=\"combobox\"\n          hasEndContent={true}\n          spellcheck={false}\n          type={virtualKeyboard === 'auto' ? 'search' : virtualKeyboard}\n          value={isUserFiltering || isTextTagListShown ? userInput : displayValue}\n          {...passThroughTextFieldInputProps}\n        />\n      </Flex>\n      {\n        // Show description text when focused as we will not be\n        // showing display text in the input.\n        isTextTagListShown && (\n          <HiddenAccessible\n            id={selectedValuesDescriptionId}\n            // We want the content to be hidden for screen readers too by default.\n            // But, it will be overridden when we link the aria-describedby attribute.\n            // Otherwise, the content here will be read twice.\n            isHidden={true}>\n            {displayValue}\n          </HiddenAccessible>\n        )\n      }\n      {\n        // Add the text tags navigation accessible text to the aria description for the input\n        // if there are any selected values and the component is keyboard navigable.\n        // (Don't add it if we're adding a live region for the same text because then it\n        // gets read out twice by the screen reader, for some reason.)\n        isTextTagListShown && accTextTagsNav && !isAccTextTagsNavLive && (\n          <HiddenAccessible\n            id={selectedValuesKeyboardNavDescriptionId}\n            // We want the content to be hidden for screen readers too by default.\n            // But, it will be overridden when we link the aria-describedby attribute.\n            // Otherwise, the content here will be read twice.\n            isHidden={true}>\n            {accTextTagsNav}\n          </HiddenAccessible>\n        )\n      }\n      <LiveRegion>{liveRegionText}</LiveRegion>\n      {\n        // Add an aria live region for the text tags navigation accessible text if the status\n        // changes while the input already has focus because at that time the aria description\n        // will not be read out again.\n        // (Add the region itself whenever the text tags are shown so that it's already in the\n        // DOM when we want to populate it with text.  If we dynamically add the region itself\n        // at that time, the screen reader (JAWS) may not read it at all, for some reason.)\n        isTextTagListShown && (\n          <LiveRegion>{isAccTextTagsNavLive ? accTextTagsNav : undefined}</LiveRegion>\n        )\n      }\n      {isAddToListShown ? <LiveRegion>{addToListAccText}</LiveRegion> : undefined}\n    </>\n  );\n}\n","import { ComponentProps } from 'preact';\nimport { Button } from '../UNSAFE_Button';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { mobileDropdownFooterStyles } from './themes/MobileDropdownFooterStyles.css';\n\ntype ButtonProps = ComponentProps<typeof Button>;\ntype Props = {\n  onApply?: ButtonProps['onAction'];\n};\n\nexport function MobileDropdownFooter({ onApply }: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  return (\n    <div class={mobileDropdownFooterStyles.base}>\n      <Button\n        display=\"label\"\n        edge=\"bottom\"\n        label={translations.selectMultiple_apply()}\n        size=\"sm\"\n        variant=\"callToAction\"\n        onAction={onApply}\n      />\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { renderItemText } from '../PRIVATE_SelectCommon';\n\nexport function useDisplayValues<K, D>(itemText: ItemTextType<K, D>, valueItems?: Item<K, D>[]) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const separator = translations.plural_separator();\n\n  // create the text displayed in the field from the selected values\n  const concatenatedDisplayValues = useMemo(() => {\n    if (valueItems === undefined) {\n      return '';\n    }\n    const displayValues = createDisplayValues(itemText, valueItems);\n    const concatenatedDisplayValues = concatDisplayValues(displayValues, separator);\n    return concatenatedDisplayValues;\n  }, [itemText, separator, valueItems]);\n\n  // create the text tags to display when the component is focused\n  const textTags = useMemo(\n    () => (valueItems === undefined ? [] : createTextTags(itemText, valueItems)),\n    [itemText, valueItems]\n  );\n\n  return {\n    displayValue: concatenatedDisplayValues,\n    textTags\n  };\n}\n\nfunction concatDisplayValues(displayValues: Set<string>, separator: string) {\n  return Array.from(displayValues.values()).join(separator);\n}\n\nfunction createDisplayValues<K, D>(itemText: ItemTextType<K, D>, selectedItems?: Item<K, D>[]) {\n  const arValues = selectedItems ? [...selectedItems?.values()] : [];\n  const mapFunc = (itemContext: Item<K, D>) => renderItemText(itemContext, itemText);\n  const mappedArray = arValues.map(mapFunc);\n  return new Set<string>(mappedArray as string[]);\n}\n\nfunction createTextTags<K, D>(itemText: ItemTextType<K, D>, selectedItems: Item<K, D>[] = []) {\n  return selectedItems.map((item) => ({\n    label: renderItemText(item, itemText) ?? '',\n    value: item.key\n  }));\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { DataState } from 'src/UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { useEffectEvent } from '#hooks/PRIVATE_useEffectEvent';\n\ntype Props<K, D> = {\n  isDropdownSelectedOnlyView?: boolean;\n  valueItems?: Item<K, D>[];\n};\n\n/**\n * Get the data to show in the dropdown for the selected-only view.\n * While the component is showing only selected values in the dropdown, that list of values should\n * not change as the user deselects items within it.  For example, if the list initially shows\n * selected items \"Item A\" and \"Item B\", and the user deselects \"Item B\", we do not want to remove\n * \"Item B\" from the list.  The reason is that the user may want to reselect it again.  So the\n * list should remain static as of the time the user toggled the selected-only view on.\n * If isDropdownSelectedOnlyView is false, then the data returned from this hook will be undefined.\n * If isDropdownSelectedOnlyView is true, then the data returned from this hook will consist of\n * all of the valueItems that were selected at the time isDropdownSelectedOnlyView was set to true.\n * @param isDropdownSelectedOnlyView Whether the component is showing only selected\n * values in the dropdown: true if so, false if not.\n * @param valueItems The keys, data, and optional metadata for the selected values.\n * @returns An object with data and onLoadRange properties that can be passed on to the\n * list in the dropdown.\n */\nexport function useSelectedOnlyData<K, D>({\n  isDropdownSelectedOnlyView = false,\n  valueItems\n}: Props<K, D>) {\n  const STABLE_dataStateFactory = useEffectEvent((isDropdownSelectedOnlyView: boolean) =>\n    !isDropdownSelectedOnlyView || !valueItems || valueItems.length === 0\n      ? undefined\n      : ({\n          offset: 0,\n          totalSize: valueItems.length,\n          sizePrecision: 'exact',\n          data: valueItems.map((valueItem: Item<K, D>) => {\n            return { data: valueItem.data, metadata: valueItem.metadata ?? { key: valueItem.key } };\n          })\n          // Need to specify type of useMemo here so that dependent code in SelectMultiple and\n          // useSelectMultiple doesn't show a type error related to the sizePrecision prop on DataState:\n          //   Type 'string' is not assignable to type '\"exact\" | \"atLeast\"'.\n        } as DataState<K, D>)\n  );\n\n  // Note that useMemo here only depends on isDropdownSelectedOnlyView because we only want to\n  // recalculate when that value changes.  While the selected only view is shown, we want the\n  // data set to remain static with the set of valueItems as of the time the view was changed to\n  // only show selected items so that the user can deselect and reselect items.\n  // If useMemo depended on the valueItems too, then the data set would change as the user\n  // deselected items, which means those items would disappear from the dropdown and the user\n  // could not reselect them.\n  // STABLE_dataStateFactory is guaranteed to be stable, so its reference will not change between\n  // renders.\n  const data = useMemo(() => {\n    return STABLE_dataStateFactory(isDropdownSelectedOnlyView);\n  }, [STABLE_dataStateFactory, isDropdownSelectedOnlyView]);\n\n  return {\n    data,\n    onLoadRange: undefined\n  };\n}\n","import { isSearchTextEmptyOrUndefined } from '#PRIVATE_SelectCommon';\nimport type { ComponentProps } from 'preact';\nimport { Ref, useCallback, useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { equals } from 'ramda';\nimport { CurrentKeyDetail, DataState, SelectionDetail } from '../UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport type { SelectedValuesCount } from './SelectedValuesCount';\nimport { useDisplayValues } from './useDisplayValues';\nimport type { UseSelectMultipleProps, useSelectMultiple } from './useSelectMultiple';\nimport { useSelectedOnlyData } from './useSelectedOnlyData';\n\ntype UseSelectMultipleReturn = ReturnType<typeof useSelectMultiple>;\ntype PickedPropsFromUseSelectMultiple = Pick<\n  UseSelectMultipleReturn,\n  | 'isDropdownOpen'\n  | 'isDropdownSelectedOnlyView'\n  | 'setDropdownOpen'\n  | 'setUserInput'\n  | 'stopFiltering'\n  | 'userInput'\n>;\ntype SelectedValuesCountOnToggle = NonNullable<\n  ComponentProps<typeof SelectedValuesCount>['onToggle']\n>;\n\nexport type UseMobileDropdownProps<K, D> = PickedPropsFromUseSelectMultiple & {\n  data: UseSelectMultipleProps<K, D>['data'];\n  inputRef: Ref<HTMLElement>;\n  itemText: ItemTextType<K, D>;\n  textTagListRef: UseSelectMultipleReturn['textTagListProps']['textTagListRef'];\n  valueItems: UseSelectMultipleProps<K, D>['valueItems'];\n  onCommit: UseSelectMultipleProps<K, D>['onCommit'];\n  onLoadRange: UseSelectMultipleProps<K, D>['onLoadRange'];\n};\n\n// use const for default valueItems so that it doesn't create a new empty array on every render\nconst DEFAULT_VALUE_ITEMS = [] as UseMobileDropdownProps<\n  string | number,\n  Record<string, any>\n>['valueItems'];\n\nexport function useMobileDropdown<K extends string | number, D>({\n  data,\n  inputRef,\n  isDropdownOpen,\n  isDropdownSelectedOnlyView,\n  itemText,\n  textTagListRef,\n  userInput,\n  valueItems = DEFAULT_VALUE_ITEMS as NonNullable<UseMobileDropdownProps<K, D>['valueItems']>,\n  onCommit,\n  onLoadRange,\n  setDropdownOpen,\n  setUserInput,\n  stopFiltering\n}: UseMobileDropdownProps<K, D>) {\n  const [currentRow, setCurrentRow] = useState<{ rowKey?: K }>({\n    rowKey: undefined\n  });\n  const [dropdownSelectedKeys, setDropdownSelectedKeys] = useState(keysFromValueItems(valueItems));\n  const [isInternalSelectedOnlyView, setIsInternalSelectedOnlyView] = useState(\n    isDropdownSelectedOnlyView\n  );\n  const dataCache = useRef(new Map<K, Item<K, D>>());\n  const currentValueItems = useMemo(() => {\n    const items: Item<K, D>[] = [];\n    dropdownSelectedKeys.forEach((key) => {\n      // Initially check if they are in valueItems\n      const item = valueItems.find((item) => item.key === key);\n      if (item) {\n        items.push(item);\n        return;\n      }\n\n      // otherwise check if it is available in the dataCache\n      if (dataCache.current.has(key)) {\n        items.push(dataCache.current.get(key)!);\n      }\n    });\n    return items;\n  }, [dropdownSelectedKeys, valueItems]);\n  const { textTags, displayValue } = useDisplayValues(itemText, currentValueItems);\n\n  // Create a ref for the input in the dropdown\n  const dropdownInputRef = useRef<HTMLInputElement>(null);\n\n  // show only the selected values in the dropdown if isDropdownSelectedOnlyView is true,\n  // otherwise show the full data set\n  // TODO: We may need to revisit this for hierarchical data because the selected valueItems\n  // won't have any information about ancestor group nodes, and we should probably show selected\n  // items in context within the hierarchy.  Also, the order of the items in the selected-only\n  // view right now follows the order in which they were selected, not the order in which they\n  // would appear in the full data set.  This may be more of a problem for hierarchical data\n  // if items have to appear within the correct group ancestors.  We may need to move\n  // construction of the selected-only DataState out of the component to the consuming code,\n  // and take a callback that we can call as a notification that the app should provide this\n  // special DataState to us (kind of like onLoadRange).  Note that we may also need an\n  // enhancement on the DataProvider API to be able to specify a filterCriterion to filter by\n  // the selected keys through a fetchFirst call, because a regular fetchByKeys call would\n  // still return results in the order in which the keys were specified and would not return\n  // data for the ancestor group nodes.\n  const { data: selectedOnlyData, onLoadRange: selectedOnlyOnLoadRange } = useSelectedOnlyData<\n    K,\n    D\n  >({\n    isDropdownSelectedOnlyView: isInternalSelectedOnlyView,\n    valueItems: currentValueItems\n  });\n\n  const onCurrentKeyChange = useCallback(\n    (detail: CurrentKeyDetail<K>) => {\n      setCurrentRow({ rowKey: detail.value });\n    },\n    [setCurrentRow]\n  );\n\n  const onSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      const newKeys = new Set(detail.value.keys?.values());\n      // update the dropdownSelectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for new valueItems to be set\n      setDropdownSelectedKeys(newKeys);\n\n      // clear the filter text typed by the user, but do NOT clear the actual filter criterion\n      // or highlighting in the list\n      setUserInput('');\n\n      // update the data cache on each selection if data is present\n      if (data) {\n        updateCache(dataCache.current, data, newKeys);\n      }\n    },\n    [data, setDropdownSelectedKeys, setUserInput]\n  );\n\n  const onSelectedValuesCountToggle = useCallback<SelectedValuesCountOnToggle>(\n    ({ value = false }) => {\n      setIsInternalSelectedOnlyView((currentIsInternalSelectedOnlyView) => {\n        // if the selected only toggle is enabled, we need to stop user filtering\n        if (currentIsInternalSelectedOnlyView !== value) {\n          stopFiltering();\n        }\n        return value;\n      });\n    },\n    [setIsInternalSelectedOnlyView, stopFiltering]\n  );\n\n  const closeDropdown = useCallback(() => {\n    // reset dropdownSelectedKeys as you close the dropdown so that\n    // the next time the dropdown is opened, it will have the actual component's valueItems\n    setDropdownSelectedKeys(new Set(valueItems.map((v) => v.key)));\n    // Empty the cached map\n    dataCache.current.clear();\n    setDropdownOpen(false);\n    // stop filtering before closing the dropdown\n    stopFiltering();\n    // revert the focus back to the main field\n    inputRef.current?.focus();\n  }, [inputRef, setDropdownOpen, stopFiltering, valueItems]);\n\n  const onApply = useCallback(() => {\n    // Commit the current value items and close the dropdown\n    onCommit({\n      previousValue: keysFromValueItems(valueItems),\n      value: dropdownSelectedKeys\n    });\n    closeDropdown();\n  }, [dropdownSelectedKeys, valueItems, closeDropdown, onCommit]);\n\n  const onBackButtonClick = useCallback(() => {\n    closeDropdown();\n  }, [closeDropdown]);\n\n  const onClearButtonClick = useCallback(() => {\n    setDropdownSelectedKeys(new Set());\n    stopFiltering();\n  }, [stopFiltering]);\n\n  const onTextTagRemove = useCallback(\n    (keys: K[]) => {\n      const newSelectedKeys = new Set(dropdownSelectedKeys);\n      keys.forEach((key) => newSelectedKeys.delete(key));\n      setDropdownSelectedKeys(newSelectedKeys);\n    },\n    [dropdownSelectedKeys]\n  );\n\n  const onTextTagExitNavigation = useCallback(() => {\n    // Focus the input on the next tick. Doing it in the same event cycle will\n    // trigger the key press on the input element which makes the caret move by\n    // one character.\n    setTimeout(() => dropdownInputRef.current?.focus(), 0);\n  }, []);\n\n  const wasDropdownOpen = useRef(isDropdownOpen);\n  useEffect(() => {\n    // if the dropdown is open, ignore any valueItems update\n    if (isDropdownOpen) {\n      // if it was open before, then this is a valueItems change, so no action\n      if (wasDropdownOpen.current) return;\n\n      // otherwise this dropdown is opened now, so set the focus on the input field\n      setTimeout(() => dropdownInputRef.current?.focus(), 0);\n      wasDropdownOpen.current = true;\n      return;\n    }\n    wasDropdownOpen.current = false;\n  }, [isDropdownOpen]);\n\n  const [prevValueItems, setPrevValueItems] = useState(valueItems);\n  if (prevValueItems !== valueItems) {\n    // if dropdown is closed, keep the valueItems in sync with the dropdown selected keys\n    if (!isDropdownOpen) {\n      setDropdownSelectedKeys((prevDropdownSelectedKeys) => {\n        const nextDropdownSelectedKeys = keysFromValueItems(valueItems);\n        // since valueItems can be a different array with the same values and keysFromValueItems\n        // will create a new set every time, compare the value and update the set only if the\n        // values have changed\n        return equals(prevDropdownSelectedKeys, nextDropdownSelectedKeys)\n          ? prevDropdownSelectedKeys\n          : nextDropdownSelectedKeys;\n      });\n    }\n    setPrevValueItems(valueItems);\n  }\n\n  return {\n    collectionProps: {\n      currentKey: currentRow.rowKey,\n      data: isInternalSelectedOnlyView ? selectedOnlyData : data,\n      selectedKeys: dropdownSelectedKeys,\n      onCurrentKeyChange,\n      onLoadRange: isInternalSelectedOnlyView ? selectedOnlyOnLoadRange : onLoadRange,\n      onSelectionChange\n    },\n    footerProps: {\n      onApply\n    },\n    selectMultipleFieldInputProps: {\n      displayValue,\n      hasEmptyLabel: false,\n      hasInsideLabel: true,\n      inputRef: dropdownInputRef,\n      isTextTagListShown: textTags.length > 0,\n      isUserFiltering: true,\n      removeIcon: 'always' as const,\n      userInput,\n      textTagListData: textTags,\n      textTagListRef: textTagListRef,\n      onExitNavigation: onTextTagExitNavigation,\n      onRemove: onTextTagRemove\n    },\n    selectMultipleFieldProps: {\n      hasInsideLabel: true,\n      isBackButtonShown: true,\n      isClearButtonShown: !isSearchTextEmptyOrUndefined(userInput) || textTags.length !== 0,\n      isDropdownArrowShown: false,\n      isDropdownSelectedOnlyView: isInternalSelectedOnlyView,\n      isSelectedValuesCountShown: dropdownSelectedKeys.size > 0 || isInternalSelectedOnlyView,\n      selectedValuesCount: dropdownSelectedKeys.size,\n      styleVariant: 'embedded' as const,\n      onBackButtonClick,\n      onClearButtonClick\n    },\n    selectedValuesCountProps: {\n      onSelectedValuesCountToggle\n    },\n    isDropdownSelectedOnlyView: isInternalSelectedOnlyView\n  };\n}\n\n/**\n * A function to cache the data for the current set of keys from the current data state\n * and current set of keys.\n *\n * The idea is that, the data state might not contain all the selected keys. However, as\n * a key is selected, if we update the cache, it will always contain the data for the selected\n * keys. Reason is that, when a key is selected, at that moment it will be in the current data\n * state. We will fetch that information and store it. While the current data state might not\n * contain information about all the selected keys, it will always have the information about\n * current selected key.\n *\n * @param cache The data cache\n * @param data The current data state\n * @param keys The current set of keys\n */\nconst updateCache = <K, D>(cache: Map<K, Item<K, D>>, data: DataState<K, D>, keys: Set<K>) =>\n  // iterate through the data and if a selected key's match is found, update the cache\n  data.data.forEach((item) => {\n    if (!keys.has(item.metadata.key)) return;\n\n    cache.set(item.metadata.key, {\n      data: item.data,\n      key: item.metadata.key,\n      metadata: item.metadata\n    });\n  });\n\n/**\n * Extract keys from a value items array.\n *\n * @param valueItems The value items from which the keys are to be extracted\n * @returns The set of keys\n */\nconst keysFromValueItems = <K, D>(valueItems: Item<K, D>[]) =>\n  new Set(valueItems.map((i) => i.key));\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps } from 'preact';\nimport { Ref, StateUpdater, Dispatch } from 'preact/hooks';\nimport {\n  DefaultList,\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  LinkItem,\n  SelectMobileDropdown\n} from '../PRIVATE_SelectCommon';\nimport { DataState } from '../UNSAFE_Collection';\nimport { Label } from '../UNSAFE_Label';\nimport { TextFieldInput } from '../UNSAFE_TextField';\nimport { InlineUserAssistance, UserAssistanceDensityType } from '../UNSAFE_UserAssistance';\nimport { View } from '../UNSAFE_View';\nimport { VirtualizedListView } from '../UNSAFE_VirtualizedListView';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { BundleType } from '#resources/nls/bundle';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { Handle } from '../utils/UNSAFE_typeUtils';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { MobileDropdownFooter } from './MobileDropdownFooter';\nimport { ItemRendererProps } from './SelectMultiple.types';\nimport { SelectMultipleField } from './SelectMultipleField';\nimport { SelectMultipleFieldInput } from './SelectMultipleFieldInput';\nimport { TextTagList } from './TextTagList';\nimport { useMobileDropdown } from './useMobileDropdown';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\ntype SelectMultipleFieldInputProps = ComponentProps<typeof SelectMultipleFieldInput>;\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype TextTagListHandle = Handle<typeof TextTagList, 'ref'>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = {\n  'aria-describedby'?: string;\n  'aria-label'?: string;\n  assistiveText?: string;\n  data?: DataState<K, D> | null;\n  dropdownId: string;\n  enabledElementRef: Ref<HTMLElement>;\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  isAddToListShown?: boolean;\n  isDisabled?: boolean;\n  isEmptyResults: boolean;\n  isFocused: boolean;\n  isLoading: boolean;\n  isOpen: boolean;\n  isReadonly?: false;\n  isRequired?: boolean;\n  isSelectedOnlyView: boolean;\n  isUserFiltering: boolean;\n  itemRenderer?: (itemRendererProps: ItemRendererProps<K, D>) => ComponentChildren;\n  itemText: ItemTextType<K, D>;\n  label: string;\n  liveRegionText?: string;\n  placeholder?: TextFieldInputProps['placeholder'];\n  propIsLoading?: boolean;\n  searchText?: string;\n  selectedValuesDescriptionId?: string;\n  setDropdownOpen: Dispatch<StateUpdater<boolean>>;\n  setUserInput: Dispatch<StateUpdater<string | undefined>>;\n  stopFiltering: () => void;\n  textAlign?: TextFieldInputProps['textAlign'];\n  textTagListRef: Ref<TextTagListHandle>;\n  userAssistanceDensity?: UserAssistanceDensityType;\n  userInput?: string;\n  valueItems?: Item<K, D>[];\n  virtualKeyboard?: SelectMultipleFieldInputProps['virtualKeyboard'];\n  onAddToListAction?: () => void;\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  onFieldBlur?: (event: FocusEvent) => void;\n  onFieldFocus?: (event: FocusEvent) => void;\n  onFieldInput?: SelectMultipleFieldInputProps['onInput'];\n  onFieldKeyDown?: SelectMultipleFieldInputProps['onKeyDown'];\n  onFieldKeyUp?: SelectMultipleFieldInputProps['onKeyUp'];\n  onLoadRange?: ComponentProps<typeof VirtualizedListView>['onLoadRange'];\n};\n\nexport function SelectMultipleMobileDropdown<\n  K extends string | number,\n  D extends Record<string, any>\n>({\n  'aria-describedby': ariaDescribedBy,\n  'aria-label': ariaLabel,\n  assistiveText,\n  data,\n  dropdownId,\n  enabledElementRef,\n  helpSourceLink,\n  helpSourceText,\n  isAddToListShown,\n  isDisabled,\n  isEmptyResults,\n  isFocused,\n  isLoading,\n  isOpen,\n  isReadonly,\n  isRequired,\n  isSelectedOnlyView: propIsSelectedOnlyView,\n  isUserFiltering,\n  itemRenderer,\n  itemText,\n  label,\n  liveRegionText,\n  placeholder,\n  propIsLoading,\n  searchText,\n  selectedValuesDescriptionId,\n  setDropdownOpen,\n  setUserInput,\n  stopFiltering,\n  textAlign,\n  textTagListRef,\n  userAssistanceDensity,\n  userInput,\n  valueItems,\n  virtualKeyboard,\n  onAddToListAction,\n  onCommit,\n  onFieldBlur,\n  onFieldFocus,\n  onFieldInput,\n  onFieldKeyDown,\n  onFieldKeyUp,\n  onLoadRange\n}: Props<K, D>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const {\n    collectionProps: mobileDropdownCollectionProps,\n    footerProps: mobileDropdownFooterProps,\n    selectMultipleFieldInputProps: mobileDropdownSelectMultipleFieldInputProps,\n    selectMultipleFieldProps: mobileDropdownSelectMultipleFieldProps,\n    selectedValuesCountProps: mobileDropdownSelectedValueCountProps,\n    isDropdownSelectedOnlyView\n  } = useMobileDropdown<K, D>({\n    data,\n    inputRef: enabledElementRef,\n    isDropdownOpen: isOpen,\n    isDropdownSelectedOnlyView: propIsSelectedOnlyView,\n    itemText,\n    textTagListRef,\n    userInput,\n    valueItems,\n    onCommit,\n    onLoadRange,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering\n  });\n\n  // for dropdown field\n  const {\n    formFieldContext: mobileDropdownFormFieldContext,\n    inputProps: mobileDropdownInputProps,\n    labelProps: mobileDropdownLabelProps,\n    textFieldProps: mobileDropdownTextFieldProps,\n    userAssistanceProps: mobileDropdownUserAssistanceProps\n  } = useTextField({\n    ariaDescribedBy,\n    helpSourceLink,\n    helpSourceText,\n    isDisabled: false,\n    isFocused,\n    isLoading,\n    isReadonly: false,\n    isRequiredShown: false,\n    labelEdge: 'inside',\n    styleVariant: 'default',\n    value: mobileDropdownSelectMultipleFieldProps.selectedValuesCount > 0 ? true : undefined\n  });\n\n  // JET-54256 - inside label animates up on initial display with selected value\n  // If we're waiting for the selected values to load, the component should look like it\n  // has a value in the meantime.\n  // Use the original propIsLoading instead of isLoading because we don't want to delay\n  // the inside label position by a timer like we do the progressive loading indicator.\n  mobileDropdownFormFieldContext.hasValue =\n    propIsLoading || mobileDropdownFormFieldContext.hasValue;\n\n  const mobileDropdownFieldLabelProps = {\n    label: <Label {...mobileDropdownLabelProps}>{label}</Label>,\n    labelEdge: 'inside' as const\n  };\n\n  const dropdownInlineUserAssistance =\n    isOpen &&\n    !isDisabled &&\n    !isReadonly &&\n    (assistiveText || helpSourceLink) &&\n    (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n      <DropdownUserAssistance\n        assistiveText={assistiveText}\n        fieldLabel={label}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        userAssistanceDensity={userAssistanceDensity}\n        {...mobileDropdownUserAssistanceProps}\n      />\n    ) : undefined;\n\n  const dropdownListContent = isEmptyResults ? (\n    isAddToListShown ? undefined : (\n      <EmptyResults />\n    )\n  ) : (\n    <DefaultList<K, D>\n      {...mobileDropdownCollectionProps}\n      aria-label={label ?? ''}\n      itemRenderer={itemRenderer}\n      itemText={itemText}\n      searchText={isDropdownSelectedOnlyView ? undefined : isUserFiltering ? searchText : undefined}\n      selectionMode=\"multiple\"\n    />\n  );\n\n  const addToListContent = isAddToListShown ? (\n    <LinkItem onAction={onAddToListAction}>{translations.select_addToList()}</LinkItem>\n  ) : undefined;\n\n  return (\n    <SelectMobileDropdown\n      header={\n        <FormFieldContext.Provider value={mobileDropdownFormFieldContext}>\n          <View>\n            <SelectMultipleField\n              fieldLabel={label}\n              onBlur={onFieldBlur}\n              onFocus={onFieldFocus}\n              {...mobileDropdownFieldLabelProps}\n              {...mobileDropdownTextFieldProps}\n              {...mobileDropdownSelectMultipleFieldProps}\n              {...mobileDropdownSelectedValueCountProps}>\n              <SelectMultipleFieldInput\n                aria-controls={dropdownId}\n                aria-expanded={isOpen}\n                aria-label={ariaLabel}\n                isAddToListShown={isAddToListShown}\n                isRequired={isRequired}\n                liveRegionText={liveRegionText}\n                placeholder={placeholder}\n                selectedValuesDescriptionId={selectedValuesDescriptionId}\n                textAlign={textAlign}\n                virtualKeyboard={virtualKeyboard}\n                onInput={onFieldInput}\n                onKeyDown={onFieldKeyDown}\n                onKeyUp={onFieldKeyUp}\n                {...mobileDropdownInputProps}\n                {...mobileDropdownSelectMultipleFieldInputProps}\n              />\n            </SelectMultipleField>\n          </View>\n          {dropdownInlineUserAssistance}\n        </FormFieldContext.Provider>\n      }\n      footer={<MobileDropdownFooter {...mobileDropdownFooterProps} />}\n      id={dropdownId}\n      isOpen={isOpen}>\n      <DropdownList hasTopGap={!addToListContent} hasBottomGap={true} isLoading={data === null}>\n        {dropdownListContent}\n        {addToListContent}\n      </DropdownList>\n    </SelectMobileDropdown>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { Ref, useCallback, useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { isBeforeDataFetch, isPhone, useSelectCommon } from '../PRIVATE_SelectCommon';\nimport { isControlOrFunctionKey, KEYS } from '../utils/PRIVATE_keyboardUtils';\nimport { DataState, SelectionDetail } from '../UNSAFE_Collection';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { merge } from '../utils/UNSAFE_stringUtils';\nimport { Handle } from '../utils/UNSAFE_typeUtils';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { SelectMultiple } from './SelectMultiple';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { TextTagList } from './TextTagList';\nimport { useSelectedOnlyData } from './useSelectedOnlyData';\nimport { isSearchTextEmptyOrUndefined } from '#PRIVATE_SelectCommon';\n\ntype TextTagListHandle = Handle<typeof TextTagList, 'ref'>;\ntype PickedPropsFromSelectMultiple = Pick<\n  ComponentProps<typeof SelectMultiple>,\n  | 'addToList'\n  | 'aria-describedby'\n  | 'isDisabled'\n  | 'isReadonly'\n  | 'onAddToListAction'\n  | 'onFilter'\n  | 'onLoadRange'\n>;\ntype RenamedPropsFromSelectMultiple = Omit<PickedPropsFromSelectMultiple, 'aria-describedby'> & {\n  ariaDescribedBy: PickedPropsFromSelectMultiple['aria-describedby'];\n};\nexport type UseSelectMultipleProps<K, D> = RenamedPropsFromSelectMultiple & {\n  data?: DataState<K, D> | null;\n  inputRef: Ref<HTMLElement>;\n  isFocused?: boolean;\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  valueItems?: Item<K, D>[];\n};\n\ntype SelectedValuesCountToggleType = ComponentProps<typeof SelectedValuesCount>['onToggle'];\ntype SelectedValuesCountToggleDetailType = Parameters<\n  Exclude<SelectedValuesCountToggleType, undefined>\n>[0];\n\n/**\n * Hook that manages SelectMultiple state and behavior.  This hook creates state variables and\n * event listeners, returning properties to apply to components internally rendered by\n * SelectMultiple, as well as state information.\n *\n * @param ariaDescribedBy Specifies the ID of elements that describe the input.\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element (this can be an input in desktop and a div in mobile).\n * @param isDisabled Specifies whether the component is disabled.\n * @param isFocused Specifies whether the component has focus.\n * @param isReadonly Specifies whether the component is readonly.\n * @param onCommit Callback invoked when the selected values are committed.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n * @param onLoadRange Callback function to handle when the viewport of the dropdown list has\n * changed, including the case where the user scrolls to the end of the list and there are more\n * items to load.  The function should set a new DataState on the component for the specified\n * range.\n * @param valueItems Specifies the keys, data, and optional metadata for the selected values.\n *\n * @returns Properties to apply to internal components that SelectMultiple renders, and component\n * state.\n */\nexport function useSelectMultiple<K, D>({\n  addToList,\n  ariaDescribedBy,\n  data: propData,\n  inputRef,\n  isDisabled,\n  isFocused: propIsFocused,\n  isReadonly,\n  onAddToListAction,\n  onCommit,\n  onFilter,\n  onLoadRange: propOnLoadRange,\n  valueItems\n}: UseSelectMultipleProps<K, D>) {\n  const [isDropdownSelectedOnlyView, setDropdownSelectedOnlyView] = useState(false);\n\n  const selectedValuesCount = valueItems?.length;\n  const hasSelectedValuesCount =\n    (selectedValuesCount !== undefined && selectedValuesCount > 0) || isDropdownSelectedOnlyView;\n\n  // show only the selected values in the dropdown if isDropdownSelectedOnlyView is true,\n  // otherwise show the full data set\n  // TODO: We may need to revisit this for hierarchical data because the selected valueItems\n  // won't have any information about ancestor group nodes, and we should probably show selected\n  // items in context within the hierarchy.  Also, the order of the items in the selected-only\n  // view right now follows the order in which they were selected, not the order in which they\n  // would appear in the full data set.  This may be more of a problem for hierarchical data\n  // if items have to appear within the correct group ancestors.  We may need to move\n  // construction of the selected-only DataState out of the component to the consuming code,\n  // and take a callback that we can call as a notification that the app should provide this\n  // special DataState to us (kind of like onLoadRange).  Note that we may also need an\n  // enhancement on the DataProvider API to be able to specify a filterCriterion to filter by\n  // the selected keys through a fetchFirst call, because a regular fetchByKeys call would\n  // still return results in the order in which the keys were specified and would not return\n  // data for the ancestor group nodes.\n  const selectedOnlyDataProps = useSelectedOnlyData<K, D>({\n    isDropdownSelectedOnlyView,\n    valueItems\n  });\n  const data = isDropdownSelectedOnlyView ? selectedOnlyDataProps.data : propData;\n  const onLoadRange = isDropdownSelectedOnlyView\n    ? selectedOnlyDataProps.onLoadRange\n    : propOnLoadRange;\n  const handleOnFilter = useCallback<NonNullable<typeof onFilter>>(\n    (args) => {\n      // when the user is filtering, we need to toggle out from selected only view\n      // we consider it filtering only if there is a non-empty filter text is present\n      if (!isSearchTextEmptyOrUndefined(args.searchText)) {\n        setDropdownSelectedOnlyView(false);\n      }\n      onFilter?.(args);\n    },\n    [onFilter]\n  ); // setDropdownSelectedOnlyView is stable so not needed in dep array\n\n  const {\n    currentRow,\n    dropdownRef,\n    handleDropdownArrowClick,\n    handleDropdownAutoDismiss: baseHandleDropdownAutoDismiss,\n    handleDropdownPosition,\n    handleInput,\n    handleMainFieldKeyDown: baseHandleMainFieldKeyDown,\n    handleMainFieldKeyUp,\n    handleUpDownArrowKeys,\n    isDropdownAbove,\n    isDropdownOpen,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    onCurrentKeyChange,\n    onMouseDown,\n    searchText,\n    setCurrentRow,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    userInput\n  } = useSelectCommon<K, D>({\n    data,\n    inputRef,\n    isFocused: propIsFocused,\n    onFilter: handleOnFilter\n  });\n\n  const [prevIsDropdownOpen, setPrevIsDropdownOpen] = useState(isDropdownOpen);\n  const [prevValueItems, setPrevValueItems] = useState(valueItems);\n\n  const [selectedKeys, setSelectedKeys] = useState<Set<K> | undefined>(\n    createKeysFromValueItems<K, D>(valueItems)\n  );\n\n  const isDataFetched = data !== undefined && data !== null && !isBeforeDataFetch<K, D>(data);\n  const isEmptyResults = isDataFetched && data?.totalSize === 0;\n  const isAddToListShown =\n    addToList === 'on' &&\n    isUserFiltering &&\n    searchText != null &&\n    searchText.length > 0 &&\n    isEmptyResults;\n\n  const handleAddToListAction = useCallback(() => {\n    setDropdownOpen(false);\n    stopFiltering();\n    onAddToListAction?.({ searchText: isUserFiltering ? searchText : undefined });\n  }, [isUserFiltering, onAddToListAction, searchText, setDropdownOpen, stopFiltering]);\n\n  const textTagListRef = useRef<TextTagListHandle>(null);\n  const { direction } = useUser();\n  const selectedValuesDescriptionId = useId();\n  const selectedValuesKeyboardNavDescriptionId = useId();\n  const combinedAriaDescribedBy = merge([\n    // when focused, we will show the text tag list.\n    // so, we need the screen readers to read them when focusing on the input.\n    isFocused && selectedValuesKeyboardNavDescriptionId,\n    isFocused && selectedValuesDescriptionId,\n    ariaDescribedBy\n  ]);\n\n  const removeDropdown = useCallback(() => {\n    dropdownRef.current?.parentElement?.removeChild(dropdownRef.current);\n  }, [dropdownRef]);\n\n  const shouldSelectCurrentRow = useCallback(\n    (currentRowArg: typeof currentRow): currentRowArg is Required<typeof currentRow> => {\n      // current row needs to be selected if all the conditions below are satisfied\n      // 1. user is filtering\n      // 2. dropdown is open\n      // 3. user has entered a search text\n      // 4. current data state has data\n      // 5. currentRow exists\n\n      return (\n        isUserFiltering &&\n        isDropdownOpen &&\n        !isSearchTextEmptyOrUndefined(userInput) &&\n        (data?.data.length ?? 0) > 0 &&\n        currentRowArg.rowKey !== undefined\n      );\n    },\n    [data, isDropdownOpen, isUserFiltering, userInput]\n  );\n\n  const selectRow = useCallback(\n    (key: K) => {\n      // If the key is already selected, do nothing\n      if (selectedKeys?.has(key)) return;\n      // If it is not already selected, add it to the selection\n      const newValue =\n        selectedKeys === undefined ? new Set([key]) : new Set([...selectedKeys.values(), key]);\n      onCommit({ previousValue: selectedKeys, value: newValue });\n      setSelectedKeys(newValue);\n    },\n    [onCommit, selectedKeys, setSelectedKeys]\n  );\n\n  const myHandleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        if (event?.type === 'keydown') {\n          const keyboardEvent = event as KeyboardEvent;\n          switch (keyboardEvent.code) {\n            case KEYS.TAB:\n              // Put focus on an element in the main field, but don't kill the event, so that\n              // the browser can naturally transfer focus to the next focusable item relative\n              // to the element in the main field.\n              if (keyboardEvent.shiftKey || !hasSelectedValuesCount) {\n                inputRef.current?.focus();\n              } else {\n                chipRef.current?.focus();\n              }\n\n              // Remove the dropdown immediately, without waiting for a rerender based on changing\n              // state, so that the open dropdown cannot get focus when the browser handles the\n              // Tab key.\n              removeDropdown();\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    },\n    [hasSelectedValuesCount, inputRef, isDropdownOpen, removeDropdown]\n  );\n\n  const myHandleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // const target = event.target as HTMLElement;\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.TAB:\n          if (isDropdownOpen && (event.shiftKey || (!hasSelectedValuesCount && !event.shiftKey))) {\n            // Remove the dropdown immediately, without waiting for a rerender based on changing\n            // state, so that the open dropdown cannot get focus when the browser handles the\n            // Tab key.\n            removeDropdown();\n\n            setDropdownOpen(false);\n          }\n\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to jump focus to the next cell and skip\n          // over the selected values count chip\n          if (hasSelectedValuesCount && !event.shiftKey) {\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.LEFT:\n          // Move focus to the text tag if we are in LTR and the cursor is at the\n          // beginning of the text (and there is no selection)\n          if (\n            direction === 'ltr' &&\n            inputRef.current instanceof HTMLInputElement &&\n            inputRef.current?.selectionStart === 0 &&\n            inputRef.current?.selectionEnd === 0\n          ) {\n            textTagListRef.current?.focus();\n          }\n          break;\n\n        case KEYS.RIGHT:\n          // Move focus to the text tag if we are in RTL and the cursor is at the\n          // beginning of the text (and there is no selection)\n          if (\n            direction === 'rtl' &&\n            inputRef.current instanceof HTMLInputElement &&\n            inputRef.current?.selectionStart === 0 &&\n            inputRef.current?.selectionEnd === 0\n          ) {\n            textTagListRef.current?.focus();\n          }\n          break;\n\n        case KEYS.ENTER:\n        case KEYS.NUMPAD_ENTER:\n          // if this is on a mobile device (only phone and not a tablet device), do not do anything\n          if (isPhone()) {\n            return;\n          }\n\n          // if add to list is shown, there are no results, so trigger the add to list link\n          if (isAddToListShown) {\n            handleAddToListAction();\n            return;\n          }\n\n          // if there is a currentRow in the dropdown (meaning a highlighted item that would\n          // have keyboard focus if the dropdown list had physical focus, which may be different\n          // from the currently selected item), select it and commit it;\n          if (shouldSelectCurrentRow(currentRow)) {\n            setDropdownOpen(false);\n            // after selecting a value, the user is no longer actively filtering, so update related\n            // state accordingly so that the newly selected value appears in the field\n            stopFiltering();\n            selectRow(currentRow.rowKey);\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [\n      currentRow,\n      direction,\n      handleAddToListAction,\n      hasSelectedValuesCount,\n      inputRef,\n      isAddToListShown,\n      isDropdownOpen,\n      removeDropdown,\n      selectRow,\n      setDropdownOpen,\n      shouldSelectCurrentRow,\n      stopFiltering\n    ]\n  );\n\n  // when the array of valueItems changes, pull out the new set of selectedKeys\n  // (don't need to set selectedKeys here on first render because the state was initialized with\n  // the correct value)\n  if (prevValueItems !== valueItems) {\n    const keys = createKeysFromValueItems<K, D>(valueItems);\n    setSelectedKeys(keys);\n  }\n\n  const chipRef = useRef<HTMLElement | null>(null);\n  useEffect(() => {\n    chipRef.current =\n      hasSelectedValuesCount && mainFieldRef.current?.querySelector\n        ? mainFieldRef.current.querySelector('[role=\"switch\"]')\n        : null;\n  }, [hasSelectedValuesCount, isDisabled, isReadonly, mainFieldRef]);\n\n  const handleSelectedValuesCountKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.TAB:\n          if (isDropdownOpen && !event.shiftKey) {\n            // Remove the dropdown immediately, without waiting for a rerender based on changing\n            // state, so that the open dropdown cannot get focus when the browser handles the\n            // Tab key.\n            removeDropdown();\n\n            setDropdownOpen(false);\n          }\n\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to jump focus to the next cell and skip\n          // over the input\n          if (event.shiftKey) {\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.UP:\n        case KEYS.DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n          break;\n\n        case KEYS.ESC:\n          if (isDropdownOpen) {\n            setDropdownOpen(false);\n\n            event.preventDefault();\n\n            // JET-53183 - core pack compat: stop propagation of handled events\n            // we don't want a parent collection component to stop editing the row when we close\n            // the dropdown\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.ENTER:\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to move focus to the next row when\n          // we toggle between the full and selected only list in the dropdown\n          event.stopPropagation();\n          break;\n\n        default:\n          break;\n      }\n    },\n    [isDropdownOpen, removeDropdown, setDropdownOpen]\n  );\n\n  const handleSelectedValuesCountKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.UP:\n        case KEYS.DOWN:\n          handleUpDownArrowKeys(event);\n          break;\n\n        default:\n          break;\n      }\n    },\n    [handleUpDownArrowKeys]\n  );\n\n  const handleSelectedValuesCountMouseDown = useCallback(\n    (event: MouseEvent) => {\n      // call preventDefault so that the dropdown doesn't open showing the full list on mousedown\n      // on the chip before switching to show only the selected values on mouseup when the click\n      // is handled\n      event.preventDefault();\n      // explicitly focus the input because it won't happen naturally due to preventDefault()\n      inputRef.current?.focus();\n    },\n    [inputRef]\n  );\n\n  const handleSelectedValuesCountToggle = useCallback(\n    (detail: SelectedValuesCountToggleDetailType) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n\n      const value = detail.value ?? false;\n      if (value !== isDropdownSelectedOnlyView) {\n        setDropdownSelectedOnlyView(value);\n\n        // if the selected only toggle is enabled, we need to stop user filtering\n        if (value) {\n          stopFiltering();\n        }\n      }\n    },\n    [isDropdownOpen, isDropdownSelectedOnlyView, setDropdownOpen, stopFiltering]\n  );\n\n  // when the dropdown closes, automatically turn off isDropdownSelectedOnlyView\n  if (!isDropdownOpen && isDropdownSelectedOnlyView) {\n    setDropdownSelectedOnlyView(false);\n  }\n\n  const onSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      const newKeys = new Set(detail.value.keys?.values());\n      // update the selectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for new valueItems to be set\n      setSelectedKeys(newKeys);\n\n      // clear the filter text typed by the user, but do NOT clear the actual filter criterion\n      // or highlighting in the list\n      setUserInput('');\n\n      // call the onCommit callback so that the consuming code can update the valueItems\n      onCommit?.({ value: newKeys, previousValue: selectedKeys });\n    },\n    [onCommit, selectedKeys, setSelectedKeys, setUserInput]\n  );\n\n  const onTextTagListExitNavigation = useCallback(() => {\n    // Focus the input on the next tick. Doing it in the same event cycle will\n    // trigger the key press on the input element which makes the caret move by\n    // one character.\n    setTimeout(() => inputRef.current?.focus(), 0);\n  }, [inputRef]);\n\n  const onTextTagListRemove = useCallback(\n    (keys: K[]) => {\n      const previousValue = selectedKeys;\n      const value = new Set(selectedKeys);\n      keys.forEach((key) => value.delete(key));\n      onCommit?.({ previousValue, value });\n    },\n    [onCommit, selectedKeys]\n  );\n\n  const dropdownEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onAutoDismiss: baseHandleDropdownAutoDismiss,\n        onPosition: handleDropdownPosition\n      },\n      { onAutoDismiss: myHandleDropdownAutoDismiss }\n    );\n  }, [baseHandleDropdownAutoDismiss, handleDropdownPosition, myHandleDropdownAutoDismiss]);\n\n  const inputEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onInput: handleInput,\n        onKeyDown: baseHandleMainFieldKeyDown,\n        onKeyUp: handleMainFieldKeyUp\n      },\n      { onKeyDown: myHandleMainFieldKeyDown }\n    );\n  }, [baseHandleMainFieldKeyDown, handleInput, handleMainFieldKeyUp, myHandleMainFieldKeyDown]);\n\n  const textTagListProps = useMemo(\n    () => ({\n      textTagListRef,\n      onExitNavigation: onTextTagListExitNavigation,\n      onRemove: onTextTagListRemove\n    }),\n    [onTextTagListExitNavigation, onTextTagListRemove]\n  );\n\n  // clear the current item when the dropdown opens\n  if (isDropdownOpen && !prevIsDropdownOpen) {\n    setCurrentRow({ rowKey: undefined });\n  }\n\n  // when the dropdown closes, if the user input is empty, reset filtering\n  const isDropdownClosing = prevIsDropdownOpen && !isDropdownOpen;\n  if (isDropdownClosing && !userInput) {\n    stopFiltering();\n  }\n\n  // We need to highlight the first result whenever the data changes\n  // We cannot use state for the prevData and update it during the render as it is\n  // returned by a useMemo hook.\n  // There is a bug in preact where if a return value of a useMemo is used for\n  // updating a state during the render, it creates an infinite render cycle.\n  // See https://github.com/preactjs/preact/issues/4422.\n  // Till this issue is fixed, we need to use a ref for this use case.\n  const prevData = useRef(data);\n  if (prevData.current !== data) {\n    // when filtering, set the first result of the filtered data set to be the current item\n    // (check the data offset so we don't try to highlight again if the user scrolls through\n    // the list and more data is fetched)\n    const firstResultKey = data?.data[0]?.metadata.key;\n    if (isDropdownOpen && isUserFiltering && firstResultKey != null && data?.offset === 0) {\n      // if there are results and search text, highlight the first row, otherwise clear\n      // an existing highlight\n      setCurrentRow({\n        rowKey: isSearchTextEmptyOrUndefined(searchText) ? undefined : firstResultKey\n      });\n    }\n\n    prevData.current = data;\n  }\n\n  if (prevIsDropdownOpen !== isDropdownOpen) {\n    setPrevIsDropdownOpen(isDropdownOpen);\n  }\n  if (prevValueItems !== valueItems) {\n    setPrevValueItems(valueItems);\n  }\n\n  return {\n    addToListEventHandlers: {\n      onAction: handleAddToListAction\n    },\n    ariaProps: {\n      ariaDescribedBy: combinedAriaDescribedBy\n    },\n    collectionProps: {\n      currentKey: currentRow.rowKey,\n      data,\n      onCurrentKeyChange,\n      onSelectionChange,\n      onLoadRange,\n      selectedKeys\n    },\n    data,\n    dropdownArrowEventHandlers: {\n      onClick: handleDropdownArrowClick\n    },\n    dropdownEventHandlers,\n    dropdownRef,\n    hasSelectedValuesCount,\n    inputEventHandlers,\n    inputRef,\n    isAddToListShown,\n    isDataFetched,\n    isDropdownAbove,\n    isDropdownOpen,\n    isDropdownSelectedOnlyView,\n    isEmptyResults,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    mouseProps: isDisabled || isReadonly ? {} : { onMouseDown },\n    searchText,\n    selectedValuesCountProps: {\n      onKeyDown: handleSelectedValuesCountKeyDown,\n      onKeyUp: handleSelectedValuesCountKeyUp,\n      onMouseDown: handleSelectedValuesCountMouseDown,\n      onToggle: handleSelectedValuesCountToggle\n    },\n    selectedValuesDescriptionId,\n    selectedValuesKeyboardNavDescriptionId,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    textTagListProps,\n    userInput\n  };\n}\n\nfunction createKeysFromValueItems<K, D>(valueItems?: Item<K, D>[]) {\n  const keys = valueItems?.reduce((accumKeys, currentItem) => {\n    accumKeys.add(currentItem.key);\n    return accumKeys;\n  }, new Set<K>());\n  return keys;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  SelectMobileFieldInput,\n  isBeforeDataFetch,\n  isMobile,\n  isPhone,\n  isTablet\n} from '#PRIVATE_SelectCommon';\nimport { DataState } from '#UNSAFE_Collection';\nimport { Label } from '#UNSAFE_Label';\nimport { ReadonlyTextField, ReadonlyTextFieldInput, TextFieldInput } from '#UNSAFE_TextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '#UNSAFE_UserAssistance';\nimport { VirtualizedListView } from '#UNSAFE_VirtualizedListView';\nimport { FocusableHandle, useFocusableTextField } from '#hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useLoadingIndicatorTimer } from '#hooks/UNSAFE_useLoadingIndicatorTimer';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { useTextField } from '#hooks/UNSAFE_useTextField';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { Item } from '#utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '#utils/UNSAFE_selectUtils';\nimport { Size } from '#utils/UNSAFE_size';\nimport { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { ComponentChildren, ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { ItemRendererProps } from './SelectMultiple.types';\nimport { SelectMultipleDesktopDropdown } from './SelectMultipleDesktopDropdown';\nimport { SelectMultipleField } from './SelectMultipleField';\nimport { SelectMultipleFieldInput } from './SelectMultipleFieldInput';\nimport { SelectMultipleMobileDropdown } from './SelectMultipleMobileDropdown';\nimport { useDisplayValues } from './useDisplayValues';\nimport { useSelectMultiple } from './useSelectMultiple';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\ntype SelectMultipleFieldInputProps = ComponentProps<typeof SelectMultipleFieldInput>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = TestIdProps & {\n  /**\n   * Specifies whether the add to list link is shown in the dropdown when the user filters\n   * and there are no results.\n   * It is up to the application to show its own UI when the link is triggered.\n   */\n  addToList?: 'on' | 'off';\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n  /**\n   * Text to provide guidance to help the user understand what data to enter or select.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * Specifies data for the dropdown list.\n   *\n   * Note that the <code>itemText</code> property allows for customizing the rendering\n   * of each data item.\n   */\n  data?: DataState<K, D> | null;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is waiting for <code>valueItems</code> to load.\n   * While loading, SelectMultiple will show the progressive loading indicator in the text field.\n   */\n  isLoading?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * selected by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be selected by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has selected a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Render function for an item in the default list in the dropdown.\n   */\n  itemRenderer?: (itemRendererProps: ItemRendererProps<K, D>) => ComponentChildren;\n  /**\n   * Specifies how to get the text string to render for a data item.\n   * This property can be set to either:\n   * <ul>\n   * <li>a string that specifies the name of a top level data attribute to render as text, or</li>\n   * <li>a callback function that takes a properties object and returns the text string to\n   * display.</li>\n   * </ul>\n   *\n   * This text will be rendered for the selected <code>valueItems</code> of the component.\n   * It will also be rendered for each item in the dropdown.  When rendered for the\n   * dropdown items, default matching search term highlighting will still be applied.\n   */\n  itemText: ItemTextType<K, D>;\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user selects or enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * Specifies the keys, data, and optional metadata for the selected values.\n   */\n  valueItems?: Item<K, D>[];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: SelectMultipleFieldInputProps['virtualKeyboard'];\n  /**\n   * Callback function called when the user triggers the add to list link shown in the dropdown.\n   */\n  onAddToListAction?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback invoked when the user commits the selected values.\n   *\n   * The function should set a new array as the <code>valueItems</code> property.\n   */\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  /**\n   * Callback function to trigger loading data for the dropdown list, which may or may not be\n   * filtered by user entered search text.\n   *\n   * The function should set a new <code>DataState</code> as the <code>data</code> property.\n   */\n  onFilter?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback function to handle when the viewport of the dropdown list has changed, for example\n   * by scrolling, including the case where the user scrolls to the end of the list and there are\n   * more items to load.\n   *\n   * The function should set a new <code>DataState</code> for the specified range as the\n   * <code>data</code> property.\n   */\n  onLoadRange?: ComponentProps<typeof VirtualizedListView>['onLoadRange'];\n};\n\n/**\n * A SelectMultiple is a dropdown list that supports multiple selection and search filtering.\n */\nexport const SelectMultiple = forwardRef(\n  <K extends string | number, D extends Record<string, any>>(\n    {\n      addToList = 'off',\n      'aria-describedby': propAriaDescribedBy,\n      assistiveText,\n      columnSpan,\n      data: propData,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isLoading: propIsLoading,\n      isReadonly: propIsReadonly,\n      isRequired,\n      isRequiredShown,\n      itemRenderer,\n      itemText,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      onAddToListAction,\n      onCommit,\n      onFilter,\n      onLoadRange: propOnLoadRange,\n      placeholder,\n      testId,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      valueItems,\n      variant = 'default',\n      virtualKeyboard\n    }: Props<K, D>,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const {\n      enabledElementRef,\n      focusProps,\n      isFocused: origIsFocused,\n      readonlyElementRef\n    } = useFocusableTextField<HTMLElement, HTMLDivElement>({ isDisabled, isReadonly, ref });\n\n    const {\n      addToListEventHandlers,\n      ariaProps,\n      collectionProps,\n      data,\n      dropdownArrowEventHandlers,\n      dropdownEventHandlers,\n      dropdownRef,\n      hasSelectedValuesCount,\n      inputEventHandlers,\n      isAddToListShown,\n      isDataFetched,\n      isDropdownAbove,\n      isDropdownOpen,\n      isDropdownSelectedOnlyView,\n      isEmptyResults,\n      isFocused,\n      isUserFiltering,\n      mainFieldRef,\n      mouseProps,\n      searchText,\n      selectedValuesCountProps,\n      selectedValuesDescriptionId,\n      selectedValuesKeyboardNavDescriptionId,\n      setDropdownOpen,\n      setUserInput,\n      stopFiltering,\n      textTagListProps,\n      userInput\n    } = useSelectMultiple<K, D>({\n      addToList,\n      ariaDescribedBy: propAriaDescribedBy,\n      data: propData,\n      inputRef: enabledElementRef,\n      isDisabled,\n      isFocused: origIsFocused,\n      isReadonly,\n      onAddToListAction,\n      onCommit,\n      onFilter,\n      onLoadRange: propOnLoadRange,\n      valueItems\n    });\n\n    // The incoming propIsLoading tells us that we are in a loading state, but we don't want to\n    // show the loading indicator until after a delay, because showing it immediately could result\n    // in unwanted flashing.  The isLoading var below will be set to true by useLoadingIndicatorTimer\n    // after the delay, when the timer expires, at which point we should show the loading indicator.\n    // If propIsLoading is set to false before the timer expires, then the timer will be cancelled\n    // and no loading indicator will be shown.\n    // (ListView detects its loading state by checking data === null.  While it would be nice for\n    // us to be consistent and check valueItems === null, we need to use a separate isLoading prop.\n    // If valueItems === null triggers our loading state, then the selections in the dropdown\n    // are cleared for that period of time, which is undesirable.)\n    const isLoading = useLoadingIndicatorTimer(propIsLoading ?? false);\n\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy: ariaProps.ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isFocused,\n      isLoading,\n      isReadonly,\n      isRequiredShown,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      userAssistanceDensity,\n      value: valueItems !== undefined && valueItems.length > 0 ? true : undefined\n    });\n\n    // JET-54256 - inside label animates up on initial display with selected value\n    // If we're waiting for the selected values to load, the component should look like it\n    // has a value in the meantime.\n    // Use the original propIsLoading instead of isLoading because we don't want to delay\n    // the inside label position by a timer like we do the progressive loading indicator.\n    formFieldContext.hasValue = propIsLoading || formFieldContext.hasValue;\n\n    const dropdownId = `${baseId}-dropdown`;\n\n    const { displayValue, textTags } = useDisplayValues(itemText, valueItems);\n\n    // Do not set a forId in phone as we will be using aria-labelledby instead.\n    // This is because we will using a div and not input when rendering in a phone.\n    const labelComp =\n      labelEdge !== 'none' ? (\n        <Label {...labelProps} {...(isPhone() ? { forId: undefined } : {})}>\n          {label}\n        </Label>\n      ) : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={mainFieldRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n    if (isReadonly) {\n      const mainContent = (\n        <ReadonlyTextFieldInput\n          aria-describedby={inputProps['aria-describedby']}\n          aria-label={ariaLabel}\n          aria-labelledby={labelProps.id}\n          as=\"div\"\n          elementRef={readonlyElementRef}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n          textAlign={textAlign}\n          value={displayValue}\n        />\n      );\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onFocusOut}\n            onFocus={focusProps.onFocusIn}\n            ref={mainFieldRef}\n            mainContent={mainContent}\n            testId={testId}\n            {...fieldLabelProps}></ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const hasInsideLabel = labelEdge === 'inside';\n    const liveRegionText =\n      isDropdownOpen && isDataFetched\n        ? data?.totalSize === 0\n          ? translations.select_noMatchesFound()\n          : data?.totalSize === 1\n          ? translations.select_oneMatchFound()\n          : data?.sizePrecision === 'exact'\n          ? translations.select_sizeMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n          : translations.select_sizeOrMoreMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n        : '';\n\n    const shouldShowDropdown =\n      isDropdownOpen &&\n      data !== undefined &&\n      (data === null || data.totalSize > 0 || isBeforeDataFetch<K, D>(data) || isEmptyResults);\n\n    const hasEmptyLabel = label === '' && labelEdge === 'none';\n\n    // Use the mobile field if the component is being rendered in a phone\n    // and it is not disabled.\n    const isPhoneMainFieldInput = isPhone() && !isDisabled;\n    const mainFieldInput = !isPhoneMainFieldInput ? (\n      <SelectMultipleFieldInput\n        aria-controls={dropdownId}\n        aria-expanded={isDropdownOpen}\n        aria-label={ariaLabel}\n        displayValue={displayValue}\n        hasEmptyLabel={hasEmptyLabel}\n        hasInsideLabel={hasInsideLabel}\n        inputRef={enabledElementRef as Ref<HTMLInputElement>}\n        isAddToListShown={isAddToListShown}\n        isKeyboardNavigable={!isDisabled && !isMobile()}\n        isRequired={isRequired}\n        isTextTagListShown={isFocused && textTags.length !== 0}\n        isUserFiltering={isUserFiltering}\n        liveRegionText={liveRegionText}\n        placeholder={placeholder}\n        // we only want the remove icon in the main field for tablets\n        removeIcon={isTablet() ? 'always' : 'never'}\n        selectedValuesDescriptionId={selectedValuesDescriptionId}\n        selectedValuesKeyboardNavDescriptionId={selectedValuesKeyboardNavDescriptionId}\n        textAlign={textAlign}\n        textTagListData={textTags}\n        userInput={userInput}\n        // In tablet, we would want to show the virtual keyboard\n        virtualKeyboard={isTablet() ? virtualKeyboard : undefined}\n        {...inputEventHandlers}\n        {...inputProps}\n        {...textTagListProps}\n      />\n    ) : (\n      <SelectMobileFieldInput\n        aria-controls={dropdownId}\n        aria-describedby={inputProps['aria-describedby']}\n        aria-expanded={isDropdownOpen}\n        aria-invalid={inputProps['aria-invalid']}\n        aria-label={ariaLabel}\n        aria-labelledby={labelProps.id}\n        displayValue={displayValue}\n        hasEmptyLabel={hasEmptyLabel}\n        hasInsideLabel={hasInsideLabel}\n        isRequired={isRequired}\n        onBlur={inputProps.onBlur}\n        onFocus={inputProps.onFocus}\n        placeholder={placeholder}\n        ref={enabledElementRef as Ref<HTMLDivElement>}\n        textAlign={textAlign}\n        variant={inputProps.variant}\n      />\n    );\n\n    const dropdown = !shouldShowDropdown ? null : isPhone() ? (\n      <SelectMultipleMobileDropdown\n        aria-describedby={ariaProps.ariaDescribedBy}\n        aria-label={ariaLabel}\n        assistiveText={assistiveText}\n        // We always pass the whole data here. As the change made in the mobile dropdown\n        // exists only in the mobile dropdown, we let it decide how to render the data.\n        data={propData}\n        dropdownId={dropdownId}\n        enabledElementRef={enabledElementRef}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        isAddToListShown={isAddToListShown}\n        isDisabled={isDisabled}\n        isEmptyResults={isEmptyResults}\n        isFocused={isFocused}\n        isLoading={isLoading}\n        isOpen={shouldShowDropdown}\n        isReadonly={isReadonly}\n        isRequired={isRequired}\n        isSelectedOnlyView={isDropdownSelectedOnlyView}\n        isUserFiltering={isUserFiltering}\n        itemRenderer={itemRenderer}\n        itemText={itemText}\n        label={label}\n        liveRegionText={liveRegionText}\n        placeholder={placeholder}\n        propIsLoading={propIsLoading}\n        searchText={searchText}\n        selectedValuesDescriptionId={selectedValuesDescriptionId}\n        setDropdownOpen={setDropdownOpen}\n        setUserInput={setUserInput}\n        stopFiltering={stopFiltering}\n        textAlign={textAlign}\n        textTagListRef={textTagListProps.textTagListRef}\n        userAssistanceDensity={userAssistanceDensity}\n        userInput={userInput}\n        valueItems={valueItems}\n        virtualKeyboard={virtualKeyboard}\n        onAddToListAction={addToListEventHandlers.onAction}\n        onCommit={onCommit}\n        onFieldBlur={focusProps.onFocusOut}\n        onFieldFocus={focusProps.onFocusIn}\n        onFieldInput={inputEventHandlers.onInput}\n        onFieldKeyDown={inputEventHandlers.onKeyDown}\n        onFieldKeyUp={inputEventHandlers.onKeyUp}\n        onLoadRange={propOnLoadRange}\n      />\n    ) : (\n      <SelectMultipleDesktopDropdown\n        {...collectionProps}\n        {...dropdownEventHandlers}\n        assistiveText={assistiveText}\n        dropdownId={dropdownId}\n        dropdownRef={dropdownRef}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        isAddToListShown={isAddToListShown}\n        isDisabled={isDisabled}\n        isDropdownAbove={isDropdownAbove}\n        isEmptyResults={isEmptyResults}\n        isOpen={shouldShowDropdown}\n        isReadonly={isReadonly}\n        isSelectedOnlyView={isDropdownSelectedOnlyView}\n        isUserFiltering={isUserFiltering}\n        itemRenderer={itemRenderer}\n        itemText={itemText}\n        label={label}\n        mainFieldRef={mainFieldRef}\n        onAddToListAction={addToListEventHandlers.onAction}\n        searchText={searchText}\n        userAssistanceDensity={userAssistanceDensity}\n      />\n    );\n\n    return (\n      <Fragment>\n        <FormFieldContext.Provider value={formFieldContext}>\n          <SelectMultipleField\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            fieldLabel={label}\n            hasInsideLabel={hasInsideLabel}\n            inlineUserAssistance={inlineUserAssistance}\n            isDropdownArrowShown={true}\n            isDropdownSelectedOnlyView={isDropdownSelectedOnlyView}\n            isSelectedValuesCountShown={hasSelectedValuesCount}\n            mainFieldRef={mainFieldRef}\n            onBlur={focusProps.onFocusOut}\n            onFocus={focusProps.onFocusIn}\n            onDropdownArrowClick={dropdownArrowEventHandlers.onClick}\n            onSelectedValuesCountKeyDown={selectedValuesCountProps.onKeyDown}\n            onSelectedValuesCountKeyUp={selectedValuesCountProps.onKeyUp}\n            onSelectedValuesCountMouseDown={selectedValuesCountProps.onMouseDown}\n            onSelectedValuesCountToggle={selectedValuesCountProps.onToggle}\n            selectedValuesCount={valueItems?.length}\n            testId={testId}\n            {...fieldLabelProps}\n            {...mouseProps}\n            {...textFieldProps}>\n            {mainFieldInput}\n          </SelectMultipleField>\n        </FormFieldContext.Provider>\n        {dropdown}\n      </Fragment>\n    );\n  }\n);\n"],"names":["useTranslationBundle","_jsx","DropdownUserAssistance","EmptyResults","DefaultList","LinkItem","_jsxs","Dropdown","DropdownList","selectedValueCountStyles","Chip","useFormFieldContext","IconButton","NavLeft","CancelS","DropdownArrow","Flex","TextField","useRef","useId","classNames","textTagStyles","useCallback","isBackspaceOrDelete","useEffect","preventDefault","Text","TabbableModeContext","CloseIcon","HiddenAccessible","dimensionInterpolations","mergeInterpolations","useState","useUser","isSelectAll","useFocusWithin","useImperativeHandle","textTagListStyles","forwardRef","_Fragment","TextFieldInput","LiveRegion","mobileDropdownFooterStyles","Button","useMemo","renderItemText","useEffectEvent","equals","isSearchTextEmptyOrUndefined","useTextField","Label","SelectMobileDropdown","FormFieldContext","View","useSelectCommon","isBeforeDataFetch","merge","KEYS","isControlOrFunctionKey","isPhone","mergeProps","useFormContext","useFocusableTextField","useLoadingIndicatorTimer","InlineUserAssistance","CompactUserAssistance","ReadonlyTextFieldInput","ReadonlyTextField","isMobile","isTablet","SelectMobileFieldInput","Fragment"],"mappings":"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"}
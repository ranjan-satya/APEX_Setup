{"version":3,"file":"MeterBar-38666619.js","sources":["../../src/UNSAFE_MeterBar/meterUtils.ts","../../src/UNSAFE_MeterBar/ReferenceLines.tsx","../../src/UNSAFE_MeterBar/ThresholdBar.tsx","../../src/UNSAFE_MeterBar/MeterBarWithDimensions.tsx","../../src/UNSAFE_MeterBar/MeterBar.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { Ref } from 'preact/hooks';\nimport { ReferenceLine } from '../utils/UNSAFE_meterUtils';\n\nconst FIT_REF_BAR_PROTRUSION = 16;\n\ntype Dimensions = {\n  width: number;\n  height: number;\n};\n\n/**\n * Returns the metric value of the clicked point.\n * @param event The PointerEvent\n * @param dimensionsRef Ref to stored dimensions of the meter bar.\n * @param min The minimum value of the meter bar.\n * @param max The maximum value of the meter bar.\n * @param step The step value of the meter bar.\n * @param orientation The orientation of the meter bar.\n * @param isRtl Whether the reading mode is 'rtl'\n * @returns The metric value of the clicked point.\n */\nexport function getValue(\n  event: PointerEvent,\n  dimensionsRef: Ref<Dimensions>,\n  min: number,\n  max: number,\n  step: number,\n  orientation?: 'horizontal' | 'vertical',\n  isRtl?: boolean\n): number | undefined {\n  const dims = dimensionsRef.current;\n  if (!dims || dims.width === 0) {\n    return undefined;\n  }\n\n  let val;\n\n  if (orientation === 'horizontal') {\n    const width = event.offsetX;\n    val = min + ((max - min) * (isRtl ? dims.width - width : width)) / dims.width;\n  } else {\n    const height = dims.height - event.offsetY;\n    val = min + ((max - min) * height) / dims.height;\n  }\n  val = Math.round(val / step) * step;\n  return Math.max(min, Math.min(max, val));\n}\n\n/**\n * Returns the true dimension of the meter bar after first render. All dimensions are 0 for initial render.\n * @param element The meter bar track HTML element\n * @returns The dimension of the meter bar.\n */\nexport function getDimensions(element: HTMLElement | null): Dimensions {\n  if (!element) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n  const trackDims = element.getBoundingClientRect();\n\n  return {\n    width: trackDims.width,\n    height: trackDims.height\n  };\n}\n\n/**\n * Returns object with 'start' and 'end' keys. Value for each key will be true if at least one ref line with correposnding position is present in meter bar.\n * @param lines The array of reference lines.\n * @returns Returns object with start and end keys.\n */\nexport function getRefLinesInfo(lines?: ReferenceLine[]): { start: boolean; end: boolean } {\n  let refLineInfo = { start: false, end: false };\n  if (lines) {\n    refLineInfo = lines.reduce((acc, cur) => {\n      acc.start = acc.start || cur.position === 'start';\n      acc.end = acc.end || cur.position === 'end' || cur.position == null;\n      return acc;\n    }, refLineInfo);\n  }\n  return refLineInfo;\n}\n\nexport const getMarginClass = function (\n  info: { start: boolean; end: boolean },\n  isHoriz: boolean,\n  barTrackMarginTopStyle: string,\n  barTrackMarginStartStyle: string,\n  barTrackMarginBottomStyle: string,\n  barTrackMarginEndStyle: string\n) {\n  const className = [];\n\n  if (info.start) {\n    className.push(isHoriz ? barTrackMarginTopStyle : barTrackMarginStartStyle);\n  }\n\n  if (info.end) {\n    className.push(isHoriz ? barTrackMarginBottomStyle : barTrackMarginEndStyle);\n  }\n  return className;\n};\n\nexport const getFitMarginClass = function (\n  info: { start: boolean; end: boolean },\n  isHoriz: boolean,\n  barTrackMarginTopFitStyle: string,\n  barTrackMarginStartFitStyle: string,\n  barTrackMarginBottomFitStyle: string,\n  barTrackMarginEndFitStyle: string\n) {\n  const className = [];\n\n  if (info.start) {\n    className.push(isHoriz ? barTrackMarginTopFitStyle : barTrackMarginStartFitStyle);\n  }\n\n  if (info.end) {\n    className.push(isHoriz ? barTrackMarginBottomFitStyle : barTrackMarginEndFitStyle);\n  }\n  return className;\n};\n\nexport const getFitTrackWidth = function (\n  info: { start: boolean; end: boolean },\n  width?: number,\n  isHoriz?: boolean\n) {\n  if (width) {\n    if (info.start && !isHoriz) {\n      width = width - FIT_REF_BAR_PROTRUSION;\n    }\n\n    if (info.end && !isHoriz) {\n      width = width - FIT_REF_BAR_PROTRUSION;\n    }\n  }\n\n  return width;\n};\n\nexport const getFitTrackHeight = function (\n  info: { start: boolean; end: boolean },\n  height?: number,\n  isHoriz?: boolean\n) {\n  if (height) {\n    if (info.start && isHoriz) {\n      height = height - FIT_REF_BAR_PROTRUSION;\n    }\n    if (info.end && isHoriz) {\n      height = height - FIT_REF_BAR_PROTRUSION;\n    }\n  }\n  return height;\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { styles } from './themes/MeterBarStyles.css';\nimport { VisThresholdsColors } from '../utils/UNSAFE_meterUtils';\nimport { getVisThresholdColor } from '../utils/UNSAFE_meterUtils';\n\ntype ReferenceLineProps = {\n  orientation: 'horizontal' | 'vertical';\n  percentage: string;\n  position?: 'start' | 'end';\n  color?: ColorProps['color'] | VisThresholdsColors;\n  width?: string;\n  height?: string;\n};\n\nexport function ReferenceLineBar({\n  orientation,\n  percentage,\n  color,\n  position,\n  width,\n  height\n}: ReferenceLineProps) {\n  const isHoriz = orientation === 'horizontal';\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const isStartPos = position === 'start';\n\n  return (\n    <div\n      class={classNames([\n        styles.referenceLinesBaseStyle,\n        isHoriz ? styles.referenceLinesHorizontalStyle : styles.referenceLinesVerticalStyle,\n        isStartPos\n          ? isHoriz\n            ? styles.referenceLinesHoriontalStartStyle\n            : isRtl\n            ? styles.referenceLinesVerticalStartRtlStyle\n            : styles.referenceLinesVerticalStartLtrStyle\n          : ''\n      ])}\n      style={{\n        left: isHoriz && !isRtl ? percentage : undefined,\n        right: isHoriz && isRtl ? percentage : undefined,\n        bottom: isHoriz ? undefined : percentage,\n        backgroundColor: getVisThresholdColor(color),\n        width,\n        height\n      }}></div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { styles } from './themes/MeterBarStyles.css';\nimport { VisThresholdsColors, getVisThresholdColor } from '../utils/UNSAFE_meterUtils';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'class'>;\ntype ThresholdBarProps = IntrinsicProps & {\n  color?: ColorProps['color'] | VisThresholdsColors;\n  length: string;\n  orientation: 'horizontal' | 'vertical';\n};\n\nexport function ThresholdBar({ color, length, orientation, ...otherProps }: ThresholdBarProps) {\n  const { direction } = useUser();\n  const isHoriz = orientation === 'horizontal';\n  const isRtl = direction === 'rtl';\n\n  return (\n    <div\n      class={classNames([\n        styles.thresholdBarBaseStyle,\n        isHoriz\n          ? isRtl\n            ? styles.thresholdBarHorizontalBarTrackSectionRtlStyle\n            : styles.thresholdBarHorizontalBarTrackSectionLtrStyle\n          : styles.thresholdBarVerticalBarTrackSectionStyle,\n        otherProps.class\n      ])}\n      style={{\n        width: isHoriz ? length : '100%',\n        height: isHoriz ? '100%' : length,\n        backgroundColor: getVisThresholdColor(color)\n      }}></div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { sizeToCSS } from '../utils/UNSAFE_size';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useEffect, useRef } from 'preact/hooks';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport {\n  usePointerEvents,\n  useKeyboardEvents,\n  useMeterDatatip\n} from '../hooks/PRIVATE_useVisMeterEvents';\n\nimport {\n  getMeterAriaProps,\n  validateRange,\n  getTrackAndIndicatorColor\n} from '../utils/PRIVATE_meterUtils';\n\nimport { Threshold } from '../utils/UNSAFE_meterUtils';\nimport { BarTrack, BarValue } from '../PRIVATE_Meter';\nimport {\n  getDimensions,\n  getFitMarginClass,\n  getMarginClass,\n  getRefLinesInfo,\n  getValue,\n  getFitTrackWidth,\n  getFitTrackHeight\n} from './meterUtils';\nimport { ReferenceLineBar } from './ReferenceLines';\nimport { ThresholdBar } from './ThresholdBar';\nimport { MeterBarProps } from './meterBar.types';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { MeterBarStyles, MeterBarVariantOptions } from './themes/MeterBarStyles.css';\nimport { MeterBarRedwoodTheme } from './themes/redwood/MeterBarTheme';\nimport { useTestId } from '../hooks/UNSAFE_useTestId';\nimport { meterBarVars } from './themes/MeterBarContract.css';\nimport { xUnits } from '#UNSAFE_Theme';\n\ntype MeterBarWithDimensionsProps = Omit<MeterBarProps, 'width' | 'height'> & {\n  width?: number;\n  height?: number;\n};\n\nexport function MeterBarWithDimensions({\n  max = 100,\n  min = 0,\n  value = 0,\n  step = 1,\n  length = '100%',\n  width,\n  height,\n  size,\n  orientation = 'horizontal',\n  isTrackRendered = true,\n  thresholdDisplay = 'all',\n  indicatorSize = 1,\n  testId,\n  ...props\n}: MeterBarWithDimensionsProps) {\n  const testIdProps = useTestId(testId);\n\n  validateRange(min, max, value, step);\n  const currentInputRef = useRef<number>();\n\n  const isHoriz = orientation === 'horizontal';\n  const barTrackRef = useRef<HTMLDivElement>(null);\n  const dimensionsRef = useRef(getDimensions(null));\n  const { direction, forcedColors } = useUser();\n  const isRtl = direction === 'rtl';\n\n  useEffect(() => {\n    if (props.onCommit || props.onInput) {\n      dimensionsRef.current = getDimensions(barTrackRef.current);\n    }\n  }, [size, length, orientation, props.onCommit, props.onInput]);\n\n  const getValueFromEvent = (event: PointerEvent): number | undefined => {\n    // only evaluate value from bar track\n    if (event.target == barTrackRef.current) {\n      return getValue(event, dimensionsRef, min, max, step, orientation, isRtl);\n    }\n    return;\n  };\n\n  const isPointerActiveRef = useRef(false);\n\n  const pointerEventsProps = usePointerEvents(\n    value,\n    getValueFromEvent,\n    barTrackRef,\n    currentInputRef,\n    isPointerActiveRef,\n    props.onCommit,\n    props.onInput\n  );\n\n  const keyboardEventsProps = useKeyboardEvents(\n    value,\n    min,\n    max,\n    step,\n    currentInputRef,\n    props.onCommit,\n    props.onInput\n  );\n\n  const { datatipContent, datatipProps } = useMeterDatatip(\n    value,\n    isPointerActiveRef,\n    props.datatip,\n    props['aria-describedby']\n  );\n\n  const ariaLabelProps = getMeterAriaProps(\n    value,\n    min,\n    max,\n    props['aria-label'],\n    props['aria-labelledby'],\n    props.thresholds\n  );\n  const mergedProps = mergeProps(\n    pointerEventsProps,\n    keyboardEventsProps,\n    datatipProps,\n    ariaLabelProps\n  );\n\n  const validIndicatorSize = Math.max(0, Math.min(1, indicatorSize));\n  const valueBarLength = `${((value - min) * 100) / (max - min)}%`;\n  const valueBarSize = `${validIndicatorSize * 100}%`;\n  const { trackColor, indicatorColor } = getTrackAndIndicatorColor(\n    value,\n    thresholdDisplay,\n    props.trackColor,\n    props.indicatorColor,\n    props.thresholds\n  );\n\n  const refLineInfo = getRefLinesInfo(props.referenceLines);\n  const isInteractive = props.onCommit || props.onInput;\n  const { isTabbable } = useTabbableMode();\n\n  const {\n    classes,\n    styles: {\n      interactiveStyle,\n\n      barValueBaseStyle,\n      barValueVerticalStyle,\n      barValueHorizontalStyle,\n      barValueHighContrastStyle,\n\n      barTrackBaseStyle,\n\n      barTrackHorizontalSizeStyle,\n      barTrackVerticalSizeStyle,\n      barTrackBorderStyle,\n\n      barTrackMarginTopStyle,\n      barTrackMarginStartStyle,\n      barTrackMarginBottomStyle,\n      barTrackMarginEndStyle,\n\n      barTrackMarginTopFitStyle,\n      barTrackMarginStartFitStyle,\n      barTrackMarginBottomFitStyle,\n      barTrackMarginEndFitStyle,\n\n      trackSectionHorizontalFirstStyle,\n      trackSectionHorizontalLastStyle,\n\n      trackSectionVerticalFirstStyle,\n      trackSectionVerticalLastStyle,\n\n      trackSectionRoundedCornersStyle\n    }\n  } = useComponentTheme<MeterBarVariantOptions, MeterBarStyles>(MeterBarRedwoodTheme, {\n    size,\n    orientation\n  });\n\n  const isFit = size === 'fit';\n\n  return (\n    <>\n      <div\n        tabIndex={!isTabbable ? -1 : 0}\n        {...testIdProps}\n        {...mergedProps}\n        style={{\n          width: isFit\n            ? getFitTrackWidth(refLineInfo, width, isHoriz)\n            : isHoriz\n            ? sizeToCSS(length)\n            : undefined,\n          height: isFit\n            ? getFitTrackHeight(refLineInfo, height, isHoriz)\n            : isHoriz\n            ? undefined\n            : sizeToCSS(length)\n        }}\n        class={classNames([\n          classes,\n          ...(isFit\n            ? getFitMarginClass(\n                refLineInfo,\n                isHoriz,\n                barTrackMarginTopFitStyle,\n                barTrackMarginStartFitStyle,\n                barTrackMarginBottomFitStyle,\n                barTrackMarginEndFitStyle\n              )\n            : [])\n        ])}>\n        <BarTrack\n          ref={barTrackRef}\n          orientation={orientation}\n          color={\n            !isTrackRendered || (thresholdDisplay === 'all' && props.thresholds)\n              ? 'transparent'\n              : trackColor\n          }\n          class={classNames([\n            barTrackBaseStyle,\n            isInteractive ? interactiveStyle : '',\n            isHoriz ? barTrackHorizontalSizeStyle : barTrackVerticalSizeStyle,\n            !isTrackRendered || (thresholdDisplay === 'all' && props.thresholds)\n              ? undefined\n              : barTrackBorderStyle,\n            ...(!isFit\n              ? getMarginClass(\n                  refLineInfo,\n                  isHoriz,\n                  barTrackMarginTopStyle,\n                  barTrackMarginStartStyle,\n                  barTrackMarginBottomStyle,\n                  barTrackMarginEndStyle\n                )\n              : '')\n          ])}>\n          {thresholdDisplay === 'all' &&\n            props.thresholds\n              ?.filter((threshold: Threshold) => threshold.max > min && threshold.max <= max)\n              .sort((a, b) => a.max - b.max)\n              .map((threshold: Threshold, index, thresholds) => {\n                const diff =\n                  index === 0 ? threshold.max - min : threshold.max - thresholds[index - 1].max;\n                const trackSectionLastStyle = isHoriz\n                  ? trackSectionHorizontalLastStyle\n                  : trackSectionVerticalLastStyle;\n                let trackSectionStyleClass =\n                  index === 0\n                    ? isHoriz\n                      ? trackSectionHorizontalFirstStyle\n                      : trackSectionVerticalFirstStyle\n                    : '';\n                if (threshold.max === max)\n                  trackSectionStyleClass =\n                    index === 0\n                      ? trackSectionRoundedCornersStyle // Single threshold from min to max\n                      : trackSectionLastStyle;\n                return (\n                  <>\n                    <ThresholdBar\n                      class={trackSectionStyleClass}\n                      orientation={orientation}\n                      length={`${(diff * 100) / (max - min)}%`}\n                      color={threshold.color}\n                    />\n                    {isTrackRendered && index === thresholds.length - 1 && threshold.max < max ? (\n                      <ThresholdBar\n                        class={trackSectionLastStyle}\n                        color={trackColor}\n                        orientation={orientation}\n                        length={`${((max - thresholds[index].max) * 100) / (max - min)}%`}\n                      />\n                    ) : (\n                      ''\n                    )}\n                  </>\n                );\n              })}\n          <BarValue\n            length={valueBarLength}\n            size={valueBarSize}\n            orientation={orientation}\n            class={classNames([\n              barValueBaseStyle,\n              isHoriz ? barValueHorizontalStyle : barValueVerticalStyle,\n              forcedColors === 'active' ? barValueHighContrastStyle : ''\n            ])}\n            color={indicatorColor}\n          />\n          {props.referenceLines?.map((item) => (\n            <ReferenceLineBar\n              color={item.color}\n              orientation={orientation}\n              percentage={`${((item.value - min) * 100) / (max - min)}%`}\n              position={item.position}\n              width={\n                isFit\n                  ? isHoriz\n                    ? undefined\n                    : `calc(${xUnits(4)} + ${meterBarVars.size})`\n                  : undefined\n              }\n              height={\n                isFit\n                  ? isHoriz\n                    ? `calc(${xUnits(4)} + ${meterBarVars.size})`\n                    : undefined\n                  : undefined\n              }\n            />\n          ))}\n        </BarTrack>\n      </div>\n      {datatipContent}\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { TrackResizeContainer } from '../PRIVATE_TrackResizeContainer';\nimport { MeterBarWithDimensions } from './MeterBarWithDimensions';\nimport { MeterBarProps } from './meterBar.types';\n\n/**\n * A Meter bar displays information graphically in a rectangular bar, highlighting a specific metric value's progress in relation to its min, max, or thresholds.\n */\nexport function MeterBar({ orientation, length, size, ...props }: MeterBarProps) {\n  return (\n    <>\n      {size === 'fit' ? (\n        <TrackResizeContainer width=\"100%\" height=\"100%\">\n          {(width, height) => (\n            <MeterBarWithDimensions\n              width={width}\n              height={height}\n              orientation={orientation}\n              size={size}\n              {...props}\n            />\n          )}\n        </TrackResizeContainer>\n      ) : (\n        <MeterBarWithDimensions size={size} length={length} orientation={orientation} {...props} />\n      )}\n    </>\n  );\n}\n"],"names":["getDimensions","element","width","height","trackDims","getBoundingClientRect","getMarginClass","info","isHoriz","barTrackMarginTopStyle","barTrackMarginStartStyle","barTrackMarginBottomStyle","barTrackMarginEndStyle","className","start","push","end","getFitMarginClass","barTrackMarginTopFitStyle","barTrackMarginStartFitStyle","barTrackMarginBottomFitStyle","barTrackMarginEndFitStyle","getFitTrackWidth","getFitTrackHeight","ReferenceLineBar","orientation","percentage","color","position","direction","useUser","isRtl","isStartPos","_jsx","class","classNames","styles","referenceLinesBaseStyle","referenceLinesHorizontalStyle","referenceLinesVerticalStyle","referenceLinesHoriontalStartStyle","referenceLinesVerticalStartRtlStyle","referenceLinesVerticalStartLtrStyle","style","left","undefined","right","bottom","backgroundColor","getVisThresholdColor","ThresholdBar","length","otherProps","thresholdBarBaseStyle","thresholdBarHorizontalBarTrackSectionRtlStyle","thresholdBarHorizontalBarTrackSectionLtrStyle","thresholdBarVerticalBarTrackSectionStyle","MeterBarWithDimensions","max","min","value","step","size","isTrackRendered","thresholdDisplay","indicatorSize","testId","props","testIdProps","useTestId","validateRange","currentInputRef","useRef","barTrackRef","dimensionsRef","forcedColors","useEffect","onCommit","onInput","current","isPointerActiveRef","pointerEventsProps","usePointerEvents","event","target","dims","val","offsetX","offsetY","Math","round","getValue","keyboardEventsProps","useKeyboardEvents","datatipContent","datatipProps","useMeterDatatip","datatip","ariaLabelProps","getMeterAriaProps","thresholds","mergedProps","mergeProps","validIndicatorSize","valueBarLength","valueBarSize","trackColor","indicatorColor","getTrackAndIndicatorColor","refLineInfo","lines","reduce","acc","cur","getRefLinesInfo","referenceLines","isInteractive","isTabbable","useTabbableMode","classes","interactiveStyle","barValueBaseStyle","barValueVerticalStyle","barValueHorizontalStyle","barValueHighContrastStyle","barTrackBaseStyle","barTrackHorizontalSizeStyle","barTrackVerticalSizeStyle","barTrackBorderStyle","trackSectionHorizontalFirstStyle","trackSectionHorizontalLastStyle","trackSectionVerticalFirstStyle","trackSectionVerticalLastStyle","trackSectionRoundedCornersStyle","useComponentTheme","MeterBarRedwoodTheme","isFit","_jsxs","tabIndex","sizeToCSS","children","jsxs","BarTrack","ref","filter","threshold","sort","a","b","map","index","diff","trackSectionLastStyle","trackSectionStyleClass","jsx","BarValue","item","xUnits","meterBarVars","_Fragment","TrackResizeContainer"],"mappings":"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"}
{"version":3,"file":"ConveyorBeltItem-3d1d7f3c.js","sources":["../../src/UNSAFE_ConveyorBelt/ConveyorBelt.tsx","../../src/UNSAFE_ConveyorBelt/ConveyorBeltItem.tsx"],"sourcesContent":["import { ComponentChildren, Ref } from 'preact';\nimport { useEffect, useRef, useState, useCallback, useMemo } from 'preact/hooks';\nimport { BaseButton } from '../UNSAFE_BaseButton';\nimport { ButtonLabelLayout } from '../UNSAFE_ButtonLabelLayout';\nimport { ChevronLeft } from '../UNSAFE_RedwoodIcons/ChevronLeft';\nimport { ChevronRight } from '../UNSAFE_RedwoodIcons/ChevronRight';\nimport { ChevronUp } from '../UNSAFE_RedwoodIcons/ChevronUp';\nimport { ChevronDown } from '../UNSAFE_RedwoodIcons/ChevronDown';\nimport { classNames as clsx } from '../utils/UNSAFE_classNames';\nimport { styles } from './themes/ConveyorBeltStyles.css';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { ConveyorBeltContext } from './ConveyorBeltContext';\nimport { TestIdProps, useTestId } from '../hooks/UNSAFE_useTestId';\nimport { forwardRef, useImperativeHandle } from 'preact/compat';\nimport { ConveyorBeltVariantOptions } from './themes/ConveyorBeltStyles.css';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { ConveyorBeltRedwoodTheme } from './themes/redwood/ConveyorBeltTheme';\n\nexport type ConveyorBeltProps = TestIdProps & {\n  /**\n   * ConveyorBelt Component content\n   */\n  children?: ComponentChildren;\n  /**\n   * Sets the number of pixels that an element's content is scrolled from its initial position.\n   */\n  scrollPosition?: number;\n  /**\n   * Callback that is executed every time conveyor belt is scrolled and the scroll position is changed.\n   * @param value The value is the new scroll position of the conveyor belt.\n   * @returns\n   */\n  onScrollPositionChanged?: (value?: number) => void;\n  /**\n   * Indicates whether overflow content arrows are visible or hidden.\n   * \"auto\" show overflow arrows on desktop, hide on mobile.\n   * \"visible\" always show overflow arrows.\n   * \"hidden\" never show overflow arrows.\n   */\n  arrowVisibility?: 'auto' | 'visible' | 'hidden';\n\n  /**\n   * Specify the orientation of the conveyorBelt.\n   * \"horizontal\" Orient the conveyorBelt horizontally.\n   * \"vertical\" Orient the conveyorBelt vertically.\n   */\n  orientation?: 'horizontal' | 'vertical';\n};\n\n/**\n * Helper function to determine whether the current device is a mobile device\n * @returns true if runnning on a mobile device, false otherwise\n */\nfunction isMobile() {\n  const deviceType = getClientHints().deviceType;\n  return deviceType === 'phone';\n}\n\ntype ConveyorItemElement = {\n  item: HTMLElement;\n  isVisible: boolean;\n  isCurrent: boolean;\n  index: number;\n};\n\n// utility hook that calculates which conveyorbelt items are visible inside conveyorbelt viewport\n// and which are hidden\nconst useConveyorElementsVisible = (\n  root: HTMLDivElement,\n  orientation: 'horizontal' | 'vertical',\n  prevBtn?: HTMLDivElement,\n  nextBtn?: HTMLDivElement,\n  direction?: 'ltr' | 'rtl'\n) => {\n  const observerRef = useRef<IntersectionObserver>();\n  const targetsRef = useRef<ConveyorItemElement[]>([]);\n  const [targets] = useState<ConveyorItemElement[]>([]);\n  const addTarget = useCallback(\n    (target: ConveyorItemElement) => {\n      if (targetsRef.current !== null) {\n        targetsRef.current.push(target);\n        targets.push(target);\n      }\n    },\n    [targets]\n  );\n\n  useEffect(() => {\n    if (targets && targets.length > 0 && root) {\n      // IntersectionObserver calls visibility change only when item is\n      // fully visible inside (threshold: 1)\n      // conveyorbelt viewport (root),\n      // taking arrow buttons into the account\n      // and viewport should be smaller by the buttons width (rootMargin)\n      const rootMargin =\n        orientation === 'horizontal'\n          ? direction === 'ltr'\n            ? `0px ${nextBtn ? -nextBtn.offsetWidth : 0}px 0px ${\n                prevBtn ? -prevBtn.offsetWidth : 0\n              }px`\n            : `0px ${prevBtn ? -prevBtn.offsetWidth : 0}px 0px ${\n                nextBtn ? -nextBtn.offsetWidth : 0\n              }px`\n          : `${nextBtn ? -nextBtn.offsetHeight : 0}px 0px ${\n              prevBtn ? -prevBtn.offsetHeight : 0\n            }px 0px`;\n\n      observerRef.current = new IntersectionObserver(onVisibilityChange, {\n        root,\n        rootMargin: rootMargin,\n        threshold: 1\n      });\n      for (const target of targets) {\n        if (target != null) observerRef.current.observe(target.item);\n      }\n    }\n    return () => {\n      for (const target of targets) {\n        if (observerRef.current && target != null) observerRef.current.unobserve(target.item);\n      }\n    };\n  }, [targets, targets.length, root, nextBtn, prevBtn, direction]);\n\n  // handle visibility changes\n  const onVisibilityChange = (entries: IntersectionObserverEntry[]) => {\n    const newItems: ConveyorItemElement[] = targetsRef.current.map((conveyorItem, index) => {\n      const foundEntry = entries.find((entry) => entry.target === conveyorItem.item);\n      // if visibility changed for the item, change isVisible property,\n      // otherwise just return the original\n      if (foundEntry) {\n        return {\n          item: foundEntry.target as HTMLDivElement,\n          isVisible: foundEntry.isIntersecting,\n          isCurrent: conveyorItem.isCurrent,\n          index: index\n        };\n      } else {\n        return conveyorItem;\n      }\n    });\n    targetsRef.current = newItems;\n  };\n\n  return useMemo(\n    () => ({\n      itemElementsRef: targetsRef,\n      addItem: addTarget\n    }),\n    [targetsRef, addTarget]\n  );\n};\n\nexport type ScrollableHandle = {\n  scrollElementIntoView: (element: HTMLElement) => void;\n};\n\n/**\n * The Conveyor belt component is a container element that manages\n * overflow for its child elements and allows scrolling among them\n */\nexport const ConveyorBelt = forwardRef(\n  (\n    {\n      children,\n      scrollPosition,\n      onScrollPositionChanged,\n      arrowVisibility = 'auto',\n      orientation = 'horizontal',\n      testId\n    }: ConveyorBeltProps,\n    ref: Ref<ScrollableHandle> = null\n  ) => {\n    const [canPaginateNext, setCanPaginateNext] = useState(false);\n    const [canPaginatePrevious, setCanPaginatePrevious] = useState(false);\n    const overflowContainerRef = useRef<HTMLDivElement | null>(null);\n    const contentContainerRef = useRef<HTMLDivElement | null>(null);\n    const nextButtonContainerRef = useRef<HTMLDivElement | null>(null);\n    const prevButtonContainerRef = useRef<HTMLDivElement | null>(null);\n    const baseRef = useRef<HTMLDivElement | null>(null);\n    const leftRef = useRef<HTMLDivElement | null>(null);\n    const rightRef = useRef<HTMLDivElement | null>(null);\n    const observerRef = useRef<any>(null);\n    const currentItemRef = useRef<HTMLElement | null>(null);\n    const [currentItem, _setCurrentItem] = useState<HTMLElement | null>(null);\n    const [buttonsHidden, setButtonsHidden] = useState(\n      (isMobile() && arrowVisibility === 'auto') || arrowVisibility === 'hidden'\n    );\n    const { direction } = useUser();\n    const { itemElementsRef, addItem } = useConveyorElementsVisible(\n      overflowContainerRef.current!,\n      orientation,\n      prevButtonContainerRef.current!,\n      nextButtonContainerRef.current!,\n      direction\n    );\n\n    useImperativeHandle(ref, () => ({\n      scrollElementIntoView: (element: HTMLElement) => {\n        scrollIntoView(element);\n      },\n      scrollPrevious: () => {\n        scrollToPreviousPage();\n      },\n      scrollNext: () => {\n        scrollToNextPage();\n      }\n    }));\n\n    const testIdProps = useTestId(testId);\n    const leftArrowTestIdProps = 'leftArrow' + testId;\n    const rightArrowTestIdProps = 'rightArrow' + testId;\n\n    const { variantClasses } = useComponentTheme<ConveyorBeltVariantOptions>(\n      ConveyorBeltRedwoodTheme,\n      {\n        orientation\n      }\n    );\n\n    const { variantClasses: contentClasses } = useComponentTheme<ConveyorBeltVariantOptions>(\n      ConveyorBeltRedwoodTheme,\n      {\n        content: orientation\n      }\n    );\n\n    const { variantClasses: overflowClasses } = useComponentTheme<ConveyorBeltVariantOptions>(\n      ConveyorBeltRedwoodTheme,\n      {\n        pagination:\n          canPaginateNext && canPaginatePrevious\n            ? 'both'\n            : canPaginateNext\n            ? 'next'\n            : canPaginatePrevious\n            ? 'previous'\n            : 'none',\n        direction,\n        orientation,\n        overflow: orientation,\n        arrowVisibility: buttonsHidden === true ? 'hidden' : 'visible'\n      }\n    );\n\n    const { classes: nextButtonClasses } = useComponentTheme<ConveyorBeltVariantOptions>(\n      ConveyorBeltRedwoodTheme,\n      {\n        nextButton: orientation,\n        direction\n      }\n    );\n\n    const { classes: previousButtonClasses } = useComponentTheme<ConveyorBeltVariantOptions>(\n      ConveyorBeltRedwoodTheme,\n      {\n        previousButton: orientation,\n        direction\n      }\n    );\n\n    // utility method to get all conveyorbelt items\n    const _getConveyorItems = () => {\n      const conveyorContentChildren = contentContainerRef.current\n        ? Array.from(contentContainerRef.current.querySelectorAll('[data-oj-conveyorbelt-item]'))\n        : [];\n      if (conveyorContentChildren) {\n        let index = -1;\n        for (const child of conveyorContentChildren) {\n          index++;\n          const element = child as HTMLElement;\n          if (element) {\n            const item = itemElementsRef.current.find((item) => item.item === element);\n            if (item == null) {\n              addItem({\n                item: element!,\n                isVisible: false,\n                index: index,\n                isCurrent: false\n              });\n            }\n          }\n        }\n      }\n    };\n\n    useEffect(() => {\n      _getConveyorItems();\n    });\n\n    const scrollEndHandler = useCallback(() => {\n      if (onScrollPositionChanged)\n        onScrollPositionChanged(overflowContainerRef.current?.scrollLeft);\n    }, [onScrollPositionChanged]);\n\n    useEffect(() => {\n      setButtonsHidden((isMobile() && arrowVisibility === 'auto') || arrowVisibility === 'hidden');\n    }, [arrowVisibility]);\n\n    useEffect(() => {\n      if (!overflowContainerRef.current) return;\n      overflowContainerRef.current.scrollTo({\n        left: scrollPosition\n      });\n    }, [scrollPosition]);\n\n    // useEffect hook that calculates when arrow buttons should become visible or hidden\n    // using IntersectionObserver\n    useEffect(() => {\n      const overflowContainer = overflowContainerRef.current;\n      const leftGuard = leftRef.current;\n      const rightGuard = rightRef.current;\n\n      if (overflowContainer && leftGuard && rightGuard) {\n        if (!buttonsHidden) {\n          observerRef.current = new IntersectionObserver(\n            (entries) => {\n              entries.forEach((entry) => {\n                if (entry.target.getAttribute('data-intersection-id') === 'left') {\n                  setCanPaginatePrevious(!entry.isIntersecting);\n                } else {\n                  setCanPaginateNext(!entry.isIntersecting);\n                }\n              });\n            },\n            {\n              root: overflowContainer\n            }\n          );\n          observerRef.current.observe(leftGuard);\n          observerRef.current.observe(rightGuard);\n        }\n        overflowContainer.addEventListener('scrollend', scrollEndHandler);\n      }\n\n      // Clean-up\n      return () => {\n        if (!overflowContainer) return;\n        overflowContainer.removeEventListener('scrollend', scrollEndHandler);\n        observerRef.current?.unobserve(leftGuard);\n        observerRef.current?.unobserve(rightGuard);\n      };\n    }, [buttonsHidden, scrollEndHandler]);\n\n    const scrollIntoView = useCallback(\n      (element: HTMLElement) => {\n        // utility method to check if the element is closer to the end edge of the conveyorbelt\n        const _shouldSnapToTheEndEdge = (\n          ltr: boolean,\n          orientation: 'horizontal' | 'vertical',\n          elem?: HTMLElement | null,\n          scroller?: HTMLDivElement | null\n        ) => {\n          if (!elem || !scroller) return false;\n          let right;\n          let left;\n          let bottom;\n\n          if (scroller === document.documentElement) {\n            left = 0;\n            right = document.documentElement.clientWidth;\n            bottom = document.documentElement.clientHeight;\n          } else {\n            const scrollerBounds = scroller.getBoundingClientRect();\n            right = canPaginateNext\n              ? scrollerBounds.right - nextButtonContainerRef.current?.offsetWidth!\n              : scrollerBounds.right;\n            left = canPaginateNext\n              ? scrollerBounds.left - nextButtonContainerRef.current?.offsetWidth!\n              : scrollerBounds.left;\n            bottom = canPaginateNext\n              ? scrollerBounds.bottom - nextButtonContainerRef.current?.offsetHeight!\n              : scrollerBounds.bottom;\n          }\n          const bounds = elem.getBoundingClientRect();\n          return orientation === 'horizontal'\n            ? ltr\n              ? bounds.right > right\n              : bounds.left < left\n            : bounds.bottom > bottom;\n        };\n\n        // utility method to check that an element is fully visible inside conveyorbelt\n        const _isElementInsideScrollerBounds = (\n          orientation: 'vertical' | 'horizontal',\n          elem?: HTMLElement | null,\n          scroller?: HTMLDivElement | null\n        ) => {\n          if (!elem || !scroller) return false;\n          let left;\n          let right;\n          let top;\n          let bottom;\n          if (scroller === document.documentElement) {\n            left = 0;\n            right = document.documentElement.clientWidth;\n            top = 0;\n            bottom = document.documentElement.clientHeight;\n          } else {\n            const scrollerBounds = scroller.getBoundingClientRect();\n            left = canPaginatePrevious\n              ? scrollerBounds.left + prevButtonContainerRef.current?.offsetWidth!\n              : scrollerBounds.left;\n            right = canPaginateNext\n              ? scrollerBounds.right - nextButtonContainerRef.current?.offsetWidth!\n              : scrollerBounds.right;\n            top = canPaginatePrevious\n              ? scrollerBounds.top + prevButtonContainerRef.current?.offsetHeight!\n              : scrollerBounds.top;\n            bottom = canPaginateNext\n              ? scrollerBounds.bottom - nextButtonContainerRef.current?.offsetHeight!\n              : scrollerBounds.bottom;\n          }\n          const bounds = elem.getBoundingClientRect();\n          return orientation === 'horizontal'\n            ? bounds.left <= right &&\n                bounds.right <= right &&\n                bounds.left >= left &&\n                bounds.right >= left\n            : bounds.top <= bottom &&\n                bounds.bottom <= bottom &&\n                bounds.top >= top &&\n                bounds.bottom >= top;\n        };\n\n        const _isElementOverflowingScrollerBounds = (\n          orientation: 'vertical' | 'horizontal',\n          elem?: HTMLElement | null,\n          scroller?: HTMLDivElement | null\n        ) => {\n          if (!elem || !scroller) return false;\n          const bounds = elem.getBoundingClientRect();\n          const scrollerBounds = scroller.getBoundingClientRect();\n          return orientation === 'horizontal'\n            ? bounds.width > scrollerBounds.width\n            : bounds.height > scrollerBounds.height;\n        };\n\n        const isElementVisible = _isElementInsideScrollerBounds(\n          orientation,\n          element,\n          overflowContainerRef.current\n        );\n        if (isElementVisible) {\n          return;\n        }\n        const isElementOverflowing = _isElementOverflowingScrollerBounds(\n          orientation,\n          element,\n          overflowContainerRef.current\n        );\n\n        if (!overflowContainerRef.current || !contentContainerRef.current) return;\n        const shouldSnapEnd = _shouldSnapToTheEndEdge(\n          direction === 'ltr',\n          orientation,\n          element,\n          overflowContainerRef.current\n        );\n        if (orientation === 'vertical') {\n          if (shouldSnapEnd && !isElementOverflowing) {\n            overflowContainerRef.current.scrollTo({\n              top:\n                element.offsetTop +\n                element.offsetHeight -\n                overflowContainerRef.current.offsetHeight +\n                (nextButtonContainerRef.current?.offsetHeight\n                  ? nextButtonContainerRef.current?.offsetHeight + 1\n                  : 0),\n              behavior: 'smooth'\n            });\n          } else {\n            overflowContainerRef.current.scrollTo({\n              top:\n                element.offsetTop -\n                (prevButtonContainerRef.current?.offsetHeight\n                  ? prevButtonContainerRef.current?.offsetHeight + 1\n                  : 0),\n              behavior: 'smooth'\n            });\n          }\n          return;\n        }\n\n        if (direction === 'ltr') {\n          if (shouldSnapEnd && !isElementOverflowing) {\n            overflowContainerRef.current.scrollTo({\n              left:\n                element.offsetLeft +\n                element.offsetWidth -\n                overflowContainerRef.current.offsetWidth +\n                (nextButtonContainerRef.current?.offsetWidth\n                  ? nextButtonContainerRef.current?.offsetWidth + 1\n                  : 0),\n              behavior: 'smooth'\n            });\n          } else {\n            overflowContainerRef.current.scrollTo({\n              left:\n                element.offsetLeft -\n                (prevButtonContainerRef.current?.offsetWidth\n                  ? prevButtonContainerRef.current?.offsetWidth + 1\n                  : 0),\n              behavior: 'smooth'\n            });\n          }\n        } else {\n          if (shouldSnapEnd && !isElementOverflowing) {\n            overflowContainerRef.current.scrollTo({\n              left:\n                element.offsetLeft -\n                contentContainerRef.current?.offsetWidth! +\n                overflowContainerRef.current.offsetWidth -\n                (nextButtonContainerRef.current?.offsetWidth\n                  ? nextButtonContainerRef.current?.offsetWidth + 1\n                  : 0),\n              behavior: 'smooth'\n            });\n          } else {\n            overflowContainerRef.current.scrollTo({\n              left:\n                element.offsetLeft +\n                element.offsetWidth -\n                contentContainerRef.current?.offsetWidth! +\n                (prevButtonContainerRef.current?.offsetWidth\n                  ? prevButtonContainerRef.current?.offsetWidth + 1\n                  : 0),\n              behavior: 'smooth'\n            });\n          }\n        }\n      },\n      [canPaginateNext, canPaginatePrevious, direction]\n    );\n\n    const getNextInvisible = useCallback(() => {\n      const nextInvisible = itemElementsRef.current.find((item) => {\n        if (\n          item.isVisible == false &&\n          item.index >= 1 &&\n          itemElementsRef.current[item.index - 1].isVisible == true\n        ) {\n          return true;\n        }\n        return false;\n      });\n      return nextInvisible?.item;\n    }, [itemElementsRef]);\n\n    const getPreviousInvisible = useCallback(() => {\n      const previousInvisible = itemElementsRef.current.find((item) => {\n        if (\n          item.isVisible == false &&\n          item.index < itemElementsRef.current.length - 1 &&\n          itemElementsRef.current[item.index + 1].isVisible == true\n        ) {\n          return true;\n        }\n        return false;\n      });\n      return previousInvisible?.item;\n    }, [itemElementsRef]);\n\n    // paginates to the previous partially visible or hidden item in the conveyorbelt,\n    // so that it is the last visible of the conveyorbelt view port\n    const scrollToPreviousPage = useCallback(() => {\n      const overflowContainer = overflowContainerRef.current;\n      const scrollAmount =\n        orientation === 'horizontal'\n          ? overflowContainerRef.current?.clientWidth\n          : overflowContainerRef.current?.clientHeight;\n\n      if (overflowContainer && scrollAmount) {\n        const previousInvisible: HTMLElement | undefined = getPreviousInvisible();\n        if (orientation === 'vertical') {\n          if (!previousInvisible) {\n            overflowContainer.scrollTo({\n              top: overflowContainer.scrollTop - scrollAmount,\n              behavior: 'smooth'\n            });\n          } else {\n            overflowContainer.scrollTo({\n              top:\n                previousInvisible.offsetTop +\n                previousInvisible.offsetHeight -\n                overflowContainer.offsetHeight +\n                (prevButtonContainerRef.current?.offsetHeight\n                  ? prevButtonContainerRef.current?.offsetHeight + 1\n                  : 0),\n              behavior: 'smooth'\n            });\n          }\n          return;\n        }\n        if (direction === 'ltr') {\n          if (!previousInvisible) {\n            overflowContainer.scrollTo({\n              left: overflowContainer.scrollLeft - scrollAmount,\n              behavior: 'smooth'\n            });\n          } else {\n            overflowContainer.scrollTo({\n              left:\n                previousInvisible.offsetLeft +\n                previousInvisible.offsetWidth -\n                overflowContainer.offsetWidth +\n                (prevButtonContainerRef.current?.offsetWidth\n                  ? prevButtonContainerRef.current?.offsetWidth + 1\n                  : 0),\n              behavior: 'smooth'\n            });\n          }\n        } else {\n          if (!previousInvisible) {\n            overflowContainer.scrollTo({\n              left: overflowContainer.scrollLeft + scrollAmount,\n              behavior: 'smooth'\n            });\n          } else {\n            overflowContainer.scrollTo({\n              left:\n                previousInvisible.offsetLeft -\n                contentContainerRef.current?.offsetWidth! +\n                overflowContainer.offsetWidth -\n                (prevButtonContainerRef.current?.offsetWidth\n                  ? prevButtonContainerRef.current?.offsetWidth + 1\n                  : 0),\n              behavior: 'smooth'\n            });\n          }\n        }\n      }\n    }, [direction, orientation, getPreviousInvisible]);\n\n    // paginates to the next partially visible or hidden item in the conveyorbelt,\n    // so that it is the first at the start of the conveyorbelt view port\n    const scrollToNextPage = useCallback(() => {\n      const overflowContainer = overflowContainerRef.current;\n      const scrollAmount =\n        orientation === 'horizontal'\n          ? overflowContainerRef.current?.clientWidth\n          : overflowContainerRef.current?.clientHeight;\n\n      if (overflowContainer && scrollAmount) {\n        const nextInvisible: HTMLElement | undefined = getNextInvisible();\n        if (orientation === 'vertical') {\n          if (!nextInvisible) {\n            overflowContainer.scrollTo({\n              top: overflowContainer.scrollTop + scrollAmount,\n              behavior: 'smooth'\n            });\n          } else {\n            overflowContainer.scrollTo({\n              top:\n                (nextInvisible?.offsetTop ?? 0) -\n                (nextButtonContainerRef.current?.offsetHeight\n                  ? nextButtonContainerRef.current?.offsetHeight + 1\n                  : 0),\n              behavior: 'smooth'\n            });\n          }\n          return;\n        }\n        if (direction === 'ltr') {\n          if (!nextInvisible) {\n            overflowContainer.scrollTo({\n              left: overflowContainer.scrollLeft + scrollAmount,\n              behavior: 'smooth'\n            });\n          } else {\n            overflowContainer.scrollTo({\n              left:\n                (nextInvisible?.offsetLeft ?? 0) -\n                (nextButtonContainerRef.current?.offsetWidth\n                  ? nextButtonContainerRef.current?.offsetWidth + 1\n                  : 0),\n              behavior: 'smooth'\n            });\n          }\n        } else {\n          if (!nextInvisible) {\n            overflowContainer.scrollTo({\n              left: overflowContainer.scrollLeft - scrollAmount,\n              behavior: 'smooth'\n            });\n          } else {\n            overflowContainer.scrollTo({\n              left:\n                -(contentContainerRef.current?.offsetWidth! - (nextInvisible?.offsetLeft ?? 0)) +\n                (nextInvisible?.offsetWidth ?? 0) +\n                (nextButtonContainerRef.current?.offsetWidth\n                  ? nextButtonContainerRef.current?.offsetWidth + 1\n                  : 0),\n              behavior: 'smooth'\n            });\n          }\n        }\n      }\n    }, [direction, orientation, getNextInvisible]);\n\n    const setCurrentItem = useCallback(\n      (node: HTMLElement | null) => {\n        if (currentItemRef.current !== node) {\n          // this logic below is needed to make sure only one item is current\n          const item = itemElementsRef.current.find((item) => item.item === node);\n          const currentItem = itemElementsRef.current.find((item) => item.isCurrent === true);\n          if (item === currentItem || !item) return;\n          if (currentItem) currentItem.isCurrent = false;\n          item!.isCurrent = true;\n\n          currentItemRef.current = node;\n          _setCurrentItem(node);\n        }\n      },\n      [itemElementsRef]\n    );\n\n    useEffect(() => {\n      if (currentItem && currentItemRef.current) {\n        scrollIntoView(currentItemRef.current);\n      }\n    }, [currentItem]); // eslint warning about scrollIntoView should be ignored.\n\n    const onFocus = useCallback(\n      (event: FocusEvent) => {\n        if (baseRef.current?.isEqualNode(event.target as HTMLElement)) {\n          return;\n        }\n        scrollIntoView(event.target as HTMLElement);\n      },\n      [scrollIntoView]\n    );\n\n    const previousButtonStyle = clsx([styles.buttonContainer, previousButtonClasses]);\n\n    const nextButtonStyle = clsx([styles.buttonContainer, nextButtonClasses]);\n\n    return (\n      <ConveyorBeltContext.Provider value={{ setCurrentItem }}>\n        <div\n          onFocus={onFocus}\n          ref={baseRef}\n          className={clsx([styles.conveyorStyle, variantClasses])}\n          {...testIdProps}>\n          {canPaginatePrevious && !buttonsHidden && (\n            <div ref={prevButtonContainerRef} class={previousButtonStyle}>\n              <BaseButton\n                elementDetails={{ type: 'span', isFocusable: false }}\n                styling={['min']}\n                size={'sm'}\n                variant={'ghost'}\n                onAction={() => scrollToPreviousPage()}\n                aria-hidden={true}\n                testId={leftArrowTestIdProps}>\n                <ButtonLabelLayout\n                  size={'sm'}\n                  display={'icons'}\n                  startIcon={\n                    orientation === 'horizontal' ? (\n                      direction === 'ltr' ? (\n                        <ChevronLeft />\n                      ) : (\n                        <ChevronRight />\n                      )\n                    ) : (\n                      <ChevronUp />\n                    )\n                  }></ButtonLabelLayout>\n              </BaseButton>\n            </div>\n          )}\n          <div\n            className={clsx([styles.overflowContainer, overflowClasses])}\n            ref={overflowContainerRef}>\n            <div\n              className={clsx([styles.contentContainer, variantClasses, contentClasses])}\n              ref={contentContainerRef}>\n              <div\n                data-intersection-id=\"left\"\n                ref={leftRef}\n                style={{ minWidth: 1, minHeight: 1 }}\n              />\n              {children}\n              <div\n                data-intersection-id=\"right\"\n                ref={rightRef}\n                style={{ minWidth: 1, minHeight: 1 }}\n              />\n            </div>\n          </div>\n          {canPaginateNext && !buttonsHidden && (\n            <div ref={nextButtonContainerRef} class={nextButtonStyle}>\n              <BaseButton\n                elementDetails={{ type: 'span', isFocusable: false }}\n                styling={['min']}\n                size={'sm'}\n                variant={'ghost'}\n                onAction={() => scrollToNextPage()}\n                aria-hidden={true}\n                testId={rightArrowTestIdProps}>\n                <ButtonLabelLayout\n                  size={'sm'}\n                  display={'icons'}\n                  startIcon={\n                    orientation === 'horizontal' ? (\n                      direction === 'ltr' ? (\n                        <ChevronRight />\n                      ) : (\n                        <ChevronLeft />\n                      )\n                    ) : (\n                      <ChevronDown />\n                    )\n                  }></ButtonLabelLayout>\n              </BaseButton>\n            </div>\n          )}\n        </div>\n      </ConveyorBeltContext.Provider>\n    );\n  }\n);\n","import { ComponentChildren } from 'preact';\nimport { useConveyorBeltItem } from './useConveyorBeltItem';\nimport { styles } from './themes/ConveyorBeltStyles.css';\nimport { classNames as clsx } from '../utils/UNSAFE_classNames';\n\ntype ConveyorBeltItemProps = {\n  /**\n   * The ConveyorBeltItem content\n   */\n  children?: ComponentChildren;\n  /**\n   * Specifies the current item which should be scrolled into view\n   */\n  isCurrent?: boolean;\n};\n/**\n * A wrapper component for one conveyor belt item/child element.\n * It takes care of correctly mark the child components as conveyor belt items.\n * @param param0 ConveyorBeltItemProps\n * @returns\n */\nexport const ConveyorBeltItem = ({ children, isCurrent }: ConveyorBeltItemProps) => {\n  const props = useConveyorBeltItem({\n    isCurrent: isCurrent\n  });\n  return (\n    <div className={clsx([styles.conveyorBeltItemStyle])} {...props}>\n      {children}\n    </div>\n  );\n};\n"],"names":["clsx","_jsx","_jsxs","ChevronLeft","ChevronRight","ChevronUp","ChevronDown"],"mappings":"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"}
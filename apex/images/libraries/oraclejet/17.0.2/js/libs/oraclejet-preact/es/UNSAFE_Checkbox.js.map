{"version":3,"file":"UNSAFE_Checkbox.js","sources":["../../src/UNSAFE_Checkbox/Checkbox.tsx"],"sourcesContent":["import { ComponentChildren, ComponentProps, Ref } from 'preact';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'preact/compat';\n\nimport { InlineUserAssistance, UserAssistanceDensityType } from '#UNSAFE_UserAssistance';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { FocusableHandle } from '#hooks/UNSAFE_useFocusableTextField';\nimport { CheckboxControl } from '#PRIVATE_CheckboxControl';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { CheckboxRadioContext } from '#PRIVATE_CheckboxRadioField/CheckboxRadioContext';\nimport { AriaAttributesSignalExcluded } from '#utils/UNSAFE_attributeUtils';\nimport { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { TestIdProps } from '#hooks/UNSAFE_useTestId';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: AriaAttributesSignalExcluded['aria-describedby'];\n  /**\n   * Text to provide the user with additional information.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Content associated with checkbox. This can be a label or a block of text.\n   */\n  children: ComponentChildren;\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the checkbox requires a selection to be made.\n   */\n  isRequired?: boolean;\n  /**\n   * Specifies if the checkbox is read-only.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies if the checkbox is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * Callback invoked each time the user changes checkbox selection.\n   */\n  onCommit: (detail: ValueUpdateDetail<boolean>) => void;\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'compact'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * Value of the checkbox.\n   */\n  value?: boolean;\n} & TestIdProps;\n\n/**\n * Checkbox is a single standalone checkbox control. It represents a boolean value.\n */\nexport const Checkbox = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      columnSpan,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      messages,\n      onCommit,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value: propValue,\n      testId,\n      children\n    }: Props,\n    ref: Ref<FocusableHandle> = null\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n\n    const checkboxRef = useRef<HTMLInputElement>(null);\n    const id = useId();\n    const UAtestId = testId ? `${testId}-inline-user-assistance` : undefined;\n\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n    // we still render <InlineUserAssistance/> if density is 'efficient' or 'compact' to save space,\n    // even though we don't render user assistance for disabled or readonly fields\n    const hasBottomUserAssistance = !isDisabled && !isReadonly;\n    const bottomUaId = hasBottomUserAssistance ? `${id}-bottom-ua` : undefined;\n\n    const onChangeHandler = useCallback(\n      (e: Event) => {\n        // return early on keyup if key isn't spacebar\n        const { key } = e as KeyboardEvent;\n        const hasKey = key !== undefined;\n\n        if (hasKey && key !== ' ') {\n          return;\n        }\n\n        const input = e.target as HTMLInputElement;\n        // While mouse clicking StyledCheckbox results in toggling the checked state on an input element, spacebar key events do not.\n        // If it is a spacebar key event, we will return the toggled value of its current state.\n        const value = hasKey ? !input.checked : input.checked;\n        const previousValue = !!propValue;\n\n        if (previousValue !== value) {\n          onCommit({\n            value,\n            previousValue\n          });\n        }\n      },\n      [onCommit, propValue]\n    );\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        !isDisabled && checkboxRef.current?.focus();\n      },\n      blur: () => {\n        const activeElement = document.activeElement as HTMLElement;\n        checkboxRef.current === activeElement && activeElement.blur();\n      }\n    }));\n\n    // TODO fix issue with tooltip and link in label\n    // \n\n    return (\n      <CheckboxRadioContext.Provider value={{ isFocusRingShown: !isDisabled }}>\n        <CheckboxControl\n          {...(hasBottomUserAssistance\n            ? {\n                onChange: onChangeHandler,\n                onKeyUp: onChangeHandler\n              }\n            : {})}\n          aria-describedby={ariaDescribedBy}\n          assistiveText={assistiveText}\n          columnSpan={columnSpan}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          isChecked={propValue}\n          isDisabled={isDisabled}\n          isReadonly={isReadonly}\n          isRequired={isRequired}\n          ref={checkboxRef}>\n          {children}\n        </CheckboxControl>\n        {hasBottomUserAssistance ? (\n          <InlineUserAssistance\n            id={bottomUaId}\n            isRequiredShown={!!isRequired && !propValue}\n            requiredAlignment=\"start\"\n            messages={messages}\n            userAssistanceDensity={userAssistanceDensity === 'reflow' ? 'reflow' : 'efficient'}\n            testId={UAtestId}\n          />\n        ) : userAssistanceDensity === 'reflow' ? undefined : (\n          /* save space for user assistance if density is 'efficient' or 'compact', even though we don't\n             render user assistance for disabled or readonly fields */\n          <InlineUserAssistance userAssistanceDensity=\"efficient\" testId={UAtestId} />\n        )}\n      </CheckboxRadioContext.Provider>\n    );\n  }\n);\n"],"names":["_jsxs","_jsx"],"mappings":"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"}
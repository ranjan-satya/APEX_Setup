{"version":3,"file":"IconToggleButton-f57e5484.js","sources":["../../src/UNSAFE_IconToggleButton/IconToggleButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChild, Fragment } from 'preact';\nimport { forwardRef, ForwardedRef } from 'preact/compat';\nimport { useRef, useImperativeHandle } from 'preact/hooks';\n\nimport { BaseButton } from '#UNSAFE_BaseButton';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { useToggleAction, ToggleDetail } from '#hooks/UNSAFE_useToggleAction';\nimport { useTooltip } from '#hooks/UNSAFE_useTooltip';\nimport { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { toggleStyling, processGlobals } from '#utils/UNSAFE_buttonUtils';\nimport { ToggleButtonLabel } from '#UNSAFE_ToggleButtonLabel';\nimport type { ButtonIntrinsicProps } from '#utils/UNSAFE_buttonUtils';\n\ntype WidthProps = Pick<DimensionProps, 'width'>;\n\nexport type IconToggleButtonProps = ButtonIntrinsicProps &\n  WidthProps &\n  TestIdProps & {\n    /**\n     * Specifies the icon for the button.   This should not vary depending on state.\n     */\n    children?: ComponentChild;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * The ID of an element (or space separated IDs of multiple elements) that\n     * describes the button.\n     */\n    'aria-describedby'?: string;\n\n    /**\n     * Specifies if the toggle button is selected\n     */\n    isSelected?: boolean;\n\n    /**\n     * Property that triggers a callback immediately when toggle happens and value of isSelected property should be updated\n     */\n    onToggle?: (details: ToggleDetail) => void;\n\n    /**\n     * Indicates in what states the button has chrome (background and border).\n     *     \"borderless\"': \"Borderless buttons are a more prominent variation. Borderless\n     * buttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     */\n    variant?: 'borderless' | 'outlined';\n\n    /**\n     * The size indicates how large the button is rendered: \"sm\", \"md\" (default), \"lg\".\n     */\n    size?: 'sm' | 'md' | 'lg';\n  };\n\n/**\n * Note that either an accessibleLabel or tooltip must be specified.\n */\ntype VariationAccessibleLabelProps =\n  | {\n      /**\n       * accessibleLabel - the aria label\n       */\n      accessibleLabel: string;\n\n      /**\n       * tooltip - overrides the accessibleLabel for the tooltip\n       */\n      tooltip?: string;\n    }\n  | {\n      accessibleLabel?: string;\n\n      tooltip: string;\n    };\n\n/**\n * IconToggleButtons direct users to toggle a state with\n * a single tap, click, or keystroke.\n */\nexport const IconToggleButton = forwardRef(\n  (\n    {\n      children,\n      variant = 'outlined',\n      size = 'md',\n      isDisabled = false,\n      tooltip,\n      accessibleLabel,\n      isSelected = false,\n      onToggle,\n      testId,\n      'aria-describedby': ariaDescribedBy,\n      width,\n      ...props\n    }: IconToggleButtonProps & VariationAccessibleLabelProps & TestIdProps,\n    ref?: ForwardedRef<HTMLButtonElement>\n  ) => {\n    const { globalEventProps } = processGlobals(props);\n\n    const buttonRef = useRef<HTMLButtonElement>(null);\n    useImperativeHandle(ref!, () => buttonRef.current!, [buttonRef]);\n\n    const { triggerProps } = useToggleAction({\n      isDisabled: isDisabled,\n      onToggle: onToggle\n    });\n\n    const { tooltipContent, tooltipProps } = useTooltip({\n      text: tooltip ?? accessibleLabel,\n      isDisabled: isDisabled\n    });\n\n    const styling = toggleStyling(\n      'auto',\n      isSelected,\n      false,\n      false,\n      variant === 'outlined',\n      undefined,\n      undefined,\n      true\n    );\n\n    const ariaProps = { 'aria-describedby': ariaDescribedBy };\n\n    return (\n      <Fragment>\n        <BaseButton\n          {...mergeProps(tooltipProps, triggerProps, globalEventProps, ariaProps)}\n          variant={variant}\n          isDisabled={isDisabled}\n          size={size}\n          width={width}\n          aria-pressed={isSelected}\n          styling={styling}\n          ref={buttonRef}\n          aria-label={accessibleLabel ?? tooltip}\n          testId={testId}>\n          <ToggleButtonLabel\n            onAction={() => onToggle?.({ value: isSelected })}\n            isDisabled={isDisabled}\n            display={'icons'}\n            startIcon={children}></ToggleButtonLabel>\n        </BaseButton>\n        {tooltipContent}\n      </Fragment>\n    );\n  }\n);\n\nIconToggleButton.displayName = 'IconToggleButton';\n"],"names":["_jsxs","_jsx"],"mappings":";;;;;;;;;;;;;;AAwFA;;;AAGG;MACU,gBAAgB,GAAG,UAAU,CACxC,CACE,EACE,QAAQ,EACR,OAAO,GAAG,UAAU,EACpB,IAAI,GAAG,IAAI,EACX,UAAU,GAAG,KAAK,EAClB,OAAO,EACP,eAAe,EACf,UAAU,GAAG,KAAK,EAClB,QAAQ,EACR,MAAM,EACN,kBAAkB,EAAE,eAAe,EACnC,KAAK,EACL,GAAG,KAAK,EAC4D,EACtE,GAAqC,KACnC;IACF,MAAM,EAAE,gBAAgB,EAAE,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;AAEnD,IAAA,MAAM,SAAS,GAAG,MAAM,CAAoB,IAAI,CAAC,CAAC;AAClD,IAAA,mBAAmB,CAAC,GAAI,EAAE,MAAM,SAAS,CAAC,OAAQ,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;AAEjE,IAAA,MAAM,EAAE,YAAY,EAAE,GAAG,eAAe,CAAC;AACvC,QAAA,UAAU,EAAE,UAAU;AACtB,QAAA,QAAQ,EAAE,QAAQ;AACnB,KAAA,CAAC,CAAC;AAEH,IAAA,MAAM,EAAE,cAAc,EAAE,YAAY,EAAE,GAAG,UAAU,CAAC;QAClD,IAAI,EAAE,OAAO,IAAI,eAAe;AAChC,QAAA,UAAU,EAAE,UAAU;AACvB,KAAA,CAAC,CAAC;IAEH,MAAM,OAAO,GAAG,aAAa,CAC3B,MAAM,EACN,UAAU,EACV,KAAK,EACL,KAAK,EACL,OAAO,KAAK,UAAU,EACtB,SAAS,EACT,SAAS,EACT,IAAI,CACL,CAAC;AAEF,IAAA,MAAM,SAAS,GAAG,EAAE,kBAAkB,EAAE,eAAe,EAAE,CAAC;AAE1D,IAAA,QACEA,IAAC,CAAA,QAAQ,eACPC,GAAC,CAAA,UAAU,OACL,UAAU,CAAC,YAAY,EAAE,YAAY,EAAE,gBAAgB,EAAE,SAAS,CAAC,EACvE,OAAO,EAAE,OAAO,EAChB,UAAU,EAAE,UAAU,EACtB,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,KAAK,EAAA,cAAA,EACE,UAAU,EACxB,OAAO,EAAE,OAAO,EAChB,GAAG,EAAE,SAAS,EACF,YAAA,EAAA,eAAe,IAAI,OAAO,EACtC,MAAM,EAAE,MAAM,YACdA,GAAC,CAAA,iBAAiB,IAChB,QAAQ,EAAE,MAAM,QAAQ,GAAG,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,EACjD,UAAU,EAAE,UAAU,EACtB,OAAO,EAAE,OAAO,EAChB,SAAS,EAAE,QAAQ,EAAsB,CAAA,EAAA,CAChC,EACZ,cAAc,CAAA,EAAA,CACN,EACX;AACJ,CAAC,EACD;AAEF,gBAAgB,CAAC,WAAW,GAAG,kBAAkB;;;;"}
{"version":3,"file":"useTabbableModeSet-37cd3452.js","sources":["../../src/hooks/PRIVATE_useTabbableModeSet/useTabbableModeSet.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback, useState, Ref } from 'preact/hooks';\nimport { isKeyDefined } from '../../utils/UNSAFE_keys';\nimport { getElementContainsFunc } from '../../utils/PRIVATE_collectionUtils';\n\n/**\n * Hook for handling Tabbable mode set provider components.\n *\n * @param rootRef - a Ref to the root element of the consuming component\n * @param keyExtractor - function to extract the key based on provided element\n * @param currentKey - current key navigation \"cursor\" is on\n * @param onCurrentKeyChange - optional callback to notify when the currentKey should change\n * @param keySupportsTabbable - optional callback to prevent tabbable mode from being entered on non-tabbable keys\n * @param keyComparator - optional callback to compare the equality of two keys\n * @returns isCurrentTabbableKey - callback for parent to check if key is in interactive mode\n * @returns tabbableSetProps - event handlers mode relies on\n * @returns getCurrentTabbableKey - callback to get the current tabbable key\n * @returns setCurrentTabbableKey - callback to set the current tabbable key\n */\nexport function useTabbableModeSet<K>(\n  rootRef: Ref<HTMLElement>,\n  keyExtractor: (element: HTMLElement) => K | null,\n  currentKey?: K,\n  onCurrentKeyChange?: ({ value }: { value: K }) => void,\n  keySupportsTabbable?: (key: K) => boolean,\n  keyComparator?: (key1?: K, key2?: K) => boolean\n): [\n  (key?: K) => boolean,\n  {\n    onFocus: (event: FocusEvent) => void;\n    onBlur: (event: FocusEvent) => void;\n    onKeyDown: (event: KeyboardEvent) => void;\n  },\n  () => K | undefined,\n  (key?: K) => void\n] {\n  // Track which row is in actionable in state\n  const [currentTabbableKey, setCurrentTabbableKey] = useState<K>();\n\n  const keyEquals = useCallback(\n    (key1?: K, key2?: K) => {\n      if (keyComparator) {\n        return keyComparator(key1, key2);\n      }\n      return key1 === key2;\n    },\n    [keyComparator]\n  );\n\n  const disableTabbableMode = useCallback(\n    (target: EventTarget | null, isKeyboardEvent = false) => {\n      setCurrentTabbableKey(undefined);\n      // handle clean-up on disabling of the mode\n      if (getElementContainsFunc(rootRef.current, true)(target as Element) && isKeyboardEvent) {\n        rootRef.current?.focus();\n      }\n    },\n    [rootRef, setCurrentTabbableKey]\n  );\n  const enableTabbableMode = useCallback(\n    (key: K) => {\n      setCurrentTabbableKey(key);\n      if (onCurrentKeyChange && !keyEquals(key, currentKey)) {\n        onCurrentKeyChange({ value: key });\n      }\n    },\n    [currentKey, keyEquals, onCurrentKeyChange, setCurrentTabbableKey]\n  );\n  const isCurrentTabbableKey = useCallback(\n    (key?: K) => {\n      return keyEquals(key as K, currentTabbableKey as K);\n    },\n    [currentTabbableKey, keyEquals]\n  );\n  const getCurrentTabbableKey = useCallback(() => {\n    return currentTabbableKey;\n  }, [currentTabbableKey]);\n\n  const onFocus = (event: FocusEvent) => {\n    // if the root is focused while tabbable, exit tabbable mode\n    if (event.target === rootRef.current) {\n      if (!isCurrentTabbableKey(undefined)) {\n        disableTabbableMode(event.target);\n      }\n    } else {\n      const key = keyExtractor(event.target as HTMLElement) as K;\n      if (isKeyDefined(key) && !isCurrentTabbableKey(key)) {\n        enableTabbableMode(key);\n      }\n    }\n  };\n\n  const onBlur = (event: FocusEvent) => {\n    if (\n      !event.relatedTarget ||\n      !getElementContainsFunc(rootRef.current, true)(event.relatedTarget as Element)\n    ) {\n      disableTabbableMode(event.relatedTarget);\n    }\n  };\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (currentKey != null && (keySupportsTabbable == null || keySupportsTabbable(currentKey))) {\n        if (event.key === 'F2') {\n          isCurrentTabbableKey(currentKey)\n            ? disableTabbableMode(event.target, true)\n            : enableTabbableMode(currentKey);\n        } else if (event.key === 'Esc' || event.key === 'Escape') {\n          disableTabbableMode(event.target, true);\n        }\n      }\n    },\n    [currentKey, disableTabbableMode, enableTabbableMode, keySupportsTabbable, isCurrentTabbableKey]\n  );\n\n  const tabbableSetProps = {\n    onFocus,\n    onBlur,\n    onKeyDown\n  };\n\n  return [isCurrentTabbableKey, tabbableSetProps, getCurrentTabbableKey, setCurrentTabbableKey];\n}\n"],"names":[],"mappings":"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"}
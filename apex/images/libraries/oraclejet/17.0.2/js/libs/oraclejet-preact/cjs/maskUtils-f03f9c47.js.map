{"version":3,"file":"maskUtils-f03f9c47.js","sources":["../../src/utils/PRIVATE_dayUtils/maskUtils.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { BCP47Locale, CalendarUtils } from '../../UNSAFE_IntlDateTime';\nimport type { CalendarWidthNames } from '../../UNSAFE_IntlDateTime';\nimport type { CalendarDate, DatePlaceholders, IsoMonth } from '../../UNSAFE_InputDateMask';\nimport { checkIsValidIsoYear, checkNoCalendarExtension } from '#utils/UNSAFE_calendarDateUtils';\n\nconst NUMBERS_ONLY_REGEXP = /\\d/;\n\n/**\n * Replace placeholders in the masks array with their translated equivalents.\n */\nconst translateCustomMasks = (\n  masks: DatePlaceholders,\n  monthPlaceholder: string,\n  dayPlaceholder: string,\n  yearPlaceholder: string\n): DatePlaceholders => {\n  return masks.map((p: Intl.DateTimeFormatPart) => {\n    switch (p.type) {\n      case 'month':\n        return { ...p, value: monthPlaceholder };\n      case 'day':\n        return { ...p, value: dayPlaceholder };\n      case 'year':\n        return { ...p, value: yearPlaceholder };\n      default:\n        return { ...p, value: p.value.trim() };\n    }\n  }) as DatePlaceholders;\n};\n\n/**\n * Return month names for the Gregorian calendar.\n */\nconst getMonthNamesGregorian = (\n  locale: BCP47Locale,\n  style: NonNullable<Intl.DateTimeFormatOptions['weekday']>\n) => {\n  const cal = CalendarUtils.getCalendar(locale, 'gregory');\n  const _monthNamesFormatMap = {\n    short: 'abbreviated',\n    narrow: 'narrow',\n    long: 'wide'\n  } as const;\n  const calType: NonNullable<CalendarWidthNames> = _monthNamesFormatMap[style];\n  const months = cal.months['stand-alone'][calType];\n  return months;\n};\n\nconst cachedMonthNames = new Map<string, object>();\n\n/**\n * Return month name for the given locale, month, year, and style (long | short | narrow).\n * If year is unknown, pass '*'. We'll have to figure out how to handle this when we add support\n * for multiple calendars, where the number of months in a year can vary. The year is unused for\n * Gregorian calendars because the number of months is always 12.\n */\nconst getMonthName = (\n  locale: BCP47Locale,\n  month: IsoMonth,\n  year: number | '*',\n  style: NonNullable<Intl.DateTimeFormatOptions['weekday']>\n) => {\n  if (year !== '*') {\n    checkIsValidIsoYear(year);\n  }\n  checkNoCalendarExtension(locale);\n\n  let monthNames = cachedMonthNames.get(`${locale}-${style}`);\n  if (!monthNames) {\n    monthNames = getMonthNamesGregorian(locale, style);\n    cachedMonthNames.set(`${locale}-${style}`, monthNames);\n  }\n  const monthIndex = '' + month;\n  return (monthNames as any)[monthIndex];\n};\n\n/**\n * Return year, month, and day for Today.\n */\nconst getTodayAsCalendarDate = () => {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  return { year, month, day };\n};\n\n/**\n * Return true if the specified string contains numbers only.\n */\nconst isNumberOnlyString = (s: string) => {\n  return NUMBERS_ONLY_REGEXP.test(s);\n};\n\n/**\n * Return true if the date params represent 2 different calendar dates.\n */\nconst calendarDatesAreDifferent = (d1: CalendarDate | undefined, d2: CalendarDate | undefined) => {\n  const d1_empty = !d1 || (!d1.day && !d1.month && !d1.year);\n  const d2_empty = !d2 || (!d2.day && !d2.month && !d2.year);\n\n  // If both dates are empty, return false.\n  if (d1_empty && d2_empty) {\n    return false;\n  }\n\n  // If one is empty and the other isn't, return true.\n  if ((d1_empty && !d2_empty) || (!d1_empty && d2_empty)) {\n    return true;\n  }\n\n  // Return true if any of the segment values don't match.\n  const d1_day = d1?.day;\n  const d1_month = d1?.month;\n  const d1_year = d1?.year;\n  const d2_day = d2?.day;\n  const d2_month = d2?.month;\n  const d2_year = d2?.year;\n  if (d1_day !== d2_day || d1_month !== d2_month || d1_year !== d2_year) {\n    return true;\n  }\n\n  return false;\n};\n\nexport {\n  calendarDatesAreDifferent,\n  getMonthName,\n  getTodayAsCalendarDate,\n  isNumberOnlyString,\n  translateCustomMasks\n};\n"],"names":["CalendarUtils","checkIsValidIsoYear","checkNoCalendarExtension"],"mappings":";;;;;;;AAAA;;;;;;AAMG;AAOH,MAAM,mBAAmB,GAAG,IAAI,CAAC;AAEjC;;AAEG;AACG,MAAA,oBAAoB,GAAG,CAC3B,KAAuB,EACvB,gBAAwB,EACxB,cAAsB,EACtB,eAAuB,KACH;AACpB,IAAA,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,CAA0B,KAAI;AAC9C,QAAA,QAAQ,CAAC,CAAC,IAAI;AACZ,YAAA,KAAK,OAAO;gBACV,OAAO,EAAE,GAAG,CAAC,EAAE,KAAK,EAAE,gBAAgB,EAAE,CAAC;AAC3C,YAAA,KAAK,KAAK;gBACR,OAAO,EAAE,GAAG,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC;AACzC,YAAA,KAAK,MAAM;gBACT,OAAO,EAAE,GAAG,CAAC,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC;AAC1C,YAAA;AACE,gBAAA,OAAO,EAAE,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC;SAC1C;AACH,KAAC,CAAqB,CAAC;AACzB,EAAE;AAEF;;AAEG;AACH,MAAM,sBAAsB,GAAG,CAC7B,MAAmB,EACnB,KAAyD,KACvD;IACF,MAAM,GAAG,GAAGA,4BAAa,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AACzD,IAAA,MAAM,oBAAoB,GAAG;AAC3B,QAAA,KAAK,EAAE,aAAa;AACpB,QAAA,MAAM,EAAE,QAAQ;AAChB,QAAA,IAAI,EAAE,MAAM;KACJ,CAAC;AACX,IAAA,MAAM,OAAO,GAAoC,oBAAoB,CAAC,KAAK,CAAC,CAAC;IAC7E,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC;AAClD,IAAA,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,gBAAgB,GAAG,IAAI,GAAG,EAAkB,CAAC;AAEnD;;;;;AAKG;AACG,MAAA,YAAY,GAAG,CACnB,MAAmB,EACnB,KAAe,EACf,IAAkB,EAClB,KAAyD,KACvD;AACF,IAAA,IAAI,IAAI,KAAK,GAAG,EAAE;QAChBC,qCAAmB,CAAC,IAAI,CAAC,CAAC;KAC3B;IACDC,0CAAwB,CAAC,MAAM,CAAC,CAAC;AAEjC,IAAA,IAAI,UAAU,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAG,EAAA,MAAM,CAAI,CAAA,EAAA,KAAK,CAAE,CAAA,CAAC,CAAC;IAC5D,IAAI,CAAC,UAAU,EAAE;AACf,QAAA,UAAU,GAAG,sBAAsB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACnD,gBAAgB,CAAC,GAAG,CAAC,CAAG,EAAA,MAAM,CAAI,CAAA,EAAA,KAAK,CAAE,CAAA,EAAE,UAAU,CAAC,CAAC;KACxD;AACD,IAAA,MAAM,UAAU,GAAG,EAAE,GAAG,KAAK,CAAC;AAC9B,IAAA,OAAQ,UAAkB,CAAC,UAAU,CAAC,CAAC;AACzC,EAAE;AAEF;;AAEG;AACG,MAAA,sBAAsB,GAAG,MAAK;AAClC,IAAA,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;AACxB,IAAA,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAChC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;AAClC,IAAA,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;AAC3B,IAAA,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;AAC9B,EAAE;AAEF;;AAEG;AACH,MAAM,kBAAkB,GAAG,CAAC,CAAS,KAAI;AACvC,IAAA,OAAO,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACrC,EAAE;AAEF;;AAEG;AACH,MAAM,yBAAyB,GAAG,CAAC,EAA4B,EAAE,EAA4B,KAAI;IAC/F,MAAM,QAAQ,GAAG,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAC3D,MAAM,QAAQ,GAAG,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;;AAG3D,IAAA,IAAI,QAAQ,IAAI,QAAQ,EAAE;AACxB,QAAA,OAAO,KAAK,CAAC;KACd;;AAGD,IAAA,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,MAAM,CAAC,QAAQ,IAAI,QAAQ,CAAC,EAAE;AACtD,QAAA,OAAO,IAAI,CAAC;KACb;;AAGD,IAAA,MAAM,MAAM,GAAG,EAAE,EAAE,GAAG,CAAC;AACvB,IAAA,MAAM,QAAQ,GAAG,EAAE,EAAE,KAAK,CAAC;AAC3B,IAAA,MAAM,OAAO,GAAG,EAAE,EAAE,IAAI,CAAC;AACzB,IAAA,MAAM,MAAM,GAAG,EAAE,EAAE,GAAG,CAAC;AACvB,IAAA,MAAM,QAAQ,GAAG,EAAE,EAAE,KAAK,CAAC;AAC3B,IAAA,MAAM,OAAO,GAAG,EAAE,EAAE,IAAI,CAAC;AACzB,IAAA,IAAI,MAAM,KAAK,MAAM,IAAI,QAAQ,KAAK,QAAQ,IAAI,OAAO,KAAK,OAAO,EAAE;AACrE,QAAA,OAAO,IAAI,CAAC;KACb;AAED,IAAA,OAAO,KAAK,CAAC;AACf;;;;;;;;"}
{"version":3,"file":"InputDateMask-7386adfe.js","sources":["../../src/UNSAFE_InputDateMask/DateSegment.tsx","../../src/UNSAFE_InputDateMask/LiteralSegment.tsx","../../src/UNSAFE_InputDateMask/dateReducer.ts","../../src/UNSAFE_InputDateMask/useDateField.ts","../../src/UNSAFE_InputDateMask/useDateFieldHandlers.ts","../../src/UNSAFE_InputDateMask/DateField.tsx","../../src/UNSAFE_InputDateMask/InputDateMaskContext.ts","../../src/UNSAFE_InputDateMask/InputDateMask.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Ref, useCallback, useEffect, useRef } from 'preact/hooks';\nimport { AriaAttributesSignalExcluded } from '#utils/UNSAFE_attributeUtils';\nimport { BundleType } from '#resources/nls/bundle';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { DateFieldAction } from './dateReducer';\nimport { getClientHints } from '#utils/PRIVATE_clientHints';\nimport { EditableDateSegment } from './types';\nimport { isBackspaceOrDelete, isSelectAll } from '#utils/PRIVATE_keyboardUtils';\nimport { isNumberOnlyString } from '#utils/PRIVATE_dayUtils';\nimport { segmentStyles } from './themes/SegmentStyles.css';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { useUser } from '#hooks/UNSAFE_useUser';\n\ntype AriaProps = Pick<\n  AriaAttributesSignalExcluded,\n  'aria-label' | 'aria-valuemax' | 'aria-valuemin' | 'aria-valuenow' | 'aria-valuetext'\n>;\n\ntype Props = AriaProps & {\n  /** A ref that is provided for the first segment in a date field. */\n  inputRef?: Ref<HTMLDivElement>;\n\n  /**\n   * True if the segment is complete in the sense that it contains a complete valid value.\n   * For instance, entering '0' and then '1-9' is considered a complete value for month and day.\n   * Also true if typing any additional digit would cause the segment value to exceed the max.\n   */\n  isComplete?: boolean;\n\n  /**\n   * True if the segment is disabled.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * True if the segment should be hidden.\n   */\n  isHidden?: boolean;\n\n  /**\n   * True if the segment is highlighted.\n   */\n  isHighlighted?: boolean;\n\n  /**\n   * True if the segment is invalid.\n   */\n  isInvalid?: boolean;\n\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   */\n  isRequired?: boolean;\n\n  /**\n   * True if the segment is selected.\n   */\n  isSelected?: boolean;\n\n  /**\n   * Placeholder displayed when the segment has no display value.\n   */\n  placeholder?: string;\n\n  /**\n   * The text to display for this segment.\n   */\n  text?: string;\n\n  /**\n   * The segment of a calendar date which is being represented, i.e. the month, day, or year.\n   */\n  type: EditableDateSegment;\n\n  /**\n   * Callback invoked when a change to the segment is requested via user action, such as typing\n   * a new value or pressing the Backspace or Delete keys.\n   */\n  onChange?: (action: DateFieldAction) => void;\n};\n\n// Used to disable browser cut and paste, which don't really work with segments (copy is fine).\nconst preventDefaultHandler = (e: Event) => {\n  e.preventDefault();\n};\n\nconst isIos = () => getClientHints().platform === 'ios';\n\n/**\n * A DateSegment renders a part of a calendar date, e.g. the day, month, or year.\n * It can be used as a spinbutton to step or spin its value.\n */\nexport const DateSegment = ({\n  'aria-label': ariaLabel,\n  'aria-valuemax': ariaValueMax,\n  'aria-valuemin': ariaValueMin,\n  'aria-valuenow': ariaValueNow,\n  'aria-valuetext': ariaValueText,\n  inputRef,\n  isComplete,\n  isDisabled,\n  isHidden,\n  isHighlighted,\n  isInvalid,\n  isRequired,\n  isSelected,\n  onChange,\n  placeholder,\n  text,\n  type\n}: Props) => {\n  const hasDisplayValue = text && text.length > 0;\n  const rootClasses = classNames([\n    segmentStyles.base,\n    isSelected && segmentStyles.selected,\n    isHighlighted && segmentStyles.highlighted\n  ]);\n  const placeholderClasses = classNames([\n    segmentStyles.placeholder,\n    isHidden || hasDisplayValue ? segmentStyles.hidden : segmentStyles.notHidden\n  ]);\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const emptySegmentValueText = translations.inputDateMask_empty_segment();\n\n  // If a ref was passed in, use it, otherwise get a ref.\n  const sRef = useRef<HTMLDivElement>(null);\n  const segmentRef = inputRef ?? sRef;\n\n  const hasLeadingZero = useRef<boolean>(false);\n  const { locale } = useUser();\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (\n        isDisabled ||\n        event.key === 'Tab' ||\n        event.key === 'ArrowLeft' ||\n        event.key === 'ArrowRight' ||\n        event.key === 'Enter' ||\n        isSelectAll(event)\n      ) {\n        // Let the event pass through.\n        return;\n      }\n\n      if (isHighlighted) {\n        // If date is selected, ignore edits and let backspace/delete pass through to clear.\n        if (isBackspaceOrDelete(event) || event.key === 'Backspace') {\n          return;\n        }\n      } else if (event.key === '0' && (isComplete || text === undefined)) {\n        // Typing '0' is considered a leading zero if the segment is complete, in which case\n        // the user is typing a new value, or if there is no current value.\n        hasLeadingZero.current = true;\n      } else if (isNumberOnlyString(event.key)) {\n        onChange?.({\n          actionType: 'updateSegment',\n          data: { type, text: event.key, hasLeadingZero: hasLeadingZero.current, locale }\n        });\n        hasLeadingZero.current = false;\n      } else if (isBackspaceOrDelete(event) || event.key === 'Backspace') {\n        // Android sends Backspace as event.key, not event.code, so check for it.\n        onChange?.({ actionType: 'clearSegment', data: { type } });\n        hasLeadingZero.current = false;\n      } else if (event.key === 'ArrowUp') {\n        onChange?.({ actionType: 'step', data: { direction: 'increase', locale, type } });\n        hasLeadingZero.current = false;\n      } else if (event.key === 'ArrowDown') {\n        onChange?.({ actionType: 'step', data: { direction: 'decrease', locale, type } });\n        hasLeadingZero.current = false;\n      } else if (event.key === 'PageUp') {\n        onChange?.({ actionType: 'page', data: { direction: 'increase', locale, type } });\n        hasLeadingZero.current = false;\n      } else if (event.key === 'PageDown') {\n        onChange?.({ actionType: 'page', data: { direction: 'decrease', locale, type } });\n        hasLeadingZero.current = false;\n      } else if (event.key === 'Home') {\n        onChange?.({ actionType: 'goToHome', data: { locale, type } });\n        hasLeadingZero.current = false;\n      } else if (event.key === 'End') {\n        onChange?.({ actionType: 'goToEnd', data: { locale, type } });\n        hasLeadingZero.current = false;\n      }\n      event.preventDefault();\n      event.stopPropagation();\n    },\n    [isComplete, isDisabled, isHighlighted, locale, onChange, text, type]\n  );\n\n  // Used to focus the segment when isSelected is true.\n  useEffect(() => {\n    if (isSelected) {\n      segmentRef.current?.focus();\n    }\n  }, [isSelected, segmentRef]);\n\n  // This attribute is used to distinguish between segments when clicked (see DateField.tsx).\n  const customDataAttribute = { 'data-segment': [type] };\n\n  // If ariaValueText is undefined, substitute a string that indicates the segment is empty.\n  // If ariaValueNow and ariaValueText represent the same value, omit the value text; this\n  // is the same as what we do in NumberInputText.\n  const valueText =\n    ariaValueText === undefined\n      ? emptySegmentValueText\n      : ariaValueNow?.toString() === ariaValueText\n      ? undefined\n      : ariaValueText;\n\n  return (\n    // Introduce a div wrapper around the contentEditable element to prevent it from grabbing focus.\n    // https://stackoverflow.com/questions/34354085/clicking-outside-a-contenteditable-div-stills-give-focus-to-it\n    // JET-64874: We change the segment's role to \"textbox\" on iOS to work around a VoiceOver bug.\n    <div>\n      <div\n        ref={segmentRef}\n        role={isIos() ? 'textbox' : 'spinbutton'}\n        aria-disabled={isDisabled}\n        aria-invalid={isInvalid || undefined}\n        aria-label={ariaLabel}\n        aria-required={isRequired}\n        aria-valuemin={isIos() ? undefined : ariaValueMin}\n        aria-valuemax={isIos() ? undefined : ariaValueMax}\n        aria-valuenow={isIos() ? undefined : ariaValueNow}\n        aria-valuetext={isIos() ? undefined : valueText}\n        autocapitalize=\"off\"\n        autocorrect=\"off\"\n        class={rootClasses}\n        contentEditable={!isDisabled}\n        {...customDataAttribute}\n        enterkeyhint={isDisabled ? undefined : 'done'}\n        inputMode={isDisabled ? 'none' : 'numeric'}\n        onCut={preventDefaultHandler}\n        onKeyDown={onKeyDown}\n        onPaste={preventDefaultHandler}\n        spellcheck={false}\n        tabIndex={isSelected ? 0 : -1}>\n        <span aria-hidden=\"true\" class={placeholderClasses} {...customDataAttribute}>\n          {placeholder}\n        </span>\n        {text}\n      </div>\n    </div>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { segmentStyles } from './themes/SegmentStyles.css';\n\ntype Props = {\n  /**\n   * True if the segment should be hidden.\n   */\n  isHidden?: boolean;\n\n  /**\n   * True if the segment should be highlighted.\n   */\n  isHighlighted?: boolean;\n\n  /**\n   * True if the literal is part of a date placeholder, such as mm/dd/yyyy.\n   * If the date is partially specified or complete, this is false.\n   */\n  isPlaceholder?: boolean;\n\n  /**\n   * The text to display for this segment.\n   */\n  text: string;\n};\n\n/**\n * LiteralSegment is used to represent a literal separator in a calendar date,\n * such as the '/' in 11/29/2023.\n */\nexport const LiteralSegment = ({ isHidden, isHighlighted, isPlaceholder, text }: Props) => {\n  const spanClasses = classNames([\n    segmentStyles.literalBase,\n    isPlaceholder && segmentStyles.placeholder,\n    isHighlighted && segmentStyles.highlighted,\n    isHidden ? segmentStyles.hidden : segmentStyles.notHidden\n  ]);\n\n  return (\n    <span aria-hidden=\"true\" class={spanClasses}>\n      {text}\n    </span>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { DateFieldState, DateSegmentState } from './useDateField';\nimport { BCP47Locale } from '#UNSAFE_IntlDateTime';\nimport { CalendarDate, EditableDateSegment, IsoMonth } from './types';\nimport { getMonthName, getTodayAsCalendarDate } from '#utils/PRIVATE_dayUtils';\nimport { getDaysInMonth, getMonthsInYear, MAX_ISO_YEAR } from '#utils/UNSAFE_calendarDateUtils';\n\ntype DateFieldActionData = Partial<DateSegmentState> & {\n  direction?: 'increase' | 'decrease';\n  hasLeadingZero?: boolean;\n  locale?: BCP47Locale;\n};\n\ntype DateFieldAction = {\n  actionType:\n    | 'clearDate'\n    | 'clearSegment'\n    | 'commit'\n    | 'goToEnd'\n    | 'goToHome'\n    | 'page'\n    | 'selectDateOrSegment'\n    | 'selectFirst'\n    | 'selectNext'\n    | 'selectPrevious'\n    | 'selectSegment'\n    | 'step'\n    | 'updateSegment';\n  data?: DateFieldActionData;\n};\n\ntype ResetAction = {\n  actionType: 'reset';\n  data: DateFieldState;\n};\n\ntype DateReducerAction = DateFieldAction | ResetAction;\n\n/**\n * Reducer function for updating DateFieldState per the specified DateFieldAction.\n * @param state\n * @param action\n */\nconst dateReducer = (state: DateFieldState, action: DateReducerAction) => {\n  // On mount, the reducer is initialized with initial state derived from the DateField's value.\n  // If that value is changed programmatically afterwards, the only way to push that update\n  // into the reducer is to define a \"reset\" action.\n  if (action.actionType === 'reset') {\n    return action.data;\n  }\n\n  const segmentType = action.data?.type!;\n  const segmentState = findSegment(state.segments, segmentType);\n\n  switch (action.actionType) {\n    case 'clearDate': {\n      const updatedSegments = selectFirst(clearDate(state.segments), state.orderedSegments);\n      return createDateFieldStateWithSelectedDate(state, updatedSegments, false);\n    }\n    case 'clearSegment': {\n      const updatedSegment = clearSegment(segmentState);\n      return createDateFieldState(state, segmentType, updatedSegment);\n    }\n    case 'commit': {\n      const updatedSegments = clearSelectionAndComplete(state.segments);\n      return createDateFieldStateWithSelectedDate(state, updatedSegments, false);\n    }\n    case 'goToEnd': {\n      const updatedSegment = goToEnd(\n        segmentType,\n        segmentState,\n        state.segments,\n        action.data?.locale!\n      );\n      return createDateFieldState(state, segmentType, updatedSegment, false);\n    }\n    case 'goToHome': {\n      const updatedSegment = goToHome(\n        segmentType,\n        segmentState,\n        state.segments,\n        action.data?.locale!\n      );\n      return createDateFieldState(state, segmentType, updatedSegment, false);\n    }\n    case 'page': {\n      const direction = action.data?.direction;\n      const locale = action.data?.locale!;\n      const updatedSegment = doStepOrPage(\n        segmentType,\n        segmentState,\n        state.segments,\n        'page',\n        direction,\n        locale\n      );\n      return createDateFieldState(state, segmentType, updatedSegment, false);\n    }\n    case 'selectDateOrSegment': {\n      return selectDateOrSegment(state);\n    }\n    case 'selectFirst': {\n      const updatedSegments = selectFirst(state.segments, state.orderedSegments);\n      return createDateFieldStateWithSelectedDate(state, updatedSegments, false);\n    }\n    case 'selectNext': {\n      const updatedSegments = selectNext(state.segments, state.orderedSegments);\n      return createDateFieldStateWithSelectedDate(state, updatedSegments, false);\n    }\n    case 'selectPrevious': {\n      const updatedSegments = selectPrevious(state.segments, state.orderedSegments);\n      return createDateFieldStateWithSelectedDate(state, updatedSegments, false);\n    }\n    case 'selectSegment': {\n      const updatedSegments = selectSegment(state.segments, segmentType);\n      return createDateFieldStateWithSelectedDate(state, updatedSegments, false);\n    }\n    case 'step': {\n      const direction = action.data?.direction;\n      const locale = action.data?.locale!;\n      const updatedSegment = doStepOrPage(\n        segmentType,\n        segmentState,\n        state.segments,\n        'step',\n        direction,\n        locale\n      );\n      return createDateFieldState(state, segmentType, updatedSegment, false);\n    }\n    case 'updateSegment': {\n      const updatedSegment = updateSegment(segmentType, segmentState, action, state.segments);\n      return createDateFieldState(state, segmentType, updatedSegment);\n    }\n    default: {\n      throw new Error('Unknown action type');\n    }\n  }\n};\n\nconst stringToNumber = (s: string) => +s;\nconst numberToString = (n: number) => n.toString();\nconst withinRange = (n: number, min: number, max: number) => n >= min && n <= max;\n\nconst findSegment = (segments: DateSegmentState[], type: EditableDateSegment): DateSegmentState => {\n  return segments.find((segment) => segment.type === type)!;\n};\n\n// A segment is considered complete if appending a zero to the current value causes it\n// to exceed the max. For instance, if you type 2-9 into month or 4-9 into day, the\n// segment is complete because you can't type any more digits and have it be a valid value.\nconst isSegmentComplete = (val: number, max: number) => {\n  const num = stringToNumber(numberToString(val) + '0');\n  return num > max;\n};\n\n// A date is considered complete if all of its segments have values.\nconst isDateComplete = (allSegments: DateSegmentState[]) => {\n  return allSegments.every((seg) => seg.text && seg.text.length > 0);\n};\n\n// A date is considered a partial date if at least one segment has a value.\nconst isPartialDate = (allSegments: DateSegmentState[]) => {\n  return allSegments.some((seg) => seg['aria-valuenow'] !== undefined);\n};\n\n// Construct a calendar date that reflects the values of each segment.\n// If none of the segments have a value, return undefined.\nconst createCalendarDateFromSegments = (segments: DateSegmentState[]) => {\n  const hasAnySegmentWithAValue = isPartialDate(segments);\n  if (!hasAnySegmentWithAValue) {\n    return undefined;\n  }\n\n  // This returns something that looks like [ {month: 12}, {day: 25}, {year: 2020} ].\n  // Note: we use the aria-valuenow to get the current value as a number (not string).\n  const segmentValues = segments.map((seg) => {\n    return { [seg.type]: seg['aria-valuenow'] };\n  });\n\n  // Iterate over segmentValues and spread each value to get {month: 12, day:25, year: 2020}.\n  const iterator = segmentValues.values();\n  let cd: CalendarDate = {};\n  for (const segValue of iterator) {\n    cd = { ...cd, ...segValue };\n  }\n  return cd;\n};\n\n// Find the current value for year.\nconst getYearValue = (segments: DateSegmentState[]) => {\n  const yearState = findSegment(segments, 'year');\n  return yearState['aria-valuenow'];\n};\n\n// Find the current value for month.\nconst getMonthValue = (segments: DateSegmentState[]) => {\n  const monthState = findSegment(segments, 'month');\n  return monthState['aria-valuenow'] as IsoMonth;\n};\n\n// Determine the aria-valuetext for the given month, which includes the month name.\nconst getMonthAria = (locale: BCP47Locale, month: IsoMonth, year: number | undefined) => {\n  const monthName = getMonthName(locale, month, year ?? '*', 'long');\n  return `${month} - ${monthName}`;\n};\n\n// Return a copy of the ordered segments array.\nconst getOrderedSegments = (currentState: DateFieldState) => {\n  return [...currentState.orderedSegments];\n};\n\n// Replace the updated segment and return a new DateSegmentState[].\nconst replaceDateSegment = (\n  existingSegments: DateSegmentState[],\n  updatedSegmentType: EditableDateSegment,\n  updatedSegment: DateSegmentState\n) => {\n  return existingSegments.map((seg) => (seg.type === updatedSegmentType ? updatedSegment : seg));\n};\n\n// Return a new DateSegmentState[] that reflects changes across all segments.\n// When you change the month this can affect the day, for instance.\nconst createDateSegmentStates = (\n  existingSegments: DateSegmentState[],\n  orderedSegments: EditableDateSegment[],\n  updatedSegmentType: EditableDateSegment,\n  updatedSegment: DateSegmentState,\n  autoAdvance: boolean\n) => {\n  const modifiedSegments = replaceDateSegment(existingSegments, updatedSegmentType, updatedSegment);\n  let updatedSegments = modifiedSegments;\n\n  if (updatedSegmentType === 'month' || updatedSegmentType === 'year') {\n    // If month was changed, update the day as needed; this includes adjusting the\n    // day value if it now exceeds the max number of days in the month.\n    // If year was changed, that can also affect the max number of days (if month is February).\n    const daySeg = findSegment(modifiedSegments, 'day');\n    if (daySeg) {\n      const monthValue =\n        updatedSegmentType == 'month'\n          ? (updatedSegment['aria-valuenow'] as IsoMonth)\n          : getMonthValue(modifiedSegments);\n      const yearValue =\n        updatedSegmentType === 'year'\n          ? updatedSegment['aria-valuenow']\n          : getYearValue(modifiedSegments);\n      const dayMax = getDaysInMonth(monthValue ?? '*', yearValue ?? '*');\n      const currentDay = daySeg['aria-valuenow'];\n      const dayValue = !!currentDay && currentDay > dayMax ? dayMax : currentDay;\n      const dayValueStr = !!dayValue ? numberToString(dayValue) : undefined;\n      const updatedDaySeg = {\n        ...daySeg,\n        'aria-valuemax': dayMax,\n        'aria-valuenow': dayValue,\n        'aria-valuetext': dayValueStr,\n        text: dayValueStr\n      };\n      updatedSegments = replaceDateSegment(modifiedSegments, 'day', updatedDaySeg);\n    }\n  }\n\n  // If the updatedSegment is complete, automatically select the next segment.\n  updatedSegments =\n    updatedSegment.isComplete && autoAdvance\n      ? selectNext(updatedSegments, orderedSegments)\n      : updatedSegments;\n\n  return updatedSegments;\n};\n\n// Construct a new DateFieldState from a set of updated segments.\nconst createDateFieldStateFromSegments = (\n  currentState: DateFieldState,\n  updatedSegments: DateSegmentState[]\n) => {\n  return {\n    currentDate: createCalendarDateFromSegments(updatedSegments),\n    isCompleteDate: isDateComplete(updatedSegments),\n    isDateSelected: currentState.isDateSelected,\n    isPartialDate: isPartialDate(updatedSegments),\n    orderedSegments: getOrderedSegments(currentState),\n    segments: updatedSegments\n  };\n};\n\n// Construct a new DateFieldState given an updated segment, which may affect other segments.\nconst createDateFieldState = (\n  currentState: DateFieldState,\n  updatedSegmentType: EditableDateSegment,\n  updatedSegment: DateSegmentState,\n  autoAdvance = true\n): DateFieldState => {\n  const updatedSegments = createDateSegmentStates(\n    currentState.segments,\n    currentState.orderedSegments,\n    updatedSegmentType,\n    updatedSegment,\n    autoAdvance\n  );\n\n  return createDateFieldStateFromSegments(currentState, updatedSegments);\n};\n\n// Return a new copy of the segment with the value cleared.\nconst clearSegment = (segmentState: DateSegmentState) => {\n  return {\n    ...segmentState,\n    'aria-valuetext': undefined,\n    'aria-valuenow': undefined,\n    text: undefined,\n    isComplete: false\n  };\n};\n\n// Return a new copy of segments with all values cleared and aria-valuemax adjusted.\nconst clearDate = (segments: DateSegmentState[]) => {\n  return segments.map((segmentState) => {\n    const cleared = clearSegment(segmentState);\n    const valueMax =\n      cleared.type === 'year'\n        ? MAX_ISO_YEAR\n        : cleared.type === 'month'\n        ? getMonthsInYear('*')\n        : getDaysInMonth('*', '*');\n    return { ...cleared, 'aria-valuemax': valueMax };\n  });\n};\n\n// Return a new copy of the segment with updated values.\nconst updateSegment = (\n  segmentType: EditableDateSegment,\n  segmentState: DateSegmentState,\n  action: DateFieldAction,\n  segments: DateSegmentState[]\n) => {\n  const actionText = action.data?.text!;\n  const hasLeadingZero = action.data?.hasLeadingZero;\n  const locale = action.data?.locale!;\n  const minValue = segmentState['aria-valuemin']!;\n  const maxValue = segmentState['aria-valuemax']!;\n  const wasComplete = segmentState.isComplete;\n\n  // If the segment was already complete, replace any existing text with actionText.\n  // Otherwise append actionText onto existing text to get the requested string.\n  // For instance if the existing text is '1' and actionText (i.e. that the user typed)\n  // is '2' then requestedValStr is '12'.\n  const requestedValStr = wasComplete ? actionText : segmentState.text + actionText;\n\n  // If the requested value is out of range, discard the existing text/value and only\n  // keep the new one. Check if the segment is complete.\n  const requestedVal = stringToNumber(requestedValStr);\n  const inRange = withinRange(requestedVal, minValue, maxValue);\n  const newValStr = inRange ? requestedValStr : actionText;\n  const newVal = inRange ? requestedVal : stringToNumber(actionText);\n  const isComplete =\n    isSegmentComplete(newVal, maxValue) || (!!hasLeadingZero && segmentType !== 'year');\n\n  // For month changes, aria-valuetext includes the month name.\n  const ariaValueText =\n    segmentType === 'month'\n      ? getMonthAria(locale, newVal as IsoMonth, getYearValue(segments))\n      : newValStr;\n\n  // Create a new segment state that reflects the updated value.\n  return {\n    ...segmentState,\n    'aria-valuetext': ariaValueText,\n    'aria-valuenow': newVal,\n    text: newValStr,\n    isComplete\n  };\n};\n\n// Return a new DateSegmentState[] where the specified segment is selected, all others cleared.\nconst selectSegment = (segments: DateSegmentState[], segmentType: EditableDateSegment) => {\n  return segments.map((seg) => {\n    return { ...seg, isSelected: seg.type === segmentType ? true : false };\n  });\n};\n\n// Return a new DateSegmentState[] where the first segment is selected.\nconst selectFirst = (segments: DateSegmentState[], orderedSegments: EditableDateSegment[]) => {\n  return selectSegment(segments, orderedSegments[0]);\n};\n\n// Find the index of the selected segment in the ordered list; return -1 if there is no selection.\nconst getSelectedSegmentIndex = (\n  segments: DateSegmentState[],\n  orderedSegments: EditableDateSegment[]\n) => {\n  const sel = segments.find((seg) => seg.isSelected === true);\n  return sel === undefined ? -1 : orderedSegments.findIndex((type) => type === sel.type);\n};\n\n// Convenience function to mark the selected segment complete.\nconst markSelectedSegmentComplete = (segments: DateSegmentState[]) => {\n  return segments.map((seg) => (seg.isSelected ? { ...seg, isComplete: true } : seg));\n};\n\n// Select the segment following the one that is currently selected.\nconst selectNext = (segments: DateSegmentState[], orderedSegments: EditableDateSegment[]) => {\n  const selectedIndex = getSelectedSegmentIndex(segments, orderedSegments);\n  const max = orderedSegments.length - 1;\n\n  // If we're already at the last position, do nothing. Note if nothing was currently selected\n  // then selectedIndex is -1. The first segment will be selected.\n  return selectedIndex === max\n    ? segments\n    : selectSegment(markSelectedSegmentComplete(segments), orderedSegments[selectedIndex + 1]);\n};\n\n// Select the segment prior to the one that is currently selected.\nconst selectPrevious = (segments: DateSegmentState[], orderedSegments: EditableDateSegment[]) => {\n  const selectedIndex = getSelectedSegmentIndex(segments, orderedSegments);\n  return selectedIndex === 0\n    ? segments\n    : selectedIndex === -1\n    ? selectFirst(segments, orderedSegments)\n    : selectSegment(markSelectedSegmentComplete(segments), orderedSegments[selectedIndex - 1]);\n};\n\n// Return a new DateSegmentState[] where all segments are unselected and any values are\n// marked complete. We want to do this when the user commits the DateField value (on blur).\nconst clearSelectionAndComplete = (segments: DateSegmentState[]) => {\n  return segments.map((seg) => {\n    return { ...seg, isSelected: false, isComplete: !!seg.text };\n  });\n};\n\n// Return a new DateSegmentState[] where all segments are unselected.\nconst clearSelection = (segments: DateSegmentState[]) => {\n  return segments.map((seg) => {\n    return { ...seg, isSelected: false };\n  });\n};\n\n// Return a new DateFieldState where the entire date is selected if the date is complete,\n// or the first segment is selected.\nconst selectDateOrSegment = (currentState: DateFieldState) => {\n  if (currentState.isCompleteDate) {\n    return createDateFieldStateWithSelectedDate(\n      currentState,\n      clearSelection(currentState.segments),\n      true\n    );\n  } else {\n    const updatedSegments = selectFirst(currentState.segments, currentState.orderedSegments);\n    return createDateFieldStateFromSegments(currentState, updatedSegments);\n  }\n};\n\n// Create a new DateFieldState from the updatedSegments and isDateSelected params.\nconst createDateFieldStateWithSelectedDate = (\n  currentState: DateFieldState,\n  updatedSegments: DateSegmentState[],\n  isDateSelected: boolean\n) => {\n  return {\n    currentDate: createCalendarDateFromSegments(updatedSegments),\n    isCompleteDate: isDateComplete(updatedSegments),\n    isDateSelected,\n    isPartialDate: isPartialDate(updatedSegments),\n    orderedSegments: getOrderedSegments(currentState),\n    segments: updatedSegments\n  };\n};\n\nconst YEAR_HOME_VALUE = 1900;\nconst YEAR_END_VALUE = 2100;\n\n// If a segment is empty, use today's date as a starting point for any step or page action.\nconst getDefaultSegmentValue = (segmentType: EditableDateSegment) => {\n  const { year: yearDefault, month: monthDefault, day: dayDefault } = getTodayAsCalendarDate();\n  const defaults = { year: yearDefault, month: monthDefault, day: dayDefault };\n  return defaults[segmentType];\n};\n\n// Get the minimum value for the segment.\nconst getHomeSegmentValue = (segmentType: EditableDateSegment, segmentState: DateSegmentState) => {\n  return segmentType === 'year' ? YEAR_HOME_VALUE : segmentState['aria-valuemin']!;\n};\n\n// Get the maximum value for the segment (for year, this is YEAR_END_VALUE).\nconst getEndSegmentValue = (segmentType: EditableDateSegment, segmentState: DateSegmentState) => {\n  return segmentType === 'year' ? YEAR_END_VALUE : segmentState['aria-valuemax']!;\n};\n\n// Return the result of stepping currentValue in the requested direction, taking into account min and max.\nconst getSteppedSegmentValue = (\n  currentValue: number,\n  direction: DateFieldActionData['direction'],\n  min: number,\n  max: number\n) => {\n  const newValue =\n    direction === 'increase'\n      ? currentValue + 1 > max\n        ? min\n        : currentValue + 1\n      : currentValue - 1 < min\n      ? max\n      : currentValue - 1;\n  return newValue;\n};\n\n// Return the result of paging the value up or down, taking into account min and max.\nconst getPagedSegmentValue = (\n  currentValue: number,\n  direction: DateFieldActionData['direction'],\n  min: number,\n  max: number,\n  segmentType: EditableDateSegment\n) => {\n  const step = segmentType === 'month' ? 2 : segmentType === 'year' ? 5 : 7;\n  const newValue =\n    direction === 'increase'\n      ? currentValue + step > max\n        ? (currentValue + step) % max\n        : currentValue + step\n      : currentValue - step < min\n      ? currentValue - step + max\n      : currentValue - step;\n  return newValue;\n};\n\n// Create a new segment with an updated value from a keyboard action such as step, page, Home, or End.\nconst createSegmentFromKeyboardAction = (\n  newVal: number,\n  locale: BCP47Locale,\n  segmentType: EditableDateSegment,\n  segmentState: DateSegmentState,\n  segments: DateSegmentState[]\n) => {\n  const newValStr = numberToString(newVal);\n  // For month changes, aria-valuetext includes the month name.\n  const ariaValueText =\n    segmentType === 'month'\n      ? getMonthAria(locale, newVal as IsoMonth, getYearValue(segments))\n      : newValStr;\n\n  // Create a new segment state that reflects the updated value.\n  // After any keyboard action, the value is complete so that if the user types anything,\n  // it will replace the stepped value.\n  return {\n    ...segmentState,\n    'aria-valuetext': ariaValueText,\n    'aria-valuenow': newVal,\n    text: newValStr,\n    isComplete: true\n  };\n};\n\n// Set the segment to its minimum value.\nconst goToHome = (\n  segmentType: EditableDateSegment,\n  segmentState: DateSegmentState,\n  segments: DateSegmentState[],\n  locale: BCP47Locale\n) => {\n  const newValue = getHomeSegmentValue(segmentType, segmentState);\n  return createSegmentFromKeyboardAction(newValue, locale, segmentType, segmentState, segments);\n};\n\n// Set the segment to its maximum value.\nconst goToEnd = (\n  segmentType: EditableDateSegment,\n  segmentState: DateSegmentState,\n  segments: DateSegmentState[],\n  locale: BCP47Locale\n) => {\n  const newValue = getEndSegmentValue(segmentType, segmentState);\n  return createSegmentFromKeyboardAction(newValue, locale, segmentType, segmentState, segments);\n};\n\n// Step or page a segment's value.\nconst doStepOrPage = (\n  segmentType: EditableDateSegment,\n  segmentState: DateSegmentState,\n  segments: DateSegmentState[],\n  type: 'step' | 'page',\n  direction: DateFieldActionData['direction'],\n  locale: BCP47Locale\n) => {\n  const valueNow = segmentState['aria-valuenow'];\n  const min = segmentState['aria-valuemin']!;\n  const max = segmentState['aria-valuemax']!;\n  const newValue =\n    valueNow === undefined\n      ? getDefaultSegmentValue(segmentType)\n      : type === 'page'\n      ? getPagedSegmentValue(valueNow, direction, min, max, segmentType)\n      : getSteppedSegmentValue(valueNow, direction, min, max);\n\n  return createSegmentFromKeyboardAction(newValue, locale, segmentType, segmentState, segments);\n};\n\nexport { dateReducer, getMonthAria, numberToString, stringToNumber };\nexport type { DateFieldAction, DateFieldActionData };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { useReducer, useRef } from 'preact/hooks';\nimport { BCP47Locale } from '#UNSAFE_IntlDateTime';\nimport { DateField } from './DateField';\nimport { CalendarDate, DateGranularity, DatePlaceholders, EditableDateSegment } from './types';\nimport { DateSegment } from './DateSegment';\nimport { dateReducer, getMonthAria, numberToString } from './dateReducer';\nimport { calendarDatesAreDifferent } from '../utils/PRIVATE_dayUtils';\nimport {\n  getDaysInMonth,\n  getMonthsInYear,\n  MIN_ISO_YEAR,\n  MAX_ISO_YEAR,\n  MIN_ISO_DAY,\n  MIN_ISO_MONTH\n} from '../utils/UNSAFE_calendarDateUtils';\n\ntype DateFieldType = ComponentProps<typeof DateField>;\n\ntype useDateFieldProps = {\n  ariaLabels: Record<EditableDateSegment, string>;\n  dateMasks: DatePlaceholders;\n  granularity: DateGranularity;\n  locale: BCP47Locale;\n  value: DateFieldType['value'];\n};\n\ntype DateSegmentState = Readonly<ComponentProps<typeof DateSegment>>;\n\ntype DateFieldState = {\n  readonly currentDate: CalendarDate | undefined;\n  readonly isCompleteDate: boolean;\n  readonly isDateSelected: boolean;\n  readonly isPartialDate: boolean;\n  readonly orderedSegments: EditableDateSegment[];\n  readonly segments: DateSegmentState[];\n};\n\n/**\n * Hook that returns a DateFieldState and a dispatch method to request changes to that state.\n */\nconst useDateField = ({\n  ariaLabels,\n  dateMasks,\n  granularity,\n  locale,\n  value: currentValue\n}: useDateFieldProps) => {\n  // Construct an ordered list of the editable segments, i.e. ['month', 'day', 'year'].\n  const fdm = dateMasks.filter(({ type }) => type !== 'literal');\n  const orderedSegments = fdm.map(({ type }) => type) as EditableDateSegment[];\n\n  // Derive some data from currentValue that will become part of our initial state.\n  const yearValue = currentValue?.year;\n  const monthValue = currentValue?.month;\n  const dayValue = currentValue?.day;\n  const monthMax = getMonthsInYear(yearValue ?? '*');\n  const dayMax = getDaysInMonth(monthValue ?? '*', yearValue ?? '*');\n  const isCompleteDate = !!yearValue && !!monthValue && (granularity === 'month' || !!dayValue);\n  const isPartialDate = !!yearValue || !!monthValue || !!dayValue;\n  const yearValueStr = yearValue ? numberToString(yearValue) : undefined;\n  const monthValueStr = monthValue ? numberToString(monthValue) : undefined;\n  const dayValueStr = dayValue ? numberToString(dayValue) : undefined;\n  const monthAria = monthValue ? getMonthAria(locale, monthValue, yearValue) : undefined;\n\n  const daySeg = [\n    {\n      type: 'day' as EditableDateSegment,\n      'aria-label': ariaLabels.day,\n      'aria-valuemin': MIN_ISO_DAY,\n      'aria-valuemax': dayMax,\n      'aria-valuenow': dayValue,\n      'aria-valuetext': dayValueStr,\n      isComplete: !!dayValue,\n      isSelected: false,\n      text: dayValueStr\n    }\n  ];\n\n  // Create state for each editable segment of a date, i.e. year, month, or day.\n  const editableSegments = [\n    {\n      type: 'year' as EditableDateSegment,\n      'aria-label': ariaLabels.year,\n      'aria-valuemin': MIN_ISO_YEAR,\n      'aria-valuemax': MAX_ISO_YEAR,\n      'aria-valuenow': yearValue,\n      'aria-valuetext': yearValueStr,\n      isComplete: !!yearValue,\n      isSelected: false,\n      text: yearValueStr\n    },\n    {\n      type: 'month' as EditableDateSegment,\n      'aria-label': ariaLabels.month,\n      'aria-valuemin': MIN_ISO_MONTH,\n      'aria-valuemax': monthMax,\n      'aria-valuenow': monthValue,\n      'aria-valuetext': monthAria,\n      isComplete: !!monthValue,\n      isSelected: false,\n      text: monthValueStr\n    },\n    ...(granularity === 'day' ? daySeg : [])\n  ];\n\n  // Create the initial state to pass to our reducer.\n  const initialState: DateFieldState = {\n    currentDate: currentValue,\n    isCompleteDate,\n    isDateSelected: false,\n    isPartialDate,\n    orderedSegments,\n    segments: editableSegments\n  };\n\n  const [state, dispatch] = useReducer(dateReducer, initialState);\n\n  // currentValue is the controlled value passed from the parent.\n  const lastValueFromParentRef = useRef<CalendarDate | undefined>(currentValue);\n  const dateResetRef = useRef<boolean>(false);\n\n  // If a new value is being pushed from the parent, and that value differs from\n  // the current value of the reducer, then this is a programmatic update\n  // and we need to call 'reset' to update the reducer state. Otherwise, the only\n  // time the reducer state is updated from the value is on mount.\n  if (calendarDatesAreDifferent(lastValueFromParentRef.current, currentValue)) {\n    lastValueFromParentRef.current = currentValue;\n    if (calendarDatesAreDifferent(currentValue, state.currentDate)) {\n      dispatch({ actionType: 'reset', data: initialState });\n      dateResetRef.current = true;\n    }\n  }\n\n  return { dateResetRef, dispatch, state };\n};\n\nexport { useDateField };\nexport type { DateFieldState, DateSegmentState };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { Dispatch, MutableRef, Ref, useCallback, useEffect, useRef } from 'preact/hooks';\nimport { calendarDatesAreDifferent } from '#utils/PRIVATE_dayUtils';\nimport { DateFieldAction } from './dateReducer';\nimport { DateFieldState } from './useDateField';\nimport { CalendarDate, EditableDateSegment } from './types';\nimport { getClientHints } from '#utils/PRIVATE_clientHints';\nimport { isBackspaceOrDelete, isSelectAll } from '#utils/PRIVATE_keyboardUtils';\nimport { InputDateMask } from './InputDateMask';\nimport { useDoubleTap } from '#hooks/UNSAFE_useDoubleTap';\nimport { useTabbableMode } from '#hooks/UNSAFE_useTabbableMode';\n\ntype InputDateMaskProps = ComponentProps<typeof InputDateMask>;\n\ntype Props = {\n  dateResetRef: MutableRef<boolean>;\n  direction: 'ltr' | 'rtl';\n  dispatch: Dispatch<DateFieldAction>;\n  groupRef?: Ref<HTMLDivElement>;\n  isDisabled?: boolean;\n  isFocused?: boolean;\n  isInputFocused?: boolean;\n  onCommit: InputDateMaskProps['onCommit'];\n  onInput: InputDateMaskProps['onInput'];\n  state: DateFieldState;\n  value?: CalendarDate;\n};\n\nfunction isMobile() {\n  const deviceType = getClientHints().deviceType;\n  return deviceType === 'phone' || deviceType === 'tablet';\n}\n\n/**\n * A hook that creates various handlers and manages effects for a DateField.\n */\nconst useDateFieldHandlers = ({\n  dateResetRef,\n  direction,\n  dispatch,\n  groupRef,\n  isDisabled,\n  isFocused,\n  isInputFocused,\n  onCommit,\n  onInput,\n  state,\n  value: currentValue\n}: Props) => {\n  const { tabbableModeProps } = useTabbableMode();\n  const { tabIndex: tabbableModeIndex } = tabbableModeProps;\n  const anySegmentSelected = state.segments.some((segment) => !!segment.isSelected);\n\n  // If any segment is selected, it is contenteditable=true and it has the focus. If you shift-Tab, you will\n  // land on the outer div (DateField) first meaning it takes 2 shift-tab keys to get the previous element.\n  // To prevent this, if any segment is selected the tabindex on the div is set to -1.\n  // We also need to set tabindex to -1 for the disabled case, since we are dealing with a div instead\n  // of an intrinsic input and have to handle it directly.\n  const updatedTabIndex = tabbableModeIndex === -1 || anySegmentSelected || isDisabled ? -1 : 0;\n\n  // Keep track of the last changed and last committed date values.\n  const lastDateRef = useRef<CalendarDate | undefined>(state.currentDate);\n  const lastCommittedDateRef = useRef<CalendarDate | undefined>(state.currentDate);\n  // Keep track whether the date was cleared.\n  const dateClearedRef = useRef<boolean>(false);\n  const lastFocusedRef = useRef<boolean>(!!isFocused);\n\n  // If the value was programmatically changed (see useDateField.ts), then update the\n  // last changed and last committed date refs to stay in sync.\n  // currentValue is the controlled value passed from the parent.\n  if (dateResetRef.current) {\n    lastDateRef.current = currentValue;\n    lastCommittedDateRef.current = currentValue;\n  }\n\n  // Handle requested segment changes by calling the reducer dispatch function.\n  const onChange = useCallback(\n    (action: DateFieldAction) => {\n      dispatch(action);\n    },\n    [dispatch]\n  );\n\n  // If the user clicked on a segment, dispatch a request to select it.\n  // If they clicked on the date field itself, select the first segment.\n  const onClick = useCallback(\n    (e: Event) => {\n      const segmentType = (e.target as HTMLElement).getAttribute(\n        'data-segment'\n      ) as EditableDateSegment;\n      !!segmentType\n        ? dispatch({ actionType: 'selectSegment', data: { type: segmentType } })\n        : dispatch({ actionType: 'selectFirst' });\n    },\n    [dispatch]\n  );\n\n  // If complete, select the date.\n  const selectAll = useCallback(\n    (isGroupFocus = true) => {\n      if (state.isCompleteDate) {\n        dispatch({ actionType: 'selectDateOrSegment' });\n        // Focus can end up in different places depending on if the user selected a segment\n        // first (via click or arrow key), and then did select all. To make shift-tabbing\n        // consistent in all cases, set focus to the group when selecting the date.\n        isGroupFocus && groupRef?.current?.focus();\n      }\n    },\n    [dispatch, groupRef, state.isCompleteDate]\n  );\n\n  const onDoubleClick = useCallback(() => {\n    selectAll();\n  }, [selectAll]);\n\n  const onDoubleTap = useCallback(\n    (e: Event) => {\n      const segmentType = (e.target as HTMLElement).getAttribute(\n        'data-segment'\n      ) as EditableDateSegment;\n\n      // Only do select all if a segment was double tapped, which means the\n      // mobile keyboard will stay up.\n      !!segmentType && selectAll(false);\n    },\n    [selectAll]\n  );\n\n  const doubleTapHandlers = useDoubleTap({ onDoubleTap: onDoubleTap, onSingleTap: onClick });\n\n  // Handle arrow key navigation between segments. If no segment is currently selected, then select the first one.\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (\n        (direction === 'ltr' && event.key === 'ArrowLeft') ||\n        (direction === 'rtl' && event.key === 'ArrowRight')\n      ) {\n        // Select the previous segment when pressing Left arrow (or Right arrow in rtl).\n        dispatch({ actionType: 'selectPrevious' });\n        event.stopPropagation();\n      } else if (\n        (direction === 'ltr' && event.key === 'ArrowRight') ||\n        (direction === 'rtl' && event.key === 'ArrowLeft')\n      ) {\n        // Select the next segment when pressing Right arrow (or Left arrow in rtl).\n        dispatch({ actionType: 'selectNext' });\n        event.stopPropagation();\n      } else if (\n        (isBackspaceOrDelete(event) || event.key === 'Backspace') &&\n        state.isDateSelected\n      ) {\n        // Clear the entire date.\n        dispatch({ actionType: 'clearDate' });\n        dateClearedRef.current = true;\n        // Kill the event to prevent weird issue with placeholders getting deleted on iOS only.\n        event.preventDefault();\n        event.stopPropagation();\n        event.stopImmediatePropagation();\n      } else if (isSelectAll(event)) {\n        selectAll();\n        event.preventDefault();\n        event.stopPropagation();\n      } else if (event.key === 'Enter') {\n        // Hitting Enter commits any changes.\n        if (calendarDatesAreDifferent(lastCommittedDateRef.current, lastDateRef.current)) {\n          // Call onCommit only if the value is different.\n          onCommit?.({ value: lastDateRef.current });\n          lastCommittedDateRef.current = lastDateRef.current;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    },\n    [direction, dispatch, onCommit, selectAll, state.isDateSelected]\n  );\n\n  // Blurring commits the date value; clear any selected segments and mark non-empty segments as complete.\n  useEffect(() => {\n    if (lastFocusedRef.current && !isFocused) {\n      dispatch({ actionType: 'commit' });\n      if (calendarDatesAreDifferent(lastCommittedDateRef.current, lastDateRef.current)) {\n        // Call onCommit only if the value is different.\n        onCommit?.({ value: lastDateRef.current });\n        lastCommittedDateRef.current = lastDateRef.current;\n      }\n    }\n    lastFocusedRef.current = !!isFocused;\n  }, [dispatch, isFocused, onCommit]);\n\n  // If you try to call onInput from onChange directly it doesn't work. The value of\n  // state.currentDate is from the current render, not the render *after* the dispatch.\n  // So wait for the state to finish updating.\n  useEffect(() => {\n    if (\n      calendarDatesAreDifferent(lastDateRef.current, state.currentDate) &&\n      !dateResetRef.current\n    ) {\n      const frozenDate =\n        state.currentDate !== undefined\n          ? Object.freeze({ ...state.currentDate })\n          : state.currentDate;\n      onInput({ value: frozenDate });\n      lastDateRef.current = frozenDate;\n    }\n    dateResetRef.current = false;\n  }, [onInput, state.currentDate, dateResetRef]);\n\n  // The following is a simplified version of how we detect keyboard vs. mouse focus\n  // in the useCollectionFocusRing hook. If the user tabs onto the field, we want to\n  // automatically select the first segment.\n  const recentPointerRef = useRef<boolean>(false);\n  const pointerDownTimerRef = useRef<ReturnType<typeof setTimeout> | undefined>();\n  const onPointerDown = () => {\n    recentPointerRef.current = true;\n    clearTimeout(pointerDownTimerRef.current);\n\n    pointerDownTimerRef.current = setTimeout(() => {\n      recentPointerRef.current = false;\n    }, 200);\n  };\n\n  useEffect(() => {\n    // If we receive focus that is *not* due to the user clicking in the field, i.e. the user\n    // tabbed onto the field, then select the first segment.\n    // Note: we cannot check isFocused because it includes the ? icon in compact UAD, and we don't\n    // want the date selected when the help icon is focused.\n    isInputFocused && !recentPointerRef.current && dispatch({ actionType: 'selectFirst' });\n\n    // If we lose focus due to the keyboard, i.e. shift-tabbing onto the compact UAD help icon,\n    // then 'commit' which will clear any selected segments.\n    !isInputFocused && !recentPointerRef.current && dispatch({ actionType: 'commit' });\n    recentPointerRef.current = false;\n  }, [dispatch, isInputFocused]);\n\n  const handlers = isMobile()\n    ? { ...doubleTapHandlers, onKeyDown }\n    : { onClick, onDoubleClick, onKeyDown, onPointerDown };\n\n  return {\n    dateClearedRef,\n    dateFieldHandlers: isDisabled ? {} : handlers,\n    segmentHandlers: isDisabled ? {} : { onChange },\n    tabIndex: updatedTabIndex\n  };\n};\n\nexport { useDateFieldHandlers };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { Ref, useRef } from 'preact/hooks';\nimport {\n  AriaAttributesSignalExcluded,\n  HTMLAttributesSignalExcluded\n} from '#utils/UNSAFE_attributeUtils';\nimport { BundleType } from '#resources/nls/bundle';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { DateSegment } from './DateSegment';\nimport { DateSegmentState } from './useDateField';\nimport { Flex } from '#UNSAFE_Flex';\nimport { HiddenAccessible } from '#UNSAFE_HiddenAccessible';\nimport { InputDateMask } from './InputDateMask';\nimport { LiteralSegment } from './LiteralSegment';\nimport { LiveRegion } from '#UNSAFE_LiveRegion';\nimport { merge } from '#utils/UNSAFE_stringUtils';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { useDateField } from './useDateField';\nimport { useDateFieldHandlers } from './useDateFieldHandlers';\nimport { useFormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { TextFieldInputVariantOptions } from '#UNSAFE_TextField/themes/TextFieldInputStyles.css';\nimport { TextFieldInputRedwoodTheme } from '#UNSAFE_TextField/themes/redwood/TextFieldInputTheme';\nimport type { DatePlaceholders, EditableDateSegment } from './types';\nimport { formatFullCalendarDate } from '#utils/UNSAFE_calendarDateUtils';\n\ntype InputDateMaskProps = ComponentProps<typeof InputDateMask>;\n\ntype AriaProps = Pick<\n  AriaAttributesSignalExcluded,\n  'aria-describedby' | 'aria-invalid' | 'aria-label' | 'aria-labelledby'\n>;\n\ntype HTMLElementProps = Pick<HTMLAttributesSignalExcluded<HTMLElement>, 'onBlur' | 'onFocus'>;\n\nexport type Props = AriaProps &\n  HTMLElementProps & {\n    /**\n     * A base id prefix.\n     */\n    baseId: string;\n\n    /**\n     * A ref to the element that receives focus when the field's label is clicked,\n     * or when the component is toggled between readonly and enabled. This is the\n     * first segment in the field.\n     */\n    fieldRef?: Ref<HTMLDivElement>;\n\n    /**\n     * Specifies the smallest date unit that is displayed by the component.\n     * If set to month, only month and year are shown.\n     * If set to day then month, day, and year are shown.\n     */\n    granularity?: InputDateMaskProps['granularity'];\n\n    /**\n     * True if the component has an inside label.\n     */\n    hasInsideLabel?: boolean;\n\n    /**\n     * Specifies for accessibility purposes whether a value is required.\n     */\n    isRequired?: InputDateMaskProps['isRequired'];\n\n    /**\n     * The placeholder masks used by the date field.\n     */\n    masks: DatePlaceholders;\n\n    /**\n     * Specifies how to align text within the field.\n     */\n    textAlign?: InputDateMaskProps['textAlign'];\n\n    /**\n     * The current display value of the component.\n     */\n    value?: InputDateMaskProps['value'];\n\n    /**\n     * The style variant of the component.\n     */\n    variant?: InputDateMaskProps['variant'];\n\n    /**\n     * Callback invoked each time the user changes the value of a segment For example, if the user\n     * types '12' into the month segment, this callback will be called twice to change the month\n     * first to '1' and then '12'.\n     */\n    onInput: InputDateMaskProps['onInput'];\n\n    /**\n     * Callback invoked when the user commits the entered value by blurring or hitting the enter key.\n     */\n    onCommit: InputDateMaskProps['onCommit'];\n  };\n\nconst findSegment = (segments: DateSegmentState[], type: EditableDateSegment): DateSegmentState => {\n  return segments.find((segment) => segment.type === type)!;\n};\n\n/**\n * Container for Segment children that represent different parts of a date with no time.\n */\nconst DateField = ({\n  'aria-describedby': describedBy,\n  'aria-invalid': ariaInvalid,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy,\n  baseId,\n  fieldRef,\n  granularity = 'day',\n  hasInsideLabel,\n  isRequired,\n  masks: dateMasks,\n  onBlur,\n  onCommit,\n  onFocus,\n  onInput,\n  textAlign,\n  value,\n  variant = 'default'\n}: Props) => {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const announceDateCleared = translations.inputDateMask_date_cleared();\n  const labels = {\n    month: translations.formControl_month(),\n    day: translations.formControl_day(),\n    year: translations.formControl_year()\n  };\n\n  const { direction, locale } = useUser();\n\n  const { isDisabled, isFocused, isInputFocused } = useFormFieldContext();\n  const hasValue = value !== undefined;\n\n  // DateField is similar to TextFieldInput for styling. The main difference\n  // is TextFieldInput renders a textarea or input and DateField renders a div, so the positioning with\n  // padding is different. DateField and TextFieldInput are both the mainContent\n  // of a TextField component.\n  const { classes } = useComponentTheme<TextFieldInputVariantOptions>(TextFieldInputRedwoodTheme, {\n    type: 'notPassword',\n    styleVariant: variant,\n    textarea: 'notTextArea',\n    input: 'notInput',\n    div: 'isDiv',\n    prefix: 'noPrefix',\n    suffix: 'noSuffix',\n    startContent: 'noStartContent',\n    endContent: 'noEndContent',\n    insideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n    value: hasValue ? 'hasValue' : 'noValue',\n    focused: isFocused ? 'isFocused' : 'notFocused',\n    disabled: isDisabled ? 'isDisabled' : 'notDisabled'\n  });\n\n  const compClasses = classNames([classes]);\n\n  const { state, dispatch, dateResetRef } = useDateField({\n    ariaLabels: labels,\n    dateMasks,\n    granularity,\n    locale,\n    value\n  });\n  const { isDateSelected, isPartialDate, segments: editableSegments } = state;\n  const yearSegment = findSegment(editableSegments, 'year');\n  const monthSegment = findSegment(editableSegments, 'month');\n  const daySegment = granularity === 'day' ? findSegment(editableSegments, 'day') : undefined;\n  const segmentsMap = {\n    year: yearSegment,\n    month: monthSegment,\n    day: daySegment\n  };\n\n  const groupRef = useRef<HTMLDivElement>(null);\n  const { dateClearedRef, dateFieldHandlers, segmentHandlers, tabIndex } = useDateFieldHandlers({\n    dateResetRef,\n    direction,\n    dispatch,\n    groupRef,\n    isDisabled,\n    isFocused,\n    isInputFocused,\n    onCommit,\n    onInput,\n    state,\n    value\n  });\n\n  // Like other form components, don't show placeholders for inside labels unless focused.\n  // This flag causes the segment placeholders to be hidden.\n  const isHidden = value === undefined && hasInsideLabel && !isFocused;\n\n  // If the date is complete, create a hidden accessible region with the full formatted date.\n  const formattedDateStr = !state.isCompleteDate\n    ? ''\n    : formatFullCalendarDate(locale, state.currentDate!, granularity);\n\n  const formattedDateAriaId = `${baseId}-date`;\n  const formattedDateAria = state.isCompleteDate ? (\n    <HiddenAccessible id={formattedDateAriaId}>{formattedDateStr}</HiddenAccessible>\n  ) : undefined;\n  const ariaDescribedBy = state.isCompleteDate\n    ? merge([describedBy, formattedDateAriaId])\n    : describedBy;\n\n  // Add an announcement to the live region if the date was cleared.\n  // Note: we deliberately do not reset dateClearedRef because there are multiple\n  // rerenders after clearing the date and we want to make sure the announcement\n  // has time to be heard.\n  const announceText = dateClearedRef.current ? announceDateCleared : '';\n\n  // firstSegmentType is 'day', 'month', or 'year' and is used to determine\n  // where to put the fieldRef.\n  const firstSegmentType = state.orderedSegments[0];\n\n  return (\n    <div\n      aria-describedby={ariaDescribedBy}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      class={compClasses}\n      onFocusIn={onFocus}\n      onFocusOut={onBlur}\n      ref={groupRef}\n      role=\"group\"\n      tabIndex={tabIndex}\n      {...dateFieldHandlers}>\n      <Flex direction=\"row\" wrap=\"nowrap\" justify={textAlign}>\n        {dateMasks.map(({ type, value: placeholder }) => {\n          const segmentProps = type !== 'literal' ? segmentsMap[type] : {};\n          if (type === 'literal') {\n            return (\n              <LiteralSegment\n                isHidden={isHidden}\n                isHighlighted={isDateSelected}\n                isPlaceholder={!isPartialDate}\n                text={placeholder}></LiteralSegment>\n            );\n          } else {\n            return (\n              <DateSegment\n                inputRef={type === firstSegmentType ? fieldRef : undefined}\n                isDisabled={isDisabled}\n                isInvalid={!!ariaInvalid}\n                isHidden={isHidden}\n                isHighlighted={isDateSelected}\n                isRequired={isRequired}\n                placeholder={placeholder}\n                type={type}\n                {...segmentHandlers}\n                {...segmentProps}></DateSegment>\n            );\n          }\n        })}\n      </Flex>\n      {formattedDateAria}\n      <LiveRegion>{announceText}</LiveRegion>\n    </div>\n  );\n};\n\nexport { DateField, findSegment };\n","import { createContext } from 'preact';\nimport { useContext } from 'preact/hooks';\n\ntype InputDateMaskContextProps = {\n  isInputDatePickerParent: boolean;\n  isDropdownOpen: boolean;\n};\n\n/**\n * Context used to indicate when the component is being used in\n * composition within some parent, such as InputDatePicker.\n */\nconst InputDateMaskContext = createContext<InputDateMaskContextProps>({\n  isInputDatePickerParent: false,\n  isDropdownOpen: false\n});\n\nconst useInputDateMaskContext = () => useContext(InputDateMaskContext);\n\nexport { InputDateMaskContext, useInputDateMaskContext };\nexport type { InputDateMaskContextProps };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Ref, RefObject } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback, useMemo, useRef } from 'preact/hooks';\n\nimport { AriaAttributesSignalExcluded } from '#utils/UNSAFE_attributeUtils';\nimport { BundleType } from '#resources/nls/bundle';\nimport type { CalendarDate, DatePlaceholders } from './types';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '#UNSAFE_UserAssistance';\nimport { DateField } from './DateField';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { getDatePlaceholderMasks, formatShortCalendarDate } from '#utils/UNSAFE_calendarDateUtils';\nimport { translateCustomMasks } from '#utils/PRIVATE_dayUtils';\nimport { Label } from '#UNSAFE_Label';\nimport { ReadonlyTextField, ReadonlyTextFieldInput, TextField } from '#UNSAFE_TextField';\nimport { Size } from '#utils/UNSAFE_size';\nimport { TextFieldContent } from '#UNSAFE_TextField/TextFieldContent';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport type { TextProps } from '#utils/UNSAFE_interpolations/text';\nimport { useFocusableTextField, FocusableHandle } from '#hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { useInputDateMaskContext } from './InputDateMaskContext';\nimport { useTextField } from '#hooks/UNSAFE_useTextField';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype TextFieldContentProps = ComponentProps<typeof TextFieldContent>;\n\ntype Props = TestIdProps & {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: AriaAttributesSignalExcluded['aria-describedby'];\n\n  /**\n   * Text to provide guidance to help the user understand what data to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n\n  /**\n   * Use this property to provide content for the end slot, such as a calendar icon.\n   */\n  endContent?: TextFieldContentProps['endContent'];\n\n  /**\n   * Specifies the smallest date unit that is displayed by the component.\n   * If set to month, only month and year are shown.\n   * If set to day then month, day, and year are shown.\n   */\n  granularity?: 'month' | 'day';\n\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * committed by the user. Setting this property to <code>true</code> means that a value\n   * is required to be committed by the user.\n   */\n  isRequired?: boolean;\n\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has committed a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>.\n   */\n  labelStartWidth?: Size;\n\n  /**\n   * A ref to the component field. This can be used when you are composing with InputDateMask\n   * and need to provide an anchor ref to a floating component.\n   */\n  mainFieldRef?: RefObject<HTMLDivElement>;\n\n  /**\n   * If specified, overrides the locale specific order of the individual date segments as\n   * well as the locale specific separator. The value of each placeholder is only used\n   * when the type is 'literal', otherwise it is replaced with a translated placeholder\n   * for month, day, or year. If masks are specified and granularity = day, then the\n   * placeholders must include month, day, and year. If granularity = month, then the\n   * placeholders must include month and year, but not day.\n   */\n  masks?: DatePlaceholders;\n\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextProps['textAlign'];\n\n  /**\n   * Specifies the density of the user assistance presentation. It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n\n  /**\n   * The current display value of the component.\n   */\n  value?: CalendarDate;\n\n  /**\n   * The style variant of the component.\n   */\n  variant?: 'default' | 'embedded';\n\n  /**\n   * Callback invoked when the user commits the entered value by blurring or hitting the enter key.\n   */\n  onCommit?: (detail: ValueUpdateDetail<CalendarDate>) => void;\n\n  /**\n   * Callback invoked each time the user changes the value of a segment For example, if the user\n   * types '12' into the month segment, this callback will be called twice to change the month\n   * first to '1' and then '12'.\n   */\n  onInput: (detail: ValueUpdateDetail<CalendarDate>) => void;\n};\n\n/**\n * An InputDateMask allows you to edit the month, day, and year fields of a calendar date.\n */\nexport const InputDateMask = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      columnSpan,\n      endContent,\n      granularity = 'day',\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      mainFieldRef,\n      messages,\n      masks,\n      testId,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant,\n      onCommit,\n      onInput\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const { enabledElementRef, readonlyElementRef, focusProps, isFocused } = useFocusableTextField<\n      HTMLDivElement,\n      HTMLDivElement\n    >({ isDisabled, isReadonly, ref });\n\n    const { isDropdownOpen, isInputDatePickerParent } = useInputDateMaskContext();\n    const isComponentFocused = isFocused || (isInputDatePickerParent && isDropdownOpen);\n\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps: origLabelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isFocused: isComponentFocused,\n      isReadonly,\n      isRequiredShown,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      userAssistanceDensity,\n      value\n    });\n\n    // When using a div with role=group (i.e. DateField), you need aria-labelledby instead of a\n    // for-id association with a label. Remove forId and id and use aria-labelledby instead.\n    const { forId, ...labelProps } = origLabelProps;\n    const { id, ...dateFieldProps } = inputProps;\n    const ariaLabelledBy = labelProps.id;\n    // Because we don't use for-id, clicking the label does not automatically focus the field.\n    // We have to do it manually.\n    const onClick = useCallback(() => {\n      enabledElementRef.current?.focus();\n    }, [enabledElementRef]);\n\n    const labelComp =\n      labelEdge !== 'none' ? (\n        <Label {...(!isDisabled && !isReadonly ? { onClick } : {})} {...labelProps}>\n          {label}\n        </Label>\n      ) : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const hasInsideLabel = label !== undefined && labelEdge === 'inside';\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const aRef = useRef<HTMLDivElement>(null);\n    const anchorRef = mainFieldRef ?? aRef;\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={anchorRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    const { locale } = useUser();\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n    const monthPlaceholder = translations.inputDateMask_monthPlaceholder();\n    const dayPlaceholder = translations.inputDateMask_dayPlaceholder();\n    const yearPlaceholder = translations.inputDateMask_yearPlaceholder();\n\n    // The DatePlaceholders type already ensures the masks contain the right placeholders,\n    // for either full calendar dates or month-year dates. This check ensures the masks,\n    // if provided, match the granularity. E.g. for granularity=month, you should pass\n    // month and year placeholders, and a separator.\n    if (\n      masks &&\n      ((granularity === 'day' && masks.length !== 5) ||\n        (granularity === 'month' && masks.length !== 3))\n    ) {\n      throw new Error('Specified masks must match the granularity');\n    }\n\n    const dateMasks = useMemo(() => {\n      // Determine the locale specific placeholder masks and separators in the correct order\n      // for the locale, unless a custom set of masks was passed in. Each mask represents a\n      // placeholder for a segment of a date (i.e. mm/dd/yyyy). Memoize because we shouldn't\n      // need to recreate this data often.\n      const placeholderMasks = masks\n        ? translateCustomMasks(masks, monthPlaceholder, dayPlaceholder, yearPlaceholder)\n        : getDatePlaceholderMasks(\n            locale,\n            granularity,\n            monthPlaceholder,\n            dayPlaceholder,\n            yearPlaceholder\n          );\n\n      return placeholderMasks;\n    }, [masks, locale, granularity, dayPlaceholder, monthPlaceholder, yearPlaceholder]);\n\n    if (isReadonly) {\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onFocusOut}\n            onFocus={focusProps.onFocusIn}\n            ref={anchorRef}\n            testId={testId}\n            mainContent={\n              <ReadonlyTextFieldInput\n                aria-describedby={dateFieldProps['aria-describedby']}\n                aria-label={ariaLabel}\n                aria-labelledby={labelProps.id}\n                as=\"div\"\n                elementRef={readonlyElementRef}\n                textAlign={textAlign}\n                value={\n                  value === undefined ? '' : formatShortCalendarDate(value, granularity, dateMasks)\n                }\n                hasEmptyLabel={label === '' && labelEdge === 'none'}\n                hasInsideLabel={hasInsideLabel}\n              />\n            }\n            {...fieldLabelProps}></ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    // The main content inside TextField is a DateField (not TextFieldInput) in this case.\n    // We reuse the TextField building blocks and hooks, but recompose them.\n    const mainContent = (\n      <DateField\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        baseId={baseId}\n        fieldRef={enabledElementRef}\n        granularity={granularity}\n        hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n        isRequired={isRequired}\n        masks={dateMasks}\n        onCommit={onCommit}\n        onInput={onInput}\n        textAlign={textAlign}\n        value={value}\n        {...dateFieldProps}\n      />\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          columnSpan={columnSpan}\n          compactUserAssistance={compactUserAssistance}\n          endContent={endContent}\n          inlineUserAssistance={inlineUserAssistance}\n          mainContent={mainContent}\n          onBlur={focusProps.onFocusOut}\n          onFocus={focusProps.onFocusIn}\n          mainFieldRef={anchorRef}\n          testId={testId}\n          {...textFieldProps}\n          {...fieldLabelProps}\n        />\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["_jsx","_jsxs","findSegment"],"mappings":"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"}
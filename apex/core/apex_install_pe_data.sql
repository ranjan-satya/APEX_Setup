Rem
Rem  Copyright (c) 2006, 2024, Oracle and/or its affiliates.
Rem



Rem    NAME
Rem      apex_install_pe_data.sql
Rem


Rem    DESCRIPTION
Rem      Insert Property Editor metadata into wwv_pe_* tables during APEX installation
Rem


Rem    MODIFIED     (MM/DD/YYYY)
Rem    arayner       05/13/2013 - Created

set define '^'
set sqlprefix off
set serveroutput on

prompt Enter YES (or hit enter) to load system messages and NO to skip it (NO should only be used during installation)
define LOAD_SYSTEM_MESSAGES = '^1'

prompt
prompt Property Editor - Metadata
prompt
declare
/* Useful SQL queries:

Find gaps in the property id's:

select g.id
  from ( select rownum id
           from sys.dual
        connect by level <= 1000 ) g
 where not exists ( select 1
                      from wwv_pe_properties p
                     where p.id = g.id
                  )
 order by 1;

Find existing properties that could be re-used:

select p.name,
       wwv_flow_lang.system_message(p.prompt) as property_prompt,
       p.property_type,
       p.db_column,
       wwv_flow_lang.system_message(dg.title) as group_title,
       p.*
  from wwv_pe_properties p,
       wwv_pe_display_groups dg
 where p.name like '%FEEDB%'
   and dg.id = p.display_group_id
 order by p.name;

Show all properties of a component type (useful to verify the order and groups):

select wwv_flow_lang.system_message(dg.title) as group_title,
       wwv_flow_lang.system_message(p.prompt) as property_prompt,
       p.name,
       coalesce( cp.db_column, p.db_column )  as db_column
  from wwv_pe_component_types ct,
       wwv_pe_component_props cp,
       wwv_pe_properties p,
       wwv_pe_display_groups dg
 where ct.name              = 'CHANGEME'
   and cp.component_type_id = ct.id
   and p.id                 = cp.property_id
   and dg.id                = p.display_group_id
  order by cp.display_sequence;

Show columns that are missing in the current configuration:

select ct.name, ct.table_name, c.column_name
  from wwv_pe_component_types ct,
       user_tab_cols c
 where c.table_name = ct.table_name
   and c.table_name not in ( 'WWV_FLOW_FILTERS_DEV',
                             'WWV_FLOW_FND_USER_GROUPS'
                           )
   and ct.name      not in ( 'DATA_LOAD_TABLE',
                             'WEB_SRC_SYNC_STEP_WS_PARAM',
                             'AUTOMATION_WS_PARAM',
                             'LOV_WS_PARAM',
                             'CALENDAR_TEMPLATE', -- legacy calendar
                             'PAGE',
                             'TREE' ) -- legacy tree
   and ct.is_query_only  = 'N'
   and ct.page_id_column is null -- no page meta data, they are valid
   and not exists ( select 1
                      from wwv_pe_component_props cp,
                           wwv_pe_properties p
                     where cp.component_type_id = ct.id
                       and p.id                 = cp.property_id
                       and coalesce( cp.db_column, p.db_column ) = c.column_name
                  )
   and c.column_name not in ( 'ID',
                              'FLOW_ID',
                              'PAGE_ID',
                              'SECURITY_GROUP_ID',
                              'CREATED_BY',
                              'CREATED_ON',
                              'APPLICATION_TYPE',
                              'EMAIL_TEMPLATE_ID',
                              'TASK_DEF_ID',
                              'WEB_SRC_MODULE_ID',
                              'WEB_SRC_OPERATION_ID',
                              'WORKFLOW_ID',
                              'FILE_CONTENT',
                              'LAST_REFRESH',
                              'LAST_REFRESHED'
                            )
   and not (   ct.table_name = 'WWV_FLOWS'
           and c.column_name like 'DEFAULT\_%' escape '\' -- not used anymore
           )
   and c.column_name not like 'ATTRIBUTE\___' escape '\'
   and c.column_name not like '%\_COMPILED' escape '\'
   and c.column_name not like 'SYS\_NC%' escape '\'
   and c.column_name not like '%\_RUN\_TIMESTAMP' escape '\'
   and c.column_name not like 'ATTRIBUTE_' -- build_option
   and (c.column_name <> ct.parent_fk_column or ct.parent_fk_column is null)
 order by ct.name, c.column_name;

*/
    type t_parent_component_types is table of number index by binary_integer;
    type t_used_system_messages is table of boolean index by wwv_flow_messages$.name%type;

    c_load_system_messages          constant boolean := ( nvl( upper( '^LOAD_SYSTEM_MESSAGES' ), 'YES' ) = 'YES' );
    ------------------------------------------------------------------------
    -- Component Type Constants
    ------------------------------------------------------------------------
    -- Workspace component types
    c_comp_type_component_type      constant wwv_pe_component_types.id%type :=   1;
    c_comp_type_credential          constant wwv_pe_component_types.id%type :=   10;
    c_comp_type_remote_database     constant wwv_pe_component_types.id%type :=   20;
    c_comp_type_remote_oracle_db    constant wwv_pe_component_types.id%type :=   22;
    c_comp_type_auth_server         constant wwv_pe_component_types.id%type :=   30;
    c_comp_type_print_server        constant wwv_pe_component_types.id%type :=   40;
    c_comp_type_rest_server         constant wwv_pe_component_types.id%type :=   50;
    c_comp_type_workspace_file      constant wwv_pe_component_types.id%type :=   60;
    c_comp_type_app_group           constant wwv_pe_component_types.id%type :=   70;
    c_comp_type_file_server         constant wwv_pe_component_types.id%type :=   80;
    c_comp_type_ai_server           constant wwv_pe_component_types.id%type :=   90;
    c_comp_type_vector_provider     constant wwv_pe_component_types.id%type :=   92;
    c_comp_type_page_pattern        constant wwv_pe_component_types.id%type :=  100;
    --
    -- Application component types
    c_comp_type_application         constant wwv_pe_component_types.id%type := 1000;
    c_comp_type_app_substitution    constant wwv_pe_component_types.id%type := 1005;
    --
    -- Theme related component types
    c_comp_type_theme               constant wwv_pe_component_types.id%type := 2000;
    c_comp_type_theme_style         constant wwv_pe_component_types.id%type := 2010;
    c_comp_type_theme_file          constant wwv_pe_component_types.id%type := 2020;
    c_comp_type_tmpl_option_group   constant wwv_pe_component_types.id%type := 2030;
    c_comp_type_global_tmpl_option  constant wwv_pe_component_types.id%type := 2040;
    --
    -- Templates
    c_comp_type_page_template       constant wwv_pe_component_types.id%type := 2510;
    c_comp_type_page_tmpl_option    constant wwv_pe_component_types.id%type := 2512;
    c_comp_type_display_point       constant wwv_pe_component_types.id%type := 2514;
    c_comp_type_field_template      constant wwv_pe_component_types.id%type := 2520;
    c_comp_type_field_tmpl_option   constant wwv_pe_component_types.id%type := 2522;
    c_comp_type_button_template     constant wwv_pe_component_types.id%type := 2530;
    c_comp_type_button_tmpl_option  constant wwv_pe_component_types.id%type := 2532;
    c_comp_type_region_template     constant wwv_pe_component_types.id%type := 2540;
    c_comp_type_region_tmpl_option  constant wwv_pe_component_types.id%type := 2542;
    c_comp_type_list_template       constant wwv_pe_component_types.id%type := 2550;
    c_comp_type_list_tmpl_option    constant wwv_pe_component_types.id%type := 2552;
    c_comp_type_bc_template         constant wwv_pe_component_types.id%type := 2560;
    c_comp_type_bc_tmpl_option      constant wwv_pe_component_types.id%type := 2562;
    c_comp_type_calendar_template   constant wwv_pe_component_types.id%type := 2570;
    c_comp_type_report_template     constant wwv_pe_component_types.id%type := 2580;
    c_comp_type_report_tmpl_option  constant wwv_pe_component_types.id%type := 2582;
    c_comp_type_popup_lov_template  constant wwv_pe_component_types.id%type := 2590;
    --
    -- Shared component related component types
    c_comp_type_app_item            constant wwv_pe_component_types.id%type := 3010;
    c_comp_type_app_computation     constant wwv_pe_component_types.id%type := 3020;
    c_comp_type_app_process         constant wwv_pe_component_types.id%type := 3030;
    c_comp_type_build_option        constant wwv_pe_component_types.id%type := 3040;
    c_comp_type_authentication      constant wwv_pe_component_types.id%type := 3050;
    c_comp_type_authorization       constant wwv_pe_component_types.id%type := 3060;
    c_comp_type_acl_role            constant wwv_pe_component_types.id%type := 3070;
    --
    c_comp_type_web_src_module      constant wwv_pe_component_types.id%type := 3080;
    c_comp_type_web_src_array_col   constant wwv_pe_component_types.id%type := 3081;
    c_comp_type_web_src_mod_param   constant wwv_pe_component_types.id%type := 3082;
    c_comp_type_web_src_mod_dp      constant wwv_pe_component_types.id%type := 3084;
    c_comp_type_web_src_mod_dp_col  constant wwv_pe_component_types.id%type := 3086;
    c_comp_type_web_src_operation   constant wwv_pe_component_types.id%type := 3088;
    c_comp_type_web_src_oper_param  constant wwv_pe_component_types.id%type := 3090;
    c_comp_type_web_src_oper_dp     constant wwv_pe_component_types.id%type := 3092;
    c_comp_type_web_src_oper_dpcol  constant wwv_pe_component_types.id%type := 3094;
    c_comp_type_web_src_sync_step   constant wwv_pe_component_types.id%type := 3096;
    c_comp_type_web_src_sync_param  constant wwv_pe_component_types.id%type := 3098;  -- web source sync step parameter
    c_comp_type_web_src_query       constant wwv_pe_component_types.id%type := 3100;
    c_comp_type_web_src_param       constant wwv_pe_component_types.id%type := 3102;
    --
    c_comp_type_shortcut            constant wwv_pe_component_types.id%type := 3105;
    --
    c_comp_type_plugin              constant wwv_pe_component_types.id%type := 3110;
    c_comp_type_plugin_std_attr     constant wwv_pe_component_types.id%type := 3112;
    c_comp_type_plugin_attr_grp     constant wwv_pe_component_types.id%type := 3115;
    c_comp_type_plugin_cust_attr    constant wwv_pe_component_types.id%type := 3120;
    c_comp_type_plugin_attr_lov     constant wwv_pe_component_types.id%type := 3125;
    c_comp_type_plugin_action_pos   constant wwv_pe_component_types.id%type := 3130;
    c_comp_type_plugin_action_tmpl  constant wwv_pe_component_types.id%type := 3135;
    c_comp_type_plugin_event        constant wwv_pe_component_types.id%type := 3140;
    c_comp_type_plugin_file         constant wwv_pe_component_types.id%type := 3142;
    c_comp_type_plugin_setting      constant wwv_pe_component_types.id%type := 3144;
    c_comp_type_plugin_slot         constant wwv_pe_component_types.id%type := 3146;
    --
    c_comp_type_application_file    constant wwv_pe_component_types.id%type := 3150;
    c_comp_type_text_message        constant wwv_pe_component_types.id%type := 3170;
    c_comp_type_app_setting         constant wwv_pe_component_types.id%type := 3180;
    --
    c_comp_type_pwa_shortcut        constant wwv_pe_component_types.id%type := 3210;
    c_comp_type_pwa_screenshot      constant wwv_pe_component_types.id%type := 3220;
    --
    c_comp_type_dualityview_src     constant wwv_pe_component_types.id%type := 3310;
    c_comp_type_jsondocument_src    constant wwv_pe_component_types.id%type := 3312;
    c_comp_type_dualityvw_arr_col   constant wwv_pe_component_types.id%type := 3314;
    c_comp_type_jsoncoll_arr_col    constant wwv_pe_component_types.id%type := 3316;
    c_comp_type_dualityvw_dp        constant wwv_pe_component_types.id%type := 3317;
    c_comp_type_dualityvw_dp_col    constant wwv_pe_component_types.id%type := 3318;
    c_comp_type_jsoncoll_dp         constant wwv_pe_component_types.id%type := 3319;
    c_comp_type_jsoncoll_dp_col     constant wwv_pe_component_types.id%type := 3320;
    --
    c_comp_type_ai_config           constant wwv_pe_component_types.id%type := 3400;
    c_comp_type_ai_config_rag_src   constant wwv_pe_component_types.id%type := 3405;
    --
    c_comp_type_classic_nav_bar     constant wwv_pe_component_types.id%type := 3505;
    c_comp_type_breadcrumb          constant wwv_pe_component_types.id%type := 3510;
    c_comp_type_breadcrumb_entry    constant wwv_pe_component_types.id%type := 3515;
    c_comp_type_list                constant wwv_pe_component_types.id%type := 3520;
    c_comp_type_list_entry          constant wwv_pe_component_types.id%type := 3525;
    c_comp_type_lov                 constant wwv_pe_component_types.id%type := 3530;
    c_comp_type_lov_ws_param        constant wwv_pe_component_types.id%type := 3532;  -- web source lov parameter
    c_comp_type_lov_entry           constant wwv_pe_component_types.id%type := 3534;
    c_comp_type_lov_column          constant wwv_pe_component_types.id%type := 3536;
    c_comp_type_ws_ref              constant wwv_pe_component_types.id%type := 3540;
    c_comp_type_ws_ref_operations   constant wwv_pe_component_types.id%type := 3541;
    c_comp_type_ws_ref_oper_p_i     constant wwv_pe_component_types.id%type := 3545;  -- web service input parameters
    c_comp_type_ws_ref_oper_p_o     constant wwv_pe_component_types.id%type := 3546;  -- web service output parameters
    c_comp_type_ws_ref_oper_p_a     constant wwv_pe_component_types.id%type := 3547;  -- web service basic auth parameters
    c_comp_type_ws_ref_oper_p_h     constant wwv_pe_component_types.id%type := 3548;  -- web service http header parameters
    c_comp_type_legacy_data_load    constant wwv_pe_component_types.id%type := 3550;
    -- placeholder: child tables of data load
    c_comp_type_tab_set             constant wwv_pe_component_types.id%type := 3560;
    c_comp_type_report_layout       constant wwv_pe_component_types.id%type := 3570;
    c_comp_type_report_query        constant wwv_pe_component_types.id%type := 3580;
    c_comp_type_report_query_stmt   constant wwv_pe_component_types.id%type := 3585;
    -- placeholder: report layout details
    c_comp_type_automation          constant wwv_pe_component_types.id%type := 3610;
    c_comp_type_autom_ws_param      constant wwv_pe_component_types.id%type := 3612;
    c_comp_type_automation_action   constant wwv_pe_component_types.id%type := 3620;
    c_comp_type_email_template      constant wwv_pe_component_types.id%type := 3630;
    c_comp_type_data_load_def       constant wwv_pe_component_types.id%type := 3640;
    c_comp_type_data_load_dp        constant wwv_pe_component_types.id%type := 3645;
    c_comp_type_data_load_dp_col    constant wwv_pe_component_types.id%type := 3647;
    -- Task definition component type
    c_comp_type_task_def            constant wwv_pe_component_types.id%type := 3700;
    c_comp_type_task_def_param      constant wwv_pe_component_types.id%type := 3705;
    c_comp_type_task_def_action     constant wwv_pe_component_types.id%type := 3710;
    c_comp_type_task_def_particip   constant wwv_pe_component_types.id%type := 3715;
    --
    c_comp_type_language_map        constant wwv_pe_component_types.id%type := 3890;
    c_comp_type_dyn_translation     constant wwv_pe_component_types.id%type := 3891;
    --
    c_comp_type_concatenated_file   constant wwv_pe_component_types.id%type := 3905;
    c_comp_type_search_config       constant wwv_pe_component_types.id%type := 3910;
    c_comp_type_search_ws_param     constant wwv_pe_component_types.id%type := 3912;
    --
    -- Misc component types
    c_comp_type_page_group          constant wwv_pe_component_types.id%type := 4010;
    c_comp_type_tree                constant wwv_pe_component_types.id%type := 4015;
    --
    -- Supporting Objects
    c_comp_type_supobj              constant wwv_pe_component_types.id%type := 4950;
    c_comp_type_supobj_substitut    constant wwv_pe_component_types.id%type := 4955;
    c_comp_type_supobj_build_opt    constant wwv_pe_component_types.id%type := 4960;
    c_comp_type_supobj_validation   constant wwv_pe_component_types.id%type := 4965;
    c_comp_type_supobj_install      constant wwv_pe_component_types.id%type := 4970;
    c_comp_type_supobj_upgrade      constant wwv_pe_component_types.id%type := 4975;
    c_comp_type_supobj_deinstall    constant wwv_pe_component_types.id%type := 4980;
    --
    -- Page related component types
    --
    c_comp_type_page                constant wwv_pe_component_types.id%type := 5000;
    -- Page rendering
    c_comp_type_region              constant wwv_pe_component_types.id%type := 5110;
    c_comp_type_page_item           constant wwv_pe_component_types.id%type := 5120;
    c_comp_type_button              constant wwv_pe_component_types.id%type := 5130;
    c_comp_type_da_event            constant wwv_pe_component_types.id%type := 5140;
    c_comp_type_da_action           constant wwv_pe_component_types.id%type := 5150;
    c_comp_type_meta_tag            constant wwv_pe_component_types.id%type := 5160;
    -- Page processing
    c_comp_type_validation          constant wwv_pe_component_types.id%type := 5510;
    c_comp_type_page_computation    constant wwv_pe_component_types.id%type := 5520;
    c_comp_type_page_process        constant wwv_pe_component_types.id%type := 5530;
    c_comp_type_page_proc_ws_param  constant wwv_pe_component_types.id%type := 5531;
    c_comp_type_branch              constant wwv_pe_component_types.id%type := 5540;
    --
    -- Region type specific component types ( use a new 7xxx hundred for each region type )
    c_comp_type_region_plugin_attr  constant wwv_pe_component_types.id%type := 7000;
    --
    c_comp_type_ir_attributes       constant wwv_pe_component_types.id%type := 7010;
    c_comp_type_ir_saved_report     constant wwv_pe_component_types.id%type := 7020;
    c_comp_type_ir_column_group     constant wwv_pe_component_types.id%type := 7030;
    c_comp_type_ir_column           constant wwv_pe_component_types.id%type := 7040;
    c_comp_type_ir_print            constant wwv_pe_component_types.id%type := 7050;
    --
    c_comp_type_page_proc_ws_p_i    constant wwv_pe_component_types.id%type := 7110;  -- web service input parameters
    c_comp_type_page_proc_ws_p_o    constant wwv_pe_component_types.id%type := 7120;  -- web service output parameters
    c_comp_type_page_proc_ws_p_a    constant wwv_pe_component_types.id%type := 7130;  -- web service basic auth parameters
    c_comp_type_page_proc_ws_p      constant wwv_pe_component_types.id%type := 7150;  -- web source process parameter
    c_comp_type_pg_proc_api_param   constant wwv_pe_component_types.id%type := 7152;  -- Invoke API process parameter
    c_comp_type_region_ws_param     constant wwv_pe_component_types.id%type := 7160;  -- web source region parameter
    --
    c_comp_type_classic_report      constant wwv_pe_component_types.id%type := 7310;
    c_comp_type_classic_rpt_column  constant wwv_pe_component_types.id%type := 7320;
    c_comp_type_classic_rpt_print   constant wwv_pe_component_types.id%type := 7330;
    --
    c_comp_type_tab_form            constant wwv_pe_component_types.id%type := 7410;
    c_comp_type_tab_form_column     constant wwv_pe_component_types.id%type := 7420;
    c_comp_type_tab_form_print      constant wwv_pe_component_types.id%type := 7430;
    --
    c_comp_type_classic_calendar    constant wwv_pe_component_types.id%type := 7610;
    --
    c_comp_type_region_column       constant wwv_pe_component_types.id%type := 7710;
    c_comp_type_region_tmpl_column  constant wwv_pe_component_types.id%type := 7720;
    -- JET Charts
    c_comp_type_jet_chart           constant wwv_pe_component_types.id%type := 7810;
    c_comp_type_jet_chart_series    constant wwv_pe_component_types.id%type := 7820;
    c_comp_type_jet_chart_axes      constant wwv_pe_component_types.id%type := 7830;
    c_comp_type_jet_chart_ws_param  constant wwv_pe_component_types.id%type := 7840;  -- web source jet chart series parameter
    -- interactive grid
    c_comp_type_ig_attributes       constant wwv_pe_component_types.id%type := 7910;
    c_comp_type_ig_saved_report     constant wwv_pe_component_types.id%type := 7920;
    c_comp_type_ig_column_group     constant wwv_pe_component_types.id%type := 7930;
    c_comp_type_ig_column           constant wwv_pe_component_types.id%type := 7940;
    c_comp_type_ig_print            constant wwv_pe_component_types.id%type := 7950;
    -- faceted search
    c_comp_type_facet               constant wwv_pe_component_types.id%type := 8010;
    c_comp_type_facet_group         constant wwv_pe_component_types.id%type := 8020;
    c_comp_type_facet_group_item    constant wwv_pe_component_types.id%type := 8030;
    -- smart filters
    c_comp_type_sfilter             constant wwv_pe_component_types.id%type := 8050;
    c_comp_type_sfilter_group       constant wwv_pe_component_types.id%type := 8051;
    c_comp_type_sfilter_group_item  constant wwv_pe_component_types.id%type := 8052;
    -- card
    c_comp_type_card                constant wwv_pe_component_types.id%type := 8110;
    c_comp_type_card_action         constant wwv_pe_component_types.id%type := 8120;
    --
    c_comp_type_map_region          constant wwv_pe_component_types.id%type := 8210;
    c_comp_type_map_layer           constant wwv_pe_component_types.id%type := 8220;
    c_comp_type_map_layer_ws_param  constant wwv_pe_component_types.id%type := 8230;  -- web source map layer parameter
    c_comp_type_map_background      constant wwv_pe_component_types.id%type := 8240;
    --
    c_comp_type_pg_pr_task_param    constant wwv_pe_component_types.id%type := 8400;   -- task page process parameter
    --
    c_comp_type_search_region       constant wwv_pe_component_types.id%type := 8510;
    c_comp_type_search_source       constant wwv_pe_component_types.id%type := 8520;
    --
    c_comp_type_region_action       constant wwv_pe_component_types.id%type := 8610;
    c_comp_type_ir_column_action    constant wwv_pe_component_types.id%type := 8615;
    --
    c_comp_type_reg_act_menu_entry  constant wwv_pe_component_types.id%type := 8710;
    c_comp_type_ir_act_menu_entry   constant wwv_pe_component_types.id%type := 8715;
    --
    c_comp_type_workflow            constant wwv_pe_component_types.id%type := 8800;
    c_comp_type_workflow_param      constant wwv_pe_component_types.id%type := 8810;
    c_comp_type_workflow_version    constant wwv_pe_component_types.id%type := 8820;
    c_comp_type_workflow_activity   constant wwv_pe_component_types.id%type := 8830;
    c_comp_type_workflow_variable   constant wwv_pe_component_types.id%type := 8840;
    c_comp_type_workflow_act_var    constant wwv_pe_component_types.id%type := 8850;
    c_comp_type_workflow_particip   constant wwv_pe_component_types.id%type := 8860;
    c_comp_type_workflow_trans      constant wwv_pe_component_types.id%type := 8870;
    c_comp_type_workflow_branch     constant wwv_pe_component_types.id%type := 8880;
    --
    c_comp_type_page_proc_wf_param  constant wwv_pe_component_types.id%type := 8900;  -- workflow page process parameter
    c_comp_type_wf_act_task_param   constant wwv_pe_component_types.id%type := 8950;  -- task workflow activity parameter
    c_comp_type_wf_act_api_param    constant wwv_pe_component_types.id%type := 9000;  -- Invoke API workflow activity parameter
    c_comp_type_wf_act_ws_param     constant wwv_pe_component_types.id%type := 9050;  -- Web Source Workflow Activity Parameter
    c_comp_type_wf_act_wf_param     constant wwv_pe_component_types.id%type := 9100;  -- workflow component parameter for Invoke Workflow Activity

    c_comp_type_component_group     constant wwv_pe_component_types.id%type := 9990;  -- Component Group
    c_comp_type_comp_grp_component  constant wwv_pe_component_types.id%type := 9995;  -- Component Group Component
    --

    ------------------------------------------------------------------------
    -- Unit constants
    ------------------------------------------------------------------------
    c_unit_pixels         constant varchar2( 20 ) := 'pixels';
    c_unit_chars          constant varchar2( 20 ) := 'characters';
    c_unit_lines          constant varchar2( 20 ) := 'lines';
    c_unit_degrees        constant varchar2( 20 ) := 'degrees';
    c_unit_seconds        constant varchar2( 20 ) := 'seconds';
    c_unit_days           constant varchar2( 20 ) := 'days';
    c_unit_kb             constant varchar2( 20 ) := 'KB';
    c_unit_milliseconds   constant varchar2( 20 ) := 'milliseconds';

    ------------------------------------------------------------------------
    -- Oracle DB version constants
    ------------------------------------------------------------------------
    c_db_23ai             constant number := 23;

    ------------------------------------------------------------------------
    -- JET Chart constants
    ------------------------------------------------------------------------
    c_jet_area                constant varchar2( 1000 ) := 'area';
    c_jet_bar                 constant varchar2( 1000 ) := 'bar';
    c_jet_box_plot            constant varchar2( 1000 ) := 'boxPlot';
    c_jet_bubble              constant varchar2( 1000 ) := 'bubble';
    c_jet_combo               constant varchar2( 1000 ) := 'combo';
    c_jet_dial                constant varchar2( 1000 ) := 'dial';
    c_jet_donut               constant varchar2( 1000 ) := 'donut';
    c_jet_funnel              constant varchar2( 1000 ) := 'funnel';
    c_jet_gantt               constant varchar2( 1000 ) := 'gantt';

    c_jet_line                constant varchar2( 1000 ) := 'line';
    c_jet_line_with_area      constant varchar2( 1000 ) := 'lineWithArea';
    c_jet_pie                 constant varchar2( 1000 ) := 'pie';
    c_jet_polar               constant varchar2( 1000 ) := 'polar';
    c_jet_pyramid             constant varchar2( 1000 ) := 'pyramid';
    c_jet_radar               constant varchar2( 1000 ) := 'radar';
    c_jet_range               constant varchar2( 1000 ) := 'range';
    c_jet_scatter             constant varchar2( 1000 ) := 'scatter';
    c_jet_stock               constant varchar2( 1000 ) := 'stock';
    c_jet_pie_donut           constant varchar2 (1000 ) := c_jet_pie||','|| c_jet_donut;
    c_jet_single              constant varchar2( 1000 ) := c_jet_area ||','|| c_jet_bar||','|| c_jet_line||','|| c_jet_line_with_area||','|| c_jet_bubble||','|| c_jet_funnel||','|| c_jet_pyramid||','|| c_jet_pie_donut||','|| c_jet_scatter||','|| c_jet_stock||','|| c_jet_dial;
    --
    c_jet_stack               constant varchar2( 1000 ) := c_jet_area || ',' || c_jet_bar || ',' || c_jet_combo || ',' || c_jet_line || ',' || c_jet_line_with_area;
    --c_jet_range               constant varchar2( 1000 ) := c_jet_area || ',' || c_jet_bar;

    c_jet_spark               constant varchar2( 1000 ) := c_jet_area || ',' || c_jet_bar || ',' || c_jet_line || ',' || c_jet_line_with_area;
    c_jet_time_axis_type      constant varchar2( 1000 ) := c_jet_area || ',' || c_jet_bar|| ',' || c_jet_combo || ',' || c_jet_line || ',' || c_jet_line_with_area || ',' || c_jet_stock  || ',' ||c_jet_box_plot;
    c_jet_overview            constant varchar2( 1000 ) := c_jet_area || ',' || c_jet_bar|| ',' || c_jet_combo || ',' || c_jet_line || ',' || c_jet_stock || ',' || c_jet_box_plot || ',' || c_jet_line_with_area;
    c_jet_value_column        constant varchar2( 1000 ) := c_jet_area ||','|| c_jet_bar ||','|| c_jet_combo ||','|| c_jet_dial ||','|| c_jet_funnel ||','|| c_jet_pyramid ||','|| c_jet_line ||','|| c_jet_line_with_area ||','|| c_jet_pie_donut || ',' ||c_jet_box_plot;
    c_jet_series_column       constant varchar2( 1000 ) := c_jet_area ||','|| c_jet_bar ||','|| c_jet_bubble ||','|| c_jet_combo ||','|| c_jet_funnel ||','|| c_jet_pyramid ||','|| c_jet_line ||','|| c_jet_line_with_area ||','|| c_jet_scatter;
    --c_jet_group_column        constant varchar2( 1000 ) := c_jet_area ||','|| c_jet_bar ||','|| c_jet_bubble ||','|| c_jet_combo ||','|| c_jet_line ||','|| c_jet_line_with_area ||','|| c_jet_scatter ||','|| c_jet_stock;
    c_jet_group_column        constant varchar2( 1000 ) := c_jet_area ||','|| c_jet_bar ||','|| c_jet_bubble ||','|| c_jet_line ||','|| c_jet_line_with_area ||','|| c_jet_scatter ||','|| c_jet_stock || ',' ||c_jet_box_plot;
    c_jet_common_series       constant varchar2( 1000 ) := c_jet_area || ',' || c_jet_bar || ',' || c_jet_combo || ',' ||  c_jet_line || ',' || c_jet_line_with_area;
    c_jet_line_charts         constant varchar2( 1000 ) := c_jet_line ||','|| c_jet_line_with_area ||','|| c_jet_combo ||','||c_jet_area || ',' || c_jet_polar || ',' || c_jet_radar || ',' || c_jet_scatter || ',' ||c_jet_box_plot;
    c_jet_line_style_charts   constant varchar2( 1000 ) := c_jet_line ||','|| c_jet_line_with_area ||','|| c_jet_combo ||','|| c_jet_bubble ||','|| c_jet_scatter;
    c_jet_marker_charts       constant varchar2( 1000 ) := c_jet_line ||','|| c_jet_line_with_area ||','|| c_jet_scatter ||','|| c_jet_area ||','|| c_jet_bubble || ','|| c_jet_combo || ',' ||c_jet_box_plot;
    c_jet_no_axes             constant varchar2( 1000 ) := c_jet_dial ||','|| c_jet_funnel ||','|| c_jet_pyramid ||','|| c_jet_pie_donut;
    c_jet_no_sorting          constant varchar2( 1000 ) := c_jet_stock ||','|| c_jet_gantt ||','|| c_jet_dial  ||','|| c_jet_funnel ||','|| c_jet_pyramid  ||','|| c_jet_scatter ||','|| c_jet_pie||','|| c_jet_donut;
    --
    c_data_profile_lookup_example constant varchar2( 32767 ) := q'~
<pre>
ENAME  EMPNO  SAL    DNAME
------ ------ ------ ------------
  7839 KING     5000 ACCOUNTING
  7788 SCOTT    3000 RESEARCH
     : :           : :
</pre>
<ul>
<li>Configure the <strong>DNAME_LOADED</strong> column, as a <strong>Data</strong> column with the selector of <strong>DNAME</strong>, or <strong>4</strong> (based on the selector type).</li>
<li>Use <strong>DEPTNO</strong> as the data profile column name and <strong>Lookup</strong> as the column type.</li>
<li>Use <strong>DEPT</strong> as the <strong>Table Name</strong></li>
<li>Use <strong>DEPTNO</strong> as the <strong>Return Column</strong></li>
<li>Use <strong>DNAME</strong> is the <strong>Table Column 1</strong></li>
<li><strong>DNAME_LOADED</strong> is the <strong>Data Column 1</strong>. Note that this references the data profile column which contains the actually uploaded data.</li>
</ul>
<p>
As a result, &PRODUCT_NAME. will look up <strong>DEPTNO</strong> values from the <strong>DEPT</strong> table, using the uploaded <strong>DNAME</strong> values. These will be uploaded as the <strong>DEPTNO</strong> column of the target table.
</p>~';

    ------------------------------------------------------------------------
    -- Global Variables
    ------------------------------------------------------------------------
    g_display_group_id            number  := 1;
    g_component_property_id       number  := 1;
    g_property_lov_value_id       number  := 1;
    g_component_property_sequence number;
    g_property_lov_value_sequence number;
    --
    g_null_parent_display_seq     number  := 0;
    g_parent_component_types      t_parent_component_types;
    --
    l_message_name                varchar2( 255 );
    g_used_system_messages        t_used_system_messages;

    g_cached_component_type_id    number;
    g_cached_is_page_comp_type    boolean;

    ------------------------------------------------------------------------
    -- Variables used in the generated script
    ------------------------------------------------------------------------
    l_property_id       number;
    l_component_type_id number;

    ------------------------------------------------------------------------
    -- Verifies if the entered configuration matches with our database constraints
    ------------------------------------------------------------------------
    procedure check_configuration (
        p_omit_length_check    in boolean default false,
        p_omit_not_null_check  in boolean default false )
    is
        l_data_length number;
        l_is_nullable varchar2( 1 );
        --
        procedure emit_message (
            p_severity      in varchar2,
            p_type_name     in varchar2,
            p_property_name in varchar2,
            p_db_column     in varchar2,
            p_error         in varchar2 )
        is
        begin
            sys.dbms_output.put_line( upper( p_severity ) || ': Component Type "' || p_type_name || '" - Property: "' || p_property_name || '" - DB Column "' || p_db_column || '" - ' || p_error );
        end emit_message;
    begin
        for l_type in ( select id,
                               name,
                               table_name
                          from wwv_pe_component_types
                         order by id )
        loop
            for l_comp_prop in ( select p.name as property_name,
                                        nvl( cp.db_column, p.db_column ) as db_column,
                                        p.max_length,
                                        cp.is_required,
                                        coalesce( to_char( cp.depending_on_comp_prop_id ), to_char( cp.depending_on_comp_prop_id2 ), cp.plugin_std_attributes, p.deprecated_values) as conditional,
                                        depending_on_condition_type,
                                        depending_on_expression
                                   from wwv_pe_component_props cp,
                                        wwv_pe_properties p
                                  where cp.component_type_id = l_type.id
                                    and p. id = cp.property_id
                                  order by 1 )
            loop
                begin
                    select case
                             when data_type = 'CLOB' then 32767
                             else data_length
                           end as data_length,
                           nullable
                      into l_data_length,
                           l_is_nullable
                      from sys.dba_tab_columns
                     where owner       = wwv_flow.g_flow_schema_owner
                       and table_name  = l_type.table_name
                       and column_name = l_comp_prop.db_column;
                    --
                    if not p_omit_length_check then
                        if l_comp_prop.max_length > l_data_length then
                            emit_message (
                                p_severity      => 'error',
                                p_type_name     => l_type.name,
                                p_property_name => l_comp_prop.property_name,
                                p_db_column     => l_comp_prop.db_column,
                                p_error         => 'Constraint defines ' || l_data_length || ' chars, config uses ' || l_comp_prop.max_length );
                        elsif l_comp_prop.max_length <> l_data_length then
                            emit_message (
                                p_severity      => 'warning',
                                p_type_name     => l_type.name,
                                p_property_name => l_comp_prop.property_name,
                                p_db_column     => l_comp_prop.db_column,
                                p_error         => 'Constraint defines ' || l_data_length || ' chars, config uses ' || l_comp_prop.max_length );
                        end if;
                    end if;

                    if not p_omit_not_null_check then
                        if l_comp_prop.is_required = 'N' and l_is_nullable = 'N' then
                            emit_message (
                                p_severity      => 'error',
                                p_type_name     => l_type.name,
                                p_property_name => l_comp_prop.property_name,
                                p_db_column     => l_comp_prop.db_column,
                                p_error         => 'Has not null constraint, config defines it nullable' );
                        end if;

                        if l_is_nullable = 'N' and l_comp_prop.conditional is not null and l_comp_prop.property_name not in ( 'FIRE_ON_PAGE_LOAD' )
                        then
                            emit_message (
                                p_severity      => 'error',
                                p_type_name     => l_type.name,
                                p_property_name => l_comp_prop.property_name,
                                p_db_column     => l_comp_prop.db_column,
                                p_error         => 'Has not null constraint, property is conditional.' );
                        end if;

                        if    l_comp_prop.is_required = 'Y'
                        and l_is_nullable = 'Y'
                        and l_comp_prop.conditional   is null
                        and l_comp_prop.property_name not like 'GRID_NEW%'
                        then
                            emit_message (
                                p_severity      => 'warning',
                                p_type_name     => l_type.name,
                                p_property_name => l_comp_prop.property_name,
                                p_db_column     => l_comp_prop.db_column,
                                p_error         => 'Is nullable, config always requires value - Add DB NN constraint.' );
                        end if;
                    end if;

                    if    l_comp_prop.depending_on_condition_type in ( 'EQUALS', 'NOT_EQUALS' )
                      and l_comp_prop.depending_on_expression like '%,%'
                    then
                        emit_message (
                            p_severity      => 'error',
                            p_type_name     => l_type.name,
                            p_property_name => l_comp_prop.property_name,
                            p_db_column     => l_comp_prop.db_column,
                            p_error         => 'Depending-on expression contains comma, but ' || l_comp_prop.depending_on_condition_type || ' is used!' );
                    end if;

                exception when no_data_found then
                        emit_message (
                            p_severity      => 'error',
                            p_type_name     => l_type.name,
                            p_property_name => l_comp_prop.property_name,
                            p_db_column     => l_comp_prop.db_column,
                            p_error         => 'Column not found in ' || l_type.table_name );
                end;
            end loop;
        end loop;
        --
    end check_configuration;

    procedure check_com_prop_configuration
    is
        l_groups      wwv_flow_t_varchar2;
        l_issues      wwv_flow_t_varchar2;
        l_cnt         integer := 0;
        --
        procedure check_group_sequence (
            p_component_type_id in number )
        is
            l_group             varchar2(255) := 'DiGa';
            l_found             boolean;
            l_properties        wwv_flow_t_varchar2 := wwv_flow_t_varchar2();
        begin
            l_groups     := wwv_flow_t_varchar2();
            l_issues     := wwv_flow_t_varchar2();
            --
            for l_prop in (
                select wwv_flow_lang.system_message(dg.title) as group_title,
                       wwv_flow_lang.system_message(p.prompt) as property_prompt,
                       p.name                                 as p_name,
                       coalesce( cp.db_column, p.db_column )  as db_column,
                       ct.name                                as ct_name,
                       ct.id                                  as ct_id
                from wwv_pe_component_types ct,
                     wwv_pe_component_props cp,
                     wwv_pe_properties p,
                     wwv_pe_display_groups dg
                where ct.id                = p_component_type_id
                  and cp.component_type_id = ct.id
                  and p.id                 = cp.property_id
                  and dg.id                = p.display_group_id
                order by cp.display_sequence ) loop
                --
                -- Check if the Group is in sequence
                if l_group != l_prop.group_title then
                    l_found := false;
                    for i in 1..l_groups.count loop
                        if l_groups(i) = l_prop.group_title then
                            wwv_flow_string.push(l_properties,l_prop.p_name);
                            wwv_flow_string.push(l_issues,l_prop.group_title||': '||l_prop.p_name);
                            l_found := true;
                        end if;
                    end loop;
                    if not l_found then
                        l_group := l_prop.group_title;
                        wwv_flow_string.push(l_groups, l_prop.group_title);
                    end if;
                end if;
                --
            end loop;
        end check_group_sequence;
    begin
        --
        -- Check for component props having the property groups not in sequence
        for l_ct in (
            select id,
                   name
            from wwv_pe_component_types ) loop
            --
            check_group_sequence(l_ct.id);
            --
            if l_issues.count > 0 then
                if l_cnt = 0 then
                    sys.dbms_output.put_line( 'Property-Group sequencing problems occurred!!' );
                end if;
                l_cnt := l_cnt + 1;
                sys.dbms_output.put_line( case when l_cnt > 1 then chr(10) end||l_ct.name );
            end if;
            --
            for i in 1..l_issues.count loop
                sys.dbms_output.put_line('    '||l_issues(i) );
            end loop;
        end loop;
        --
        if l_cnt = 0 then
            sys.dbms_output.put_line( 'All Property-Groups are in sequence.' );
        end if;
    end check_com_prop_configuration;

    -- Outputs any detected errors in import API configuration (API names and parameter matching)
    procedure check_import_api_configuration
    as
        procedure emit_message (
            p_severity      in varchar2,
            p_type_name     in varchar2,
            p_property_name in varchar2 default null,
            p_error         in varchar2 )
        is
        begin
            sys.dbms_output.put_line (
                upper( p_severity ) || ': Component Type "' || p_type_name || '"' ||
                case when p_property_name is not null then ' - Property: "' || p_property_name || '"' end ||
                '" - ' || p_error );
        end emit_message;

    begin
        --
        -- Check 1: Valid import_api_names
        for ct in (
            select ct.name,
                   ct.msg
              from ( select ct.name,
                            case
                                when ct.import_api_name is null then 'p_import_api_name to be defined'
                                when p.object_name is null then 'Invalid p_import_api_name: ' || ct.import_api_name
                                else null
                                end msg
                       from wwv_pe_component_types ct,
                            sys.user_procedures p
                      where ct.import_api_name = p.object_name(+) || '.' || p.procedure_name(+)  collate binary_ci ) ct
             where ct.msg is not null
            order by ct.name
        ) loop
            emit_message(
                p_severity  => 'error',
                p_type_name => ct.name,
                p_error     => ct.msg );
        end loop;

        --
        -- Check 2: Parameters are correct
        for p in (
            with
                apex_src as (
                    select ct.id component_type_id,
                           cp.id component_prop_id,
                           cp.property_id,
                           --
                           ct.name component_type_name,
                           p.name prop_name,
                           --
                           cp.db_column comp_prop_db_column,
                           p.db_column prop_db_column,
                           ct.parent_fk_column,
                           ct.import_api_name,
                           ct.import_api_params,
                           -- CP import takes precedence over the default prop API parameter
                           nvl(cp.import_api_parameter, p.import_api_parameter) import_api_parameter,
                           cp.import_api_parameter comp_prop_import_api_parameter,
                           p.import_api_parameter prop_import_api_parameter,
                           --
                           ct.is_query_only comp_type_is_query_only,
                           p.is_query_only prop_is_query_only,
                           cp.is_read_only comp_prop_is_read_only
                      from wwv_pe_component_types ct,
                           wwv_pe_component_props cp,
                           wwv_pe_properties p
                     where cp.component_type_id = ct.id
                       and p.id = cp.property_id
                       and ct.import_api_name is not null ), -- Only check paramters for APIs that are defined
                ua as (
                    -- Get arguments for all the APIs that are referenced in wwv_pe_component_types
                    select ct.id component_type_id,
                           ct.name component_type_name,
                           ua.object_id,
                           ct.parent_fk_column,
                           lower(ua.package_name || '.' || ua.object_name) api_name,
                           lower(ua.package_name) package_name,
                           lower(ua.object_name) object_name,
                           lower(ua.argument_name) argument_name,
                           ua.defaulted,
                           nvl2(pj.name, 'Y', 'N') import_api_param_override_yn -- If Y then parameter isn't required to be mapped as an override value will be used
                      from sys.user_arguments ua,
                           wwv_pe_component_types ct,
                           -- Expected format of import_api_params
                           -- [{name: "p_param_name", expression: "'value' or expression"}]
                           json_table( ct.import_api_params,
                                       '$[*]'
                                       columns( name,
                                                expression ) ) pj
                     where ua.package_name || '.' || ua.object_name = ct.import_api_name collate binary_ci
                       and ua.argument_name = pj.name(+) collate binary_ci )
            select *
              from ( select nvl(ua.component_type_name, s.component_type_name) component_type_name,
                            nvl(ua.api_name, s.import_api_name) import_api_name,
                            nvl(s.import_api_parameter, ua.argument_name) import_api_parameter,
                            s.prop_name property_name,
                            case -- Ignore parent component relationships
                                 when 'p_' || lower(nvl(s.parent_fk_column, ua.parent_fk_column)) = ua.argument_name
                                 then null
                                 -- Note: don't factor in defaulted values because they should be defined regardless of if the param has a default value
                                 -- if import_api_param_override_yn = Y then it has an override value defined in import_api_param_json and does not need to be mapped
                                 when nvl(ua.import_api_param_override_yn, 'N') = 'N' and s.component_type_id is null
                                 then 'parameter ' || ua.argument_name || ' is not mapped'
                                 -- Argument doesn't exist but is referenced
                                 when ua.object_id is null
                                 then 'unknown parameter ' || s.import_api_parameter
                                 -- no errors
                                 else null
                                 end err_msg
                       from apex_src s
                            full outer join ua on ua.component_type_id = s.component_type_id
                                              and ua.api_name = s.import_api_name
                                              and ua.argument_name = s.import_api_parameter ) params
             where params.err_msg is not null
                   -- ignore standard parameters
               and params.import_api_parameter not in ( 'p_id',
                                                        'p_flow_id',
                                                        'p_security_group_id',
                                                        'p_created_by',
                                                        'p_created_on',
                                                        'p_updated_by',
                                                        'p_updated_on' )
               and params.import_api_parameter not like 'p_attribute___' -- ingore plug-in parameter p_attribute_00
            order by params.component_type_name,
                     params.import_api_name,
                     params.import_api_parameter
        ) loop
            emit_message(
                p_severity      => 'error',
                p_type_name     => p.component_type_name,
                p_property_name => p.property_name,
                p_error         => p.import_api_name || ': ' ||  p.err_msg );
        end loop;

    end check_import_api_configuration;

    ------------------------------------------------------------------------
    -- Return the edit URL for a given component type
    ------------------------------------------------------------------------
    function get_parent_component_type_url (
        p_component_type_id     wwv_pe_component_types.id%type,
        p_url_type              varchar2 )
        return varchar2
    is
        l_rv        varchar2(4000);
    begin
        select case p_url_type
                    when 'CREATE' then create_url
                    when 'EDIT'   then edit_url
                    when 'COPY'   then copy_url
                    else null
                end
          into l_rv
          from wwv_pe_component_types
         where id = p_component_type_id;
         --
        return replace( l_rv, '%pk_value%', '%parent_pk_value%' );
        --
    end get_parent_component_type_url;
    ------------------------------------------------------------------------
    -- Get the Display Group ID, by name
    ------------------------------------------------------------------------
    function get_display_group_id (
        p_name in wwv_pe_display_groups.name%type )
        return wwv_pe_display_groups.id%type
    is
        l_id wwv_pe_display_groups.id%type;
    begin
        select id
          into l_id
          from wwv_pe_display_groups
         where name = p_name;

        return l_id;
    exception
        when no_data_found then
            raise_application_error( -20999, 'Display Group "' || p_name || '" not found!' );
        -- too_many_rows will never be raised, as name is uniquely constrained
    end get_display_group_id;

    ------------------------------------------------------------------------
    -- Get the Property ID, by name
    ------------------------------------------------------------------------
    function get_property_id (
        p_name in wwv_pe_properties.name%type )
        return wwv_pe_properties.id%type
    is
        l_id wwv_pe_properties.id%type;
    begin
        select id
          into l_id
          from wwv_pe_properties
         where name = p_name;

        return l_id;
    exception
        when no_data_found then
            raise_application_error( -20999, 'Property "' || p_name || '" not found!' );
        -- too_many_rows will never be raised, as name is uniquely constrained
    end get_property_id;

    ------------------------------------------------------------------------
    -- Get the Property Name, by ID
    ------------------------------------------------------------------------
    function get_property_name (
        p_id    in wwv_pe_properties.id%type )
        return wwv_pe_properties.name%type
    is
        l_name wwv_pe_properties.name%type;
    begin
        select name
          into l_name
          from wwv_pe_properties
         where id = p_id;

        return l_name;
    exception
        when no_data_found then
            raise_application_error( -20999, 'Property "' || p_id || '" not found!' );
        -- too_many_rows will never be raised, as ID is unique
    end get_property_name;

    ------------------------------------------------------------------------
    -- Get the Component Property ID, by Component Type ID and Property Name
    ------------------------------------------------------------------------
    function get_component_prop_id (
        p_component_type_id in wwv_pe_component_types.id%type,
        p_property_name     in wwv_pe_properties.name%type )
        return wwv_pe_component_props.id%type
    is
        l_id wwv_pe_component_props.id%type;
    begin
        select cp.id
          into l_id
          from wwv_pe_component_props cp,
               wwv_pe_properties p
         where p.name               = p_property_name
           and cp.component_type_id = p_component_type_id
           and cp.property_id       = p.id;

        return l_id;
    exception
        when no_data_found then
            raise_application_error( -20999, 'Property "' || p_property_name || '" for component type "' || p_component_type_id || '" not found!' );
        -- too_many_rows will never be raised, unique constraint on property_id
        -- and component_type_id
    end get_component_prop_id;

    ------------------------------------------------------------------------
    -- Get the Component Property ID, by Component Type ID and Property Name
    ------------------------------------------------------------------------
    function get_component_type_name (
        p_component_type_id in wwv_pe_component_types.id%type )
        return wwv_pe_component_types.name%type
    is
        l_name wwv_pe_component_types.name%type;
    begin
        select name
          into l_name
          from wwv_pe_component_types
         where id = p_component_type_id;

        return l_name;
    exception
        when no_data_found then
            raise_application_error( -20999, 'Component Type "' || p_component_type_id || '" not found!' );
        -- too_many_rows will never be raised as ID is unique
    end get_component_type_name;

    ------------------------------------------------------------------------
    -- System Message
    ------------------------------------------------------------------------
    procedure store_msg (
        p_name         in out varchar2,
        p_message_text in     varchar2 )
    is
    begin
        p_name := upper( 'PE.' || p_name );

        if p_message_text is not null and c_load_system_messages then
            merge into wwv_flow_messages$ t
            using ( select p_name         as name,
                           p_message_text as message_text
                      from sys.dual ) v
               on (     t.name              = v.name
                    and t.flow_id           = 4411
                    and t.security_group_id = 10
                    and t.message_language  = 'en' )
            when matched then
                 update
                    set t.message_text = v.message_text
                  where t.message_text != v.message_text
            when not matched then
                 insert ( t.flow_id,
                          t.security_group_id,
                          t.name,
                          t.message_text,
                          t.message_language )
                 values ( 4411,
                    10,
                          v.name,
                          v.message_text,
                    'en' );
            g_used_system_messages( p_name ) := true;
        end if;

    end store_msg;
    --
    procedure remove_unused_messages
    is
    begin
        if c_load_system_messages then
            for l_msg in ( select rowid,
                                  name
                             from wwv_flow_messages$
                            where flow_id           = 4411
                              and security_group_id = 10
                              and name              like 'PE.%'
                              and message_language  = 'en' )
            loop
                if not g_used_system_messages.exists ( l_msg.name ) then
                    delete wwv_flow_messages$
                     where rowid = l_msg.rowid;
                end if;
            end loop;
        end if;
    end remove_unused_messages;
    ------------------------------------------------------------------------
    -- Change the sequence number for a given component porperty
    -- Use this function if a comp-prop dependency prevents from storing a
    -- component property in the sequence of it's property display group
    ------------------------------------------------------------------------
    procedure resequence_comp_prop (
        p_component_type_id in wwv_pe_component_types.id%type,
        p_name              in wwv_pe_properties.name%type,
        p_previous_name     in wwv_pe_properties.name%type )
    is
        l_display_sequence      integer;
        l_property_id           number;
        l_previous_property_id  number;
    begin
        --
        l_property_id          := get_property_id( p_name => p_name );
        l_previous_property_id := get_property_id( p_name => p_previous_name );
        --
        -- Get the new display sequence
        select display_sequence + 1
          into l_display_sequence
          from wwv_pe_component_props
         where component_type_id = p_component_type_id
           and property_id       = l_previous_property_id;
        --
        -- Update the moving property display sequence
        update wwv_pe_component_props cp
           set display_sequence = l_display_sequence
         where cp.component_type_id = p_component_type_id
           and cp.property_id       = l_property_id;
        --
    end resequence_comp_prop;
    --
    ------------------------------------------------------------------------
    -- Change the sequence number for a given amount of component porperties
    -- A maximum of 9 properties can be moved as block
    -- Use this function if a comp-prop dependency prevents from storing a
    -- component property in the sequence of it's property display group
    ------------------------------------------------------------------------
    procedure resequence_comp_prop_bulk (
        p_component_type_id in wwv_pe_component_types.id%type,
        p_names             in wwv_flow_t_varchar2,
        p_previous_name     in wwv_pe_properties.name%type )
    is
    begin
        if p_names.count > 9 then
            raise_application_error(-20001,'Too many properties! A maximum of 9 properties can be moved!');
        end if;
        --
        for i in 1..p_names.count loop
            resequence_comp_prop (
                p_component_type_id => p_component_type_id,
                p_name              => p_names(i),
                p_previous_name     => case i when 1 then p_previous_name else p_names(i-1) end );
        end loop;
    end resequence_comp_prop_bulk;
    --
    ------------------------------------------------------------------------
    -- Component Types
    ------------------------------------------------------------------------
    procedure store_component_type (
        p_id                            in number,
        p_name                          in varchar2,
        p_singular_title                in varchar2,
        p_plural_title                  in varchar2,
        p_table_name                    in varchar2,
        p_view_name                     in varchar2 default null,
        p_import_api_name               in varchar2 default null,
        -- Array of default parameter values
        -- Ex: [{name: "p_param_name", expression: "'value' or expression"}]
        p_import_api_params             in varchar2 default null,
        p_pk_column                     in varchar2 default 'ID',
        p_parent_component_type_id      in number   default null,
        p_parent_fk_column              in varchar2 default null,
        p_page_id_column                in varchar2 default null,
        p_display_column                in varchar2,
        p_alt_display_column            in varchar2 default null,
        p_where_clause                  in varchar2 default null,
        p_validation_plsql_ret_error    in varchar2 default null,
        p_plugin_type                   in varchar2 default null,
        p_plugin_column                 in varchar2 default null,
        p_supported_tmpl_components     in varchar2 default null,
        p_create_url                    in varchar2 default null,
        p_edit_url                      in varchar2 default null,
        p_copy_url                      in varchar2 default null,
        p_file_path                     in varchar2 default null,
        p_is_page_designer_shared       in boolean  default false,
        p_is_query_only                 in boolean  default false,
        p_is_shared_designer            in boolean  default false )
    is
        l_is_page_designer_shared       varchar2( 1 ) := case when p_is_page_designer_shared    then 'Y' else 'N' end;
        l_is_query_only                 varchar2( 1 ) := case when p_is_query_only              then 'Y' else 'N' end;
        l_is_shared_designer            varchar2( 1 ) := case when p_is_shared_designer         then 'Y' else 'N' end;
        l_msg_plural_title              wwv_flow_messages$.name%type;
        l_msg_singular_title            wwv_flow_messages$.name%type;
        l_display_sequence              number;
    begin
        ------------------------------------------------------------------------
        -- Store system message
        ------------------------------------------------------------------------
        l_msg_plural_title := 'COMPONEN.TYPE.' || p_name || '.PLURAL';
        store_msg (
            p_name         => l_msg_plural_title,
            p_message_text => p_plural_title );

        l_msg_singular_title := 'COMPONEN.TYPE.' || p_name || '.SINGULAR';
        store_msg (
            p_name         => l_msg_singular_title,
            p_message_text => p_singular_title );

        ------------------------------------------------------------------------
        -- Calculate Display Sequence
        ------------------------------------------------------------------------
        if p_parent_component_type_id is not null then
            if not g_parent_component_types.exists( p_parent_component_type_id ) then
                g_parent_component_types( p_parent_component_type_id ) := 0;
            end if;
            --
            g_parent_component_types( p_parent_component_type_id ) := g_parent_component_types( p_parent_component_type_id ) + 1;
            l_display_sequence := g_parent_component_types( p_parent_component_type_id );
        else
            l_display_sequence := g_null_parent_display_seq + 1;
        end if;

        insert into wwv_pe_component_types (
            id,
            name,
            table_name,
            view_name,
            import_api_name,
            import_api_params,
            plural_title,
            singular_title,
            display_sequence,
            pk_column,
            parent_component_type_id,
            parent_fk_column,
            page_id_column,
            display_column,
            alt_display_column,
            where_clause,
            validation_plsql_ret_error,
            plugin_type,
            plugin_column,
            supported_template_components,
            create_url,
            edit_url,
            copy_url,
            file_path,
            is_page_designer_shared,
            is_query_only,
            is_shared_designer )
        values (
            p_id,
            p_name,
            p_table_name,
            p_view_name,
            p_import_api_name,
            p_import_api_params,
            l_msg_plural_title, -- Store msg reference
            l_msg_singular_title, -- Store msg reference
            l_display_sequence,
            p_pk_column,
            p_parent_component_type_id,
            p_parent_fk_column,
            p_page_id_column,
            p_display_column,
            p_alt_display_column,
            p_where_clause,
            p_validation_plsql_ret_error,
            p_plugin_type,
            p_plugin_column,
            p_supported_tmpl_components,
            p_create_url,
            p_edit_url,
            p_copy_url,
            p_file_path,
            l_is_page_designer_shared,
            l_is_query_only,
            l_is_shared_designer )
        ;

    end store_component_type;

    ------------------------------------------------------------------------
    -- Display Groups
    ------------------------------------------------------------------------
    procedure store_display_group (
        p_name  in varchar2,
        p_title in varchar2 )
    is
        l_msg_name_title wwv_flow_messages$.name%type;
    begin
        ------------------------------------------------------------------------
        -- Store system message
        ------------------------------------------------------------------------
        l_msg_name_title := 'DISPLAY_GROUP.' || p_name;
        store_msg (
            p_name         => l_msg_name_title,
            p_message_text => p_title );

        insert into wwv_pe_display_groups (
            id,
            name,
            title )
        values (
            g_display_group_id,
            p_name,
            l_msg_name_title ) -- Store msg reference
        ;

        -- Always increment global display group id
        g_display_group_id := g_display_group_id + 1;
    end store_display_group;

    ------------------------------------------------------------------------
    -- This function is used to determine if the help text of a property
    -- should be stored in our 4411-system text messages. Properties which are
    -- currently just used by our YAML export, don't have to store help text,
    -- it would just increase our translation budget.
    -- The help text of those properties hasn't been modified yet and would
    -- just lead to unnecessary translation costs!
    ------------------------------------------------------------------------
    function is_new_shared_comp_property (
        p_id in number )
        return boolean
    is
    begin
        /*
        -- Use this query to adjust the return clause of this function.
        -- The query should'nt return any records. It will show
        -- Page Designer or Workflow Designer properties that are in those
        -- ranges.
        --
        select ct.name as component_type_name,
               cp.property_id,
               p.name as property_name
          from wwv_pe_component_types ct,
               wwv_pe_component_props cp,
               wwv_pe_properties      p
         where (  ct.page_id_column      is not null
                or ct.name               = 'PAGE'
                or ct.is_shared_designer = 'Y' )
           and cp.component_type_id = ct.id
           and (   cp.property_id between 1250 and 1280
                or cp.property_id between 1283 and 1363
                or cp.property_id between 1370 and 1401
                or cp.property_id between 1403 and 1466
                or cp.property_id between 1468 and 1500
                or cp.property_id between 1606 and 1658
                or cp.property_id between 1790 and 1999
                or cp.property_id between 2201 and 2327
                or cp.property_id between 5700 and 5977
               )
           and p.id = cp.property_id;
        -- */
        -- Number ranges which are just used by Shared Component Properties and
        -- which are not used by Page Designer or Workflow Designer configuration
        return (  p_id between 1250 and 1280
               or p_id between 1283 and 1363
               or p_id between 1370 and 1401
               or p_id between 1403 and 1466
               or p_id between 1468 and 1500
               or p_id between 1606 and 1658
               or p_id between 1790 and 1999
               or p_id between 2201 and 2327
               or p_id between 5700 and 5977
               );
    end is_new_shared_comp_property;
    --
    --
    ------------------------------------------------------------------------
    -- Properties
    ------------------------------------------------------------------------
    procedure store_property (
        p_id                           in number,
        p_name                         in varchar2,
        p_prompt                       in varchar2,
        p_property_type                in varchar2,
        p_prop_type_yesno_override_y   in varchar2     default null,
        p_prop_type_yesno_override_n   in varchar2     default null,
        p_multi_value_delimiter        in varchar2     default null,
        p_db_column                    in varchar2,
        p_import_api_parameter         in varchar2     default null,
        p_is_query_only                in boolean      default false,
        p_display_length               in number       default null,
        p_max_length                   in number       default null,
        p_min_value                    in number       default null,
        p_max_value                    in number       default null,
        p_unit                         in varchar2     default null,
        p_validation_plsql_ret_error   in varchar2     default null,
        p_text_case                    in varchar2     default null,
        p_restricted_characters        in varchar2     default null,
        p_sql_min_column_count         in number       default null,
        p_sql_max_column_count         in number       default null,
        p_column_data_types            in varchar2     default null,
        p_examples                     in varchar2     default null,
        p_display_group_name           in varchar2,
        p_lov_type                     in varchar2     default null,
        p_lov_component_type_id        in number       default null,
        p_lov_component_type_scope     in varchar2     default null,
        p_is_translatable              in boolean      default false,
        p_is_searchable                in boolean      default true,
        p_deprecated_values            in varchar2     default null,
        p_is_internal                  in boolean      default false,
        p_min_db_version               in number       default null,
        p_help_text                    in varchar2     default null,
        p_comment_text                 in varchar2     default null )
    is
        l_display_group_id      wwv_pe_display_groups.id%type;
        l_msg_name_prop_prompt  wwv_flow_messages$.name%type;
        l_msg_name_prop_help    wwv_flow_messages$.name%type;
        l_msg_name_unit         wwv_flow_messages$.name%type;
        l_msg_name_examples     wwv_flow_messages$.name%type;
        l_import_api_parameter  wwv_pe_properties.import_api_parameter%type;
        l_text_case             wwv_pe_properties.text_case%type             := p_text_case;
        l_display_length        wwv_pe_properties.display_length%type        := p_display_length;
        l_max_length            wwv_pe_properties.max_length%type            := p_max_length;
        l_multi_value_delimiter wwv_pe_properties.multi_value_delimiter%type := p_multi_value_delimiter;
        l_help_text             wwv_flow_messages$.message_text%type         := p_help_text;
        l_examples              wwv_flow_messages$.message_text%type         := p_examples;
        l_is_translatable       varchar2( 1 ) := case when p_is_translatable then 'Y' else 'N' end;
        l_is_searchable         varchar2( 1 ) := case when p_is_searchable   then 'Y' else 'N' end;
        l_is_query_only         varchar2( 1 ) := case when p_is_query_only   then 'Y' else 'N' end;
        l_is_internal           varchar2( 1 ) := case when p_is_internal     then 'Y' else 'N' end;
    begin
        ------------------------------------------------------------------------
        -- Get Display Group ID, by Display Group Name
        ------------------------------------------------------------------------
        l_display_group_id := get_display_group_id( p_display_group_name );

        ------------------------------------------------------------------------
        -- Reset Property LOV Values sequence ready for  Property LOV values
        -- for this Property.
        ------------------------------------------------------------------------
        g_property_lov_value_sequence := 10;

        ------------------------------------------------------------------------
        -- Store system messages
        ------------------------------------------------------------------------
        l_msg_name_prop_prompt := 'PROPERTY.' || p_name || '.PROMPT';
        l_msg_name_prop_help   := 'PROPERTY.' || p_name || '.HELP';
        store_msg (
            p_name         => l_msg_name_prop_prompt,
            p_message_text => p_prompt );
        --
        if p_property_type = 'COLOR' then
            l_help_text := l_help_text ||
q'~
<p>The color is specified using hexadecimal (hex) notation, RGB color codes, or HTML color names. Hex notation is defined as #xxyyzz (a # followed by 3 double digit hex numbers), where xx, yy, and zz represent the two character hex values for red, green and blue respectively.
RGB codes are defined as RGB(xxx,xxx,xxx), where xxx is a number between 0 and 255 each representing the single 8-bit byte value for red, green, and blue respectively.</p>
<p>Search the internet for 'HTML Color Codes' to find the equivalent hex code or RGB code for the color you wish to utilize.</p>~';
        end if;
        --
        -- Don't save the help text yet for the Shared Components properties. The help text
        -- has to be reworked and we don't want to translate them multiple times.
        if is_new_shared_comp_property( p_id ) then
            l_msg_name_prop_help := null;
        else
            store_msg (
                p_name         => l_msg_name_prop_help,
                p_message_text => l_help_text );
        end if;
        --
        if p_unit is not null then
            l_msg_name_unit := 'PROPERTY.' || p_name || '.UNIT';
            store_msg (
                p_name         => l_msg_name_unit,
                p_message_text => p_unit );
        end if;
        --
        if p_property_type = 'COLOR' and l_examples is null then
            l_examples :=
'Examples of major HTML color codes include -
<ul>
  <li><strong><span style="background-color: lightgray; color: black;">&nbsp;&nbsp;Black&nbsp;&nbsp;</span></strong> <code>#000000 RGB(0,0,0)</code></li>
  <li><strong><span style="background-color: lightgray; color: red;">&nbsp;&nbsp;Red&nbsp;&nbsp;</span></strong> <code>#FF0000 RGB(255,0,0)</code></li>
  <li><strong><span style="background-color: lightgray; color: yellow;">&nbsp;&nbsp;Yellow&nbsp;&nbsp;</span></strong> <code>#FFFF00 RGB(255,255,0)</code></li>
  <li><strong><span style="background-color: lightgray; color: lime;">&nbsp;&nbsp;Lime&nbsp;&nbsp;</span></strong> <code>#00FF00 RGB(0,255,0)</code></li>
  <li><strong><span style="background-color: lightgray; color: green;">&nbsp;&nbsp;Green&nbsp;&nbsp;</span></strong> <code>#008000 RGB(0,128,0)</code></li>
  <li><strong><span style="background-color: lightgray; color: aqua;">&nbsp;&nbsp;Aqua&nbsp;&nbsp;</span></strong> <code>#00FFFF RGB(0,255,255)</code></li>
  <li><strong><span style="background-color: lightgray; color: blue;">&nbsp;&nbsp;Blue&nbsp;&nbsp;</span></strong> <code>#0000FF RGB(0,255,255)</code></li>
  <li><strong><span style="background-color: lightgray; color: navy;">&nbsp;&nbsp;Navy&nbsp;&nbsp;</span></strong> <code>#000080 RGB(0,0,128)</code></li>
  <li><strong><span style="background-color: lightgray; color: white;">&nbsp;&nbsp;White&nbsp;&nbsp;</span></strong> <code>#FFFFFF RGB(255,255,255)</code></li>
</ul>';
        end if;
        --
        if l_examples is not null then
            -- Don't save the examples yet for the Shared Components properties. The examples
            -- have to be reworked and we don't want to translate them multiple times.
            if not is_new_shared_comp_property( l_property_id ) then
                l_msg_name_examples := 'PROPERTY.' || p_name || '.EXAMPLES';
                store_msg (
                    p_name         => l_msg_name_examples,
                    p_message_text => l_examples );
            end if;
        end if;
        -- Search doesn't make sense for a few property types
        if   ( p_lov_type is not null and p_lov_type not like '%FORMAT_MASK%' and p_lov_type <> 'DISTINCT' )
          or p_property_type in ( 'YES NO', 'SUBSCRIPTION', 'HIDDEN' )
        then
            l_is_searchable := 'N';
        end if;

        -- Numbers can have up to 22 digits
        if p_property_type = 'NUMBER' and l_max_length is null then
            l_max_length := 22;
        elsif p_property_type = 'COLOR' and ( l_display_length is null or l_max_length is null ) then
            l_display_length := nvl( l_display_length, 7 );
            l_max_length     := nvl( l_max_length, 255 );
        end if;

        -- Items are always in uppercase
        if p_property_type in ( 'ITEM', 'FACET', 'SFILTER' ) then
            l_text_case := 'UPPER';
        end if;

        -- Checkboxes should always use a multi-value delimiter
        if p_property_type = 'CHECKBOXES' and l_multi_value_delimiter is null then
            l_multi_value_delimiter := ':';
        end if;

        -- Set the API parameter here (rather than above) so that if the parameter name is too large it'll be caught in exception handler and p_name will be displayed
        -- Note: substr is TEMPORARY as some columns (ex INIT_GEOMETRY_SDOGEOM_COLUMN don't have a defined parameter yet so need to let pass)
        l_import_api_parameter := 'p_' || lower(coalesce(p_import_api_parameter, substr(p_db_column, 1, 28)));


        insert into wwv_pe_properties (
            id,
            name,
            prompt,
            property_type,
            prop_type_yesno_override_y,
            prop_type_yesno_override_n,
            multi_value_delimiter,
            db_column,
            import_api_parameter,
            is_query_only,
            display_length,
            max_length,
            min_value,
            max_value,
            unit,
            validation_plsql_ret_error,
            text_case,
            restricted_characters,
            sql_min_column_count,
            sql_max_column_count,
            column_data_types,
            examples,
            display_group_id,
            lov_type,
            lov_component_type_id,
            lov_component_type_scope,
            is_translatable,
            is_searchable,
            deprecated_values,
            is_internal,
            min_db_version,
            help_text,
            comment_text )
        values (
            p_id,
            p_name,
            l_msg_name_prop_prompt,
            p_property_type,
            p_prop_type_yesno_override_y,
            p_prop_type_yesno_override_n,
            l_multi_value_delimiter,
            p_db_column,
            l_import_api_parameter,
            l_is_query_only,
            l_display_length,
            l_max_length,
            p_min_value,
            p_max_value,
            l_msg_name_unit,
            p_validation_plsql_ret_error,
            l_text_case,
            p_restricted_characters,
            p_sql_min_column_count,
            p_sql_max_column_count,
            p_column_data_types,
            l_msg_name_examples,
            l_display_group_id,
            p_lov_type,
            p_lov_component_type_id,
            p_lov_component_type_scope,
            l_is_translatable,
            l_is_searchable,
            p_deprecated_values,
            l_is_internal,
            p_min_db_version,
            l_msg_name_prop_help,
            p_comment_text )
        ;

    exception when others then
    for l_i in ( select name from wwv_pe_properties where id = p_id ) loop
    raise_application_error(-20111, 'exists: '||l_i.name||' new: '||p_id||' name: '||p_name);
    end loop;
        raise_application_error( -20111, 'Property Name: ' || p_name || ' sqlerrm: ' || sqlerrm );
    end store_property;

    ------------------------------------------------------------------------
    -- Property LOV Values
    ------------------------------------------------------------------------
    procedure store_property_lov_values (
        p_property_id    in number,
        p_display_value  in varchar2,
        p_return_value   in varchar2,
        p_icon           in varchar2 default null,
        p_is_quick_pick  in varchar2 default 'N',
        p_is_internal    in varchar2 default 'N',
        p_is_deprecated  in varchar2 default 'N',
        p_min_db_version in number   default null,
        p_help_text      in varchar2 default null,
        p_comment_text   in varchar2 default null )
    is
        l_msg_name_prop_lov_val wwv_flow_messages$.name%type;
        l_msg_name_prop_help    wwv_flow_messages$.name%type;
    begin
        ------------------------------------------------------------------------
        -- Store system messages
        ------------------------------------------------------------------------
        l_msg_name_prop_lov_val := 'PROPERTY.' || get_property_name( p_property_id ) || '.LOV.' || upper( p_return_value ) || '.D';
        store_msg (
            p_name         => l_msg_name_prop_lov_val,
            p_message_text => p_display_value );
        --
        if p_help_text is not null then
            --
            -- Don't save the help text yet for the Shared Components properties. The help text
            -- has to be reworked and we don't want to translate them multiple times.
            if not is_new_shared_comp_property( p_property_id ) then
                l_msg_name_prop_help := 'PROPERTY.' || get_property_name( p_property_id ) || '.LOV.' || upper( p_return_value ) || '.HELP';
                store_msg (
                    p_name         => l_msg_name_prop_help,
                    p_message_text => p_help_text );
            end if;
        end if;

        insert into wwv_pe_property_lov_values (
            id,
            property_id,
            display_sequence,
            display_value,
            return_value,
            icon,
            is_quick_pick,
            is_internal,
            is_deprecated,
            min_db_version,
            help_text,
            comment_text )
        values (
            g_property_lov_value_id,
            p_property_id,
            g_property_lov_value_sequence,
            l_msg_name_prop_lov_val,
            p_return_value,
            p_icon,
            p_is_quick_pick,
            p_is_internal,
            p_is_deprecated,
            p_min_db_version,
            l_msg_name_prop_help,
            p_comment_text )
        ;
        --
        g_property_lov_value_id       := g_property_lov_value_id + 1;
        g_property_lov_value_sequence := g_property_lov_value_sequence + 10;

    end store_property_lov_values;

    ------------------------------------------------------------------------
    -- Component Properties
    ------------------------------------------------------------------------
    procedure store_component_prop (
        p_component_type_id             in number,
        p_property_name                 in varchar2,
        p_db_column                     in varchar2     default null,
        p_import_api_parameter          in varchar2     default null,
        p_view_column                   in varchar2     default null,
        p_is_required                   in boolean,
        p_check_uniqueness              in varchar2     default null,
        p_is_common                     in boolean,
        p_is_read_only                  in boolean      default false,
        p_reference_on_delete           in varchar2     default null,
        p_reference_scope               in varchar2     default 'COMPONENT',
        p_supports_substitution         in boolean      default true,
        p_supports_template_directive   in varchar2     default null,
        p_custom_data_type              in varchar2     default null,
        p_default_value                 in varchar2     default null,
        p_null_text                     in varchar2     default null,
        p_null_help_text                in varchar2     default null,
        p_plugin_std_attributes         in varchar2     default null,
        p_features_comp_prop_name       in varchar2     default null,
        p_features                      in varchar2     default null,
        p_depending_on_comp_prop_name   in varchar2     default null,
        p_depending_on_has_to_exist     in boolean      default true,
        p_depending_on_condition_type   in varchar2     default null,
        p_depending_on_expression       in varchar2     default null,
        p_depending_on_comp_prop_name2  in varchar2     default null,
        p_depending_on_has_to_exist2    in boolean      default true,
        p_depending_on_condition_type2  in varchar2     default null,
        p_depending_on_expression2      in varchar2     default null,
        p_parent_comp_type_id           in number       default null,
        p_parent_comp_prop_name         in varchar2     default null,
        p_examples                      in varchar2     default null,
        p_help_text                     in varchar2     default null,
        p_important_for_accessibility   in boolean      default false,
        p_accessibility_help_text       in varchar2     default null,
        p_comment_text                  in varchar2     default null )
    is
        l_property_id                 wwv_pe_properties.id%type;
        l_property_type               wwv_pe_properties.property_type%type;
        l_import_api_parameter        wwv_pe_component_props.import_api_parameter%type;
        l_features_comp_prop_id       wwv_pe_component_props.features_comp_prop_id%type;
        l_depending_on_com_prop_id    wwv_pe_component_props.depending_on_comp_prop_id%type;
        l_depending_on_has_to_exist   varchar2( 1 );
        l_depending_on_com_prop_id2   wwv_pe_component_props.depending_on_comp_prop_id2%type;
        l_depending_on_has_to_exist2  varchar2( 1 );
        l_parent_comp_prop_id         wwv_pe_component_props.parent_comp_prop_id%type;
        l_msg_name_comp_prop_help     wwv_flow_messages$.name%type;
        l_msg_name_null_text          wwv_flow_messages$.name%type;
        l_msg_name_null_help_text     wwv_flow_messages$.name%type;
        l_msg_name_prop_acc_help      wwv_flow_messages$.name%type;
        l_msg_name_examples           wwv_flow_messages$.message_text%type;
        l_is_required                 varchar2( 1 ) := case p_is_required
                                                         when true  then 'Y'
                                                         when false then 'N'
                                                         else null
                                                       end;
        l_is_common                   varchar2( 1 ) := case when p_is_common    then 'Y' else 'N' end;
        l_is_read_only                varchar2( 1 ) := case when p_is_read_only then 'Y' else 'N' end;
        l_supports_substitution       varchar2( 1 ) := case when p_supports_substitution       then 'Y' else 'N' end;
        l_important_for_accessibility varchar2( 1 ) := case when p_important_for_accessibility then 'Y' else 'N' end;
        l_supports_template_directive varchar2( 1 ) := p_supports_template_directive;
        l_reference_on_delete         wwv_pe_component_props.reference_on_delete%type := p_reference_on_delete;
        l_accessibility_help_text     wwv_flow_messages$.message_text%type            := p_accessibility_help_text;
        l_is_page_component_type      varchar2( 1 );

        procedure check_depending_on (
            p_condition_type in varchar2,
            p_expression     in varchar2 )
        is
        begin
            if p_expression like '%,%' and p_condition_type not in ( 'IN_LIST', 'NOT_IN_LIST', 'IN_LIST_LIKE', 'NOT_IN_LIST_LIKE' ) then
                raise_application_error(
                    -20999,
                    'Property "' || p_property_name || '" for component type "' || p_component_type_id ||
                    '" contains list values but does not use a list operator! - ' || p_condition_type );
            end if;

            if p_expression is not null and p_condition_type in ( 'NULL', 'NOT_NULL' ) then
                raise_application_error(
                    -20999,
                    'Property "' || p_property_name || '" for component type "' || p_component_type_id ||
                    '" contains list values but does not use a list operator! - ' || p_condition_type );
            end if;
        end check_depending_on;
    begin
        if g_cached_component_type_id is null or g_cached_component_type_id <> p_component_type_id then
            select id,
                   case
                     when page_id_column is not null or is_shared_designer = 'Y' or id = c_comp_type_page then 'Y'
                     else
                   'N' end
              into g_cached_component_type_id,
                   l_is_page_component_type
              from wwv_pe_component_types
             where id = p_component_type_id;
            --
            g_cached_is_page_comp_type := ( l_is_page_component_type = 'Y' );
        end if;
        ------------------------------------------------------------------------
        -- Get Property ID and type
        ------------------------------------------------------------------------
        l_property_id := get_property_id ( p_property_name );
        select property_type
          into l_property_type
          from wwv_pe_properties
         where id = l_property_id;

        -- Get API Parameter
        if p_db_column is not null or p_import_api_parameter is not null then
            -- Note: substr is TEMPORARY as some columns (ex INIT_GEOMETRY_SDOGEOM_COLUMN don't have a defined parameter yet so need to let pass)
            l_import_api_parameter := 'p_' || lower(coalesce( p_import_api_parameter, substr(p_db_column, 1, 28)));
        end if;

        ------------------------------------------------------------------------
        -- Store system messages (Only if help text is passed)
        ------------------------------------------------------------------------
        if p_null_text is not null then
            l_msg_name_null_text := 'PROPERTY.' || p_property_name || '.COMPONENT_PROPERTY.'||get_component_type_name(p_component_type_id)|| '.NULL_TEXT';
            store_msg (
                p_name         => l_msg_name_null_text,
                p_message_text => p_null_text );
        end if;

        if p_null_text is not null and p_null_help_text is not null then
            -- Don't save the help text yet for the Shared Components properties. The help text
            -- has to be reworked and we don't want to translate them multiple times.
            if g_cached_is_page_comp_type then
                l_msg_name_null_help_text := 'PROPERTY.' || p_property_name || '.COMPONENT_PROPERTY.'||get_component_type_name(p_component_type_id)|| '.NULL_TEXT.HELP';
                store_msg (
                    p_name         => l_msg_name_null_help_text,
                    p_message_text => p_null_help_text );
            end if;
        end if;

        if p_examples is not null then
            -- Don't save the examples yet for the Shared Components properties. The examples
            -- have to be reworked and we don't want to translate them multiple times.
            if not is_new_shared_comp_property( l_property_id ) and g_cached_is_page_comp_type then
                l_msg_name_examples := 'PROPERTY.'||p_property_name||'.COMPONENT_PROPERTY.'||get_component_type_name(p_component_type_id)|| '.EXAMPLES';
                store_msg (
                    p_name         => l_msg_name_examples,
                    p_message_text => p_examples );
            end if;
        end if;

        if p_help_text is not null then
            -- Don't save the help text yet for the Shared Components properties. The help text
            -- has to be reworked and we don't want to translate them multiple times.
            if not is_new_shared_comp_property( l_property_id ) and g_cached_is_page_comp_type then
                l_msg_name_comp_prop_help := 'PROPERTY.'||p_property_name||'.COMPONENT_PROPERTY.'||get_component_type_name(p_component_type_id)|| '.HELP';
                store_msg (
                    p_name         => l_msg_name_comp_prop_help,
                    p_message_text => p_help_text );
            end if;
        end if;

        if p_accessibility_help_text is not null then
            l_msg_name_prop_acc_help := 'PROPERTY.' || p_property_name || '.COMPONENT_PROPERTY.'||get_component_type_name(p_component_type_id)|| '.ACCESSIBILITY_HELP_TEXT';
            store_msg (
                p_name         => l_msg_name_prop_acc_help,
                p_message_text => p_accessibility_help_text );
        end if;

        if p_features is not null then
            l_features_comp_prop_id     := get_component_prop_id (
                                               p_component_type_id => p_component_type_id,
                                               p_property_name     => p_features_comp_prop_name );
        end if;

        if p_depending_on_comp_prop_name is not null then
            l_depending_on_com_prop_id  := get_component_prop_id (
                                               p_component_type_id => p_component_type_id,
                                               p_property_name     => p_depending_on_comp_prop_name );
            l_depending_on_has_to_exist := case when p_depending_on_has_to_exist then 'Y' else 'N' end;
        end if;

        if p_depending_on_comp_prop_name2 is not null then
            l_depending_on_com_prop_id2  := get_component_prop_id (
                                                p_component_type_id => p_component_type_id,
                                                p_property_name     => p_depending_on_comp_prop_name2 );
            l_depending_on_has_to_exist2 := case when p_depending_on_has_to_exist2 then 'Y' else 'N' end;
        end if;

        if p_parent_comp_prop_name is not null then
            l_parent_comp_prop_id := get_component_prop_id (
                                         p_component_type_id => nvl( p_parent_comp_type_id, p_component_type_id ),
                                         p_property_name     => p_parent_comp_prop_name );
        elsif l_property_type = 'REGION COLUMN' then
            l_parent_comp_prop_id := get_component_prop_id (
                                         p_component_type_id => c_comp_type_region,
                                         p_property_name     => 'REGION_SQL' );
        elsif l_property_type = 'COLUMN' then
            raise_application_error( -20999, 'Column property requires a parent property' );
        end if;

        if l_property_type not in ( 'COMBOBOX', 'CSS', 'JAVASCRIPT', 'HTML', 'LINK', 'LINK EXTENDED', 'TEXT', 'TEXT EDITOR', 'TEXTAREA' ) then
            l_supports_substitution       := 'N';
            l_supports_template_directive := null;
        end if;

        if l_property_type = 'YES NO' then
            l_is_required := 'Y';
        end if;

        if l_property_type in ( 'ITEM', 'FACET', 'SFILTER', 'ORDER BY ITEM' ) and l_reference_on_delete is null then
            l_reference_on_delete := 'WEAK_NULL';
        end if;

        -- Check if we do have a valid depending-on config
        check_depending_on (
            p_condition_type => p_depending_on_condition_type,
            p_expression     => p_depending_on_expression );

        check_depending_on (
            p_condition_type => p_depending_on_condition_type2,
            p_expression     => p_depending_on_expression2 );

        insert into wwv_pe_component_props (
            id,
            component_type_id,
            property_id,
            db_column,
            import_api_parameter,
            view_column,
            display_sequence,
            is_required,
            check_uniqueness,
            is_common,
            is_read_only,
            reference_on_delete,
            reference_scope,
            supports_substitution,
            supports_template_directive,
            custom_data_type,
            default_value,
            null_text,
            null_help_text,
            plugin_std_attributes,
            features_comp_prop_id,
            features,
            depending_on_comp_prop_id,
            depending_on_has_to_exist,
            depending_on_condition_type,
            depending_on_expression,
            depending_on_comp_prop_id2,
            depending_on_has_to_exist2,
            depending_on_condition_type2,
            depending_on_expression2,
            parent_comp_prop_id,
            examples,
            help_text,
            important_for_accessibility,
            accessibility_help_text,
            comment_text )
        values (
            g_component_property_id,
            p_component_type_id,
            l_property_id,
            p_db_column,
            l_import_api_parameter,
            p_view_column,
            g_component_property_sequence,
            l_is_required,
            p_check_uniqueness,
            l_is_common,
            l_is_read_only,
            l_reference_on_delete,
            p_reference_scope,
            l_supports_substitution,
            l_supports_template_directive,
            p_custom_data_type,
            p_default_value,
            l_msg_name_null_text,
            l_msg_name_null_help_text,
            p_plugin_std_attributes,
            l_features_comp_prop_id,
            p_features,
            l_depending_on_com_prop_id,
            l_depending_on_has_to_exist,
            p_depending_on_condition_type,
            p_depending_on_expression,
            l_depending_on_com_prop_id2,
            l_depending_on_has_to_exist2,
            p_depending_on_condition_type2,
            p_depending_on_expression2,
            l_parent_comp_prop_id,
            l_msg_name_examples,
            l_msg_name_comp_prop_help,
            l_important_for_accessibility,
            l_msg_name_prop_acc_help,
            p_comment_text )
        ;
        --
        g_component_property_id       := g_component_property_id + 1;
        g_component_property_sequence := g_component_property_sequence + 10;
        --
    exception when others then
        raise_application_error( -20999, 'Type: ' || p_component_type_id || ', Name: ' || p_property_name || ', SQLERRM: ' || sqlerrm );
    end store_component_prop;
    --
    --
    procedure store_plugin_attr_seq_offset (
        p_component_type_id in number )
    is
    begin
        update wwv_pe_component_types
           set plugin_attributes_seq_offset = g_component_property_sequence
         where id = p_component_type_id;
        --
        g_component_property_sequence := g_component_property_sequence + 2500; -- 25 custom attributes
    end store_plugin_attr_seq_offset;
    --
    --
    procedure store_comp_type_tmpl_option (
        p_component_type_id     in number,
        p_parent_comp_type_id   in number,
        p_type_name             in varchar2,
        p_edit_page_no          in integer   )
    is
    begin
        store_component_type (
            p_id                        => p_component_type_id,
            p_name                      => upper(p_type_name)||'_TEMPLATE_OPTION',
            p_singular_title            => 'Template Option',
            p_plural_title              => 'Template Options',
            p_table_name                => 'WWV_FLOW_TEMPLATE_OPTIONS',
            p_view_name                 => 'APEX_APPL_TEMPLATE_OPTIONS',
            p_import_api_name           => 'wwv_flow_imp_shared.create_template_option',
            p_parent_component_type_id  => p_parent_comp_type_id,
            p_parent_fk_column          => upper(p_type_name)||'_TEMPLATE_ID',
            p_display_column            => 'DISPLAY_NAME',
            p_where_clause              => lower(p_type_name)||'_template_id is not null',
            p_edit_url                  => get_parent_component_type_url (
                                                p_component_type_id => p_parent_comp_type_id,
                                                p_url_type          => 'EDIT' ) );
    end store_comp_type_tmpl_option;
    --
    --
    procedure store_comp_type_data_profile (
        p_profile_type_id           in number,
        p_column_type_id            in number,
        p_name_prefix               in varchar2,
        p_parent_type_id            in number,
        p_parent_fk_column          in varchar2 )
    is
    begin
        store_component_type (
            p_id                       => p_profile_type_id,
            p_name                     => p_name_prefix || '_DATA_PROFILE',
            p_singular_title           => 'Data Profile',
            p_plural_title             => 'Data Profiles',
            p_table_name               => 'WWV_FLOW_DATA_PROFILES_DEV',
            p_import_api_name          => 'wwv_flow_imp_shared.create_data_profile',
            p_parent_component_type_id => p_parent_type_id,
            p_parent_fk_column         => p_parent_fk_column,
            p_display_column           => 'NAME',
            p_create_url               => null,
            p_edit_url                 => 'f?p=4000:1925:%session%:::1925:P1925_DATA_PROFILE_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
        --
        store_component_type (
            p_id                       => p_column_type_id,
            p_name                     => p_name_prefix || '_DATA_PROFILE_COLUMN',
            p_singular_title           => 'Column',
            p_plural_title             => 'Columns',
            p_table_name               => 'WWV_FLOW_DATA_PROFILE_COLS_DEV',
            p_import_api_name          => 'wwv_flow_imp_shared.create_data_profile_col',
            p_parent_component_type_id => p_profile_type_id,
            p_parent_fk_column         => 'DATA_PROFILE_ID',
            p_display_column           => 'NAME',
            p_where_clause             => p_parent_fk_column || ' is not null',
            p_create_url               => null,
            p_edit_url                 => 'f?p=4000:1926:%session%:::1926:P1926_DATA_PROFILE_COLUMN_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    end store_comp_type_data_profile;
    --
    --
    procedure store_order_by_clause_property (
        p_name               in varchar2,
        p_display_group_name in varchar2 )
    is
    begin
        store_property (
            p_id                 => l_property_id,
            p_name               => p_name,
            p_prompt             => 'Order By Clause',
            p_property_type      => 'ORDER BY CLAUSE',
            p_db_column          => 'QUERY_ORDER_BY',
            p_display_length     => 40,
            p_max_length         => 255,
            p_display_group_name => p_display_group_name,
            p_examples           => q'~
    <dl><dt>To show the newest hires first and those which have not been hired yet last. If the date is equal, sort them by department number.</dt>
    <dd><pre>
    HIREDATE DESC NULLS LAST, DEPTNO
    </pre></dd>
    </dl>~',
            p_help_text          => q'~<p>Enter one or more comma separated column names, including directives, to define the order in which records are retrieved.</p>
            <p>Directives include:
              <ul>
                <li>ASC - Return column in ascending order</li>
                <li>DESC - Return column in descending order</li>
                <li>NULLS FIRST - Return column with no value before those with values</li>
                <li>NULLS LAST - Return column with values before those with no value</li>
              </ul>
            </p>~' );
    end store_order_by_clause_property;
    --
    --
    procedure store_ext_order_by_property (
        p_name               in varchar2 )
    is
    begin
        store_property (
            p_id                 => l_property_id,
            p_name               => p_name,
            p_prompt             => 'Order By',
            p_property_type      => 'TEXT EDITOR',
            p_db_column          => 'EXTERNAL_ORDER_BY_EXPR',
            p_display_length     => 40,
            p_max_length         => 255,
            p_display_group_name => 'EXTERNAL_FILTER_ORDER_BY',
            p_examples             => q'~
    <dl><dt>For an ORDS REST Service, order by the "job" attribute ascending, then by "ename", descending.</dt>
    <dd><pre>
    {"job": "asc", "ename": "desc"}
    </pre></dd>
    </dl>
    <dl><dt>For an Oracle Cloud Applications (SaaS) REST Service, order by the "job" attribute ascending, then by "ename", descending.</dt>
    <dd><pre>
    job:asc,ename:desc
    </pre></dd>
    </dl>~',
            p_help_text            => q'~Provide an order by expression involving one or more columns to be passed to the external REST service. The expression will be passed to the remote server as-is. The syntax depends on the type of the REST Data Source. For example, Oracle REST Data Services (ORDS) expects JSON syntax while Oracle Cloud Applications (SaaS) expects a comma-separated list of attribute names with optional direction indicator.~' );
    end store_ext_order_by_property;
    --
    --
    procedure store_lov_type_property (
        p_name in varchar2 )
    is
    begin
        store_property (
            p_id                 => l_property_id,
            p_name               => p_name,
            p_prompt             => 'Type',
            p_property_type      => 'SELECT LIST',
            p_db_column          => 'LOV_TYPE',
            p_display_group_name => 'LIST_OF_VALUES',
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select the list of values type.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Shared Component',
            p_return_value  => 'SHARED',
            p_help_text     => q'~The list of values is based on a predefined list of values, defined in Shared Components.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'SQL Query',
            p_return_value  => 'SQL_QUERY',
            p_help_text     => q'~The Dynamic list of values is based on the SQL Query you enter.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Static Values',
            p_return_value  => 'STATIC',
            p_help_text     => q'~The Static list of values is based on the text value you enter.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Function Body returning SQL Query', -- @@@
            p_return_value  => 'FUNCTION_BODY',
            p_help_text     => q'~The Dynamic list of values is based on the SQL Query returned by the entered Function Body you enter.~' );
        --
        if p_name = 'FACET_LOV_TYPE' then
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Distinct Values',
                p_return_value  => 'DISTINCT',
                p_help_text     => q'~The list of values is based on an automatically generated query that selects the distinct column values.~' );
        end if;
        --
    end store_lov_type_property;
    --
    --
    procedure store_process_point_property (
        p_property_id in number,
        p_name        in varchar2 )
    is
    begin
        store_property (
            p_id                 => p_property_id,
            p_name               => p_name,
            p_prompt             => 'Point',
            p_property_type      => 'SELECT LIST',
            p_db_column          => 'PROCESS_POINT',
            p_display_group_name => 'EXECUTION',
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select at what point in page rendering or processing this process is executed.~' );
        --
        if p_name = 'APP_PROCESS_POINT' then
            store_property_lov_values (
                p_property_id   => p_property_id,
                p_display_value => 'After Authentication',
                p_return_value  => 'AFTER_LOGIN',
                p_help_text     => q'~Executes after successful authentication.~' );
        end if;
        --
        store_property_lov_values (
            p_property_id   => p_property_id,
            p_display_value => 'New Session',
            p_return_value  => 'ON_NEW_INSTANCE',
            p_help_text     => q'~Executes when a new session is generated.~' );
        --
        store_property_lov_values (
            p_property_id   => p_property_id,
            p_display_value => 'Before Header',
            p_return_value  => 'BEFORE_HEADER',
            p_help_text     => q'~Rendering: Executes before the page renders.~' );
        --
        store_property_lov_values (
            p_property_id   => p_property_id,
            p_display_value => 'After Header',
            p_return_value  => 'AFTER_HEADER',
            p_help_text     => q'~Rendering: Executes after the header renders.~' );
        --
        store_property_lov_values (
            p_property_id   => p_property_id,
            p_display_value => 'Before Regions',
            p_return_value  => 'BEFORE_BOX_BODY',
            p_is_quick_pick => 'Y',
            p_help_text     => q'~Rendering: Executes before the regions render.~' );
        --
        store_property_lov_values (
            p_property_id   => p_property_id,
            p_display_value => 'After Regions',
            p_return_value  => 'AFTER_BOX_BODY',
            p_help_text     => q'~Rendering: Executes after the regions render.~' );
        --
        store_property_lov_values (
            p_property_id   => p_property_id,
            p_display_value => 'Before Footer',
            p_return_value  => 'BEFORE_FOOTER',
            p_help_text     => q'~Rendering: Executes before the footer renders.~' );
        --
        store_property_lov_values (
            p_property_id   => p_property_id,
            p_display_value => 'After Footer',
            p_return_value  => 'AFTER_FOOTER',
            p_help_text     => q'~Rendering: Executes after the page renders.~' );
        --
        store_property_lov_values (
            p_property_id   => p_property_id,
            p_display_value => 'After Submit',
            p_return_value  => 'ON_SUBMIT_BEFORE_COMPUTATION',
            p_help_text     => q'~Processing: Executes after the page is submitted, but before computations, validations, and page processes performed.~' );
        --
        store_property_lov_values (
            p_property_id   => p_property_id,
            p_display_value => 'Processing',
            p_return_value  => 'AFTER_SUBMIT',
            p_is_quick_pick => 'Y',
            p_help_text     => q'~Processing: Executes after validations and computations performed, when page processing performed.~' );
        --
        store_property_lov_values (
            p_property_id   => p_property_id,
            p_display_value => 'Ajax Callback',
            p_return_value  => 'ON_DEMAND',
            p_help_text     => q'~Executes when called by apex.server JavaScipt APIs.~' );
    end store_process_point_property;
    --
    --
    procedure store_default_svg_shapes_lov(
        p_property_id  in number )
    is
        c_shape_names constant wwv_flow_t_varchar2 :=
            wwv_flow_t_varchar2(
                'Default',
                'Camera',
                'Circle',
                'Circle Alternative',
                'Face Frown',
                'Face Meh',
                'Face Smile',
                'Square',
                'Square Alternative',
                'Pin Circle',
                'Pin Square',
                'Heart',
                'Pentagon',
                'Triangle',
                'Check',
                'Home',
                'Slash',
                'Shine',
                'Street View',
                'Flag Pennant',
                'Flag Swallowtail');

        c_shape_svgs constant wwv_flow_t_varchar2 :=
            wwv_flow_t_varchar2(
                -- default
                'M10 2C6.7 2 4 4.7 4 8c0 4.6 5.4 9.7 5.7 9.9.2.2.5.2.7 0 .2-.2 5.6-5.3 5.6-9.9 0-3.3-2.7-6-6-6zm0 7.9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z',
                -- Camera
                'M15 4h-1.2l-.9-1.2c-.4-.5-1-.8-1.6-.8H8.8c-.7 0-1.3.3-1.6.8L6.2 4H5c-1.1 0-2 .9-2 2v5c0 1.1.9 2 2 2h2.2l2.4 4.7c.1.2.4.3.7.2.1 0 .2-.1.2-.2l2.4-4.7H15c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-5 7c-1.4 0-2.5-1.1-2.5-2.5S8.6 6 10 6s2.5 1.1 2.5 2.5S11.4 11 10 11z',
                -- Circle
                'M10 2C6.7 2 4 4.7 4 8c0 2.5 1.6 4.7 3.9 5.6l1.6 4.1c.1.3.4.4.7.3l.3-.3 1.6-4.1c3.1-1.2 4.7-4.6 3.5-7.7C14.7 3.6 12.5 2 10 2zm0 8c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z',
                -- Circle Alternative
                'M10 2C6.7 2 4 4.7 4 8v9.5c0 .2.1.4.3.5h.2c.1 0 .3-.1.4-.2l3.7-4c3.2.8 6.5-1.2 7.3-4.4.8-3.2-1.2-6.5-4.4-7.3-.5 0-1-.1-1.5-.1zm0 8c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z',
                -- Face Frown
                'M10 2C6.7 2 4 4.7 4 8c0 3.7 5.4 9.6 5.6 9.8.2.2.5.2.7 0 .3-.2 5.7-6.1 5.7-9.8 0-3.3-2.7-6-6-6zM7.2 7c0-.4.3-.8.8-.8.4 0 .8.3.8.8s-.4.8-.8.8-.8-.4-.8-.8zm5 3.8c-.2.1-.4.1-.5-.1-.7-.9-2-1.1-3-.4-.2.1-.3.3-.4.4-.1.2-.4.2-.5.1-.2-.1-.2-.4-.1-.5 1-1.3 2.8-1.5 4-.6l.6.6c.1.1.1.4-.1.5zm-.2-3c-.4 0-.8-.3-.8-.8s.3-.8.8-.8.8.3.8.8-.4.8-.8.8z',
                -- Face Meh
                'M10 2C6.7 2 4 4.7 4 8c0 3.7 5.4 9.6 5.6 9.8.2.2.5.2.7 0 .3-.2 5.7-6.1 5.7-9.8 0-3.3-2.7-6-6-6zM7.2 7c0-.4.3-.8.8-.8.4 0 .8.3.8.8s-.4.8-.8.8-.8-.4-.8-.8zm4.3 3.9h-3c-.2 0-.4-.2-.4-.4s.2-.4.4-.4h3c.2 0 .4.2.4.4s-.2.4-.4.4zm.5-3.1c-.4 0-.8-.3-.8-.8s.3-.8.8-.8.8.3.8.8-.4.8-.8.8z',
                -- Face Smile
                'M10 2C6.7 2 4 4.7 4 8c0 3.7 5.4 9.6 5.6 9.8.2.2.5.2.7 0 .3-.2 5.7-6.1 5.7-9.8 0-3.3-2.7-6-6-6zM7.2 7c0-.4.3-.8.8-.8.4 0 .8.3.8.8s-.4.8-.8.8-.8-.4-.8-.8zm5.1 2.7c-1 1.3-2.8 1.5-4 .6l-.6-.6c-.1-.1-.1-.4.1-.5.2-.1.4-.1.5.1.7.9 2 1.1 3 .4.2-.1.3-.3.4-.4.1-.2.4-.2.5-.1s.2.4.1.5zM12 7.8c-.4 0-.8-.3-.8-.8s.3-.8.8-.8.8.3.8.8-.4.8-.8.8z',
                -- Square
                'M14 2H6c-1.1 0-2 .9-2 2v8c0 1.1.9 2 2 2h2.1l1.5 3.7c.1.3.4.4.7.3l.3-.3 1.5-3.7H14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-4 8c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z',
                -- Square Alternative
                'M14 2H6c-1.1 0-2 .9-2 2v13.5c0 .2.1.4.3.5h.2c.1 0 .3-.1.4-.2L8.4 14H14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-4 8c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z',
                -- Pin Circle
                'M10 2C7.2 2 5 4.2 5 7c0 2.6 1.9 4.7 4.5 5v5.6c0 .3.2.5.5.5s.5-.2.5-.5V12c2.7-.3 4.7-2.7 4.5-5.4-.3-2.7-2.4-4.6-5-4.6z',
                -- Pin Square
                'M13 2H7c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h2.5v5.5c0 .3.2.5.5.5s.5-.2.5-.5V12H13c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2z',
                -- Heart
                'M16 5c0-.8-.3-1.6-.9-2.1-1.2-1.2-3.1-1.2-4.3 0l-.8.8-.8-.8C8 1.7 6.1 1.7 4.9 2.9c-1.2 1.1-1.2 3 0 4.2l4.6 4.6v5.8c0 .3.2.5.5.5s.5-.2.5-.5v-5.8l4.6-4.6c.6-.5.9-1.3.9-2.1z',
                -- Pentagon
                'M15 5.5l-4.7-3.4c-.2-.1-.4-.1-.6 0L5 5.5c-.2.2-.3.4-.2.6l1.8 5.6c.1.2.3.3.5.3h2.4v5.5c0 .3.2.5.5.5s.5-.2.5-.5V12h2.4c.2 0 .4-.1.5-.3l1.8-5.6c.1-.2 0-.4-.2-.6z',
                -- Triangle
                'M15.9 11.2l-5.5-9c-.1-.2-.5-.3-.7-.1-.1 0-.1.1-.1.1l-5.5 9c-.1.2-.1.5.2.7 0 .1.1.1.2.1h5v5.5c0 .3.2.5.5.5s.5-.2.5-.5V12h5c.3 0 .5-.2.5-.5 0-.1 0-.2-.1-.3z',
                -- Check
                'M10 2C6.7 2 4 4.7 4 8c0 3.7 5.4 9.6 5.6 9.8.2.2.5.2.7 0 .3-.2 5.7-6.1 5.7-9.8 0-3.3-2.7-6-6-6zm2.9 4.9l-3 3c-.2.1-.6.1-.8 0L7.6 8.4c-.2-.2-.2-.5 0-.7s.5-.2.7 0l1.1 1.1L12 6.2c.2-.2.5-.2.7 0s.3.5.2.7z',
                -- Home
                '<path d="M17.8 7.6l-7.5-5.5c-.2-.1-.4-.1-.6 0L2.2 7.5c-.2.2-.3.5-.1.7.2.2.5.3.7.1L4 7.5v6c0 .3.2.5.5.5h3.2l1.9 3.7c.1.2.4.3.7.2.1 0 .2-.1.2-.2l1.9-3.7h3.2c.3 0 .5-.2.5-.5v-6l1.2.9c.2.2.5.1.7-.1.1-.3 0-.6-.2-.7z"/><path d="M8.5 8.5v2c0 .3.2.5.5.5h2c.3 0 .5-.2.5-.5v-2c0-.3-.2-.5-.5-.5H9c-.3 0-.5.2-.5.5z" fill="#fff"/>',
                -- Slash
                'M17.9 2.1c-.2-.2-.5-.2-.7 0l-2.3 2.3C13 1.7 9.2 1.1 6.5 3.1 4.9 4.3 4 6.1 4 8c.1 1.9.8 3.8 1.9 5.4l-3.8 3.8c-.2.2-.2.5 0 .7s.5.2.7 0l15-15c.2-.2.2-.6.1-.8zM9.5 9.8c-1.1-.3-1.7-1.4-1.4-2.4S9.5 5.7 10.5 6c.7.2 1.2.7 1.4 1.4L9.5 9.8zM7.1 15c.8 1 1.6 2 2.6 2.8.2.2.5.2.7 0 .2-.1 5.6-5.2 5.6-9.8 0-.6-.1-1.1-.2-1.6L7.1 15z',
                -- Shine
                'M10 7c-2.2 0-4 1.8-4 4 0 2.3 3.2 6.4 3.6 6.8.2.2.5.2.7.1l.1-.1c.4-.5 3.6-4.5 3.6-6.8 0-2.2-1.8-4-4-4zm0 5c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1zM3.6 4.9c-.2-.1-.5-.1-.7.1-.2.3-.1.6.1.7l1.9 1.4c0 .1.1.1.3.1.3 0 .5-.2.5-.5 0-.2-.1-.3-.2-.4L3.6 4.9zm4 .1c.1.2.3.3.5.3h.2c.3-.1.4-.4.3-.6l-.9-2.4c0-.2-.3-.4-.6-.3-.3.1-.4.4-.3.6L7.6 5zm9.5 0c-.2-.2-.5-.3-.7-.1l-1.9 1.4c-.2.2-.3.5-.1.7.1.1.2.2.4.2.1 0 .2 0 .3-.1L17 5.7c.2-.1.3-.4.1-.7zm-5.3.3h.2c.2 0 .4-.1.5-.3l.8-2.3c.1-.3 0-.5-.3-.6-.3-.1-.5 0-.6.3l-.8 2.3c-.2.2-.1.5.2.6z',
                -- Street View
                '<path d="M14.7 11.6c-.3-.1-.5.1-.6.3s.1.5.3.6c1.6.5 2.6 1.2 2.6 1.9 0 1.2-2.9 2.5-7 2.5s-7-1.3-7-2.5c0-.7 1-1.4 2.6-1.9.3 0 .4-.3.3-.5-.1-.3-.4-.4-.6-.3-2.1.6-3.3 1.6-3.3 2.8 0 2 3.4 3.5 8 3.5s8-1.5 8-3.5c0-1.2-1.2-2.2-3.3-2.9z"/><path d="M7.7 10.9c.2.2.3.5.3.7V14c0 .6.4 1 1 1h2c.6 0 1-.4 1-1v-2.4c0-.3.1-.5.3-.7l.1-.1c.4-.4.6-.9.6-1.4V7.8c0-.7-.3-1.3-.9-1.6-1.2 1.2-3.1 1.2-4.2 0-.6.3-.9.9-.9 1.6v1.6c0 .5.2 1 .6 1.4l.1.1z"/><circle cx="10" cy="4" r="2"/>',
                -- Flag Pennant
                'M16.7 6.5L3.7 2c-.3-.1-.6.1-.7.3v15.2c0 .3.2.5.5.5s.5-.2.5-.5v-5.6l12.7-4.4c.3-.1.4-.4.3-.6-.1-.2-.2-.3-.3-.4z',
                -- Flag Swallowtail
                'M13.2 7l3.7-4.2c.2-.2.2-.5 0-.7-.2-.1-.3-.1-.4-.1h-13c-.3 0-.5.2-.5.5v15c0 .3.2.5.5.5s.5-.2.5-.5V12h12.5c.3 0 .5-.2.5-.5 0-.1 0-.2-.1-.3L13.2 7z' );

    begin
        for i in 1 .. c_shape_names.count loop
            store_property_lov_values (
                p_property_id   => p_property_id,
                p_display_value => c_shape_names(i),
                p_return_value  => c_shape_names(i),
                p_help_text     =>    '<svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" paint-order="stroke" viewBox="0 0 20 20">'
                                   || case when substr( c_shape_svgs( i ), 1, 5 ) != '<path' then '<path d="' end
                                   || c_shape_svgs( i )
                                   || case when substr( c_shape_svgs( i ), 1, 5 ) != '<path' then '"/>' end
                                   || '</svg>' );

        end loop;
    end store_default_svg_shapes_lov;
    --
    --
    procedure store_color_spectrum_property (
        p_start_property_id  in number,
        p_name_prefix        in varchar2,
        p_db_column_prefix   in varchar2,
        p_display_group_name in varchar2 )
    is
        l_property_id number := p_start_property_id;

        ------------------------------------------------------------------------
        function generate_color_html(
            p_color_list in wwv_flow_t_varchar2 )
            return varchar2
        is
            l_html  varchar2(32767);
            l_width varchar2(4) := '30px';
        begin
            l_html := '<div aria-hidden="true">';
            for i in 1 .. p_color_list.count loop
                l_html := l_html || '<div style="display:inline-block;background-color:' || p_color_list( i ) || '; width:' || l_width || ';">&nbsp;</div>';
            end loop;
            l_html := l_html || '</div>';
            return l_html;
        end generate_color_html;

    begin
        store_property (
            p_id                          => l_property_id,
            p_name                        => p_name_prefix || 'TYPE',
            p_prompt                      => 'Color Scheme',
            p_property_type               => 'SELECT LIST',
            p_lov_type                    => 'STATIC',
            p_db_column                   => p_db_column_prefix || 'TYPE',
            p_display_group_name          => p_display_group_name,
            p_help_text                   => q'~Choose the color scheme type.~' );
        --
        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Sequential',
            p_return_value  => 'SEQUENTIAL',
            p_help_text     => 'This color scheme is suitable to visualize sequential values, going from a low to a high value.' );
        --
        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Diverging',
            p_return_value  => 'DIVERGING',
            p_help_text     => 'This color scheme is suitable to visualize diverging values, going from one extreme to another.' );
        --
        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Qualitative',
            p_return_value  => 'QUALITATIVE',
            p_help_text     => 'This color scheme is suitable to visualize distinct values.' );
        --
        l_property_id := l_property_id + 1;
        --
        store_property (
            p_id                          => l_property_id,
            p_name                        => p_name_prefix || 'SEQ_NAME',
            p_prompt                      => 'Scheme Name',
            p_property_type               => 'SELECT LIST',
            p_lov_type                    => 'STATIC',
            p_db_column                   => p_db_column_prefix || 'NAME',
            p_display_group_name          => p_display_group_name,
            p_help_text                   => q'~Choose one of the predefined sequential color schemes. These are suitable to visualize sequential values, going from a low to a high value. Color schemes from cartocolors (<a rel="noopener noreferrer" href="https://github.com/CartoDB/cartocolor" target="_blank">CARTOcolor on GitHub)</a>.~' );
        --
        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Burgundy',
            p_return_value  => 'Burg',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#ffc6c4','#f4a3a8','#e38191','#cc607d','#ad466c','#8b3058','#672044' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Burgundy to Yellow',
            p_return_value  => 'BurgYl',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#fbe6c5','#f5ba98','#ee8a82','#dc7176','#c8586c','#9c3f5d','#70284a' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Red to Orange',
            p_return_value  => 'RedOr',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#f6d2a9','#f5b78e','#f19c7c','#ea8171','#dd686c','#ca5268','#b13f64' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Orange to Yellow',
            p_return_value  => 'OrYel',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#ecda9a','#efc47e','#f3ad6a','#f7945d','#f97b57','#f66356','#ee4d5a' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Peach',
            p_return_value  => 'Peach',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#fde0c5','#facba6','#f8b58b','#f59e72','#f2855d','#ef6a4c','#eb4a40' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Pink to Yellow',
            p_return_value  => 'PinkYl',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#fef6b5','#ffdd9a','#ffc285','#ffa679','#fa8a76','#f16d7a','#e15383' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Mint',
            p_return_value  => 'Mint',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#e4f1e1','#b4d9cc','#89c0b6','#63a6a0','#448c8a','#287274','#0d585f' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Blue to Green',
            p_return_value  => 'BluGrn',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#c4e6c3','#96d2a4','#6dbc90','#4da284','#36877a','#266b6e','#1d4f60' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Dark Mint',
            p_return_value  => 'DarkMint',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#d2fbd4','#a5dbc2','#7bbcb0','#559c9e','#3a7c89','#235d72','#123f5a' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Emerald',
            p_return_value  => 'Emrld',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#d3f2a3','#97e196','#6cc08b','#4c9b82','#217a79','#105965','#074050' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Blue to Yellow',
            p_return_value  => 'BluYl',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#f7feae','#b7e6a5','#7ccba2','#46aea0','#089099','#00718b','#045275' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Teal',
            p_return_value  => 'Teal',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#d1eeea','#a8dbd9','#85c4c9','#68abb8','#4f90a6','#3b738f','#2a5674' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Teal to Green',
            p_return_value  => 'TealGrn',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#b0f2bc','#89e8ac','#67dba5','#4cc8a3','#38b2a3','#2c98a0','#257d98' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Purple',
            p_return_value  => 'Purp',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#f3e0f7','#e4c7f1','#d1afe8','#b998dd','#9f82ce','#826dba','#63589f' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Purple to Orange',
            p_return_value  => 'PurpOr',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#f9ddda','#f2b9c4','#e597b9','#ce78b3','#ad5fad','#834ba0','#573b88' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Sunset',
            p_return_value  => 'Sunset',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#f3e79b','#fac484','#f8a07e','#eb7f86','#ce6693','#a059a0','#5c53a5' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Magenta',
            p_return_value  => 'Magenta',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#f3cbd3','#eaa9bd','#dd88ac','#ca699d','#b14d8e','#91357d','#6c2167' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Dark Sunset',
            p_return_value  => 'SunsetDark',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#fcde9c','#faa476','#f0746e','#e34f6f','#dc3977','#b9257a','#7c1d6f' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Brown to Yellow',
            p_return_value  => 'BrwnYl',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#ede5cf','#e0c2a2','#d39c83','#c1766f','#a65461','#813753','#541f3f' ) ) );

        --
        l_property_id := l_property_id + 1;
        --
        store_property (
            p_id                          => l_property_id,
            p_name                        => p_name_prefix || 'DIV_NAME',
            p_prompt                      => 'Scheme Name',
            p_property_type               => 'SELECT LIST',
            p_lov_type                    => 'STATIC',
            p_db_column                   => p_db_column_prefix || 'NAME',
            p_display_group_name          => p_display_group_name,
            p_help_text                   => q'~Choose one of the predefined diverging color schemes. These are suitable to visualize diverging values, going from one extreme to another. Color schemes from cartocolors (<a rel="noopener noreferrer" href="https://github.com/CartoDB/cartocolor" target="_blank">CARTOcolor on GitHub)</a>.~' );
        --
        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => '"Army" to Rose',
            p_return_value  => 'ArmyRose',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#798234','#a3ad62','#d0d3a2','#fdfbe4','#f0c6c3','#df91a3','#d46780' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Fall Colors',
            p_return_value  => 'Fall',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#3d5941','#778868','#b5b991','#f6edbd','#edbb8a','#de8a5a','#ca562c' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Geyser',
            p_return_value  => 'Geyser',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#008080','#70a494','#b4c8a8','#f6edbd','#edbb8a','#de8a5a','#ca562c' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Temps',
            p_return_value  => 'Temps',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#009392','#39b185','#9ccb86','#e9e29c','#eeb479','#e88471','#cf597e' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Teal to Rose',
            p_return_value  => 'TealRose',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#009392','#72aaa1','#b1c7b3','#f1eac8','#e5b9ad','#d98994','#d0587e' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Tropic Colors',
            p_return_value  => 'Tropic',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#009B9E','#42B7B9','#A7D3D4','#F1F1F1','#E4C1D9','#D691C1','#C75DAB' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Earth Colors',
            p_return_value  => 'Earth',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#A16928','#bd925a','#d6bd8d','#edeac2','#b5c8b8','#79a7ac','#2887a1' ) ) );

        --
        l_property_id := l_property_id + 1;
        --
        store_property (
            p_id                          => l_property_id,
            p_name                        => p_name_prefix || 'QUA_NAME',
            p_prompt                      => 'Scheme Name',
            p_property_type               => 'SELECT LIST',
            p_lov_type                    => 'STATIC',
            p_db_column                   => p_db_column_prefix || 'NAME',
            p_display_group_name          => p_display_group_name,
            p_help_text                   => q'~Choose one of the predefined qualitative color schemes. These are suitable to visualize distinct values. Color schemes from cartocolors (<a rel="noopener noreferrer" href="https://github.com/CartoDB/cartocolor" target="_blank">CARTOcolor on GitHub)</a>.~' );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Antique',
            p_return_value  => 'Antique',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#855C75','#D9AF6B','#AF6458','#736F4C','#526A83','#625377','#7C7C7C' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Bold',
            p_return_value  => 'Bold',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#7F3C8D','#11A579','#3969AC','#F2B701','#E73F74','#80BA5A','#A5AA99' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Pastel',
            p_return_value  => 'Pastel',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#66C5CC','#F6CF71','#F89C74','#DCB0F2','#87C55F','#9EB9F3','#B3B3B3' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Prism',
            p_return_value  => 'Prism',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#5F4690','#1D6996','#38A6A5','#0F8554','#73AF48','#EDAD08','#666666' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Safe',
            p_return_value  => 'Safe',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#88CCEE','#CC6677','#DDCC77','#117733','#332288','#AA4499','#888888' ) ) );

        store_property_lov_values(
            p_property_id   => l_property_id,
            p_display_value => 'Vivid',
            p_return_value  => 'Vivid',
            p_help_text     => generate_color_html( wwv_flow_t_varchar2( '#E58606','#5D69B1','#52BCA3','#99C945','#CC61B0','#24796C','#A5AA99' ) ) );
    end store_color_spectrum_property;
    --
    --
    procedure store_code_language_properties (
        p_property_id        in number,
        p_name               in varchar2,
        p_db_column          in varchar2,
        p_display_group_name in varchar2,
        p_include_sql        in boolean,
        p_help_text          in varchar2 )
    is
    begin
        store_property (
            p_id                 => p_property_id,
            p_name               => p_name,
            p_prompt             => 'Language',
            p_property_type      => 'CODE LANGUAGE',
            p_db_column          => p_db_column,
            p_display_group_name => p_display_group_name,
            p_lov_type           => 'STATIC',
            p_help_text          => p_help_text );
        --
        if p_include_sql then
            store_property_lov_values (
                p_property_id   => p_property_id,
                p_display_value => 'SQL',
                p_return_value  => 'SQL' );
        end if;
        --
        store_property_lov_values (
            p_property_id   => p_property_id,
            p_display_value => 'PL/SQL',
            p_return_value  => 'PLSQL',
            p_is_quick_pick => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => p_property_id,
            p_display_value => 'JavaScript (MLE)',
            p_return_value  => 'JAVASCRIPT',
            p_is_quick_pick => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => p_property_id,
            p_display_value => 'Java (MLE)',
            p_return_value  => 'JAVA' );
        --
        store_property_lov_values (
            p_property_id   => p_property_id,
            p_display_value => 'Python (MLE)',
            p_return_value  => 'PYTHON' );
    end store_code_language_properties;
    --
    --
    procedure store_expression_properties (
        p_start_property_id  in number,
        p_name_prefix        in varchar2,
        p_return_type        in varchar2,
        p_custom_data_type   in varchar2 default null,
        p_db_column_lang     in varchar2,
        p_db_column_expr     in varchar2,
        p_display_group_name in varchar2,
        p_help_text          in varchar2,
        p_examples_sql       in varchar2 default null,
        p_examples_plsql     in varchar2 default null,
        p_examples_js        in varchar2 default null,
        p_examples_java      in varchar2 default null,
        p_examples_python    in varchar2 default null )
    is
        c_postfix constant varchar2( 30 ) := '_' || p_return_type;
        --
        l_property_id number := p_start_property_id;
    begin
        store_code_language_properties (
            p_property_id        => l_property_id,
            p_name               => p_name_prefix || 'EXPRESSION_LANG' || c_postfix,
            p_db_column          => p_db_column_lang,
            p_display_group_name => p_display_group_name,
            p_include_sql        => true,
            p_help_text          => q'~Select a language that is used to evaluate the entered expression.~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_name_prefix || 'SQL_EXPRESSION' || c_postfix,
            p_prompt             => 'SQL Expression',
            p_property_type      => 'SQL EXPRESSION' || case when p_return_type in ( 'BOOLEAN', 'CUSTOM' ) then ' ' || p_return_type end,
            p_db_column          => p_db_column_expr,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => p_display_group_name,
            p_help_text          => replace( p_help_text, '%language%', 'SQL' ),
            p_examples           => coalesce(
                                        p_examples_sql,
                                        case p_return_type
                                        when 'BOOLEAN' then
q'~
<dl><dt>To return successfully when the employee is a manager and their department is located in Chicago:</dt>
<dd><pre>
:P2_JOB = 'MANAGER' and
exists ( select 1
           from dept
          where deptno = :P2_DEPTNO
            and loc    = 'CHICAGO' )
</pre></dd>
</dl>~'
                                        else
q'~
<dl><dt>To return YES when the employee is a manager and their department is located in Chicago:</dt>
<dd><pre>
case
when :P2_JOB = 'MANAGER' and
     exists ( select 1
                from dept
               where deptno = :P2_DEPTNO
                 and loc    = 'CHICAGO' ) then 'YES'
else 'NO'
end
</pre></dd>
</dl>~'
                                        end )
            );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_name_prefix || 'PLSQL_EXPRESSION' || c_postfix,
            p_prompt             => 'PL/SQL Expression',
            p_property_type      => 'PLSQL EXPRESSION ' || p_return_type,
            p_db_column          => p_db_column_expr,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => p_display_group_name,
            p_help_text          => replace( p_help_text, '%language%', 'PL/SQL' ),
            p_examples           => coalesce(
                                        p_examples_plsql,
                                        case p_return_type
                                        when 'BOOLEAN' then
q'~
<dl><dt>To return successfully when the employee is in department 30 or is a manager:</dt>
<dd><pre>
( :P2_DEPTNO = 30 or :P2_JOB = 'MANAGER' )
</pre></dd>
</dl>~'
                                        else
q'~
<dl><dt>To return YES when the employee is in department 30 or is a manager:</dt>
<dd><pre>
case when ( :P2_DEPTNO = 30 or :P2_JOB = 'MANAGER' ) then 'YES' else 'NO' end
</pre></dd>
</dl>~'
                                        end )
            );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_name_prefix || 'JS_EXPRESSION' || c_postfix,
            p_prompt             => 'JavaScript Expression',
            p_property_type      => 'MLE JAVASCRIPT EXPRESSION ' || p_return_type,
            p_db_column          => p_db_column_expr,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => p_display_group_name,
            p_help_text          => replace( p_help_text, '%language%', 'JavaScript' ),
            p_examples           => coalesce(
                                        p_examples_js,
                                        case p_return_type
                                        when 'BOOLEAN' then
q'~
<dl><dt>To return successfully when the employee is in department 30 or is a manager:</dt>
<dd><pre>
( apex.env.P2_DEPTNO === "30" || apex.env.P2_JOB === "MANAGER" )
</pre></dd>
</dl>~'
                                        else
q'~
<dl><dt>To return YES when the employee is in department 30 or is a manager:</dt>
<dd><pre>
( apex.env.P2_DEPTNO === "30" || apex.env.P2_JOB === "MANAGER" ? "YES" : "NO" )
</pre></dd>
</dl>~'
                                        end )
            );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_name_prefix || 'JAVA_EXPRESSION' || c_postfix,
            p_prompt             => 'Java Expression',
            p_property_type      => 'MLE JAVA EXPRESSION ' || p_return_type,
            p_db_column          => p_db_column_expr,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => p_display_group_name,
            p_help_text          => replace( p_help_text, '%language%', 'Java' ),
            p_examples           => p_examples_java );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_name_prefix || 'PYTHON_EXPRESSION' || c_postfix,
            p_prompt             => 'Python Expression',
            p_property_type      => 'MLE PYTHON EXPRESSION ' || p_return_type,
            p_db_column          => p_db_column_expr,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => p_display_group_name,
            p_help_text          => replace( p_help_text, '%language%', 'Python' ),
            p_examples           => p_examples_python );
        --
    end store_expression_properties;
    --
    --
    procedure store_expression_comp_props (
        p_component_type_id           in number,
        p_name_prefix                 in varchar2,
        p_return_type                 in varchar2,
        p_custom_data_type            in varchar2 default null,
        p_db_column_lang              in varchar2 default null,
        p_db_column_expr              in varchar2 default null,
        p_reference_scope             in varchar2 default 'COMPONENT',
        p_type_property               in varchar2,
        p_depending_on_comp_prop_name in varchar2 default null,
        p_depending_on_condition_type in varchar2 default null,
        p_depending_on_expression     in varchar2 default null )
    is
        c_postfix         constant varchar2( 30 )  := '_' || p_return_type;
        c_expression_lang constant varchar2( 255 ) := p_name_prefix || 'EXPRESSION_LANG' || c_postfix;
    begin
        store_component_prop (
            p_component_type_id            => p_component_type_id,
            p_property_name                => c_expression_lang,
            p_db_column                    => p_db_column_lang,
            p_is_required                  => true,
            p_is_common                    => false,
            p_default_value                => 'PLSQL',
            p_reference_scope              => p_reference_scope,
            p_depending_on_comp_prop_name  => p_type_property,
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'EXPRESSION',
            p_depending_on_comp_prop_name2 => p_depending_on_comp_prop_name,
            p_depending_on_condition_type2 => p_depending_on_condition_type,
            p_depending_on_expression2     => p_depending_on_expression );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => p_name_prefix || 'SQL_EXPRESSION' || c_postfix,
            p_db_column                   => p_db_column_expr,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_custom_data_type            => p_custom_data_type,
            p_depending_on_comp_prop_name => c_expression_lang,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => p_name_prefix || 'PLSQL_EXPRESSION' || c_postfix,
            p_db_column                   => p_db_column_expr,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_custom_data_type            => p_custom_data_type,
            p_depending_on_comp_prop_name => c_expression_lang,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PLSQL' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => p_name_prefix || 'JS_EXPRESSION' || c_postfix,
            p_db_column                   => p_db_column_expr,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_custom_data_type            => p_custom_data_type,
            p_depending_on_comp_prop_name => c_expression_lang,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'JAVASCRIPT' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => p_name_prefix || 'JAVA_EXPRESSION' || c_postfix,
            p_db_column                   => p_db_column_expr,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_custom_data_type            => p_custom_data_type,
            p_depending_on_comp_prop_name => c_expression_lang,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'JAVA' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => p_name_prefix || 'PYTHON_EXPRESSION' || c_postfix,
            p_db_column                   => p_db_column_expr,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_custom_data_type            => p_custom_data_type,
            p_depending_on_comp_prop_name => c_expression_lang,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PYTHON' );
        --
    end store_expression_comp_props;
    --
    --
    procedure store_func_body_properties (
        p_start_property_id    in number,
        p_name_prefix          in varchar2,
        p_postfix              in varchar2 default null,
        p_return_type          in varchar2,
        p_prompt               in varchar2 default null,
        p_db_column_lang       in varchar2,
        p_db_column_func_body  in varchar2,
        p_display_group_name   in varchar2,
        p_max_length           in varchar2 default null,
        p_sql_min_column_count in number   default null,
        p_sql_max_column_count in number   default null,
        p_help_text            in varchar2,
        p_examples_plsql       in varchar2 default null,
        p_examples_js          in varchar2 default null,
        p_examples_java        in varchar2 default null,
        p_examples_python      in varchar2 default null )
    is
        c_postfix        constant varchar2( 30 )  := '_' || coalesce( p_postfix, p_return_type );
        c_func_body_lang constant varchar2( 255 ) := p_name_prefix || 'FUNC_BODY_LANG' || c_postfix;
        c_prompt         constant varchar2( 255 ) := coalesce (
                                                         p_prompt,
                                                         case p_return_type
                                                           when 'SQL' then '%language% Function Body returning SQL Query'
                                                         end,
                                                         '%language% Function Body' );
        c_max_length     constant number          := coalesce (
                                                         p_max_length,
                                                         case when p_return_type in ('SQL', 'CLOB') then 32767 else 4000 end );
        --
        l_property_id number := p_start_property_id;
    begin
        store_code_language_properties (
            p_property_id        => l_property_id,
            p_name               => c_func_body_lang,
            p_db_column          => p_db_column_lang,
            p_display_group_name => p_display_group_name,
            p_include_sql        => false,
            p_help_text          => q'~Select a language that is used to execute the entered function body.~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                   => l_property_id,
            p_name                 => p_name_prefix || 'PLSQL_FUNC_BODY' || c_postfix,
            p_prompt               => replace( c_prompt, '%language%', 'PL/SQL' ),
            p_property_type        => 'PLSQL FUNCTION BODY ' || p_return_type,
            p_db_column            => p_db_column_func_body,
            p_display_length       => 80,
            p_max_length           => c_max_length,
            p_sql_min_column_count => p_sql_min_column_count,
            p_sql_max_column_count => p_sql_max_column_count,
            p_display_group_name   => p_display_group_name,
            p_help_text            => replace( p_help_text, '%language%', 'PL/SQL' ),
            p_examples             => coalesce(
                                          p_examples_plsql,
                                          case p_return_type
                                          when 'BOOLEAN' then
q'~
<dl><dt>To return successfully when the employee is in department 30:</dt>
<dd><pre>
declare
    l_deptno number;
begin
    select deptno
      into l_deptno
      from emp
     where empno = :P2_EMPNO;

    if l_deptno = 30 then
        return true;
    else
        return false;
    end if;
end;
</pre></dd>
</dl>~'
                                          when 'VARCHAR2' then
q'~
<dl><dt>To return YES when the employee is in department 30:</dt>
<dd><pre>
declare
    l_deptno number;
begin
    select deptno
      into l_deptno
      from emp
     where empno = :P2_EMPNO;

    if l_deptno = 30 then
        return 'YES';
    else
        return 'NO';
    end if;
end;
</pre></dd>
</dl>~'
                                          when 'CLOB' then
q'~
<dl><dt>To return some data from the EMP table as a stringified JSON:</dt>
<dd><pre>
declare
    l_result clob;
begin
    select json_arrayagg (
               json_object (
                   'empno' value empno,
                   'ename' value ename
               )
           )
      into l_result
      from emp;

    return l_result;
end;
</pre></dd>
</dl>~'
                                          end )
            );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                   => l_property_id,
            p_name                 => p_name_prefix || 'JS_FUNC_BODY' || c_postfix,
            p_prompt               => replace(
                                        replace(
                                            replace(
                                                c_prompt,
                                                '%language%',
                                                'JavaScript' ),
                                            'CLOB',
                                            'String' ),
                                        'VARCHAR2',
                                        'String' ),
            p_property_type        => 'MLE JAVASCRIPT FUNCTION BODY ' || p_return_type,
            p_db_column            => p_db_column_func_body,
            p_display_length       => 80,
            p_max_length           => c_max_length,
            p_sql_min_column_count => p_sql_min_column_count,
            p_sql_max_column_count => p_sql_max_column_count,
            p_display_group_name   => p_display_group_name,
            p_help_text            => replace( p_help_text, '%language%', 'JavaScript' ),
            p_examples             => coalesce(
                                          p_examples_js,
                                          case p_return_type
                                          when 'BOOLEAN' then
q'~
<dl><dt>To return successfully when the employee is in department 30:</dt>
<dd><pre>
let deptno,
    rows;

rows = apex.conn.execute( "select deptno from emp empno = :1", [ apex.env.P2_EMPNO ] ).rows;
for (let row of rows) {
  deptno = row.DEPTNO;
}

return ( deptno === 30 );
</pre></dd>
</dl>~'
                                          when 'VARCHAR2' then
q'~
<dl><dt>To return YES when the employee is in department 30:</dt>
<dd><pre>
let deptno,
    rows;

rows = apex.conn.execute( "select deptno from emp empno = :1", [ apex.env.P2_EMPNO ] ).rows;
for (let row of rows) {
  deptno = row.DEPTNO;
}

return ( deptno === 30 ? "YES" : "NO" );
</pre></dd>
</dl>~'
                                          when 'CLOB' then
q'~
<dl><dt>To return some data from the EMP table as a stringified JSON:</dt>
<dd><pre>
let rows = apex.conn.execute( "select empno, ename from emp" ).rows;

return JSON.stringify( { data: rows } );
</pre></dd>
</dl>~'
                                          end ) );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                   => l_property_id,
            p_name                 => p_name_prefix || 'JAVA_FUNC_BODY' || c_postfix,
            p_prompt               => replace( c_prompt, '%language%', 'Java' ),
            p_property_type        => 'MLE JAVA FUNCTION BODY ' || p_return_type,
            p_db_column            => p_db_column_func_body,
            p_display_length       => 80,
            p_max_length           => c_max_length,
            p_sql_min_column_count => p_sql_min_column_count,
            p_sql_max_column_count => p_sql_max_column_count,
            p_display_group_name   => p_display_group_name,
            p_help_text            => replace( p_help_text, '%language%', 'Java' ),
            p_examples             => p_examples_java );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                   => l_property_id,
            p_name                 => p_name_prefix || 'PYTHON_FUNC_BODY' || c_postfix,
            p_prompt               => replace( c_prompt, '%language%', 'Python' ),
            p_property_type        => 'MLE PYTHON FUNCTION BODY ' || p_return_type,
            p_db_column            => p_db_column_func_body,
            p_display_length       => 80,
            p_max_length           => c_max_length,
            p_sql_min_column_count => p_sql_min_column_count,
            p_sql_max_column_count => p_sql_max_column_count,
            p_display_group_name   => p_display_group_name,
            p_help_text            => replace( p_help_text, '%language%', 'Python' ),
            p_examples             => p_examples_python );
        --
    end store_func_body_properties;
    --
    --
    procedure store_func_body_comp_props (
        p_component_type_id           in number,
        p_name_prefix                 in varchar2,
        p_postfix                     in varchar2 default null,
        p_return_type                 in varchar2,
        p_custom_data_type            in varchar2 default null,
        p_db_column_lang              in varchar2 default null,
        p_db_column_func_body         in varchar2 default null,
        p_reference_scope             in varchar2 default 'COMPONENT',
        p_type_property               in varchar2,
        p_type_operator               in varchar2 default 'EQUALS',
        p_type_value                  in varchar2 default 'FUNCTION_BODY',
        p_parent_comp_prop_name       in varchar2 default null,
        p_depending_on_comp_prop_name in varchar2 default null,
        p_depending_on_condition_type in varchar2 default null,
        p_depending_on_expression     in varchar2 default null,
        p_help_text                   in varchar2 default null,
        p_examples_plsql              in varchar2 default null,
        p_examples_js                 in varchar2 default null,
        p_examples_java               in varchar2 default null,
        p_examples_python             in varchar2 default null )
    is
        c_postfix        constant varchar2( 30 )  := '_' || coalesce( p_postfix, p_return_type );
        c_func_body_lang constant varchar2( 255 ) := p_name_prefix || 'FUNC_BODY_LANG' || c_postfix;
    begin
        store_component_prop (
            p_component_type_id            => p_component_type_id,
            p_property_name                => c_func_body_lang,
            p_db_column                    => p_db_column_lang,
            p_is_required                  => true,
            p_is_common                    => false,
            p_default_value                => 'PLSQL',
            p_reference_scope              => p_reference_scope,
            p_depending_on_comp_prop_name  => p_type_property,
            p_depending_on_condition_type  => p_type_operator,
            p_depending_on_expression      => p_type_value,
            p_depending_on_comp_prop_name2 => p_depending_on_comp_prop_name,
            p_depending_on_condition_type2 => p_depending_on_condition_type,
            p_depending_on_expression2     => p_depending_on_expression );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => p_name_prefix || 'PLSQL_FUNC_BODY' || c_postfix,
            p_db_column                   => p_db_column_func_body,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_custom_data_type            => p_custom_data_type,
            p_depending_on_comp_prop_name => c_func_body_lang,
            p_depending_on_condition_type => p_type_operator,
            p_depending_on_expression     => 'PLSQL',
            p_parent_comp_prop_name       => p_parent_comp_prop_name,
            p_help_text                   => replace( p_help_text, '%language%', 'PL/SQL' ),
            p_examples                    => p_examples_python );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => p_name_prefix || 'JS_FUNC_BODY' || c_postfix,
            p_db_column                   => p_db_column_func_body,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_custom_data_type            => p_custom_data_type,
            p_depending_on_comp_prop_name => c_func_body_lang,
            p_depending_on_condition_type => p_type_operator,
            p_depending_on_expression     => 'JAVASCRIPT',
            p_parent_comp_prop_name       => p_parent_comp_prop_name,
            p_help_text                   => replace( p_help_text, '%language%', 'JavaScript' ),
            p_examples                    => p_examples_python );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => p_name_prefix || 'JAVA_FUNC_BODY' || c_postfix,
            p_db_column                   => p_db_column_func_body,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_custom_data_type            => p_custom_data_type,
            p_depending_on_comp_prop_name => c_func_body_lang,
            p_depending_on_condition_type => p_type_operator,
            p_depending_on_expression     => 'JAVA',
            p_parent_comp_prop_name       => p_parent_comp_prop_name,
            p_help_text                   => replace( p_help_text, '%language%', 'Java' ),
            p_examples                    => p_examples_python );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => p_name_prefix || 'PYTHON_FUNC_BODY' || c_postfix,
            p_db_column                   => p_db_column_func_body,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_custom_data_type            => p_custom_data_type,
            p_depending_on_comp_prop_name => c_func_body_lang,
            p_depending_on_condition_type => p_type_operator,
            p_depending_on_expression     => 'PYTHON',
            p_parent_comp_prop_name       => p_parent_comp_prop_name,
            p_help_text                   => replace( p_help_text, '%language%', 'Python' ),
            p_examples                    => p_examples_python );
        --
    end store_func_body_comp_props;
    --
    --
    procedure store_snippet_properties (
        p_start_property_id    in number,
        p_name_prefix          in varchar2,
        p_prompt               in varchar2 default null,
        p_db_column_lang       in varchar2,
        p_db_column_snippet    in varchar2,
        p_display_group_name   in varchar2,
        p_max_length           in varchar2 default 32767,
        p_help_text            in varchar2,
        p_examples_plsql       in varchar2 default null,
        p_examples_js          in varchar2 default null,
        p_examples_java        in varchar2 default null,
        p_examples_python      in varchar2 default null )
    is
        c_snippet_lang constant varchar2( 255 ) := p_name_prefix || 'SNIPPET_LANG';
        c_prompt       constant varchar2( 255 ) := coalesce( p_prompt, '%language% Code' );
        --
        l_property_id number := p_start_property_id;
    begin
        store_code_language_properties (
            p_property_id        => l_property_id,
            p_name               => c_snippet_lang,
            p_db_column          => p_db_column_lang,
            p_display_group_name => p_display_group_name,
            p_include_sql        => false,
            p_help_text          => q'~Select a language that is used to execute the entered code.~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                   => l_property_id,
            p_name                 => p_name_prefix || 'PLSQL_CODE',
            p_prompt               => replace( c_prompt, '%language%', 'PL/SQL' ),
            p_property_type        => 'PLSQL',
            p_db_column            => p_db_column_snippet,
            p_display_length       => 80,
            p_max_length           => p_max_length,
            p_display_group_name   => p_display_group_name,
            p_help_text            => replace( p_help_text, '%language%', 'PL/SQL' ),
            p_examples             => coalesce(
                                          p_examples_plsql,
q'~
<dl><dt>Increases the salary by 3% for those employees which are qualified for a salary raise:</dt>
<dd><pre>
begin
    for l_emp ( select empno
                  from emp
                 where deptno = :P2_DEPTNO )
    loop
        if needs_salary_raise( l_empno.empno ) then
            update emp
               set sal = sal * 1.03
             where empno = l_emp.empno;
        end if;
    end loop;
end;
</pre></dd>
</dl>~'
            ));
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                   => l_property_id,
            p_name                 => p_name_prefix || 'JS_CODE',
            p_prompt               => replace( c_prompt, '%language%', 'JavaScript' ),
            p_property_type        => 'MLE JAVASCRIPT',
            p_db_column            => p_db_column_snippet,
            p_display_length       => 80,
            p_max_length           => p_max_length,
            p_display_group_name   => p_display_group_name,
            p_help_text            => replace( p_help_text, '%language%', 'JavaScript' ),
            p_examples             => coalesce(
                                          p_examples_js,
q'~
<dl><dt>Increases the salary by 3% for those employees which are qualified for a salary raise:</dt>
<dd><pre>
let rows;

function needsSalaryRaise( empno ) {
    // placeholder for some complicated logic to calculate if employee needs a raise
    return true;
}

rows = apex.conn.execute( "select empno from emp where deptno = :deptno", { deptno: apex.env.P2_DEPTNO } ).rows;
for ( let row of rows ) {
    if ( needsSalaryRaise( row.EMPNO )) {
      apex.conn.execute( "update emp set sal = sal * 1.03 where empno = :empno", { empno: row.EMPNO } );
    }
}
</pre></dd>
</dl>~'
            ));
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                   => l_property_id,
            p_name                 => p_name_prefix || 'JAVA_CODE',
            p_prompt               => replace( c_prompt, '%language%', 'Java' ),
            p_property_type        => 'MLE JAVA',
            p_db_column            => p_db_column_snippet,
            p_display_length       => 80,
            p_max_length           => p_max_length,
            p_display_group_name   => p_display_group_name,
            p_help_text            => replace( p_help_text, '%language%', 'Java' ),
            p_examples             => p_examples_java );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                   => l_property_id,
            p_name                 => p_name_prefix || 'PYTHON_CODE',
            p_prompt               => replace( c_prompt, '%language%', 'Python' ),
            p_property_type        => 'MLE PYTHON',
            p_db_column            => p_db_column_snippet,
            p_display_length       => 80,
            p_max_length           => p_max_length,
            p_display_group_name   => p_display_group_name,
            p_help_text            => replace( p_help_text, '%language%', 'Python' ),
            p_examples             => p_examples_python );
        --
    end store_snippet_properties;
    --
    --
    procedure store_snippet_comp_props (
        p_component_type_id     in number,
        p_name_prefix           in varchar2,
        p_db_column_lang        in varchar2 default null,
        p_db_column_snippet     in varchar2 default null,
        p_reference_scope       in varchar2 default 'COMPONENT',
        p_type_property         in varchar2,
        p_type_operator         in varchar2 default 'EQUALS',
        p_type_value            in varchar2,
        p_parent_comp_prop_name in varchar2 default null,
        p_help_text             in varchar2 default null,
        p_examples_plsql        in varchar2 default null,
        p_examples_js           in varchar2 default null,
        p_examples_java         in varchar2 default null,
        p_examples_python       in varchar2 default null )
    is
        c_snippet_lang constant varchar2( 255 ) := p_name_prefix || 'SNIPPET_LANG';
    begin
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_snippet_lang,
            p_db_column                   => p_db_column_lang,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'PLSQL',
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => p_type_property,
            p_depending_on_condition_type => p_type_operator,
            p_depending_on_expression     => p_type_value );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => p_name_prefix || 'PLSQL_CODE',
            p_db_column                   => p_db_column_snippet,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => c_snippet_lang,
            p_depending_on_condition_type => p_type_operator,
            p_depending_on_expression     => 'PLSQL',
            p_parent_comp_prop_name       => p_parent_comp_prop_name,
            p_help_text                   => replace( p_help_text, '%language%', 'PL/SQL' ),
            p_examples                    => p_examples_plsql );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => p_name_prefix || 'JS_CODE',
            p_db_column                   => p_db_column_snippet,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => c_snippet_lang,
            p_depending_on_condition_type => p_type_operator,
            p_depending_on_expression     => 'JAVASCRIPT',
            p_parent_comp_prop_name       => p_parent_comp_prop_name,
            p_help_text                   => replace( p_help_text, '%language%', 'JavaScript' ),
            p_examples                    => p_examples_js );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => p_name_prefix || 'JAVA_CODE',
            p_db_column                   => p_db_column_snippet,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => c_snippet_lang,
            p_depending_on_condition_type => p_type_operator,
            p_depending_on_expression     => 'PYTHON',
            p_parent_comp_prop_name       => p_parent_comp_prop_name,
            p_help_text                   => replace( p_help_text, '%language%', 'Java' ),
            p_examples                    => p_examples_java );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => p_name_prefix || 'PYTHON_CODE',
            p_db_column                   => p_db_column_snippet,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => c_snippet_lang,
            p_depending_on_condition_type => p_type_operator,
            p_depending_on_expression     => 'PYTHON',
            p_parent_comp_prop_name       => p_parent_comp_prop_name,
            p_help_text                   => replace( p_help_text, '%language%', 'Python' ),
            p_examples                    => p_examples_python );
        --
    end store_snippet_comp_props;
    --
    --
    procedure store_cond_type_properties (
        p_start_property_id  in number,
        p_name_prefix        in varchar2,
        p_prompt_type        in varchar2 default 'Type',
        p_help_text_type     in varchar2,
        p_db_column_type     in varchar2,
        p_db_column_expr1    in varchar2,
        p_db_column_expr2    in varchar2,
        p_display_group_name in varchar2 )
    is
        c_name_prefix constant varchar2( 30) := case when p_name_prefix is not null then p_name_prefix || '_' end;
        l_property_id number := p_start_property_id;
    begin
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'CONDITION_TYPE',
            p_prompt             => p_prompt_type,
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_db_column_type,
            p_display_group_name => p_display_group_name,
            p_lov_type           => 'STATIC',
            p_help_text          => p_help_text_type );
        --
        if p_name_prefix = 'READ_ONLY' then
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Always',
                p_return_value  => 'ALWAYS',
                p_is_deprecated => 'N',
                p_is_quick_pick => 'Y',
                p_help_text     => q'~The component will always be rendered as read only.~' );
            --
        elsif nvl( p_name_prefix, 'CONDITION' ) not in ( 'AUTOM', 'ACTION', 'WF', 'RAG' ) then
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Always',
                p_return_value  => 'ALWAYS',
                p_is_deprecated => 'Y',
                p_help_text     => q'~The component will always be rendered or executed.~' );
        end if;
        --
        if p_name_prefix = 'RAG' then
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Any User Prompt contains',
                p_return_value  => 'ANY_AI_USER_PROMPT_CONTAINS',
                p_is_quick_pick => 'Y',
                p_help_text     => q'~At least one of the comma-separated strings in the <em>List</em> attribute is found in any of the user prompts.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Last User Prompt contains',
                p_return_value  => 'LAST_AI_USER_PROMPT_CONTAINS',
                p_is_quick_pick => 'Y',
                p_help_text     => q'~At least one of the comma-separated strings in the <em>List</em> attribute appears in the most recent user prompt.~' );
        end if;
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Rows returned',
            p_return_value  => 'EXISTS',
            p_is_quick_pick => 'Y',
            p_help_text     => q'~The SQL query returns one or more rows.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'No Rows returned',
            p_return_value  => 'NOT_EXISTS',
            p_help_text     => q'~The SQL Query returns no rows~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Expression',
            p_return_value  => 'EXPRESSION',
            p_help_text     => q'~The expression evaluates to TRUE.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Function Body',
            p_return_value  => 'FUNCTION_BODY',
            p_help_text     => q'~The function body returns TRUE.~' );
        --
        if nvl( p_name_prefix, 'CONDITION' ) not in ( 'AUTOM', 'ACTION', 'SO_VAL', 'SO_COND', 'WF', 'RAG' ) then
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Request = Value',
                p_return_value  => 'REQUEST_EQUALS_CONDITION',
                p_help_text     => q'~The page request is equal to the text you enter into the <em>Value</em> attribute.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Request != Value',
                p_return_value  => 'REQUEST_NOT_EQUAL_CONDITION',
                p_help_text     => q'~The page request is not equal to the text you enter into the <em>Value</em> attribute.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Request is contained in Value',
                p_return_value  => 'REQUEST_IN_CONDITION',
                p_help_text     => q'~The page request is contained in the text you enter into the <em>Value</em> attribute.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Request is NOT contained in Value',
                p_return_value  => 'REQUEST_NOT_IN_CONDITION',
                p_help_text     => q'~The page request is not contained in the text you enter into the <em>Value</em> attribute.~' );
        end if;
        --
        if nvl( p_name_prefix, 'CONDITION' ) not in ( 'AUTOM', 'SO_VAL', 'SO_COND', 'WF', 'RAG' ) then
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Item = Value',
                p_return_value  => 'VAL_OF_ITEM_IN_COND_EQ_COND2',
                p_is_quick_pick => 'Y',
                p_help_text     => q'~The value of the selected <em>Item</em> is equal to the text you enter into the <em>Value</em> attribute.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Item != Value',
                p_return_value  => 'VAL_OF_ITEM_IN_COND_NOT_EQ_COND2',
                p_help_text     => q'~The value of the selected <em>Item</em> is not equal to the text you enter into the <em>Value</em> attribute.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Item is NULL',
                p_return_value  => 'ITEM_IS_NULL',
                p_is_quick_pick => 'Y',
                p_help_text     => q'~The value of the selected <em>Item</em> is empty.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Item is NOT NULL',
                p_return_value  => 'ITEM_IS_NOT_NULL',
                p_is_quick_pick => 'Y',
                p_help_text     => q'~The value of the selected <em>Item</em> is not empty.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Item is zero',
                p_return_value  => 'ITEM_IS_ZERO',
                p_help_text     => q'~The value of the selected <em>Item</em> is the number zero.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Item is NOT zero',
                p_return_value  => 'ITEM_IS_NOT_ZERO',
                p_help_text     => q'~The value of the selected <em>Item</em> is not the number zero.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Item is NULL or zero',
                p_return_value  => 'ITEM_IS_NULL_OR_ZERO',
                p_help_text     => q'~The value of the selected <em>Item</em> is empty or the number zero.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Item is NOT NULL and NOT zero',
                p_return_value  => 'ITEM_NOT_NULL_OR_ZERO',
                p_help_text     => q'~The value of the selected <em>Item</em> is not empty and not the number zero.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Item contains no spaces',
                p_return_value  => 'ITEM_CONTAINS_NO_SPACES',
                p_help_text     => q'~The value of the selected <em>Item</em> has no spaces.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Item is numeric',
                p_return_value  => 'ITEM_IS_NUMERIC',
                p_help_text     => q'~The value of the selected <em>Item</em> is numeric.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Item is NOT numeric',
                p_return_value  => 'ITEM_IS_NOT_NUMERIC',
                p_help_text     => q'~The value of the selected <em>Item</em> is not numeric.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Item is alphanumeric',
                p_return_value  => 'ITEM_IS_ALPHANUMERIC',
                p_help_text     => q'~The value of the selected <em>Item</em> is alphanumeric, containing only letters or numbers and no special characters.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Item is in colon delimited list',
                p_return_value  => 'VALUE_OF_ITEM_IN_CONDITION_IN_COLON_DELIMITED_LIST',
                p_help_text     => q'~The value of the selected <em>Item</em> is completely contained in the text you enter into the <em>Value</em> attribute.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Item is NOT in colon delimited list',
                p_return_value  => 'VALUE_OF_ITEM_IN_CONDITION_NOT_IN_COLON_DELIMITED_LIST',
                p_help_text     => q'~The value of the selected <em>Item</em> is not completely contained in the text you entered into the <em>Value</em> attribute.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Text is contained in Item',
                p_return_value  => 'CONDITION1_IN_VALUE_OF_ITEM_IN_CONDITION2',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Text = Value',
                p_return_value  => 'DISPLAY_COND_EQUAL_COND_TEXT',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Text != Value',
                p_return_value  => 'DISP_COND_NOT_EQUAL_COND_TEXT',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Text is contained in Value',
                p_return_value  => 'DISPLAY_COND_IN_COND_TEXT',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Text is NOT contained in Value',
                p_return_value  => 'DISPLAY_COND_NOT_IN_COND_TEXT',
                p_is_deprecated => 'Y' );
        end if;
        --
        if nvl( p_name_prefix, 'CONDITION' ) = 'WF' then
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Variable = Value',
                p_return_value  => 'VAL_OF_ITEM_IN_COND_EQ_COND2',
                p_is_quick_pick => 'Y',
                p_help_text     => q'~The value of the selected <em>Variable</em> is equal to the text you enter into the <em>Value</em> attribute.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Variable != Value',
                p_return_value  => 'VAL_OF_ITEM_IN_COND_NOT_EQ_COND2',
                p_help_text     => q'~The value of the selected <em>Variable</em> is not equal to the text you enter into the <em>Value</em> attribute.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Variable is NULL',
                p_return_value  => 'ITEM_IS_NULL',
                p_is_quick_pick => 'Y',
                p_help_text     => q'~The value of the selected <em>Variable</em> is empty.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Variable is NOT NULL',
                p_return_value  => 'ITEM_IS_NOT_NULL',
                p_is_quick_pick => 'Y',
                p_help_text     => q'~The value of the selected <em>Variable</em> is not empty.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Variable is zero',
                p_return_value  => 'ITEM_IS_ZERO',
                p_help_text     => q'~The value of the selected <em>Variable</em> is the number zero.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Variable is NOT zero',
                p_return_value  => 'ITEM_IS_NOT_ZERO',
                p_help_text     => q'~The value of the selected <em>Variable</em> is not the number zero.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Variable is NULL or zero',
                p_return_value  => 'ITEM_IS_NULL_OR_ZERO',
                p_help_text     => q'~The value of the selected <em>Variable</em> is empty or the number zero.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Variable is NOT NULL and NOT zero',
                p_return_value  => 'ITEM_NOT_NULL_OR_ZERO',
                p_help_text     => q'~The value of the selected <em>Variable</em> is not empty and not the number zero.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Variable contains no spaces',
                p_return_value  => 'ITEM_CONTAINS_NO_SPACES',
                p_help_text     => q'~The value of the selected <em>Variable</em> has no spaces.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Variable is numeric',
                p_return_value  => 'ITEM_IS_NUMERIC',
                p_help_text     => q'~The value of the selected <em>Variable</em> is numeric.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Variable is NOT numeric',
                p_return_value  => 'ITEM_IS_NOT_NUMERIC',
                p_help_text     => q'~The value of the selected <em>Variable</em> is not numeric.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Variable is alphanumeric',
                p_return_value  => 'ITEM_IS_ALPHANUMERIC',
                p_help_text     => q'~The value of the selected <em>Variable</em> is alphanumeric, containing only letters or numbers and no special characters.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Variable is in colon delimited list',
                p_return_value  => 'VALUE_OF_ITEM_IN_CONDITION_IN_COLON_DELIMITED_LIST',
                p_help_text     => q'~The value of the selected <em>Variable</em> is completely contained in the text you enter into the <em>Value</em> attribute.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Variable is NOT in colon delimited list',
                p_return_value  => 'VALUE_OF_ITEM_IN_CONDITION_NOT_IN_COLON_DELIMITED_LIST',
                p_help_text     => q'~The value of the selected <em>Variable</em> is not completely contained in the text you entered into the <em>Value</em> attribute.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Text is contained in Variable',
                p_return_value  => 'CONDITION1_IN_VALUE_OF_ITEM_IN_CONDITION2',
                p_is_deprecated => 'Y' );
            --
            -- The following LOV properties are marked as deprecated
            -- This is to stay consistent with the corresponding properties
            -- in the Non-WF Condition LOV defined above.
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Text = Value',
                p_return_value  => 'DISPLAY_COND_EQUAL_COND_TEXT',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Text != Value',
                p_return_value  => 'DISP_COND_NOT_EQUAL_COND_TEXT',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Text is contained in Value',
                p_return_value  => 'DISPLAY_COND_IN_COND_TEXT',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Text is NOT contained in Value',
                p_return_value  => 'DISPLAY_COND_NOT_IN_COND_TEXT',
                p_is_deprecated => 'Y' );
        end if;
        --
        if nvl( p_name_prefix, 'CONDITION' ) not in ( 'AUTOM', 'ACTION', 'SO_VAL', 'SO_COND', 'WF', 'RAG' ) then
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'User Preference = Value',
                p_return_value  => 'USER_PREF_IN_COND_EQ_COND2',
                p_help_text     => q'~The value of the <em>Preference</em> entered is equal to the text you enter into the <em>Value</em> attribute.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'User Preference != Value',
                p_return_value  => 'USER_PREF_IN_COND_NOT_EQ_COND2',
                p_help_text     => q'~The value of the <em>Preference</em> entered is not equal to the text you enter into the <em>Value</em> attribute.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Current Page = Page',
                p_return_value  => 'CURRENT_PAGE_EQUALS_CONDITION',
                p_help_text     => q'~The current page is equal to the value you enter into <em>Page</em>.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Current Page != Page',
                p_return_value  => 'CURRENT_PAGE_NOT_EQUAL_CONDITION',
                p_help_text     => q'~The current page is not equal to the value you enter into <em>Page</em>.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Current Page is in comma delimited list',
                p_return_value  => 'CURRENT_PAGE_IN_CONDITION',
                p_help_text     => q'~The current page is in the comma separated list you enter into <em>Pages</em>.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Current Page is NOT in comma delimited list',
                p_return_value  => 'CURRENT_PAGE_NOT_IN_CONDITION',
                p_help_text     => q'~The current page is not in the comma separated list you enter into <em>Pages</em>.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Current Page = Page Submitted (posted)',
                p_return_value  => 'WHEN_THIS_PAGE_SUBMITTED',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Current Page != Page Submitted (posted)',
                p_return_value  => 'WHEN_THIS_PAGE_NOT_SUBMITTED',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Current Page is in Printer Friendly Mode',
                p_return_value  => 'PAGE_IS_IN_PRINTER_FRIENDLY_MODE',
                p_help_text     => q'~The current page has been toggled to 'Printer Friendly Mode' by the end user.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Current page is NOT in Printer Friendly Mode',
                p_return_value  => 'PAGE_IS_NOT_IN_PRINTER_FRIENDLY_MODE',
                p_help_text     => q'~The current page has not been toggled to 'Printer Friendly Mode' by the end user.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Page/Region is Read Only',
                p_return_value  => 'IS_READ_ONLY',
                p_help_text     => q'~Either the page or parent region, if appropriate, 'Read Only' condition evaluates to TRUE.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Page/Region is NOT Read Only',
                p_return_value  => 'IS_NOT_READ_ONLY',
                p_help_text     => q'~The page and parent region, if appropriate, are displayed normally.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'User is Authenticated (not public)',
                p_return_value  => 'USER_IS_NOT_PUBLIC_USER',
                p_help_text     => q'~The end user is logged into the application.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'User is the Public User (user has not authenticated)',
                p_return_value  => 'USER_IS_PUBLIC_USER',
                p_help_text     => q'~The end user is not logged into the application.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Inline Validation Errors displayed',
                p_return_value  => 'DISPLAYING_INLINE_VALIDATION_ERRORS',
                p_help_text     => q'~An inline validation error is displayed on the page, following a page submission.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Inline Validation Errors NOT displayed',
                p_return_value  => 'NOT_DISPLAYING_INLINE_VALIDATION_ERRORS',
                p_help_text     => q'~An inline validation error is not displayed on the page.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'SQL Reports (OK to show the forward button)',
                p_return_value  => 'MAX_ROWS_LT_ROWS_FETCHED',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'SQL Reports (OK to show the back button)',
                p_return_value  => 'MIN_ROW_GT_THAN_ONE',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Current Language = Value',
                p_return_value  => 'CURRENT_LANG_EQ_COND1',
                p_help_text     => q'~The end user is currently running the application in the language you enter into the <em>Value</em> attribute.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Current Language != Value',
                p_return_value  => 'CURRENT_LANG_NOT_EQ_COND1',
                p_help_text     => q'~The end user is not currently running the application in the language you enter into the <em>Value</em> attribute.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Current Language is contained in Value',
                p_return_value  => 'CURRENT_LANG_IN_COND1',
                p_help_text     => q'~The end user is currently running the application in one of the languages you enter into the <em>Value</em> attribute.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Current Language is NOT contained in Value',
                p_return_value  => 'CURRENT_LANG_NOT_IN_COND1',
                p_help_text     => q'~The end user is not currently running the application in one of the languages you enter into the <em>Value</em> attribute.~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Client Browser is Mozilla, Netscape 6.x/7x or higher',
                p_return_value  => 'BROWSER_IS_NSCP',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Client Browser is Microsoft Internet Explorer 7.0 or higher',
                p_return_value  => 'BROWSER_IS_MSIE',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Client Browser is XHTML / CSS capable browser',
                p_return_value  => 'BROWSER_IS_MSIE_OR_NSCP',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Client Browser is Other browsers (or older version)',
                p_return_value  => 'BROWSER_IS_OTHER',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'CGI_ENV: DAD_NAME = Value',
                p_return_value  => 'DAD_NAME_EQ_CONDITION',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'CGI_ENV: DAD_NAME != Value',
                p_return_value  => 'DAD_NAME_NOT_EQ_CONDITION',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'CGI_ENV: SERVER_NAME = Value',
                p_return_value  => 'SERVER_NAME_EQ_CONDITION',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'CGI_ENV: SERVER_NAME != Value',
                p_return_value  => 'SERVER_NAME_NOT_EQ_CONDITION',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'CGI_ENV: HTTP_HOST = Value',
                p_return_value  => 'HTTP_HOST_EQ_CONDITION',
                p_is_deprecated => 'Y' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'CGI_ENV: HTTP_HOST != Value',
                p_return_value  => 'HTTP_HOST_NOT_EQ_CONDITION',
                p_is_deprecated => 'Y' );
        end if;
        --
        if nvl( p_name_prefix, 'CONDITION' ) in ( 'CONDITION', 'LINK', 'READ_ONLY', 'AUTOM', 'ACTION', 'SO_VAL', 'SO_COND', 'WF', 'RAG' ) then
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Never',
                p_return_value  => 'NEVER',
                p_is_quick_pick => case when nvl( p_name_prefix, 'CONDITION' ) in ( 'CONDITION', 'READ_ONLY', 'AUTOM', 'ACTION', 'SO_VAL', 'SO_COND', 'RAG' ) then 'Y' else 'N' end,
                p_help_text     => case
                                     when p_name_prefix = 'READ_ONLY' then
                                         q'~The component is rendered normally, irrespective of the read only condition for parent component(s).~'
                                     else
                                         q'~<p>The component is never rendered or executed.</p>
<p>Note: Changing a condition to <strong>Never</strong> will remove any existing condition. For temporarily disabling a component, Oracle recommends using the <em>Build Option</em> attribute instead.</p>~'
                                   end );
        else
            -- Remove Never for caching, ...
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Never',
                p_return_value  => 'NEVER',
                p_is_quick_pick => 'N',
                p_is_deprecated => 'Y',
                p_help_text     => q'~~' );
        end if;
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                   => l_property_id,
            p_name                 => c_name_prefix || 'CONDITION_SQL_STATEMENT',
            p_prompt               => 'SQL Query',
            p_property_type        => 'SQL',
            p_db_column            => p_db_column_expr1,
            p_display_length       => 80,
            p_max_length           => 4000,
            p_display_group_name   => p_display_group_name,
            p_sql_min_column_count => 1,
            p_help_text            => q'~Enter a SQL query for this condition.~',
            p_examples             => q'~
<dl><dt>To return successfully as one or more rows exist when checking if the employee is in department 30:</dt>
<dd><pre>
select 1
  from emp
 where empno  = :P2_EMPNO
   and deptno = 30
</pre></dd>
<dt>To return successfully as no rows exist when checking if the employee is in department 40:</dt>
<dd><pre>
select 1
  from emp
 where empno  = :P2_EMPNO
   and deptno = 40
</pre></dd>
</dl>~' );
        --
        if nvl( p_name_prefix, 'CONDITION' ) not in ( 'AUTOM', 'SO_VAL', 'SO_COND', 'RAG' ) then
            l_property_id := l_property_id + 1;
            store_property (
                p_id                 => l_property_id,
                p_name               => c_name_prefix || 'CONDITION_VALUE1',
                p_prompt             => 'Value',
                p_property_type      => 'TEXT',
                p_db_column          => p_db_column_expr1,
                p_display_length     => 80,
                p_max_length         => 4000,
                p_display_group_name => p_display_group_name,
                p_help_text          => q'~Enter the value to compare against the condition.~' );
            --
            l_property_id := l_property_id + 1;
            store_property (
                p_id                 => l_property_id,
                p_name               => c_name_prefix || 'CONDITION_ITEM1',
                p_prompt             => 'Item',
                p_property_type      => 'ITEM',
                p_db_column          => p_db_column_expr1,
                p_display_length     => 80,
                p_max_length         => 4000,
                p_display_group_name => p_display_group_name,
                p_help_text          => q'~Enter the page or application item used in this condition. You can type in the name or pick from the list of available items.~' );
        end if;
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'CONDITION_LIST',
            p_prompt             => 'List',
            p_property_type      => 'TEXT',
            p_db_column          => p_db_column_expr2,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~Enter a colon(:) separated list of values for this condition.~' );
        --
        if nvl( p_name_prefix, 'CONDITION' ) not in ( 'AUTOM', 'ACTION', 'SO_VAL', 'SO_COND', 'WF', 'RAG' ) then
            l_property_id := l_property_id + 1;
            store_property (
                p_id                 => l_property_id,
                p_name               => c_name_prefix || 'CONDITION_PREFERENCE',
                p_prompt             => 'Preference',
                p_property_type      => 'TEXT',
                p_db_column          => p_db_column_expr1,
                p_display_length     => 80,
                p_max_length         => 4000,
                p_text_case          => 'UPPER',
                p_display_group_name => p_display_group_name,
                p_help_text          => q'~Enter a User Preference that is compared against the specified value for this condition.~' );
            --
            l_property_id := l_property_id + 1;
            store_property (
                p_id                 => l_property_id,
                p_name               => c_name_prefix || 'CONDITION_PAGE',
                p_prompt             => 'Page',
                p_property_type      => 'PAGE',
                p_db_column          => p_db_column_expr1,
                p_display_length     => 80,
                p_max_length         => 4000,
                p_display_group_name => p_display_group_name,
                p_help_text          => q'~Enter the Page Number for this condition.~' );
            --
            l_property_id := l_property_id + 1;
            store_property (
                p_id                    => l_property_id,
                p_name                  => c_name_prefix || 'CONDITION_PAGES',
                p_prompt                => 'Pages',
                p_property_type         => 'PAGE',
                p_multi_value_delimiter => ',',
                p_db_column             => p_db_column_expr1,
                p_display_length        => 80,
                p_max_length            => 4000,
                p_display_group_name    => p_display_group_name,
                p_help_text             => q'~Enter a comma separated list of Page Numbers for this condition.~' );
        end if;
        --
        if nvl( p_name_prefix, 'CONDITION' ) not in ( 'AUTOM', 'SO_VAL', 'SO_COND', 'RAG' ) then
            l_property_id := l_property_id + 1;
            store_property (
                p_id                 => l_property_id,
                p_name               => c_name_prefix || 'CONDITION_TEXT',
                p_prompt             => 'Text',
                p_property_type      => 'TEXT',
                p_db_column          => p_db_column_expr1,
                p_display_length     => 80,
                p_max_length         => 4000,
                p_display_group_name => p_display_group_name,
                p_help_text          => q'~Enter the text value for this condition.~' );
            --
            l_property_id := l_property_id + 1;
            store_property (
                p_id                 => l_property_id,
                p_name               => c_name_prefix || 'CONDITION_VALUE2',
                p_prompt             => 'Value',
                p_property_type      => 'TEXT',
                p_db_column          => p_db_column_expr2,
                p_display_length     => 80,
                p_max_length         => 4000,
                p_display_group_name => p_display_group_name,
                p_help_text          => q'~Enter the value, including <code>&ITEM.</code> substitution strings, for this condition.~' );
            --
            l_property_id := l_property_id + 1;
            store_property (
                p_id                 => l_property_id,
                p_name               => c_name_prefix || 'CONDITION_ITEM2',
                p_prompt             => 'Item',
                p_property_type      => 'ITEM',
                p_db_column          => p_db_column_expr2,
                p_display_length     => 80,
                p_max_length         => 4000,
                p_display_group_name => p_display_group_name,
                p_help_text          => q'~Enter the page or application item used in this condition. You can type in the name or pick from the list of available items.~' );
            --
            l_property_id := l_property_id + 1;
            store_property (
                p_id                 => l_property_id,
                p_name               => c_name_prefix || 'CONDITION_TEXT2',
                p_prompt             => 'Value',
                p_property_type      => 'TEXT',
                p_db_column          => p_db_column_expr2,
                p_display_length     => 80,
                p_max_length         => 4000,
                p_display_group_name => p_display_group_name,
                p_help_text          => q'~Enter the value, including <code>&ITEM.</code> substitution strings, for this condition.~' );
        end if;
        --
        if p_name_prefix = 'RAG' then
            l_property_id := l_property_id + 1;
            store_property (
                p_id                    => l_property_id,
                p_name                  => c_name_prefix || 'AI_WORD_LIST',
                p_prompt                => 'List',
                p_property_type         => 'TEXT',
                p_db_column             => p_db_column_expr1,
                p_multi_value_delimiter => ',',
                p_display_length        => 80,
                p_max_length            => 4000,
                p_display_group_name    => p_display_group_name,
                p_help_text             => q'~Enter a comma-separated list of strings to check for their presence in the user prompt.~' );
        end if;
        --
        -- Note: the calls to store_expression_properties and store_func_body_properties have to be last, because if we have to add
        --       new properties in those procedures, it would change the ID of all properties which are created after
        --
        l_property_id := l_property_id + 1;
        store_expression_properties (
            p_start_property_id  => l_property_id,
            p_name_prefix        => c_name_prefix || 'CONDITION_',
            p_return_type        => 'BOOLEAN',
            p_db_column_lang     => p_db_column_expr2,
            p_db_column_expr     => p_db_column_expr1,
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~Enter a %language% Expression for this condition.~' );
        --
        l_property_id := l_property_id + 20;
        store_func_body_properties (
            p_start_property_id   => l_property_id,
            p_name_prefix         => c_name_prefix || 'CONDITION_',
            p_return_type         => 'BOOLEAN',
            p_db_column_lang      => p_db_column_expr2,
            p_db_column_func_body => p_db_column_expr1,
            p_display_group_name  => p_display_group_name,
            p_help_text           => q'~Enter a %language% Function Body that returns a boolean value for this condition.~' );
    end store_cond_type_properties;
    --
    --
    procedure store_condition_type_comp_prop (
        p_component_type_id           in number,
        p_name_prefix                 in varchar2,
        p_help_text_type              in varchar2,
        p_db_column_type              in varchar2,
        p_view_column_type            in varchar2 default null,
        p_db_column_expr1             in varchar2,
        p_db_column_expr2             in varchar2,
        p_reference_scope             in varchar2 default 'COMPONENT',
        p_is_common                   in boolean  default true,
        p_plugin_std_attributes       in varchar2 default null,
        p_parent_comp_prop_name       in varchar2 default null,
        p_depending_on_comp_prop_name in varchar2 default null,
        p_depending_on_condition_type in varchar2 default null,
        p_depending_on_expression     in varchar2 default null,
        p_has_execute_condition       in boolean  default false,
        p_execute_cond_dep_prop_name  in varchar2 default null,
        p_execute_condition_help_text in varchar2 default null )
    is
        c_name_prefix constant varchar2( 30 ) := case when p_name_prefix is not null then p_name_prefix || '_' end;
    begin
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_name_prefix || 'CONDITION_TYPE',
            p_db_column                   => p_db_column_type,
            p_view_column                 => p_view_column_type,
            p_is_required                 => false,
            p_is_common                   => p_is_common,
            p_reference_scope             => p_reference_scope,
            p_plugin_std_attributes       => p_plugin_std_attributes,
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression,
            p_help_text                   => p_help_text_type );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_name_prefix || 'CONDITION_SQL_STATEMENT',
            p_db_column                   => p_db_column_expr1,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'EXISTS,NOT_EXISTS' );
        --
        store_expression_comp_props (
            p_component_type_id => p_component_type_id,
            p_name_prefix       => c_name_prefix || 'CONDITION_',
            p_return_type       => 'BOOLEAN',
            p_db_column_lang    => p_db_column_expr2,
            p_db_column_expr    => p_db_column_expr1,
            p_reference_scope   => p_reference_scope,
            p_type_property     => c_name_prefix || 'CONDITION_TYPE' );
        --
        store_func_body_comp_props (
            p_component_type_id   => p_component_type_id,
            p_name_prefix         => c_name_prefix || 'CONDITION_',
            p_return_type         => 'BOOLEAN',
            p_db_column_lang      => p_db_column_expr2,
            p_db_column_func_body => p_db_column_expr1,
            p_reference_scope     => p_reference_scope,
            p_type_property       => c_name_prefix || 'CONDITION_TYPE' );
        --
        if nvl( p_name_prefix, 'CONDITION' ) not in ( 'AUTOM', 'SO_VAL', 'SO_COND', 'WF', 'RAG' ) then
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => c_name_prefix || 'CONDITION_VALUE1',
                p_db_column                   => p_db_column_expr1,
                p_is_required                 => true,
                p_is_common                   => false,
                p_reference_scope             => p_reference_scope,
                p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'REQUEST_EQUALS_CONDITION,REQUEST_NOT_EQUAL_CONDITION,REQUEST_IN_CONDITION,REQUEST_NOT_IN_CONDITION,CURRENT_LANG_IN_COND1,CURRENT_LANG_NOT_IN_COND1,CURRENT_LANG_NOT_EQ_COND1,CURRENT_LANG_EQ_COND1,DAD_NAME_EQ_CONDITION,DAD_NAME_NOT_EQ_CONDITION,SERVER_NAME_EQ_CONDITION,SERVER_NAME_NOT_EQ_CONDITION,HTTP_HOST_EQ_CONDITION,HTTP_HOST_NOT_EQ_CONDITION' );
        end if;
        --
         if nvl( p_name_prefix, 'CONDITION' ) not in ( 'AUTOM', 'SO_VAL', 'SO_COND', 'RAG' ) then
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => c_name_prefix || 'CONDITION_ITEM1',
                p_db_column                   => p_db_column_expr1,
                p_is_required                 => true,
                p_is_common                   => false,
                p_reference_scope             => p_reference_scope,
                p_parent_comp_prop_name       => p_parent_comp_prop_name,
                p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'VAL_OF_ITEM_IN_COND_EQ_COND2,VAL_OF_ITEM_IN_COND_NOT_EQ_COND2,VALUE_OF_ITEM_IN_COND_1_EQ_COND_2,VALUE_OF_ITEM_IN_COND_1_NOT_EQ_COND_2,ITEM_IS_NULL,ITEM_IS_NOT_NULL,ITEM_IS_ZERO,ITEM_IS_NOT_ZERO,ITEM_IS_NULL_OR_ZERO,ITEM_NOT_NULL_OR_ZERO,ITEM_CONTAINS_NO_SPACES,ITEM_IS_NUMERIC,ITEM_IS_NOT_NUMERIC,ITEM_IS_ALPHANUMERIC,VALUE_OF_ITEM_IN_CONDITION_IN_COLON_DELIMITED_LIST,VALUE_OF_ITEM_IN_CONDITION_NOT_IN_COLON_DELIMITED_LIST' );
        end if;
        --
        if nvl( p_name_prefix, 'CONDITION' ) not in ( 'AUTOM', 'ACTION', 'SO_VAL', 'SO_COND', 'WF', 'RAG' ) then
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => c_name_prefix || 'CONDITION_PREFERENCE',
                p_db_column                   => p_db_column_expr1,
                p_is_required                 => true,
                p_is_common                   => false,
                p_reference_scope             => p_reference_scope,
                p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'USER_PREF_IN_COND_EQ_COND2,USER_PREF_IN_COND_NOT_EQ_COND2' );
            --
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => c_name_prefix || 'CONDITION_PAGE',
                p_db_column                   => p_db_column_expr1,
                p_is_required                 => true,
                p_is_common                   => false,
                p_reference_scope             => p_reference_scope,
                p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'CURRENT_PAGE_EQUALS_CONDITION,CURRENT_PAGE_NOT_EQUAL_CONDITION' );
            --
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => c_name_prefix || 'CONDITION_PAGES',
                p_db_column                   => p_db_column_expr1,
                p_is_required                 => true,
                p_is_common                   => false,
                p_reference_scope             => p_reference_scope,
                p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'CURRENT_PAGE_IN_CONDITION,CURRENT_PAGE_NOT_IN_CONDITION' );
        end if;
        --
        if nvl( p_name_prefix, 'CONDITION' ) not in ( 'AUTOM', 'SO_VAL', 'SO_COND', 'RAG' ) then
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => c_name_prefix || 'CONDITION_TEXT',
                p_db_column                   => p_db_column_expr1,
                p_is_required                 => true,
                p_is_common                   => false,
                p_reference_scope             => p_reference_scope,
                p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'CONDITION1_IN_VALUE_OF_ITEM_IN_CONDITION2,DISPLAY_COND_IN_COND_TEXT,DISPLAY_COND_NOT_IN_COND_TEXT,DISPLAY_COND_EQUAL_COND_TEXT,DISP_COND_NOT_EQUAL_COND_TEXT' );
            --
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => c_name_prefix || 'CONDITION_VALUE2',
                p_db_column                   => p_db_column_expr2,
                p_is_required                 => true,
                p_is_common                   => false,
                p_reference_scope             => p_reference_scope,
                p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'VAL_OF_ITEM_IN_COND_EQ_COND2,VAL_OF_ITEM_IN_COND_NOT_EQ_COND2,VALUE_OF_ITEM_IN_COND_1_EQ_COND_2,VALUE_OF_ITEM_IN_COND_1_NOT_EQ_COND_2,USER_PREF_IN_COND_EQ_COND2,USER_PREF_IN_COND_NOT_EQ_COND2' );
            --
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => c_name_prefix || 'CONDITION_LIST',
                p_db_column                   => p_db_column_expr2,
                p_is_required                 => true,
                p_is_common                   => false,
                p_reference_scope             => p_reference_scope,
                p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'VALUE_OF_ITEM_IN_CONDITION_IN_COLON_DELIMITED_LIST,VALUE_OF_ITEM_IN_CONDITION_NOT_IN_COLON_DELIMITED_LIST' );
            --
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => c_name_prefix || 'CONDITION_ITEM2',
                p_db_column                   => p_db_column_expr2,
                p_is_required                 => true,
                p_is_common                   => false,
                p_reference_scope             => p_reference_scope,
                p_parent_comp_prop_name       => p_parent_comp_prop_name,
                p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'CONDITION1_IN_VALUE_OF_ITEM_IN_CONDITION2' );
            --
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => c_name_prefix || 'CONDITION_TEXT2',
                p_db_column                   => p_db_column_expr2,
                p_is_required                 => true,
                p_is_common                   => false,
                p_reference_scope             => p_reference_scope,
                p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'DISPLAY_COND_IN_COND_TEXT,DISPLAY_COND_NOT_IN_COND_TEXT,DISPLAY_COND_EQUAL_COND_TEXT,DISP_COND_NOT_EQUAL_COND_TEXT' );
        end if;
        --
        if p_name_prefix = 'RAG' then
            --
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => c_name_prefix || 'AI_WORD_LIST',
                p_db_column                   => p_db_column_expr1,
                p_is_required                 => true,
                p_is_common                   => true,
                p_reference_scope             => p_reference_scope,
                p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'ANY_AI_USER_PROMPT_CONTAINS,LAST_AI_USER_PROMPT_CONTAINS' );
        end if;
        --
        if p_has_execute_condition then
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'EXECUTE_CONDITION',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => false,
                p_reference_scope              => p_reference_scope,
                p_default_value                => 'Y',
                p_depending_on_comp_prop_name  => c_name_prefix || 'CONDITION_TYPE',
                p_depending_on_condition_type  => 'NOT_IN_LIST',
                p_depending_on_expression      => 'NEVER,$NULL$',
                p_depending_on_comp_prop_name2 => p_execute_cond_dep_prop_name,
                p_depending_on_condition_type2 => case when p_execute_cond_dep_prop_name is not null then 'NOT_NULL' end,
                p_help_text                    => p_execute_condition_help_text );
        end if;
    end store_condition_type_comp_prop;
    --
    --
    procedure store_val_type_properties (
        p_start_property_id in number,
        p_name_prefix       in varchar2 )
    is
        c_name_prefix constant   varchar2( 30 )          := case when p_name_prefix is not null then p_name_prefix || '_' end;
        c_item_or_column_lower   constant varchar2( 10 ) := case when p_name_prefix is null then 'item' else 'column' end;
        c_item_or_column_initcap constant varchar2( 10 ) := initcap( c_item_or_column_lower );
        l_property_id number := p_start_property_id;
    begin
        --
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'VALIDATION_TYPE',
            p_prompt             => 'Type',
            p_property_type      => 'SELECT LIST',
            p_db_column          => 'VALIDATION_TYPE',
            p_display_group_name => 'VALIDATION',
            p_lov_type           => 'STATIC',
            p_help_text          => q'~<p>Select the type of equality to be tested for this validation. Depending on your selection, one or more additional attributes are required to fully define this validation.</p>
<p>If the validation passes the equality test, or evaluates to TRUE, then the validation error message does not display.
Validation error messages display when the validation fails the equality test, or evaluates to FALSE, or a non-empty text string is returned.</p>
<p>A validation failure does not stop subsequent validations from being evaluated, therefore, each subsequent validation may raise an additional validation error message. If you want to stop subsequent validations from executing then you need to add additional logic into the first failed validation, such as setting a page item to a specific value, and then enhancing the conditional logic on subsequent validations as needed. Subsequent processes and branches are not executed if one or more validations fail evaluation.</p>~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Rows returned',
            p_return_value  => 'EXISTS',
            p_help_text     => q'~Passes if the SQL query returns one or more rows.<br>
Fails if the SQL query returns no rows.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'No Rows returned',
            p_return_value  => 'NOT_EXISTS',
            p_is_quick_pick => 'Y',
            p_help_text     => q'~Passes if the SQL query returns no rows.<br>
Fails if the SQL query returns one or more rows.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Expression',
            p_return_value  => 'EXPRESSION',
            p_help_text     => q'~Passes if the expression evaluates to TRUE.<br>
Fails if the expression evaluates to FALSE.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'PL/SQL Error',
            p_return_value  => 'PLSQL_ERROR',
            p_help_text     => q'~Passes if the PL/SQL code executes without generating an error.<br>
Fails if the PL/SQL expression generates an error when it executes.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Function Body (returning Boolean)',
            p_return_value  => 'FUNC_BODY_RETURNING_BOOLEAN',
            p_is_quick_pick => 'Y',
            p_help_text     => q'~Passes if the Function body returns TRUE.<br>
Fails if the Function body returns FALSE.<br>
Note: The result returned from the function must be a boolean.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Function Body (returning Error Text)',
            p_return_value  => 'FUNC_BODY_RETURNING_ERR_TEXT',
            p_help_text     => q'~Passes if the Function body returns an empty string.<br>
Fails if the Function body returns a non-empty string. The returned string displays as the error message for the validation.<br>
Note: The result returned from the function must be a text string.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is NOT NULL',
            p_return_value  => 'ITEM_NOT_NULL',
            p_is_quick_pick => 'Y',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is not empty.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is empty.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is NOT NULL or zero',
            p_return_value  => 'ITEM_NOT_NULL_OR_ZERO',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is not empty and is not the number zero.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is empty or is the number zero.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is NOT zero',
            p_return_value  => 'ITEM_NOT_ZERO',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is not the number zero.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is the number zero.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' contains no spaces',
            p_return_value  => 'ITEM_CONTAINS_NO_SPACES',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value has no spaces.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value contains spaces.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is alphanumeric',
            p_return_value  => 'ITEM_IS_ALPHANUMERIC',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is alphanumeric, containing only letters and numbers and no special characters.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value includes special characters.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is numeric',
            p_return_value  => 'ITEM_IS_NUMERIC',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is numeric.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value contains non-numeric characters, including spaces, other than leading spaces.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is a valid date',
            p_return_value  => 'ITEM_IS_DATE',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is a valid date.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is not a valid date.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is a valid timestamp',
            p_return_value  => 'ITEM_IS_TIMESTAMP',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is a valid timestamp.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is not a valid timestamp.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' = Value',
            p_return_value  => 'ITEM_IN_VALIDATION_EQ_STRING2',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is equal to the text you enter into the <em>Value</em> attribute.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is not equal to the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' != Value',
            p_return_value  => 'ITEM_IN_VALIDATION_NOT_EQ_STRING2',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is not equal to the text you enter into the <em>Value</em> attribute.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is equal to the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is contained in Value',
            p_return_value  => 'ITEM_IN_VALIDATION_IN_STRING2',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is completely contained in the text you enter into the <em>Value</em> attribute.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is not completely contained in the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is NOT contained in Value',
            p_return_value  => 'ITEM_IN_VALIDATION_NOT_IN_STRING2',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is not completely contained in the text you enter into the <em>Value</em> attribute.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is completely contained in the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' contains only characters specified in Value',
            p_return_value  => 'ITEM_IN_VALIDATION_CONTAINS_ONLY_CHAR_IN_STRING2',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value contains only characters found in the text you enter into the <em>Value</em> attribute.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value contains any characters that are not in the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' contains at least one of the characters in Value',
            p_return_value  => 'ITEM_IN_VALIDATION_CONTAINS_AT_LEAST_ONE_CHAR_IN_STRING2',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value includes at least one character from the text you enter into the <em>Value</em> attribute.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value does not include any characters from the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' does NOT contain any of the characters in Value',
            p_return_value  => 'ITEM_IN_VALIDATION_CONTAINS_NO_CHAR_IN_STRING2',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value does not include any characters from the text you enter into the <em>Value</em> attribute.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value includes at least one character from the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' matches Regular Expression',
            p_return_value  => 'REGULAR_EXPRESSION',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value matches the regular expression you enter into the <em>Value</em> attribute.
Fails if the ~' || c_item_or_column_initcap || q'~ value does not match the regular expression you enter into the <em>Value</em> attribute.<br>
Note: Regular expressions enable you to search for patterns in string data by using standardized syntax conventions, rather than just a straight character comparisons.~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                   => l_property_id,
            p_name                 => c_name_prefix || 'VAL_SQL_STATEMENT',
            p_prompt               => 'SQL Query',
            p_property_type        => 'SQL',
            p_db_column            => 'VALIDATION',
            p_display_length       => 80,
            p_max_length           => 4000,
            p_display_group_name   => 'VALIDATION',
            p_sql_min_column_count => 1,
            p_help_text            => q'~Enter a SQL query to define this validation.~',
            p_examples             => q'~
<dl><dt>For <strong>Rows Returned</strong>, to pass the validation, and not raise an error message, when the employee is in department 30:</dt>
<dd><pre>
select 1
  from emp
 where empno  = :P2_EMPNO
   and deptno = 30
</pre></dd>
<dt>For <strong>No Rows Returned</strong>, to pass the validation, and not raise an error message, when the employee is in department 40:</dt>
<dd><pre>
select 1
  from emp
 where empno  = :P2_EMPNO
   and deptno <> 40
</pre></dd>
</dl>~' );
        --
        if p_name_prefix is null then
            l_property_id := l_property_id + 1;
            store_property (
                p_id                       => l_property_id,
                p_name                     => 'VAL_ITEM',
                p_prompt                   => 'Item',
                p_property_type            => 'ITEM',
                p_db_column                => 'VALIDATION',
                p_display_length           => 80,
                p_max_length               => 255,
                p_display_group_name       => 'VALIDATION',
                p_lov_component_type_scope => 'APPLICATION',
                p_help_text                => q'~Enter a page or application item used in this validation. You can type in the name or pick from the list of available items.~' );
        end if;
        --
        if p_name_prefix = 'REGION' then
            l_property_id := l_property_id + 1;
            store_property (
                p_id                 => l_property_id,
                p_name               => c_name_prefix || 'VAL_COLUMN',
                p_prompt             => 'Column',
                p_property_type      => 'REGION COLUMN',
                p_db_column          => 'VALIDATION',
                p_display_length     => 80,
                p_max_length         => 128,
                p_display_group_name => 'VALIDATION',
                p_help_text          => q'~Enter a case-sensitive column name for this validation. You can type in the name or pick from the list of available columns.~' );
        end if;
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'VAL_VALUE',
            p_prompt             => 'Value',
            p_property_type      => 'TEXT EDITOR',
            p_db_column          => 'VALIDATION2',
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => 'VALIDATION',
            p_help_text          => q'~Enter the value used to compare against the value of the ~' || c_item_or_column_lower || q'~ column specified for this validation.~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'VAL_REGULAR_EXPRESSION',
            p_prompt             => 'Regular Expression',
            p_property_type      => 'TEXT',
            p_db_column          => 'VALIDATION2',
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => 'VALIDATION',
            p_help_text          => q'~Enter the regular expression used to match the ~' || c_item_or_column_lower || q'~ specified for this validation.~' );
        --
        -- Note: the calls to store_expression_properties and store_func_body_properties have to be last, because if we have to add
        --       new properties in those procedures, it would change the ID of all properties which are created after
        --
        --
        l_property_id := l_property_id + 1;
        store_func_body_properties (
            p_start_property_id   => l_property_id,
            p_name_prefix         => c_name_prefix || 'VAL_',
            p_postfix             => 'ERROR',
            p_return_type         => 'VARCHAR2',
            p_prompt              => '%language% Function Body Returning Error Text',
            p_db_column_lang      => 'VALIDATION2',
            p_db_column_func_body => 'VALIDATION',
            p_display_group_name  => 'VALIDATION',
            p_help_text           => q'~Enter a %language% function body that returns the error message text as the basis for this validation.~',
            p_examples_plsql      => q'~
<dl><dt>To pass the validation, and not raise the specified error message, when the employee is in department 30:</dt>
<dd><pre>
begin
    if :P2_DEPTNO <> 30 then
        return 'Employee is in Department ' || :P2_DEPTNO || ' and not Department 30';
    end if;
    return null;
end;
</pre></dd>
</dl>~',
            p_examples_js         => q'~
<dl><dt>To pass the validation, and not raise the specified error message, when the employee is in department 30:</dt>
<dd><pre>
if ( apex.env.P2_DEPTNO !== "30" ) {
    return "Employee is in Department " + apex.env.P2_DEPTNO + " and not Department 30";
}
return "";
</pre></dd>
</dl>~' );
        --
        l_property_id := l_property_id + 20;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'VAL_PLSQL',
            p_prompt             => 'PL/SQL Code raising Error',
            p_property_type      => 'PLSQL',
            p_db_column          => 'VALIDATION',
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => 'VALIDATION',
            p_help_text          => q'~Enter a PL/SQL expression that raises an error as the basis for this validation.~',
            p_examples           => q'~
<dl><dt>To pass the validation, and not raise the specified error, when the employee is in department 30:</dt>
<dd><pre>
begin
    if :P2_DEPTNO <> 30 then
        raise_application_error( -20000, 'Employee is in Department ' || :P2_DEPTNO || ' and not Department 30' );
    end if;
end;
</pre></dd>
</dl>~' );
        l_property_id := l_property_id + 1;
        store_expression_properties (
            p_start_property_id  => l_property_id,
            p_name_prefix        => c_name_prefix || 'VAL_',
            p_return_type        => 'BOOLEAN',
            p_db_column_lang     => 'VALIDATION2',
            p_db_column_expr     => 'VALIDATION',
            p_display_group_name => 'VALIDATION',
            p_help_text          => q'~Enter a %language% expression to define the validation.~',
            p_examples_sql       => q'~
<dl><dt>To pass the validation, and not raise an error message, when the employee is a manager or the department is located in Chicago:</dt>
<dd><pre>
:P2_JOB = 'MANAGER' or
exists ( select 1
           from dept
          where deptno = :P2_DEPTNO
            and loc    = 'CHICAGO' )
</pre></dd>
</dl>~',
            p_examples_plsql     => q'~
<dl><dt>To pass the validation, and not raise an error message, when the employee is in department 30 or is a manager:</dt>
<dd><pre>
( :P2_DEPTNO = 30 or :P2_JOB = 'MANAGER' )
</pre></dd>
</dl>~',
            p_examples_js        => q'~
<dl><dt>To pass the validation, and not raise an error message, when the employee is in department 30 or is a manager:</dt>
<dd><pre>
( apex.env.P2_DEPTNO === "30" || apex.env.P2_JOB == "MANAGER" )
</pre></dd>
</dl>~' );
        --
        l_property_id := l_property_id + 20;
        store_func_body_properties (
            p_start_property_id   => l_property_id,
            p_name_prefix         => c_name_prefix || 'VAL_',
            p_return_type         => 'BOOLEAN',
            p_db_column_lang      => 'VALIDATION2',
            p_db_column_func_body => 'VALIDATION',
            p_display_group_name  => 'VALIDATION',
            p_help_text           => q'~Enter a %language% function body that returns a BOOLEAN value as the basis for this validation.~',
            p_examples_plsql      => q'~
<dl><dt>To pass the validation, and not raise an error message, when the employee is in department 30:</dt>
<dd><pre>
begin
    if :P2_DEPTNO = 30 then
        return true;
    else
        return false;
    end if;
end;
</pre></dd>
</dl>~',
            p_examples_js         => q'~
<dl><dt>To pass the validation, and not raise an error message, when the employee is in department 30:</dt>
<dd><pre>
if ( apex.env.P2_DEPTNO === "30" ) {
    return true;
} else {
    return false;
}
</pre></dd>
</dl>~' );
        --
    end store_val_type_properties;
    --
    --
    procedure store_report_template_props (
        p_start_property_id     in integer )
    is
        l_type      constant wwv_flow_t_varchar2 := wwv_flow_t_varchar2('COLUMN','ROW');
    begin
        l_property_id :=  p_start_property_id - 1; -- Decrease the property id by 1 -> the increase is done again during the loop
        for t in 1..l_type.count loop
            for i in 1..4 loop
                l_property_id := l_property_id + 1;
                store_property (
                    p_id                 => l_property_id,
                    p_name               => l_type(t)||'_TEMPLATE_'||i,
                    p_prompt             => 'Template',
                    p_property_type      => 'HTML',
                    p_db_column          => 'ROW_TEMPLATE'||i,
                    p_max_length         => 4000,
                    p_display_group_name => l_type(t)||'_TEMPLATE_'||i,
                    p_is_translatable    => true,
                    p_examples           => q'~<pre>&lt;td #ALIGNMENT#&gt;#COLUMN_VALUE#&lt;/td&gt;</pre>~',
                    p_help_text          => q'~<p>Defines the ~'||lower(l_type(t))||q'~ template. You can use these substitution strings here:</p>
<ul class="noIndent">
<li>#COLUMN_VALUE# - Will be replaced with the value of a column</li>
<li>#ALIGNMENT# - Specified by the user, determines the alignment of a column</li>
<li>#COLNUM# - Current Column Number</li>
<li>#COLUMN_HEADER# - Column Header</li>
<li>#COLCOUNT# - Number of Columns</li>
<li>#ROWNUM# - Current Row Number</li>~'||
case l_type(t)
    when 'COLUMN' then
        q'~<li>#ACCESSIBLE_HEADERS# - Adds the row and column headers for the cell</li>
</ul><p>You can define up to four column templates, each of which can be conditional.  For example, you can have different background colors for even and odd rows, or highlight rows which meet a PL/SQL defined condition.</p>~'
    else
        q'~</ul><p>You can also use column number syntax to reference columns by select list position in the query, such as #1#, #2#.</p>~'
end );
                --
                l_property_id := l_property_id + 1;
                store_property (
                    p_id                 => l_property_id,
                    p_name               => l_type(t)||'_TEMPLATE_'||i||'_CONDITION',
                    p_prompt             => 'Condition',
                    p_property_type      => 'SELECT LIST',
                    p_db_column          => 'ROW_TEMPLATE_DISPLAY_COND'||i,
                    p_display_group_name => l_type(t)||'_TEMPLATE_'||i,
                    p_lov_type           => 'STATIC',
                    p_help_text          => q'~<p>Optionally select a condition that must be met in order to apply this ~'||lower(l_type(t))||q'~ template. You can select either even or odd row numbers, or supply a PL/SQL expression.</p>~' );
                --
                store_property_lov_values (
                    p_property_id   => l_property_id,
                    p_display_value => 'Use Based on PL/SQL Expression',
                    p_return_value  => 'NOT_CONDITIONAL' );
                --
                store_property_lov_values (
                    p_property_id   => l_property_id,
                    p_display_value => 'Use for Even Numbered Rows',
                    p_return_value  => 'EVEN_ROW_NUMBERS' );
                --
                store_property_lov_values (
                    p_property_id   => l_property_id,
                    p_display_value => 'Use for Odd Numbered Rows',
                    p_return_value  => 'ODD_ROW_NUMBERS' );
                --
                l_property_id := l_property_id + 1;
                store_property (
                    p_id                 => l_property_id,
                    p_name               => l_type(t)||'_TEMPLATE_'||i||'_EXPRESSION',
                    p_prompt             => 'PL/SQL Expression',
                    p_property_type      => 'PLSQL EXPRESSION BOOLEAN',
                    p_db_column          => 'ROW_TEMPLATE_CONDITION'||i,
                    p_max_length         => 4000,
                    p_display_group_name => l_type(t)||'_TEMPLATE_'||i,
                    p_examples           => q'~<p>If you wanted to display a value in bold if the salary was greater than 2000, you could use the following template condition:</p>
<pre>:SAL &gt; 2000</pre>~',
                    p_help_text          => q'~<p>Used only when the ~'||lower(l_type(t))||q'~ condition is set to Use Based on PL/SQL Expression. Enables you to format ~'||lower(l_type(t))||q'~s based on the data in that row.</p>
<p>Note that column names should be referenced using bind variable syntax, that is, use :SAL rather than #SAL#. You can also use the substitution string #ROWNUM# here.</p>~' );
            end loop;
        end loop;
    end store_report_template_props;
    --
    procedure store_list_tmpl_attr_props (
        p_start_property_id in number,
        p_attribute_count   in integer )
    is
        l_idx         varchar2(2);
    begin
        l_property_id := p_start_property_id - 1;
        --
        for i in 1..p_attribute_count loop
            l_idx         := lpad(i,2,'0');
            l_property_id := l_property_id + 1;
            store_property (
                p_id                 => l_property_id,
                p_name               => 'A'||l_idx||'_DESCRIPTION',
                p_prompt             => 'A'||l_idx,
                p_property_type      => 'TEXT',
                p_db_column          => 'A'||l_idx||'_LABEL',
                p_display_length     => 80,
                p_max_length         => 4000,
                p_display_group_name => 'ATTRIBUTE_DESCRIPTIONS',
                p_help_text          => 'Specify a brief description for the substitution string #A'||l_idx||'#, to assist in understanding its use in the current list template.' );
        end loop;
    end store_list_tmpl_attr_props;
    --
    procedure store_list_tmpl_att_comp_props (
        p_componant_type_id in number,
        p_attribute_count   in integer )
    is
        l_idx         varchar2(2);
    begin
        for i in 1..p_attribute_count loop
            l_idx := lpad(i,2,'0');
            store_component_prop (
                p_component_type_id     => l_component_type_id,
                p_property_name         => 'A'||l_idx||'_DESCRIPTION',
                p_db_column             => null,
                p_is_required           => false,
                p_is_common             => false,
                p_supports_substitution => false );
        end loop;
    end store_list_tmpl_att_comp_props;
    --
    --
    procedure store_comp_prop_report_tmpl
    is
        l_type          constant wwv_flow_t_varchar2 := wwv_flow_t_varchar2('COLUMN'         ,'ROW');
        l_expression    constant wwv_flow_t_varchar2 := wwv_flow_t_varchar2('GENERIC_COLUMNS','NAMED_COLUMNS');
        --
    begin
        for t in 1..l_type.count loop
            for i in 1..4 loop
                store_component_prop (
                    p_component_type_id           => l_component_type_id,
                    p_property_name               => l_type(t)||'_TEMPLATE_'||i,
                    p_db_column                   => null,
                    p_is_required                 => case i when 1 then true else false end,
                    p_is_common                   => false,
                    p_default_value               => case when l_type(t) = 'ROW' and i = 1 then '<tr><td>#1#</td><td>#2#</td><td>#3#</td><td>#4#</td><td>#5#</td></tr>' end,
                    p_supports_substitution       => false,
                    p_depending_on_comp_prop_name => 'CLASSIC_REPORT_TEMPLATE_TYPE',
                    p_depending_on_condition_type => 'EQUALS',
                    p_depending_on_expression     => l_expression(t) );
                --
                store_component_prop (
                    p_component_type_id           => l_component_type_id,
                    p_property_name               => l_type(t)||'_TEMPLATE_'||i||'_CONDITION',
                    p_db_column                   => null,
                    p_is_required                 => false,
                    p_is_common                   => false,
                    p_depending_on_comp_prop_name => l_type(t)||'_TEMPLATE_'||i,
                    p_depending_on_condition_type => 'NOT_NULL' );
                --
                store_component_prop (
                    p_component_type_id           => l_component_type_id,
                    p_property_name               => l_type(t)||'_TEMPLATE_'||i||'_EXPRESSION',
                    p_db_column                   => null,
                    p_is_required                 => true,
                    p_is_common                   => false,
                    p_supports_substitution       => false,
                    p_depending_on_comp_prop_name => l_type(t)||'_TEMPLATE_'||i||'_CONDITION',
                    p_depending_on_condition_type => 'EQUALS',
                    p_depending_on_expression     => 'NOT_CONDITIONAL' );
            end loop;
        end loop;
    end store_comp_prop_report_tmpl;
    --
    --
    procedure store_order_by_item_property (
        p_name               in varchar2,
        p_prompt             in varchar2,
        p_display_group_name in varchar2 )
    is
    begin
        store_property (
            p_id                 => l_property_id,
            p_name               => p_name,
            p_prompt             => p_prompt,
            p_property_type      => 'ORDER BY ITEM',
            p_db_column          => 'QUERY_ORDER_BY',
            p_display_group_name => p_display_group_name,
            p_examples           => q'~
<dl><dt>To show the newest hires first and those which have not been hired yet last. If the date is equal, sort them by department number.</dt>
<dd><pre>
HIREDATE DESC NULLS LAST, DEPTNO
</pre></dd>
</dl>~',
            p_help_text          => q'~<p>Enter multiple Order By Clauses that can be picked by end-users. Each can contain one or more comma-separated column names, including directives, to define the order in which records are retrieved.</p>
            <p>Directives include:
              <ul>
                <li>ASC - Return column in ascending order</li>
                <li>DESC - Return column in descending order</li>
                <li>NULLS FIRST - Return column with no value before those with values</li>
                <li>NULLS LAST - Return column with values before those with no value</li>
              </ul>
            </p>~' );
    end store_order_by_item_property;
    --
    --
    procedure store_post_processing_props(
        p_prefix        in varchar2,
        p_ids           in wwv_flow_t_number )
    is
        l_source_type varchar2(255) := case p_prefix
                                            when 'DUALITYVIEW_'    then 'Duality View'
                                            when 'JSONCOLLECTION_' then 'JSON'
                                            else                       'REST Source'
                                       end;
    begin
        l_property_id := p_ids( 1 );
        store_property (
            p_id                 => l_property_id,
            p_name               => p_prefix || 'SOURCE_POST_PROCESSING',
            p_prompt             => 'Type',
            p_property_type      => 'SELECT LIST',
            p_db_column          => 'SOURCE_POST_PROCESSING',
            p_display_group_name => 'LOCAL_POST_PROCESSING',
            p_lov_type           => 'STATIC',
            p_help_text          => 'Select how to post process the retrieved ' || l_source_type || ' data in the local database.' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Where/Order By Clause',
            p_return_value  => 'WHERE_ORDER_BY_CLAUSE',
            p_help_text     => q'~Enter the where and/or order by clause to restrict and order the data retrieved.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'SQL Query',
            p_return_value  => 'SQL',
            p_help_text     => q'~Enter a SQL Query to transform the data retrieved.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'PL/SQL Function Body returning SQL Query',
            p_return_value  => 'FUNC_BODY_RETURNING_SQL',
            p_help_text     => q'~Enter a PL/SQL function body, where the SQL query returned transforms the data retrieved.~' );
        --
        l_property_id := p_ids( 2 );
        store_property (
            p_id                 => l_property_id,
            p_name               => p_prefix || 'POST_PROC_WHERE',
            p_prompt             => 'Where Clause',
            p_property_type      => 'WHERE CLAUSE',
            p_db_column          => 'QUERY_WHERE',
            p_display_length     => 40,
            p_max_length         => 4000,
            p_display_group_name => 'LOCAL_POST_PROCESSING',
            p_examples           => q'~
    <dl><dt>Only include those employees which have a manager or have a job of salesman.</dt>
    <dd><pre>
    ( MGR is not null or JOB = 'SALESMAN' )
    </pre></dd>
    </dl>~',
            p_help_text          => q'~Enter a valid SQL where condition, used to limit the records retrieved.~' );
        --
        l_property_id := p_ids( 3 );
        store_property (
            p_id                 => l_property_id,
            p_name               => p_prefix || 'POST_PROC_ORDER_BY',
            p_prompt             => 'Order By Clause',
            p_property_type      => 'ORDER BY CLAUSE',
            p_db_column          => 'QUERY_ORDER_BY',
            p_display_length     => 40,
            p_max_length         => 255,
            p_display_group_name => 'LOCAL_POST_PROCESSING',
            p_examples           => q'~
    <dl><dt>To show the newest hires first and those which have not been hired yet last. If the date is equal, sort them by department number.</dt>
    <dd><pre>
    HIREDATE DESC NULLS LAST, DEPTNO
    </pre></dd>
    </dl>~',
            p_help_text          => q'~<p>Enter one or more comma separated column names, including directives, to define the order in which records are retrieved.</p>
            <p>Directives include:
              <ul>
                <li>ASC - Return column in ascending order</li>
                <li>DESC - Return column in descending order</li>
                <li>NULLS FIRST - Return column with no value before those with values</li>
                <li>NULLS LAST - Return column with values before those with no value</li>
              </ul>
            </p>~' );
        --
        l_property_id := p_ids( 4 );
        store_property (
            p_id                   => l_property_id,
            p_name                 => p_prefix || 'POST_PROC_SQL_QUERY',
            p_prompt               => 'SQL Query',
            p_property_type        => 'SQL',
            p_db_column            => 'PLUG_SOURCE',
            p_display_length       => 80,
            p_max_length           => 32767,
            p_sql_min_column_count => 1,
            p_display_group_name   => 'LOCAL_POST_PROCESSING',
            p_examples             => q'~
    <dl><dt>Select the EMPNO, ENAME and SAL columns and filter out all rows with a SAL less then 3000.</dt>
    <dd><pre>
    select EMPNO, ENAME, SAL
      from #APEX$SOURCE_DATA#
     where SAL < 3000
    </pre></dd>
    </dl>~',
            p_help_text            => q'~Enter a SQL Query to transform the data retrieved from the REST Data Source. Select from the pseudo-table #APEX$SOURCE_DATA# and specify columns available in the data profile. Subquery factoring using the SQL WITH clause is not supported here.~' );
        --
        store_func_body_properties (
            p_start_property_id   => p_ids( 8 ),
            p_name_prefix         => p_prefix || 'POST_PROC_',
            p_return_type         => 'SQL',
            p_db_column_lang      => 'FUNCTION_BODY_LANGUAGE',
            p_db_column_func_body => 'DATA_SOURCE',
            p_display_group_name  => 'LOCAL_POST_PROCESSING',
            p_help_text           => q'~Enter a %language% function body, where the SQL query returned transforms the data retrieved from the Web Source. The SQL query returned by the %language% function body must select from the #APEX$SOURCE_DATA# pseudo-table and read columns available in the data profile. Subquery factoring using the SQL WITH clause is not supported here. ~',
            p_examples_plsql      => q'~
    <dl><dt>Select the EMPNO, ENAME and SAL columns and filter out all rows with a SAL less then 3000.</dt>
    <dd><pre>
    begin
        return 'select EMPNO, ENAME, SAL from #APEX$SOURCE_DATA where SAL < 3000';
    end;
    </pre></dd>
    </dl>~',
            p_examples_js         => q'~
    <dl><dt>Select the EMPNO, ENAME and SAL columns and filter out all rows with a SAL less then 3000.</dt>
    <dd><pre>
    return "select EMPNO, ENAME, SAL from #APEX$SOURCE_DATA where SAL < 3000";
    </pre></dd>
    </dl>~' );

        l_property_id := p_ids( 5 );
        store_property (
            p_id                 => l_property_id,
            p_name               => p_prefix || 'POST_PROC_ORDER_BY_TYPE',
            p_prompt             => 'Order By Type',
            p_property_type      => 'SELECT LIST',
            p_db_column          => 'QUERY_ORDER_BY_TYPE',
            p_display_group_name => 'LOCAL_POST_PROCESSING',
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select how this component is sorted.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Static Value',
            p_return_value  => 'STATIC',
            p_is_quick_pick => 'Y',
            p_help_text     => q'~Based on the ORDER BY clause entered into <em>Order By Clause</em>.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Item',
            p_return_value  => 'ITEM',
            p_is_quick_pick => 'Y',
            p_help_text     => q'~Based on the value held in session state for the <em>Item</em> selected.~' );
        --
        l_property_id := p_ids( 6 );
        store_order_by_item_property (
            p_name               => p_prefix || 'POST_PROC_ORDER_BY_ITEM',
            p_prompt             => 'Item',
            p_display_group_name => 'LOCAL_POST_PROCESSING' );
        --
        l_property_id := p_ids( 7 );
        store_order_by_item_property (
            p_name               => p_prefix || 'POST_PROC_ORDER_BY_ITEM2',
            p_prompt             => 'Order By Item',
            p_display_group_name => 'LOCAL_POST_PROCESSING' );
    end store_post_processing_props;
    --
    --
    procedure store_val_type_comp_props (
        p_name_prefix in varchar2 )
    is
        c_name_prefix     constant varchar2( 30 ) := case when p_name_prefix is not null then p_name_prefix || '_' end;
        c_type_property   constant varchar2( 30 ) := c_name_prefix || 'VALIDATION_TYPE';
        c_reference_scope constant varchar2( 30 ) := case when p_name_prefix is not null then 'ROW' else 'COMPONENT' end;
    begin
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => c_type_property,
            p_db_column                   => null,
            p_view_column                 => 'VALIDATION_TYPE',
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => 'EXPRESSION',
            p_depending_on_comp_prop_name => 'VALIDATION_REGION',
            p_depending_on_condition_type => case when p_name_prefix is not null then 'NOT_NULL' else 'NULL' end );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => c_name_prefix || 'VAL_SQL_STATEMENT',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_reference_scope             => c_reference_scope,
            p_depending_on_comp_prop_name => c_type_property,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'EXISTS,NOT_EXISTS' );
        --
        store_expression_comp_props (
            p_component_type_id => l_component_type_id,
            p_name_prefix       => c_name_prefix || 'VAL_',
            p_return_type       => 'BOOLEAN',
            p_reference_scope   => c_reference_scope,
            p_type_property     => c_type_property );
        --
        store_func_body_comp_props (
            p_component_type_id => l_component_type_id,
            p_name_prefix       => c_name_prefix || 'VAL_',
            p_return_type       => 'BOOLEAN',
            p_reference_scope   => c_reference_scope,
            p_type_property     => c_type_property,
            p_type_value        => 'FUNC_BODY_RETURNING_BOOLEAN' );
        --
        store_func_body_comp_props (
            p_component_type_id   => l_component_type_id,
            p_name_prefix         => c_name_prefix || 'VAL_',
            p_postfix             => 'ERROR',
            p_return_type         => 'VARCHAR2',
            p_db_column_lang      => null,
            p_db_column_func_body => null,
            p_reference_scope     => c_reference_scope,
            p_type_property       => c_type_property,
            p_type_value          => 'FUNC_BODY_RETURNING_ERR_TEXT' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => c_name_prefix || 'VAL_PLSQL',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_reference_scope             => c_reference_scope,
            p_depending_on_comp_prop_name => c_type_property,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PLSQL_ERROR' );
        --
        if p_name_prefix is null then
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => c_name_prefix || 'VAL_ITEM',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => true,
                p_reference_on_delete          => 'WEAK_CASCADE',
                p_depending_on_comp_prop_name  => c_type_property,
                p_depending_on_condition_type  => 'IN_LIST_LIKE',
                p_depending_on_expression      => 'ITEM,REGULAR_EXPRESSION' );
        end if;
        --
        if p_name_prefix = 'REGION' then
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => c_name_prefix || 'VAL_COLUMN',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => true,
                p_parent_comp_prop_name        => 'VALIDATION_REGION',
                p_depending_on_comp_prop_name  => c_type_property,
                p_depending_on_condition_type  => 'IN_LIST_LIKE',
                p_depending_on_expression      => 'ITEM,REGULAR_EXPRESSION' );
        end if;
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => c_name_prefix || 'VAL_REGULAR_EXPRESSION',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_reference_scope              => 'DEPENDS',
            p_depending_on_comp_prop_name  => c_type_property,
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'REGULAR_EXPRESSION' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => c_name_prefix || 'VAL_VALUE',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_reference_scope              => c_reference_scope,
            p_depending_on_comp_prop_name  => c_type_property,
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'ITEM_IN_VALIDATION_EQ_STRING2,ITEM_IN_VALIDATION_NOT_EQ_STRING2,ITEM_IN_VALIDATION_IN_STRING2,ITEM_IN_VALIDATION_NOT_IN_STRING2,ITEM_IN_VALIDATION_CONTAINS_AT_LEAST_ONE_CHAR_IN_STRING2,ITEM_IN_VALIDATION_CONTAINS_ONLY_CHAR_IN_STRING2,ITEM_IN_VALIDATION_CONTAINS_NO_CHAR_IN_STRING2' );
        --
    end store_val_type_comp_props;
    --
    --
    procedure store_audit_info_comp_prop (
        p_component_type_id in number,
        p_db_column_prefix  in varchar2 default 'LAST_' )
    is
    begin

        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'CHANGED_BY',
            p_db_column             => p_db_column_prefix || 'UPDATED_BY',
            p_import_api_parameter  => 'updated_by',
            p_is_required           => false,
            p_is_common             => false,
            p_is_read_only          => true,
            p_supports_substitution => false );
        --
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'CHANGED_ON',
            p_db_column             => p_db_column_prefix || 'UPDATED_ON',
            p_import_api_parameter  => 'updated_on',
            p_is_required           => false,
            p_is_common             => false,
            p_is_read_only          => true,
            p_supports_substitution => false );
    end store_audit_info_comp_prop;
    --
    --
    procedure store_standard_attr_comp_prop (
        p_component_type_id           in number   default l_component_type_id,
        p_has_condition               in boolean  default false,
        p_cond_type_name_prefix       in varchar2 default null,
        p_cond_type_help_text         in varchar2 default null,
        p_cond_type_db_column         in varchar2 default null,
        p_cond_type_view_db_column    in varchar2 default null,
        p_cond_exp1_db_column         in varchar2 default null,
        p_cond_exp2_db_column         in varchar2 default null,
        p_has_authorization_scheme    in boolean  default false,
        p_authorization_db_column     in varchar2 default null,
        p_authz_dep_on_comp_prop_name in varchar2 default null,
        p_authz_dep_on_condition_type in varchar2 default null,
        p_authz_dep_on_expression     in varchar2 default null,
        p_has_build_option            in boolean  default false,
        p_build_option_db_column      in varchar2 default null,
        p_has_comments                in boolean  default false,
        p_comment_db_column           in varchar2 default null,
        p_comment_import_api_param    in varchar2 default null,
        p_audit_db_column_prefix      in varchar2 default 'LAST_' )
    is
    begin
        if p_has_condition then
            store_condition_type_comp_prop (
                p_component_type_id=> p_component_type_id,
                p_name_prefix      => p_cond_type_name_prefix,
                p_help_text_type   => p_cond_type_help_text,
                p_db_column_type   => p_cond_type_db_column,
                p_view_column_type => p_cond_type_view_db_column,
                p_db_column_expr1  => p_cond_exp1_db_column,
                p_db_column_expr2  => p_cond_exp2_db_column );
        end if;
        --
        if p_has_authorization_scheme or p_authorization_db_column is not null then
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => 'AUTHORIZATION_SCHEME',
                p_db_column                   => p_authorization_db_column,
                p_is_required                 => false,
                p_is_common                   => false,
                p_reference_on_delete         => 'WEAK_NULL',
                p_depending_on_comp_prop_name => p_authz_dep_on_comp_prop_name,
                p_depending_on_condition_type => p_authz_dep_on_condition_type,
                p_depending_on_expression     => p_authz_dep_on_expression );
        end if;
        --
        if p_has_build_option or p_build_option_db_column is not null then
            store_component_prop (
                p_component_type_id   => p_component_type_id,
                p_property_name       => 'BUILD_OPTION',
                p_db_column           => p_build_option_db_column,
                p_is_required         => false,
                p_is_common           => false,
                p_reference_on_delete => 'WEAK_NULL' );
        end if;
        --
        if p_has_comments or p_comment_db_column is not null then
            store_component_prop (
                p_component_type_id     => p_component_type_id,
                p_property_name         => 'COMMENTS',
                p_db_column             => p_comment_db_column,
                p_import_api_parameter  => p_comment_import_api_param,
                p_is_required           => false,
                p_is_common             => false,
                p_supports_substitution => false );
        end if;
        --
        store_audit_info_comp_prop (
            p_component_type_id => p_component_type_id,
            p_db_column_prefix  => p_audit_db_column_prefix );
        --
    end store_standard_attr_comp_prop;
    --
    --
    procedure store_process_type_comp_prop (
        p_name_db_column           in varchar2,
        p_name_help_text           in varchar2,
        p_db_column_prefix         in varchar2,
        p_execution_seq_db_column  in varchar2,
        p_error_message_db_column  in varchar2,
        p_error_message_help_text  in varchar2 default null,
        p_stop_execution_help_text in varchar2 default null,
        p_has_authorization_scheme in boolean,
        p_build_option_db_column   in varchar2,
        p_comment_db_column        in varchar2,
        p_comment_import_api_param in varchar2 default null )
    is
    begin
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'NAME',
            p_db_column             => p_name_db_column,
            p_is_required           => true,
            p_is_common             => true,
            p_check_uniqueness      => case l_component_type_id
                                         when c_comp_type_app_process  then 'APPLICATION'
                                         when c_comp_type_page_process then 'PAGE'
                                         else 'PARENT'
                                       end,
            p_supports_substitution => false,
            p_default_value         => '#PLEASE_CHANGE#',
            p_help_text             => p_name_help_text );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PROCESS_TYPE',
            p_db_column         => case when p_db_column_prefix is not null then p_db_column_prefix || 'TYPE' end,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'NATIVE_PLSQL' );
        --
        if l_component_type_id = c_comp_type_page_process then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PARENT_PROCESS',
                p_is_required                 => false,
                p_is_common                   => true,
                p_null_text                   => 'None',
                p_reference_on_delete         => 'WEAK_CASCADE' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'INTERNAL_UID',
                p_is_required                 => false,
                p_is_read_only                => true,
                p_is_common                   => true );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PROCESS_DATA_SOURCE_REGION',
                p_db_column                   => null,
                p_is_required                 => null, -- defined by plug-in standard attributes
                p_is_common                   => true,
                p_reference_on_delete         => 'WEAK_CASCADE',
                p_plugin_std_attributes       => 'FORM' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PROCESS_REGION',
                p_db_column                   => null,
                p_is_required                 => null, -- defined by plug-in standard attributes
                p_is_common                   => true,
                p_reference_on_delete         => 'WEAK_CASCADE',
                p_plugin_std_attributes       => 'REGION' );
        end if;
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'PLSQL_PROCESS_LOCATION',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'LOCAL',
            p_depending_on_comp_prop_name => 'PROCESS_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'NATIVE_PLSQL' );
        --
        if l_component_type_id = c_comp_type_workflow_activity then
            store_snippet_comp_props (
                p_component_type_id           => l_component_type_id,
                p_name_prefix                 => 'SOURCE_',
                p_db_column_lang              => 'ACTIVITY_CODE_LANGUAGE',
                p_db_column_snippet           => 'ACTIVITY_CODE',
                p_reference_scope             => 'COMPONENT',
                p_type_property               => 'PLSQL_PROCESS_LOCATION',
                p_type_value                  => 'LOCAL' );
        --
        else
            store_snippet_comp_props (
                p_component_type_id           => l_component_type_id,
                p_name_prefix                 => 'SOURCE_',
                p_db_column_lang              => case when p_db_column_prefix is not null then p_db_column_prefix || 'CLOB_LANGUAGE' end,
                p_db_column_snippet           => case when p_db_column_prefix is not null then p_db_column_prefix || 'CLOB' end,
                p_reference_scope             => case l_component_type_id
                                                   when c_comp_type_page_process then 'DEPENDS'
                                                   else 'COMPONENT'
                                                  end,
                p_type_property               => 'PLSQL_PROCESS_LOCATION',
                p_type_value                  => 'LOCAL' );
        end if;
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SOURCE_REMOTE_ORACLE_DATABASE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'PLSQL_PROCESS_LOCATION',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'REMOTE' );
        --
        if l_component_type_id = c_comp_type_workflow_activity then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PLSQL_CODE',
                p_db_column                   => 'ACTIVITY_CODE',
                p_is_required                 => true,
                p_is_common                   => true,
                p_reference_scope             => 'COMPONENT',
                p_depending_on_comp_prop_name => 'PLSQL_PROCESS_LOCATION',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'REMOTE',
                p_help_text                   => q'~Enter the PL/SQL code to be executed on the remote database.~' );
        else
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PLSQL_CODE',
                p_db_column                   => case
                                               when p_db_column_prefix is not null then p_db_column_prefix || 'CLOB'
                                               else 'PROCESS_SQL_CLOB'
                                             end,
                p_is_required                 => true,
                p_is_common                   => true,
                p_reference_scope             => case l_component_type_id
                                                   when c_comp_type_page_process then 'DEPENDS'
                                                   else 'COMPONENT'
                                                 end,
                p_depending_on_comp_prop_name => 'PLSQL_PROCESS_LOCATION',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'REMOTE',
                p_help_text                   => q'~Enter the PL/SQL code to be executed on the remote database.~' );
        end if;
        --
        store_plugin_attr_seq_offset (
            p_component_type_id => l_component_type_id );
        --
        if l_component_type_id = c_comp_type_task_def_action then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'LOG_MESSAGE_TYPE',
                p_db_column         => null,
                p_is_required       => true,
                p_is_common         => true,
                p_default_value     => 'NONE' );
            --
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'ON_EVENT',
                p_db_column         => null,
                p_is_required       => true,
                p_is_common         => true,
                p_default_value     => 'COMPLETE' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'OUTCOME',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'ON_EVENT',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'COMPLETE' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'BEFORE_EXPIRE_INTERVAL',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'ON_EVENT',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'BEFORE_EXPIRE' );
        end if;
        --
        if l_component_type_id = c_comp_type_workflow_activity then

            store_component_prop (
                p_component_type_id        => l_component_type_id,
                p_property_name            => 'WF_SOURCE_SQL_QUERY',
                p_db_column                => 'QUERY_SOURCE',
                p_is_required              => false,
                p_is_common                => true,
                p_help_text                => q'~<p>Enter a SQL query to read additional data.</p>
                <p>The column names of the query can be used as bind variables and substitution
                strings to evaluate conditions or activity variables during the execution of the activity.</p>
                <p>The result of the query should contain only one row.</p>
                <p> If the query returns no result or more than one row then the activity fails during execution.</p>~' );

            store_component_prop (
                p_component_type_id     => l_component_type_id,
                p_property_name         => 'DUE_ON_TYPE',
                p_db_column             => null,
                p_is_required           => false,
                p_null_text             => 'None',
                p_is_common             => true,
                p_depending_on_comp_prop_name => 'PROCESS_TYPE',
                p_depending_on_condition_type => 'NOT_EQUALS',
                p_depending_on_expression     => 'NATIVE_WORKFLOW_WAIT');
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'DUE_ON_INTERVAL_VALUE',
                p_db_column                   => 'DUE_ON_VALUE',
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'DUE_ON_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'INTERVAL' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'DUE_ON_QUERY_VALUE',
                p_db_column                   => 'DUE_ON_VALUE',
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'DUE_ON_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'SQL_QUERY' );
            --
            store_expression_comp_props (
                p_component_type_id => l_component_type_id,
                p_name_prefix       => 'DUE_ON_',
                p_return_type       => 'CUSTOM',
                p_custom_data_type  => 'TIMESTAMP WITH TIME ZONE',
                p_type_property     => 'DUE_ON_TYPE' );
            --
            store_func_body_comp_props (
                p_component_type_id => l_component_type_id,
                p_name_prefix       => 'DUE_ON_',
                p_return_type       => 'CUSTOM',
                p_custom_data_type  => 'TIMESTAMP WITH TIME ZONE',
                p_type_property     => 'DUE_ON_TYPE' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'DUE_ON_SCHEDULER_VALUE',
                p_db_column                   => 'DUE_ON_VALUE',
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'DUE_ON_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'SCHEDULER_EXPRESSION' );
            --

        end if;

        --
        if l_component_type_id = c_comp_type_workflow_activity then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'DISPLAY_SEQUENCE',
                p_db_column         => 'DISPLAY_SEQUENCE',
                p_is_required       => true,
                p_is_common         => true );
        else
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'EXECUTION_SEQUENCE',
                p_db_column         => p_execution_seq_db_column,
                p_is_required       => true,
                p_is_common         => true );
        end if;
        --
        if l_component_type_id = c_comp_type_app_process then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'APP_PROCESS_POINT',
                p_db_column         => null,
                p_is_required       => true,
                p_is_common         => true,
                p_default_value     => 'BEFORE_HEADER' );
            --
        elsif l_component_type_id = c_comp_type_page_process then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PROCESS_POINT',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => true,
                p_default_value               => 'AFTER_SUBMIT',
                p_depending_on_comp_prop_name => 'PARENT_PROCESS',
                p_depending_on_condition_type => 'NULL' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'RUN_PROCESS',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_default_value               => 'N',
                p_depending_on_comp_prop_name => 'PARENT_PROCESS',
                p_depending_on_condition_type => 'NULL' );
        end if;

        if l_component_type_id in ( c_comp_type_page_process, c_comp_type_task_def_action ) then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'SUCCESS_MESSAGE',
                p_db_column         => case when l_component_type_id = c_comp_type_task_def_action then 'SUCCESS_MESSAGE' end,
                p_is_required       => false,
                p_is_common         => true,
                p_help_text         => q'~<p>Enter the success message for this process.
If the process runs and does not generate an error, then this process success message displays in the notification section of the resulting page displayed.
If you are branching to another page via a URL redirect, you may need to check the <em>preserve success message</em> attribute.</p>
<p>For multi row processes, the following substitution string can be used to get the number of records processed:</p>
<ul>
  <li>Insert: <code>#MRI_COUNT#</code></li>
  <li>Update: <code>#MRU_COUNT#</code></li>
  <li>Delete: <code>#MRD_COUNT#</code></li>
</ul>
<p>For the Send E-Mail process type the substitution string <code>#TO#</code> can be used to get the addressees of the e-mail.</p>
<p>Plug-ins can have other substitution strings as well. See Plug-in documentation for details.</p>~' );
            --
        end if;
        --
        if l_component_type_id != c_comp_type_workflow_activity then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'ERROR_MESSAGE',
                p_db_column         => p_error_message_db_column,
                p_is_required       => false,
                p_is_common         => false,
                p_help_text         => coalesce( p_error_message_help_text, q'~<p>Enter the error message for this process.
This message displays if an unhandled exception is raised. After any error processing stops, a rollback is issued and an error message displays.</p>
<p>Note: the SQL error message sqlerrm displays by default if <strong>On Error Page</strong> is defined as the error display location, there is no need to add <code>#SQLERRM#</code> to your error text.</p>
<p>Error messages can include the following substitution strings:</p>
<dl>
  <dt><code>#SQLERRM_TEXT#</code></dt>
  <dd>Text of error message without the error number.</dd>
  <dt><code>#SQLERRM#</code></dt>
  <dd>Complete error message.</dd>
</dl>~' ) );
        end if;
        --
        if l_component_type_id in ( c_comp_type_app_process, c_comp_type_page_process ) then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PROCESS_ERROR_DISPLAY_LOCATION',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_default_value               => 'INLINE_IN_NOTIFICATION',
                p_depending_on_comp_prop_name => case l_component_type_id
                                                   when c_comp_type_app_process  then 'APP_PROCESS_POINT'
                                                   when c_comp_type_page_process then 'PROCESS_POINT'
                                                 end,
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'ON_SUBMIT_BEFORE_COMPUTATION,AFTER_SUBMIT' );
        else
            if l_component_type_id != c_comp_type_workflow_activity then
                store_component_prop (
                    p_component_type_id => l_component_type_id,
                    p_property_name     => 'ERROR_STOP_EXECUTION_ON_ERROR',
                    p_db_column         => null,
                    p_is_required       => true,
                    p_is_common         => true,
                    p_default_value     => 'Y',
                    p_help_text         => p_stop_execution_help_text );
            end if;
        end if;
        --
        if l_component_type_id = c_comp_type_app_process then
            --
            store_condition_type_comp_prop (
                p_component_type_id => l_component_type_id,
                p_name_prefix       => null,
                p_help_text_type    => null,
                p_db_column_type    => 'PROCESS_WHEN_TYPE',
                p_view_column_type  => 'CONDITION_TYPE',
                p_db_column_expr1   => 'PROCESS_WHEN',
                p_db_column_expr2   => 'PROCESS_WHEN2' );
            --
        elsif l_component_type_id = c_comp_type_page_process then
            --
            store_component_prop (
                p_component_type_id   => l_component_type_id,
                p_property_name       => 'WHEN_BUTTON_PRESSED',
                p_db_column           => 'PROCESS_WHEN_BUTTON_ID',
                p_is_required         => false,
                p_is_common           => true,
                p_reference_on_delete => 'WEAK_NULL' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'EXECUTION_SCOPE',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_default_value               => 'Y',
                p_depending_on_comp_prop_name => 'PROCESS_REGION',
                p_depending_on_condition_type => 'NOT_NULL' );
            --
            store_condition_type_comp_prop (
                p_component_type_id           => l_component_type_id,
                p_name_prefix                 => null,
                p_help_text_type              => null,
                p_reference_scope             => 'DEPENDS',
                p_db_column_type              => 'PROCESS_WHEN_TYPE',
                p_view_column_type            => 'CONDITION_TYPE',
                p_db_column_expr1             => 'PROCESS_WHEN',
                p_db_column_expr2             => 'PROCESS_WHEN2',
                p_has_execute_condition       => true,
                p_execute_cond_dep_prop_name  => 'PROCESS_REGION' );
        elsif l_component_type_id != c_comp_type_workflow_activity then
            -- Automation and Task Def Actions

                store_condition_type_comp_prop (
                    p_component_type_id           => l_component_type_id,
                    p_name_prefix                 => 'ACTION',
                    p_help_text_type              => null,
                    p_db_column_type              => 'CONDITION_TYPE',
                    p_view_column_type            => 'CONDITION_TYPE',
                    p_db_column_expr1             => 'CONDITION_EXPR1',
                    p_db_column_expr2             => 'CONDITION_EXPR2',
                    p_has_execute_condition       => ( l_component_type_id = c_comp_type_automation_action ),
                    p_execute_condition_help_text => q'~Specify whether the condition is to be executed for each row or only once.~' );
        end if;
        --
        if l_component_type_id != c_comp_type_workflow_activity then
           store_standard_attr_comp_prop (
                p_component_type_id        => l_component_type_id,
                p_has_authorization_scheme => p_has_authorization_scheme,
                p_authorization_db_column  => case when p_has_authorization_scheme then 'SECURITY_SCHEME' end,
                p_has_build_option         => true,
                p_build_option_db_column   => p_build_option_db_column,
                p_has_comments             => true,
                p_comment_db_column        => p_comment_db_column,
                p_comment_import_api_param => p_comment_import_api_param );
        end if;
        --
    end store_process_type_comp_prop;
    --
    --
    procedure store_computation_comp_prop (
        p_component_type_id in number )
    is
    begin
        --
        store_component_prop (
            p_component_type_id   => p_component_type_id,
            p_property_name       => 'COMPUTATION_ITEM_NAME',
            p_db_column           => null,
            p_is_required         => true,
            p_is_common           => true,
            p_reference_on_delete => 'WEAK_CASCADE' );
        --
        store_component_prop (
            p_component_type_id => p_component_type_id,
            p_property_name     => 'EXECUTION_SEQUENCE',
            p_db_column         => 'COMPUTATION_SEQUENCE',
            p_is_required       => true,
            p_is_common         => false );
        --
        -- page and application computations have different default values
        -- for computation point and computation type
        if p_component_type_id = c_comp_type_page_computation then
            --
            store_component_prop (
                p_component_type_id => p_component_type_id,
                p_property_name     => 'COMPUTATION_POINT',
                p_db_column         => null,
                p_is_required       => true,
                p_is_common         => true,
                p_default_value     => 'BEFORE_BOX_BODY' );
            --
            store_component_prop (
                p_component_type_id => p_component_type_id,
                p_property_name     => 'COMPUTATION_TYPE',
                p_db_column         => null,
                p_view_column       => 'COMPUTATION_TYPE',
                p_is_required       => true,
                p_is_common         => true,
                p_default_value     => 'QUERY' );
        else
            --
            store_component_prop (
                p_component_type_id => p_component_type_id,
                p_property_name     => 'COMPUTATION_POINT',
                p_db_column         => null,
                p_is_required       => true,
                p_is_common         => true,
                p_default_value     => 'ON_NEW_INSTANCE' );
            --
            store_component_prop (
                p_component_type_id => p_component_type_id,
                p_property_name     => 'COMPUTATION_TYPE',
                p_db_column         => null,
                p_view_column       => 'COMPUTATION_TYPE',
                p_is_required       => true,
                p_is_common         => true,
                p_default_value     => 'STATIC' );
        end if;
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => 'COMPUTATION_STATIC_VALUE',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'COMPUTATION_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'STATIC_ASSIGNMENT' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => 'COMPUTATION_SQL_STATEMENT',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'COMPUTATION_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'QUERY' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => 'COMPUTATION_SQL_COLON',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'COMPUTATION_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'QUERY_COLON' );
        --
        store_expression_comp_props (
            p_component_type_id => p_component_type_id,
            p_name_prefix       => 'COMPUTATION_',
            p_return_type       => 'VARCHAR2',
            p_type_property     => 'COMPUTATION_TYPE' );
        --
        store_func_body_comp_props (
            p_component_type_id => p_component_type_id,
            p_name_prefix       => 'COMPUTATION_',
            p_return_type       => 'VARCHAR2',
            p_type_property     => 'COMPUTATION_TYPE' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => 'COMPUTATION_ITEM_VALUE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'COMPUTATION_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'ITEM_VALUE' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => 'COMPUTATION_PREFERENCE_VALUE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'COMPUTATION_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SET_ITEM_EQUAL_THIS_PREFERENCE' );
        --
        store_component_prop (
            p_component_type_id => p_component_type_id,
            p_property_name     => 'ERROR_MESSAGE',
            p_db_column         => 'COMPUTATION_ERROR_MESSAGE',
            p_is_required       => false,
            p_is_common         => false,
        p_help_text         => q'~<p>Enter an error message that displays if this computation fails.
    Use <code>#SQLERRM#</code> as a substitution string for the SQL error message resulting from a failed computation.</p>
    <p>Computations are designed to always succeed, and only fail due to unanticipated errors.
    It is not advisable to implement a computation that regularly fails and acts as a pseudo-validation utilizing this error message.~' );
        --
        store_standard_attr_comp_prop (
            p_component_type_id        => p_component_type_id,
            p_has_condition            => true,
            p_cond_type_db_column      => 'COMPUTE_WHEN_TYPE',
            p_cond_type_view_db_column => 'CONDITION_TYPE',
            p_cond_exp1_db_column      => 'COMPUTE_WHEN',
            p_cond_exp2_db_column      => 'COMPUTE_WHEN_TEXT',
            p_has_authorization_scheme => true,
            p_authorization_db_column  => 'SECURITY_SCHEME',
            p_has_build_option         => true,
            p_has_comments             => true,
            p_comment_db_column        => 'COMPUTATION_COMMENT' );
        --
    end store_computation_comp_prop;
    --
    procedure store_grid_comp_prop (
        p_component_type_id     in number,
        p_new_grid_db_column    in varchar2 default 'GRID_NEW_GRID',           -- Pass if component's DB column is not GRID_NEW_GRID
        p_new_row_db_column     in varchar2 default 'GRID_NEW_ROW',            -- Pass if component's DB column is not GRID_NEW_ROW
        p_row_css_db_column     in varchar2 default 'GRID_ROW_CSS_CLASSES',    -- Pass if component's DB column is not GRID_ROW_CSS_CLASSES
        p_column_db_column      in varchar2 default 'GRID_COLUMN',             -- Pass if component's DB column is not GRID_COLUMN
        p_new_column_db_column  in varchar2 default 'GRID_NEW_COLUMN',         -- Pass if component's DB column is not GRID_NEW_COLUMN
        p_column_span_db_column in varchar2 default 'GRID_COLUMN_SPAN',        -- Pass if component's DB column is not GRID_COLUMN_SPAN
        p_row_span_db_column    in varchar2 default 'GRID_ROW_SPAN',           -- Pass if component's DB column is not GRID_ROW_SPAN
        p_column_css_db_column  in varchar2 default 'GRID_COLUMN_CSS_CLASSES', -- Pass if component's DB column is not GRID_COLUMN_CSS_CLASSES
        p_column_attr_db_column in varchar2 default 'GRID_COLUMN_ATTRIBUTES',  -- Pass if component's DB column is not GRID_COLUMN_ATTRIBUTES
        p_has_label_column_span in boolean  default false,
        p_plugin_std_attributes in varchar2 default null )
    is
    begin
        --
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'GRID_NEW_GRID',
            p_db_column             => p_new_grid_db_column,
            p_is_required           => true,
            p_is_common             => true,
            p_default_value         => 'N',
            p_plugin_std_attributes => p_plugin_std_attributes );
        --
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'GRID_NEW_ROW',
            p_db_column             => p_new_row_db_column,
            p_is_required           => true,
            p_is_common             => true,
            p_default_value         => 'Y',
            p_plugin_std_attributes => p_plugin_std_attributes );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'GRID_ROW_CSS_CLASSES',
            p_db_column             => p_row_css_db_column,
            p_is_required           => false,
            p_is_common             => false,
            p_plugin_std_attributes => p_plugin_std_attributes );
        --
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'GRID_COLUMN',
            p_db_column             => p_column_db_column,
            p_is_required           => false,
            p_is_common             => true,
            p_null_text             => 'Automatic',
            p_plugin_std_attributes => p_plugin_std_attributes );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'GRID_NEW_COLUMN',
            p_db_column             => p_new_column_db_column,
            p_is_required           => true,
            p_is_common             => true,
            p_default_value         => 'Y',
            p_plugin_std_attributes => p_plugin_std_attributes );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'GRID_COLUMN_SPAN',
            p_db_column             => p_column_span_db_column,
            p_is_required           => false,
            p_is_common             => true,
            p_null_text             => 'Automatic',
            p_plugin_std_attributes => p_plugin_std_attributes );
        --
        if p_row_span_db_column is not null then
            store_component_prop (
                p_component_type_id     => l_component_type_id,
                p_property_name         => 'GRID_ROW_SPAN',
                p_db_column             => p_row_span_db_column,
                p_is_required           => false,
                p_is_common             => false,
                p_plugin_std_attributes => p_plugin_std_attributes );
        end if;
        --
        if p_has_label_column_span then
            store_component_prop (
                p_component_type_id     => l_component_type_id,
                p_property_name         => 'GRID_LABEL_COLUMN_SPAN',
                p_db_column             => null,
                p_is_required           => false,
                p_is_common             => false,
                p_null_text             => 'Page Template Default',
                p_plugin_std_attributes => p_plugin_std_attributes );
        end if;
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'GRID_COLUMN_CSS_CLASSES',
            p_db_column             => p_column_css_db_column,
            p_is_required           => false,
            p_is_common             => false,
            p_plugin_std_attributes => p_plugin_std_attributes );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'GRID_COLUMN_ATTRIBUTES',
            p_db_column             => p_column_attr_db_column,
            p_is_required           => false,
            p_is_common             => false,
            p_plugin_std_attributes => p_plugin_std_attributes );

    end store_grid_comp_prop;
    --
    procedure store_report_attributes
    is
    begin
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'NUMBER_OF_ROWS_TYPE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'STATIC' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'NUMBER_OF_ROWS',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => '15',
            p_depending_on_comp_prop_name => 'NUMBER_OF_ROWS_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'STATIC' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'NUMBER_OF_ROWS_ITEM',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'NUMBER_OF_ROWS_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'ITEM' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'TEMPLATE_TYPE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'THEME' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'REPORT_TEMPLATE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => '#DEFAULT_REPORT_TEMPLATE#',
            p_depending_on_comp_prop_name => 'TEMPLATE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'THEME' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'REPORT_PREDEFINED_TEMPLATE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => '1',
            p_depending_on_comp_prop_name => 'TEMPLATE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PREDEFINED' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'TEMPLATE_OPTIONS',
            p_db_column                   => 'COMPONENT_TEMPLATE_OPTIONS',
            p_is_required                 => false,
            p_is_common                   => false,
            p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
            p_parent_comp_prop_name       => 'REPORT_TEMPLATE',
            p_depending_on_comp_prop_name => 'REPORT_TEMPLATE',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'APPEARANCE_CSS_CLASSES',
            p_db_column                   => 'REGION_SUB_CSS_CLASSES',
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'TEMPLATE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'THEME',
            p_help_text                   => q'~Enter additional space delimited CSS classes you want to add to your report. Your report template must include the <code>#COMPONENT_CSS_CLASSES#</code> substitution string.~',
            p_comment_text                => '$$$ we should only show this property if the template supports the #COMPONENT_CSS_CLASSES# placeholder' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'SHOW_NULL_VALUES_AS',
            p_db_column         => 'PLUG_QUERY_SHOW_NULLS_AS',
            p_is_required       => false,
            p_is_common         => false,
            p_default_value     => null );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'CLASSIC_REPORT_PAGINATION_TYPE',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => true,
            p_default_value     => 'NEXT_PREVIOUS_LINKS',
            p_null_text         => 'No Pagination (Show All Rows)' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'PAGINATION_DISPLAY_POSITION',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'BOTTOM_RIGHT',
            p_depending_on_comp_prop_name => 'CLASSIC_REPORT_PAGINATION_TYPE',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PARTIAL_PAGE_REFRESH',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'Y' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LAZY_LOADING',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'N',
            p_depending_on_comp_prop_name => 'PARTIAL_PAGE_REFRESH',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'MAXIMUM_ROW_COUNT',
            p_db_column         => 'PLUG_QUERY_ROW_COUNT_MAX',
            p_is_required       => false,
            p_is_common         => false,
            p_comment_text      => q'~$$$ should be moved to region attributes, I think that is needed by all plug-ins~' );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'WHEN_NO_DATA_FOUND_MESSAGE',
            p_db_column             => 'PLUG_QUERY_NO_DATA_FOUND',
            p_import_api_parameter  => 'query_no_data_found',
            p_is_required           => false,
            p_is_common             => false );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'WHEN_MORE_DATA_FOUND_MESSAGE',
            p_db_column             => null,
            p_import_api_parameter  => 'query_more_data',
            p_is_required           => false,
            p_is_common             => false );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'REPORT_SUM_LABEL',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => false );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'BREAK_COLUMNS',
            p_db_column             => null,
            p_import_api_parameter  => 'query_break_cols',
            p_is_required           => false,
            p_is_common             => false,
            p_null_text             => 'No Break' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BREAK_COLUMN_STYLE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'DEFAULT_BREAK_FORMATTING',
            p_depending_on_comp_prop_name => 'BREAK_COLUMNS',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BREAK_REPEAT_HEADING_FORMAT',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'BREAK_COLUMN_STYLE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'REPEAT_HEADINGS_ON_BREAK_1' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BREAK_COLUMN_TEXT_FORMAT',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'BREAK_COLUMNS',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BREAK_BEFORE_ROW',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'BREAK_COLUMNS',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BREAK_GENERIC_COLUMN',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'BREAK_COLUMNS',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BREAK_AFTER_ROW',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'BREAK_COLUMNS',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id    => l_component_type_id,
            p_property_name        => 'CUSTOM_ATTRIBUTES',
            p_db_column            => 'REPORT_ATTRIBUTES_SUBSTITUTION',
            p_is_required          => false,
            p_is_common            => false,
            p_help_text            => q'~The report template substitution string <code>#REPORT_ATTRIBUTES#</code> is replaced with this value.  The <code>#REPORT_ATTRIBUTES#</code> substitution string is only replaced in the before rows attribute of the report template.~' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'STRIP_HTML',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'N' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'SORT_NULLS',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'L' );
        --
        store_component_prop (
            p_component_type_id    => l_component_type_id,
            p_property_name        => 'HEADINGS_TYPE',
            p_db_column            => null,
            p_import_api_parameter => 'query_headings_type',
            p_is_required          => true,
            p_is_common            => false,
            p_default_value        => 'COLON_DELMITED_LIST' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'HEADING_TYPE_PLSQL_FUNCTION_BODY',
            p_db_column                   => null,
            p_import_api_parameter        => 'query_headings',
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'HEADINGS_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'FUNCTION_BODY_RETURNING_COLON_DELIMITED_LIST' );
        --
        /* Add back when we have fixed header support for classic reports / tabular forms
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'FIXED_HEADER',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'PAGE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'FIXED_HEADER_MAX_HEIGHT',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'FIXED_HEADER',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'REGION' );
        */
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'CSV_EXPORT_ENABLED',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'N' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'CSV_SEPARATOR',
            p_db_column                   => 'PLUG_QUERY_EXP_SEPARATOR',
            p_is_required                 => false,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'CSV_EXPORT_ENABLED',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'CSV_ENCLOSED_BY',
            p_db_column                   => 'PLUG_QUERY_EXP_ENCLOSED_BY',
            p_is_required                 => false,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'CSV_EXPORT_ENABLED',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DOWNLOAD_LINK_TEXT',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Download',
            p_depending_on_comp_prop_name => 'CSV_EXPORT_ENABLED',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DOWNLOAD_FILENAME',
            p_db_column                   => 'PLUG_QUERY_EXP_FILENAME',
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'CSV_EXPORT_ENABLED',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y',
            p_help_text                   => q'~Specify a name for the CSV download file. If no name is specified, the region name is used followed by the extension .csv.~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SUPPLEMENTAL_TEXT',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_default_value               => null );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'ENABLE_PRINTING',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'N' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'EXTERNAL_PROCESSING_ENABLED',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'N' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'EXTERNAL_PROCESSING_URL',
            p_db_column                   => null,
            p_view_column                 => 'URL',
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'EXTERNAL_PROCESSING_ENABLED',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'EXTERNAL_PROCESSING_LINK_TEXT',
            p_db_column                   => null,
            p_view_column                 => 'LINK_LABEL',
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'EXTERNAL_PROCESSING_ENABLED',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
    end store_report_attributes;
    --
    procedure store_report_columns (
        p_type_property_name in varchar2 )
    is
    begin
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'COLUMN_NAME',
            p_db_column         => 'COLUMN_ALIAS',
            p_is_required       => true,
            p_is_common         => true,
            p_is_read_only      => true,
            p_check_uniqueness  => 'PARENT' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'QUERY_COLUMN_ID',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => true );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'DERIVED_COLUMN',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => true,
            p_default_value     => 'N' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => p_type_property_name,
            p_db_column         => null,
            p_view_column       => 'DISPLAY_AS',
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'PLAIN' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'COLUMN_HEADING',
            p_db_column                   => 'COLUMN_HEADING',
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'HIDDEN_COLUMN,HIDDEN_FIELD',
            p_important_for_accessibility => true,
            p_accessibility_help_text     => q'~<p>Column headings play a crucial role in organizing and presenting tabular data in a clear and understandable format.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Descriptive and Meaningful:</strong> Use descriptive and meaningful column headings that accurately represent the content of each column. Column headings should succinctly convey the information contained within the respective columns.</li>
<li><strong>Consistency:</strong> Maintain consistency in column headings throughout the table. Consistent column headings facilitate navigation and comprehension for users, especially when interacting with complex tables containing multiple columns.</li>
</ol>~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'HEADING_ALIGNMENT',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'LEFT',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'HIDDEN_COLUMN,HIDDEN_FIELD' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'DISPLAY_SEQUENCE',
            p_db_column         => 'COLUMN_DISPLAY_SEQUENCE',
            p_is_required       => true,
            p_is_common         => true,
            p_comment_text      => q'~$$$ make this read only for now~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'COLUMN_ALIGNMENT',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'LEFT',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'HIDDEN_COLUMN,HIDDEN_FIELD' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'USE_AS_ROW_HEADER',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'N',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'HIDDEN_COLUMN,HIDDEN_FIELD,PCT_GRAPH,ROW_SELECTOR,RICH_TEXT',
            p_important_for_accessibility => true,
            p_accessibility_help_text     => q'~<p>It's crucial to define row headers for tabular report data, such as in Classic or Interactive Reports, to enhance usability for users of assistive technologies like screen readers.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Impact on Usability for Screen Reader Users:</strong>
<ul>
<li>When a screen reader user navigates through different rows of the report, the column or columns designated as identifying the row will be announced as the row header upon moving to the new row.</li>
<li>Failure to define a row header column makes it significantly more challenging for screen reader users to orient themselves while navigating the report.</li>
</ul>
</li>
<li><strong>Enhancing Orientation and Navigation:</strong>
<ul>
<li>Defining this attribute improves the navigation experience for screen reader users by providing clear orientation points within the tabular data.</li>
<li>This ensures smoother navigation and comprehension of the report's content for users relying on assistive technologies.</li>
</ul>
</li>
<li><strong>Recommendations:</strong>
<ul>
<li>Define, one or more columns that identify the row, that will function as the row header for users of Assistive Technology.</li>
<li>This will be announced every time a user moves between rows, so the entire row header should not be too long to become overly verbose.</li>
</ul>
</li>
</ol>~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'IMAGE_DESCRIPTION',
            p_db_column                   => 'IMAGE_DESCRIPTION',
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'IMAGE',
            p_important_for_accessibility => true,
            p_accessibility_help_text     => q'~<p>The Image Description property serves as a vital component in improving accessibility for users with visual impairments. It enables the provision of text or a reference to a column containing text to describe the image.  It is important to define descriptions for images that can be displayed as part of reports, such as in Classic or Interactive Reports, to improve usability for users of assistive technologies, such as screen readers.</p>
<strong>Best practices:</strong>
<ol>
<li>Informative Images:
Identify images that contribute to the comprehension or context of the webpage. If removing the image would diminish the page's meaning or significance, it requires the image description. If removing the image would not diminish the page's meaning (for example if it was just decorative), then leave the image description blank and it will be ignored by screen readers.</li>
<li>Purposeful Description:
<ul>
<li>Alt Text should succinctly convey the significance of the image in relation to the surrounding content.</li>
<li>Focus on describing the "why" of the image rather than stating what the image is.</li>
<li>Keep Alt Text clear, concise, and descriptive.</li>
</ul>
</li>
<strong>Example:</strong>
<p>"Stylish pink tote bag with faux leather straps, perfect for adding a pop of color to your outfit".</p>
<li>Avoid Redundancy:
Omit phrases like "image of" as screen readers automatically announce an image as such.</li>
</ol>~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'FORMAT_MASK',
            p_db_column                   => 'COLUMN_FORMAT',
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'PLAIN,LINK,DISPLAY_AND_SAVE,TEXT,DATE_PICKER',
            p_help_text                   => q'~<p>Enter the format mask to apply to this column.
    You can type in the format mask or pick from the predefined list, based on a sample representation of how that format mask is displayed.</p>
    <p>It is important that number format masks are only applied to columns that contain numbers and date format masks are only applied to columns that contain dates.
    Otherwise, a runtime error is raised when any record contains a value that can not be converted using the specified format mask.</p>~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DATE_PICKER_FORMAT_MASK',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'DATE_POPUP' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'PCT_GRAPH_BACKGROUD_COLOR',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PCT_GRAPH' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'PCT_GRAPH_FOREGROUND_COLOR',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PCT_GRAPH' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'PCT_GRAPH_BAR_WIDTH',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PCT_GRAPH' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'ELEMENT_WIDTH',
            p_db_column                   => 'COLUMN_WIDTH',
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'TEXT,TEXTAREA,DATE_POPUP,DATE_PICKER,POPUP,POPUPKEY' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'ELEMENT_HEIGHT',
            p_db_column                   => 'COLUMN_HEIGHT',
            p_is_required                 => false,
            p_is_common                   => true,
            p_default_value               => '3',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'TEXTAREA' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'CONTENT_DISPOSITION',
            p_db_column                   => 'BLOB_CONTENT_DISPOSITION',
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'attachment',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'DOWNLOAD' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'FIELD_TEMPLATE',
            p_db_column                   => 'COLUMN_FIELD_TEMPLATE',
            p_is_required                 => false,
            p_is_common                   => false,
            p_reference_on_delete         => 'WEAK_NULL',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'DISPLAY_AND_SAVE,TEXT,TEXTAREA,DATE_POPUP,DATE_PICKER,HIDDEN_FIELD,HIDDEN_PROTECTED,SELECT_LIST,RADIOGROUP,POPUP,POPUPKEY,SIMPLE_CHECKBOX',
            p_help_text                   => q'~Choose the field template to be used when rendering the tabular form field. When no template is selected, the field is rendered using the default accessibility compliant label.~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'RICH_TEXT_FORMAT',
            p_db_column                   => 'ATTRIBUTE_01',
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => 'MARKDOWN',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'RICH_TEXT' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_TABLE_OWNER',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'IMAGE,DOWNLOAD',
            p_comment_text                => q'~$$$ Note: A owner column is not yet supported by the format mask~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_TABLE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'IMAGE,DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE_OWNER' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DOWNLOAD_TEXT',
            p_db_column                   => 'BLOB_DOWNLOAD_TEXT',
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE' );
        --
        -- Download Text is part of Display Group "Appearance" but also has a dependency
        -- to Component-Prop 'BLOB_TABLE', so we have to move it up after creation
        resequence_comp_prop (
            p_component_type_id => l_component_type_id,
            p_name              => 'DOWNLOAD_TEXT',
            p_previous_name     => 'FIELD_TEMPLATE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_CONTENT_COLUMN',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'IMAGE,DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_PK_COLUMN1',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'IMAGE,DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_PK_COLUMN2',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'IMAGE,DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_MIME_TYPE_COLUMN',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'IMAGE,DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_FILENAME_COLUMN',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'IMAGE,DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_LAST_UPDATED_COLUMN',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'IMAGE,DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_CHARSET_COLUMN',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOV_TYPE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'PLAIN_LOV,SELECT_LIST,RADIOGROUP,POPUP,POPUPKEY',
            p_comment_text                => q'~$$$ for POPUP and POPUPKEY we should NOT show STATIC~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'NAMED_LOV',
            p_db_column                   => 'NAMED_LOV',
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'LOV_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SHARED' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOV_SQL',
            p_db_column                   => 'INLINE_LOV',
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'LOV_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL_QUERY' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOV_STATIC_VALUES',
            p_db_column                   => 'INLINE_LOV',
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => 'STATIC:Display1;Return1,Display2;Return2',
            p_depending_on_comp_prop_name => 'LOV_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'STATIC' );
        --
        store_func_body_comp_props (
            p_component_type_id   => l_component_type_id,
            p_name_prefix         => 'LOV_',
            p_return_type         => 'SQL',
            p_db_column_func_body => 'INLINE_LOV',
            p_type_property       => 'LOV_TYPE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SIMPLE_CHECKBOX_VALUES',
            p_db_column                   => 'INLINE_LOV',
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SIMPLE_CHECKBOX' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DISPLAY_EXTRA_VALUES',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Y',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'SELECT_LIST,RADIOGROUP' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DISPLAY_NULL_VALUE',
            p_db_column                   => 'LOV_SHOW_NULLS',
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Y',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'SELECT_LIST,RADIOGROUP,POPUP,POPUPKEY' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'NULL_DISPLAY_VALUE',
            p_db_column                   => 'LOV_NULL_TEXT',
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'DISPLAY_NULL_VALUE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'NULL_RETURN_VALUE',
            p_db_column                   => 'LOV_NULL_VALUE',
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'DISPLAY_NULL_VALUE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LINK_TARGET',
            p_db_column                   => 'COLUMN_LINK',
            p_is_required                 => false,
            p_is_common                   => true,
            p_reference_scope             => 'ROW',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'LINK,PCT_GRAPH',
            p_comment_text                => q'~$$$ IMAGE raises the runtime error "Numeric value error" if a value is set~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LINK_TEXT',
            p_db_column                   => 'COLUMN_LINKTEXT',
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => '##CURRENT_COLUMN_NAME##',
            p_reference_scope             => 'ROW',
            p_depending_on_comp_prop_name => 'LINK_TARGET',
            p_depending_on_condition_type => 'NOT_NULL',
            p_important_for_accessibility => true,
            p_accessibility_help_text     => q'~<p>Accessible link text is essential for users of assistive technologies, such as screen readers, to navigate and understand content effectively.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Conciseness:</strong> Keep link text concise while ensuring it conveys the necessary information. Aim for a balance between brevity and descriptiveness.</li>
<li><strong>Accessibility Attributes:</strong> Ensure report column row headers are defined. Defining this attribute improves the navigation experience for screen reader users by providing clear orientation points within the tabular data.</li>
<li><strong>Repeated links:</strong> In a typical report, each row often features a repeating link, such as an edit option. In such cases, the most effective link text would be 'Edit', and paired with a clear row header.</li>
</ol>
<p>By following these best practices for link text, you can create a more inclusive and accessible browsing experience for all users, including those with disabilities.</p>~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LINK_ATTRIBUTES',
            p_db_column                   => 'COLUMN_LINK_ATTR',
            p_is_required                 => false,
            p_is_common                   => false,
            p_reference_scope             => 'ROW',
            p_depending_on_comp_prop_name => 'LINK_TARGET',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'RADIO_COLUMNS',
            p_db_column                   => 'ATTRIBUTE_01',
            p_is_required                 => false,
            p_is_common                   => false,
            p_default_value               => '1',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'RADIOGROUP' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'HTML_EXPRESSION',
            p_db_column                   => 'COLUMN_HTML_EXPRESSION',
            p_is_required                 => false,
            p_is_common                   => false,
            p_supports_template_directive => 'S',
            p_reference_scope             => 'ROW',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PLAIN' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'FORMATTING_CSS_CLASSES',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'PLAIN,LINK,PCT_GRAPH',
            p_comment_text                => q'~$$$ IMAGE or DOWNLOAD do raise the runtime error "Numeric value error" if a value is set~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'CSS_STYLE',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'PLAIN,LINK,PCT_GRAPH',
            p_comment_text                => q'~$$$ IMAGE or DOWNLOAD do raise the runtime error "Numeric value error" if a value is set~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'HIGHLIGHT_WORDS',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PLAIN' );
        --
        if p_type_property_name = 'TAB_FORM_COLUMN_TYPE' then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'COLUMN_DEFAULT_TYPE',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => p_type_property_name,
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'DISPLAY_AND_SAVE,DATE_POPUP,DATE_PICKER,TEXT,TEXTAREA,SELECT_LIST,RADIOGROUP,HIDDEN_FIELD,POPUP,POPUPKEY,SIMPLE_CHECKBOX,ROW_SELECTOR',
                p_comment_text                => '$$$ Property should only be visible if the current column name NOT matches with the primary key column(s) in the tabular form DML process' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'DEFAULT_VALUE_ITEM',
                p_db_column                   => 'COLUMN_DEFAULT',
                p_is_required                 => true,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => 'COLUMN_DEFAULT_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'ITEM' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'DEFAULT_VALUE_PLSQL_EXPRESSION_VARCHAR2',
                p_db_column                   => 'COLUMN_DEFAULT',
                p_is_required                 => true,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => 'COLUMN_DEFAULT_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'FUNCTION' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PK_SOURCE_TYPE',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => p_type_property_name,
                p_depending_on_condition_type => 'NOT_EQUALS',
                p_depending_on_expression     => 'ROW_SELECTOR',
                p_comment_text                => '$$$ Property should only be visible if the current column name matches with the primary key column(s) in the tabular form DML process' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PK_SOURCE_SEQUENCE_NAME',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => 'PK_SOURCE_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'S' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PK_SOURCE_PLSQL_EXPRESSION',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => 'PK_SOURCE_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'F' );
            --
        end if;
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'COLUMN_SORT_SEQUENCE',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'ROW_SELECTOR' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'COLUMN_SORT_DIRECTION',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_null_text                   => 'Ascending',
            p_depending_on_comp_prop_name => 'COLUMN_SORT_SEQUENCE',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DISABLE_SORT_COLUMN',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'N',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'HIDDEN_COLUMN,ROW_SELECTOR' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'INCLUDE_IN_EXPORT_PRINT',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Y',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'HIDDEN_COLUMN,ROW_SELECTOR',
            p_comment_text                => q'~$$$ should we hide it for LINK as well? Is Hidden supported?~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'PRINT_COLUMN_WIDTH',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'INCLUDE_IN_EXPORT_PRINT',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'ADVANCED_CSS_CLASSES',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'TEXT,TEXTAREA,DATE_POPUP,DATE_PICKER,HIDDEN_FIELD,HIDDEN_PROTECTED,SELECT_LIST,RADIOGROUP,POPUP,POPUPKEY,SIMPLE_CHECKBOX' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'CUSTOM_ATTRIBUTES',
            p_db_column                   => 'CATTRIBUTES',
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'TEXT,TEXTAREA,DATE_POPUP,DATE_PICKER,HIDDEN_FIELD,HIDDEN_PROTECTED,SELECT_LIST,RADIOGROUP,POPUP,POPUPKEY,SIMPLE_CHECKBOX' );
        --
    /*
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'ELEMENT_OPTION_HTML_ATTRIBUTES', -- $$$ is this property really used by reports3.plb, can't find it in the rendering code
            p_db_column                   => 'CATTRIBUTES_ELEMENT',
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name, -- $$$ would it be better to restricted to specific display types?
            p_depending_on_condition_type => 'NOT_EQUALS',
            p_depending_on_expression     => 'HIDDEN_COLUMN' );
    */
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'COLUMN_WIDTH',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'HIDDEN_COLUMN,HIDDEN_FIELD' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'COMPUTE_SUM',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'N',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'HIDDEN_COLUMN,HIDDEN_FIELD,ROW_SELECTOR,DATE_POPUP,DATE_PICKER,RICH_TEXT' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'UI_DEFAULT_REF_TABLE_OWNER',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'DERIVED_COLUMN',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'N' );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'UI_DEFAULT_REF_TABLE',
            p_db_column             => null,
            p_is_required           => false,
            p_is_common             => false,
            p_parent_comp_prop_name => 'UI_DEFAULT_REF_TABLE_OWNER' );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'UI_DEFAULT_REF_COLUMN',
            p_db_column             => null,
            p_is_required           => false,
            p_is_common             => false,
            p_parent_comp_prop_name => 'UI_DEFAULT_REF_TABLE' );
        --
        store_condition_type_comp_prop (
            p_component_type_id => l_component_type_id,
            p_name_prefix       => null,
            p_help_text_type    => null,
            p_db_column_type    => 'DISPLAY_WHEN_COND_TYPE',
            p_view_column_type  => 'CONDITION_TYPE',
            p_db_column_expr1   => 'DISPLAY_WHEN_CONDITION',
            p_db_column_expr2   => 'DISPLAY_WHEN_CONDITION2' );
        --
        store_component_prop (
            p_component_type_id   => l_component_type_id,
            p_property_name       => 'AUTHORIZATION_SCHEME',
            p_db_column           => 'REPORT_COLUMN_REQUIRED_ROLE',
            p_is_required         => false,
            p_is_common           => false,
            p_reference_on_delete => 'WEAK_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'ESCAPE_SPECIAL_CHARACTERS',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Y',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'PLAIN,LINK,HIDDEN_COLUMN,PLAIN_LOV' );
        --
        store_standard_attr_comp_prop (
            p_component_type_id => l_component_type_id,
            p_has_build_option  => true,
            p_has_comments      => true,
            p_comment_db_column => 'COLUMN_COMMENT' );
    end store_report_columns;
    --
    procedure store_comp_props_doc_src(
        p_component_type_id    in number )
    is
    begin
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'NAME',
            p_db_column             => null,
            p_is_required           => true,
            p_is_common             => true,
            p_supports_substitution => false,
            p_check_uniqueness      => 'APPLICATION',
            p_default_value         => '#PLEASE_CHANGE#',
            p_help_text             => case p_component_type_id
                                           when c_comp_type_dualityview_src
                                           then q'~Enter a name of the Duality View Source.~'
                                           when c_comp_type_jsondocument_src
                                           then q'~Enter a name of the JSON Source.~'
                                       end );
        --
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'STATIC_ID',
            p_db_column             => null,
            p_is_required           => true,
            p_is_common             => true,
            p_supports_substitution => false,
            p_help_text             => case p_component_type_id
                                           when c_comp_type_dualityview_src
                                           then q'~Use the Static ID to reference the Duality View Source in API Calls.~'
                                           when c_comp_type_jsondocument_src
                                           then q'~Use the Static ID to reference the JSON Source in API Calls.~'
                                       end );
        --
        if p_component_type_id = c_comp_type_jsondocument_src then
            store_component_prop (
                p_component_type_id => p_component_type_id,
                p_property_name     => 'JSON_COLLECTION_TYPE',
                p_db_column         => null,
                p_is_required       => true,
                p_is_common         => false );
        end if;
        --
        store_component_prop (
            p_component_type_id => p_component_type_id,
            p_property_name     => 'DOCUMENT_SOURCE_LOCATION',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false );
        --
        store_component_prop (
            p_component_type_id => p_component_type_id,
            p_property_name     => 'SOURCE_QUERY_OWNER',
            p_db_column         => 'OBJECT_OWNER',
            p_is_required       => false,
            p_is_common         => false,
            p_help_text         => 'Select the schema that owns the data source.' );
        --
        store_component_prop (
            p_component_type_id => p_component_type_id,
            p_property_name     => 'SOURCE_QUERY_TABLE',
            p_db_column         => 'OBJECT_NAME',
            p_is_required       => true,
            p_is_common         => false,
            p_help_text         => case p_component_type_id
                                        when c_comp_type_dualityview_src
                                        then q'~Enter the case-sensitive duality view name. You can type in the name or pick from the list.~'
                                        when c_comp_type_jsondocument_src
                                        then q'~Enter the case-sensitive table name. You can type in the name or pick from the list.~'
                                   end );
        --
        store_component_prop (
            p_component_type_id => p_component_type_id,
            p_property_name     => 'SOURCE_QUERY_WHERE',
            p_db_column         => 'WHERE_CLAUSE',
            p_is_required       => false,
            p_is_common         => false );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => 'REMOTE_CACHING',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_null_text                   => 'Disabled',
            p_null_help_text              => q'~Result is not cached. Data is fetched from the remote database for each request.~',
            p_depending_on_comp_prop_name => 'DOCUMENT_SOURCE_LOCATION',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'REMOTE' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => 'REMOTE_INVALIDATE_WHEN',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'REMOTE_CACHING',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => case p_component_type_id
                                                 when c_comp_type_dualityview_src  then 'DUALITY_VIEW_SRC'
                                                 when c_comp_type_jsondocument_src then 'JSON_COLLECTION_SRC'
                                             end || '_SUBSCRIBED_FROM',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => 'VERSION_SCN',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false );
        --
        store_standard_attr_comp_prop (
            p_component_type_id           => p_component_type_id,
            p_has_build_option            => false,
            p_has_comments                => true,
            p_comment_db_column           => 'SOURCE_COMMENT' );
    end store_comp_props_doc_src;
    --
    --
    procedure store_src_comp_props_objsrc(
        p_prefix                      in varchar2,
        p_source_prop_name            in varchar2,
        p_location_property_name      in varchar2,
        p_has_order_by                in boolean,
        p_has_order_by_item           in boolean,
        p_db_column_source            in varchar2,
        p_db_column_source_lang       in varchar2 )
    is
    begin
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_prefix || 'SOURCE_POST_PROCESSING',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_default_value               => null,
            p_depending_on_comp_prop_name => p_source_prop_name,
            p_depending_on_condition_type => 'NOT_NULL',
            p_parent_comp_prop_name       => p_source_prop_name );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_prefix || 'POST_PROC_WHERE',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_prefix || 'SOURCE_POST_PROCESSING',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'WHERE_ORDER_BY_CLAUSE',
            p_parent_comp_prop_name       => p_source_prop_name );
        --
        if p_has_order_by and not p_has_order_by_item then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => p_prefix || 'POST_PROC_ORDER_BY',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => p_prefix || 'SOURCE_POST_PROCESSING',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'WHERE_ORDER_BY_CLAUSE',
                p_parent_comp_prop_name       => p_source_prop_name );
        end if;
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_prefix || 'POST_PROC_SQL_QUERY',
            p_db_column                   => p_db_column_source,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_prefix || 'SOURCE_POST_PROCESSING',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL',
            p_parent_comp_prop_name       => p_source_prop_name );
        --
        store_func_body_comp_props (
            p_component_type_id     => l_component_type_id,
            p_name_prefix           => p_prefix || 'POST_PROC_',
            p_db_column_lang        => p_db_column_source_lang,
            p_db_column_func_body   => p_db_column_source,
            p_return_type           => 'SQL',
            p_type_property         => p_prefix || 'SOURCE_POST_PROCESSING',
            p_type_value            => 'FUNC_BODY_RETURNING_SQL',
            p_parent_comp_prop_name => p_source_prop_name );
        --
        if p_has_order_by_item then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => p_prefix || 'POST_PROC_ORDER_BY_TYPE',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => true,
                p_null_text                   => 'None',
                p_depending_on_comp_prop_name => p_prefix || 'SOURCE_POST_PROCESSING',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'WHERE_ORDER_BY_CLAUSE' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => p_prefix || 'POST_PROC_ORDER_BY',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => p_prefix || 'POST_PROC_ORDER_BY_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'STATIC',
                p_parent_comp_prop_name       => 'SOURCE_WEB_SRC_QUERY' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => p_prefix || 'POST_PROC_ORDER_BY_ITEM',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => p_prefix || 'POST_PROC_ORDER_BY_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'ITEM',
                p_parent_comp_prop_name       => p_source_prop_name );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => p_prefix || 'POST_PROC_ORDER_BY_ITEM2',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => p_prefix || 'SOURCE_POST_PROCESSING',
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'SQL,FUNC_BODY_RETURNING_SQL',
                p_parent_comp_prop_name       => p_prefix || 'POST_PROC_SQL_QUERY' );
        end if;
    end store_src_comp_props_objsrc;
    --
    --
    procedure store_comp_props_array_col(
        p_component_type_id    in number )
    is
    begin
        store_component_prop (
            p_component_type_id => p_component_type_id,
            p_property_name     => 'NAME',
            p_db_column         => null,
            p_check_uniqueness  => 'PARENT',
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => '#PLEASE_CHANGE#' );
        --
        store_component_prop (
            p_component_type_id => p_component_type_id,
            p_property_name     => 'LABEL',
            p_db_column         => 'DISPLAY_NAME',
            p_is_required       => true,
            p_is_common         => true );
    end store_comp_props_array_col;
    --
    --
    procedure store_comp_props_web_src_param(
        p_for_operation_params in boolean )
    is
    begin
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'NAME',
            p_db_column                    => null,
            p_check_uniqueness             => 'PARENT',
            p_is_required                  => true,
            p_is_common                    => true,
            p_default_value                => '#PLEASE_CHANGE#' );
        --
        if p_for_operation_params then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'DATABASE_OPERATION',
                p_db_column         => null,
                p_is_required       => true,
                p_is_read_only      => true,
                p_is_common         => true );
        end if;
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'WEB_SRC_PARAM_TYPE',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_default_value                => 'HEADER' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'WEB_SRC_PARAM_DATA_TYPE',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => true,
            p_default_value                => 'VARCHAR2',
            p_depending_on_comp_prop_name  => 'WEB_SRC_PARAM_TYPE',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'HEADER,COOKIE,URL_PATTERN,QUERY_STRING,BODY' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'FORMAT_MASK',
            p_db_column                   => 'OUTPUT_FORMAT_MASK',
            p_is_required                 => false,
            p_is_common                   => false,
            p_default_value               => null,
            p_depending_on_comp_prop_name => 'WEB_SRC_PARAM_DATA_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'BOOLEAN,NUMBER,DATE,TIMESTAMP,TIMESTAMP WITH TIME ZONE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALIDATION_REGEXP',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_default_value               => null,
            p_depending_on_comp_prop_name => 'WEB_SRC_PARAM_DATA_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'VARCHAR2' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'PARAM_DIRECTION',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'IS_STATIC',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_default_value                => 'N',
            p_depending_on_comp_prop_name  => 'PARAM_DIRECTION',
            p_depending_on_condition_type  => 'NOT_EQUALS',
            p_depending_on_expression      => 'OUT' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'PARAMETER_VALUE',
            p_db_column                    => null,
            p_is_required                  => false, -- $$$ should be required depending on IS_STATIC = Y
            p_is_common                    => true );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'PARAMETER_REQUIRED',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_default_value                => 'N',
            p_depending_on_comp_prop_name  => 'IS_STATIC',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'N' );
        --
        if l_component_type_id = c_comp_type_web_src_mod_param then
            -- $$$ todo only one parameter can have USE_FOR_ROW_SEARCH = Y
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'USE_FOR_ROW_SEARCH',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => true,
                p_default_value               => 'N',
                p_depending_on_comp_prop_name => 'PARAM_DIRECTION',
                p_depending_on_condition_type => 'NOT_EQUALS',
                p_depending_on_expression     => 'OUT' );
        end if;
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'OMIT_WHEN_NULL',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_default_value                => 'N',
            p_depending_on_comp_prop_name  => 'WEB_SRC_PARAM_TYPE',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'HEADER,COOKIE,QUERY_STRING' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'MULTIPLE_VALUES',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => false,
            p_default_value                => 'N',
            p_depending_on_comp_prop_name  => 'WEB_SRC_PARAM_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'QUERY_STRING',
            p_depending_on_comp_prop_name2 => 'OMIT_WHEN_NULL',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'Y' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'MULTI_VALUE_SEPARATOR',
            p_db_column                    => 'ARRAY_SEPARATOR_CHAR',
            p_is_required                  => false,
            p_is_common                    => false,
            p_supports_substitution        => false,
            p_depending_on_comp_prop_name  => 'MULTIPLE_VALUES',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'Y',
            p_help_text                    => q'~
    Enter the separator character to use for splitting up the value. If empty, values will be separated by
    the colon character (":").~' );
        --
        store_standard_attr_comp_prop (
            p_component_type_id => l_component_type_id,
            p_comment_db_column => 'PARAM_COMMENT' );
    end store_comp_props_web_src_param;
    --
    procedure store_comp_props_ws_param_comp
    is
    begin
        store_component_prop (
            p_component_type_id   => l_component_type_id,
            p_property_name       => 'WEB_SRC_PARAM',
            p_db_column           => null,
            p_is_required         => true,
            p_is_common           => true,
            p_is_read_only        => true,
            p_reference_on_delete => 'DB_CASCADE' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'HTTP_METHOD',
            p_db_column         => 'OPERATION',
            p_is_required       => false,
            p_is_read_only      => true,
            p_null_text         => 'All',
            p_is_common         => true );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'DATABASE_OPERATION',
            p_db_column         => 'DATABASE_OPERATION',
            p_is_required       => false,
            p_null_text         => 'All',
            p_is_read_only      => true,
            p_is_common         => true );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'API_DIRECTION',
            p_is_required       => true,
            p_is_common         => true,
            p_db_column         => null,
            p_is_read_only      => true );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'WEB_SRC_PARAM_DATA_TYPE',
            p_is_required                  => false,
            p_is_common                    => true,
            p_db_column                    => null,
            p_is_read_only                 => true,
            p_depending_on_comp_prop_name  => 'API_DIRECTION',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'IN,IN_OUT' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'IGNORE_OUTPUT',
            p_db_column                    => null,
            p_is_required                  => true,
            p_default_value                => 'Y',
            p_is_common                    => true,
            p_depending_on_comp_prop_name  => 'API_DIRECTION',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'IN_OUT,OUT' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'HIDDEN_REQUIRED_VALUE_TYPE',
            p_is_required                  => false,
            p_is_common                    => true,
            p_default_value                => 'BASIC' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'HIDDEN_VALUE_TYPE',
            p_db_column                    => 'VALUE_TYPE',
            p_is_required                  => false,
            p_is_common                    => true,
            p_default_value                => 'ITEM' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'OUT_VALUE_TYPE',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_default_value                => 'ITEM',
            p_depending_on_comp_prop_name  => 'HIDDEN_REQUIRED_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'ITEM' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_TYPE',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_default_value                => 'ITEM',
            p_depending_on_comp_prop_name  => 'HIDDEN_REQUIRED_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'BASIC' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_STATIC_VALUE',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'STATIC',
            p_depending_on_comp_prop_name2 => 'WEB_SRC_PARAM_DATA_TYPE',
            p_depending_on_condition_type2 => 'NOT_EQUALS',
            p_depending_on_expression2     => 'BOOLEAN' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_STATIC_VALUE_BOOLEAN',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'STATIC',
            p_depending_on_comp_prop_name2 => 'WEB_SRC_PARAM_DATA_TYPE',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'BOOLEAN' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_QUERY',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL_QUERY' );
        --
    /*
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_QUERY_COLON',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL_QUERY_COLON' );

        --
    */
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_ITEM',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'ITEM' );
        --
        store_expression_comp_props (
            p_component_type_id => l_component_type_id,
            p_name_prefix       => 'VALUE_',
            p_return_type       => 'CUSTOM',
            p_reference_scope   => 'DEPENDS',
            p_type_property     => 'HIDDEN_VALUE_TYPE' );
        --
        store_func_body_comp_props (
            p_component_type_id => l_component_type_id,
            p_name_prefix       => 'VALUE_',
            p_return_type       => 'CUSTOM',
            p_reference_scope   => 'DEPENDS',
            p_type_property     => 'HIDDEN_VALUE_TYPE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_PREFERENCE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PREFERENCE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_COLLECTION',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'COLLECTION' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_FORMAT_MASK',
            p_is_required                  => false,
            p_is_common                    => false,
            p_db_column                    => null,
            p_is_read_only                 => false,
            p_depending_on_comp_prop_name  => 'WEB_SRC_PARAM_DATA_TYPE',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'NUMBER,DATE,TIMESTAMP,TIMESTAMP WITH TIME ZONE',
            p_depending_on_comp_prop_name2 => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type2 => 'IN_LIST',
            p_depending_on_expression2     => 'STATIC,ITEM,PREFERENCE',
            p_help_text                    => 'Format mask to convert the <strong>Static</strong>, <strong>Item</strong> or <strong>Preference</strong> value to the data type of the REST Source Parameter.' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_BOOLEAN_TRUE',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => true,
            p_supports_substitution        => false,
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'ITEM,PREFERENCE',
            p_depending_on_comp_prop_name2 => 'WEB_SRC_PARAM_DATA_TYPE',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'BOOLEAN' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_PARENT_COLUMN',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => false,
            p_supports_substitution        => false,
            p_reference_on_delete          => 'WEAK_NULL',
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'PARENT_COLUMN' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_BOOLEAN_FALSE',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => true,
            p_supports_substitution        => false,
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'ITEM,PREFERENCE',
            p_depending_on_comp_prop_name2 => 'WEB_SRC_PARAM_DATA_TYPE',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'BOOLEAN' );
        --
        store_audit_info_comp_prop (
            p_component_type_id => l_component_type_id );
        --
    end store_comp_props_ws_param_comp;
    --
    procedure store_comp_props_api_param
    is
    begin
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'NAME',
            p_db_column             => null,
            p_check_uniqueness      => 'PARENT',
            p_is_required           => true,
            p_is_common             => true,
            p_supports_substitution => false,
            p_default_value         => 'p_',
            p_help_text             => q'~Enter the name of a parameter declared in the selected procedure or function.~' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'API_DIRECTION',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_default_value                => 'IN' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'API_DATA_TYPE',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_default_value                => 'VARCHAR2' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'API_CUSTOM_DATA_TYPE',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_supports_substitution        => false,
            p_depending_on_comp_prop_name  => 'API_DATA_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'CUSTOM' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'HAS_DEFAULT',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_default_value                => 'N',
            p_depending_on_comp_prop_name  => 'API_DIRECTION',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'IN' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'IGNORE_OUTPUT',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_default_value                => 'N',
            p_depending_on_comp_prop_name  => 'API_DIRECTION',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'IN_OUT,OUT',
            p_depending_on_comp_prop_name2 => 'API_DATA_TYPE',
            p_depending_on_condition_type2 => 'NOT_IN_LIST',
            p_depending_on_expression2     => 'CUSTOM,BLOB' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'HIDDEN_REQUIRED_VALUE_TYPE',
            p_db_column                    => null,
            p_default_value                => 'BASIC',
            p_is_required                  => false,
            p_is_common                    => false );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'HIDDEN_VALUE_TYPE',
            p_db_column                    => null,
            p_default_value                => 'ITEM', /* keep in sync with default of API_VALUE_TYPE_BASIC */
            p_is_required                  => false,
            p_is_common                    => false );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'API_VALUE_TYPE_BASIC',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_default_value                => 'ITEM',
            p_depending_on_comp_prop_name  => 'HIDDEN_REQUIRED_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'BASIC' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'API_VALUE_TYPE_BLOB',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_default_value                => 'SQL_QUERY',
            p_depending_on_comp_prop_name  => 'HIDDEN_REQUIRED_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'BLOB' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'API_VALUE_TYPE_CUSTOM',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_default_value                => 'FUNCTION_BODY',
            p_depending_on_comp_prop_name  => 'HIDDEN_REQUIRED_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'CUSTOM' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_STATIC_VALUE',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_reference_scope              => 'DEPENDS',
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'STATIC',
            p_depending_on_comp_prop_name2 => 'API_DATA_TYPE',
            p_depending_on_condition_type2 => 'NOT_EQUALS',
            p_depending_on_expression2     => 'BOOLEAN' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_STATIC_VALUE_BOOLEAN',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'STATIC',
            p_depending_on_comp_prop_name2 => 'API_DATA_TYPE',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'BOOLEAN' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_QUERY',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_reference_scope              => 'DEPENDS',
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'SQL_QUERY' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_ITEM',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_reference_scope              => 'DEPENDS',
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'ITEM' );
        --
        store_expression_comp_props (
            p_component_type_id           => l_component_type_id,
            p_name_prefix                 => 'VALUE_',
            p_return_type                 => 'CUSTOM',
            p_reference_scope             => 'DEPENDS',
            p_type_property               => 'HIDDEN_VALUE_TYPE',
            p_depending_on_comp_prop_name => 'API_DATA_TYPE',
            p_depending_on_condition_type => 'NOT_EQUALS',
            p_depending_on_expression     => 'CUSTOM' );
        --
        store_func_body_comp_props (
            p_component_type_id           => l_component_type_id,
            p_name_prefix                 => 'VALUE_',
            p_return_type                 => 'CUSTOM',
            p_reference_scope             => 'DEPENDS',
            p_type_property               => 'HIDDEN_VALUE_TYPE',
            p_depending_on_comp_prop_name => 'API_DATA_TYPE',
            p_depending_on_condition_type => 'NOT_EQUALS',
            p_depending_on_expression     => 'CUSTOM' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_PLSQL_EXPRESSION_NO_LANG',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_reference_scope              => 'DEPENDS',
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'EXPRESSION',
            p_depending_on_comp_prop_name2 => 'API_DATA_TYPE',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'CUSTOM' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_PLSQL_FUNC_BODY_NO_LANG',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_reference_scope              => 'DEPENDS',
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'FUNCTION_BODY',
            p_depending_on_comp_prop_name2 => 'API_DATA_TYPE',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'CUSTOM' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_PREFERENCE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PREFERENCE' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_FORMAT_MASK',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => true,
            p_supports_substitution        => false,
            p_reference_scope              => 'DEPENDS',
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'STATIC,ITEM,PREFERENCE',
            p_depending_on_comp_prop_name2 => 'API_DATA_TYPE',
            p_depending_on_condition_type2 => 'IN_LIST',
            p_depending_on_expression2     => 'NUMBER,DATE,TIMESTAMP,TIMESTAMP WITH TIME ZONE,TIMESTAMP WITH LOCAL TIME ZONE' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_BOOLEAN_TRUE',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => true,
            p_supports_substitution        => false,
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'ITEM,PREFERENCE',
            p_depending_on_comp_prop_name2 => 'API_DATA_TYPE',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'BOOLEAN' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_BOOLEAN_FALSE',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => true,
            p_supports_substitution        => false,
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'ITEM,PREFERENCE',
            p_depending_on_comp_prop_name2 => 'API_DATA_TYPE',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'BOOLEAN' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'PARAM_DISPLAY_SEQUENCE',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => false );
        --
        store_standard_attr_comp_prop (
            p_component_type_id => l_component_type_id,
            p_comment_db_column => 'PARAM_COMMENT' );
        --
    end store_comp_props_api_param;
    --
    procedure store_comp_props_wf_param
    is
    begin
        store_component_prop (
            p_component_type_id   => l_component_type_id,
            p_property_name       => 'WORKFLOW_PARAM',
            p_db_column           => null,
            p_is_required         => true,
            p_is_common           => true,
            p_is_read_only        => true,
            p_reference_on_delete => 'DB_CASCADE' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'API_DIRECTION',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'IN',
            p_is_read_only      => true,
            p_help_text         => q'~The direction of the parameter as defined within the workflow.~' );
        --
        -- Only workflow activities can wait on the result of an invoked workflow and use the output
        --
        if l_component_type_id = c_comp_type_wf_act_wf_param then
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'IGNORE_OUTPUT',
                p_db_column                    => null,
                p_is_required                  => true,
                p_default_value                => 'Y',
                p_is_common                    => true,
                p_depending_on_comp_prop_name  => 'API_DIRECTION',
                p_depending_on_condition_type  => 'IN_LIST',
                p_depending_on_expression      => 'OUT,IN_OUT' );
        end if;
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'WORKFLOW_DATA_TYPE',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_is_read_only                 => true );
        --
        -- This hidden property is populated by dev_views.sql and pe.callbacks.js and uses the direction and ignore_output to determine if it can
        -- accept any value or item (=BASIC), or because it's an OUT direction where ignore_output = N only items (=ITEM).
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'HIDDEN_REQUIRED_VALUE_TYPE',
            p_is_required                  => false,
            p_is_common                    => true,
            p_default_value                => 'BASIC' );
        --
        -- All VALUE_* properties are dependent on this hidden property. It has to be hidden because if HIDDEN_REQUIRED_VALUE_TYPE is set to ITEM
        -- a developer is NOT able to choose how they want to set the parameter, they can only assign an item.
        -- In pe.callbacks.js, HIDDEN_VALUE_TYPE is set to the value of PARAMETER_VALUE_TYPE if it's visible so that all VALUE_* properties work.
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'HIDDEN_VALUE_TYPE',
            p_db_column                    => 'VALUE_TYPE',
            p_is_required                  => false,
            p_is_common                    => true,
            p_default_value                => 'ITEM' ); /* keep in sync with default of PARAMETER_VALUE_TYPE */
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'PARAMETER_VALUE_TYPE',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_default_value                => 'ITEM',
            p_depending_on_comp_prop_name  => 'HIDDEN_REQUIRED_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'BASIC' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_STATIC_VALUE',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'STATIC',
            p_depending_on_comp_prop_name2 => 'WORKFLOW_DATA_TYPE',
            p_depending_on_condition_type2 => 'NOT_EQUALS',
            p_depending_on_expression2     => 'BOOLEAN' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_STATIC_VALUE_BOOLEAN',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'STATIC',
            p_depending_on_comp_prop_name2 => 'WORKFLOW_DATA_TYPE',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'BOOLEAN' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_QUERY',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL_QUERY' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_ITEM',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'ITEM' );
        --
        store_expression_comp_props (
            p_component_type_id => l_component_type_id,
            p_name_prefix       => 'VALUE_',
            p_return_type       => 'CUSTOM',
            p_reference_scope   => 'DEPENDS',
            p_type_property     => 'HIDDEN_VALUE_TYPE' );
        --
        store_func_body_comp_props (
            p_component_type_id => l_component_type_id,
            p_name_prefix       => 'VALUE_',
            p_return_type       => 'CUSTOM',
            p_reference_scope   => 'DEPENDS',
            p_type_property     => 'HIDDEN_VALUE_TYPE' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_FORMAT_MASK',
            p_is_required                  => false,
            p_is_common                    => false,
            p_db_column                    => null,
            p_is_read_only                 => false,
            p_depending_on_comp_prop_name  => 'WORKFLOW_DATA_TYPE',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'NUMBER,DATE,TIMESTAMP,TIMESTAMP WITH LOCAL TIME ZONE',
            p_depending_on_comp_prop_name2 => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type2 => 'IN_LIST',
            p_depending_on_expression2     => 'STATIC,ITEM',
            p_help_text                    => 'Format mask to convert the <strong>Static</strong> or <strong>Item</strong> value to the data type of the workflow parameter.' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_BOOLEAN_TRUE',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => true,
            p_supports_substitution        => false,
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'ITEM,PREFERENCE',
            p_depending_on_comp_prop_name2 => 'WORKFLOW_DATA_TYPE',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'BOOLEAN' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_BOOLEAN_FALSE',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => true,
            p_supports_substitution        => false,
            p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'ITEM,PREFERENCE',
            p_depending_on_comp_prop_name2 => 'WORKFLOW_DATA_TYPE',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'BOOLEAN' );
        --
        store_audit_info_comp_prop (
            p_component_type_id => l_component_type_id );
        --
    end store_comp_props_wf_param;
    --
    procedure store_comp_props_task_param (
        p_parent_comp_type_id in number
    )
    is
    begin
        store_component_prop (
            p_component_type_id   => l_component_type_id,
            p_property_name       => 'TASK_DEF_PARAM',
            p_db_column           => null,
            p_is_required         => true,
            p_is_common           => true,
            p_is_read_only        => true,
            p_reference_on_delete => 'DB_CASCADE' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'TASK_VALUE_TYPE',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'STATIC' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_STATIC_VALUE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'TASK_VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'STATIC' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_QUERY',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'TASK_VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL_QUERY' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_ITEM',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'TASK_VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'ITEM' );
        --
        store_expression_comp_props (
            p_component_type_id => l_component_type_id,
            p_name_prefix       => 'VALUE_',
            p_return_type       => 'VARCHAR2',
            p_type_property     => 'TASK_VALUE_TYPE' );
        --
        store_func_body_comp_props (
            p_component_type_id => l_component_type_id,
            p_name_prefix       => 'VALUE_',
            p_return_type       => 'VARCHAR2',
            p_type_property     => 'TASK_VALUE_TYPE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_PREFERENCE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'TASK_VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PREFERENCE' );
        --
        store_audit_info_comp_prop (
            p_component_type_id => l_component_type_id );
        --
    end store_comp_props_task_param;
    --
    procedure store_property_series_source (
        p_prefix               in varchar2,
        p_property_id_type     in number,
        p_property_id_sql      in number,
        p_property_id_plsql    in number,
        p_sql_min_column_count in number,
        p_sql_max_column_count in number,
        p_examples_sql         in varchar2,
        p_examples_plsql       in varchar2 )
    is
    begin
        l_property_id := p_property_id_type;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_prefix || '_SERIES_SOURCE_TYPE',
            p_prompt             => 'Type',
            p_property_type      => 'SELECT LIST',
            p_db_column          => 'SERIES_QUERY_TYPE',
            p_display_group_name => 'SOURCE',
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select the query source type for the chart series.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'SQL Query',
            p_return_value  => 'SQL_QUERY' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Function Body returning SQL Query',
            p_return_value  => 'FUNCTION_RETURNING_SQL_QUERY' );
        --
        l_property_id := p_property_id_sql;
        store_property (
            p_id                   => l_property_id,
            p_name                 => p_prefix || '_SOURCE_QUERY',
            p_prompt               => 'SQL Query',
            p_property_type        => 'SQL',
            p_db_column            => 'SERIES_QUERY',
            p_display_length       => 80,
            p_max_length           => 32767,
            p_sql_min_column_count => p_sql_min_column_count,
            p_sql_max_column_count => p_sql_max_column_count,
            p_examples             => p_examples_sql,
            p_display_group_name   => 'SOURCE',
            p_help_text            => q'~Enter the SQL Query for the chart series.~',
            p_comment_text         => '$$$ how can we check the data types of the SQL query?' );
        --
        l_property_id := p_property_id_plsql;
        store_property (
            p_id                   => l_property_id,
            p_name                 => p_prefix || '_SOURCE_FUNC_RETURNING_SQL',
            p_prompt               => 'PL/SQL Function Body returning SQL Query',
            p_property_type        => 'PLSQL FUNCTION BODY SQL',
            p_db_column            => 'SERIES_QUERY',
            p_display_length       => 80,
            p_max_length           => 32767,
            p_display_group_name   => 'SOURCE',
            p_sql_min_column_count => p_sql_min_column_count,
            p_sql_max_column_count => p_sql_max_column_count,
            p_examples             => p_examples_plsql,
            p_help_text            => q'~Enter a PL/SQL function body that returns an SQL Query for the chart series.~',
            p_comment_text         => '$$$ how can we check the data types of the SQL query?' );
    end store_property_series_source;
    --
    procedure store_comp_prop_wf_variable
    is
    begin
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'WF_IDENTIFICATION_STATIC_ID',
            p_db_column             => 'STATIC_ID',
            p_check_uniqueness      => 'WORKFLOW', -- limited to the workflow version
            p_is_required           => true,
            p_is_common             => true,
            p_supports_substitution => false,
            p_default_value         => '#PLEASE_CHANGE#' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'LABEL',
            p_db_column         => 'LABEL',
            p_is_required       => true, -- $$$ why is it optional for parameters but required for variables?
            p_is_common         => true,
            p_default_value     => '#PLEASE_CHANGE#',
            p_check_uniqueness  => 'PARENT',
            p_help_text         => q'~An end-user friendly name of the workflow variable.~' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'WORKFLOW_DATA_TYPE',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'VARCHAR2' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'WORKFLOW_VALUE_TYPE',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'NULL' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_STATIC_VALUE',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_depending_on_comp_prop_name  => 'WORKFLOW_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'STATIC',
            p_depending_on_comp_prop_name2 => 'WORKFLOW_DATA_TYPE',
            p_depending_on_condition_type2 => 'NOT_EQUALS',
            p_depending_on_expression2     => 'BOOLEAN' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VALUE_STATIC_VALUE_BOOLEAN',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_depending_on_comp_prop_name  => 'WORKFLOW_VALUE_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'STATIC',
            p_depending_on_comp_prop_name2 => 'WORKFLOW_DATA_TYPE',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'BOOLEAN' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_ITEM',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'WORKFLOW_VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'ITEM' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_QUERY',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'WORKFLOW_VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL_QUERY' );
        --
        store_expression_comp_props (
            p_component_type_id => l_component_type_id,
            p_name_prefix       => 'VALUE_',
            p_return_type       => 'CUSTOM',
            p_type_property     => 'WORKFLOW_VALUE_TYPE' );
        --
        store_func_body_comp_props (
            p_component_type_id => l_component_type_id,
            p_name_prefix       => 'VALUE_',
            p_return_type       => 'CUSTOM',
            p_type_property     => 'WORKFLOW_VALUE_TYPE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SESSION_FORMAT_MASK',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'WORKFLOW_DATA_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'NUMBER,TIMESTAMP,TIMESTAMP_TZ,TIMESTAMP_LTZ',
            p_help_text                   => q'~Format mask to be used to convert the workflow variable into a NUMBER or TIMESTAMP and back into a VARCHAR2 when the parameter is used in a bind variable or substitution string. ~' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VARIABLE_BOOLEAN_TRUE',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => true,
            p_supports_substitution        => false,
            p_depending_on_comp_prop_name  => 'WORKFLOW_DATA_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'BOOLEAN',
            p_depending_on_comp_prop_name2 => 'WORKFLOW_VALUE_TYPE',
            p_depending_on_condition_type2 => 'NOT_IN_LIST',
            p_depending_on_expression2     => 'STATIC' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'VARIABLE_BOOLEAN_FALSE',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => true,
            p_supports_substitution        => false,
            p_depending_on_comp_prop_name  => 'WORKFLOW_DATA_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'BOOLEAN',
            p_depending_on_comp_prop_name2 => 'WORKFLOW_VALUE_TYPE',
            p_depending_on_condition_type2 => 'NOT_IN_LIST',
            p_depending_on_expression2     => 'STATIC' );
        --
        store_standard_attr_comp_prop (
            p_component_type_id => l_component_type_id,
            p_has_comments      => true,
            p_comment_db_column => 'VARIABLE_COMMENT' );
        --
end store_comp_prop_wf_variable;

    --
    procedure store_chart_font_properties (
        p_font_group             in varchar2,
        p_prompt_prefix          in varchar2 default null,
        p_display_group_name     in varchar2,
        p_property_id_font       in number,
        p_property_id_font_size  in number,
        p_property_id_font_color in number )
    is
        c_prompt_prefix varchar2( 30 ) := p_prompt_prefix || case when p_prompt_prefix is not null then ' ' end;
    begin
        --
        l_property_id := p_property_id_font;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_font_group || '_FACE',
            p_prompt             => c_prompt_prefix || 'Font Face',
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_font_group || '_FACE',
            p_display_group_name => p_display_group_name,
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select a font face.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arial',
            p_return_value  => 'Arial' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Helvetica',
            p_return_value  => 'Helvetica' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Geneva',
            p_return_value  => 'Geneva' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Sans-serif',
            p_return_value  => 'sans-serif' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Verdana',
            p_return_value  => 'Verdana' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Tahoma',
            p_return_value  => 'Tahoma' );
        --
        l_property_id := p_property_id_font_size;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_font_group || '_SIZE',
            p_prompt             => c_prompt_prefix || 'Font Size',
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_font_group || '_SIZE',
            p_display_group_name => p_display_group_name,
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select the font size.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '2',
            p_return_value  => '2' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '4',
            p_return_value  => '4' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '6',
            p_return_value  => '6' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '8',
            p_return_value  => '8' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '10',
            p_return_value  => '10' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '12',
            p_return_value  => '12' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '14',
            p_return_value  => '14' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '16',
            p_return_value  => '16' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '18',
            p_return_value  => '18' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '20',
            p_return_value  => '20' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '22',
            p_return_value  => '22' );
        --
        l_property_id := p_property_id_font_color;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_font_group || '_COLOR',
            p_prompt             => c_prompt_prefix || 'Font Color',
            p_property_type      => 'COLOR',
            p_db_column          => p_font_group || '_COLOR',
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~<p>Enter the color used to display the font for the specified attribute.</p>~' );

    end store_chart_font_properties;
    --
    procedure store_chart_font_comp_props (
        p_font_group                  in varchar2,
        p_default_font_size           in number   default 10,
        p_depending_on_comp_prop_name in varchar2 default null,
        p_depending_on_condition_type in varchar2 default null,
        p_depending_on_expression     in varchar2 default null )
    is
    begin
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_font_group || '_FACE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Tahoma',
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_font_group || '_SIZE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => p_default_font_size,
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_font_group || '_COLOR',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => '#000000',
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression );
        --
    end store_chart_font_comp_props;
    --
    procedure store_jet_font_properties (
        p_font_group              in varchar2,
        p_display_group_name      in varchar2,
        p_property_id_font_family in number,
        p_property_id_font_style  in number,
        p_property_id_font_size   in number,
        p_property_id_font_color  in number )
    is
    begin
        --
        l_property_id := p_property_id_font_family;
        store_property (
            p_id                 => l_property_id,
            p_name               => 'JET_' ||p_font_group || '_FAMILY',
            p_prompt             => 'Font Family',
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_font_group || '_FAMILY',
            p_display_group_name => p_display_group_name,
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select the font family.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arial',
            p_return_value  => 'Arial');
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arial Black',
            p_return_value  => 'Arial Black');
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Bookman',
            p_return_value  => 'Bookman');
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Comic Sans MS',
            p_return_value  => 'Comic Sans MS');
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Courier',
            p_return_value  => 'Courier');
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Courier New',
            p_return_value  => 'Courier New');
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Garamond',
            p_return_value  => 'Garamond');
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Georgia',
            p_return_value  => 'Georgia');
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Helvetica',
            p_return_value  => 'Helvetica');
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Impact',
            p_return_value  => 'Impact');
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Palatino',
            p_return_value  => 'Palatino');
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Times',
            p_return_value  => 'Times');
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Times New Roman',
            p_return_value  => 'Times New Roman');
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Trebuchet MS',
            p_return_value  => 'Trebuchet MS');
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Verdana',
            p_return_value  => 'Verdana');
        --
        l_property_id := p_property_id_font_style;
        store_property (
            p_id                 => l_property_id,
            p_name               => 'JET_' ||p_font_group || '_STYLE',
            p_prompt             => 'Font Style',
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_font_group || '_STYLE',
            p_display_group_name => p_display_group_name,
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select the font style.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Normal',
            p_return_value  => 'normal');
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Italic',
            p_return_value  => 'italic');
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Oblique',
            p_return_value  => 'oblique');
        --
        l_property_id := p_property_id_font_size;
        store_property (
            p_id                 => l_property_id,
            p_name               => 'JET_' ||p_font_group || '_SIZE',
            p_prompt             => 'Font Size',
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_font_group || '_SIZE',
            p_display_group_name => p_display_group_name,
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select the font size.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '8',
            p_return_value  => '8' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '10',
            p_return_value  => '10' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '12',
            p_return_value  => '12' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '14',
            p_return_value  => '14' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '16',
            p_return_value  => '16' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '18',
            p_return_value  => '18' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '20',
            p_return_value  => '20' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '22',
            p_return_value  => '22' );
        --
        l_property_id := p_property_id_font_color;
        store_property (
            p_id                 => l_property_id,
            p_name               => 'JET_' ||p_font_group || '_COLOR',
            p_prompt             => 'Font Color',
            p_property_type      => 'COLOR',
            p_db_column          => p_font_group || '_COLOR',
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~<p>Enter the color used to display the font for the specified attribute.</p>~' );

    end store_jet_font_properties;
    --
    procedure store_jet_font_comp_props (
        p_font_group                   in varchar2,
        p_depending_on_comp_prop_name  in varchar2 default null,
        p_depending_on_condition_type  in varchar2 default null,
        p_depending_on_expression      in varchar2 default null,
        p_depending_on_comp_prop_name2 in varchar2 default null,
        p_depending_on_condition_type2 in varchar2 default null,
        p_depending_on_expression2     in varchar2 default null )
    is
    begin
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'JET_'|| p_font_group || '_FAMILY',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => false,
            p_depending_on_comp_prop_name  => p_depending_on_comp_prop_name,
            p_depending_on_condition_type  => p_depending_on_condition_type,
            p_depending_on_expression      => p_depending_on_expression,
            p_depending_on_comp_prop_name2 => p_depending_on_comp_prop_name2,
            p_depending_on_condition_type2 => p_depending_on_condition_type2,
            p_depending_on_expression2     => p_depending_on_expression2);
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'JET_'|| p_font_group || '_STYLE',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression,
            p_depending_on_comp_prop_name2 => p_depending_on_comp_prop_name2,
            p_depending_on_condition_type2 => p_depending_on_condition_type2,
            p_depending_on_expression2     => p_depending_on_expression2 );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'JET_'|| p_font_group || '_SIZE',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression,
            p_depending_on_comp_prop_name2 => p_depending_on_comp_prop_name2,
            p_depending_on_condition_type2 => p_depending_on_condition_type2,
            p_depending_on_expression2     => p_depending_on_expression2 );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'JET_'|| p_font_group || '_COLOR',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression,
            p_depending_on_comp_prop_name2 => p_depending_on_comp_prop_name2,
            p_depending_on_condition_type2 => p_depending_on_condition_type2,
            p_depending_on_expression2     => p_depending_on_expression2 );
        --
    end store_jet_font_comp_props;
    --
    --
    procedure store_cal_weekday_property (
        p_property_id        in number,
        p_name               in varchar2,
        p_prompt             in varchar2,
        p_db_column          in varchar2,
        p_display_group_name in varchar2,
        p_help_text          in varchar2 )
    is
    begin
        l_property_id := p_property_id;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_name,
            p_prompt             => p_prompt,
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_db_column,
            p_display_group_name => p_display_group_name,
            p_lov_type           => 'STATIC',
            p_help_text          => p_help_text );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Sunday',
            p_return_value  => '19721105' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Monday',
            p_return_value  => '19721106' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Tuesday',
            p_return_value  => '19721107' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Wednesday',
            p_return_value  => '19721108' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Thursday',
            p_return_value  => '19721109' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Friday',
            p_return_value  => '19721110' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Saturday',
            p_return_value  => '19721111' );
        --
    end store_cal_weekday_property;
    --
    --
    procedure store_print_font_properties (
        p_font_group                in varchar2,
        p_display_group_name        in varchar2,
        p_db_column_prefix          in varchar2,
        p_property_id_font          in number,
        p_property_id_font_weight   in number,
        p_property_id_font_size     in number,
        p_property_id_font_color    in number,
        p_property_id_font_bg_color in number default null )
    is
    begin
        --
        l_property_id := p_property_id_font;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_font_group || '_FONT_FAMILY',
            p_prompt             => 'Font',
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_db_column_prefix || '_FONT_FAMILY',
            p_display_group_name => p_display_group_name,
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select a font face for this component.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Helvetica',
            p_return_value  => 'Helvetica' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Times',
            p_return_value  => 'Times' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Courier',
            p_return_value  => 'Courier' );
        --
        l_property_id := p_property_id_font_weight;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_font_group || '_FONT_WEIGHT',
            p_prompt             => 'Font Weight',
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_db_column_prefix || '_FONT_WEIGHT',
            p_display_group_name => p_display_group_name,
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select a font weight for this component.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Normal',
            p_return_value  => 'normal' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Bold',
            p_return_value  => 'bold' );
        --
        l_property_id := p_property_id_font_size;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_font_group || '_FONT_SIZE',
            p_prompt             => 'Font Size',
            p_property_type      => 'INTEGER',
            p_db_column          => p_db_column_prefix || '_FONT_SIZE',
            p_display_length     => 4,
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~Enter a font size for this component.~' );
        --
        l_property_id := p_property_id_font_color;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_font_group || '_FONT_COLOR',
            p_prompt             => 'Font Color',
            p_property_type      => 'COLOR',
            p_db_column          => p_db_column_prefix || '_FONT_COLOR',
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~<p>Enter the color used to display this component.</p>~' );
        --
        if p_property_id_font_bg_color is not null then
            l_property_id := p_property_id_font_bg_color;
            store_property (
                p_id                 => l_property_id,
                p_name               => p_font_group || '_BG_COLOR',
                p_prompt             => 'Background Color',
                p_property_type      => 'COLOR',
                p_db_column          => p_db_column_prefix || '_BG_COLOR',
                p_display_group_name => p_display_group_name,
                p_help_text          => q'~<p>Enter the color used to display the background for this component.</p>~' );
        end if;
        --
    end store_print_font_properties;
    --
    procedure store_print_font_comp_props (
        p_font_group                  in varchar2,
        p_default_size                in varchar2,
        p_default_weight              in varchar2 default 'normal',
        p_has_bg_color                in boolean  default false,
        p_default_bg_color            in varchar2 default null,
        p_depending_on_comp_prop_name in varchar2 default null,
        p_depending_on_condition_type in varchar2 default null,
        p_depending_on_expression     in varchar2 default null )
    is
    begin
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_font_group || '_FONT_FAMILY',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Helvetica',
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_font_group || '_FONT_WEIGHT',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => p_default_weight,
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_font_group || '_FONT_SIZE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => p_default_size,
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_font_group || '_FONT_COLOR',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => '#000000',
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression );
        --
        if p_has_bg_color then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => p_font_group || '_BG_COLOR',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_default_value               => p_default_bg_color,
                p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
                p_depending_on_condition_type => p_depending_on_condition_type,
                p_depending_on_expression     => p_depending_on_expression );
        end if;
        --
    end store_print_font_comp_props;
    --
    --
    procedure store_print_comp_props (
        p_component_type_id in number )
    is
    begin
        --
        if p_component_type_id in ( c_comp_type_classic_rpt_print, c_comp_type_tab_form_print ) then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'PRINT_LINK_TEXT',
                p_db_column         => null,
                p_is_required       => false,
                p_is_common         => false,
                p_default_value     => '#PRINT_LINK_TEXT#' );
            --
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'PRINT_OUTPUT_FORMAT',
                p_db_column         => null,
                p_is_required       => false,
                p_is_common         => true,
                p_default_value     => 'PDF',
                p_null_text         => 'Derive from Item');
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PRINT_OUTPUT_FORMAT_ITEM',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => 'PRINT_OUTPUT_FORMAT',
                p_depending_on_condition_type => 'NULL' );
        end if;
        --
        if p_component_type_id != c_comp_type_ig_print then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'REPORT_LAYOUT',
                p_db_column         => null,
                p_is_required       => false,
                p_is_common         => false,
                p_null_text         => 'Default Report Layout' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PRINT_VIEW_FILE_AS',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_default_value               => 'ATTACHMENT' );
        end if;
        --
        if p_component_type_id in ( c_comp_type_classic_rpt_print, c_comp_type_tab_form_print ) then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PRINT_FILE_NAME',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false );
            --
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'LINK_EXAMPLE',
                p_db_column         => 'PRINT_EXAMPLE_URL',
                p_is_required       => false,
                p_is_common         => false,
                p_help_text         => q'~<p>Report regions can be printed using the standard print link, shown below the report region, or using a button. If you want to use a button, remove the link label and create a button on your page, using the URL shown in Print URL as the button target.</p>
<p>Using buttons to print report regions enables you to set session state. This is useful if you are planning to support printing to several different output formats (Word, Excel, PDF, and so on) and want to display a button, link, or image for each option. For this implementation, use the output format derived from item option and include the item name and value in your Print URL.</p>~' );
        end if;
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_PAGE_SIZE',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'LETTER',
            p_comment_text      => '$$$ default based on current language' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_ORIENTATION',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'HORIZONTAL' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_UNITS',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'INCHES',
            p_comment_text      => '$$$ default based on current language' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_WIDTH',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => '11',
            p_comment_text      => '$$$ default based on current language' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_HEIGHT',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => '8.5',
            p_comment_text      => '$$$ default based on current language' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_BORDER_WIDTH',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => false,
            p_default_value     => '.5' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_BORDER_COLOR',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => false,
            p_default_value     => '#666666' );
        --
        store_print_font_comp_props (
            p_font_group   => 'PRINT_PAGE_HEADER',
            p_default_size => 12 );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_PAGE_HEADER_ALIGNMENT',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'CENTER' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_PAGE_HEADER_TEXT',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => true );
        --
        store_print_font_comp_props (
            p_font_group       => 'PRINT_COLUMN_HEADING',
            p_default_size     => 10,
            p_default_weight   => 'bold',
            p_has_bg_color     => true,
            p_default_bg_color => '#EEEEEE' );
        --
        store_print_font_comp_props (
            p_font_group       => 'PRINT_COLUMN',
            p_default_size     => 10,
            p_has_bg_color     => true,
            p_default_bg_color => '#FFFFFF' );
        --
        if p_component_type_id in ( c_comp_type_classic_rpt_print, c_comp_type_tab_form_print ) then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'PRINT_COLUMN_WIDTH_UNITS',
                p_db_column         => null,
                p_is_required       => true,
                p_is_common         => false,
                p_default_value     => 'PERCENTAGE' );
        end if;
        --
        store_print_font_comp_props (
            p_font_group   => 'PRINT_PAGE_FOOTER',
            p_default_size => 12 );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_PAGE_FOOTER_ALIGNMENT',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'CENTER' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_PAGE_FOOTER_TEXT',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => false );
        --
    end store_print_comp_props;
    --
    --
    procedure store_lov_type_component_props (
        p_name                        in varchar2,
        p_db_column_named_lov         in varchar2 default null,
        p_db_column_source            in varchar2 default null,
        p_is_required                 in boolean,
        p_plugin_std_attributes       in varchar2 default null,
        p_depending_on_comp_prop_name in varchar2 default null,
        p_depending_on_condition_type in varchar2 default null,
        p_depending_on_expression     in varchar2 default null )
    is
    begin
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_name,
            p_db_column                   => null,
            p_is_required                 => p_is_required,
            p_is_common                   => true,
            p_plugin_std_attributes       => p_plugin_std_attributes,
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'NAMED_LOV',
            p_db_column                   => p_db_column_named_lov,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SHARED' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOV_SQL',
            p_db_column                   => p_db_column_source,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL_QUERY',
            p_help_text                   => q'~<p>Enter the SQL query definition to populate this list of values. Generally list of value queries are of the form:</p>
<pre>
select [displayValue],
       [returnValue]
  from ...
 where ...
 order by ...
</pre>
<p>Each column selected must have a unique name or alias. Oracle recommends using an alias on any column that includes an SQL expression.</p>
<p>Note: When defining a Popup LOV item type, if you would like to display multiple columns in the popup, you must instead define your List of Values in Shared Components,
with the required additional metadata. Inline list of values can only be used to display single columns for Popup LOVs.</p>~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOV_STATIC_VALUES',
            p_db_column                   => p_db_column_source,
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => 'STATIC:Display1;Return1,Display2;Return2',
            p_depending_on_comp_prop_name => p_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'STATIC' );
        --
        store_func_body_comp_props (
            p_component_type_id   => l_component_type_id,
            p_name_prefix         => 'LOV_',
            p_return_type         => 'SQL',
            p_db_column_func_body => p_db_column_source,
            p_type_property       => p_name );
        --
    end store_lov_type_component_props;
    --
    --
    procedure store_comp_prop_fc_attributes
    is
        c_is_facet          constant boolean := ( l_component_type_id in ( c_comp_type_facet,   c_comp_type_facet_group_item ) );
        c_is_facet_or_group constant boolean := ( l_component_type_id in ( c_comp_type_facet,   c_comp_type_facet_group ) );
        c_is_sfilter        constant boolean := ( l_component_type_id in ( c_comp_type_sfilter, c_comp_type_sfilter_group_item ) );
    begin
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'FC_COMPUTE_COUNTS',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Y',
            p_plugin_std_attributes       => case when c_is_facet or c_is_sfilter then 'FC_HAS_FEEDBACK' end );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'FC_SHOW_COUNTS',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Y',
            p_depending_on_comp_prop_name => 'FC_COMPUTE_COUNTS',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'FC_ZERO_COUNT_ENTRIES',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'H',
            p_depending_on_comp_prop_name => 'FC_COMPUTE_COUNTS',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'FC_SORT_BY_TOP_COUNTS',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => false,
            p_default_value                => 'Y',
            p_depending_on_comp_prop_name  => 'FC_SHOW_COUNTS',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'Y',
            p_depending_on_comp_prop_name2 => case when c_is_facet or c_is_sfilter then 'ITEM_TYPE'                         end,
            p_depending_on_condition_type2 => case when c_is_facet or c_is_sfilter then 'IN_LIST'                           end,
            p_depending_on_expression2     => case when c_is_facet or c_is_sfilter then 'NATIVE_CHECKBOX,NATIVE_RADIOGROUP' end );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'FC_SHOW_SELECTED_FIRST',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'N',
            p_plugin_std_attributes       => case when c_is_facet or c_is_sfilter then 'FC_SHOW_SELECTED_FIRST' end,
            p_depending_on_comp_prop_name => case when c_is_facet or c_is_sfilter then 'FACET_LOV_TYPE'         end,
            p_depending_on_condition_type => case when c_is_facet or c_is_sfilter then 'NOT_NULL'               end );
        --
        if c_is_facet or l_component_type_id = c_comp_type_facet_group then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'FC_SHOW_MORE_COUNT',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_default_value               => '7',
                p_plugin_std_attributes       => case when c_is_facet then 'FC_SHOW_MORE_COUNT' end,
                p_depending_on_comp_prop_name => case when c_is_facet then 'FACET_LOV_TYPE'     end,
                p_depending_on_condition_type => case when c_is_facet then 'NOT_NULL'           end );
        end if;
        --
        if c_is_facet_or_group then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'FC_DISPLAY_AS',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_default_value               => 'INLINE',
                p_depending_on_comp_prop_name => case when c_is_facet then 'ITEM_TYPE'     end,
                p_depending_on_condition_type => case when c_is_facet then 'NOT_EQUALS'    end,
                p_depending_on_expression     => case when c_is_facet then 'NATIVE_SEARCH' end );

            resequence_comp_prop (
                p_component_type_id => l_component_type_id,
                p_name              => 'FC_DISPLAY_AS',
                p_previous_name     => 'ICON_CSS_CLASSES' );
        end if;
        --
        if l_component_type_id = c_comp_type_sfilter then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'FC_FILTER_VALUES',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_default_value               => 'N',
                p_plugin_std_attributes       => 'FC_FILTER_VALUES',
                p_depending_on_comp_prop_name => 'FACET_LOV_TYPE',
                p_depending_on_condition_type => 'NOT_NULL' );
            --
        elsif l_component_type_id = c_comp_type_facet then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'FC_FILTER_VALUES_INITIALLY',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_default_value               => 'N',
                p_plugin_std_attributes       => 'FC_FILTER_VALUES',
                p_depending_on_comp_prop_name => 'FACET_LOV_TYPE',
                p_depending_on_condition_type => 'NOT_NULL' );
            --
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'FC_ACTIONS_FILTER',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => false,
                p_default_value                => 'Y',
                p_plugin_std_attributes        => 'FC_FILTER_VALUES',
                p_depending_on_comp_prop_name  => 'FACET_LOV_TYPE',
                p_depending_on_condition_type  => 'NOT_NULL',
                p_depending_on_comp_prop_name2 => 'FC_DISPLAY_AS',
                p_depending_on_condition_type2 => 'EQUALS',
                p_depending_on_expression2     => 'INLINE' );
            --
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'FC_ACTIONS_CHART',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => false,
                p_default_value                => 'Y',
                p_depending_on_comp_prop_name  => 'FC_COMPUTE_COUNTS',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'Y',
                p_depending_on_comp_prop_name2 => 'FACET_LOV_TYPE',
                p_depending_on_condition_type2 => 'NOT_NULL' );
        --
        elsif l_component_type_id = c_comp_type_facet_group then
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'FC_ACTIONS_CHART',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => false,
                p_default_value                => 'Y',
                p_depending_on_comp_prop_name  => 'FC_COMPUTE_COUNTS',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'Y',
                p_depending_on_comp_prop_name2 => 'FC_DISPLAY_AS',
                p_depending_on_condition_type2 => 'EQUALS',
                p_depending_on_expression2     => 'INLINE' );
        end if;
        --
        if c_is_facet_or_group then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'FC_INITIAL_CHART',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_default_value               => 'N',
                p_depending_on_comp_prop_name => 'FC_ACTIONS_CHART',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'Y',
                p_depending_on_comp_prop_name2 => 'FC_DISPLAY_AS',
                p_depending_on_condition_type2 => 'EQUALS',
                p_depending_on_expression2     => 'INLINE' );
        end if;
        --
        if l_component_type_id in ( c_comp_type_facet, c_comp_type_facet_group, c_comp_type_facet_group_item ) then
            --
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'FC_COLLAPSIBLE',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => false,
                p_default_value                => 'N',
                p_depending_on_comp_prop_name  => case when c_is_facet then 'ITEM_TYPE'     end,
                p_depending_on_condition_type  => case when c_is_facet then 'NOT_EQUALS'    end,
                p_depending_on_expression      => case when c_is_facet then 'NATIVE_SEARCH' end,
                p_depending_on_comp_prop_name2 => case when c_is_facet_or_group then 'FC_DISPLAY_AS' end,
                p_depending_on_condition_type2 => case when c_is_facet_or_group then 'EQUALS' end,
                p_depending_on_expression2     => case when c_is_facet_or_group then 'INLINE' end );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'FC_INITIAL_COLLAPSED',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_default_value               => 'N',
                p_depending_on_comp_prop_name => 'FC_COLLAPSIBLE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'Y' );
        end if;
        --
        if l_component_type_id in ( c_comp_type_sfilter, c_comp_type_sfilter_group ) then
            -- Suggestion Chips
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'SUGGESTIONS_TYPE',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => true,
                p_default_value               => 'DYNAMIC',
                p_null_text                   => 'None',
                p_depending_on_comp_prop_name => case when c_is_sfilter then 'ITEM_TYPE'     end,
                p_depending_on_condition_type => case when c_is_sfilter then 'NOT_EQUALS'    end,
                p_depending_on_expression     => case when c_is_sfilter then 'NATIVE_SEARCH' end );
            --
            /* $$$ Phase 2
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'SEARCH_SUGGESTIONS_TYPE',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => true );
                p_depending_on_comp_prop_name => case when c_is_sfilter then 'ITEM_TYPE'     end,
                p_depending_on_condition_type => case when c_is_sfilter then 'EQUALS'        end,
                p_depending_on_expression     => case when c_is_sfilter then 'NATIVE_SEARCH' end );
            --
            -- For the depending properties we would use
            --
            -- p_depending_on_comp_prop_name  => 'SUGGESTIONS_TYPE',
            -- p_depending_on_has_to_exist    => 'N',
            -- ...
            -- p_depending_on_comp_prop_name2 => 'SEARCH_SUGGESTIONS_TYPE',
            -- p_depending_on_has_to_exist2   => 'N',
            -- ...
            */
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'SUGGESTIONS_STATIC_VALUES',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'SUGGESTIONS_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'STATIC' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'SUGGESTIONS_SQL_QUERY',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'SUGGESTIONS_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'SQL_QUERY' );
            --
            /* $$$ phase 2
            store_func_body_comp_props (
                p_component_type_id => l_component_type_id,
                p_name_prefix       => 'SUGGESTIONS_',
                p_return_type       => 'ARRAY',
                p_type_property     => 'SUGGESTIONS_TYPE' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'MAXIMUM_SUGGESTIONS',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_default_value               => '1',
                p_depending_on_comp_prop_name => case when c_is_sfilter then 'ITEM_TYPE'     end,
                p_depending_on_condition_type => case when c_is_sfilter then 'NOT_EQUALS'    end,
                p_depending_on_expression     => case when c_is_sfilter then 'NATIVE_SEARCH' end );
            --
            if l_component_type_id = c_comp_type_sfilter then
                store_component_prop (
                    p_component_type_id           => l_component_type_id,
                    p_property_name               => 'MAXIMUM_SEARCH_SUGGESTIONS',
                    p_db_column                   => null,
                    p_is_required                 => true,
                    p_is_common                   => false,
                    p_default_value               => '5',
                    p_depending_on_comp_prop_name => 'ITEM_TYPE',
                    p_depending_on_condition_type => 'EQUALS',
                    p_depending_on_expression     => 'NATIVE_SEARCH' );
            end if;
            */
            --
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'SHOW_SUGGESTIONS_LABEL',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => false,
                p_default_value                => case l_component_type_id
                                                    when c_comp_type_sfilter       then 'Y'
                                                    when c_comp_type_sfilter_group then 'N'
                                                  end,
                p_depending_on_comp_prop_name  => 'SUGGESTIONS_TYPE',
                p_depending_on_condition_type  => 'NOT_NULL',
                p_depending_on_comp_prop_name2 => case when c_is_sfilter then 'ITEM_TYPE'     end,
                p_depending_on_condition_type2 => case when c_is_sfilter then 'NOT_EQUALS'    end,
                p_depending_on_expression2     => case when c_is_sfilter then 'NATIVE_SEARCH' end );
        end if;
        --
    end store_comp_prop_fc_attributes;
    --
    --
    function replace_facet_sfil_help_text (
        p_help_text varchar2 )
        return varchar2
    is
    begin
        return replace (
                   p_help_text,
                   '%component%',
                   case
                     when l_component_type_id in ( c_comp_type_facet,   c_comp_type_facet_group,   c_comp_type_facet_group_item )   then 'facet'
                     when l_component_type_id in ( c_comp_type_sfilter, c_comp_type_sfilter_group, c_comp_type_sfilter_group_item ) then 'filter'
                   end );
    end replace_facet_sfil_help_text;
    --
    --
    procedure store_comp_prop_facet_sfilter (
        p_default_item_type          in varchar2,
        p_depending_on_property_name in varchar2 )
    is
        c_cascading_lov_parent_prop constant varchar2(30) := case
                                                               when l_component_type_id in ( c_comp_type_facet,   c_comp_type_facet_group_item )   then 'CASCADING_LOV_PARENT_FACET'
                                                               when l_component_type_id in ( c_comp_type_sfilter, c_comp_type_sfilter_group_item ) then 'CASCADING_LOV_PARENT_FILTER'
                                                             end;
    begin
        if l_component_type_id in ( c_comp_type_facet_group_item, c_comp_type_sfilter_group_item ) then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'HIDDEN_PARENT_REGION',
                p_is_required       => false,
                p_is_common         => false );
        end if;
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'ITEM_NAME',
            p_db_column             => null,
            p_is_required           => true,
            p_is_common             => true,
            p_check_uniqueness      => 'APPLICATION',
            p_supports_substitution => false,
            p_default_value         => 'P#PAGE_ID#_NEW' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'ITEM_TYPE',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => p_default_item_type );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'LABEL',
            p_db_column             => null,
            p_is_required           => false,
            p_is_common             => true,
            p_default_value         => '#PLEASE_CHANGE#',
            p_plugin_std_attributes => 'VISIBLE',
            p_help_text             => replace_facet_sfil_help_text( q'~<p>Enter the label for the %component%.
    The label displays on the page only if the %component% displays. The label for type <strong>Search</strong> is visually hidden, but available to assistive technology.</p>~' ));
        --
        if l_component_type_id in ( c_comp_type_facet, c_comp_type_facet_group_item ) then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'SHOW_CURRENT_FACET_LABEL',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => true,
                p_default_value               => 'Y',
                p_plugin_std_attributes       => 'VISIBLE',
                p_depending_on_comp_prop_name => 'ITEM_TYPE',
                p_depending_on_condition_type => 'NOT_EQUALS',
                p_depending_on_expression     => 'NATIVE_SEARCH' );
        end if;
        --
        store_plugin_attr_seq_offset (
            p_component_type_id => l_component_type_id );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'DISPLAY_SEQUENCE',
            p_db_column         => 'ITEM_SEQUENCE',
            p_is_required       => true,
            p_is_common         => true );
        --
        if l_component_type_id = c_comp_type_facet_group_item then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'FACET_GROUP',
                p_db_column         => null,
                p_is_required       => true,
                p_is_common         => true );
        elsif l_component_type_id = c_comp_type_sfilter_group_item then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'SFILTER_GROUP',
                p_db_column         => null,
                p_is_required       => true,
                p_is_common         => true );
        end if;
        --
        if l_component_type_id = c_comp_type_facet then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'FC_MAX_HEIGHT',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => 'ITEM_TYPE',
                p_depending_on_condition_type => 'NOT_IN_LIST',
                p_depending_on_expression     => 'NATIVE_SEARCH,NATIVE_INPUT' );
        end if;
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'ELEMENT_VALUE_PLACEHOLDER',
            p_db_column             => null,
            p_is_required           => false,
            p_is_common             => true,
            p_plugin_std_attributes => 'PLACEHOLDER' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'ICON_CSS_CLASSES',
            p_db_column                   => 'ITEM_ICON_CSS_CLASSES',
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'ITEM_TYPE',
            p_depending_on_condition_type => 'NOT_EQUALS',
            p_depending_on_expression     => 'NATIVE_SEARCH',
            p_help_text                   => replace_facet_sfil_help_text (
q'~<p>Enter the classes for the icon you want to use to identify this %component%. You may add multiple classes by separating them with spaces.</p>
            <p>If your theme uses Font APEX then review the <a rel="noopener noreferrer" target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a> to view available icons and modifiers.</p>~' ));
        --
        store_lov_type_component_props (
            p_name                  => 'FACET_LOV_TYPE',
            p_is_required           => null, -- defined by plug-in standard attributes
            p_plugin_std_attributes => 'LOV' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOV_SORT_DIRECTION',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'ASC',
            p_depending_on_comp_prop_name => 'FACET_LOV_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'DISTINCT' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'INCLUDE_NULL_OPTION',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'N',
            p_plugin_std_attributes       => 'FC_LOV_DISPLAY_NULL',
            p_depending_on_comp_prop_name => 'FACET_LOV_TYPE',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'NULL_DISPLAY_VALUE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'INCLUDE_NULL_OPTION',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y',
            p_help_text                   => q'~Enter the text to be displayed within the list NULL option at the top of this list.~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => c_cascading_lov_parent_prop,
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_reference_on_delete         => 'WEAK_NULL',
            p_depending_on_comp_prop_name => 'FACET_LOV_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SHARED' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'CASCADING_LOV_PARENT_COLUMN',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_supports_substitution       => false,
       --     p_plugin_std_attributes       => 'CASCADING_LOV',
            p_depending_on_comp_prop_name => c_cascading_lov_parent_prop,
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'CASCADING_LOV_PARENT_REQUIRED',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => 'Y',
            p_depending_on_comp_prop_name => c_cascading_lov_parent_prop,
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        if l_component_type_id in ( c_comp_type_facet, c_comp_type_sfilter ) then
            store_comp_prop_fc_attributes;
            --
            declare
                c_is_facet  constant boolean := l_component_type_id = c_comp_type_facet;
            begin
                store_component_prop (
                    p_component_type_id            => l_component_type_id,
                    p_property_name                => 'ADVANCED_CSS_CLASSES',
                    p_db_column                    => 'ITEM_CSS_CLASSES',
                    p_is_required                  => false,
                    p_is_common                    => false,
                    p_depending_on_comp_prop_name  => 'ITEM_TYPE',
                    p_depending_on_condition_type  => 'NOT_EQUALS',
                    p_depending_on_expression      => 'NATIVE_SEARCH',
                    p_depending_on_comp_prop_name2 => case when c_is_facet then 'FC_DISPLAY_AS' end,
                    p_depending_on_condition_type2 => case when c_is_facet then 'EQUALS' end,
                    p_depending_on_expression2     => case when c_is_facet then 'INLINE' end,
                    p_help_text                    => replace_facet_sfil_help_text( q'~Enter classes to add to this %component%. You may add multiple classes by separating them with spaces.~' ));
            end;
        end if;
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SOURCE_DB_COLUMN',
            p_db_column                   => 'SOURCE',
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'ITEM_TYPE',
            p_depending_on_condition_type => 'NOT_EQUALS',
            p_depending_on_expression     => 'NATIVE_SEARCH',
            p_help_text                   => replace_facet_sfil_help_text( q'~<p>Enter the case sensitive database column name used as the source for this %component%.</p>~' ));
        --
        if l_component_type_id in ( c_comp_type_facet, c_comp_type_sfilter ) then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'TEXT_SEARCH_DB_COLUMNS',
                p_db_column                   => 'SOURCE',
                p_is_required                 => false,
                p_is_common                   => true,
                p_supports_substitution       => false,
                p_depending_on_comp_prop_name => 'ITEM_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'NATIVE_SEARCH' );
        end if;
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DATA_TYPE',
            p_db_column                   => 'SOURCE_DATA_TYPE',
            p_is_required                 => true,
            p_is_common                   => false,
            p_supports_substitution       => false,
            p_default_value               => 'VARCHAR2',
            p_depending_on_comp_prop_name => 'ITEM_TYPE',
            p_depending_on_condition_type => 'NOT_EQUALS',
            p_depending_on_expression     => 'NATIVE_SEARCH' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'FORMAT_MASK_DATE',
            p_db_column                   => 'FORMAT_MASK',
            p_is_required                 => false,
            p_is_common                   => false,
            p_plugin_std_attributes       => 'FORMAT_MASK_DATE',
            p_depending_on_comp_prop_name => 'DATA_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'DATE,TIMESTAMP,TIMESTAMP_TZ,TIMESTAMP_LTZ' );
        --
        -- FORMAT_MASK_DATE is part of Display Group "Appearance" but also has a dependency
        -- to Component-Prop 'DATA_TYPE', so we have to move it up after creation
        resequence_comp_prop (
            p_component_type_id => l_component_type_id,
            p_name              => 'FORMAT_MASK_DATE',
            p_previous_name     => 'ICON_CSS_CLASSES' );
        --
        if l_component_type_id in ( c_comp_type_facet, c_comp_type_sfilter ) then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'MULTI_VALUE_TYPE',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_null_text                   => 'No',
                p_null_help_text              => 'Column does not contain multiple values.',
                p_depending_on_comp_prop_name => 'ITEM_TYPE',
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'NATIVE_CHECKBOX,NATIVE_RADIOGROUP,NATIVE_SELECT_LIST' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'MULTI_VALUE_SEPARATOR',
                p_db_column                   => null,
                p_default_value               => ':',
                p_is_required                 => true,
                p_is_common                   => false,
                p_supports_substitution       => false,
                p_depending_on_comp_prop_name => 'MULTI_VALUE_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'SEPARATED' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'MULTI_VALUE_TRIM_SPACE',
                p_db_column                   => null,
                p_default_value               => 'N',
                p_is_required                 => true,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => 'MULTI_VALUE_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'SEPARATED' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'FC_MULTI_VALUE_COMBINATION',
                p_is_required                 => true,
                p_default_value               => 'OR',
                p_is_common                   => false,
                p_depending_on_comp_prop_name => 'MULTI_VALUE_TYPE',
                p_depending_on_condition_type => 'NOT_NULL' );
        end if;
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'DEFAULT_VALUE_TYPE',
            p_db_column             => null,
            p_is_required           => false,
            p_is_common             => true,
            p_plugin_std_attributes => 'SOURCE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DEFAULT_VALUE_STATIC_TEXT',
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'DEFAULT_VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'STATIC_TEXT_WITH_SUBSTITUTIONS' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DEFAULT_VALUE_ITEM',
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'DEFAULT_VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'ITEM' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DEFAULT_VALUE_SQL_QUERY',
            p_db_column                   => 'ITEM_DEFAULT',
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'DEFAULT_VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL_QUERY' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DEFAULT_VALUE_SQL_QUERY_COLON',
            p_db_column                   => 'ITEM_DEFAULT',
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'DEFAULT_VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL_QUERY_COLON' );
        --
        store_expression_comp_props (
            p_component_type_id => l_component_type_id,
            p_name_prefix       => 'DEFAULT_VALUE_',
            p_return_type       => 'VARCHAR2',
            p_type_property     => 'DEFAULT_VALUE_TYPE' );
        --
        store_func_body_comp_props (
            p_component_type_id => l_component_type_id,
            p_name_prefix       => 'DEFAULT_VALUE_',
            p_return_type       => 'VARCHAR2',
            p_type_property     => 'DEFAULT_VALUE_TYPE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DEFAULT_VALUE_SEQUENCE',
            p_db_column                   => 'ITEM_DEFAULT',
            p_is_required                 => true,
            p_is_common                   => false,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'DEFAULT_VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SEQUENCE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_depending_on_property_name,
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_reference_on_delete         => 'DB_NULL',
            p_depending_on_comp_prop_name => 'ITEM_TYPE',
            p_depending_on_condition_type => 'NOT_EQUALS',
            p_depending_on_expression     => 'NATIVE_SEARCH' );
        --
        store_component_prop (
            p_component_type_id             => l_component_type_id,
            p_property_name                 => 'DEPENDING_ON_CONDITION',
            p_db_column                     => null,
            p_is_required                   => true,
            p_is_common                     => false,
            p_default_value                 => 'NOT_NULL',
            p_depending_on_comp_prop_name   => p_depending_on_property_name,
            p_depending_on_condition_type   => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DEPENDING_ON_COND_VALUE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'DEPENDING_ON_CONDITION',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'EQUALS,NOT_EQUALS' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DEPENDING_ON_COND_LIST',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'DEPENDING_ON_CONDITION',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'IN_LIST,NOT_IN_LIST' );
        --
        if l_component_type_id = c_comp_type_sfilter then
            store_condition_type_comp_prop (
                p_component_type_id           => l_component_type_id,
                p_name_prefix                 => null,
                p_help_text_type              => null,
                p_db_column_type              => 'DISPLAY_WHEN_TYPE',
                p_view_column_type            => 'CONDITION_TYPE',
                p_db_column_expr1             => 'DISPLAY_WHEN',
                p_db_column_expr2             => 'DISPLAY_WHEN2',
                p_depending_on_comp_prop_name => 'ITEM_TYPE',
                p_depending_on_condition_type => 'NOT_EQUALS',
                p_depending_on_expression     => 'NATIVE_SEARCH' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'AUTHORIZATION_SCHEME',
                p_db_column                   => 'SECURITY_SCHEME',
                p_is_required                 => false,
                p_is_common                   => false,
                p_reference_on_delete         => 'WEAK_NULL',
                p_depending_on_comp_prop_name => 'ITEM_TYPE',
                p_depending_on_condition_type => 'NOT_EQUALS',
                p_depending_on_expression     => 'NATIVE_SEARCH' );
        else
            store_condition_type_comp_prop (
                p_component_type_id => l_component_type_id,
                p_name_prefix       => null,
                p_help_text_type    => null,
                p_db_column_type    => 'DISPLAY_WHEN_TYPE',
                p_view_column_type  => 'CONDITION_TYPE',
                p_db_column_expr1   => 'DISPLAY_WHEN',
                p_db_column_expr2   => 'DISPLAY_WHEN2' );
            --
            store_component_prop (
                p_component_type_id   => l_component_type_id,
                p_property_name       => 'AUTHORIZATION_SCHEME',
                p_db_column           => 'SECURITY_SCHEME',
                p_is_required         => false,
                p_is_common           => false,
                p_reference_on_delete => 'WEAK_NULL' );
        end if;
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'ENCRYPT_SESSION_STATE',
            p_db_column             => null,
            p_is_required           => true,
            p_is_common             => false,
            p_default_value         => 'Y',
            p_plugin_std_attributes => 'ENCRYPT' );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'ESCAPE_SPECIAL_CHARACTERS',
            p_db_column             => null,
            p_is_required           => true,
            p_is_common             => false,
            p_default_value         => 'Y',
            p_plugin_std_attributes => 'ESCAPE_OUTPUT' );
        --
        store_standard_attr_comp_prop (
            p_component_type_id     => l_component_type_id,
            p_has_build_option      => true,
            p_has_comments          => true,
            p_comment_db_column     => 'ITEM_COMMENT' );
        --
    end store_comp_prop_facet_sfilter;
    --
    --
    procedure store_comp_prop_facet_sfil_grp
    is
    begin
        store_component_prop (
            p_component_type_id      => l_component_type_id,
            p_property_name          => 'LABEL',
            p_db_column              => 'LABEL',
            p_is_required            => true,
            p_is_common              => true,
            p_check_uniqueness       => 'PARENT',
            p_supports_substitution  => true,
            p_default_value          => '#PLEASE_CHANGE#',
            p_help_text              => replace_facet_sfil_help_text( '~Enter the label of the %component% group.~' ));
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'DISPLAY_SEQUENCE',
            p_db_column         => 'DISPLAY_SEQUENCE',
            p_is_required       => true,
            p_is_common         => true );
        --
        if l_component_type_id = c_comp_type_facet_group then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'FC_MAX_HEIGHT',
                p_db_column         => null,
                p_is_required       => false,
                p_is_common         => false );
        end if;
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'ICON_CSS_CLASSES',
            p_db_column         => 'ICON_CSS_CLASSES',
            p_is_required       => false,
            p_is_common         => false,
            p_help_text         => replace_facet_sfil_help_text(
q'~<p>Enter the classes for the icon you want to use to identify this %component%. You may add multiple classes by separating them with spaces.</p>
            <p>If your theme uses Font APEX then review the <a rel="noopener noreferrer" target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a> to view available icons and modifiers.</p>~' ));
        --
        store_comp_prop_fc_attributes;
        --
        declare
            c_is_facet  constant boolean := l_component_type_id = c_comp_type_facet_group;
        begin
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'ADVANCED_CSS_CLASSES',
                p_db_column                   => 'CSS_CLASSES',
                p_is_required                 => false,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => case when c_is_facet then 'FC_DISPLAY_AS' end,
                p_depending_on_condition_type => case when c_is_facet then 'EQUALS' end,
                p_depending_on_expression     => case when c_is_facet then 'INLINE' end,
                p_help_text                   => replace_facet_sfil_help_text( q'~Enter classes to add to this %component% group. You may add multiple classes by separating them with spaces.~' ) );
        end;
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'FC_FILTER_COMBINATION',
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'OR' );
        --
        store_standard_attr_comp_prop (
            p_component_type_id      => l_component_type_id,
            p_has_condition            => true,
            p_cond_type_db_column      => 'CONDITION_TYPE',
            p_cond_exp1_db_column      => 'CONDITION_EXPR1',
            p_cond_exp2_db_column      => 'CONDITION_EXPR2',
            p_has_authorization_scheme => true,
            p_authorization_db_column  => 'AUTHORIZATION_SCHEME',
            p_has_build_option         => true,
            p_build_option_db_column   => 'BUILD_OPTION_ID',
            p_has_comments             => true,
            p_comment_db_column        => 'GROUP_COMMENT' );
        --
    end store_comp_prop_facet_sfil_grp;
    --
    --
    procedure store_comp_prop_js_condition (
        p_db_column_type         in varchar2,
        p_db_column_element_type in varchar2,
        p_db_column_element      in varchar2,
        p_db_column_expression   in varchar2,
        p_help_text_type         in varchar2 default null )
    is
        procedure store_comp_props (
            p_is_ig in boolean )
        is
            c_postfix      constant varchar2(30) := case when p_is_ig then '_WHEN_IG' end;
            c_js_condition constant varchar2(30) := 'JS_CONDITION' || c_postfix;
        begin
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => c_js_condition,
                p_db_column                   => p_db_column_type,
                p_is_required                 => false,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'IG_REGION',
                p_depending_on_condition_type => case when p_is_ig then 'NOT_NULL' else 'NULL' end,
                p_help_text                   => p_help_text_type );
            --
            if p_is_ig then
                store_component_prop (
                    p_component_type_id           => l_component_type_id,
                    p_property_name               => 'JS_CONDITION_ELEMENT_TYPE',
                    p_db_column                   => p_db_column_element_type,
                    p_is_required                 => true,
                    p_is_common                   => true,
                    p_default_value               => 'COLUMN',
                    p_depending_on_comp_prop_name => 'JS_CONDITION_WHEN_IG',
                    p_depending_on_condition_type => 'IN_LIST',
                    p_depending_on_expression     => 'EQUALS,NOT_EQUALS,GREATER_THAN,GREATER_THAN_OR_EQUAL,LESS_THAN,LESS_THAN_OR_EQUAL,NULL,NOT_NULL,IN_LIST,NOT_IN_LIST' );
                --
                store_component_prop (
                    p_component_type_id           => l_component_type_id,
                    p_property_name               => 'JS_CONDITION_ITEM_WHEN_IG',
                    p_db_column                   => p_db_column_element,
                    p_is_required                 => true,
                    p_is_common                   => true,
                    p_depending_on_comp_prop_name => 'JS_CONDITION_ELEMENT_TYPE',
                    p_depending_on_condition_type => 'EQUALS',
                    p_depending_on_expression     => 'ITEM' );
                --
                store_component_prop (
                    p_component_type_id           => l_component_type_id,
                    p_property_name               => 'JS_CONDITION_COLUMN_WHEN_IG',
                    p_db_column                   => p_db_column_element,
                    p_is_required                 => true,
                    p_is_common                   => true,
                    p_parent_comp_prop_name       => 'IG_REGION',
                    p_reference_on_delete         => 'WEAK_CASCADE',
                    p_depending_on_comp_prop_name => 'JS_CONDITION_ELEMENT_TYPE',
                    p_depending_on_condition_type => 'EQUALS',
                    p_depending_on_expression     => 'COLUMN' );
            else
                store_component_prop (
                    p_component_type_id           => l_component_type_id,
                    p_property_name               => 'JS_CONDITION_ITEM' || c_postfix,
                    p_db_column                   => p_db_column_element,
                    p_is_required                 => true,
                    p_is_common                   => true,
                    p_depending_on_comp_prop_name => c_js_condition,
                    p_depending_on_condition_type => 'IN_LIST',
                    p_depending_on_expression     => 'EQUALS,NOT_EQUALS,GREATER_THAN,GREATER_THAN_OR_EQUAL,LESS_THAN,LESS_THAN_OR_EQUAL,NULL,NOT_NULL,IN_LIST,NOT_IN_LIST',
                    p_help_text                   => q'~<p>Enter the page item used in this condition. You can type in the name or pick from the list of available items.</p>~' );
            end if;
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'JS_COND_VALUE' || c_postfix,
                p_db_column                   => p_db_column_expression,
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => c_js_condition,
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'EQUALS,NOT_EQUALS,GREATER_THAN,GREATER_THAN_OR_EQUAL,LESS_THAN,LESS_THAN_OR_EQUAL' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'JS_COND_LIST' || c_postfix,
                p_db_column                   => p_db_column_expression,
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => c_js_condition,
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'IN_LIST,NOT_IN_LIST' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'JS_COND_JS_EXPRESSION' || c_postfix,
                p_db_column                   => p_db_column_expression,
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => c_js_condition,
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'JAVASCRIPT_EXPRESSION' );
        end store_comp_props;
    begin
        -- for page items
        store_comp_props (
            p_is_ig => false );
        -- for IG columns
        store_comp_props (
            p_is_ig => true );
    end store_comp_prop_js_condition;
    --
    --
    procedure store_comp_prop_remote_server (
        p_server_type in varchar2 )
    is
        c_server_type_desc constant varchar2( 255 ) := case p_server_type
                                                       when 'REMOTE_SQL'     then 'REST Enabled SQL Service'
                                                       when 'AUTHENTICATION' then 'Authentication Server'
                                                       when 'PRINT_SERVER'   then 'Print Server'
                                                       when 'WEB_SOURCE'     then 'REST Data Source Server'
                                                       when 'GENERATIVE_AI'  then 'Generative AI Service'
                                                       end;
        function get_help (
            p_help_text in varchar2 )
            return varchar2
        is
        begin
            return replace( p_help_text, '%type%', c_server_type_desc );
        end get_help;
    begin
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'NAME',
            p_db_column             => null,
            p_is_required           => true,
            p_is_common             => true,
            p_check_uniqueness      => 'WORKSPACE',
            p_supports_substitution => false,
            p_default_value         => '#PLEASE_CHANGE#',
            p_help_text             => get_help( q'~Enter a descriptive name for this %type%.~' ));
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'REMOTE_SERVER_TYPE',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => p_server_type );
        --
        if p_server_type = 'PRINT_SERVER' then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'PRINT_SERVER_TYPE',
                p_db_column         => null,
                p_is_required       => true,
                p_is_common         => true,
                p_default_value     => 'BIP' );
            end if;
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'ENDPOINT_URL',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_help_text         => case p_server_type
                                   when 'REMOTE_SQL' then q'~Enter the endpoint URL for this REST Enabled SQL Service. Include the ORDS context root and schema URL prefix, e.g. <em>https://{host}:{port}/ords/{schema}</em>. Do not append /_/sql; Application Express will take care of that.~'
                                   else get_help( q'~Enter the endpoint URL for this %type%.~' )
                                   end
            );
        --
        if p_server_type = 'REMOTE_SQL' then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'CREDENTIALS',
                p_db_column         => null,
                p_is_required       => true,
                p_is_common         => true );
            --
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'DB_SESSION_INIT',
                p_db_column         => 'ORDS_INIT_CODE',
                p_is_required       => false,
                p_is_common         => false,
                p_help_text         => q'~Enter code to be executed immediately after connecting to the REST Enabled SQL Service and before the component SQL is being executed.~' );
            --
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'DB_SESSION_CLEANUP',
                p_db_column         => 'ORDS_CLEANUP_CODE',
                p_is_required       => false,
                p_is_common         => false,
                p_help_text         => q'~Enter code to be executed immediately after the component SQL is being executed.~' );
        end if;
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'STATIC_ID',
            p_db_column             => null,
            p_is_required           => true,
            p_is_common             => true,
            p_check_uniqueness      => 'WORKSPACE',
            p_supports_substitution => false,
            p_help_text             => get_help( q'~Use the Static ID to reference the %type% in API Calls. Static IDs are also used to identify an existing %type% when the application is being exported and imported to another workspace.~' ));
        --
        if p_server_type in ( 'REMOTE_SQL', 'AUTHENTICATION' ) then
            store_component_prop (
                p_component_type_id  => l_component_type_id,
                p_property_name      => 'RS_PLSQL_CODE',
                p_db_column          => null,
                p_is_required        => false,
                p_is_common          => false,
                p_help_text          => q'~A procedure which configures the Endpoint URL at runtime can be defined here.</p>~',
                p_examples           => q'~<p>Some examples:</p>
<pre><code>
procedure my_server_config(
    p_info   in  apex_plugin.t_remote_server_info,
    p_config out apex_plugin.t_remote_server_config )
is
begin
    if p_info.application_id = 100
    then
      p_config.base_url := 'https://#cust#.example.com';
      p_config.substitutions := apex_t_varchar2();
      apex_string.plist_put( p_config.substitutions, 'cust', v('P3_CUSTOMER') );
    else
      p_config.base_url := 'https://test.example.com';
    end if;
end;

procedure my_server_config(
    p_info   in  apex_plugin.t_remote_server_info,
    p_config out apex_plugin.t_remote_server_config )
is
begin
  p_config.base_url := sys.owa_util.get_cgi_env('HTTP_HOST');
end;

procedure my_server_config(
    p_info   in  apex_plugin.t_remote_server_info,
    p_config out apex_plugin.t_remote_server_config )
is
begin
    -- expect endpoint url to be #host#/my_service
    p_config.substitutions := apex_t_varchar2();
    apex_string.plist_put( p_config.substitutions, 'host', sys.owa_util.get_cgi_env('HTTP_HOST') );
end;
</code></pre>~' );
            --
            store_component_prop (
                p_component_type_id  => l_component_type_id,
                p_property_name      => 'RS_CONFIGURATION_PROCEDURE',
                p_db_column          => null,
                p_is_required        => false,
                p_is_common          => false,
                p_help_text          => q'~<p>Enter the name of a procedure which configures the Endpoint URL at runtime.
This can be a stored procedure or a procedure defined in item <em>PL/SQL Code</em>.
The code below is for an application that implements multi-tenancy and supports
different variations of <em>Endpoint URL</em> for the tenants.
It changes the domain name in the URL, depending on the customer (Example URLs:
https://cust-01.example.com, https://cust-02.example.com):
</p>~',
                p_examples           => q'~<pre><code>
procedure my_server_config(
    p_info   in  apex_plugin.t_remote_server_info,
    p_config out apex_plugin.t_remote_server_config )
is
begin
    if p_info.application_id = 100
    then
      p_config.base_url := 'https://#cust#.example.com';
      p_config.substitutions := apex_t_varchar2();
      apex_string.plist_put( p_config.substitutions, 'cust', v('P3_CUSTOMER') );
    else
      p_config.base_url := 'https://test.example.com';
    end if;
end;
</code></pre><p>
The procedure can change 2 attributes of the in/out parameter <code>p_config</code>,
both of them are optional:
<ul>
    <li><code>base_url</code>:
    Changes the <em>Endpoint URL</em>.
    </li>
    <li><code>substitutions</code>:
    Assign name/value pairs using <code>apex_t_varchar2</code>.
    &PRODUCT_NAME. substitutes each <code>#NAME#</code> in the <em>base url</em> or <em>Endpoint URL</em>.
    </li>
</ul>
</p>~' );
        end if;
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PROMPT_ON_INSTALL',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'N',
            p_help_text         => get_help( q'~Choose whether prompts for this %type% should be displayed when the application is being imported on another Application Express instance.~' ));
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'HTTPS_HOST_NAME',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => false,
            p_help_text         => q'~The host name to be matched against the common name (CN) of the remote server's certificate for an HTTPS request. It can also be a domain name like *.example.com. If NULL, the host name in the given URL will be used.~' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'SERVER_TIMEOUT',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => false,
            p_default_value     => '300' );
        --
        if p_server_type = 'REMOTE_SQL' then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'SERVER_TIME_ZONE',
                p_db_column         => null,
                p_is_required       => false,
                p_is_common         => false );
            --
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'REMOTE_SQL_DATABASE_TYPE',
                p_db_column         => null,
                p_is_required       => false,
                p_is_read_only      => true,
                p_is_common         => false );
        end if;
        --
        --
        if p_server_type = 'GENERATIVE_AI' then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'AI_PROVIDER_TYPE',
                p_db_column         => null,
                p_is_required       => true,
                p_is_common         => false );
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'AI_IS_BUILDER_SERVICE',
                p_db_column         => null,
                p_is_required       => true,
                p_default_value     => 'N',
            p_is_common         => false );
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'AI_MODEL_NAME',
                p_db_column         => null,
                p_is_required       => false,
                p_is_common         => false );
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'AI_HTTP_HEADERS',
                p_db_column         => null,
                p_is_required       => false,
                p_is_common         => false );
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'AI_ATTRIBUTES',
                p_db_column         => null,
                p_is_required       => false,
                p_is_common         => false );
        end if;
        --
        if p_server_type = 'VECTOR' then
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'EMBEDDING_TYPE',
                p_db_column                    => 'EMBEDDING_TYPE',
                p_is_required                  => true,
                p_is_common                    => true );
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'EMB_LOCAL_MODEL_OWNER',
                p_db_column                    => 'EMB_LOCAL_MODEL_OWNER',
                p_is_required                  => true,
                p_is_common                    => true,
                p_depending_on_comp_prop_name  => 'EMBEDDING_TYPE',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'ONNX' );
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'EMB_LOCAL_MODEL_NAME',
                p_db_column                    => 'EMB_LOCAL_MODEL_NAME',
                p_is_required                  => true,
                p_is_common                    => true,
                p_depending_on_comp_prop_name  => 'EMBEDDING_TYPE',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'ONNX' );
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'EMB_FUNCTION',
                p_db_column                    => 'EMB_FUNCTION',
                p_is_required                  => true,
                p_is_common                    => true,
                p_depending_on_comp_prop_name  => 'EMBEDDING_TYPE',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'PLSQL' );

            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'AI_PROVIDER_TYPE',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => false,
                p_depending_on_comp_prop_name  => 'EMBEDDING_TYPE',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'GENAI_PROVIDER' );
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'AI_IS_BUILDER_SERVICE',
                p_db_column                    => null,
                p_is_required                  => true,
                p_default_value                => 'N',
            p_is_common                        => false,
                p_depending_on_comp_prop_name  => 'EMBEDDING_TYPE',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'GENAI_PROVIDER' );
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'AI_MODEL_NAME',
                p_db_column         => null,
                p_is_required       => false,
                p_is_common         => false,
                p_depending_on_comp_prop_name  => 'EMBEDDING_TYPE',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'GENAI_PROVIDER' );
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'AI_HTTP_HEADERS',
                p_db_column         => null,
                p_is_required       => false,
                p_is_common         => false,
                p_depending_on_comp_prop_name  => 'EMBEDDING_TYPE',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'GENAI_PROVIDER' );
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'AI_ATTRIBUTES',
                p_db_column         => null,
                p_is_required       => false,
                p_is_common         => false,
                p_depending_on_comp_prop_name  => 'EMBEDDING_TYPE',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'GENAI_PROVIDER' );
        end if;
        --
        store_standard_attr_comp_prop (
            p_component_type_id => l_component_type_id,
            p_has_comments      => true,
            p_comment_db_column => 'SERVER_COMMENT' );
        --
    end store_comp_prop_remote_server;
    --
    --
    procedure store_comp_prop_static_file
    is
    begin
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'FILE_NAME',
            p_db_column             => null,
            p_is_required           => true,
            p_is_common             => true,
            p_check_uniqueness      => case l_component_type_id
                                         when c_comp_type_workspace_file   then 'WORKSPACE'
                                         when c_comp_type_application_file then 'APPLICATION'
                                         when c_comp_type_plugin_file      then 'PLUGIN'
                                         when c_comp_type_theme_file       then 'THEME'
                                       end,
            p_supports_substitution => false,
            p_help_text             => case l_component_type_id
                                         when c_comp_type_workspace_file   then null -- use property level help
                                         when c_comp_type_application_file then
                                             q'~This is the name of the file in the application file repository. Use <strong><code>&#35;APP_IMAGES#filename</code></strong> in your application to reference a file.~'
                                         else
                                             q'~The name of the file.~'
                                       end
            );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'MIME_TYPE',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'FILE_CHARACTER_SET',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => true ); -- $$$ depending on upper(:P315_MIME_TYPE) like 'TEXT/%' or upper(:P315_MIME_TYPE) like '%JAVASCRIPT%'
        --
        store_audit_info_comp_prop (
            p_component_type_id => l_component_type_id );
    end store_comp_prop_static_file;
    --
    --
    procedure store_comp_prop_location (
        p_location_property_name      in varchar2,
        p_query_type_property_name    in varchar2,
        p_db_column_query_type        in varchar2,
        p_db_column_source_lang       in varchar2,
        p_db_column_source            in varchar2,
        p_has_items_to_submit         in boolean,
        p_db_column_items_to_submit   in varchar2,
        p_has_include_rowid           in boolean,
        p_has_order_by                in boolean,
        p_has_external_order_by       in boolean default null,
        p_has_order_by_item           in boolean,
        p_has_web_src_has_local_table in boolean,
        p_has_remote_caching          in boolean,
        p_examples_sql_query          in varchar2,
        p_help_text_items_to_submit   in varchar2,
        p_is_region                   in boolean  default false,
        p_depending_on_comp_prop_name in varchar2 default null,
        p_depending_on_condition_type in varchar2 default null,
        p_depending_on_expression     in varchar2 default null )
    is
        c_is_automation constant boolean := ( l_component_type_id = c_comp_type_automation );
    begin
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_location_property_name,
            p_db_column                   => null,
            p_is_required                 => case when p_is_region then null else true end, -- defined by plug-in standard attributes
            p_is_common                   => false,
            p_default_value               => 'LOCAL',
            p_plugin_std_attributes       => case when p_is_region then 'SOURCE_LOCATION' end,
            p_null_text                   => case when p_is_region then 'None' end,
            p_null_help_text              => case when p_is_region then 'No data source.' end,
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression );
        --
        if c_is_automation then
            -- Initiated = Function Body Returning Boolean
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PLSQL_PROCESS_LOCATION',
                p_db_column                   => 'LOCATION',
                p_is_required                 => true,
                p_is_common                   => false,
                p_default_value               => 'LOCAL',
                p_depending_on_comp_prop_name => 'ACTIONS_INITIATED_ON',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'FUNC_BODY_RETURNING_BOOLEAN' );
            --
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'SOURCE_REMOTE_DATABASE', -- todo $$$ should be SOURCE_REMOTE_ORACLE_DATABASE, but only for pl/sql. Has to be checked again.
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => true,
                p_depending_on_comp_prop_name  => p_location_property_name,
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_has_to_exist    => false,
                p_depending_on_expression      => 'REMOTE',
                p_depending_on_comp_prop_name2 => 'PLSQL_PROCESS_LOCATION',
                p_depending_on_condition_type2 => 'EQUALS',
                p_depending_on_has_to_exist2   => false,
                p_depending_on_expression2     => 'REMOTE' );
            --
            store_func_body_comp_props (
                p_component_type_id           => l_component_type_id,
                p_name_prefix                 => 'AUTOM_',
                p_return_type                 => 'BOOLEAN',
                p_db_column_lang              => 'FUNCTION_BODY_LANGUAGE',
                p_db_column_func_body         => 'QUERY_SOURCE',
                p_type_property               => 'ACTIONS_INITIATED_ON',
                p_type_value                  => 'FUNC_BODY_RETURNING_BOOLEAN' );
            --
        else
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'SOURCE_REMOTE_DATABASE',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => p_location_property_name,
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'REMOTE' );
        end if;
        --
        if p_has_include_rowid then
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'SOURCE_REMOTE_DATABASE_TYPE',
                p_db_column                    => null,
                p_is_required                  => false,
                p_is_common                    => false,
                p_depending_on_comp_prop_name  => p_location_property_name,
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'REMOTE',
                p_depending_on_comp_prop_name2 => 'SOURCE_REMOTE_DATABASE',
                p_depending_on_condition_type2 => 'NOT_NULL' );
        end if;
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => p_query_type_property_name,
            p_db_column                    => p_db_column_query_type,
            p_is_required                  => true,
            p_is_common                    => true,
            p_default_value                => 'TABLE',
            p_depending_on_comp_prop_name  => p_location_property_name,
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'LOCAL,REMOTE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SOURCE_QUERY_OWNER',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_query_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'TABLE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SOURCE_QUERY_TABLE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_query_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'TABLE',
            p_parent_comp_prop_name       => 'SOURCE_QUERY_OWNER' );
        --
        if p_has_include_rowid then
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'INCLUDE_ROWID_COLUMN',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => false,
                p_default_value                => 'N',
                p_depending_on_comp_prop_name  => p_query_type_property_name,
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'TABLE',
                p_depending_on_comp_prop_name2 => 'SOURCE_REMOTE_DATABASE_TYPE',
                p_depending_on_condition_type2 => 'IN_LIST',
                p_depending_on_expression2     => 'ORACLE,$NULL$',
                p_depending_on_has_to_exist2   => false );
        end if;
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SOURCE_QUERY_WHERE',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_query_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'TABLE',
            p_parent_comp_prop_name       => 'SOURCE_QUERY_TABLE' );
        --
        -- Property Graph properties
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SOURCE_GRAPH_OWNER',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_query_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'GRAPH' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SOURCE_GRAPH_NAME',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_query_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'GRAPH',
            p_parent_comp_prop_name       => 'SOURCE_GRAPH_OWNER' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SOURCE_GRAPH_MATCH_CLAUSE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => p_query_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'GRAPH',
            p_parent_comp_prop_name       => 'SOURCE_GRAPH_NAME' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SOURCE_GRAPH_COLUMNS_CLAUSE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => p_query_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'GRAPH',
            p_parent_comp_prop_name       => 'SOURCE_GRAPH_MATCH_CLAUSE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SOURCE_GRAPH_WHERE_CLAUSE',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => p_query_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'GRAPH',
            p_parent_comp_prop_name       => 'SOURCE_GRAPH_MATCH_CLAUSE' );
        --
        if p_has_order_by then
            if p_is_region then
                store_component_prop (
                    p_component_type_id            => l_component_type_id,
                    p_property_name                => 'SOURCE_QUERY_STATIC_ORDER_BY',
                    p_db_column                    => null,
                    p_is_required                  => false,
                    p_is_common                    => false,
                    p_depending_on_comp_prop_name  => p_query_type_property_name,
                    p_depending_on_condition_type  => 'EQUALS',
                    p_depending_on_expression      => 'TABLE',
                    p_depending_on_comp_prop_name2 => 'REGION_TYPE',
                    p_depending_on_condition_type2 => 'IN_LIST',
                    p_depending_on_expression2     => 'NATIVE_IG,NATIVE_IR,NATIVE_MAP_REGION,NATIVE_FORM',
                    p_parent_comp_prop_name        => 'SOURCE_QUERY_TABLE' );
                --
                store_component_prop (
                    p_component_type_id            => l_component_type_id,
                    p_property_name                => 'SOURCE_GRAPH_STATIC_ORDER_BY',
                    p_db_column                    => null,
                    p_is_required                  => false,
                    p_is_common                    => false,
                    p_depending_on_comp_prop_name  => p_query_type_property_name,
                    p_depending_on_condition_type  => 'EQUALS',
                    p_depending_on_expression      => 'GRAPH',
                    p_depending_on_comp_prop_name2 => 'REGION_TYPE',
                    p_depending_on_condition_type2 => 'IN_LIST',
                    p_depending_on_expression2     => 'NATIVE_IG,NATIVE_IR,NATIVE_MAP_REGION,NATIVE_FORM',
                    p_parent_comp_prop_name        => 'SOURCE_GRAPH_COLUMNS_CLAUSE' );
                --
            elsif not p_has_order_by_item then
                store_component_prop (
                    p_component_type_id            => l_component_type_id,
                    p_property_name                => 'SOURCE_QUERY_STATIC_ORDER_BY',
                    p_db_column                    => null,
                    p_is_required                  => false,
                    p_is_common                    => false,
                    p_depending_on_comp_prop_name  => p_query_type_property_name,
                    p_depending_on_condition_type  => 'EQUALS',
                    p_depending_on_expression      => 'TABLE',
                    p_parent_comp_prop_name        => 'SOURCE_QUERY_TABLE' );
                --
                store_component_prop (
                    p_component_type_id            => l_component_type_id,
                    p_property_name                => 'SOURCE_GRAPH_STATIC_ORDER_BY',
                    p_db_column                    => null,
                    p_is_required                  => false,
                    p_is_common                    => false,
                    p_depending_on_comp_prop_name  => p_query_type_property_name,
                    p_depending_on_condition_type  => 'EQUALS',
                    p_depending_on_expression      => 'GRAPH',
                    p_parent_comp_prop_name        => 'SOURCE_GRAPH_COLUMNS_CLAUSE' );
            end if;
        end if;
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SOURCE_SQL_QUERY',
            p_db_column                   => p_db_column_source,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_query_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL',
            p_examples                    => p_examples_sql_query );
        --
        if p_query_type_property_name = 'LOV_QUERY_TYPE' then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'LOV_LEGACY_SQL_QUERY',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => p_query_type_property_name,
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'LEGACY_SQL' );
        end if;
        --
        store_func_body_comp_props (
            p_component_type_id   => l_component_type_id,
            p_name_prefix         => 'SOURCE_QUERY_',
            p_return_type         => 'SQL',
            p_db_column_lang      => p_db_column_source_lang,
            p_db_column_func_body => p_db_column_source,
            p_type_property       => p_query_type_property_name,
            p_type_value          => 'FUNC_BODY_RETURNING_SQL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SOURCE_WEB_SRC_QUERY',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_location_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'WEB_SOURCE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DUALITY_VIEW_SRC_ID',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_location_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'DUALITY_VIEW' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'JSON_COLLECTION_SRC_ID',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_location_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'JSON_COLLECTION' );
        --
        if p_is_region then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'SOURCE_LIST',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'REGION_TYPE',
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'NATIVE_LIST' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'SOURCE_BREADCRUMB',
                p_db_column                   => 'MENU_ID',
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'REGION_TYPE',
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'NATIVE_BREADCRUMB' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'SOURCE_FILTERED_REGION',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => true,
                p_reference_on_delete         => 'WEAK_CASCADE',
                p_depending_on_comp_prop_name => 'REGION_TYPE',
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'NATIVE_FACETED_SEARCH,NATIVE_SMART_FILTERS' );
        end if;
        --
        if p_is_region then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'SOURCE_PAGE_ITEMS_TO_SUBMIT',
                p_db_column                   => p_db_column_items_to_submit,
                p_is_required                 => false,
                p_is_common                   => true,
        /* $$$ has to be investigated, doesn't work in wwv_flow_property_dev.clear_property_values the reason might be that SOURCE_LOCATION has a higher property id and
               that's why the order in which the properties are processed causes the issue

                p_depending_on_comp_prop_name => p_location_property_name,
                p_depending_on_has_to_exist   => false,
                p_depending_on_condition_type => 'NOT_NULL',
        */
                p_plugin_std_attributes       => case when p_is_region then 'AJAX_ITEMS_TO_SUBMIT' end,
                p_help_text                   => p_help_text_items_to_submit );
        elsif p_has_items_to_submit then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'SOURCE_PAGE_ITEMS_TO_SUBMIT',
                p_db_column                   => p_db_column_items_to_submit,
                p_is_required                 => false,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => p_location_property_name,
                p_depending_on_condition_type => 'NOT_EQUALS',
                p_depending_on_expression     => 'REGION_SOURCE',
                p_help_text                   => p_help_text_items_to_submit );
        end if;
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'OPTIMIZER_HINT',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => p_location_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'LOCAL,REMOTE,WEB_SOURCE,DUALITY_VIEW,JSON_COLLECTION' );
        --
        if p_is_region then
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'HAS_GENERIC_COLUMNS',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => false,
                p_default_value                => 'DERIVED_REPORT_COLUMNS',
                p_depending_on_comp_prop_name  => 'REGION_TYPE',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'NATIVE_SQL_REPORT',
                p_depending_on_comp_prop_name2 => p_query_type_property_name,
                p_depending_on_condition_type2 => 'EQUALS',
                p_depending_on_expression2     => 'FUNC_BODY_RETURNING_SQL' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'GENERIC_COLUMN_COUNT',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => 'HAS_GENERIC_COLUMNS',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'GENERIC_REPORT_COLUMNS' );
        end if;
        --
        if p_has_order_by_item then
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'SOURCE_QUERY_ORDER_BY_TYPE',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => true,
                p_null_text                   => 'None',
                p_plugin_std_attributes       => 'ORDER_BY',
                p_depending_on_comp_prop_name => p_query_type_property_name,
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'TABLE,GRAPH,SQL,FUNC_BODY_RETURNING_SQL' );
            --
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'SOURCE_QUERY_ORDER_BY',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => false,
                p_depending_on_comp_prop_name  => 'SOURCE_QUERY_ORDER_BY_TYPE',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'STATIC',
                --
                p_depending_on_comp_prop_name2 => p_query_type_property_name,
                p_depending_on_condition_type2 => 'IN_LIST',
                p_depending_on_expression2     => 'TABLE,SQL,FUNC_BODY_RETURNING_SQL' );
            --
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'SOURCE_QUERY_ORDER_BY_ITEM',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => false,
                p_depending_on_comp_prop_name  => 'SOURCE_QUERY_ORDER_BY_TYPE',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'ITEM',
                --
                p_depending_on_comp_prop_name2 => p_query_type_property_name,
                p_depending_on_condition_type2 => 'IN_LIST',
                p_depending_on_expression2     => 'TABLE,SQL,FUNC_BODY_RETURNING_SQL' );
            --
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'SOURCE_GRAPH_ORDER_BY',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => false,
                p_depending_on_comp_prop_name  => 'SOURCE_QUERY_ORDER_BY_TYPE',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'STATIC',
                --
                p_depending_on_comp_prop_name2 => p_query_type_property_name,
                p_depending_on_condition_type2 => 'EQUALS',
                p_depending_on_expression2     => 'GRAPH',
                --
                p_parent_comp_prop_name        => 'SOURCE_GRAPH_COLUMNS_CLAUSE' );
            --
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'SOURCE_GRAPH_ORDER_BY_ITEM',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => false,
                p_depending_on_comp_prop_name  => 'SOURCE_QUERY_ORDER_BY_TYPE',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'ITEM',
                --
                p_depending_on_comp_prop_name2 => p_query_type_property_name,
                p_depending_on_condition_type2 => 'EQUALS',
                p_depending_on_expression2     => 'GRAPH',
                --
                p_parent_comp_prop_name        => 'SOURCE_GRAPH_COLUMNS_CLAUSE' );
        end if;
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'WEB_SRC_HAS_ARRAY_COLUMNS',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Y',
            p_depending_on_comp_prop_name => 'SOURCE_WEB_SRC_QUERY',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'SOURCE_WEB_SRC_ARRAY_COL',
            p_db_column                    => null,
            p_is_required                  => false,
            p_null_text                    => 'None',
            p_is_common                    => false,
            p_parent_comp_prop_name        => 'SOURCE_WEB_SRC_QUERY',
            p_depending_on_comp_prop_name  => 'SOURCE_WEB_SRC_QUERY',
            p_depending_on_condition_type  => 'NOT_NULL',
            p_depending_on_comp_prop_name2 => 'WEB_SRC_HAS_ARRAY_COLUMNS',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'Y' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DOC_SRC_HAS_ARRAY_COLUMNS',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Y',
            p_depending_on_comp_prop_name => p_location_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'DUALITY_VIEW,JSON_COLLECTION' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'DUALITY_VIEW_ARRAY_COL_ID',
            p_db_column                    => null,
            p_is_required                  => false,
            p_null_text                    => 'None',
            p_is_common                    => false,
            p_parent_comp_prop_name        => 'DUALITY_VIEW_SRC_ID',
            p_depending_on_comp_prop_name  => 'DUALITY_VIEW_SRC_ID',
            p_depending_on_condition_type  => 'NOT_NULL',
            p_depending_on_comp_prop_name2 => 'DOC_SRC_HAS_ARRAY_COLUMNS',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'Y' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'JSON_COLLECTION_ARRAY_COL_ID',
            p_db_column                    => null,
            p_is_required                  => false,
            p_null_text                    => 'None',
            p_is_common                    => false,
            p_parent_comp_prop_name        => 'JSON_COLLECTION_SRC_ID',
            p_depending_on_comp_prop_name  => 'JSON_COLLECTION_SRC_ID',
            p_depending_on_condition_type  => 'NOT_NULL',
            p_depending_on_comp_prop_name2 => 'DOC_SRC_HAS_ARRAY_COLUMNS',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'Y' );
        --
        if p_has_web_src_has_local_table then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'WEB_SRC_HAS_LOCAL_TABLE',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_default_value               => 'N',
                p_depending_on_comp_prop_name => 'SOURCE_WEB_SRC_QUERY',
                p_depending_on_condition_type => 'NOT_NULL' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'WEB_SRC_USE_LOCAL_TABLE',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_default_value               => 'N',
                p_depending_on_comp_prop_name => 'WEB_SRC_HAS_LOCAL_TABLE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'Y' );
        end if;
        --
        if p_has_web_src_has_local_table then
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'USE_EXTERNAL_EXPR',
                p_db_column                    => null,
                p_is_required                  => false,
                p_is_common                    => false,
                p_default_value                => 'N',
                p_depending_on_comp_prop_name  => 'SOURCE_WEB_SRC_QUERY',
                p_depending_on_condition_type  => 'NOT_NULL',
                --
                p_depending_on_comp_prop_name2 => 'WEB_SRC_USE_LOCAL_TABLE',
                p_depending_on_has_to_exist2   => false,
                p_depending_on_condition_type2 => 'IN_LIST',
                p_depending_on_expression2     => 'N,$NULL$' );
        else
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'USE_EXTERNAL_EXPR',
                p_db_column                    => null,
                p_is_required                  => false,
                p_is_common                    => false,
                p_default_value                => 'N',
                p_depending_on_comp_prop_name  => 'SOURCE_WEB_SRC_QUERY',
                p_depending_on_condition_type  => 'NOT_NULL' );
        end if;
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'EXTERNAL_FILTER_EXPR',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => false,
            p_default_value                => null,
            p_depending_on_comp_prop_name  => 'USE_EXTERNAL_EXPR',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'Y' );
        --
        if p_has_order_by_item then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'EXTERNAL_ORDER_BY_TYPE',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => true,
                p_null_text                   => 'None',
                p_plugin_std_attributes       => 'ORDER_BY',
                p_depending_on_comp_prop_name => 'USE_EXTERNAL_EXPR',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'Y' );
            --
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'EXTERNAL_ORDER_BY_EXPR',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => false,
                p_default_value                => null,
                p_depending_on_comp_prop_name  => 'EXTERNAL_ORDER_BY_TYPE',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'STATIC' );
            --
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'EXTERNAL_ORDER_BY_ITEM',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => false,
                p_default_value                => null,
                p_depending_on_comp_prop_name  => 'EXTERNAL_ORDER_BY_TYPE',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'ITEM' );
            --
            if p_is_region then
                store_component_prop (
                    p_component_type_id            => l_component_type_id,
                    p_property_name                => 'EXTERNAL_STATIC_ORDER_BY_EXPR',
                    p_db_column                    => null,
                    p_is_required                  => false,
                    p_is_common                    => false,
                    p_depending_on_comp_prop_name  => 'USE_EXTERNAL_EXPR',
                    p_depending_on_condition_type  => 'EQUALS',
                    p_depending_on_expression      => 'Y',
                    p_depending_on_comp_prop_name2 => 'REGION_TYPE',
                    p_depending_on_condition_type2 => 'IN_LIST',
                    p_depending_on_expression2     => 'NATIVE_IG,NATIVE_IR,NATIVE_MAP_REGION,NATIVE_FORM' );
            end if;
        elsif p_has_order_by or p_has_external_order_by then
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'EXTERNAL_STATIC_ORDER_BY_EXPR',
                p_db_column                    => null,
                p_is_required                  => false,
                p_is_common                    => false,
                p_depending_on_comp_prop_name  => 'USE_EXTERNAL_EXPR',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'Y' );
        end if;
        --
        --
        store_src_comp_props_objsrc(
            p_prefix                    => null,
            p_source_prop_name          => 'SOURCE_WEB_SRC_QUERY',
            p_location_property_name    => p_location_property_name,
            p_has_order_by              => p_has_order_by,
            p_has_order_by_item         => p_has_order_by_item,
            p_db_column_source          => p_db_column_source,
            p_db_column_source_lang     => p_db_column_source_lang );

        store_src_comp_props_objsrc(
            p_prefix                    => 'DUALITYVIEW_',
            p_source_prop_name          => 'DUALITY_VIEW_SRC_ID',
            p_location_property_name    => p_location_property_name,
            p_has_order_by              => p_has_order_by,
            p_has_order_by_item         => p_has_order_by_item,
            p_db_column_source          => p_db_column_source,
            p_db_column_source_lang     => p_db_column_source_lang );

        store_src_comp_props_objsrc(
            p_prefix                    => 'JSONCOLLECTION_',
            p_source_prop_name          => 'JSON_COLLECTION_SRC_ID',
            p_location_property_name    => p_location_property_name,
            p_has_order_by              => p_has_order_by,
            p_has_order_by_item         => p_has_order_by_item,
            p_db_column_source          => p_db_column_source,
            p_db_column_source_lang     => p_db_column_source_lang );

        --
        if p_has_remote_caching then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'REMOTE_CACHING',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_null_text                   => 'Disabled',
                p_null_help_text              => q'~Result is not cached. Data is fetched from the remote database for each request.~',
                p_depending_on_comp_prop_name => p_location_property_name,
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'REMOTE' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'REMOTE_INVALIDATE_WHEN',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => 'REMOTE_CACHING',
                p_depending_on_condition_type => 'NOT_NULL' );
        end if;
        --
    end store_comp_prop_location;
    --
    --
    procedure store_i18n_lang_prop_lov_value
    is
    begin
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Afrikaans (af)',
            p_return_value  => 'af' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Albanian',
            p_return_value  => 'sq' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arabic (Algeria) (ar-dz)',
            p_return_value  => 'ar-dz' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arabic (Bahrain) (ar-bh)',
            p_return_value  => 'ar-bh' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arabic (Egypt) (ar-eg)',
            p_return_value  => 'ar-eg' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arabic (Iraq) (ar-iq)',
            p_return_value  => 'ar-iq' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arabic (Jordan) (ar-jo)',
            p_return_value  => 'ar-jo' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arabic (Kuwait) (ar-kw)',
            p_return_value  => 'ar-kw' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arabic (Lebanon) (ar-lb)',
            p_return_value  => 'ar-lb' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arabic (Libya) (ar-ly)',
            p_return_value  => 'ar-ly' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arabic (Morocco) (ar-ma)',
            p_return_value  => 'ar-ma' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arabic (Oman) (ar-om)',
            p_return_value  => 'ar-om' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arabic (Qatar) (ar-qa)',
            p_return_value  => 'ar-qa' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arabic (Saudi Arabia) (ar-sa)',
            p_return_value  => 'ar-sa' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arabic (Syria) (ar-sy)',
            p_return_value  => 'ar-sy' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arabic (Tunisia) (ar-tn)',
            p_return_value  => 'ar-tn' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arabic (U.A.E.) (ar-ae)',
            p_return_value  => 'ar-ae' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arabic (Yemen) (ar-ye)',
            p_return_value  => 'ar-ye' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arabic (ar)',
            p_return_value  => 'ar' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Armenian',
            p_return_value  => 'hy' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Assamese (as)',
            p_return_value  => 'as' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Azerbaijani (az)',
            p_return_value  => 'az' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Basque (eu)',
            p_return_value  => 'eu' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Belarusian (be)',
            p_return_value  => 'be' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Bengali (bn)',
            p_return_value  => 'bn' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Bulgarian (bg)',
            p_return_value  => 'bg' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Khmer (Cambodia) (km)',
            p_return_value  => 'km' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Catalan (ca)',
            p_return_value  => 'ca' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Chinese (China) (zh-cn)',
            p_return_value  => 'zh-cn' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Chinese (Hong Kong SAR) (zh-hk)',
            p_return_value  => 'zh-hk' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Chinese (Macau SAR) (zh-mo)',
            p_return_value  => 'zh-mo' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Chinese (Singapore) (zh-sg)',
            p_return_value  => 'zh-sg' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Chinese (Taiwan) (zh-tw)',
            p_return_value  => 'zh-tw' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Chinese (zh)',
            p_return_value  => 'zh' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Croatian (hr)',
            p_return_value  => 'hr' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Czech (cs)',
            p_return_value  => 'cs' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Danish (da)',
            p_return_value  => 'da' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Dutch (Belgium) (nl-be)',
            p_return_value  => 'nl-be' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Dutch (Netherlands) (nl)',
            p_return_value  => 'nl' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'English (Australia) (en-au)',
            p_return_value  => 'en-au' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'English (Belize) (en-bz)',
            p_return_value  => 'en-bz' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'English (Canada) (en-ca)',
            p_return_value  => 'en-ca' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'English (Ireland) (en-ie)',
            p_return_value  => 'en-ie' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'English (Jamaica) (en-jm)',
            p_return_value  => 'en-jm' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'English (New Zealand) (en-nz)',
            p_return_value  => 'en-nz' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'English (Philippines) (en-ph)',
            p_return_value  => 'en-ph' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'English (South Africa) (en-za)',
            p_return_value  => 'en-za' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'English (Trinidad) (en-tt)',
            p_return_value  => 'en-tt' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'English (United Kingdom) (en-gb)',
            p_return_value  => 'en-gb' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'English (United States) (en-us)',
            p_return_value  => 'en-us' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'English (Zimbabwe) (en-zw)',
            p_return_value  => 'en-zw' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'English (en)',
            p_return_value  => 'en' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Estonian (et)',
            p_return_value  => 'et' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'FYRO Macedonian (mk)',
            p_return_value  => 'mk' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Faeroese (fo)',
            p_return_value  => 'fo' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Farsi (fa)',
            p_return_value  => 'fa' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Finnish (fi)',
            p_return_value  => 'fi' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'French (Belgium) (fr-be)',
            p_return_value  => 'fr-be' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'French (Canada) (fr-ca)',
            p_return_value  => 'fr-ca' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'French (France) (fr)',
            p_return_value  => 'fr' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'French (Luxembourg) (fr-lu)',
            p_return_value  => 'fr-lu' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'French (Monaco) (fr-mc)',
            p_return_value  => 'fr-mc' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'French (Switzerland) (fr-ch)',
            p_return_value  => 'fr-ch' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Gaelic (gd)',
            p_return_value  => 'gd' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Galician (gl)',
            p_return_value  => 'gl' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'German (Austria) (de-at)',
            p_return_value  => 'de-at' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'German (Germany) (de)',
            p_return_value  => 'de' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'German (Liechtenstein) (de-li)',
            p_return_value  => 'de-li' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'German (Luxemgourg) (de-lu)',
            p_return_value  => 'de-lu' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'German (Switzerland) (de-ch)',
            p_return_value  => 'de-ch' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Greek (el)',
            p_return_value  => 'el' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Gujarati (gu)',
            p_return_value  => 'gu' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Hebrew (he)',
            p_return_value  => 'he' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Hindi (hi)',
            p_return_value  => 'hi' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Hungarian (hu)',
            p_return_value  => 'hu' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Icelandic (is)',
            p_return_value  => 'is' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Indonesian (id)',
            p_return_value  => 'id' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Irish (ga)',
            p_return_value  => 'ga' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Italian (Italy) (it)',
            p_return_value  => 'it' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Italian (Switzerland) (it-ch)',
            p_return_value  => 'it-ch' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Japanese (ja)',
            p_return_value  => 'ja' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Kannada (kn)',
            p_return_value  => 'kn' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Kazakh (kk)',
            p_return_value  => 'kk' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Konkani (kok)',
            p_return_value  => 'kok' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Korean (ko)',
            p_return_value  => 'ko' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Kyrgyz (kz)',
            p_return_value  => 'kz' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Latvian (lv)',
            p_return_value  => 'lv' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Lithuanian (lt)',
            p_return_value  => 'lt' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Malay (Malaysia) (ms)',
            p_return_value  => 'ms' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Malayalam (ml)',
            p_return_value  => 'ml' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Maltese (mt)',
            p_return_value  => 'mt' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Marathi (mr)',
            p_return_value  => 'mr' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Nepali (India) (ne)',
            p_return_value  => 'ne' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Norwegian (Bokmal) (nb-no)',
            p_return_value  => 'nb-no' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Norwegian (Bokmal) (no)',
            p_return_value  => 'no' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Norwegian (Nynorsk) (nn-no)',
            p_return_value  => 'nn-no' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Oriya (or)',
            p_return_value  => 'or' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Polish (pl)',
            p_return_value  => 'pl' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Portuguese (Brazil) (pt-br)',
            p_return_value  => 'pt-br' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Portuguese (Portugal) (pt)',
            p_return_value  => 'pt' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Punjabi (pa)',
            p_return_value  => 'pa' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Romanian (ro)',
            p_return_value  => 'ro' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Russian (Moldova) (ru-md)',
            p_return_value  => 'ru-md' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Russian (ru)',
            p_return_value  => 'ru' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Serbian (sr)',
            p_return_value  => 'sr' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Slovak (sk)',
            p_return_value  => 'sk' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Slovenian (sl)',
            p_return_value  => 'sl' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Argentina) (es-ar)',
            p_return_value  => 'es-ar' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Bolivia) (es-bo)',
            p_return_value  => 'es-bo' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Chile) (es-cl)',
            p_return_value  => 'es-cl' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Colombia) (es-co)',
            p_return_value  => 'es-co' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Costa Rica) (es-cr)',
            p_return_value  => 'es-cr' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Dominican Republic) (es-do)',
            p_return_value  => 'es-do' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Ecuador) (es-ec)',
            p_return_value  => 'es-ec' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (El Salvador) (es-sv)',
            p_return_value  => 'es-sv' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Guatemala) (es-gt)',
            p_return_value  => 'es-gt' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Honduras) (es-hn)',
            p_return_value  => 'es-hn' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Mexico) (es-mx)',
            p_return_value  => 'es-mx' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Nicaragua) (es-ni)',
            p_return_value  => 'es-ni' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Panama) (es-pa)',
            p_return_value  => 'es-pa' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Paraguay) (es-py)',
            p_return_value  => 'es-py' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Peru) (es-pe)',
            p_return_value  => 'es-pe' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Puerto Rico) (es-pr)',
            p_return_value  => 'es-pr' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Traditional Sort) (es)',
            p_return_value  => 'es' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (United States) (es-us)',
            p_return_value  => 'es-us' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Uruguay) (es-uy)',
            p_return_value  => 'es-uy' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Spanish (Venezuela) (es-ve)',
            p_return_value  => 'es-ve' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Swahili (sw)',
            p_return_value  => 'sw' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Swedish (Finland) (sv-fi)',
            p_return_value  => 'sv-fi' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Swedish (sv)',
            p_return_value  => 'sv' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Tamil (ta)',
            p_return_value  => 'ta' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Telugu (te)',
            p_return_value  => 'te' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Thai (th)',
            p_return_value  => 'th' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Turkish (tr)',
            p_return_value  => 'tr' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Ukrainian (uk)',
            p_return_value  => 'uk' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Urdu (ur)',
            p_return_value  => 'ur' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Uzbek (uz)',
            p_return_value  => 'uz' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Vietnamese (vi)',
            p_return_value  => 'vi' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Welsh (cy)',
            p_return_value  => 'cy' );
        --
    end store_i18n_lang_prop_lov_value;
    --
    --
    procedure store_comp_prop_data_profile (
        p_profile_type_id in number,
        p_column_type_id  in number )
    is
    begin
        --
        -- Component Properties for XZY_DATA_PROFILE
        --
        l_component_type_id           := p_profile_type_id;
        -- Reset Component Property sequence for this component type
        g_component_property_sequence := 10;
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'NAME',
            p_db_column             => null,
            p_is_required           => true,
            p_is_common             => true,
            p_supports_substitution => false,
            p_check_uniqueness      => 'APPLICATION',
            p_default_value         => '#PLEASE_CHANGE#',
            p_help_text             => q'~Enter a name for the data profile.~' );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'DATA_PROFILE_FORMAT',
            p_db_column             => null,
            p_is_required           => true,
            p_is_common             => true,
            p_default_value         => 'JSON' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'DATA_PROFILE_ROW_SELECTOR',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => false,
            p_supports_substitution        => false,
            p_depending_on_comp_prop_name  => 'DATA_PROFILE_FORMAT',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'JSON,XML' );
        --
        if l_component_type_id in ( c_comp_type_web_src_mod_dp, c_comp_type_web_src_oper_dp ) then
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'DATA_PROFILE_IS_SINGLE_ROW',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => true,
                p_default_value                => 'N',
                p_depending_on_comp_prop_name  => 'DATA_PROFILE_FORMAT',
                p_depending_on_condition_type  => 'IN_LIST',
                p_depending_on_expression      => 'JSON,XML' );
            --
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => 'DATA_PROFILE_SINGLE_ROW_SELECTOR',
                p_db_column                    => null,
                p_is_required                  => false,
                p_is_common                    => true,
                p_supports_substitution        => false,
                p_depending_on_comp_prop_name  => 'DATA_PROFILE_IS_SINGLE_ROW',
                p_depending_on_condition_type  => 'EQUALS',
                p_depending_on_expression      => 'N',
                p_depending_on_comp_prop_name2 => 'DATA_PROFILE_FORMAT',
                p_depending_on_condition_type2 => 'NOT_EQUALS',
                p_depending_on_expression2     => 'CSV' );
        end if;
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'DATA_PROFILE_USE_RAW_JSON_SELECTORS',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => false,
            p_default_value                => 'N',
            p_depending_on_comp_prop_name  => 'DATA_PROFILE_FORMAT',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'JSON' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'I18N_IANA_CHARSET_ENCODING',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => false,
            p_null_text                    => 'Database Character Set',
            p_null_help_text               => q'~Treat the data as encoded in the <em>database character set</em>.~' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'DATA_PROFILE_NUMERIC_CHARACTERS',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => false,
            p_supports_substitution        => false );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'XML_NAMESPACES',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => false,
            p_supports_substitution        => false,
            p_depending_on_comp_prop_name  => 'DATA_PROFILE_FORMAT',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'XML' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'DATA_PROFILE_CSV_SEPARATOR',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => false,
            p_depending_on_comp_prop_name  => 'DATA_PROFILE_FORMAT',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'CSV' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'DATA_PROFILE_CSV_ENCLOSED_BY',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => false,
            p_depending_on_comp_prop_name  => 'DATA_PROFILE_FORMAT',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'CSV' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'DEFAULT_XLSX_SHEET_NAME',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => false,
            p_supports_substitution        => false,
            p_depending_on_comp_prop_name  => 'DATA_PROFILE_FORMAT',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'XLSX' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'DATA_PROFILE_SKIP_ROWS',
            p_db_column                    => null,
            p_is_required                  => false,
            p_is_common                    => false,
            p_depending_on_comp_prop_name  => 'DATA_PROFILE_FORMAT',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'CSV,XLSX' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'DATA_PROFILE_HAS_HEADER_ROW',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => false,
            p_default_value                => 'Y',
            p_depending_on_comp_prop_name  => 'DATA_PROFILE_FORMAT',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'CSV,XLSX' );
        --
        store_standard_attr_comp_prop (
            p_component_type_id => l_component_type_id,
            p_has_comments      => true,
            p_comment_db_column => 'PROFILE_COMMENT' );
        --
        --
        -- Component Properties for XYZ_DATA_PROFILE_COLUMN
        --
        l_component_type_id           := p_column_type_id;
        -- Reset Component Property sequence for this component type
        g_component_property_sequence := 10;
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'COLUMN_NAME',
            p_db_column             => 'NAME',
            p_is_required           => true,
            p_is_common             => true,
            p_supports_substitution => false,
            p_check_uniqueness      => 'PARENT',
            p_help_text             => q'~<p>Name under which the column is exposed to &PRODUCT_NAME. components.</p>
    <p>If the data profile is part of a <em>Data Load Definition</em>, this name is used to map data profile columns to the target table. For instance, the <strong>ENAME</strong> data profile column will be loaded to the <strong>ENAME</strong> column of the target table. If the profile column does <em>not exist</em> in the target table, it will be ignored during data load.</p>~' );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'DATA_PROFILE_FORMAT_HIDDEN',
            p_db_column             => null,
            p_is_required           => false,
            p_is_common             => false );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'DATA_PROFILE_COLUMN_TYPE',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'DATA' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DATA_PROFILE_COLUMN_DATA_TYPE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => 'VARCHAR2' ); -- $$$ todo: Page 1926 has some advanced defaulting logic which has to go into pe.callbacks.js
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALIDATION_REGEXP',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_default_value               => null,
            p_depending_on_comp_prop_name => 'DATA_PROFILE_COLUMN_DATA_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'VARCHAR2' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'MAX_LENGTH',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => '4000',
            p_depending_on_comp_prop_name => 'DATA_PROFILE_COLUMN_DATA_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'VARCHAR2' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DATA_PROFILE_DECIMAL_CHARACTER',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'DATA_PROFILE_COLUMN_DATA_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'NUMBER' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DATA_PROFILE_GROUP_CHARACTER',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'DATA_PROFILE_COLUMN_DATA_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'NUMBER' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'IS_PRIMARY_KEY',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'N',
            p_help_text         => q'~Determines whether this is a primary key column. A primary key can consist of multiple columns.~' );
        --
        -- Parsing
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'DATA_PROFILE_SELECTOR_TYPE',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_default_value                => 'NAME',
            p_depending_on_comp_prop_name  => 'DATA_PROFILE_COLUMN_TYPE',
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'DATA',
            p_depending_on_comp_prop_name2 => 'DATA_PROFILE_FORMAT_HIDDEN',
            p_depending_on_condition_type2 => 'IN_LIST',
            p_depending_on_expression2     => 'CSV,XLSX' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DATA_PROFILE_COLUMN_SELECTOR',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'DATA_PROFILE_SELECTOR_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'NAME,REGEXP' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DATA_PROFILE_COLUMN_SELECTOR_NO',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'DATA_PROFILE_SELECTOR_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SEQ' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'DATA_PROFILE_COLUMN_PATH',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_supports_substitution        => false,
            p_depending_on_comp_prop_name  => 'DATA_PROFILE_FORMAT_HIDDEN',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'JSON,XML',
            p_depending_on_comp_prop_name2 => 'DATA_PROFILE_COLUMN_TYPE',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'DATA' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => 'DATA_PROFILE_TABLE_COLUMN',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_supports_substitution        => false,
            p_depending_on_comp_prop_name  => 'DATA_PROFILE_FORMAT_HIDDEN',
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'JSON',
            p_depending_on_comp_prop_name2 => 'DATA_PROFILE_COLUMN_TYPE',
            p_depending_on_condition_type2 => 'EQUALS',
            p_depending_on_expression2     => 'TABLE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'PARSING_FORMAT_MASK',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'DATA_PROFILE_COLUMN_DATA_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'NUMBER,DATE,TIMESTAMP,TIMESTAMP WITH TIME ZONE,TIMESTAMP WITH LOCAL TIME ZONE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'HAS_TIME_ZONE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => 'Y',
            p_depending_on_comp_prop_name => 'DATA_PROFILE_COLUMN_DATA_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'DATE,TIMESTAMP,TIMESTAMP WITH TIME ZONE,TIMESTAMP WITH LOCAL TIME ZONE' );
        --
        -- Computation
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'COMPUTATION_SQL_EXPRESSION_VARCHAR2',
            p_db_column                   => 'EXPRESSION1',
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'DATA_PROFILE_COLUMN_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL_EXPRESSION',
            p_help_text                   => q'~Enter the SQL Expression to compute the value of this column. The SQL expression can reference data profile columns of the <strong>Data</strong> column type.~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'COMPUTATION_SQL_STATEMENT',
            p_db_column                   => 'EXPRESSION1',
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'DATA_PROFILE_COLUMN_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL_QUERY',
            p_help_text                   => q'~Enter the SQL Query to compute the value of this column. The SQL query must return a single value and can reference data profile columns of the <strong>Data</strong> column type.~' );
        --
        -- Lookup
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOOKUP_OWNER',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'DATA_PROFILE_COLUMN_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'LOOKUP' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOOKUP_TABLE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_parent_comp_prop_name       => 'LOOKUP_OWNER',
            p_depending_on_comp_prop_name => 'DATA_PROFILE_COLUMN_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'LOOKUP' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOOKUP_RETURN_COLUMN',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_parent_comp_prop_name       => 'LOOKUP_TABLE',
            p_depending_on_comp_prop_name => 'DATA_PROFILE_COLUMN_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'LOOKUP' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOOKUP_WHERE_CLAUSE',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => true,
            p_parent_comp_prop_name       => 'LOOKUP_TABLE',
            p_depending_on_comp_prop_name => 'DATA_PROFILE_COLUMN_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'LOOKUP' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOOKUP_TABLE_COLUMN1',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_parent_comp_prop_name       => 'LOOKUP_TABLE',
            p_depending_on_comp_prop_name => 'DATA_PROFILE_COLUMN_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'LOOKUP' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOOKUP_DATA_COLUMN1',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'DATA_PROFILE_COLUMN_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'LOOKUP' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOOKUP_TABLE_COLUMN2',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_parent_comp_prop_name       => 'LOOKUP_TABLE',
            p_depending_on_comp_prop_name => 'LOOKUP_TABLE_COLUMN1',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOOKUP_DATA_COLUMN2',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'LOOKUP_TABLE_COLUMN2',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOOKUP_TABLE_COLUMN3',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_parent_comp_prop_name       => 'LOOKUP_TABLE',
            p_depending_on_comp_prop_name => 'LOOKUP_TABLE_COLUMN2',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOOKUP_DATA_COLUMN3',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'LOOKUP_TABLE_COLUMN3',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        -- Transformation
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'TRANSFORMATION_TYPE',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'DATA_PROFILE_COLUMN_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'DATA,LOOKUP' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'TRANSFORMATION_TRIM_CHARS',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_supports_substitution       => true,
            p_depending_on_comp_prop_name => 'TRANSFORMATION_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'LTRIM,RTRIM,TRIM' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'TRANSFORMATION_FIND',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => true,
            p_depending_on_comp_prop_name => 'TRANSFORMATION_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'REPLACE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'TRANSFORMATION_REGEXP',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => true,
            p_depending_on_comp_prop_name => 'TRANSFORMATION_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'REPLACE,REGEXP_NULLIF' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'TRANSFORMATION_REPLACE_WITH',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => true,
            p_depending_on_comp_prop_name => 'TRANSFORMATION_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'REPLACE,REGEXP_REPLACE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'TRANSFORMATION_NULLIF',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => true,
            p_depending_on_comp_prop_name => 'TRANSFORMATION_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'NULLIF' );
        --
        -- Remote REST Data Source
        if l_component_type_id in ( c_comp_type_web_src_mod_dp_col, c_comp_type_web_src_oper_dpcol ) then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'REMOTE_IS_FILTERABLE',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_supports_substitution       => false,
                p_default_value               => 'Y' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'REMOTE_IS_COMMON',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_supports_substitution       => false,
                p_default_value               => 'Y' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'REMOTE_ATTRIBUTE_NAME',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_supports_substitution       => false );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'REMOTE_DATA_TYPE',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_supports_substitution       => false );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'ADDITIONAL_INFO',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_supports_substitution       => false );
        end if;
        --
        -- Advanced
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'ADVANCED_SEQUENCE',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'IS_HIDDEN',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'N' );
        --
        store_standard_attr_comp_prop (
            p_component_type_id => l_component_type_id,
            p_has_comments      => true,
            p_comment_db_column => 'COLUMN_COMMENT' );
        --
    end store_comp_prop_data_profile;
    --
    --
    procedure store_comp_prop_sup_obj_script
    is
    begin
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'NAME',
            p_db_column             => null,
            p_is_required           => true,
            p_is_common             => true,
            p_check_uniqueness      => 'PARENT',
            p_supports_substitution => false,
            p_default_value         => '#PLEASE_CHANGE#',
            p_help_text             => q'~The name of this installation script.~' );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'EXECUTION_SEQUENCE',
            p_db_column             => 'SEQUENCE',
            p_is_required           => true,
            p_is_common             => true,
            p_help_text             => q'~The sequence number of this installation script. Scripts run in order of ascending sequence number.~' );
        --
        store_standard_attr_comp_prop (
            p_component_type_id     => l_component_type_id,
            p_has_condition         => true,
            p_cond_type_name_prefix => 'SO_COND' );
        --
    end store_comp_prop_sup_obj_script;
    --
    --
    procedure store_comp_prop_tmpl_options (
        p_component_type_id     in number,
        p_type_name             in varchar2,
        p_default_value         in varchar2 default null )
    is
    begin
        --
        if p_component_type_id = c_comp_type_global_tmpl_option then
            store_component_prop (
                p_component_type_id     => p_component_type_id,
                p_property_name         => 'TEMPLATE_OPTION_TYPE',
                p_db_column             => null,
                p_is_required           => true,
                p_is_common             => true,
                p_supports_substitution => false );
        else
            store_component_prop (
                p_component_type_id     => p_component_type_id,
                p_property_name         => 'TEMPLATE_OPTION_TYPE_HIDDEN',
                p_db_column             => null,
                p_is_required           => true,
                p_is_common             => true,
                p_supports_substitution => false,
                p_default_value         => p_default_value );
        end if;
        --
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'NAME',
            p_db_column             => 'DISPLAY_NAME',
            p_is_required           => true,
            p_is_common             => true,
            p_check_uniqueness      => 'PARENT',
            p_supports_substitution => false,
            p_help_text             => q'~The display name of this template option.~' );
        --
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'IDENTIFIER',
            p_db_column             => 'NAME',
            p_is_required           => true,
            p_is_common             => true,
            p_check_uniqueness      => 'PARENT',
            p_supports_substitution => false,
            p_help_text             => q'~The name of this template option.~' );
        --
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'TEMPLATE_OPTION_GROUP',
            p_db_column             => null,
            p_is_required           => true,
            p_is_common             => true,
            p_supports_substitution => false );
        --
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'IDENTIFICATION_DISPLAY_SEQUENCE',
            p_db_column             => 'DISPLAY_SEQUENCE',
            p_is_required           => true,
            p_is_common             => true,
            p_supports_substitution => false,
            p_help_text             => q'~<p>Enter the display sequence for this template option.</p>~' );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'REFERENCE_ID',
            p_db_column             => null,
            p_is_required           => false,
            p_is_common             => false );
        --
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'IS_ADVANCED',
            p_db_column             => 'IS_ADVANCED',
            p_is_required           => true,
            p_is_common             => false,
            p_supports_substitution => false,
            p_default_value         => 'N' );
        --
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'COMPONENT_CSS_CLASSES',
            p_db_column             => 'CSS_CLASSES',
            p_is_required           => true,
            p_is_common             => true,
            p_check_uniqueness      => 'PARENT',
            p_supports_substitution => false );
        --
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'HELP_TEXT',
            p_db_column             => null,
            p_is_required           => false,
            p_is_common             => true,
            p_supports_substitution => false,
            p_help_text             => q'~<p>Use this attribute to enter help text for this template option.</p>~' );
        --
        store_standard_attr_comp_prop (
            p_component_type_id     => p_component_type_id );
        --
    end store_comp_prop_tmpl_options;
    --
    --
    procedure store_action_comp_props (
        p_is_region in boolean )
    is
        l_dynamic_reference_scope varchar2(7) := case when p_is_region then 'DEPENDS' else 'ROW' end;
    begin
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'HIDDEN_PLUGIN_NAME',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false ); /* property is hidden */
        --
        -- this property gets populated by view wwv_flow_component_actions_dev and
        -- pe.callbacks.js. We need it because ACTION_TEMPLATE isn't always visible,
        -- for example in the case of a LINK position or if the position has a
        -- predefined template, but we still need a property for all of our
        -- dependend-on checks. That's why we have this property which gets synchronized
        -- with the value of ACTION_TEMPLATE or wwv_flow_plugin_act_positions.template_id.
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'HIDDEN_TEMPLATE_ID',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false ); /* property is hidden */
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'ACTION_POSITION',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_parent_comp_prop_name       => 'HIDDEN_PLUGIN_NAME' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'ACTION_TEMPLATE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_parent_comp_prop_name       => 'HIDDEN_PLUGIN_NAME',
            p_features_comp_prop_name     => 'ACTION_POSITION',
            p_features                    => 'TEMPLATE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BUTTON_LABEL',
            p_db_column                   => 'LABEL',
            p_is_required                 => true,
            p_is_common                   => true,
            p_reference_scope             => 'ROW',
            p_default_value               => '#PLEASE_CHANGE#',
            p_features_comp_prop_name     => 'HIDDEN_TEMPLATE_ID',
            p_features                    => 'LABEL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DISPLAY_SEQUENCE',
            p_db_column                   => 'DISPLAY_SEQUENCE',
            p_is_required                 => true,
            p_is_common                   => true,
            p_help_text                   => q'~Enter the display sequence for this action. This is used to evaluate the display condition and render in the order defined.~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'ACTION_LINK_TARGET_TYPE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => 'REDIRECT_PAGE',
            p_features_comp_prop_name     => 'HIDDEN_TEMPLATE_ID',
            p_features                    => 'LINK_URL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LINK_TARGET',
            p_db_column                   => 'LINK_TARGET',
            p_is_required                 => true,
            p_is_common                   => true,
            p_reference_scope             => l_dynamic_reference_scope,
            p_depending_on_comp_prop_name => 'ACTION_LINK_TARGET_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'REDIRECT_PAGE,REDIRECT_APP,REDIRECT_URL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LINK_ATTRIBUTES',
            p_db_column                   => 'LINK_ATTRIBUTES',
            p_is_required                 => false,
            p_is_common                   => false,
            p_reference_scope             => l_dynamic_reference_scope,
            p_depending_on_comp_prop_name => 'LINK_TARGET',
            p_depending_on_condition_type => 'NOT_NULL',
            p_features_comp_prop_name     => 'HIDDEN_TEMPLATE_ID',
            p_features                    => 'LINK_ATTR' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BUTTON_DISPLAY_TYPE',
            p_db_column                   => 'BUTTON_DISPLAY_TYPE',
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'TEXT',
            p_features_comp_prop_name     => 'HIDDEN_TEMPLATE_ID',
            p_features                    => 'ICON_CLASSES' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'ICON_CSS_CLASSES',
            p_db_column                   => 'ICON_CSS_CLASSES',
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => l_dynamic_reference_scope,
            p_depending_on_comp_prop_name => 'BUTTON_DISPLAY_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'ICON,TEXT_WITH_ICON' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BUTTON_IS_HOT',
            p_db_column                   => 'IS_HOT',
            p_is_required                 => true,
            p_is_common                   => true,
            p_help_text                   => q'~Specify whether to use the <strong>Normal</strong> or <strong>Hot</strong> button when rendering this button.~',
            p_default_value               => 'N',
            p_features_comp_prop_name     => 'HIDDEN_TEMPLATE_ID',
            p_features                    => 'IS_HOT' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SHOW_AS_DISABLED',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => 'N',
            p_features_comp_prop_name     => 'HIDDEN_TEMPLATE_ID',
            p_features                    => 'IS_DISABLED' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'APPEARANCE_CSS_CLASSES',
            p_db_column                   => 'ACTION_CSS_CLASSES',
            p_is_required                 => false,
            p_is_common                   => false,
            p_reference_scope             => l_dynamic_reference_scope,
            p_help_text                   => q'~Enter classes to add to this action. You may add multiple classes by separating them with spaces.~',
            p_features_comp_prop_name     => 'HIDDEN_TEMPLATE_ID',
            p_features                    => 'CSS_CLASSES' );
        --
        store_condition_type_comp_prop (
            p_component_type_id           => l_component_type_id,
            p_name_prefix                 => null,
            p_help_text_type              => null,
            p_reference_scope             => 'DEPENDS',
            p_db_column_type              => 'CONDITION_TYPE',
            p_view_column_type            => 'CONDITION_TYPE',
            p_db_column_expr1             => 'CONDITION_EXPR1',
            p_db_column_expr2             => 'CONDITION_EXPR2',
            p_has_execute_condition       => true );
        --
        store_standard_attr_comp_prop (
            p_component_type_id        => l_component_type_id,
            p_has_authorization_scheme => true,
            p_authorization_db_column  => 'AUTHORIZATION_SCHEME',
            p_has_build_option         => true,
            p_build_option_db_column   => 'BUILD_OPTION_ID',
            p_has_comments             => true,
            p_comment_db_column        => 'ACTION_COMMENTS' );
    end store_action_comp_props;
    --
    --
    procedure store_action_menu_comp_props (
        p_parent_menu_property_name in varchar2,
        p_is_region                 in boolean )
    is
        l_dynamic_reference_scope varchar2(7) := case when p_is_region then 'DEPENDS' else 'ROW' end;
    begin
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'MENU_ENTRY_TYPE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => 'ENTRY' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BUTTON_LABEL',
            p_db_column                   => 'LABEL',
            p_is_required                 => true,
            p_is_common                   => true,
            p_reference_scope             => l_dynamic_reference_scope,
            p_help_text                   => q'~Enter the text to be displayed in the menu.~',
            p_default_value               => '#PLEASE_CHANGE#',
            p_depending_on_comp_prop_name => 'MENU_ENTRY_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'ENTRY,SUB_MENU' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_parent_menu_property_name,
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => true,
            p_null_text                   => 'No Parent',
            p_reference_on_delete         => 'DB_CASCADE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DISPLAY_SEQUENCE',
            p_db_column                   => 'DISPLAY_SEQUENCE',
            p_is_required                 => true,
            p_is_common                   => true,
            p_help_text                   => q'~Enter the display sequence for this menu entry. This is used to evaluate the display condition and render in the order defined.~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'ACTION_LINK_TARGET_TYPE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => 'REDIRECT_PAGE',
            p_depending_on_comp_prop_name => 'MENU_ENTRY_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'ENTRY' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LINK_TARGET',
            p_db_column                   => 'LINK_TARGET',
            p_is_required                 => true,
            p_is_common                   => true,
            p_reference_scope             => l_dynamic_reference_scope,
            p_depending_on_comp_prop_name => 'ACTION_LINK_TARGET_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'REDIRECT_PAGE,REDIRECT_APP,REDIRECT_URL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LINK_ATTRIBUTES',
            p_db_column                   => 'LINK_ATTRIBUTES',
            p_is_required                 => false,
            p_is_common                   => false,
            p_reference_scope             => l_dynamic_reference_scope,
            p_depending_on_comp_prop_name => 'LINK_TARGET',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'ICON_CSS_CLASSES',
            p_db_column                   => 'ICON_CSS_CLASSES',
            p_is_required                 => false,
            p_is_common                   => false,
            p_reference_scope             => l_dynamic_reference_scope,
            p_depending_on_comp_prop_name => 'MENU_ENTRY_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'ENTRY,SUB_MENU' );
        --
        store_condition_type_comp_prop (
            p_component_type_id           => l_component_type_id,
            p_name_prefix                 => null,
            p_help_text_type              => null,
            p_reference_scope             => 'DEPENDS',
            p_db_column_type              => 'CONDITION_TYPE',
            p_view_column_type            => 'CONDITION_TYPE',
            p_db_column_expr1             => 'CONDITION_EXPR1',
            p_db_column_expr2             => 'CONDITION_EXPR2',
            p_depending_on_comp_prop_name => 'MENU_ENTRY_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'ENTRY,SUB_MENU',
            p_has_execute_condition       => true );
        --
        store_standard_attr_comp_prop (
            p_component_type_id           => l_component_type_id,
            p_has_authorization_scheme    => true,
            p_authorization_db_column     => 'AUTHORIZATION_SCHEME',
            p_authz_dep_on_comp_prop_name => 'MENU_ENTRY_TYPE',
            p_authz_dep_on_condition_type => 'IN_LIST',
            p_authz_dep_on_expression     => 'ENTRY,SUB_MENU',
            p_has_build_option            => true,
            p_build_option_db_column      => 'BUILD_OPTION_ID',
            p_has_comments                => true,
            p_comment_db_column           => 'MENU_ENTRY_COMMENTS' );
    end store_action_menu_comp_props;
    --
    procedure store_attr_cond_comp_props
    is
    begin
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DEPENDING_ON_ATTRIBUTE',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_supports_substitution       => false );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DEPENDING_ON_CONDITION_TYPE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'DEPENDING_ON_ATTRIBUTE',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DEPENDING_ON_EXPRESSION',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'DEPENDING_ON_CONDITION_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'EQUALS,NOT_EQUALS,IN_LIST,NOT_IN_LIST' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DEPENDING_ON_HAS_TO_EXIST',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_supports_substitution       => false,
            p_default_value               => 'Y',
            p_depending_on_comp_prop_name => 'DEPENDING_ON_ATTRIBUTE',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
    end store_attr_cond_comp_props;
    --
    procedure store_attribute_props (
        p_start_property_id     in integer,
        p_attribute_count       in integer,
        p_column_name_prefix    in varchar2 )
    is
    begin
        -- Init the start property id to the id before the starting id
        -- to do a correct increase inside the loop
        l_property_id := p_start_property_id - 1;
        --
        for i in 1..p_attribute_count loop
            --
            l_property_id := l_property_id + 1;
            store_property (
                p_id                        => l_property_id,
                p_name                      => p_column_name_prefix||'_'||lpad(i,2,'0'),
                p_prompt                    => initcap(p_column_name_prefix)||' '||i,
                p_property_type             => 'TEXT',
                p_db_column                 => p_column_name_prefix||'_'||lpad(i,2,'0'),
                p_display_group_name        => 'SETTINGS' );
            --
        end loop;
    end store_attribute_props;
    --
    procedure store_attribute_comp_props (
        p_attribute_count       in integer,
        p_column_name_prefix    in varchar2 )
    is
    begin
        for i in 1..p_attribute_count loop
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => p_column_name_prefix||'_'||lpad(i,2,'0'),
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_supports_substitution       => false );
        end loop;
    end store_attribute_comp_props;
    --
    procedure store_subscription_prop (
        p_property_id                in number,
        p_name                       in varchar2,
        p_lov_component_type_id      in number,
        p_help_text                  in varchar2 default null,
        p_validation_plsql_ret_error in varchar2 default null )
    is
    begin
        --
        store_property (
            p_id                         => p_property_id,
            p_name                       => p_name || '_SUBSCRIBED_FROM',
            p_prompt                     => 'Master',
            p_property_type              => 'SUBSCRIPTION',
            p_db_column                  => 'REFERENCE_ID',
            p_display_group_name         => 'SUBSCRIPTION',
            p_lov_type                   => 'COMPONENT',
            p_lov_component_type_id      => p_lov_component_type_id,
            p_lov_component_type_scope   => 'WORKSPACE',
            p_help_text                  => p_help_text,
            p_validation_plsql_ret_error => p_validation_plsql_ret_error );
        --
    end store_subscription_prop;
    --
    procedure store_subscription_comp_prop (
        p_component_type_id in number,
        p_name_prefix       in varchar2 )
    is
    begin
        store_component_prop (
            p_component_type_id => p_component_type_id,
            p_property_name     => p_name_prefix || '_SUBSCRIBED_FROM',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => false );
        --
        store_component_prop (
            p_component_type_id => p_component_type_id,
            p_property_name     => 'VERSION_SCN',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => false );
        --
    end store_subscription_comp_prop;
    --
    procedure store_tmpl_subscription_prop (
        p_property_id           in number,
        p_name                  in varchar2,
        p_lov_component_type_id in number )
    is
    begin
        store_subscription_prop (
            p_property_id           => p_property_id,
            p_name                  => p_name,
            p_lov_component_type_id => p_lov_component_type_id,
            p_help_text             => q'~<p>You may select an existing template in this workspace or another template in your workspace's schema. By selecting an existing template, you become a subscriber to that template.</p>
<p>To load a new copy of any master template, click <span class="fielddatabold">Refresh</span>.</p>~');
    end store_tmpl_subscription_prop;
    --
    procedure store_template_std_comp_props (
        p_template_type             in varchar2,
        p_name_db_column            in varchar2 default null,
        p_name_import_api_param     in varchar2 default null,
        p_identifier_db_column      in varchar2 default null,
        p_template_type_db_column   in varchar2 default null )
    is
    begin
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'NAME',
            p_db_column                   => p_name_db_column,
            p_import_api_parameter        => p_name_import_api_param,
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_check_uniqueness            => 'PARENT',
            p_help_text                   => q'~Template identifier, this is used when switching and upgrading themes and cannot be modified.~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'TEMPLATE_IDENTIFIER',
            p_db_column                   => p_identifier_db_column,
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_check_uniqueness            => 'PARENT' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_template_type||'_TEMPLATE_CLASS',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_template_type||'_TEMPLATE_SUBSCRIBED_FROM',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'TEMPLATE_TRANSLATABLE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'N' );
        --
        if p_template_type not in  ( 'CALENDAR', 'POPUP_LOV' ) then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PRESET_TEMPLATE_OPTIONS',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'DEFAULT_TEMPLATE_OPTIONS',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false );
        end if;
        --
        if p_template_type in ( 'PAGE', 'CLASSIC_REPORT' ) then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => p_template_type||'_TEMPLATE_TYPE',
                p_db_column                   => p_template_type_db_column,
                p_is_required                 => case p_template_type when 'PAGE' then true else false end,
                p_is_common                   => false );
        end if;
        --
    end store_template_std_comp_props;
    --
    procedure store_multiple_value_type_prop (
        p_property_id           in number,
        p_name                  in varchar2,
        p_help_text             in varchar2 default null )
    is
    begin
        --
        store_property (
            p_id                 => p_property_id,
            p_name               => p_name,
            p_prompt             => 'Type',
            p_property_type      => 'SELECT LIST',
            p_lov_type           => 'STATIC',
            p_db_column          => 'MULTI_VALUE_TYPE',
            p_display_group_name => 'MULTIPLE_VALUES',
            p_help_text          => p_help_text );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Delimited List',
                p_return_value  => 'SEPARATED',
                p_help_text     => q'~<p>Column contains values as a delimited list.</p><pre>APEX,SQL,PL/SQL</pre><p>Use the APEX_STRING.SPLIT function for processing, as in the following example:</p><pre>select column_value from apex_string.split ( <em>:ITEM_NAME</em>, ',' );</pre>~' );
            --
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'JSON Array',
                p_return_value  => 'JSON_ARRAY',
                p_help_text     => q'~<p>The Source column contains a JSON array of scalar values. &PRODUCT_NAME. will raise error messages if the column contains invalid JSON syntax.</p><pre>["APEX", "SQL", "PL/SQL"]</pre><p>Use the JSON_TABLE SQL function for processing, as in the following example:</p><pre>select
    element
from
    json_table ( <em>:ITEM_NAME</em>, '$[*]'
        columns
            element varchar2 path '$'
    );
</pre>~' );

    end store_multiple_value_type_prop;
    --
    procedure store_multiple_value_sep_prop (
        p_property_id           in number,
        p_name                  in varchar2 )
    is
    begin
        --
        store_property (
            p_id                 => p_property_id,
            p_name               => p_name,
            p_prompt             => 'Separator',
            p_property_type      => 'TEXT',
            p_display_length     => 5,
            p_max_length         => 5,
            p_db_column          => 'MULTI_VALUE_SEPARATOR',
            p_display_group_name => 'MULTIPLE_VALUES',
            p_help_text          => q'~<p>Identifies the character which separates values from each other. Note that the <strong>"</strong> (double-quote) and <strong>\</strong> (backslash) characters are not supported as a Value Separator, also not in the <strong>\xxxx</strong> format.</p>~',
            p_examples           => q'~<dl>
<dt>Normal characters:</dt>
<dd><pre>,</pre></dd>
<dd><pre>:</pre></dd>
<dt>Control Characters:</dt>
<dd>Tab (<em>ASCII: 9</em>) <pre>\t</pre></dd>
<dd>Linefeed (<em>ASCII: 10</em>) <pre>\n</pre></dd>
<dt>Other Characters:</dt>
<dd>Use a Unicode encoding value of the form '\xxxx' where 'xxxx' is the hexadecimal value of a character in UCS-2 encoding format.</dd>
<dd>Start of Heading (<em>ASCII: 1</em>) <pre>\0001</pre></dd>
<dd>"@"-Symbol (<em>ASCII: 64</em>) <pre>\0040</pre></dd>
</dl>~' );

    end store_multiple_value_sep_prop;
    --
begin
    sys.dbms_output.enable( 1000000 );

    ------------------------------------------------------------------------
    -- Delete all configuration first
    ------------------------------------------------------------------------
    delete from wwv_pe_properties;
    delete from wwv_pe_component_types;
    delete from wwv_pe_display_groups;

    ------------------------------------------------------------------------
    -- Component Types
    ------------------------------------------------------------------------

    -- Workspace component types
    store_component_type (
        p_id                        => c_comp_type_component_type,
        p_name                      => 'COMPONENT_TYPE',
        p_singular_title            => 'Component Type',
        p_plural_title              => 'Component Types',
        p_table_name                => 'WWV_PE_COMPONENT_TYPES',
        p_display_column            => 'NAME',
        p_create_url                => null,
        p_edit_url                  => null,
        p_copy_url                  => null,
        p_file_path                 => null,
        p_is_page_designer_shared   => false );
    --
    store_component_type (
        p_id                        => c_comp_type_credential,
        p_name                      => 'CREDENTIAL',
        p_singular_title            => 'Web Credential',
        p_plural_title              => 'Web Credentials',
        p_table_name                => 'WWV_CREDENTIALS',
        p_import_api_name           => 'wwv_imp_workspace.create_credential',
        p_display_column            => 'NAME',
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:1621:%session%:::RP,1621:P1621_ID,P1621_BACK_TO_PAGE:%pk_value%,1621',
        p_copy_url                  => null,
        p_file_path                 => 'workspace/credentials#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_remote_database,
        p_name                      => 'REMOTE_DATABASE',
        p_singular_title            => 'REST Enabled SQL Database',
        p_plural_title              => 'REST Enabled SQL Databases',
        p_table_name                => 'WWV_REMOTE_SERVERS',
        p_import_api_name           => 'wwv_imp_workspace.create_remote_server',
        p_import_api_params         => q'~[ { name: "p_server_type", expression: "'WEB_SERVICE'" } ]~',
        p_display_column            => 'NAME',
        p_where_clause              => q'~server_type = 'REMOTE_SQL' and remote_sql_database_type is not null ~',
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:1601:%session%:::RP,1601:P1601_ID:%pk_value%',
        p_copy_url                  => null,
        p_file_path                 => 'workspace/remote_databases#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_remote_oracle_db,
        p_name                      => 'REMOTE_ORACLE_DATABASE',
        p_singular_title            => 'Remote Oracle Database',
        p_plural_title              => 'Remote Oracle Databases',
        p_table_name                => 'WWV_REMOTE_SERVERS',
        p_import_api_name           => 'wwv_imp_workspace.create_remote_server',
        p_display_column            => 'NAME',
        p_where_clause              => q'~server_type = 'REMOTE_SQL' and remote_sql_database_type = 'ORACLE' ~',
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:27:%session%::NO::F4000_P27_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => null,
        p_is_page_designer_shared   => true,
        p_is_query_only             => true );
    --
    store_component_type (
        p_id                        => c_comp_type_auth_server,
        p_name                      => 'AUTHENTICATION_SERVER',
        p_singular_title            => 'Authentication Server',
        p_plural_title              => 'Authentication Servers',
        p_table_name                => 'WWV_REMOTE_SERVERS',
        p_import_api_name           => 'wwv_imp_workspace.create_remote_server',
        p_display_column            => 'NAME',
        p_where_clause              => q'~server_type = 'AUTHENTICATION' ~',
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:1932:%session%:::RP,1932:P1932_ID,P1932_BACK_TO_PAGE:%pk_value%,1932',
        p_copy_url                  => null,
        p_file_path                 => 'workspace/authentication_servers#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_print_server,
        p_name                      => 'PRINT_SERVER',
        p_singular_title            => 'Print Server',
        p_plural_title              => 'Print Servers',
        p_table_name                => 'WWV_REMOTE_SERVERS',
        p_import_api_name           => 'wwv_imp_workspace.create_remote_server',
        p_display_column            => 'NAME',
        p_where_clause              => q'~server_type = 'PRINT_SERVER' ~',
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:1932:%session%:::RP,1932:P1932_ID,P1932_BACK_TO_PAGE:%pk_value%,1932',
        p_copy_url                  => null,
        p_file_path                 => 'workspace/print_servers#ext#' );

    store_component_type (
        p_id                        => c_comp_type_file_server,
        p_name                      => 'FILE',
        p_singular_title            => 'File Server',
        p_plural_title              => 'File Servers',
        p_table_name                => 'WWV_REMOTE_SERVERS',
        p_import_api_name           => 'wwv_imp_workspace.create_remote_server',
        p_display_column            => 'NAME',
        p_where_clause              => q'~server_type = 'CLOUD_OBJECT_STORE' ~',
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:1932:%session%:::RP,1932:P1932_ID,P1932_BACK_TO_PAGE:%pk_value%,1932',
        p_copy_url                  => null,
        p_file_path                 => 'workspace/file_servers#ext#' );

    store_component_type (
        p_id                        => c_comp_type_ai_server,
        p_name                      => 'GENERATIVE_AI',
        p_singular_title            => 'Generative AI Service',
        p_plural_title              => 'Generative AI Services',
        p_table_name                => 'WWV_REMOTE_SERVERS',
        p_import_api_name           => 'wwv_imp_workspace.create_remote_server',
        p_display_column            => 'NAME',
        p_where_clause              => q'~server_type = 'GENERATIVE_AI' ~',
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:9801:%session%:::RP,9801:P9801_ID:%pk_value%',
        p_copy_url                  => null,
        p_file_path                 => 'workspace/generative_ai_servers#ext#',
        p_is_page_designer_shared   => true );

    store_component_type (
        p_id                        => c_comp_type_vector_provider,
        p_name                      => 'VECTOR_PROVIDER',
        p_singular_title            => 'Vector Provider',
        p_plural_title              => 'Vector Providers',
        p_table_name                => 'WWV_REMOTE_SERVERS',
        p_import_api_name           => 'wwv_imp_workspace.create_remote_server',
        p_display_column            => 'NAME',
        p_where_clause              => q'~server_type = 'VECTOR' ~',
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:9811:%session%:::RP,9811:P9811_ID:%pk_value%',
        p_copy_url                  => null,
        p_file_path                 => 'workspace/vector_providers#ext#',
        p_is_page_designer_shared   => true );

    --
    store_component_type (
        p_id                        => c_comp_type_rest_server,
        p_name                      => 'REST_SERVER',
        p_singular_title            => 'REST Data Source Server',
        p_plural_title              => 'REST Data Source Servers',
        p_table_name                => 'WWV_REMOTE_SERVERS',
        p_import_api_name           => 'wwv_imp_workspace.create_remote_server',
        p_display_column            => 'NAME',
        p_where_clause              => q'~server_type = 'WEB_SERVICE' ~',
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:1932:%session%:::RP,1932:P1932_ID,P1932_BACK_TO_PAGE:%pk_value%,1932',
        p_copy_url                  => null,
        p_file_path                 => 'workspace/rest_servers#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_workspace_file,
        p_name                      => 'STATIC_WORKSPACE_FILE',
        p_singular_title            => 'Static Workspace File',
        p_plural_title              => 'Static Workspace Files',
        p_table_name                => 'WWV_FLOW_COMPANY_STATIC_FILES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_static_file',
        p_display_column            => 'FILE_NAME',
        p_create_url                => 'f?p=4000:314:%session%:::RP,314',
        p_edit_url                  => 'f?p=4000:315:%session%:::RP,315:P315_ID:%pk_value%',
        p_copy_url                  => null,
        p_file_path                 => 'workspace/static_files#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_page_pattern,
        p_name                      => 'PAGE_PATTERN',
        p_singular_title            => 'Page Pattern',
        p_plural_title              => 'Page Patterns',
        p_table_name                => 'WWV_FLOW_STEPS_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGES',
        p_import_api_name           => 'wwv_flow_imp_page.create_page',
        p_pk_column                 => 'INTERNAL_ID',
        p_display_column            => 'NAME',
        p_where_clause              => q'~is_page_pattern = 'Y' ~',
        p_file_path                 => 'workspace/page_patterns#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_app_group,
        p_name                      => 'APP_GROUP',
        p_singular_title            => 'Application Group',
        p_plural_title              => 'Application Groups',
        p_table_name                => 'WWV_FLOW_APPLICATION_GROUPS',
        p_display_column            => 'GROUP_NAME',
        p_create_url                => null,
        p_edit_url                  => null,
        p_copy_url                  => null,
        p_file_path                 => 'workspace/app_groups#ext#' );

    -- Application related component types
    store_component_type (
        p_id                        => c_comp_type_application,
        p_name                      => 'APPLICATION',
        p_singular_title            => 'Application',
        p_plural_title              => 'Applications',
        p_table_name                => 'WWV_FLOWS',
        p_import_api_name           => 'wwv_imp_workspace.create_flow',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:4001:%session%::::F4000_P1_FLOW,FB_FLOW_ID:%pk_value%,%pk_value%',
        p_file_path                 => 'application/',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_app_substitution,
        p_name                      => 'APP_SUBSTITUTION',
        p_singular_title            => 'Substitution',
        p_plural_title              => 'Substitutions',
        p_table_name                => 'WWV_FLOW_SUBSTITUTIONS_DEV',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'SUBSTITUTION_STRING',
        p_edit_url                  => 'f?p=4000:4001:%session%::NO:2:FB_FLOW_ID:%application_id%' );

    -- Theme related component types
    store_component_type (
        p_id                        => c_comp_type_theme,
        p_name                      => 'THEME',
        p_singular_title            => 'Theme',
        p_plural_title              => 'Themes',
        p_table_name                => 'WWV_FLOW_THEMES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_theme',
        p_pk_column                 => 'THEME_ID',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'THEME_NAME',
        p_file_path                 => 'shared_components/theme_#id#/',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_theme_file,
        p_name                      => 'THEME_FILE',
        p_singular_title            => 'File',
        p_plural_title              => 'Files',
        p_table_name                => 'WWV_FLOW_THEME_FILES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_static_file',
        p_view_name                 => 'APEX_APPLICATION_THEME_FILES',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'FILE_NAME',
        p_edit_url                  => 'f?p=4000:118:%session%:::118:P118_SCOPE,P118_ID,FB_FLOW_ID:THEME,%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_theme_style,
        p_name                      => 'THEME_STYLE',
        p_singular_title            => 'Style',
        p_plural_title              => 'Styles',
        p_table_name                => 'WWV_FLOW_THEME_STYLES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_theme_style',
        p_view_name                 => 'APEX_APPLICATION_THEME_STYLES',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:177:%session%:::177:P177_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_global_tmpl_option,
        p_name                      => 'GLOBAL_TEMPLATE_OPTION',
        p_singular_title            => 'Global Template Option',
        p_plural_title              => 'Global Template Options',
        p_table_name                => 'WWV_FLOW_TEMPLATE_OPTIONS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_template_option',
        p_view_name                 => 'APEX_APPL_TEMPLATE_OPTIONS',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'DISPLAY_NAME',
        p_where_clause              => q'~page_template_id       is null
and region_template_id     is null
and report_template_id     is null
and breadcrumb_template_id is null
and list_template_id       is null
and field_template_id      is null
and button_template_id     is null~',
        p_edit_url                  => get_parent_component_type_url (
                                                p_component_type_id => c_comp_type_theme,
                                                p_url_type          => 'EDIT' ),
        p_file_path                 => 'global_template_options#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_tmpl_option_group,
        p_name                      => 'TEMPLATE_OPTION_GROUP',
        p_singular_title            => 'Template Option Group',
        p_plural_title              => 'Template Option Groups',
        p_table_name                => 'WWV_FLOW_TEMPLATE_OPT_GROUPS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_template_opt_group',
        p_view_name                 => 'APEX_APPL_TEMPLATE_OPT_GROUPS',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'DISPLAY_NAME',
        p_edit_url                  => 'f?p=4000:81:%session%:::RP,81::',
        p_file_path                 => 'template_option_groups#ext#' );

    -- Templates
    store_component_type (
        p_id                        => c_comp_type_page_template,
        p_name                      => 'PAGE_TEMPLATE',
        p_singular_title            => 'Page Template',
        p_plural_title              => 'Page Templates',
        p_table_name                => 'WWV_FLOW_TEMPLATES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_template',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'NAME',
        p_create_url                => 'f?p=4000:162:%session%:::162:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4307:%session%:::4307:F4000_P4307_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:568:%session%:::568:FB_FLOW_ID,P568_FROM_TEMPLATE_ID:%application_id%,%pk_value%',
        p_file_path                 => 'page_templates#ext#',
        p_is_page_designer_shared   => true );
    --
    store_comp_type_tmpl_option (
        p_component_type_id         => c_comp_type_page_tmpl_option,
        p_parent_comp_type_id       => c_comp_type_page_template,
        p_type_name                 => 'PAGE',
        p_edit_page_no              => 4307 );
    --
    store_component_type (
        p_id                        => c_comp_type_region_template,
        p_name                      => 'REGION_TEMPLATE',
        p_singular_title            => 'Region Template',
        p_plural_title              => 'Region Templates',
        p_table_name                => 'WWV_FLOW_PAGE_PLUG_TEMPLATES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_plug_template',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'PAGE_PLUG_TEMPLATE_NAME',
        p_create_url                => 'f?p=4000:162:%session%:::162:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4653:%session%:::4653:F4000_P4653_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:538:%session%:::538:FB_FLOW_ID,P538_FROM_TEMPLATE_ID:%application_id%,%pk_value%',
        p_file_path                 => 'region_templates#ext#',
        p_is_page_designer_shared   => true );
    --
    store_comp_type_tmpl_option (
        p_component_type_id         => c_comp_type_region_tmpl_option,
        p_parent_comp_type_id       => c_comp_type_region_template,
        p_type_name                 => 'REGION',
        p_edit_page_no              => 4653 );
    --
    store_component_type (
        p_id                        => c_comp_type_field_template,
        p_name                      => 'FIELD_TEMPLATE',
        p_singular_title            => 'Field Template',
        p_plural_title              => 'Field Templates',
        p_table_name                => 'WWV_FLOW_FIELD_TEMPLATES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_field_template',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'TEMPLATE_NAME',
        p_create_url                => 'f?p=4000:162:%session%:::162:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:85:%session%:::85:F4000_P85_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:574:%session%:::574:FB_FLOW_ID,P574_FROM_TEMPLATE_ID:%application_id%,%pk_value%',
        p_file_path                 => 'field_templates#ext#',
        p_is_page_designer_shared   => true );
    --
    store_comp_type_tmpl_option (
        p_component_type_id         => c_comp_type_field_tmpl_option,
        p_parent_comp_type_id       => c_comp_type_field_template,
        p_type_name                 => 'FIELD',
        p_edit_page_no              => 85 );
    --
    store_component_type (
        p_id                        => c_comp_type_button_template,
        p_name                      => 'BUTTON_TEMPLATE',
        p_singular_title            => 'Button Template',
        p_plural_title              => 'Button Templates',
        p_table_name                => 'WWV_FLOW_BUTTON_TEMPLATES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_button_templates',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'TEMPLATE_NAME',
        p_create_url                => 'f?p=4000:162:%session%:::162:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:204:%session%:::204:F4000_P204_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:571:%session%:::571:FB_FLOW_ID,P571_FROM_TEMPLATE_ID:%application_id%,%pk_value%',
        p_file_path                 => 'button_templates#ext#',
        p_is_page_designer_shared   => true );
    --
    store_comp_type_tmpl_option (
        p_component_type_id         => c_comp_type_button_tmpl_option,
        p_parent_comp_type_id       => c_comp_type_button_template,
        p_type_name                 => 'BUTTON',
        p_edit_page_no              => 204 );
    --
    store_component_type (
        p_id                        => c_comp_type_list_template,
        p_name                      => 'LIST_TEMPLATE',
        p_singular_title            => 'List Template',
        p_plural_title              => 'List Templates',
        p_table_name                => 'WWV_FLOW_LIST_TEMPLATES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_list_template',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'LIST_TEMPLATE_NAME',
        p_create_url                => 'f?p=4000:162:%session%:::162:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4655:%session%:::4655:F4000_P4655_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:573:%session%:::573:FB_FLOW_ID,P573_FROM_TEMPLATE_ID:%application_id%,%pk_value%',
        p_file_path                 => 'list_templates#ext#',
        p_is_page_designer_shared   => true );
    --
    store_comp_type_tmpl_option (
        p_component_type_id         => c_comp_type_list_tmpl_option,
        p_parent_comp_type_id       => c_comp_type_list_template,
        p_type_name                 => 'LIST',
        p_edit_page_no              => 4655 );
    --
    store_component_type (
        p_id                        => c_comp_type_bc_template,
        p_name                      => 'BREADCRUMB_TEMPLATE',
        p_singular_title            => 'Breadcrumb Template',
        p_plural_title              => 'Breadcrumb Templates',
        p_table_name                => 'WWV_FLOW_MENU_TEMPLATES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_menu_template',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'NAME',
        p_create_url                => 'f?p=4000:162:%session%:::162:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:289:%session%:::289:F4000_P289_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:636:%session%:::636,596:FB_FLOW_ID,P636_FROM_TEMPLATE_ID:%application_id%,%pk_value%',
        p_file_path                 => 'breadcrumb_templates#ext#',
        p_is_page_designer_shared   => true );
    --
    store_comp_type_tmpl_option (
        p_component_type_id         => c_comp_type_bc_tmpl_option,
        p_parent_comp_type_id       => c_comp_type_bc_template,
        p_type_name                 => 'BREADCRUMB',
        p_edit_page_no              => 289 );
    --
    store_component_type (
        p_id                        => c_comp_type_calendar_template,
        p_name                      => 'CALENDAR_TEMPLATE',
        p_singular_title            => 'Legacy Calendar Template',
        p_plural_title              => 'Legacy Calendar Templates',
        p_table_name                => 'WWV_FLOW_CAL_TEMPLATES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_calendar_template',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'NAME',
        p_create_url                => 'f?p=4000:162:%session%:::162:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:697:%session%:::697:F4000_P697_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'legacy_calendar_templates#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_report_template,
        p_name                      => 'REPORT_TEMPLATE',
        p_singular_title            => 'Classic Report Template',
        p_plural_title              => 'Classic Report Templates',
        p_table_name                => 'WWV_FLOW_ROW_TEMPLATES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_row_template',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'ROW_TEMPLATE_NAME',
        p_create_url                => 'f?p=4000:162:%session%:::162:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:258:%session%:::258:F4000_P258_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:569:%session%:::569:FB_FLOW_ID,P569_FROM_TEMPLATE_ID:%application_id%,%pk_value%',
        p_file_path                 => 'classic_report_templates#ext#',
        p_is_page_designer_shared   => true );
    --
    store_comp_type_tmpl_option (
        p_component_type_id     => c_comp_type_report_tmpl_option,
        p_parent_comp_type_id   => c_comp_type_report_template,
        p_type_name             => 'REPORT',
        p_edit_page_no          => 258 );       --column template
    --
/* $$$ the following block is commented out due to the presence of 2 edit pages for report templates $$$ */
/*    store_comp_type_tmpl_option (
        p_component_type_id     => c_comp_type_report_tmpl_option,
        p_parent_comp_type_id   => c_comp_type_report_template,
        p_type_name             => 'REPORT_ROW',
        p_edit_page_no          => 4654 );      -- row template */
    --
    store_component_type (
        p_id                        => c_comp_type_popup_lov_template,
        p_name                      => 'POPUP_LOV_TEMPLATE',
        p_singular_title            => 'Popup LOV Template',
        p_plural_title              => 'Popup LOV Templates',
        p_table_name                => 'WWV_FLOW_POPUP_LOV_TEMPLATE',
        p_import_api_name           => 'wwv_flow_imp_shared.create_popup_lov_template',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'PAGE_TITLE',
        p_edit_url                  => 'f?p=4000:251:%session%:::251:F4000_P251_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'popup_lov_templates#ext#',
        p_is_page_designer_shared   => true );
    --
    -- Shared Component related component types
    store_component_type (
        p_id                        => c_comp_type_app_item,
        p_name                      => 'APP_ITEM',
        p_singular_title            => 'Application Item',
        p_plural_title              => 'Application Items',
        p_table_name                => 'WWV_FLOW_ITEMS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_flow_item',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_create_url                => 'f?p=4000:4303:%session%:::4303:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4303:%session%:::4303:F4000_P4303_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/app_items#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_app_computation,
        p_name                      => 'APP_COMPUTATION',
        p_singular_title            => 'Application Computation',
        p_plural_title              => 'Application Computations',
        p_table_name                => 'WWV_FLOW_COMPUTATIONS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_flow_computation',
        p_view_name                 => 'APEX_APPLICATION_COMPUTATIONS',
        p_parent_component_type_id  => C_COMP_TYPE_APPLICATION,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'COMPUTATION_ITEM',
        p_edit_url                  => 'f?p=4000:4304:%session%::::F4000_P4304_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/app_computations#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_app_process,
        p_name                      => 'APP_PROCESS',
        p_singular_title            => 'Application Process',
        p_plural_title              => 'Application Processes',
        p_table_name                => 'WWV_FLOW_PROCESSING',
        p_import_api_name           => 'wwv_flow_imp_shared.create_flow_process',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'PROCESS_NAME',
        p_create_url                => 'f?p=4000:147:%session%:::147,148,150:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4309:%session%::::F4000_P4309_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/app_processes#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_build_option,
        p_name                      => 'BUILD_OPTION',
        p_singular_title            => 'Build Option',
        p_plural_title              => 'Build Options',
        p_table_name                => 'WWV_FLOW_PATCHES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_build_option',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'PATCH_NAME',
        p_create_url                => 'f?p=4000:4911:%session%:::4911:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4911:%session%:::4911:F4000_P4911_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:4912:%session%:::4912:P4912_ID,FB_FLOW_ID,P4912_COPY_SOURCE,P4912_COPY_FROM_APPLICATION_ID:%pk_value%,%application_id%,THIS,%application_id%',
        p_file_path                 => 'shared_components/build_options#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_authentication,
        p_name                      => 'AUTHENTICATION',
        p_singular_title            => 'Authentication',
        p_plural_title              => 'Authentications',
        p_table_name                => 'WWV_FLOW_AUTHENTICATIONS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_authentication',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_plugin_type               => 'AUTHENTICATION TYPE',
        p_plugin_column             => 'SCHEME_TYPE',
        p_create_url                => 'f?p=4000:815:%session%:::815,4495:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4495:%session%::::P4495_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/authentications#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_authorization,
        p_name                      => 'AUTHORIZATION',
        p_singular_title            => 'Authorization',
        p_plural_title              => 'Authorizations',
        p_table_name                => 'WWV_FLOW_SECURITY_SCHEMES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_security_scheme',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_plugin_type               => 'AUTHORIZATION TYPE',
        p_plugin_column             => 'SCHEME_TYPE',
        p_create_url                => 'f?p=4000:184:%session%::::FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4008:%session%::::F4000_P4008_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:493:%session%:::493:FB_FLOW_ID,P493_ID:%application_id%,%pk_value%',
        p_file_path                 => 'shared_components/authorizations#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_acl_role,
        p_name                      => 'ACL_ROLE',
        p_singular_title            => 'Role',
        p_plural_title              => 'Roles',
        p_table_name                => 'WWV_FLOW_FND_USER_GROUPS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_acl_role',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'GROUP_NAME',
        p_create_url                => 'f?p=4000:2320:%session%:::RP,2320:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:2320:%session%:::RP,2320:F4000_P2320_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/acl_roles#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_dualityview_src,
        p_name                      => 'DUALITY_VIEW_SOURCE',
        p_singular_title            => 'Duality View',
        p_plural_title              => 'Duality Views',
        p_table_name                => 'WWV_FLOW_DUALITY_VIEW_SOURCES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_document_source',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:7110:%session%:::RP,7110:FB_FLOW_ID,P7100_SOURCE_TYPE,P7110_ID:%application_id%,DUALITY_VIEW,%pk_value%',
        p_copy_url                  => null,
        p_file_path                 => 'shared_components/duality_view_sources#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_jsondocument_src,
        p_name                      => 'JSON_DOCUMENT_SOURCE',
        p_singular_title            => 'JSON Source',
        p_plural_title              => 'JSON Sources',
        p_table_name                => 'WWV_FLOW_JSON_SOURCES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_document_source',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:7110:%session%:::RP,7110:FB_FLOW_ID,P7100_SOURCE_TYPE,P7110_ID:%application_id%,JSON_TABLE,%pk_value%',
        p_copy_url                  => null,
        p_file_path                 => 'shared_components/json_collection_sources#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_ai_config,
        p_name                      => 'AI_CONFIG',
        p_singular_title            => 'AI Configuration',
        p_plural_title              => 'AI Configurations',
        p_table_name                => 'WWV_FLOW_AI_CONFIGS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_ai_config',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_create_url                => 'f?p=4000:3504:%session%:::RP,3504:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:3504:%session%:::RP,3504:FB_FLOW_ID,P3504_ID:%application_id%,%pk_value%',
        p_copy_url                  => null,
        p_file_path                 => 'shared_components/ai_configs#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_ai_config_rag_src,
        p_name                      => 'AI_CONFIG_RAG_SOURCE',
        p_singular_title            => 'RAG Source',
        p_plural_title              => 'RAG Sources',
        p_table_name                => 'WWV_FLOW_AI_CONFIG_RAG_SOURCES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_ai_config_rag_source',
        p_parent_component_type_id  => c_comp_type_ai_config,
        p_parent_fk_column          => 'AI_CONFIG_ID',
        p_display_column            => 'NAME',
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:3505:%session%:::RP,3505:FB_FLOW_ID,P3505_ID:%application_id%,%pk_value%',
        p_copy_url                  => null );
    --
    store_component_type (
        p_id                        => c_comp_type_web_src_module,
        p_name                      => 'WEB_SRC_MODULE',
        p_singular_title            => 'REST Data Source',
        p_plural_title              => 'REST Data Sources',
        p_table_name                => 'WWV_FLOW_WEB_SRC_MODULES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_web_source_module',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_plugin_type               => 'WEB SOURCE TYPE',
        p_plugin_column             => 'WEB_SOURCE_TYPE',
        p_where_clause              => null,
        p_create_url                => 'f?p=4000:1905:%session%:::1941,1942,1943,1944,1946,1905:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:1921:%session%:::RP,1921:P1921_WEB_SRC_MODULE_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => null,
        p_file_path                 => 'shared_components/rest_data_sources#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_web_src_array_col,
        p_name                      => 'WEB_SRC_ARRAY_COLUMN',
        p_singular_title            => 'Nested Rows',
        p_plural_title              => 'Nested Row Columns',
        p_table_name                => 'WWV_FLOW_SRC_ARR_COLS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_data_profile_col',
        p_parent_component_type_id  => c_comp_type_web_src_module,
        p_parent_fk_column          => 'WEB_SRC_MODULE_ID',
        p_display_column            => 'DISPLAY_NAME',
        p_where_clause              => null,
        p_create_url                => null,
        p_edit_url                  => null,
        p_copy_url                  => null,
        p_file_path                 => 'shared_components/rest_data_sources/nested_rows#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_dualityvw_arr_col,
        p_name                      => 'DUALITY_VIEW_SRC_ARRAY_COLUMN',
        p_singular_title            => 'Nested Rows',
        p_plural_title              => 'Nested Row Columns',
        p_table_name                => 'WWV_FLOW_SRC_ARR_COLS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_data_profile_col',
        p_parent_component_type_id  => c_comp_type_dualityview_src,
        p_parent_fk_column          => 'DOCUMENT_SOURCE_ID',
        p_display_column            => 'DISPLAY_NAME',
        p_where_clause              => null,
        p_create_url                => null,
        p_edit_url                  => null,
        p_copy_url                  => null,
        p_file_path                 => 'shared_components/duality_view_sources/nested_rows#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_jsoncoll_arr_col,
        p_name                      => 'JSON_COLLECTION_SRC_ARRAY_COLUMN',
        p_singular_title            => 'Nested Rows',
        p_plural_title              => 'Nested Row Columns',
        p_table_name                => 'WWV_FLOW_SRC_ARR_COLS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_data_profile_col',
        p_parent_component_type_id  => c_comp_type_jsondocument_src,
        p_parent_fk_column          => 'DOCUMENT_SOURCE_ID',
        p_display_column            => 'DISPLAY_NAME',
        p_where_clause              => null,
        p_create_url                => null,
        p_edit_url                  => null,
        p_copy_url                  => null,
        p_file_path                 => 'shared_components/json_collection_sources/nested_rows#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_web_src_mod_param,
        p_name                      => 'WEB_SRC_MODULE_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_WEB_SRC_PARAMS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_web_source_param',
        p_parent_component_type_id  => c_comp_type_web_src_module,
        p_parent_fk_column          => 'WEB_SRC_MODULE_ID',
        p_display_column            => 'NAME',
        p_where_clause              => 'web_src_operation_id is null',
        p_create_url                => null,
        p_edit_url                  => null,
        p_copy_url                  => null,
        p_is_page_designer_shared   => true );
    --
    store_comp_type_data_profile (
        p_profile_type_id           => c_comp_type_web_src_mod_dp,
        p_column_type_id            => c_comp_type_web_src_mod_dp_col,
        p_name_prefix               => 'WEB_SRC_MODULE',
        p_parent_type_id            => c_comp_type_web_src_module,
        p_parent_fk_column          => 'WEB_SRC_MODULE_ID' );
    --
    store_comp_type_data_profile (
        p_profile_type_id           => c_comp_type_dualityvw_dp,
        p_column_type_id            => c_comp_type_dualityvw_dp_col,
        p_name_prefix               => 'DUALITY_VIEW',
        p_parent_type_id            => c_comp_type_dualityview_src,
        p_parent_fk_column          => 'DOCUMENT_SOURCE_ID' );
    --
    store_comp_type_data_profile (
        p_profile_type_id           => c_comp_type_jsoncoll_dp,
        p_column_type_id            => c_comp_type_jsoncoll_dp_col,
        p_name_prefix               => 'JSON_COLLECTION',
        p_parent_type_id            => c_comp_type_jsondocument_src,
        p_parent_fk_column          => 'DOCUMENT_SOURCE_ID' );
    --
    store_component_type (
        p_id                        => c_comp_type_web_src_operation,
        p_name                      => 'WEB_SRC_OPERATION',
        p_singular_title            => 'Operation',
        p_plural_title              => 'Operations',
        p_table_name                => 'WWV_FLOW_WEB_SRC_OPERS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_web_source_operation',
        p_parent_component_type_id  => c_comp_type_web_src_module,
        p_parent_fk_column          => 'WEB_SRC_MODULE_ID',
        p_display_column            => 'DISPLAY_NAME',
        p_where_clause              => null,
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:1922:%session%::NO:1922,RP:P1922_ID:%pk_value%',
        p_copy_url                  => null,
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_web_src_oper_param,
        p_name                      => 'WEB_SRC_OPER_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_WEB_SRC_PARAMS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_web_source_param',
        p_parent_component_type_id  => c_comp_type_web_src_operation,
        p_parent_fk_column          => 'WEB_SRC_OPERATION_ID',
        p_display_column            => 'NAME',
        p_where_clause              => 'web_src_operation_id is not null',
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:1922:%session%::NO:1922,RP:P1922_ID:%parent_pk_value%',
        p_copy_url                  => null,
        p_is_page_designer_shared   => true );
    --
    store_comp_type_data_profile (
        p_profile_type_id           => c_comp_type_web_src_oper_dp,
        p_column_type_id            => c_comp_type_web_src_oper_dpcol,
        p_name_prefix               => 'WEB_SRC_OPERATION',
        p_parent_type_id            => c_comp_type_web_src_operation,
        p_parent_fk_column          => 'WEB_SRC_OPERATION_ID' );
    --
    store_component_type (
        p_id                        => c_comp_type_web_src_sync_step,
        p_name                      => 'WEB_SRC_SYNC_STEP',
        p_singular_title            => 'Synchronization Step',
        p_plural_title              => 'Synchronization Steps',
        p_table_name                => 'WWV_FLOW_WEB_SRC_SYNC_STEPS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_web_source_sync_step',
        p_parent_component_type_id  => c_comp_type_web_src_module,
        p_parent_fk_column          => 'WEB_SRC_MODULE_ID',
        p_display_column            => 'STATIC_ID',
        p_where_clause              => null,
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:1951:%session%::NO:1951,RP:P1951_WEB_SRC_MODULE_ID:%parent_pk_value%',
        p_copy_url                  => null );
    --
    store_component_type (
        p_id                        => c_comp_type_web_src_sync_param,
        p_name                      => 'WEB_SRC_SYNC_STEP_WS_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_WEB_SRC_CPARAMS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_web_source_comp_param',
        p_view_name                 => 'APEX_APPL_WEB_SRC_COMP_PARAMS',
        p_parent_component_type_id  => c_comp_type_web_src_sync_step,
        p_parent_fk_column          => 'MODULE_SYNC_STEP_ID',
        p_display_column            => 'WEB_SRC_PARAM_ID' );
    --
    store_component_type (
        p_id                        => c_comp_type_web_src_query,
        p_name                      => 'WEB_SRC_QUERY',
        p_singular_title            => 'REST Source Query',
        p_plural_title              => 'REST Source Query',
        p_table_name                => 'WWV_FLOW_WEB_SRC_MODULES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_web_source_module',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_where_clause              => q'~exists( select 1 from wwv_flow_web_src_operations where web_src_module_id=wwv_flow_web_src_modules.id and database_operation = 'FETCH_COLLECTION')~',
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:1921:%session%::NO:1921,RP:P1921_WEB_SRC_MODULE_ID:%pk_value%',
        p_copy_url                  => null,
        p_is_page_designer_shared   => true,
        p_is_query_only             => true );
    --
    -- Helper component type to get all parameters of a web src module (incl. operation parameters)
    -- This is needed for wwv_flow_web_src_comp_params
    store_component_type (
        p_id                        => c_comp_type_web_src_param,
        p_name                      => 'WEB_SRC_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_WEB_SRC_PARAMS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_web_source_param',
        p_parent_component_type_id  => c_comp_type_web_src_module,
        p_parent_fk_column          => 'WEB_SRC_MODULE_ID',
        p_display_column            => 'NAME',
        p_where_clause              => null,
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:1922:%session%::NO:1922,RP:P1922_ID:%parent_pk_value%',
        p_copy_url                  => null,
        p_is_page_designer_shared   => true,
        p_is_query_only             => true );
    --
    store_component_type (
        p_id                        => c_comp_type_application_file,
        p_name                      => 'STATIC_APPLICATION_FILE',
        p_singular_title            => 'Static Application File',
        p_plural_title              => 'Static Application Files',
        p_table_name                => 'WWV_FLOW_STATIC_FILES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_static_file',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'FILE_NAME',
        p_create_url                => 'f?p=4000:271:%session%:::RP,271:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:275:%session%:::RP,275:P275_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => null,
        p_file_path                 => 'shared_components/app_static_files#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_text_message,
        p_name                      => 'TEXT_MESSAGE',
        p_singular_title            => 'Text Message',
        p_plural_title              => 'Text Messages',
        p_table_name                => 'WWV_FLOW_MESSAGES$',
        p_import_api_name           => 'wwv_flow_imp_shared.create_message',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:4009:%session%:::4009:P4009_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/messages#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_app_setting,
        p_name                      => 'APP_SETTING',
        p_singular_title            => 'Application Setting',
        p_plural_title              => 'Application Settings',
        p_table_name                => 'WWV_FLOW_APP_SETTINGS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_app_setting',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:4851:%session%:::4851:F4000_P4851_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_pwa_shortcut,
        p_name                      => 'PWA_SHORTCUT',
        p_singular_title            => 'PWA Shortcut',
        p_plural_title              => 'PWA Shortcuts',
        p_table_name                => 'WWV_FLOW_PWA_SHORTCUTS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_pwa_shortcut',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:508:%session%:::508:F4000_P508_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_pwa_screenshot,
        p_name                      => 'PWA_SCREENSHOT',
        p_singular_title            => 'PWA Screenshot',
        p_plural_title              => 'PWA Screenshots',
        p_table_name                => 'WWV_FLOW_PWA_SCREENSHOTS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_pwa_screenshot',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'LABEL',
        p_edit_url                  => 'f?p=4000:519:%session%:::519:F4000_P519_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_classic_nav_bar,
        p_name                      => 'CLASSIC_NAV_BAR',
        p_singular_title            => 'Classic Navigation Bar Entry',
        p_plural_title              => 'Classic Navigation Bar Entries',
        p_table_name                => 'WWV_FLOW_ICON_BAR',
        p_import_api_name           => 'wwv_flow_imp_shared.create_icon_bar_item',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'ICON_SUBTEXT',
        p_edit_url                  => 'f?p=4000:4308:%session%::::F4000_P4308_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/classic_navigation_bar_entries#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_breadcrumb,
        p_name                      => 'BREADCRUMB',
        p_singular_title            => 'Breadcrumb',
        p_plural_title              => 'Breadcrumbs',
        p_table_name                => 'WWV_FLOW_MENUS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_menu',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_create_url                => 'f?p=4000:288:%session%:::RP,288:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:104:%session%:::RP,104:FB_FLOW_ID,FB_FLOW_PAGE_ID,P104_PAGE_ID,P104_MENU_ID:%application_id%,%page_id%,%page_id%,%pk_value%',
        p_copy_url                  => null,
        p_file_path                 => 'shared_components/breadcrumbs#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_breadcrumb_entry,
        p_name                      => 'BREADCRUMB_ENTRY',
        p_singular_title            => 'Entry',
        p_plural_title              => 'Entries',
        p_table_name                => 'WWV_FLOW_MENU_OPTIONS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_menu_option',
        p_parent_component_type_id  => c_comp_type_breadcrumb,
        p_parent_fk_column          => 'MENU_ID',
        p_display_column            => 'SHORT_NAME',
        p_create_url                => 'f?p=4000:290:%session%:::RP,290:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:290:%session%:::RP,290:F4000_P290_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => null );
    --
    store_component_type (
        p_id                        => c_comp_type_list,
        p_name                      => 'LIST',
        p_singular_title            => 'List',
        p_plural_title              => 'Lists',
        p_table_name                => 'WWV_FLOW_LISTS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_list',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_create_url                => 'f?p=4000:427:%session%:::427,440,464,529,734:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4050:%session%:::RP,4050:FB_FLOW_ID,FB_FLOW_PAGE_ID,F4000_P4050_LIST_ID:%application_id%,%page_id%,%pk_value%',
        p_copy_url                  => 'f?p=4000:663:%session%:::663:FB_FLOW_ID,P663_ID:%application_id%,%pk_value%',
        p_file_path                 => 'shared_components/lists#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_list_entry,
        p_name                      => 'LIST_ENTRY',
        p_singular_title            => 'Entry',
        p_plural_title              => 'Entries',
        p_table_name                => 'WWV_FLOW_LIST_ITEMS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_list_item',
        p_parent_component_type_id  => c_comp_type_list,
        p_parent_fk_column          => 'LIST_ID',
        p_display_column            => 'LIST_ITEM_LINK_TEXT',
        p_create_url                => 'f?p=4000:4052:%session%:::RP,4052,4050:F4000_P4050_LIST_ID,FB_FLOW_ID:%parent_pk_value%,%application_id%',
        p_edit_url                  => 'f?p=4000:4052:%session%:::RP,4052,4050:F4000_P4052_ID,F4000_P4050_LIST_ID,FB_FLOW_ID:%pk_value%,%parent_pk_value%,%application_id%',
        p_copy_url                  => null );
    --
    store_component_type (
        p_id                        => c_comp_type_lov,
        p_name                      => 'LOV',
        p_singular_title            => 'List of Values',
        p_plural_title              => 'Lists of Values',
        p_table_name                => 'WWV_FLOW_LOVS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_list_of_values',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'LOV_NAME',
        p_create_url                => 'f?p=4000:137:%session%:::4004,4007,4014,137,138,139:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4111:%session%:::4111:F4000_P4111_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:603:%session%:::603:FB_FLOW_ID,P603_ID:%application_id%,%pk_value%',
        p_file_path                 => 'shared_components/lovs#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_lov_entry,
        p_name                      => 'LOV_ENTRY',
        p_singular_title            => 'Entry',
        p_plural_title              => 'Entries',
        p_table_name                => 'WWV_FLOW_LIST_OF_VALUES_DATA',
        p_import_api_name           => 'wwv_flow_imp_shared.create_static_lov_data',
        p_parent_component_type_id  => c_comp_type_lov,
        p_parent_fk_column          => 'LOV_ID',
        p_display_column            => 'LOV_DISP_VALUE',
        p_create_url                => 'f?p=4000:4113:%session%:::4113,4111:F4000_P4111_ID,FB_FLOW_ID:%parent_pk_value%,%application_id%',
        p_edit_url                  => 'f?p=4000:4113:%session%:::4113,4111:F4000_P4113_ID,F4000_P4111_ID,FB_FLOW_ID:%pk_value%,%parent_pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_lov_column,
        p_name                      => 'LOV_COLUMN',
        p_singular_title            => 'Column',
        p_plural_title              => 'Columns',
        p_table_name                => 'WWV_FLOW_LIST_OF_VALUES_COLS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_list_of_values_cols',
        p_parent_component_type_id  => c_comp_type_lov,
        p_parent_fk_column          => 'LOV_ID',
        p_display_column            => 'QUERY_COLUMN_NAME',
        p_create_url                => 'f?p=4000:4111:%session%:::4111:F4000_P4111_ID,FB_FLOW_ID:%parent_pk_value%,%application_id%',
        p_edit_url                  => 'f?p=4000:4111:%session%:::4111:F4000_P4111_ID,FB_FLOW_ID:%parent_pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_lov_ws_param,
        p_name                      => 'LOV_WS_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_WEB_SRC_CPARAMS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_web_source_comp_param',
        p_view_name                 => 'APEX_APPL_WEB_SRC_COMP_PARAMS',
        p_parent_component_type_id  => c_comp_type_lov,
        p_parent_fk_column          => 'SHARED_LOV_ID',
        p_display_column            => 'WEB_SRC_PARAM_ID' );
    --
    store_component_type (
        p_id                        => c_comp_type_ws_ref,
        p_name                      => 'WEB_SERVICE_REFERENCE',
        p_singular_title            => 'Web Service Reference',
        p_plural_title              => 'Web Service References',
        p_table_name                => 'WWV_FLOW_SHARED_WEB_SERVICES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_web_service',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_create_url                => 'f?p=4000:870:%session%:::550,555,560,565,570,575,580,585,595,870,871,872,873,874,875,REST_INPUT_PARMS,REST_OUTPUT_PARMS,REST_HTTP_HEADERS:FB_FLOW_ID:%application_id%',
        p_copy_url                  => '',
        p_edit_url                  => '',  /* web services do have different edit pages */
        p_file_path                 => 'shared_components/legacy_web_service_references#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_ws_ref_operations,
        p_name                      => 'WEB_SERVICE_REFERENCE_OPERATION',
        p_singular_title            => 'Operation',
        p_plural_title              => 'Operations',
        p_table_name                => 'WWV_FLOW_WS_OPERATIONS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_ws_operations',
        p_parent_component_type_id  => c_comp_type_ws_ref,
        p_parent_fk_column          => 'WS_ID',
        p_display_column            => 'FULL_NAME',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_ws_ref_oper_p_i,
        p_name                      => 'WEB_SERVICE_REF_OPER_PARAM_I',
        p_singular_title            => 'In Parameter',
        p_plural_title              => 'In Parameters',
        p_table_name                => 'WWV_FLOW_WS_OPER_PARAM_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_ws_parameters',
        p_parent_component_type_id  => c_comp_type_ws_ref_operations,
        p_parent_fk_column          => 'WS_OPERS_ID',
        p_display_column            => 'NAME',
        p_where_clause              => q'~input_or_output = 'I' ~',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_ws_ref_oper_p_o,
        p_name                      => 'WEB_SERVICE_REF_OPER_PARAM_O',
        p_singular_title            => 'Out Parameter',
        p_plural_title              => 'Out Parameters',
        p_table_name                => 'WWV_FLOW_WS_OPER_PARAM_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_ws_parameters',
        p_parent_component_type_id  => c_comp_type_ws_ref_operations,
        p_parent_fk_column          => 'WS_OPERS_ID',
        p_display_column            => 'NAME',
        p_where_clause              => q'~input_or_output = 'O' ~',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_ws_ref_oper_p_a,
        p_name                      => 'WEB_SERVICE_REF_OPER_PARAM_A',
        p_singular_title            => 'Basic Authentication Parameter',
        p_plural_title              => 'Basic Authentication Parameters',
        p_table_name                => 'WWV_FLOW_WS_OPER_PARAM_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_ws_parameters',
        p_parent_component_type_id  => c_comp_type_ws_ref_operations,
        p_parent_fk_column          => 'WS_OPERS_ID',
        p_display_column            => 'NAME',
        p_where_clause              => q'~input_or_output = 'A' ~',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_ws_ref_oper_p_h,
        p_name                      => 'WEB_SERVICE_REF_OPER_PARAM_H',
        p_singular_title            => 'HTTP Header Parameter',
        p_plural_title              => 'HTTP Header Parameters',
        p_table_name                => 'WWV_FLOW_WS_OPER_PARAM_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_ws_parameters',
        p_parent_component_type_id  => c_comp_type_ws_ref_operations,
        p_parent_fk_column          => 'WS_OPERS_ID',
        p_display_column            => 'NAME',
        p_where_clause              => q'~input_or_output = 'H' ~',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_data_load_def,
        p_name                      => 'DATA_LOAD_DEFINITION',
        p_singular_title            => 'Data Load Definition',
        p_plural_title              => 'Data Load Definitions',
        p_table_name                => 'WWV_FLOW_LOAD_TABLES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_load_table',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_where_clause              => q'~target_type is not null ~',
        p_edit_url                  => 'f?p=4000:1820:%session%:::1820:P1820_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/data_load_definitions#ext#',
        p_is_page_designer_shared   => true );
    --
    store_comp_type_data_profile (
        p_profile_type_id           => c_comp_type_data_load_dp,
        p_column_type_id            => c_comp_type_data_load_dp_col,
        p_name_prefix               => 'DATA_LOAD_DEF',
        p_parent_type_id            => c_comp_type_data_load_def,
        p_parent_fk_column          => 'LOAD_TABLE_ID' );
    --
    store_component_type (
        p_id                        => c_comp_type_legacy_data_load,
        p_name                      => 'DATA_LOAD_TABLE',
        p_singular_title            => 'Legacy Data Load Definition',
        p_plural_title              => 'Legacy Data Load Definitions',
        p_table_name                => 'WWV_FLOW_LOAD_TABLES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_load_table',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_where_clause              => q'~target_type is null ~',
        p_edit_url                  => 'f?p=4000:1801:%session%:::1801:P1801_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/legacy_data_load_definitions#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_tab_set,
        p_name                      => 'TAB SET',
        p_singular_title            => 'Standard Tab Set',
        p_plural_title              => 'Standard Tab Sets',
        p_table_name                => 'WWV_FLOW_TABSET_VIEW',
        p_import_api_name           => 'wwv_flow_imp_shared.create_tab',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'D',
        p_edit_url                  => 'f?p=4000:643:%session%:::643:FB_FLOW_ID:%application_id%',
        p_file_path                 => 'shared_components/legacy_tabs#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_report_layout,
        p_name                      => 'REPORT LAYOUT',
        p_singular_title            => 'Report Layout',
        p_plural_title              => 'Report Layouts',
        p_table_name                => 'WWV_FLOW_REPORT_LAYOUTS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_report_layout',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'REPORT_LAYOUT_NAME',
        p_edit_url                  => 'f?p=4000:4111:%session%:::4111:F4000_P4111_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/report_layouts#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_report_query,
        p_name                      => 'REPORT_QUERY',
        p_singular_title            => 'Report Query',
        p_plural_title              => 'Report Queries',
        p_table_name                => 'WWV_FLOW_SHARED_QUERIES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_shared_query',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:1116:%session%:::1116,1117,1112:P1116_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/report_queries#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_report_query_stmt,
        p_name                      => 'REPORT_QUERY_STATEMENT',
        p_singular_title            => 'Source Query',
        p_plural_title              => 'Source Queries',
        p_table_name                => 'WWV_FLOW_SHARED_QRY_STMTS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_shared_query_stmnt',
        p_parent_component_type_id  => c_comp_type_report_query,
        p_parent_fk_column          => 'SHARED_QUERY_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:1116:%session%:::1116,1117,1112:P1116_ID,FB_FLOW_ID:%parent_pk_value%,%application_id%' ); -- intentionally pointing to parent page because collections have to be populated
    --
    store_component_type (
        p_id                        => c_comp_type_automation,
        p_name                      => 'AUTOMATION',
        p_singular_title            => 'Automation',
        p_plural_title              => 'Automations',
        p_table_name                => 'WWV_FLOW_AUTOMATIONS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_automation',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:7021:%session%:::RP,7021:P7021_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/automations#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_autom_ws_param,
        p_name                      => 'AUTOMATION_WS_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_WEB_SRC_CPARAMS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_web_source_comp_param',
        p_view_name                 => 'APEX_APPL_WEB_SRC_COMP_PARAMS',
        p_parent_component_type_id  => c_comp_type_automation,
        p_parent_fk_column          => 'AUTOMATION_ID',
        p_display_column            => 'WEB_SRC_PARAM_ID' );
    --
    store_component_type (
        p_id                        => c_comp_type_automation_action,
        p_name                      => 'AUTOMATION_ACTION',
        p_singular_title            => 'Action',
        p_plural_title              => 'Actions',
        p_table_name                => 'WWV_FLOW_AUTOMATION_ACTIONS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_automation_action',
        p_parent_component_type_id  => c_comp_type_automation,
        p_parent_fk_column          => 'AUTOMATION_ID',
        p_display_column            => 'NAME',
        p_plugin_type               => 'PROCESS TYPE',
        p_plugin_column             => 'ACTION_TYPE',
        p_edit_url                  => 'f?p=4000:7022:%session%:::RP,7022:P7022_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_search_config,
        p_name                      => 'SEARCH_CONFIG',
        p_singular_title            => 'Search Configuration',
        p_plural_title              => 'Search Configurations',
        p_table_name                => 'WWV_FLOW_SEARCH_CONFIGS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_search_config',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'LABEL',
        p_edit_url                  => 'f?p=4000:3120:%session%:::3120:P3120_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/search_configs#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_search_ws_param,
        p_name                      => 'SEARCH_CONFIG_WS_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_WEB_SRC_CPARAMS_DEV',
        p_view_name                 => 'APEX_APPL_WEB_SRC_COMP_PARAMS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_web_source_comp_param',
        p_parent_component_type_id  => c_comp_type_search_config,
        p_parent_fk_column          => 'SEARCH_CONFIG_ID',
        p_display_column            => 'WEB_SRC_PARAM_ID' );
    --
    store_component_type (
        p_id                        => c_comp_type_email_template,
        p_name                      => 'EMAIL_TEMPLATE',
        p_singular_title            => 'Email Template',
        p_plural_title              => 'Email Templates',
        p_table_name                => 'WWV_FLOW_EMAIL_TEMPLATES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_email_template',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_create_url                => 'f?p=4000:4861:%session%:::RP,4861:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4861:%session%:::RP,4861:F4000_P4861_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/email_templates#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_language_map,
        p_name                      => 'LANGUAGE_MAP',
        p_singular_title            => 'Language Mapping',
        p_plural_title              => 'Language Mappings',
        p_table_name                => 'WWV_FLOW_LANGUAGE_MAP',
        p_import_api_name           => 'wwv_flow_imp_shared.create_language_map',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'PRIMARY_LANGUAGE_FLOW_ID',
        p_display_column            => 'TRANSLATION_FLOW_LANGUAGE_CODE',
        p_edit_url                  => 'f?p=4000:4754:%session%:::4754:P4754_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_dyn_translation,
        p_name                      => 'DYNAMIC_TRANSLATION',
        p_singular_title            => 'Dynamic Translation',
        p_plural_title              => 'Dynamic Translations',
        p_table_name                => 'WWV_FLOW_DYNAMIC_TRANSLATIONS$',
        p_import_api_name           => 'wwv_flow_imp_shared.create_dynamic_translation',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'TRANSLATE_FROM_TEXT',
        p_edit_url                  => 'f?p=4000:4757:%session%:::4757:F4000_P4757_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/dynamic_translations#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_concatenated_file,
        p_name                      => 'CONCATENATED_FILE',
        p_singular_title            => 'Concatenated File',
        p_plural_title              => 'Concatenated Files',
        p_table_name                => 'WWV_FLOW_COMBINED_FILES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_combined_file',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'COMBINED_FILE_URL',
        p_edit_url                  => 'f?p=4000:209:%session%::NO:209:P209_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/concatenated_files#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_task_def,
        p_name                      => 'TASK_DEF',
        p_singular_title            => 'Task Definition',
        p_plural_title              => 'Task Definitions',
        p_table_name                => 'WWV_FLOW_TASK_DEFS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_task_def',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:9502:%session%:::9502:P9502_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/task_definitions#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_task_def_param,
        p_name                      => 'TASK_DEF_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_TASK_DEF_PARAMS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_task_def_param',
        p_parent_component_type_id  => c_comp_type_task_def,
        p_parent_fk_column          => 'TASK_DEF_ID',
        p_display_column            => 'LABEL',
        p_where_clause              => null,
        p_create_url                => null,
        p_edit_url                  => 'f?p=4000:9502:%session%::NO:RP,9502:P9502_ID,FB_FLOW_ID:%parent_pk_value%,%application_id%',
        p_copy_url                  => null,
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_task_def_action,
        p_name                      => 'TASK_DEF_ACTION',
        p_singular_title            => 'Action',
        p_plural_title              => 'Actions',
        p_table_name                => 'WWV_FLOW_TASK_DEF_ACTIONS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_task_def_action',
        p_parent_component_type_id  => c_comp_type_task_def,
        p_parent_fk_column          => 'TASK_DEF_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:9506:%session%::NO:RP,9506:P9506_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_plugin_type               => 'PROCESS TYPE',
        p_plugin_column             => 'ACTION_TYPE' );
    --
    store_component_type (
        p_id                        => c_comp_type_task_def_particip,
        p_name                      => 'TASK_DEF_PARTICIPANT',
        p_singular_title            => 'Participant',
        p_plural_title              => 'Participants',
        p_table_name                => 'WWV_FLOW_TASK_DEF_PARTICIPANTS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_task_def_participant',
        p_parent_component_type_id  => c_comp_type_task_def,
        p_parent_fk_column          => 'TASK_DEF_ID',
        p_display_column            => 'PARTICIPANT_TYPE',
        p_edit_url                  => 'f?p=4000:9502:%session%::NO:RP,9502:P9502_ID,FB_FLOW_ID:%parent_pk_value%,%application_id%');
    --
    store_component_type (
        p_id                        => c_comp_type_workflow,
        p_name                      => 'WORKFLOW',
        p_singular_title            => 'Workflow',
        p_plural_title              => 'Workflows',
        p_table_name                => 'WWV_FLOW_WORKFLOWS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_workflow',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => null,
        p_file_path                 => 'shared_components/workflows#ext#',
        p_is_page_designer_shared   => true,
        p_is_shared_designer        => true );
    --
    store_component_type (
        p_id                        => c_comp_type_workflow_param,
        p_name                      => 'WORKFLOW_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_WORKFLOW_VARS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_workflow_variable',
        p_parent_component_type_id  => c_comp_type_workflow,
        p_parent_fk_column          => 'WORKFLOW_ID',
        p_display_column            => 'LABEL',
        p_where_clause              => null,
        p_create_url                => null,
        p_edit_url                  => null,
        p_copy_url                  => null,
        p_is_page_designer_shared   => true,
        p_is_shared_designer        => true );
    --
    store_component_type (
        p_id                        => c_comp_type_workflow_version,
        p_name                      => 'WORKFLOW_VERSION',
        p_singular_title            => 'Version',
        p_plural_title              => 'Versions',
        p_table_name                => 'WWV_FLOW_WORKFLOW_VERSIONS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_workflow_version',
        p_parent_component_type_id  => c_comp_type_workflow,
        p_parent_fk_column          => 'WORKFLOW_ID',
        p_display_column            => 'VERSION',
        p_is_page_designer_shared   => false,
        p_is_shared_designer        => true );
    --
    store_component_type (
        p_id                        => c_comp_type_workflow_variable,
        p_name                      => 'WORKFLOW_VARIABLE',
        p_singular_title            => 'Variable',
        p_plural_title              => 'Variables',
        p_table_name                => 'WWV_FLOW_WORKFLOW_VARS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_workflow_variable',
        p_parent_component_type_id  => c_comp_type_workflow_version,
        p_parent_fk_column          => 'WORKFLOW_VERSION_ID',
        p_display_column            => 'LABEL',
        p_is_page_designer_shared   => false,
        p_is_shared_designer        => true );
    --
    store_component_type (
        p_id                        => c_comp_type_workflow_activity,
        p_name                      => 'WORKFLOW_ACTIVITY',
        p_singular_title            => 'Activity',
        p_plural_title              => 'Activities',
        p_table_name                => 'WWV_FLOW_WF_ACTIVITIES_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_workflow_activity',
        p_parent_component_type_id  => c_comp_type_workflow_version,
        p_parent_fk_column          => 'WORKFLOW_VERSION_ID',
        p_display_column            => 'NAME',
        p_plugin_type               => 'PROCESS TYPE',
        p_plugin_column             => 'ACTIVITY_TYPE',
        p_is_page_designer_shared   => false,
        p_is_shared_designer        => true );
    --
    store_component_type (
        p_id                        => c_comp_type_workflow_act_var,
        p_name                      => 'WORKFLOW_ACTIVITY_VARIABLE',
        p_singular_title            => 'Activity Variable',
        p_plural_title              => 'Activity Variables',
        p_table_name                => 'WWV_FLOW_WORKFLOW_VARS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_workflow_variable',
        p_parent_component_type_id  => c_comp_type_workflow_activity,
        p_parent_fk_column          => 'ACTIVITY_ID',
        p_display_column            => 'LABEL',
        p_is_page_designer_shared   => false,
        p_is_shared_designer        => true );
    --
    store_component_type (
        p_id                        => c_comp_type_workflow_trans,
        p_name                      => 'WORKFLOW_TRANSITION',
        p_singular_title            => 'Connection',
        p_plural_title              => 'Connections',
        p_table_name                => 'WWV_FLOW_WORKFLOW_TRANSITIONS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_workflow_transition',
        p_parent_component_type_id  => c_comp_type_workflow_activity,
        p_parent_fk_column          => 'FROM_ACTIVITY_ID',
        p_display_column            => 'NAME',
        p_where_clause              => q'~transition_type <> 'BRANCH' ~',
        p_is_page_designer_shared   => false,
        p_is_shared_designer        => true );
    --
    store_component_type (
        p_id                        => c_comp_type_workflow_branch,
        p_name                      => 'WORKFLOW_BRANCH',
        p_singular_title            => 'Connection',
        p_plural_title              => 'Connections',
        p_table_name                => 'WWV_FLOW_WORKFLOW_BRANCHES_DEV',
        p_parent_component_type_id  => c_comp_type_workflow_activity,
        p_parent_fk_column          => 'FROM_ACTIVITY_ID',
        p_display_column            => 'NAME',
        p_is_page_designer_shared   => false,
        p_is_shared_designer        => true );
    --
    store_component_type (
        p_id                        => c_comp_type_workflow_particip,
        p_name                      => 'WORKFLOW_PARTICIPANT',
        p_singular_title            => 'Participant',
        p_plural_title              => 'Participants',
        p_table_name                => 'WWV_FLOW_WORKFLOW_PARTICIPANTS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_workflow_participant',
        p_parent_component_type_id  => c_comp_type_workflow_version,
        p_parent_fk_column          => 'WORKFLOW_VERSION_ID',
        p_display_column            => 'PARTICIPANT_TYPE',
        p_is_page_designer_shared   => false,
        p_is_shared_designer        => true );
    --
    -- Misc component types
    store_component_type (
        p_id                        => c_comp_type_page_group,
        p_name                      => 'PAGE_GROUP',
        p_singular_title            => 'Page Group',
        p_plural_title              => 'Page Groups',
        p_table_name                => 'WWV_FLOW_PAGE_GROUPS',
        p_import_api_name           => 'wwv_flow_imp_page.create_page_group',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'GROUP_NAME',
        p_edit_url                  => 'f?p=4000:521:%session%::NO:521,RP:P521_ID,FB_FLOW_ID:%parent_pk_value%,%application_id%',
        p_file_path                 => 'page_groups#ext#',
        p_is_page_designer_shared   => true );
    --
    -- Page related component types
    --
    store_component_type (
        p_id                        => c_comp_type_page,
        p_name                      => 'PAGE',
        p_singular_title            => 'Page',
        p_plural_title              => 'Pages',
        p_table_name                => 'WWV_FLOW_STEPS_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGES',
        p_import_api_name           => 'wwv_flow_imp_page.create_page',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_create_url                => 'f?p=4000:2500:%session%:::2500,2501:FB_FLOW_ID:%application_id%',
        p_copy_url                  => 'f?p=4000:618:%session%:::618,301,302,305,308,309:FB_FLOW_ID:%application_id%',
        p_file_path                 => 'pages/' );

    -- Page Rendering
    store_component_type (
        p_id                        => c_comp_type_region,
        p_name                      => 'REGION',
        p_singular_title            => 'Region',
        p_plural_title              => 'Regions',
        p_table_name                => 'WWV_FLOW_PAGE_PLUGS_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_REGIONS',
        p_import_api_name           => 'wwv_flow_imp_page.create_page_plug',
        p_parent_component_type_id  => c_comp_type_page,
        p_parent_fk_column          => 'PAGE_ID',
        p_page_id_column            => 'PAGE_ID',
        p_plugin_type               => 'REGION TYPE',
        p_plugin_column             => 'PLUG_SOURCE_TYPE',
        p_supported_tmpl_components => 'REGION_ONLY:PARTIAL:REPORT', -- The order of the values is important, see wwv_meta_meta_data.populate_custom_plugins
        p_display_column            => 'PLUG_NAME',
        p_copy_url                  => 'f?p=4000:194:%session%:::194:FB_FLOW_ID,F4000_P194_PLUG_ID_FROM,F4000_P194_COPY_FROM_PAGE_ID:%application_id%,%pk_value%,%page_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_page_item,
        p_name                      => 'PAGE_ITEM',
        p_singular_title            => 'Page Item',
        p_plural_title              => 'Page Items',
        p_table_name                => 'WWV_FLOW_STEP_ITEMS_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_ITEMS',
        p_import_api_name           => 'wwv_flow_imp_page.create_page_item',
        p_parent_component_type_id  => c_comp_type_page,
        p_parent_fk_column          => 'FLOW_STEP_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'NAME',
        p_plugin_type               => 'ITEM TYPE',
        p_plugin_column             => 'DISPLAY_AS',
        p_copy_url                  => 'f?p=4000:171:%session%:::171,172:FB_FLOW_ID,F4000_P171_COPY_FROM_ID,F4000_P171_COPY_FROM_PAGE_ID:%application_id%,%pk_value%,%page_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_button,
        p_name                      => 'BUTTON',
        p_singular_title            => 'Button',
        p_plural_title              => 'Buttons',
        p_table_name                => 'WWV_FLOW_STEP_BUTTONS',
        p_view_name                 => 'APEX_APPLICATION_PAGE_BUTTONS',
        p_import_api_name           => 'wwv_flow_imp_page.create_page_button',
        p_parent_component_type_id  => c_comp_type_page,
        p_parent_fk_column          => 'FLOW_STEP_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'BUTTON_NAME',
        p_copy_url                  => 'f?p=4000:231:%session%:::231,191:FB_FLOW_ID,F4000_P231_COPY_FROM_ID,F4000_P231_COPY_FROM_PAGE_ID:%application_id%,%pk_value%,%page_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_da_event,
        p_name                      => 'DYNAMIC_ACTION_EVENT',
        p_singular_title            => 'Dynamic Action',
        p_plural_title              => 'Dynamic Actions',
        p_table_name                => 'WWV_FLOW_PAGE_DA_EVENTS_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_DA',
        p_import_api_name           => 'wwv_flow_imp_page.create_page_da_event',
        p_parent_component_type_id  => c_comp_type_page,
        p_parent_fk_column          => 'PAGE_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'NAME',
        p_copy_url                  => 'f?p=4000:796:%session%:::128,796,797:FB_FLOW_ID,F4000_P796_COPY_FROM_ID,F4000_P796_COPY_FROM_PAGE_ID:%application_id%,%pk_value%,%page_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_da_action,
        p_name                      => 'DYNAMIC_ACTION_ACTION',
        p_singular_title            => 'Action',
        p_plural_title              => 'Actions',
        p_table_name                => 'WWV_FLOW_PAGE_DA_ACTIONS_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_DA_ACTS',
        p_import_api_name           => 'wwv_flow_imp_page.create_page_da_action',
        p_parent_component_type_id  => c_comp_type_da_event,
        p_parent_fk_column          => 'EVENT_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'NAME_HIDDEN',
        p_plugin_type               => 'DYNAMIC ACTION',
        p_plugin_column             => 'ACTION' );
    --
    store_component_type (
        p_id                        => c_comp_type_meta_tag,
        p_name                      => 'PAGE_META_TAG',
        p_singular_title            => 'Meta Tag',
        p_plural_title              => 'Meta Tags',
        p_table_name                => 'WWV_FLOW_PAGE_META_TAGS',
        p_view_name                 => 'APEX_APPL_PAGE_META_TAGS',
        p_import_api_name           => 'wwv_flow_imp_page.create_page_meta_tag',
        p_parent_component_type_id  => c_comp_type_page,
        p_parent_fk_column          => 'PAGE_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'META_TAG_NAME' );

    -- Page Processing
    store_component_type (
        p_id                        => c_comp_type_validation,
        p_name                      => 'VALIDATION',
        p_singular_title            => 'Validation',
        p_plural_title              => 'Validations',
        p_table_name                => 'WWV_FLOW_STEP_VALIDATIONS',
        p_view_name                 => 'APEX_APPLICATION_PAGE_VAL',
        p_import_api_name           => 'wwv_flow_imp_page.create_page_validation',
        p_parent_component_type_id  => c_comp_type_page,
        p_parent_fk_column          => 'FLOW_STEP_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'VALIDATION_NAME',
        p_copy_url                  => 'f?p=4000:583:%session%:::583,596:FB_FLOW_ID,P583_ID:%application_id%,%pk_value%' );
    --
    store_component_type (
        p_id                        => c_comp_type_page_computation,
        p_name                      => 'PAGE_COMPUTATION',
        p_singular_title            => 'Computation',
        p_plural_title              => 'Computations',
        p_table_name                => 'WWV_FLOW_STEP_COMPUTATIONS',
        p_view_name                 => 'APEX_APPLICATION_PAGE_COMP',
        p_import_api_name           => 'wwv_flow_imp_page.create_page_computation',
        p_parent_component_type_id  => c_comp_type_page,
        p_parent_fk_column          => 'FLOW_STEP_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'COMPUTATION_ITEM',
        p_copy_url                  => 'f?p=4000:592:%session%:::592,597:FB_FLOW_ID,P592_ID:%application_id%,%pk_value%' );
    --
    store_component_type (
        p_id                        => c_comp_type_page_process,
        p_name                      => 'PAGE_PROCESS',
        p_singular_title            => 'Process',
        p_plural_title              => 'Processes',
        p_table_name                => 'WWV_FLOW_STEP_PROCESSING_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_PROC',
        p_import_api_name           => 'wwv_flow_imp_page.create_page_process',
        p_parent_component_type_id  => c_comp_type_page,
        p_parent_fk_column          => 'FLOW_STEP_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'PROCESS_NAME',
        p_plugin_type               => 'PROCESS TYPE',
        p_plugin_column             => 'PROCESS_TYPE',
        p_copy_url                  => 'f?p=4000:590:%session%:::590,645:FB_FLOW_ID,P590_ID:%application_id%,%pk_value%' );
    --
    store_component_type (
        p_id                        => c_comp_type_branch,
        p_name                      => 'BRANCH',
        p_singular_title            => 'Branch',
        p_plural_title              => 'Branches',
        p_table_name                => 'WWV_FLOW_STEP_BRANCHES_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_BRANCHES',
        p_import_api_name           => 'wwv_flow_imp_page.create_page_branch',
        p_parent_component_type_id  => c_comp_type_page,
        p_parent_fk_column          => 'FLOW_STEP_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'BRANCH_NAME',
        p_copy_url                  => 'f?p=4000:587:%session%:::587,685:FB_FLOW_ID,P587_ID:%application_id%,%pk_value%' );
    --
    -- Region type specific component types
    --
    -- Region Plug-in Attributes
    store_component_type (
        p_id                       => c_comp_type_region_plugin_attr,
        p_name                     => 'REGION_PLUGIN_ATTRIBUTES',
        p_singular_title           => 'Attributes',
        p_plural_title             => 'Attributes',
        p_table_name               => 'WWV_FLOW_REGION_PLUGIN_DEV',
        -- Requires new API don't use wwv_flow_imp_page.create_page_plug
        -- p_import_api_name           => 'wwv_flow_imp_page.create_page_plug',
        p_pk_column                => 'REGION_ID',
        p_parent_component_type_id => c_comp_type_region,
        p_parent_fk_column         => 'REGION_ID',
        p_page_id_column           => 'PAGE_ID',
        p_plugin_type              => 'REGION TYPE',
        p_plugin_column            => 'PLUG_SOURCE_TYPE',
        p_display_column           => null );

    -- Interactive Report
    store_component_type (
        p_id                        => c_comp_type_ir_attributes,
        p_name                      => 'IR_ATTRIBUTES',
        p_singular_title            => 'Attributes',
        p_plural_title              => 'Attributes',
        p_table_name                => 'WWV_FLOW_WORKSHEETS_DEV',
        p_import_api_name           => 'wwv_flow_imp_page.create_worksheet',
        p_view_name                 => 'APEX_APPLICATION_PAGE_IR',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => null );
    --
    store_component_type (
        p_id                        => c_comp_type_ir_saved_report,
        p_name                      => 'IR_SAVED_REPORT',
        p_singular_title            => 'Saved Report',
        p_plural_title              => 'Saved Reports',
        p_table_name                => 'WWV_FLOW_WORKSHEET_RPTS_DEV',
        p_import_api_name           => 'wwv_flow_imp_page.create_worksheet_rpt',
        p_parent_component_type_id  => c_comp_type_ir_attributes,
        p_parent_fk_column          => 'WORKSHEET_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'NAME',
        p_where_clause              => 'visibility <> ''PRIVATE''' );
    --
    store_component_type (
        p_id                        => c_comp_type_ir_column_group,
        p_name                      => 'IR_COLUMN_GROUP',
        p_singular_title            => 'Column Group',
        p_plural_title              => 'Column Groups',
        p_table_name                => 'WWV_FLOW_WORKSHEET_COL_GRP_DEV',
        p_import_api_name           => 'wwv_flow_imp_page.create_worksheet_col_group',
        p_parent_component_type_id  => c_comp_type_ir_attributes,
        p_parent_fk_column          => 'WORKSHEET_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'NAME' );
    --
    store_component_type (
        p_id                        => c_comp_type_ir_column,
        p_name                      => 'IR_COLUMN',
        p_singular_title            => 'Column',
        p_plural_title              => 'Columns',
        p_table_name                => 'WWV_FLOW_WORKSHEET_COL_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_IR_COL',
        p_import_api_name           => 'wwv_flow_imp_page.create_worksheet_column',
        p_parent_component_type_id  => c_comp_type_ir_attributes,
        p_parent_fk_column          => 'WORKSHEET_ID',
        p_page_id_column            => 'PAGE_ID',
        p_plugin_type               => 'IR COLUMN',
        p_plugin_column             => 'DISPLAY_TEXT_AS',
        p_supported_tmpl_components => 'PARTIAL',
        p_display_column            => 'DB_COLUMN_NAME' );
    --
    store_component_type (
        p_id                        => c_comp_type_ir_print,
        p_name                      => 'IR_PRINT_ATTR',
        p_singular_title            => 'Printing',
        p_plural_title              => 'Printing',
        p_table_name                => 'WWV_FLOW_REGION_PRINT_DEV',
        p_pk_column                 => 'WORKSHEET_ID',
        p_parent_component_type_id  => c_comp_type_ir_attributes,
        p_parent_fk_column          => 'WORKSHEET_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => null,
        p_where_clause              => q'~plug_source_type = 'NATIVE_IR' and ( download_formats like '%XLSX%' or download_formats like '%PDF%' ) ~' );

    -- Interactive grid
    store_component_type (
        p_id                        => c_comp_type_ig_attributes,
        p_name                      => 'IG_ATTRIBUTES',
        p_singular_title            => 'Attributes',
        p_plural_title              => 'Attributes',
        p_table_name                => 'WWV_FLOW_INTERACTIVE_GRIDS_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_IG',
        p_import_api_name           => 'wwv_flow_imp_page.create_interactive_grid',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => null );
    --
    store_component_type (
        p_id                        => c_comp_type_ig_column_group,
        p_name                      => 'IG_COLUMN_GROUP',
        p_singular_title            => 'Column Group',
        p_plural_title              => 'Column Groups',
        p_table_name                => 'WWV_FLOW_REGION_COLUMN_GROUPS',
        p_import_api_name           => 'wwv_flow_imp_page.create_region_column_group',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'HEADING' );
    --
    store_component_type (
        p_id                        => c_comp_type_ig_column,
        p_name                      => 'IG_COLUMN',
        p_singular_title            => 'Column',
        p_plural_title              => 'Columns',
        p_table_name                => 'WWV_FLOW_IG_COLUMNS_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_IG_COL',
        p_import_api_name           => 'wwv_flow_imp_page.create_region_column',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_plugin_type               => 'ITEM TYPE',
        p_plugin_column             => 'ITEM_TYPE',
        p_display_column            => 'NAME' );
    --
    store_component_type (
        p_id                        => c_comp_type_ig_saved_report,
        p_name                      => 'IG_SAVED_REPORT',
        p_singular_title            => 'Saved Report',
        p_plural_title              => 'Saved Reports',
        p_table_name                => 'WWV_FLOW_IG_REPORTS_DEV',
        p_import_api_name           => 'wwv_flow_imp_page.create_ig_report',
        p_parent_component_type_id  => c_comp_type_ig_attributes,
        p_parent_fk_column          => 'INTERACTIVE_GRID_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'NAME',
        p_where_clause              => 'visibility in (''PRIMARY'',''ALTERNATIVE'')' );
    --
    store_component_type (
        p_id                        => c_comp_type_ig_print,
        p_name                      => 'IG_PRINT_ATTR',
        p_singular_title            => 'Printing',
        p_plural_title              => 'Printing',
        p_table_name                => 'WWV_FLOW_REGION_PRINT_DEV',
        p_pk_column                 => 'REGION_ID',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => null,
        p_where_clause              => q'~plug_source_type = 'NATIVE_IG' and ( download_formats like '%XLSX%' or download_formats like '%PDF%' ) ~' );

    -- Web Service
    store_component_type (
        p_id                        => c_comp_type_page_proc_ws_p_i,
        p_name                      => 'PAGE_PROCESS_WS_PARAM_IN',
        p_singular_title            => 'In Parameter',
        p_plural_title              => 'In Parameters',
        p_table_name                => 'WWV_FLOW_PAGE_PROC_WS_PARM_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_ws_process_parms_map',
        p_parent_component_type_id  => c_comp_type_page_process,
        p_parent_fk_column          => 'PROCESS_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'PARAMETER_NAME',
        p_where_clause              => q'~parameter_type in ( 'I', 'H' ) ~' );
    --
    store_component_type (
        p_id                        => c_comp_type_page_proc_ws_p_o,
        p_name                      => 'PAGE_PROCESS_WS_PARAM_OUT',
        p_singular_title            => 'Out Parameter',
        p_plural_title              => 'Out Parameters',
        p_table_name                => 'WWV_FLOW_PAGE_PROC_WS_PARM_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_ws_process_parms_map',
        p_parent_component_type_id  => c_comp_type_page_process,
        p_parent_fk_column          => 'PROCESS_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'PARAMETER_NAME',
        p_where_clause              => q'~parameter_type = 'O' ~' );
    --
    store_component_type (
        p_id                        => c_comp_type_page_proc_ws_p_a,
        p_name                      => 'PAGE_PROCESS_WS_PARAM_AUTH',
        p_singular_title            => 'Basic Authentication Parameter',
        p_plural_title              => 'Basic Authentication Parameters',
        p_table_name                => 'WWV_FLOW_PAGE_PROC_WS_PARM_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_ws_process_parms_map',
        p_parent_component_type_id  => c_comp_type_page_process,
        p_parent_fk_column          => 'PROCESS_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'PARAMETER_NAME',
        p_where_clause              => q'~parameter_type = 'A' ~' );
    --
    store_component_type (
        p_id                        => c_comp_type_pg_proc_api_param,
        p_name                      => 'PAGE_PROCESS_INVOKE_API_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_INVOKEAPI_CPARAMS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_invokeapi_comp_param',
        p_parent_component_type_id  => c_comp_type_page_process,
        p_parent_fk_column          => 'PAGE_PROCESS_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'NAME' );
    --
    store_component_type (
        p_id                        => c_comp_type_page_proc_ws_param,
        p_name                      => 'PAGE_PROCESS_WS_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_WEB_SRC_CPARAMS_DEV',
        p_view_name                 => 'APEX_APPL_WEB_SRC_COMP_PARAMS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_web_source_comp_param',
        p_parent_component_type_id  => c_comp_type_page_process,
        p_parent_fk_column          => 'PAGE_PROCESS_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'WEB_SRC_PARAM_ID' );
    --
    store_component_type (
        p_id                        => c_comp_type_region_ws_param,
        p_name                      => 'REGION_WS_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_WEB_SRC_CPARAMS_DEV',
        p_view_name                 => 'APEX_APPL_WEB_SRC_COMP_PARAMS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_web_source_comp_param',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'PAGE_PLUG_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'WEB_SRC_PARAM_ID' );
    -- Classic Report
    store_component_type (
        p_id                       => c_comp_type_classic_report,
        p_name                     => 'CLASSIC_REPORT',
        p_singular_title           => 'Attributes',
        p_plural_title             => 'Attributes',
        p_table_name               => 'WWV_FLOW_REGION_RPT_DEV',
        p_view_name                => 'APEX_APPLICATION_PAGE_REGIONS',
        -- Requires new API don't use wwv_flow_imp_page.create_report_region
        -- p_import_api_name           => 'wwv_flow_imp_page.create_report_region',
        p_pk_column                => 'REGION_ID',
        p_parent_component_type_id => c_comp_type_region,
        p_parent_fk_column         => 'REGION_ID',
        p_page_id_column           => 'PAGE_ID',
        p_display_column           => null,
        p_where_clause             => q'~plug_source_type = 'NATIVE_SQL_REPORT' ~' );
    --
    store_component_type (
        p_id                       => c_comp_type_classic_rpt_column,
        p_name                     => 'CLASSIC_REPORT_COLUMN',
        p_singular_title           => 'Column',
        p_plural_title             => 'Columns',
        p_table_name               => 'WWV_FLOW_REGION_RPT_COL_DEV',
        p_view_name                => 'APEX_APPLICATION_PAGE_RPT_COLS',
        p_import_api_name          => 'wwv_flow_imp_page.create_report_columns',
        p_parent_component_type_id => c_comp_type_region,
        p_parent_fk_column         => 'REGION_ID',
        p_page_id_column           => 'FLOW_STEP_ID',
        p_display_column           => 'COLUMN_ALIAS',
        p_where_clause             => q'~exists ( select 1 from wwv_flow_page_plugs a where a.id = region_id and a.plug_source_type = 'NATIVE_SQL_REPORT' ) ~' );
    --
    store_component_type (
        p_id                       => c_comp_type_classic_rpt_print,
        p_name                     => 'CLASSIC_REPORT_PRINT_ATTR',
        p_singular_title           => 'Printing',
        p_plural_title             => 'Printing',
        p_table_name               => 'WWV_FLOW_REGION_PRINT_DEV',
        p_pk_column                => 'REGION_ID',
        p_parent_component_type_id => c_comp_type_classic_report,
        p_parent_fk_column         => 'REGION_ID',
        p_page_id_column           => 'PAGE_ID',
        p_display_column           => null,
        p_where_clause             => q'~plug_source_type = 'NATIVE_SQL_REPORT' and prn_output = 'Y' ~' );

    -- Tabular Form
    store_component_type (
        p_id                       => c_comp_type_tab_form,
        p_name                     => 'TABULAR_FORM',
        p_singular_title           => 'Attributes',
        p_plural_title             => 'Attributes',
        p_table_name               => 'WWV_FLOW_REGION_RPT_DEV',
        p_view_name                => 'APEX_APPLICATION_PAGE_REGIONS',
        -- Requires new API don't use wwv_flow_imp_page.create_report_region
        -- p_import_api_name           => 'wwv_flow_imp_page.create_report_region',
        p_pk_column                => 'REGION_ID',
        p_parent_component_type_id => c_comp_type_region,
        p_parent_fk_column         => 'REGION_ID',
        p_page_id_column           => 'PAGE_ID',
        p_display_column           => null,
        p_where_clause             => q'~plug_source_type = 'NATIVE_TABFORM' ~' );
    --
    store_component_type (
        p_id                       => c_comp_type_tab_form_column,
        p_name                     => 'TABULAR_FORM_COLUMN',
        p_singular_title           => 'Column',
        p_plural_title             => 'Columns',
        p_table_name               => 'WWV_FLOW_REGION_RPT_COL_DEV',
        p_view_name                => 'APEX_APPLICATION_PAGE_RPT_COLS',
        p_import_api_name          => 'wwv_flow_imp_page.create_report_columns',
        p_parent_component_type_id => c_comp_type_region,
        p_parent_fk_column         => 'REGION_ID',
        p_page_id_column           => 'FLOW_STEP_ID',
        p_display_column           => 'COLUMN_ALIAS',
        p_where_clause             => q'~exists ( select 1 from wwv_flow_page_plugs a where a.id = region_id and a.plug_source_type = 'NATIVE_TABFORM' ) ~' );
    --
    store_component_type (
        p_id                       => c_comp_type_tab_form_print,
        p_name                     => 'TABULAR_FORM_PRINT_ATTR',
        p_singular_title           => 'Printing',
        p_plural_title             => 'Printing',
        p_table_name               => 'WWV_FLOW_REGION_PRINT_DEV',
        p_pk_column                => 'REGION_ID',
        p_parent_component_type_id => c_comp_type_tab_form,
        p_parent_fk_column         => 'REGION_ID',
        p_page_id_column           => 'PAGE_ID',
        p_display_column           => null,
        p_where_clause             => q'~plug_source_type = 'NATIVE_TABFORM' and prn_output = 'Y' ~' );
    -- Classic Calendar
    store_component_type (
        p_id                        => c_comp_type_classic_calendar,
        p_name                      => 'CLASSIC_CALENDAR',
        p_singular_title            => 'Attributes',
        p_plural_title              => 'Attributes',
        p_table_name                => 'WWV_FLOW_CALS_DEV',
        p_import_api_name           => 'wwv_flow_imp_page.create_calendar',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'PLUG_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => null );
    --
    store_component_type (
        p_id                        => c_comp_type_region_column,
        p_name                      => 'REGION_COLUMN',
        p_singular_title            => 'Column',
        p_plural_title              => 'Columns',
        p_table_name                => 'WWV_FLOW_REGION_COLUMNS_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_REG_COLS',
        p_import_api_name           => 'wwv_flow_imp_page.create_region_column',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_plugin_type               => 'REGION TYPE',
        p_plugin_column             => 'REGION_TYPE',
        p_display_column            => 'NAME',
        p_where_clause              => q'~region_type not like 'TMPL\_%' escape '\' ~' );
    --
    store_component_type (
        p_id                        => c_comp_type_region_tmpl_column,
        p_name                      => 'REGION_TMPL_COLUMN',
        p_singular_title            => 'Column',
        p_plural_title              => 'Columns',
        p_table_name                => 'WWV_FLOW_REGION_COLUMNS_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_REG_COLS',
        p_import_api_name           => 'wwv_flow_imp_page.create_region_column',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'NAME',
        p_where_clause              => q'~region_type like 'TMPL\_%' escape '\' ~' );

    -- JET Chart
    store_component_type (
        p_id                        => c_comp_type_jet_chart,
        p_name                      => 'JET_CHART',
        p_singular_title            => 'Attributes',
        p_plural_title              => 'Attributes',
        p_table_name                => 'WWV_FLOW_JET_CHARTS',
        p_import_api_name           => 'wwv_flow_imp_page.create_jet_chart',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => null );
    --
    store_component_type (
        p_id                        => c_comp_type_jet_chart_series,
        p_name                      => 'JET_CHART_SERIES',
        p_singular_title            => 'Series',
        p_plural_title              => 'Series',
        p_table_name                => 'WWV_FLOW_JET_SERIES_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_CHART_S',
        p_import_api_name           => 'wwv_flow_imp_page.create_jet_chart_series',
        p_parent_component_type_id  => c_comp_type_jet_chart,
        p_parent_fk_column          => 'CHART_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'NAME' );
    --
    store_component_type (
        p_id                        => c_comp_type_jet_chart_axes,
        p_name                      => 'JET_CHART_AXES',
        p_singular_title            => 'Axis',
        p_plural_title              => 'Axes',
        p_table_name                => 'WWV_FLOW_JET_AXES_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_CHART_A',
        p_import_api_name           => 'wwv_flow_imp_page.create_jet_chart_axis',
        p_parent_component_type_id  => c_comp_type_jet_chart,
        p_parent_fk_column          => 'CHART_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'AXIS' );
    --
    store_component_type (
        p_id                        => c_comp_type_jet_chart_ws_param,
        p_name                      => 'JET_CHART_WS_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_WEB_SRC_CPARAMS_DEV',
        p_view_name                 => 'APEX_APPL_WEB_SRC_COMP_PARAMS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_web_source_comp_param',
        p_parent_component_type_id  => c_comp_type_jet_chart_series,
        p_parent_fk_column          => 'JET_CHART_SERIES_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'WEB_SRC_PARAM_ID' );
    --
    store_component_type (
        p_id                        => c_comp_type_map_region,
        p_name                      => 'MAP_REGION',
        p_singular_title            => 'Attributes',
        p_plural_title              => 'Attributes',
        p_table_name                => 'WWV_FLOW_MAP_REGIONS_DEV',
        p_view_name                 => 'APEX_APPL_PAGE_MAP_REGIONS',
        p_import_api_name           => 'wwv_flow_imp_page.create_map_region',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => null );
    --
    store_component_type (
        p_id                        => c_comp_type_map_layer,
        p_name                      => 'MAP_LAYER',
        p_singular_title            => 'Layer',
        p_plural_title              => 'Layers',
        p_table_name                => 'WWV_FLOW_MAP_LAYERS_DEV',
        p_view_name                 => 'APEX_APPL_PAGE_MAP_LAYERS',
        p_import_api_name           => 'wwv_flow_imp_page.create_map_region_layer',
        p_parent_component_type_id  => c_comp_type_map_region,
        p_parent_fk_column          => 'MAP_REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'NAME' );
    --
    store_component_type (
        p_id                        => c_comp_type_map_layer_ws_param,
        p_name                      => 'MAP_LAYER_WS_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_WEB_SRC_CPARAMS_DEV',
        p_view_name                 => 'APEX_APPL_WEB_SRC_COMP_PARAMS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_web_source_comp_param',
        p_parent_component_type_id  => c_comp_type_map_layer,
        p_parent_fk_column          => 'MAP_REGION_LAYER_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'WEB_SRC_PARAM_ID' );
    --
    store_component_type (
        p_id                        => c_comp_type_map_background,
        p_name                      => 'MAP_BACKGROUND',
        p_singular_title            => 'Map Background',
        p_plural_title              => 'Map Backgrounds',
        p_table_name                => 'WWV_FLOW_MAP_BACKGROUNDS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_map_background',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:6120:%session%:::6120:P6120_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/map_backgrounds#ext#',
        p_is_page_designer_shared   => true );
    --
    store_component_type (
        p_id                        => c_comp_type_component_group,
        p_name                      => 'COMPONENT_GROUP',
        p_singular_title            => 'Component Group',
        p_plural_title              => 'Component Groups',
        p_table_name                => 'WWV_FLOW_COMPONENT_GROUPS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_component_group',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:6201:%session%:::6201:P6201_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/component_groups#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_comp_grp_component,
        p_name                      => 'COMP_GRP_COMPONENT',
        p_singular_title            => 'Component',
        p_plural_title              => 'Components',
        p_table_name                => 'WWV_FLOW_COMP_GRP_COMPONENTS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_comp_grp_component',
        p_parent_component_type_id  => c_comp_type_component_group,
        p_parent_fk_column          => 'COMPONENT_GROUP_ID',
        p_display_column            => 'COMPONENT_TYPE',
        p_edit_url                  => 'f?p=4000:6201:%session%:::6201:P6201_ID,FB_FLOW_ID:%parent_pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_facet,
        p_name                      => 'FACET',
        p_singular_title            => 'Facet',
        p_plural_title              => 'Facets',
        p_table_name                => 'WWV_FLOW_FILTERS_DEV',
        p_view_name                 => 'APEX_APPL_PAGE_FILTERS',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'ITEM_PLUG_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'NAME',
        p_plugin_type               => 'ITEM TYPE',
        p_plugin_column             => 'DISPLAY_AS',
        p_copy_url                  => null,
        p_where_clause              => 'item_group_id is null' );
    --
    store_component_type (
        p_id                        => c_comp_type_facet_group,
        p_name                      => 'FACET_GROUP',
        p_singular_title            => 'Facet Group',
        p_plural_title              => 'Facet Groups',
        p_table_name                => 'WWV_FLOW_STEP_ITEM_GROUPS',
        p_view_name                 => 'APEX_APPL_PAGE_FILTER_GROUPS',
        p_import_api_name           => 'wwv_flow_imp_page.create_page_item_group',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'PAGE_PLUG_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'LABEL',
        p_copy_url                  => null );
    --
    store_component_type (
        p_id                        => c_comp_type_facet_group_item,
        p_name                      => 'FACET_GROUP_ITEM',
        p_singular_title            => 'Checkbox',
        p_plural_title              => 'Checkboxes',
        p_table_name                => 'WWV_FLOW_FILTERS_DEV',
        p_view_name                 => 'APEX_APPL_PAGE_FILTERS',
        p_import_api_name           => 'wwv_flow_imp_page.create_page_item',
        p_parent_component_type_id  => c_comp_type_facet_group,
        p_parent_fk_column          => 'ITEM_GROUP_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'NAME',
        p_plugin_type               => 'ITEM TYPE',
        p_plugin_column             => 'DISPLAY_AS',
        p_copy_url                  => null,
        p_where_clause              => 'item_group_id is not null' );
    --
    store_component_type (
        p_id                        => c_comp_type_sfilter,
        p_name                      => 'SFILTER',
        p_singular_title            => 'Filter',
        p_plural_title              => 'Filters',
        p_table_name                => 'WWV_FLOW_FILTERS_DEV',
        p_view_name                 => 'APEX_APPL_PAGE_FILTERS',
        p_import_api_name           => 'wwv_flow_imp_page.create_page_item',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'ITEM_PLUG_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'NAME',
        p_plugin_type               => 'ITEM TYPE',
        p_plugin_column             => 'DISPLAY_AS',
        p_copy_url                  => null,
        p_where_clause              => 'item_group_id is null' );
    --
    store_component_type (
        p_id                        => c_comp_type_sfilter_group,
        p_name                      => 'SFILTER_GROUP',
        p_singular_title            => 'Filter Group',
        p_plural_title              => 'Filter Groups',
        p_table_name                => 'WWV_FLOW_STEP_ITEM_GROUPS',
        p_view_name                 => 'APEX_APPL_PAGE_FILTER_GROUPS',
        p_import_api_name           => 'wwv_flow_imp_page.create_page_item_group',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'PAGE_PLUG_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'LABEL',
        p_copy_url                  => null );
    --
    store_component_type (
        p_id                        => c_comp_type_sfilter_group_item,
        p_name                      => 'SFILTER_GROUP_ITEM',
        p_singular_title            => 'Checkbox',
        p_plural_title              => 'Checkboxes',
        p_table_name                => 'WWV_FLOW_FILTERS_DEV',
        p_view_name                 => 'APEX_APPL_PAGE_FILTERS',
        p_import_api_name           => 'wwv_flow_imp_page.create_page_item',
        p_parent_component_type_id  => c_comp_type_sfilter_group,
        p_parent_fk_column          => 'ITEM_GROUP_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'NAME',
        p_plugin_type               => 'ITEM TYPE',
        p_plugin_column             => 'DISPLAY_AS',
        p_copy_url                  => null,
        p_where_clause              => 'item_group_id is not null' );
    --
    store_component_type (
        p_id                        => c_comp_type_card,
        p_name                      => 'CARD',
        p_singular_title            => 'Attributes',
        p_plural_title              => 'Attributes',
        p_table_name                => 'WWV_FLOW_CARDS_DEV',
        p_view_name                 => 'APEX_APPL_PAGE_CARDS',
        p_import_api_name           => 'wwv_flow_imp_page.create_card',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => null );
    --
    store_component_type (
        p_id                        => c_comp_type_card_action,
        p_name                      => 'CARD_ACTION',
        p_singular_title            => 'Action',
        p_plural_title              => 'Actions',
        p_table_name                => 'WWV_FLOW_CARD_ACTIONS',
        p_view_name                 => 'APEX_APPL_PAGE_CARD_ACTIONS',
        p_import_api_name           => 'wwv_flow_imp_page.create_card_action',
        p_parent_component_type_id  => c_comp_type_card,
        p_parent_fk_column          => 'CARD_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'LABEL',
        p_alt_display_column        => 'ACTION_TYPE' );
    --
    store_component_type (
        p_id                        => c_comp_type_pg_pr_task_param,
        p_name                      => 'PAGE_PROCESS_TASK_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_TASK_DEF_COMP_PARAMS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_task_def_comp_param',
        p_parent_component_type_id  => c_comp_type_page_process,
        p_parent_fk_column          => 'PAGE_PROCESS_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'TASK_DEF_PARAM_ID' );
    --
    store_component_type (
        p_id                        => c_comp_type_wf_act_task_param,
        p_name                      => 'WF_ACTIVITY_TASK_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_TASK_DEF_COMP_PARAMS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_task_def_comp_param',
        p_parent_component_type_id  => c_comp_type_workflow_activity,
        p_parent_fk_column          => 'WORKFLOW_ACTIVITY_ID',
        p_display_column            => 'TASK_DEF_PARAM_ID',
        p_is_page_designer_shared   => true,
        p_is_shared_designer        => true );
    --
    store_component_type (
        p_id                        => c_comp_type_page_proc_wf_param,
        p_name                      => 'PAGE_PROCESS_WF_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_WORKFLOW_CPARAMS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_workflow_comp_param',
        p_parent_component_type_id  => c_comp_type_page_process,
        p_parent_fk_column          => 'PAGE_PROCESS_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'WORKFLOW_VARIABLE_ID',
        p_is_page_designer_shared   => true,
        p_where_clause              => q'~page_id is not null ~' );
    --
    store_component_type (
        p_id                        => c_comp_type_wf_act_wf_param,
        p_name                      => 'WF_ACTIVITY_WF_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_WORKFLOW_CPARAMS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_workflow_comp_param',
        p_parent_component_type_id  => c_comp_type_workflow_activity,
        p_parent_fk_column          => 'WORKFLOW_ACTIVITY_ID',
        p_display_column            => 'WORKFLOW_VARIABLE_ID',
        p_is_shared_designer        => true,
        p_where_clause              => q'~workflow_activity_id is not null ~' );
    --
    store_component_type (
        p_id                        => c_comp_type_wf_act_api_param,
        p_name                      => 'WF_ACTIVITY_INVOKE_API_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_INVOKEAPI_CPARAMS_DEV',
        p_import_api_name           => 'wwv_flow_imp_shared.create_invokeapi_comp_param',
        p_parent_component_type_id  => c_comp_type_workflow_activity,
        p_parent_fk_column          => 'WORKFLOW_ACTIVITY_ID',
        p_display_column            => 'NAME',
        p_is_page_designer_shared   => true,
        p_is_shared_designer        => true );
    --
    store_component_type (
        p_id                        => c_comp_type_wf_act_ws_param,
        p_name                      => 'WF_ACTIVITY_WS_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_WEB_SRC_CPARAMS_DEV',
        p_view_name                 => 'APEX_APPL_WEB_SRC_COMP_PARAMS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_web_source_comp_param',
        p_parent_component_type_id  => c_comp_type_workflow_activity,
        p_parent_fk_column          => 'WORKFLOW_ACTIVITY_ID',
        p_display_column            => 'WEB_SRC_PARAM_ID',
        p_is_page_designer_shared   => true,
        p_is_shared_designer        => true );
    --
    store_component_type (
        p_id                        => c_comp_type_shortcut,
        p_name                      => 'SHORTCUT',
        p_singular_title            => 'Shortcut',
        p_plural_title              => 'Shortcuts',
        p_table_name                => 'WWV_FLOW_SHORTCUTS',
        p_view_name                 => 'APEX_APPLICATION_SHORTCUTS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_shortcut',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'SHORTCUT_NAME',
        p_create_url                => 'f?p=4000:131:%session%:::RP,131:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4048:%session%:::RP,4048:F4000_P4048_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/shortcuts#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_tree,
        p_name                      => 'TREE',
        p_singular_title            => 'Tree',
        p_plural_title              => 'Trees',
        p_table_name                => 'WWV_FLOW_TREES',
        p_view_name                 => 'APEX_APPLICATION_TREES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_tree',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'TREE_NAME',
        p_edit_url                  => 'f?p=4000:27:%session%::NO::F4000_P27_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'shared_components/legacy_trees#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_plugin,
        p_name                      => 'PLUGIN',
        p_singular_title            => 'Plugin',
        p_plural_title              => 'Plugins',
        p_table_name                => 'WWV_FLOW_PLUGINS',
        p_view_name                 => 'APEX_APPL_PLUGINS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_plugin',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'DISPLAY_NAME',
        p_file_path                 => 'shared_components/plugins#ext#',
        p_edit_url                  => 'f?p=4000:4410:%session%:::RP,4410:P4410_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_plugin_std_attr,
        p_name                      => 'PLUGIN_STD_ATTRIBUTE',
        p_singular_title            => 'Standard Attribute',
        p_plural_title              => 'Standard Attributes',
        p_table_name                => 'WWV_FLOW_PLUGIN_STD_ATTRIBUTES',
        p_view_name                 => 'APEX_APPL_PLUGIN_STD_ATTRS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_plugin_std_attribute',
        p_parent_component_type_id  => c_comp_type_plugin,
        p_parent_fk_column          => 'PLUGIN_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:4411:%session%:::RP,4411:P4411_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_plugin_attr_grp,
        p_name                      => 'PLUGIN_ATTRIBUTE_GROUP',
        p_singular_title            => 'Attribute Group',
        p_plural_title              => 'Attribute Groups',
        p_table_name                => 'WWV_FLOW_PLUGIN_ATTR_GROUPS',
        p_view_name                 => 'APEX_APPL_PLUGIN_ATTR_GROUPS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_plugin_attr_group',
        p_parent_component_type_id  => c_comp_type_plugin,
        p_parent_fk_column          => 'PLUGIN_ID',
        p_display_column            => 'TITLE',
        p_edit_url                  => get_parent_component_type_url (
                                                p_component_type_id => c_comp_type_plugin,
                                                p_url_type          => 'EDIT' ) );
    --
    store_component_type (
        p_id                        => c_comp_type_plugin_cust_attr,
        p_name                      => 'PLUGIN_CUSTOM_ATTRIBUTE',
        p_singular_title            => 'Custom Attribute',
        p_plural_title              => 'Custom Attributes',
        p_table_name                => 'WWV_FLOW_PLUGIN_ATTRIBUTES',
        p_view_name                 => 'APEX_APPL_PLUGIN_ATTRIBUTES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_plugin_attribute',
        p_parent_component_type_id  => c_comp_type_plugin,
        p_parent_fk_column          => 'PLUGIN_ID',
        p_display_column            => 'PROMPT',
        p_edit_url                  => 'f?p=4000:4415:%session%:::RP,4415:P4415_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_plugin_attr_lov,
        p_name                      => 'PLUGIN_ATTRIBUTE_LOV_ENTRY',
        p_singular_title            => 'Entry',
        p_plural_title              => 'Entries',
        p_table_name                => 'WWV_FLOW_PLUGIN_ATTR_VALUES',
        p_view_name                 => 'APEX_APPL_PLUGIN_ATTR_VALUES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_plugin_attr_value',
        p_parent_component_type_id  => c_comp_type_plugin_cust_attr,
        p_parent_fk_column          => 'PLUGIN_ATTRIBUTE_ID',
        p_display_column            => 'DISPLAY_VALUE',
        p_edit_url                  => 'f?p=4000:4416:%session%:::RP,4416:P4416_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_plugin_action_pos,
        p_name                      => 'PLUGIN_ACTION_POSITION',
        p_singular_title            => 'Action Position',
        p_plural_title              => 'Action Positions',
        p_table_name                => 'WWV_FLOW_PLUGIN_ACT_POSITIONS',
        p_view_name                 => 'APEX_APPL_PLUGIN_ACT_POSITIONS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_plugin_act_position',
        p_parent_component_type_id  => c_comp_type_plugin,
        p_parent_fk_column          => 'PLUGIN_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:4417:%session%:::RP,4417:P4417_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_plugin_slot,
        p_name                      => 'PLUGIN_SLOT',
        p_singular_title            => 'Slot',
        p_plural_title              => 'Slots',
        p_table_name                => 'WWV_FLOW_PLUGIN_SLOTS',
        p_view_name                 => 'APEX_APPL_PLUGIN_SLOTS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_plugin_slot',
        p_parent_component_type_id  => c_comp_type_plugin,
        p_parent_fk_column          => 'PLUGIN_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:4410:%session%::NO::P4410_ID,FB_FLOW_ID:%parent_pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_plugin_action_tmpl,
        p_name                      => 'PLUGIN_ACTION_TEMPLATE',
        p_singular_title            => 'Action Template',
        p_plural_title              => 'Action Templates',
        p_table_name                => 'WWV_FLOW_PLUGIN_ACT_TEMPLATES',
        p_view_name                 => 'APEX_APPL_PLUGIN_ACT_TEMPLATES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_plugin_act_template',
        p_parent_component_type_id  => c_comp_type_plugin,
        p_parent_fk_column          => 'PLUGIN_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:4418:%session%:::RP,4418:P4418_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_plugin_event,
        p_name                      => 'PLUGIN_EVENT',
        p_singular_title            => 'Event',
        p_plural_title              => 'Events',
        p_table_name                => 'WWV_FLOW_PLUGIN_EVENTS',
        p_view_name                 => 'APEX_APPL_PLUGIN_EVENTS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_plugin_event',
        p_parent_component_type_id  => c_comp_type_plugin,
        p_parent_fk_column          => 'PLUGIN_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:4410:%session%::NO::P4410_ID,FB_FLOW_ID:%parent_pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_plugin_file,
        p_name                      => 'PLUGIN_FILE',
        p_singular_title            => 'File',
        p_plural_title              => 'Files',
        p_table_name                => 'WWV_FLOW_PLUGIN_FILES',
        p_view_name                 => 'APEX_APPL_PLUGIN_FILES',
        p_import_api_name           => 'wwv_flow_imp_shared.create_plugin_file',
        p_parent_component_type_id  => c_comp_type_plugin,
        p_parent_fk_column          => 'PLUGIN_ID',
        p_display_column            => 'FILE_NAME',
        p_edit_url                  => 'f?p=4000:118:%session%:::RP,118:P118_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_supobj,
        p_name                      => 'SUPPORT_OBJECTS',
        p_singular_title            => 'Supporting Object',
        p_plural_title              => 'Supporting Object',
        p_table_name                => 'WWV_FLOW_INSTALL',
        p_import_api_name           => 'wwv_flow_imp_shared.create_install',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'FLOW_ID',
        p_edit_url                  => 'f?p=4000:567:%session%::NO:567,RP:FB_FLOW_ID:%application_id%',
        p_file_path                 => 'supporting_objects/supporting_objects#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_plugin_setting,
        p_name                      => 'PLUGIN_SETTING',
        p_singular_title            => 'Component Setting',
        p_plural_title              => 'Component Settings',
        p_table_name                => 'WWV_FLOW_PLUGIN_SETTINGS',
        p_view_name                 => 'APEX_APPL_PLUGIN_SETTINGS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_plugin_setting',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'PLUGIN',
        p_edit_url                  => 'f?p=4000:4446:%session%:::RP,4446:P4446_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_supobj_substitut,
        p_name                      => 'SUPPORT_OBJECTS_SUBSTITUTION',
        p_singular_title            => 'Substitution',
        p_plural_title              => 'Substitutions',
        p_table_name                => 'WWV_FLOW_INSTALL_SUBST_DEV',
        -- Requires new api that updates just those substitution_string_* columns in wwv_flow_install
        -- p_import_api_name           => '',
        p_parent_component_type_id  => c_comp_type_supobj,
        p_parent_fk_column          => 'INSTALL_ID',
        p_display_column            => 'SUBSTITUTION_STRING',
        p_edit_url                  => 'f?p=4000:17:%session%::NO:17:FB_FLOW_ID:%application_id%',
        p_file_path                 => 'supporting_objects/substitutions#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_supobj_build_opt,
        p_name                      => 'SUPPORT_OBJECTS_BUILD_OPTION',
        p_singular_title            => 'Build Option',
        p_plural_title              => 'Build Options',
        p_table_name                => 'WWV_FLOW_INSTALL_BUILD_OPT',
        p_import_api_name           => 'wwv_flow_imp_shared.create_install_build_option',
        p_parent_component_type_id  => c_comp_type_supobj,
        p_parent_fk_column          => 'INSTALL_ID',
        p_display_column            => 'BUILD_OPT_ID',
        p_edit_url                  => 'f?p=4000:511:%session%::NO:511,RP:FB_FLOW_ID:%application_id%',
        p_file_path                 => 'supporting_objects/build_options#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_supobj_validation,
        p_name                      => 'SUPPORT_OBJECTS_VALIDATION',
        p_singular_title            => 'Validation',
        p_plural_title              => 'Validations',
        p_table_name                => 'WWV_FLOW_INSTALL_CHECKS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_install_check',
        p_parent_component_type_id  => c_comp_type_supobj,
        p_parent_fk_column          => 'INSTALL_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:376:%session%::NO:RP,376:P376_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_file_path                 => 'supporting_objects/validations#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_supobj_install,
        p_name                      => 'SUPPORT_OBJECTS_INSTALL',
        p_singular_title            => 'Install Script',
        p_plural_title              => 'Install Scripts',
        p_table_name                => 'WWV_FLOW_INSTALL_SCRIPTS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_install_script',
        p_parent_component_type_id  => c_comp_type_supobj,
        p_parent_fk_column          => 'INSTALL_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:328:%session%::NO:328,RP:P328_ID,F4000_LAST_VIEW,FB_FLOW_ID:%pk_value%,473,%application_id%',
        p_where_clause              => q'~coalesce( script_type, 'INSTALL' ) = 'INSTALL'~', -- $$$ todo we should do a data migration
        p_file_path                 => 'supporting_objects/install_scripts#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_supobj_upgrade,
        p_name                      => 'SUPPORT_OBJECTS_UPGRADE',
        p_singular_title            => 'Upgrade Script',
        p_plural_title              => 'Upgrade Scripts',
        p_table_name                => 'WWV_FLOW_INSTALL_SCRIPTS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_install_script',
        p_parent_component_type_id  => c_comp_type_supobj,
        p_parent_fk_column          => 'INSTALL_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:328:%session%::NO:328,RP:P328_ID,F4000_LAST_VIEW,FB_FLOW_ID:%pk_value%,667,%application_id%',
        p_where_clause              => q'~script_type = 'UPGRADE'~',
        p_file_path                 => 'supporting_objects/upgrade_scripts#ext#' );
    --
    store_component_type (
        p_id                        => c_comp_type_search_source,
        p_name                      => 'SEARCH_REGION_SOURCES',
        p_singular_title            => 'Search Source',
        p_plural_title              => 'Search Sources',
        p_table_name                => 'WWV_FLOW_SEARCH_REGION_SOURCES',
        p_view_name                 => 'APEX_APPL_PAGE_SEARCH_SOURCES',
        p_import_api_name           => 'wwv_flow_imp_page.create_search_region_source',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'SEARCH_REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'NAME',
        p_copy_url                  => null );
    --
    store_component_type (
        p_id                        => c_comp_type_region_action,
        p_name                      => 'REGION_ACTION',
        p_singular_title            => 'Action',
        p_plural_title              => 'Actions',
        p_table_name                => 'WWV_FLOW_COMPONENT_ACTIONS_DEV',
        p_view_name                 => 'APEX_APPL_PAGE_COMP_ACTIONS',
        p_import_api_name           => 'wwv_flow_imp_page.create_component_action',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'LABEL',
        p_alt_display_column        => 'POSITION_ID',
        p_where_clause              => q'~region_id is not null~',
        p_copy_url                  => null );
    --
    store_component_type (
        p_id                        => c_comp_type_reg_act_menu_entry,
        p_name                      => 'REGION_ACTION_MENU_ENTRY',
        p_singular_title            => 'Menu',
        p_plural_title              => 'Menus',
        p_table_name                => 'WWV_FLOW_COMP_MENU_ENTRIES',
        p_view_name                 => 'APEX_APPL_PAGE_MENU_ENTRIES',
        p_import_api_name           => 'wwv_flow_imp_page.create_comp_menu_entry',
        p_parent_component_type_id  => c_comp_type_region_action,
        p_parent_fk_column          => 'COMPONENT_ACTION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'LABEL',
        p_alt_display_column        => 'MENU_ENTRY_TYPE',
        p_where_clause              => q'~component_action_id is not null~',
        p_copy_url                  => null );
    --
    store_component_type (
        p_id                        => c_comp_type_ir_column_action,
        p_name                      => 'IR_COLUMN_ACTION',
        p_singular_title            => 'Action',
        p_plural_title              => 'Actions',
        p_table_name                => 'WWV_FLOW_COMPONENT_ACTIONS_DEV',
        p_view_name                 => 'APEX_APPL_PAGE_COMP_ACTIONS',
        p_import_api_name           => 'wwv_flow_imp_page.create_component_action',
        p_parent_component_type_id  => c_comp_type_ir_column,
        p_parent_fk_column          => 'IR_COLUMN_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'LABEL',
        p_alt_display_column        => 'POSITION_ID',
        p_where_clause              => q'~ir_column_id is not null~',
        p_copy_url                  => null );
    --
    store_component_type (
        p_id                        => c_comp_type_ir_act_menu_entry,
        p_name                      => 'IR_COLUMN_ACTION_MENU_ENTRY',
        p_singular_title            => 'Menu',
        p_plural_title              => 'Menus',
        p_table_name                => 'WWV_FLOW_COMP_MENU_ENTRIES',
        p_view_name                 => 'APEX_APPL_PAGE_MENU_ENTRIES',
        p_import_api_name           => 'wwv_flow_imp_page.create_comp_menu_entry',
        p_parent_component_type_id  => c_comp_type_ir_column_action,
        p_parent_fk_column          => 'COMPONENT_ACTION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'LABEL',
        p_alt_display_column        => 'MENU_ENTRY_TYPE',
        p_where_clause              => q'~component_action_id is not null~',
        p_copy_url                  => null );
    --
    --
    store_component_type (
        p_id                        => c_comp_type_display_point,
        p_name                      => 'PAGE_TEMPLATE_DISPLAY_POINT',
        p_singular_title            => 'Slot',
        p_plural_title              => 'Slots',
        p_table_name                => 'WWV_FLOW_PAGE_TMPL_DISP_POINTS',
        p_import_api_name           => 'wwv_flow_imp_shared.create_page_tmpl_display_point',
        p_parent_component_type_id  => c_comp_type_page_template,
        p_parent_fk_column          => 'PAGE_TEMPLATE_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:4307:%session%::NO:4307:F4000_P4307_ID,FB_FLOW_ID:%parent_pk_value%,%application_id%' );
    --
    --*******************
    -- END COMPONENT TYPE
    --*******************
    --
    ------------------------------------------------------------------------
    -- Display Groups
    ------------------------------------------------------------------------
    store_display_group (
        p_name  => 'IDENTIFICATION',
        p_title => 'Identification' );
    --
    store_display_group (
        p_name  => 'SETTINGS',
        p_title => 'Settings' );
    --
    store_display_group (
        p_name  => 'ATTRIBUTES',
        p_title => 'Attributes' );
    --
    store_display_group (
        p_name  => 'COMMENTS',
        p_title => 'Comments' );
    --
    store_display_group (
        p_name  => 'ERROR',
        p_title => 'Error' );
    --
    store_display_group (
        p_name  => 'CONFIGURATION',
        p_title => 'Configuration' );
    --
    store_display_group (
        p_name  => 'CSS',
        p_title => 'CSS' );
    --
    store_display_group (
        p_name  => 'DIALOG',
        p_title => 'Dialog' );
    --
    store_display_group (
        p_name  => 'ERROR_HANDLING',
        p_title => 'Error Handling' );
    --
    store_display_group (
        p_name  => 'HEADER_AND_FOOTER',
        p_title => 'Header and Footer' );
    --
    store_display_group (
        p_name  => 'HELP',
        p_title => 'Help' );
    --
    store_display_group (
        p_name  => 'HTML_HEADER',
        p_title => 'HTML Header' );
    --
    store_display_group (
        p_name  => 'JAVASCRIPT',
        p_title => 'JavaScript' );
    --
    store_display_group (
        p_name  => 'READ_ONLY',
        p_title => 'Read Only' );
    --
    store_display_group (
        p_name  => 'SECURITY',
        p_title => 'Security' );
    --
    store_display_group (
        p_name  => 'SERVER_CACHE',
        p_title => 'Server Cache' );
    --
    store_display_group (
        p_name  => 'SERVER_SIDE_CONDITION',
        p_title => 'Server-side Condition' );
    store_display_group (
        p_name  => 'CLIENT_SIDE_CONDITION',
        p_title => 'Client-side Condition' );
    --
    store_display_group (
        p_name  => 'EXECUTION',
        p_title => 'Execution' );
    --
    store_display_group (
        p_name  => 'COMPUTATION',
        p_title => 'Computation' );
    --
    store_display_group (
        p_name  => 'ADVANCED',
        p_title => 'Advanced' );
    --
    store_display_group (
        p_name  => 'AUTHORIZATION',
        p_title => 'Authorization' );
    --
    store_display_group (
        p_name  => 'WHEN',
        p_title => 'When' );
    --
    store_display_group (
        p_name  => 'AFFECTED_ELEMENTS',
        p_title => 'Affected Elements' );
    --
    store_display_group (
        p_name  => 'DEFAULT',
        p_title => 'Default' );
    --
    store_display_group (
        p_name  => 'ELEMENT',
        p_title => 'Element' );
    --
    store_display_group (
        p_name  => 'LABEL',
        p_title => 'Label' );
    --
    store_display_group (
        p_name  => 'LIST_OF_VALUES',
        p_title => 'List of Values' );
    --
    store_display_group (
        p_name  => 'QUICK_PICKS',
        p_title => 'Quick Picks' );
    --
    store_display_group (
        p_name  => 'SOURCE',
        p_title => 'Source' );
    --
    store_display_group (
        p_name  => 'VALIDATION',
        p_title => 'Validation' );
    --
    store_display_group (
        p_name  => 'BEHAVIOR',
        p_title => 'Behavior' );
    --
    store_display_group (
        p_name  => 'APPEARANCE',
        p_title => 'Appearance' );
    --
    store_display_group (
        p_name  => 'REGION_IMAGE',
        p_title => 'Image' );
    --
    store_display_group (
        p_name  => 'THRESHOLDS',
        p_title => 'Thresholds' );
    --
    store_display_group (
        p_name  => 'LAYOUT',
        p_title => 'Layout' );
    --
    store_display_group (
        p_name  => 'LOGIN_PROCESSING',
        p_title => 'Login Processing' );
    --
    store_display_group (
        p_name  => 'POST_LOGOUT_URL',
        p_title => 'Post-Logout URL' );
    --
    store_display_group (
        p_name  => 'REAL_APPLICATION_SECURITY',
        p_title => 'Real Application Security' );
    --
    store_display_group (
        p_name  => 'REFERENCE_LINES',
        p_title => 'Reference Lines' );
    --
    store_display_group (
        p_name  => 'SESSION_SHARING',
        p_title => 'Session Sharing' );
    --
    store_display_group (
        p_name  => 'SESSION_NOT_VALID',
        p_title => 'Session Not Valid' );
    --
    store_display_group (
        p_name  => 'SUBSCRIPTION',
        p_title => 'Subscription' );
    --
    store_display_group (
        p_name  => 'CUSTOMIZATION',
        p_title => 'Customization' );
    --
    store_display_group (
        p_name  => 'NAVIGATION',
        p_title => 'Navigation' );
    --
    store_display_group (
        p_name  => 'NAVIGATION_MENU',
        p_title => 'Navigation Menu' );
    --
    store_display_group (
        p_name  => 'TABS',
        p_title => 'Tabs' );
    --
    store_display_group (
        p_name  => 'SEARCH_BAR',
        p_title => 'Search Bar' );
    --
    store_display_group (
        p_name  => 'ACTIONS_MENU',
        p_title => 'Actions Menu' );
    --
    store_display_group (
        p_name  => 'COLUMN_FORMATTING',
        p_title => 'Column Formatting' );
    --
    store_display_group (
        p_name  => 'ENABLE_USER_TO',
        p_title => 'Enable Users To' );
    --
    store_display_group (
        p_name  => 'DESCRIPTION',
        p_title => 'Description' );
    --
    store_display_group (
        p_name  => 'DETAIL_VIEW',
        p_title => 'Detail View' );
    --
    store_display_group (
        p_name  => 'DOWNLOAD',
        p_title => 'Download' );
    --
    store_display_group (
        p_name  => 'ICON_VIEW',
        p_title => 'Icon View' );
    --
    store_display_group (
        p_name  => 'PAGINATION',
        p_title => 'Pagination' );
    --
    store_display_group (
        p_name  => 'PERFORMANCE',
        p_title => 'Performance' );
    --
    store_display_group (
        p_name  => 'SINGLE_ROW_VIEW',
        p_title => 'Single Row View' );
    --
    store_display_group (
        p_name  => 'LINK',
        p_title => 'Link' );
    --
    store_display_group (
         p_name  => 'FILE_STORAGE',
         p_title => 'File Storage' );
    --
    store_display_group (
        p_name  => 'SUCCESS_MESSAGE',
        p_title => 'Success Message' );
    --
    store_display_group (
        p_name  => 'PARAMETER',
        p_title => 'Parameter' );
    --
    store_display_group (
        p_name  => 'AUDIT_INFORMATION',
        p_title => 'Audit Information' );
    --
    store_display_group (
        p_name  => 'SORTING',
        p_title => 'Sorting' );
    --
    store_display_group (
        p_name  => 'EXPORT_PRINTING',
        p_title => 'Export / Printing' );
    --
    store_display_group (
        p_name  => 'BLOB',
        p_title => 'BLOB Attributes' );
    --
    store_display_group (
        p_name  => 'BREAK_FORMATTING',
        p_title => 'Break Formatting' );
    --
    store_display_group (
        p_name  => 'EXTERNAL_PROCESSING',
        p_title => 'External Processing' );
    --
    store_display_group (
        p_name  => 'MESSAGES',
        p_title => 'Messages' );
    --
    store_display_group (
        p_name  => 'HEADING',
        p_title => 'Heading' );
    --
    store_display_group (
        p_name  => 'UI_DEFAULTS_REFERENCE',
        p_title => 'UI Defaults Reference' );
    --
    store_display_group (
        p_name  => 'PRIMARY_KEY_SOURCE',
        p_title => 'Primary Key Source' );
    --
    store_display_group (
        p_name  => 'AUTOMATIC_REFRESH',
        p_title => 'Automatic Refresh' );
    --
    store_display_group (
        p_name  => 'LEGEND',
        p_title => 'Legend' );
    --
    store_display_group (
        p_name  => 'GAUGE',
        p_title => 'Gauge' );
    --
    store_display_group (
        p_name  => 'VALUE',
        p_title => 'Value' );
    --
    store_display_group (
        p_name  => 'TOOLTIP',
        p_title => 'Tooltip' );
    --
    store_display_group (
        p_name  => 'TITLE',
        p_title => 'Title' );
    --
    store_display_group (
        p_name  => 'GANTT_TIMELINE',
        p_title => 'Timeline' );
    --
    store_display_group (
        p_name  => 'CHART',
        p_title => 'Chart' );
    --
    store_display_group (
        p_name  => 'MONTHLY_CALENDAR',
        p_title => 'Monthly Calendar' );
    --
    store_display_group (
        p_name  => 'WEEKLY_CALENDAR',
        p_title => 'Weekly Calendar' );
    --
    store_display_group (
        p_name  => 'DAILY_WEEKLY_CALENDAR',
        p_title => 'Daily & Weekly Calendar' );
    --
    store_display_group (
        p_name  => 'LIST_VIEW_CALENDAR',
        p_title => 'Agenda View Calendar' );
    --
    store_display_group (
        p_name  => 'COLORS',
        p_title => 'Colors' );
    --
    store_display_group (
        p_name  => 'DRAG_AND_DROP',
        p_title => 'Drag and Drop' );
    --
    store_display_group (
        p_name  => 'CALENDAR_STATE_ITEMS',
        p_title => 'Calendar State Items' );
    --
    store_display_group (
        p_name  => 'ENTRY',
        p_title => 'Entry' );
    --
    store_display_group (
        p_name  => 'CONTROLS',
        p_title => 'Controls' );
    --
    store_display_group (
        p_name  => 'COLUMN_FILTER',
        p_title => 'Column Filter' );
    --
    store_display_group (
        p_name  => 'PRINTING',
        p_title => 'Printing' );
    --
    store_display_group (
        p_name  => 'PAGE',
        p_title => 'Page' );
    --
    store_display_group (
        p_name  => 'COLUMN_HEADINGS',
        p_title => 'Column Headings' );
    --
    store_display_group (
        p_name  => 'COLUMNS',
        p_title => 'Columns' );
    --
    store_display_group (
        p_name  => 'PAGE_HEADER',
        p_title => 'Page Header' );
    --
    store_display_group (
        p_name  => 'PAGE_FOOTER',
        p_title => 'Page Footer' );
    --
    store_display_group (
        p_name  => 'OUTPUT',
        p_title => 'Output' );
    --
    store_display_group (
        p_name  => 'EDIT',
        p_title => 'Edit' );
    --
    store_display_group (
        p_name  => 'EDIT_AUTH',
        p_title => 'Edit Authorization' );
    --
    store_display_group (
        p_name  => 'TOOLBAR',
        p_title => 'Toolbar' );
    --
    store_display_group (
        p_name  => 'OVERVIEW',
        p_title => 'Overview' );
    --
    store_display_group (
        p_name  => 'DATA_CURSOR',
        p_title => 'Data Cursor' );
    --
    store_display_group (
        p_name  => 'COLUMN_MAPPING',
        p_title => 'Column Mapping' );
    --
    store_display_group (
        p_name  => 'LINE',
        p_title => 'Line' );
    --
    store_display_group (
        p_name  => 'MARKER',
        p_title => 'Marker' );
    --
    store_display_group (
        p_name  => 'MAJOR_TICKS',
        p_title => 'Major Ticks' );
    --
    store_display_group (
        p_name  => 'MINOR_TICKS',
        p_title => 'Minor Ticks' );
    --
    store_display_group (
        p_name  => 'TICK_LABEL',
        p_title => 'Tick Label' );
    --
    store_display_group (
        p_name  => 'DUAL_Y_AXES',
        p_title => 'Dual Y Axes' );
    --
    store_display_group (
        p_name  => 'ANIMATION',
        p_title => 'Animation' );
    --
    store_display_group (
        p_name  => 'MASTER_DETAIL',
        p_title => 'Master Detail' );
    --
    store_display_group (
        p_name  => 'REMOTE_CACHE',
        p_title => 'Remote Cache' );
    --
    store_display_group (
        p_name  => 'ZOOM_SCALE',
        p_title => 'Zoom Scale' );
    --
    store_display_group (
        p_name  => 'TIME_SCALE',
        p_title => 'Time Scale' );
    --
    store_display_group (
        p_name  => 'GANTT_VIEWPORT',
        p_title => 'Viewport' );
    --
    store_display_group (
        p_name  => 'LOCAL_POST_PROCESSING',
        p_title => 'Local Post Processing' );
    --
    store_display_group (
        p_name  => 'MULTI_SERIES',
        p_title => 'Multi-Series Chart Data' );
    --
    store_display_group (
        p_name  => 'LIST_ENTRIES',
        p_title => 'List Entries' );
    --
    store_display_group (
        p_name  => 'DEPENDING_ON',
        p_title => 'Depending On' );
    --
    store_display_group (
        p_name  => 'CASCADING_LOV',
        p_title => 'Cascading List of Values' );
    --
    store_display_group (
        p_name  => 'QUERY',
        p_title => 'Query' );
    --
    store_display_group (
        p_name  => 'CARD',
        p_title => 'Card' );
    --
    store_display_group (
        p_name  => 'MAP_REGION',
        p_title => 'Map' );
    --
    store_display_group (
        p_name  => 'MAP_LAYER_ZOOM',
        p_title => 'Zoom Levels' );
    --
    store_display_group (
        p_name  => 'MAP_REGION_INIT',
        p_title => 'Initial Position and Zoom' );
    --
    store_display_group (
        p_name  => 'MAP_REGION_POINT_FEATURE_STYLE',
        p_title => 'Point Objects' );
    --
    store_display_group (
        p_name  => 'MAP_REGION_POINT_CLUSTER',
        p_title => 'Point Clustering' );
    --
    store_display_group (
        p_name  => 'MAP_REGION_ROW_SELECTION',
        p_title => 'Row Assignment' );
    --
    store_display_group (
        p_name  => 'MAP_REGION_FEATURE_INFO_WINDOW',
        p_title => 'Info Window' );
    --
    store_display_group (
        p_name  => 'SUB_TITLE',
        p_title => 'Subtitle' );
    --
    store_display_group (
        p_name  => 'BODY',
        p_title => 'Body' );
    --
    store_display_group (
        p_name  => 'SECONDARY_BODY',
        p_title => 'Secondary Body' );
    --
    store_display_group (
        p_name  => 'ICON_AND_BADGE',
        p_title => 'Icon and Badge' );
    --
    store_display_group (
        p_name  => 'MEDIA',
        p_title => 'Media' );
    --
    store_display_group (
        p_name  => 'AUTHORIZATION_SCHEME',
        p_title => 'Authorization Scheme' );
    --
    store_display_group (
        p_name  => 'DATABASE_SESSION',
        p_title => 'Database Session' );
    --
    store_display_group (
        p_name  => 'NAME',
        p_title => 'Name' );
    --
    store_display_group (
        p_name  => 'SESSION',
        p_title => 'Session' );
    --
    store_display_group (
        p_name  => 'ADDITIONAL_CODE',
        p_title => 'Additional Code Execution' );
    --
    store_display_group (
        p_name  => 'AUTHENTICATION',
        p_title => 'Authentication' );
    --
    store_display_group (
        p_name  => 'DATABASE_CREDENTIAL',
        p_title => 'Database Credential' );
    --
    store_display_group (
        p_name  => 'ENDPOINT_URL',
        p_title => 'Endpoint URL' );
    --
    store_display_group (
        p_name  => 'HTML_FORMAT',
        p_title => 'HTML Format' );
    --
    store_display_group (
        p_name  => 'PLAIN_TEXT_FORMAT',
        p_title => 'Plain Text Format' );
    --
    store_display_group (
        p_name  => 'MESSAGE',
        p_title => 'Message' );
    --
    store_display_group (
        p_name  => 'SESSION_STATE',
        p_title => 'Session State' );
    --
    store_display_group (
        p_name  => 'STATUS',
        p_title => 'Status' );
    --
    store_display_group (
        p_name  => 'ICON',
        p_title => 'Icon' );
    --
    store_display_group (
        p_name  => 'IS_CURRENT',
        p_title => 'Is Current' );
    --
    store_display_group (
        p_name  => 'CLICK_COUNTING',
        p_title => 'Click Counting' );
    --
    store_display_group (
        p_name  => 'USER_DEFINED_ATTRIBUTES',
        p_title => 'User Defined Attributes' );
    --
    store_display_group (
        p_name  => 'GLOBALIZATION',
        p_title => 'Globalization' );
    --
    store_display_group (
        p_name  => 'ACTION_EXECUTION',
        p_title => 'Action Execution' );
    --
    store_display_group (
        p_name  => 'MULTIPLE_VALUES',
        p_title => 'Multiple Values' );
    --
    store_display_group (
        p_name  => 'CONFIRMATION',
        p_title => 'Confirmation' );
    --
    store_display_group (
        p_name  => 'SUGGESTIONS',
        p_title => 'Suggestions' );
  --
    store_display_group (
        p_name  => 'ACCESSIBILITY',
        p_title => 'Accessibility' );
    --
    store_display_group (
        p_name  => 'EXTERNAL_FILTER_ORDER_BY',
        p_title => 'External Filter and Order By' );
    --
    store_display_group (
        p_name  => 'SOURCE_ORDER_BY',
        p_title => 'Order By' );
    --
    store_display_group (
        p_name  => 'DATA_PROFILE',
        p_title => 'Data Profile' );
    --
    store_display_group (
        p_name  => 'PARSING',
        p_title => 'Parsing' );
    --
    store_display_group (
        p_name  => 'LOOKUP',
        p_title => 'Lookup' );
    --
    store_display_group (
        p_name  => 'TRANSFORMATION',
        p_title => 'Transformation' );
    --
    store_display_group (
        p_name  => 'REMOTE_REST',
        p_title => 'Remote REST Data Source Server' );
    --
    store_display_group (
        p_name  => 'TARGET',
        p_title => 'Target' );
    --
    store_display_group (
        p_name  => 'SYNCHRONIZATION',
        p_title => 'REST Synchronization' );
    --
    store_display_group (
        p_name  => 'SYNCHRONIZATION_RATE_LIMIT',
        p_title => 'Synchronization Rate Limit' );
    --
    store_display_group (
        p_name  => 'OPERATION',
        p_title => 'Operation' );
    --
    store_display_group (
        p_name  => 'ROW_SEARCH',
        p_title => 'Row Search' );
    --
    store_display_group (
        p_name  => 'AVAILABILITY',
        p_title => 'Availability' );
    --
    store_display_group (
        p_name  => 'REPORT_PRINTING',
        p_title => 'Report Printing' );
    --
    store_display_group (
        p_name  => 'SESSION_MANAGEMENT',
        p_title => 'Session Management' );
    --
    store_display_group (
        p_name  => 'SESSION_STATE_PROTECTION',
        p_title => 'Session State Protection' );
    --
    store_display_group (
        p_name  => 'APP_FORMAT_MASKS',
        p_title => 'Application Format Masks' );
    --
    store_display_group (
        p_name  => 'CHARACTER_VALUE_COMPARISON',
        p_title => 'Character Value Comparison' );
    --
    store_display_group (
        p_name  => 'LOGO',
        p_title => 'Logo' );
    --
    store_display_group (
        p_name  => 'NAVIGATION_BAR',
        p_title => 'Navigation Bar' );
    --
    store_display_group (
        p_name  => 'PWA',
        p_title => 'Progressive Web App' );
    --
    store_display_group (
        p_name  => 'INSTALLATION',
        p_title => 'Installation' );
    --
    store_display_group (
        p_name  => 'PREREQUISITES',
        p_title => 'Prerequisites' );
    --
    store_display_group (
        p_name  => 'INSTALL_MESSAGES',
        p_title => 'Installation Messages' );
    --
    store_display_group (
        p_name  => 'UPGRADE_MESSAGES',
        p_title => 'Upgrade Messages' );
    --
    store_display_group (
        p_name  => 'DEINSTALL_MESSAGES',
        p_title => 'Deinstallation Messages' );
    --
    store_display_group (
        p_name  => 'REST_SOURCE_CATALOG',
        p_title => 'REST Source Catalog' );
    --
    store_display_group (
        p_name  => 'TEMPLATES',
        p_title => 'Templates' );
    --
    store_display_group (
        p_name  => 'DEADLINE',
        p_title => 'Deadline' );
    --
    store_display_group (
        p_name  => 'ENTITY_TITLE',
        p_title => 'Entity Title' );
    --
    store_display_group (
        p_name  => 'TEMPLATE_OPTIONS',
        p_title => 'Template Options' );
    --
    store_display_group (
        p_name  => 'DEFINITION',
        p_title => 'Definition' );
    --
    store_display_group (
        p_name  => 'FIELD_CONTAINER',
        p_title => 'Field Container' );
    --
    store_display_group (
        p_name  => 'FIRST_ENTRY',
        p_title => 'First Entry' );
    --
    store_display_group (
        p_name  => 'SUBLIST_ENTRY',
        p_title => 'Sublist Entry' );
    --
    store_display_group (
        p_name  => 'AFTER_LIST_ENTRY',
        p_title => 'After List Entry' );
    --
    store_display_group (
        p_name  => 'CASCADING_STYLE_SHEET',
        p_title => 'Cascading Style Sheet' );
    --
    store_display_group (
        p_name  => 'ATTRIBUTE_DESCRIPTIONS',
        p_title => 'Attribute Descriptions' );
    --
    store_display_group (
        p_name  => 'SUB_REGIONS',
        p_title => 'Sub Regions' );
    --
    store_display_group (
        p_name  => 'IMAGE',
        p_title => 'Image' );
    --
    store_display_group (
        p_name  => 'REPORT_TEMPLATE',
        p_title => 'Report Template' );
    --
    store_display_group (
        p_name  => 'COLUMN_TEMPLATES',
        p_title => 'Column Templates' );
    --
    store_display_group (
        p_name  => 'COLUMN_TEMPLATE_1',
        p_title => 'Column Template 1' );
    --
    store_display_group (
        p_name  => 'COLUMN_TEMPLATE_2',
        p_title => 'Column Template 2' );
    --
    store_display_group (
        p_name  => 'COLUMN_TEMPLATE_3',
        p_title => 'Column Template 3' );
    --
    store_display_group (
        p_name  => 'COLUMN_TEMPLATE_4',
        p_title => 'Column Template 4' );
    --
    store_display_group (
        p_name  => 'ROW_TEMPLATES',
        p_title => 'Row Templates' );
    --
    store_display_group (
        p_name  => 'ROW_TEMPLATE_1',
        p_title => 'Row Template 1' );
    --
    store_display_group (
        p_name  => 'ROW_TEMPLATE_2',
        p_title => 'Row Template 2' );
    --
    store_display_group (
        p_name  => 'ROW_TEMPLATE_3',
        p_title => 'Row Template 3' );
    --
    store_display_group (
        p_name  => 'ROW_TEMPLATE_4',
        p_title => 'Row Template 4' );
    --
    store_display_group (
        p_name  => 'PAGINATION_SUBTEMPLATE',
        p_title => 'Pagination Subtemplates' );
    --
    store_display_group (
        p_name  => 'ROW_HIGHLIGHTING',
        p_title => 'Row Highlighting' );
    --
    store_display_group (
        p_name  => 'PAGE_SUBTEMPLATE',
        p_title => 'Subtemplate' );
    --
    store_display_group (
        p_name  => 'IMAGE_BASED_TAB',
        p_title => 'Image Based Tab' );
    --
    store_display_group (
        p_name  => 'STANDARD_TAB',
        p_title => 'Standard Tab' );
    --
    store_display_group (
        p_name  => 'PARENT_TAB',
        p_title => 'Parent Tab' );
    --
    store_display_group (
        p_name  => 'POSITIONS',
        p_title => 'Positions' );
    --
    store_display_group (
        p_name  => 'DEFAULT_SLOTS',
        p_title => 'Default Slots' );
    --
    store_display_group (
        p_name  => 'ERROR_PAGE',
        p_title => 'Error Page' );
    --
    store_display_group (
        p_name  => 'CALLBACKS',
        p_title => 'Callbacks' );
    --
    store_display_group (
        p_name  => 'SUPPORTED_FOR',
        p_title => 'Supported for' );
    --
    store_display_group (
        p_name  => 'STANDARD_ATTRIBUTES',
        p_title => 'Standard Attributes' );
    --
    store_display_group (
        p_name  => 'CUSTOM_ATTRIBUTES',
        p_title => 'Custom Attributes' );
    --
    store_display_group (
        p_name  => 'FILES',
        p_title => 'Files' );
    --
    store_display_group (
        p_name  => 'FILE_URLS_TO_LOAD',
        p_title => 'File URLs to Load' );
    --
    store_display_group (
        p_name  => 'INFORMATION',
        p_title => 'Information' );
    --
    store_display_group (
        p_name  => 'CONDITION',
        p_title => 'Condition' );
    --
    store_display_group (
        p_name  => 'EXAMPLES',
        p_title => 'Examples' );
    --
    store_display_group (
        p_name  => 'COMPONENT_LIST_OF_VALUES',
        p_title => 'Component List of Values' );
    --
    store_display_group (
        p_name  => 'COMPONENT_DEFAULTS',
        p_title => 'Component Defaults' );
    --
    store_display_group (
        p_name  => 'REGION_DEFAULTS',
        p_title => 'Region Defaults' );
    --
    store_display_group (
        p_name  => 'DIALOG_DEFAULTS',
        p_title => 'Dialog Defaults' );
    --
    store_display_group (
        p_name  => 'ICONS',
        p_title => 'Icons' );
    --
    store_display_group (
        p_name  => 'THEME_ROLLER_ATTRIBUTES',
        p_title => 'Theme Roller Attributes' );
    --
    store_display_group (
        p_name  => 'ACTIVITY',
        p_title => 'Activity' );
    --
    store_display_group (
        p_name  => 'VARIABLE',
        p_title => 'Variable' );
    --
    --
    store_display_group (
        p_name  => 'SUBENTRIES',
        p_title => 'Subentries' );
    --
    store_display_group (
        p_name  => 'WORKING_COPY',
        p_title => 'Working Copy' );
    --
    store_display_group (
        p_name  => 'LIST',
        p_title => 'List' );
    --
    store_display_group (
        p_name  => 'SUBLIST',
        p_title => 'SubList' );
    --
    store_display_group (
        p_name  => 'ITEM',
        p_title => 'Item' );
    --
    store_display_group (
        p_name  => 'ERROR_TEMPLATES',
        p_title => 'Error Templates' );
    --
    store_display_group (
        p_name  => 'COMPONENT_TYPE_SUPPORT',
        p_title => 'Component Type Support' );
    --
    store_display_group (
        p_name  => 'GRID_LAYOUT_RENDERING',
        p_title => 'Grid Layout Rendering' );
    --
    store_display_group (
        p_name  => 'FEEDBACK',
        p_title => 'Feedback' );
    --
    store_display_group (
        p_name  => 'TEMPLATE',
        p_title => 'Template' );
    --
    store_display_group (
        p_name  => 'POPUP_ICON',
        p_title => 'Popup Icon' );
    --
    store_display_group (
        p_name  => 'SEARCH_FIELD',
        p_title => 'Search Field' );
    --
    store_display_group (
        p_name  => 'FIND_BUTTON',
        p_title => 'Find Button' );
    --
    store_display_group (
        p_name  => 'CLOSE_BUTTON',
        p_title => 'Close Button' );
    --
    store_display_group (
        p_name  => 'NEXT_BUTTON',
        p_title => 'Next Button' );
    --
    store_display_group (
        p_name  => 'PREVIOUS_BUTTON',
        p_title => 'Previous Button' );
    --
    store_display_group (
        p_name  => 'WINDOW',
        p_title => 'Window' );
    --
    store_display_group (
        p_name  => 'RESULT_SET',
        p_title => 'Result Set' );
    --
    store_display_group (
        p_name  => 'PAGE_PATTERN',
        p_title => 'Page Pattern' );
    --
    store_display_group (
        p_name  => 'ADDITIONAL_DATA',
        p_title => 'Additional Data' );
    --
    store_display_group (
        p_name  => 'GENERATIVE_AI_SERVICE',
        p_title => 'Generative AI Service');
    --
    store_display_group (
        p_name  => 'AI',
        p_title => 'Generative AI' );
    --
    store_display_group (
        p_name  => 'VECTOR_PROVIDER',
        p_title => 'Vector Provider');
    --
    store_display_group (
        p_name  => 'VECTOR_ATTRIBUTES',
        p_title => 'Vector Attributes');
    --
    store_display_group (
        p_name  => 'ROW_SELECTION',
        p_title => 'Row Selection' );
    --
    store_display_group (
        p_name  => 'COMPONENT',
        p_title => 'Component' );
    --
    store_display_group (
        p_name  => 'DISPLAY_FORMAT_MASKS',
        p_title => 'Display Format Masks' );
    --
    store_display_group (
        p_name  => 'OPENTELEMETRY',
        p_title => 'OpenTelemetry' );
    --
    --******************
    -- END DISPLAY GROUP
    --******************
    --
    ------------------------------------------------------------------------
    -- Error Messages
    ------------------------------------------------------------------------
    l_message_name := 'ERROR.APP_ID_EXISTS';
    store_msg (
        p_name         => l_message_name,
        p_message_text => 'Application with this ID already exists.' );
    --
    l_message_name := 'ERROR.TRANS_APP_ID_NO_ZERO';
    store_msg (
        p_name         => l_message_name,
        p_message_text => 'Translation Application must not end in zero.' );
    --
    --*******************
    -- END ERROR MESSAGES
    --*******************
    --
    ------------------------------------------------------------------------
    -- Properties
    ------------------------------------------------------------------------
    --
    l_property_id := 1;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NAME',
        p_prompt             => 'Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'NAME',
        p_display_length     => 32,
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_is_translatable    => true,
        p_help_text          => q'~Enter a descriptive name for this component.~',
        p_comment_text       => q'~$$$ Note: Only true because name used by PAGE is defined as translatable in old metadata! Check.~' );
    --
    l_property_id := 2;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUILD_OPTION_STATUS',
        p_prompt             => 'Status',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PATCH_STATUS',
        p_display_group_name => 'STATUS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a build option status for this component.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Include',
        p_return_value  => 'INCLUDE',
        p_help_text     => q'~Use all components flagged with this build option.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Exclude',
        p_return_value  => 'EXCLUDE',
        p_help_text     => q'~Do not use any component flagged with this build option.~' );
    --
    l_property_id := 3;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_ON_EXPORT',
        p_prompt             => 'Default on Export',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DEFAULT_ON_EXPORT',
        p_display_group_name => 'STATUS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the default build option applied to this component when exporting. This option can be over ridden by export options.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Exclude',
        p_return_value  => 'EXCLUDE',
        p_help_text     => q'~Disabled and not a part of the application.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Include',
        p_return_value  => 'INCLUDE',
        p_help_text     => q'~Enabled and part of the application.~' );
    --
    l_property_id := 4;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMMENTS',
        p_prompt             => 'Comments',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'COMMENTS',
        p_display_length     => 50,
        p_max_length         => 4000,
        p_display_group_name => 'COMMENTS',
        p_help_text          => q'~Enter any developer comments or notes here. These comments only display within App Builder and never display when running the application.~' );
    --
    l_property_id := 5;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AUTHORIZATION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SUPPORTED UI',
        p_db_column          => 'SCHEME_TYPE',
        p_display_group_name => 'AUTHORIZATION_SCHEME',
        p_lov_type           => 'PLUGINS',
        p_help_text          => q'~<p>Specify how this authorization scheme will be applied. The following types are supported:</p>
#NATIVE_PLUGINS#
<p>Depending on your application configuration, you may also have additional authorization type plug-ins available here.
These display as <em>&lt;My Plug-in&gt; [Plug-in]</em>.
The following plug-ins install into this application's shared components:</p>
#CUSTOM_PLUGINS#~' );
    --
    l_property_id := 6;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ERROR_MESSAGE',
        p_prompt             => 'Error Message',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'ERROR_MESSAGE',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_examples           => '#LABEL# must have some value.',
        p_display_group_name => 'ERROR',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter the text to be displayed in the event that the validation does not pass.</p>
<p>You can use <code>#LABEL#</code> as placeholder for the label of the associated page item or <code>#COLUMN_HEADER#</code> for the heading of the associated editable region column. The placeholders are not supported if error display location is set to On Error Page.</p>~' );
    --
    l_property_id := 7;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EVALUATION_POINT',
        p_prompt             => 'Evaluation Point',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CACHING',
        p_display_group_name => 'SERVER_CACHE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Authorization schemes are evaluated on first use in a session.
Select the appropriate evaluation point to determine whether subsequent use of the given authorization obtains the result from memory or re-evaluates the authorization scheme.</p>
#LOV_VALUES#
<p>The default value <em>Once per session</em> is the most efficient.
You should choose another value if the authorization check depends on changing session state or other factors that are not consistent over an entire session.
The options <em>Once per component</em> and <em>Always (No Caching)</em> provide additional parameters that can be defined for use by the authorization scheme.
In authorization plugins, you can use the <em>component.type</em>, <em>component.id</em> and <em>component.name</em> attributes of the <em>t_authorization</em> parameter.
For the built-in <em>Exists SQL Query</em> and <em>PL/SQL Function Body Returning Boolean</em> types, equivalent bind variables <em>:APP_COMPONENT_TYPE</em>, <em>:APP_COMPONENT_ID</em> and <em>:APP_COMPONENT_NAME</em> are available.
</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Once per Session',
        p_return_value  => 'BY_USER_BY_SESSION',
        p_help_text     => q'~Evaluates only once and then uses the result in memory.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Once per Page View',
        p_return_value  => 'BY_USER_BY_PAGE_VIEW',
        p_help_text     => q'~Evaluates once for each request that is processed. Use the result in memory if the authorization scheme is referenced in more than one component on the page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Once per Component',
        p_return_value  => 'BY_COMPONENT',
        p_help_text     => q'~Evaluates once for each component that references the authorization scheme, but saves the result in the session. Further requests to render or process the scheme use the result in memory.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Always (No Caching)',
        p_return_value  => 'NOCACHE',
        p_help_text     => q'~The authorization scheme is always evaluated.~' );
    --
    l_property_id := 8;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'ALIAS',
        p_prompt                => 'Alias',
        p_property_type         => 'TEXT',
        p_db_column             => 'ALIAS',
        p_display_length        => 30,
        p_max_length            => 80,
        p_text_case             => 'LOWER',
        p_restricted_characters => 'SAFE_COMPONENT_NAME_NO_NUMBER',
        p_display_group_name    => 'IDENTIFICATION',
        p_validation_plsql_ret_error => q'~
begin
    if wwv_flow_page_dev.is_alias_reserved_word( p_alias => p_value ) then
        return wwv_flow_lang.message( 'PD.ERROR.INVALID_ALIAS_RESERVED_WORD', p_value );
    end if;
    return null;
end;~',
        p_help_text             => q'~Enter an alphanumeric alias for this page. You may use this alias to reference the page instead of the page number.
For example, if you were working on page 1 of application 100, you could create an alias called <code>home</code>.
You could then access this page from other pages using the following f?p syntax:
<pre>f?p=100:home</pre>~' );
    --
    l_property_id := 9;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'PAGE_GROUP',
        p_prompt                => 'Page Group',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'GROUP_ID',
        p_display_group_name    => 'IDENTIFICATION',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_page_group,
        p_help_text             => q'~Specify the page group to associate with this page.
Page groups do not affect functionality, but help developers manage the pages within an application.~' );
    --
    l_property_id := 10;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_MODE',
        p_prompt             => 'Page Mode',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PAGE_MODE',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the page mode for this page.</p>
#LOV_VALUES#
<p>Note that options <em>Modal</em> and <em>Non-Modal Dialog</em> will only be available for selection where the current application theme contains a default <em>Dialog Page Template</em>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Normal',
        p_return_value  => 'NORMAL',
        p_help_text     => q'~The page is presented as a normal &PRODUCT_NAME. application page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Modal Dialog',
        p_return_value  => 'MODAL',
        p_help_text     => q'~The page is presented as a modal dialog.<br>
A modal dialog is an overlay window positioned within the viewport, which remains active and focused until the end user dismisses (closes) it.
The underlying page is grayed out and the end user is prevented from interacting with the rest of the page until the dialog is closed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Non-Modal Dialog',
        p_return_value  => 'NON_MODAL',
        p_help_text     => q'~The page is presented as a non-modal dialog.<br>
A non-modal dialog is an overlay window positioned within the viewport, where the end user can interact with the dialog, and content on the page that launched the dialog.
A non-modal dialog can be used when the requested information is not essential to continue, work can continue elsewhere while the window is still open.~' );
    --
    l_property_id := 11;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PAGE_TEMPLATE',
        p_prompt                   => 'Page Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'STEP_TEMPLATE',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_page_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Select a page template to define the appearance and layout of this page.</p>
        <p>Page templates are defined in the application theme.
        When a page is created, the template is automatically set to <em>Theme Default</em> which will render the page using the default page template defined in the current theme.
        Making a selection here overrides the default page template.</p>
        <p>Many themes contain page templates with specific purposes, such as for displaying content with side columns, login page, dialog pages, and so forth.<br>
        Universal Theme provides the following page templates:
          <dl>
            <dt>Standard</dt>
              <dd>The default page template. Ideal for home pages, dashboards, large reports, and other layouts where maximum screen real-estate is desired.</dd>
            <dt>Left Side Column</dt>
              <dd>Provides a slot on the left side where search and filter regions can be placed.</dd>
            <dt>Right Side Column</dt>
              <dd>Provides a collapsible slot on the right side where action-oriented controls such as buttons or lists can be displayed.</dd>
            <dt>Left and Right Side Columns</dt>
              <dd>Provides both the left-side column and collapsible right-side column that is well suited for very complex pages.</dd>
            <dt>Login</dt>
              <dd>Used exclusively for the application login page.</dd>
            <dt>Marquee</dt>
              <dd>Provides a collapsible right side column and a title-bar area which contains primary information.
              This page template is well suited for displaying a single record which has several related reports or data.
              Marquee is commonly used for displaying Master-Detail relationships where a single master record is first selected from a report. </dd>
            <dt>Minimal (No Navigation)</dt>
              <dd>Useful for very simple pages, disclaimers, single page applications, or where navigation is not necessary.</dd>
          </dl>
          See Also: <a rel="noopener noreferrer" target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a>
        </p>~' );
    --
    l_property_id := 12;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'STANDARD_TAB_SET',
        p_prompt                => 'Standard Tab Set',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'TAB_SET',
        p_display_group_name    => 'TABS',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_tab_set,
        p_help_text             => q'~Select a standard tab set used for this page. A standard tab set is associated with a specific page number. You can use standard tabs to link users to a specific page.~' );
    --
    l_property_id := 13;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TITLE',
        p_prompt             => 'Title',
        p_property_type      => 'TEXT',
        p_db_column          => 'TITLE',
        p_display_length     => 70,
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the page title. The page title is displayed in the title bar of the browser window.~' );
    --
    l_property_id := 14;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CURSOR_FOCUS',
        p_prompt             => 'Cursor Focus',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FIRST_ITEM',
        p_display_group_name => 'NAVIGATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify whether the cursor is focused when first entering the page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'First item on page',
        p_return_value  => 'AUTO_FIRST_ITEM',
        p_help_text     => q'~The cursor focus is placed on the first field on the page using JavaScript, generated by the &PRODUCT_NAME. engine.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Do not focus cursor',
        p_return_value  => 'NO_FIRST_ITEM',
        p_help_text     => q'~The cursor is not focused and no JavaScript is generated.<br>
Select this option if the generated JavaScript conflicts with custom JavaScript.~' );
    --
    l_property_id := 15;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_FILE_URLS',
        p_prompt             => 'File URLs',
        p_property_type      => 'FILE URLS JAVASCRIPT',
        p_db_column          => 'JAVASCRIPT_FILE_URLS',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
<dt>Standard file reference</dt>
<dd><pre>/myjs/main.js</pre></dd>
<dt>Standard file reference which loads the minified file <code>main.min.js</code> from <code>/myjs/minified/</code> for regular page views and <code>main.js</code> from <code>/myjs/</code> in debug mode or when running the application from App Builder.</dt>
<dd><pre>/myjs/#MIN_DIRECTORY#main#MIN#.js</pre></dd>
<dt>Use this syntax if the library is also used from a RequireJS require call. The define name must match what is used in the requirejs.config paths and the value must be the global symbol exposed by the library. Only applies when using RequireJS. This avoids RequireJS  loading that library a second time.</dt>
<dd><pre>[define hammerjs=Hammer]/myjs/hammer.js</pre></dd>
<dt>Use this syntax if the file has a dependency on RequireJS. This will automatically load RequireJS before this file.</dt>
<dd><pre>[require requirejs]/myjs/main.js</pre></dd>
<dt>Use this syntax if the file has a dependency on Oracle JET. This will automatically load RequireJS and the Oracle JET RequireJS configuration before this file.</dt>
<dd><pre>[require jet]/myjs/main.js</pre></dd>
<dt>Use this syntax if the file is a JavaScript ES Module. It will add <code>type="module"</code> to the script tag.</dt>
<dd><pre>[module]/myjs/main.js</pre></dd>
<dt>Use this syntax if the file should be loaded asynchronously. It will add attribute <code>async</code> to the script tag.</dt>
<dd><pre>[async]/myjs/main.js</pre></dd>
<dt>Use this syntax if the file should only be executed after the document was been parsed. It will add attribute <code>defer</code> to the script tag. Note that modules are deferred by default.</dt>
<dd><pre>[defer]/myjs/main.js</pre></dd>
<dt>Multiple File URL directives can be provided but must be comma separated.</dt>
<dd><pre>[module, async]/myjs/main.js</pre></dd>
<dt>File reference using a query string in the URL referencing the application version, such that when the application is upgraded (and the version is incremented), the browser is instructed to always load the new file and ignore any previously cached files.</dt>
<dd><pre>/myjs/main.js?version=#APP_VERSION#</pre></dd>
</dl>~',
        p_display_group_name => 'JAVASCRIPT',
        p_help_text          => q'~<p>Enter JavaScript file URLs for code loaded on this page. Each URL must be written on a new line.
If you provide a minified version of your file you can use the substitution string <code>#MIN#</code> to include <code>.min</code> or <code>#MIN_DIRECTORY#</code> to include <code>minified/</code> in your file URL for a regular page view and an empty string if the page is viewed in debug mode or when running the application from App Builder.
You also have access to the substitution string <code>#APP_VERSION#</code> if you want to include the application's version in the file URL.</p>
<p>JavaScript file URLs you enter here replaces the <code>#PAGE_JAVASCRIPT#</code> substitution string in the page template.</p>
<p>Each file URL can be prefixed with a pair of brackets (<code>[...]</code>) containing one or more of the following directives. See the examples for details.</p>
<p><ul>
    <li>module</li>
    <li>defer</li>
    <li>async</li>
    <li>define</li>
    <li>require requirejs</li>
    <li>require jet</li>
</ul></p>
<p>Note: You do not need to include opening or closing <code>script</code> tags. Just specify the URL.</p>
<p>To comment out a File URL, prefix the line with two dashes: <code>--</code>. To comment out multiple lines, use the typical code block syntax: <code>/* */</code>.</p>~' );
    --
    l_property_id := 16;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_FUNCTION_AND_GLOBAL_VARIABLE_DECLARATION',
        p_prompt             => 'Function and Global Variable Declaration',
        p_property_type      => 'JAVASCRIPT',
        p_db_column          => 'JAVASCRIPT_CODE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'JAVASCRIPT',
        p_help_text          => q'~<p>Enter JavaScript code such as functions or global variable declarations referenced on this page.
To reference a shortcut, use <code>"SHORTCUTNAME"</code>.
If the same JavaScript is required on multiple pages, consider putting the code into an external JavaScript file to avoid duplication and to leverage browser caching of static files.</p>
<p>Code you enter here replaces the <code>#PAGE_JAVASCRIPT#</code> substitution string in the page template.</p>
<p>Note: You do not need to include opening or closing <code>script</code> tags. Just include the JavaScript code.</p>~' );
    --
    l_property_id := 17;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_EXECUTE_WHEN_PAGE_LOADS',
        p_prompt             => 'Execute when Page Loads',
        p_property_type      => 'JAVASCRIPT',
        p_db_column          => 'JAVASCRIPT_CODE_ONLOAD',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'JAVASCRIPT',
        p_help_text          => q'~<p>Enter JavaScript code to execute when the page loads.
The code is executed after the JavaScript code generated by &PRODUCT_NAME..</p>
<p>Code you enter here replaces the <code>#GENERATED_JAVASCRIPT#</code> substitution string in the page template.</p>
<p>Note: You do not need to add any opening or closing <code>script</code> tags, just the JavaScript code.</p>~' );
    --
    l_property_id := 18;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INCLUDE_STANDARD_JAVASCRIPT_AND_CSS',
        p_prompt             => 'Include Standard JavaScript and CSS',
        p_property_type      => 'YES NO',
        p_db_column          => 'INCLUDE_APEX_CSS_JS_YN',
        p_display_group_name => 'JAVASCRIPT',
        p_deprecated_values  => 'N',
        p_help_text          => q'~<p>&PRODUCT_NAME. typically requires specific JavaScript and CSS files.
For some applications, such as mobile applications, you may want to suppress the inclusion of these files on the page.</p>
<p>To Include the standard &PRODUCT_NAME. and JavaScript files select <strong>On</strong>. Selecting <strong>Off</strong> suppresses the inclusion of these files in the HTML Header.</p>
<p>Suppressing inclusion of these files can have adverse effects on an application and may cause it to break.
Therefore, disabling this attribute is only recommended for advanced developers.</p>~' );
    --
    l_property_id := 19;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HTML_HEADER',
        p_prompt             => 'HTML Header',
        p_property_type      => 'HTML',
        p_db_column          => 'HTML_PAGE_HEADER',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'HTML_HEADER',
        p_help_text          => q'~<p>Enter text to replace the <code>#HEAD#</code> substitution string in the page template header.
The values entered here are inserted after the HTML <code>&lt;head&gt;</code> tag. Use this page attribute to add page specific meta tags.
</p>
<p>Note: JavaScript code or Cascading Style Sheets should be added to the dedicated JavaScript and CSS attributes.</p>~' );
    --
    l_property_id := 20;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_HTML_BODY_ATTRIBUTE',
        p_prompt             => 'Page HTML Body Attribute',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'HTML_PAGE_ONLOAD',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'HTML_HEADER',
        p_help_text          => q'~Enter text substituted in for your page template's <code>#ONLOAD#</code> substitution string.
To use this feature, your page template must include the <code>#ONLOAD#</code> substitution string.~' );
    --
    l_property_id := 21;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HEADER_TEXT',
        p_prompt             => 'Header Text',
        p_property_type      => 'HTML',
        p_db_column          => 'WELCOME_TEXT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'HEADER_AND_FOOTER',
        p_is_translatable    => true,
        p_help_text          => q'~Enter text or HTML you want to appear immediately following the page header and before the body content.~' );
    --
    l_property_id := 22;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BODY_HEADER',
        p_prompt             => 'Body Header',
        p_property_type      => 'HTML',
        p_db_column          => 'BOX_WELCOME_TEXT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'HEADER_AND_FOOTER',
        p_is_translatable    => true,
        p_deprecated_values  => '$NOT_NULL$',
        p_help_text          => q'~Enter text or HTML you want to appear before regions that display on the running page.
Text you enter here appears before the page template <code>#BODY#</code> substitution string.~' );
    --
    l_property_id := 23;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FOOTER_TEXT',
        p_prompt             => 'Footer Text',
        p_property_type      => 'HTML',
        p_db_column          => 'FOOTER_TEXT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'HEADER_AND_FOOTER',
        p_is_translatable    => true,
        p_help_text          => q'~Enter text or HTML that appears before the page template footer.~' );
    --
    l_property_id := 24;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'AUTHORIZATION_SCHEME',
        p_prompt                => 'Authorization Scheme',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'REQUIRED_ROLE',
        p_display_group_name    => 'SECURITY',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~Select an authorization scheme to control this component. The authorization must evaluate to TRUE in order for this component to be rendered or executed.~' );
    --
    l_property_id := 25;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_AUTHENTICATION',
        p_prompt             => 'Authentication',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PAGE_IS_PUBLIC_Y_N',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify whether this page is public or requires authentication.
If a page is identified as public, the page can be viewed by any user who accesses the page.
The application's page sentry function may access this page attribute to identify pages that do not require prior authentication to view.
The implementation of the authentication scheme's page sentry function determines whether this attribute has any effect.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page Requires Authentication',
        p_return_value  => 'N' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page Is Public',
        p_return_value  => 'Y' );
    --
    l_property_id := 26;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEEP_LINKING',
        p_prompt             => 'Deep Linking',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DEEP_LINKING',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how external URL requests to a page are handled.
Page requests from within this application to this page, are not considered deep linking, and are not governed by this attribute's setting.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Enabled',
        p_return_value  => 'Y',
        p_help_text     => q'~If this page is specified as the target page in a URL, it ultimately redirects to this page.<br>
If the user is not already authenticated and the page is not public, then the user is prompted to login.
After successfully logging into the application, the user is redirected to this page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Disabled',
        p_return_value  => 'N',
        p_help_text     => q'~If the URL does not contain a valid session ID, &PRODUCT_NAME. starts a new session and redirects the user to the application home page, rather than to this page.~' );
    --
    l_property_id := 27;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_ACCESS_PROTECTION',
        p_prompt             => 'Page Access Protection',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PROTECTION_LEVEL',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select what type of session state protection is implemented for this page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Unrestricted',
        p_return_value  => 'N',
        p_help_text     => q'~The page may be requested using a URL, with or without session state arguments, and without having to have a checksum.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Arguments Must Have Checksum',
        p_return_value  => 'C',
        p_help_text     => q'~If Request, Clear Cache, or Name/Value Pair arguments appear in the URL, a checksum must also be provided.<br>
The checksum type must be compatible with the most stringent <em>Session State Protection</em> attribute of all the items passed as arguments.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No Arguments Supported',
        p_return_value  => 'U',
        p_help_text     => q'~A URL may be used to request the page, but the URL can not contain Request, Clear Cache, or Name/Value Pair arguments.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No URL Access',
        p_return_value  => 'D',
        p_help_text     => q'~The page may not be accessed using a URL.<br>
However, the page may be the target of a <em>Branch to Page</em> branch type, as this does not perform a URL redirect.~' );
    --
    l_property_id := 28;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_DUPLICATE_PAGE_SUBMISSIONS',
        p_prompt             => 'Enable duplicate page submissions',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ALLOW_DUPLICATE_SUBMISSIONS',
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select whether the end user may submit the same page more than once.
Use this feature to avoid duplicate inserts into the same table.
This can happen when an end user clicks the browser's back button and then submits the page again, or if the end user clicks the browser's reload button.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No - Prevent page from being re-posted',
        p_return_value  => 'N' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Yes - Enable page to be re-posted',
        p_return_value  => 'Y' );
    --
    l_property_id := 29;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ON_DUPLICATE_PAGE_SUBMISSIONS_GO_TO_THIS_URL',
        p_prompt             => 'On duplicate page submissions go to this URL',
        p_property_type      => 'TEXT',
        p_db_column          => 'ON_DUP_SUBMISSION_GOTO_URL',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Enter a URL target for when an end user attempts to perform a second page submission. &PRODUCT_NAME. displays an error message and a link to this URL to enable the user to continue.~' );
    --
    l_property_id := 30;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FORM_AUTO_COMPLETE',
        p_prompt             => 'Form Auto Complete',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'AUTOCOMPLETE_ON_OFF',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify whether auto-complete is disabled for this page. A value of <strong>On</strong> has no effect on this page. A value of <strong>Off</strong> generates the following HTML in the FORM tag:
<pre>
autocomplete="off"
</pre>
<p>Note: Different browsers may have different rules around when <code>autocomplete="off"</code> is respected or ignored. Therefore please bear this in mind specifically when setting this to <strong>Off</strong>, and test in your target browsers.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'On',
        p_return_value  => 'ON' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Off',
        p_return_value  => 'OFF' );
    --
    l_property_id := 31;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HIDDEN_REQUIRED_VALUE_TYPE',
        p_prompt             => 'Required Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'REQUIRED_VALUE_TYPE',
        p_display_group_name => 'PARAMETER' );
    --
    l_property_id := 32;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CACHE_TIMEOUT',
        p_prompt             => 'Cache Timeout',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CACHE_TIMEOUT_SECONDS',
        p_display_group_name => 'SERVER_CACHE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how long a cached page is valid. Subsequent page requests do not utilize the cached page if the timeout expires.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '10 seconds',
        p_return_value  => '10' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '1 minute',
        p_return_value  => '60',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '10 minutes',
        p_return_value  => '600' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '30 minutes',
        p_return_value  => '1800' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '1 hour',
        p_return_value  => '3600',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '2 hours',
        p_return_value  => '7200' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '3 hours',
        p_return_value  => '10800' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '4 hours',
        p_return_value  => '14400' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '6 hours',
        p_return_value  => '21600' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '12 hours',
        p_return_value  => '43200' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '1 day',
        p_return_value  => '86400',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '2 days',
        p_return_value  => '172800' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '3 days',
        p_return_value  => '259200' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '4 days',
        p_return_value  => '345600' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '1 week',
        p_return_value  => '604800' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '2 weeks',
        p_return_value  => '1209600' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '4 Weeks',
        p_return_value  => '2419200' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '10 Weeks',
        p_return_value  => '6048000' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '1 Year',
        p_return_value  => '31536000' );
    --
    l_property_id := 33;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BROWSER_CACHE',
        p_prompt             => 'Browser Cache',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'BROWSER_CACHE',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>If the cache is enabled, the browser can save the contents of your application's pages in its cache, both in memory and on disk.
If a user clicks the browser back button, the page typically loads from the cache, not from the server.
If the cache is disabled, the browser is instructed to not save page content and requests it anew from the server.</p>
<p>Oracle recommends, from a security perspective, that the cache is disabled, so the browser does not store sensitive data and always requests pages if the URL changes.
Otherwise, it may even be possible to go back in the browser history after a log out and see cached content of the former session.
Disabling the browser cache prevents subtle back button issues with pages that use partial page refresh, such as interactive reports.</p>
<p>If this attribute is set to <strong>Disabled</strong>, &PRODUCT_NAME. sends the HTTP header <em>cache-control: no-store</em> which instructs the Browser to not cache the page contents on disk or in memory.
If it is set to <strong>Application Default</strong>, the value at runtime is taken from the application's <em>Browser Cache</em> attribute.</p>
<p>Note: This feature requires modern browsers that support the HTTP header response variable <code>cache-control</code>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Enabled',
        p_return_value  => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Disabled',
        p_return_value  => 'N' );
    --
    l_property_id := 34;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'API_DIRECTION',
        p_prompt             => 'Direction',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DIRECTION',
        p_display_group_name => 'PARAMETER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the direction of the parameter as it's defined in the selected procedure or function.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'In',
        p_return_value  => 'IN' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Out',
        p_return_value  => 'OUT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'In/Out',
        p_return_value  => 'IN_OUT' );
    --
    l_property_id := 35;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IGNORE_OUTPUT',
        p_prompt             => 'Ignore Output',
        p_property_type      => 'YES NO',
        p_db_column          => 'IGNORE_OUTPUT',
        p_display_group_name => 'PARAMETER',
        p_help_text          => q'~Specify whether the parameters IN OUT, OUT or function result should be ignored.~' );
    --
    l_property_id := 36;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'API_DATA_TYPE',
        p_prompt             => 'Data Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DATA_TYPE',
        p_display_group_name => 'PARAMETER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Data type of the parameter as it's defined in the selected procedure or function.~' );
    --
    -- Supported standard parameter data types
    -- Note: Keep in sync with wwv_flow_property_dev.plb / emit_plsql_method_parameters,
    --                         wwv_flow_process_native.plb / invoke_api
    --                         dev_views.sql / wwv_flow_invokeapi_cparams_dev
    --                         PD config API_DATA_TYPE
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'VARCHAR2',
        p_return_value  => 'VARCHAR2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CLOB',
        p_return_value  => 'CLOB' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'NUMBER',
        p_return_value  => 'NUMBER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL INTEGER',
        p_return_value  => 'PLS_INTEGER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'BOOLEAN',
        p_return_value  => 'BOOLEAN' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DATE',
        p_return_value  => 'DATE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'TIMESTAMP',
        p_return_value  => 'TIMESTAMP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'TIMESTAMP WITH LOCAL TIME ZONE',
        p_return_value  => 'TIMESTAMP WITH LOCAL TIME ZONE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'TIMESTAMP WITH TIME ZONE',
        p_return_value  => 'TIMESTAMP WITH TIME ZONE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'INTERVAL YEAR TO MONTH',
        p_return_value  => 'INTERVAL YEAR TO MONTH' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'INTERVAL DAY TO SECOND',
        p_return_value  => 'INTERVAL DAY TO SECOND' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'BLOB',
        p_return_value  => 'BLOB' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CHAR',
        p_return_value  => 'CHAR' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'ROWID',
        p_return_value  => 'ROWID' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom',
        p_return_value  => 'CUSTOM',
        p_help_text     => q'~Use Custom if it's not a standard PL/SQL data type. Custom allows to specify the name of a PL/SQL record type or Database object type.~' );
    --
    l_property_id := 37;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'API_CUSTOM_DATA_TYPE',
        p_prompt             => 'Data Type Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'CUSTOM_DATA_TYPE',
        p_display_group_name => 'PARAMETER',
        p_help_text          => q'~Enter the name of the custom data type of the parameter.~' );
    --
    l_property_id := 38;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'BUILD_OPTION',
        p_prompt                => 'Build Option',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'REQUIRED_PATCH',
        p_display_group_name    => 'CONFIGURATION',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_build_option,
        p_help_text             => q'~<p>Select a build option for this component.</p>
                                     <p>Build Options allow application components and functionality to be conditionally enabled or disabled when the application is installed, or at runtime via API (APEX_UTIL.SET_BUILD_OPTION_STATUS).<br>
                                       Build Options can set this component to be Included or Excluded in the runtime application:</p>
                                     <p><strong>Included</strong> - Enabled and are part of the application.</p>
                                     <p><strong>Excluded</strong> - Disabled and are not a part of the application.</p>~',
        p_examples              => q'~<p>1. You are developing an application that will have many installations.
                                        Additionally, each installation may choose to enable or disable certain application functionality.
                                        With Build Options, you can develop one application and when installed, build options can be configured to include or exclude associated application functionality.
                                        You may also use the API to expose this feature within the application.
                                        This allows privileged end-users to selectively enable or disable application functionality.</p>
                                      <p>2. You are developing functionality which is not yet complete, so you do not wish to expose to end-users.
                                        Using Build Options enables you to disable this functionality from the application when it is built into the test and production environments.
                                        The benefit of this approach is that the application can still be deployed without including incomplete functionality.</p>
                                      <p>3. You are removing functionality you think is not needed by the application, but are unsure this is a safe operation.
                                        In this case, you can use Build Options to essentially "comment out" specific functionality.
                                        If on deployment, the removed functionality was deemed to be necessary, it can be re-instated.
                                        If this functionality was deemed to be unnecessary, then it can be safely removed from the application.</p>~' );
    --
    l_property_id := 39;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INLINE_ERROR_NOTIFICATION_TEXT',
        p_prompt             => 'In-line Error Notification Text',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'ERROR_NOTIFICATION_TEXT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'ERROR_HANDLING',
        p_help_text          => q'~Enter the error message displayed when an error occurs on this page. The error message is substituted for <code>#NOTIFICATION_MESSAGE#</code> in the page template.~' );
    --
    l_property_id := 40;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HELP_TEXT',
        p_prompt             => 'Help Text',
        p_property_type      => 'HTML',
        p_db_column          => 'HELP_TEXT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'HELP',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Use this attribute to enter help text for the current page. Page level help supports shortcuts using the following syntax:</p>
<pre>"SHORTCUT_NAME"</pre>
<p>Page help text is not displayed by default. However, you can readily develop a help system that exposes this text.</p>~' );
    --
    l_property_id := 41;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ERROR_HANDLING_FUNCTION',
        p_prompt             => 'Error Handling Function',
        p_property_type      => 'TEXT', -- $$$ for Advisor we should have a new property_type FUNCTION_NAME/PROCEDURE_NAME
        p_db_column          => 'ERROR_HANDLING_FUNCTION',
        p_display_length     => 78,
        p_max_length         => 255,
        p_display_group_name => 'ERROR_HANDLING',
        p_help_text          => q'~<p>Enter the name of the PL/SQL function called when an error occurs within the application.
You can use this function to act on various error codes including those emanating from the Oracle database, and log such errors in a custom table you define if necessary.
The function can include logic to modify the error message and display location, transforming Oracle database errors into user friendly messages.
For example, you can capture a unique key violation on <code>DEMO_CUSTOMERS</code> and replace the <code>ORA-00001</code> message with this text: Customer Name must be unique.
Installing the <strong>Poll</strong> Starter App, from the Gallery, creates the <code>EBA_QPOLL_FW</code> package, which includes the <code>apex_error_handling</code> function.
This error handling function includes extensive comments to make it easy for you to utilize as the basis for defining your own function.</p>
<p>The function name entered can reference a package function or stand alone function in the database. For example:
<pre>
log_apex_error
</pre>
</p>
<p>When referencing a database PL/SQL package or stand alone function, you can use the <code>#OWNER#</code> substitution string to reference the parsing schema of the current application. For example:
<pre>#OWNER#.log_apex_error</pre>
</p>
<p>If an error handling function is specified on a page then it is utilized, instead of this application level setting, for that page.</p>
<p>Error Handling Functions must implement the following interface:
<pre>
function &lt;name of function> (
    p_error in apex_error.t_error )
    return apex_error.t_error_result
</pre>
</p>
<p>See the API Reference manual for a description of the package <code>apex_error</code>.</p>~' );
    --
    l_property_id := 42;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HIDDEN_VALUE_TYPE',
        p_prompt             => 'Hidden Value Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'HIDDEN_VALUE_TYPE',
        p_display_group_name => 'PARAMETER' );
    --
    l_property_id := 43;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_META_TAGS',
        p_prompt             => 'Enable Meta Tags',
        p_property_type      => 'YES NO',
        p_db_column          => 'ENABLE_META_TAGS',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Select if meta tags can be added on this public page.~' );
    --
    l_property_id := 44;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MEDIA_TYPE',
        p_prompt             => 'Media Type',
        p_property_type      => 'TEXT',
        p_db_column          => 'MEDIA_TYPE',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Enter the Internet media type. An Internet media type is a two part identifier for file formats on the Internet.
A media type is composed of at least two parts: a type, a subtype, and one or more optional parameters.
This media type is used in the Content-Type HTTP header when rendering the page.</p>
<p>The page-level Media type overrides the application-level media type.
If both the page-level and application-level values for media type are <code>NULL</code>, the media type <code>text/html</code> is used.</p>~',
        p_comment_text       => q'~$$$ Should this property be deprecated???~' );
    --
    l_property_id := 45;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CSS_FILE_URLS',
        p_prompt             => 'File URLs',
        p_property_type      => 'FILE URLS CSS',
        p_db_column          => 'CSS_FILE_URLS',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
<dt>Standard file reference</dt>
<dd><pre>/mycss/main.css</pre></dd>
<dt>Standard file reference which loads the minified file main.min.css from /mycss/minified/ for regular page views and main.css from /mycss/ in debug mode or when running the application from App Builder.</dt>
<dd><pre>/mycss/#MIN_DIRECTORY#main#MIN#.css</pre></dd>
<dt>Conditional media query</dt>
<dd><pre>[media="only screen and (max-device-width: 480px)"]/mycss/smartphone.css</pre></dd>
<dt>File reference using a query string in the URL referencing the application version, such that when the application is upgraded (and the version is incremented), the browser is instructed to always load the new file and ignore any previously cached files.</dt>
<dd><pre>/mycss/main.css?version=#APP_VERSION#</pre></dd>
</dl>~',
        p_display_group_name => 'CSS',
        p_help_text          => q'~<p>Enter Cascading Style Sheet (CSS) file URLs loaded on this page. Each URL must be written on a new line.
If you provide a minified version of your file you can use the substitution string <code>#MIN#</code> to include <code>.min</code> or <code>#MIN_DIRECTORY#</code> to include <code>minified/</code> in your file URL for a regular page view and an empty string if the page is viewed in debug mode or when running the application from App Builder.
You also have access to the substitution string <code>#APP_VERSION#</code> if you want to include the application's version in the file URL.</p>
<p>File URLs you enter here replace the <code>#PAGE_CSS#</code> substitution string in the page template.</p>
<p>Each file URL can optionally be prefixed with <code>[media ...]</code> for conditional loading. See the examples for details.</p>
<p>Note: You do not need to include opening or closing <code>link</code> tags. Just include the file URL.</p>
<p>To comment out a File URL, prefix the line with two dashes: <code>--</code>. To comment out multiple lines, use the typical code block syntax: <code>/* */</code>.</p>~' );
    --
    l_property_id := 46;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INLINE_CSS',
        p_prompt             => 'Inline',
        p_property_type      => 'CSS',
        p_db_column          => 'INLINE_CSS',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_examples           => q'~<dl>
<dt>Sets the CSS class <code>display_only</code> to bold</dt>
<dd><pre>
.display_only {
  font-weight: bold;
}
</pre></dd>
</dl>~',
        p_display_group_name => 'CSS',
        p_help_text          => q'~<p>Enter CSS code for this page. Any CSS entered here will only be applied to this page and will not affect any other pages. The entered CSS code will replace the #PAGE_CSS# substitution string in the page template.</p>
<p>If the same CSS is required on several pages, it's best to put the code into an external file. This will help to avoid duplication and take advantage of browser caching of static files. You can reference the external file at the application level, under Shared Components, User Interface Attributes, CSS, File URLs.</p>
<p>Note that you don't need to include opening or closing <code>style</code> tags. Simply add your CSS code.</p>~' );
    --
    l_property_id := 47;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DIALOG_WIDTH',
        p_prompt             => 'Width',
        p_property_type      => 'TEXT',
        p_db_column          => 'DIALOG_WIDTH',
        p_display_length     => 10,
        p_max_length         => 20,
        p_display_group_name => 'DIALOG',
        p_help_text          => q'~<p>Enter the width of the dialog, in pixels.
The substitution string <code>#DIALOG_WIDTH#</code> in the dialog initialization code of the page template is replaced with the value entered in this item.</p>~' );
    --
    l_property_id := 48;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DIALOG_MAX_WIDTH',
        p_prompt             => 'Maximum Width',
        p_property_type      => 'TEXT',
        p_db_column          => 'DIALOG_MAX_WIDTH',
        p_display_length     => 10,
        p_max_length         => 20,
        p_display_group_name => 'DIALOG',
        p_help_text          => q'~<p>Enter the maximum width of the dialog in pixels.
The substitution string <code>#DIALOG_MAX_WIDTH#</code> in the dialog initialization code of the page template is replaced with the value entered in this item.</p>~' );
    --
    l_property_id := 49;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'DIALOG_ATTRIBUTES',
        p_prompt                => 'Attributes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ',',
        p_db_column             => 'DIALOG_ATTRIBUTES',
        p_display_length        => 100,
        p_max_length            => 255,
        p_display_group_name    => 'DIALOG',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~A subset of dialog attributes are declaratively supported: <em>height, width, and maximum width</em>.
To define any additional attributes for the dialog, enter the name/value pairings in a comma separated list.
<p>The substitution string <code>#DIALOG_ATTRIBUTES#</code> in the dialog initialization code defined at page template level, is replaced by any value(s) entered in this item.</p>
<p>The jQuery UI dialog widget is utilized.</p>
<p>For example, a dialog page could have the following attributes defined: <code>draggable:true</code></p>
<p>For further information on the attributes available, refer to the <a rel="noopener noreferrer" target="_blank" href="http://api.jqueryui.com/dialog/">jQuery UI dialog widget documentation</a>.</p>~' );
    --
    l_property_id := 50;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DESCRIPTION',
        p_prompt             => 'Description',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'DESCRIPTION',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'DESCRIPTION',
        p_help_text          => q'~Enter a description.~' );
    --
    l_property_id := 51;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'COMPUTATION_ITEM_NAME',
        p_prompt                   => 'Item Name',
        p_property_type            => 'ITEM',
        p_db_column                => 'COMPUTATION_ITEM',
        p_display_length           => 50,
        p_max_length               => 255,
        p_display_group_name       => 'IDENTIFICATION',
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Enter the page or application item populated by this computation. You can type in the name or pick from the list of available items.~' );
    --
    l_property_id := 52;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMPUTATION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'COMPUTATION_TYPE',
        p_display_group_name => 'COMPUTATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a computation type from the following list.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC_ASSIGNMENT',
        p_help_text     => q'~Set to the text entered into <em>Static Value</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM_VALUE',
        p_help_text     => q'~Set to the value held in session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return single value)',
        p_return_value  => 'QUERY',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the first value returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return multiple values)',
        p_return_value  => 'QUERY_COLON',
        p_help_text     => q'~Set to multiple values returned from the <em>SQL Query</em>. The format of what is returned is determined by the current item's Multiple Values setting. If Multiple Values is set to <em>Delimited Values</em>, the value will be a single concatenated list separated by the defined Separator. If Multiple Values is set to <em>JSON Array</em>, the value will be a JSON Array of the values. If Multiple Values is set to <em>No</em> or the item does not support multiple values, then the value is a single concatenated list separated by a colon.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Expression',
        p_return_value  => 'EXPRESSION',
        p_help_text     => q'~Set to the value that results from executing the <em>Expression</em> entered.~'  );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body',
        p_return_value  => 'FUNCTION_BODY',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value returned from the <em>Function Body</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Preference',
        p_return_value  => 'SET_ITEM_EQUAL_THIS_PREFERENCE',
        p_help_text     => q'~Set to the value of the <em>Preference</em> entered.~' );
    --
    l_property_id := 53;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMPUTATION_STATIC_VALUE',
        p_prompt             => 'Static Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'COMPUTATION',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'COMPUTATION',
        p_help_text          => q'~Enter the text that is used to populate the computation item.~' );
    --
    l_property_id := 54;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'COMPUTATION_SQL_STATEMENT',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'COMPUTATION',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_display_group_name   => 'COMPUTATION',
        p_help_text            => q'~Enter a SQL query that provides a value used to populate the computation item. If the result contains multiple rows then only the value from the first row is returned.~' );
    --
    l_property_id := 55;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_SERVER_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PRINT_SERVER_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of print server.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Oracle BI Publisher',
        p_return_value  => 'BIP',
        p_help_text     => q'~Select this option if you are using a licensed version of Oracle BI Publisher.
This option enables you to take report query results and convert them from XML to RTF format using Oracle BI Publisher.
Select this option if you want to upload your own customized RTF or XSL-FO templates for printing reports within &PRODUCT_NAME..~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Apache FOP',
        p_return_value  => 'FOP',
        p_help_text     => q'~Select this option if you are using Apache FOP on an external J2EE server.
This option enables you to use the basic printing functionality, which includes creating report queries and
printing report regions using the default templates provided in &PRODUCT_NAME. and using your own customized XSL-FO templates.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'APEX Office Print',
        p_return_value  => 'AOP',
        p_help_text     => q'~Select this option if you are using APEX Office Print.~' );
    --
    l_property_id := 56;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CREDENTIAL_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'AUTHENTICATION_TYPE',
        p_display_group_name => 'AUTHENTICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Specify the Authentication type here. &PRODUCT_NAME. supports the following authentication types:</p>
<ul>
    <li><strong>Basic Authentication</strong> - Sends username and password in Base64-encoded form as the <strong>Authorization</strong> request header.</li>
    <li><strong>OAuth2 Client Credentials</strong> - &PRODUCT_NAME. exchanges the client ID and client secret for an <strong>Access Token</strong> using a token server URL. The access token is t
hen used to perform the actual request. If the access token is expired, &PRODUCT_NAME. will transparently request a new one.</li>
    <li><strong>OCI Native Authentication</strong> - &PRODUCT_NAME. signs requests to the <em>Oracle Cloud Infrastructur
e (OCI)</em> REST API, as described in the <a rel="noopener noreferrer" href="https://docs.cloud.oracle.com/en-us/iaas/Content/API/Concepts/signingrequests.htm">OCI Documentation</a>.</li>
    <li><strong>HTTP Hea
der</strong> - The credential is added to the REST request as an HTTP Header. The name of the credential is used as the HTTP Header name, and the Secret of the credential is used as the HTTP Header value. &PRODUCT_NAME. does not add these secrets to
the Debug log or any other logs.</li>
    <li><strong>URL Query String</strong> -  The credential is added to the URL of the REST request as a <em>Query String</em> Parameter (for example: <strong>?name=value</strong>). This option can be useful with
 API keys. &PRODUCT_NAME. does not add these secrets to the Debug log or any other logs. However, web proxy or other intermediate servers may record these credentials in their log files.</li>
    <li><strong>Key Pair</strong> - A key pair credential consists of a public key, openly shared for encrypting data, and a private key, securely kept secret for decrypting data, together ensuring a secure data exchange.</li>
</ul>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Basic Authentication',
        p_return_value  => 'BASIC' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'OAuth2 Client Credentials Flow',
        p_return_value  => 'OAUTH2_CLIENT_CREDENTIALS' );
    --
    /* $$$ currently commented out
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JSON Web Token',
        p_return_value  => 'JWT' );
    */
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Oracle Cloud Infrastructure (OCI)',
        p_return_value  => 'OCI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Certificate/Private Key Pair',
        p_return_value  => 'CERTIFICATE_PAIR',
        p_comment_text  => q'~$$$ Condition of type wwv_flow_platform.get_preference('SAML_ENABLED')='Y'~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTTP Header',
        p_return_value  => 'HTTP_HEADER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'URL Query String',
        p_return_value  => 'HTTP_QUERY_STRING' );
    --
    l_property_id := 57;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OAUTH_SCOPE',
        p_prompt             => 'OAuth Scope',
        p_property_type      => 'TEXT',
        p_db_column          => 'SCOPE',
        p_display_length     => 50,
        p_max_length         => 255,
        p_display_group_name => 'AUTHENTICATION',
        p_help_text          => q'~
<p>
Permissions represented by the Access Token in OAuth 2.0 terms are known as scopes. The scope parameter allows the application to express the desired scope of the access request.
</p>
<p>
If your authentication server requires a scope to be specified for the access token request, provide it here. The OAuth2 access token will then be requested with the following request body:
<pre>
grant_type=client_credentials&amp;scope=<strong>{scope}</strong>
</pre>
</p>~' );
    --
    l_property_id := 58;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'COMPUTATION_ITEM_VALUE',
        p_prompt                   => 'Item Name',
        p_property_type            => 'ITEM',
        p_db_column                => 'COMPUTATION',
        p_display_length           => 80,
        p_max_length               => 4000,
        p_display_group_name       => 'COMPUTATION',
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Enter the item whose value is used to populate the computation item. You can type in the name or pick from the list of available items.~' );
    --
    l_property_id := 59;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMPUTATION_PREFERENCE_VALUE',
        p_prompt             => 'Preference',
        p_property_type      => 'TEXT',
        p_db_column          => 'COMPUTATION',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'COMPUTATION',
        p_help_text          => q'~Enter a User Preference that has a value used to populate the computation item.~' );
    --
    l_property_id := 60;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXECUTION_SEQUENCE',
        p_prompt             => 'Sequence',
        p_property_type      => 'NUMBER',
        p_db_column          => 'SEQUENCE',
        p_display_length     => 10,
        p_display_group_name => 'EXECUTION',
        p_help_text          => q'~<p>Specify the sequence for this component. The sequence determines the order of execution.</p>
<p>Note: If two components have the same sequence value, then they may be executed in a different order when the application is exported and imported into another environment.</p>~' );
    --
    l_property_id := 61;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMPUTATION_POINT',
        p_prompt             => 'Point',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'COMPUTATION_POINT',
        p_display_group_name => 'EXECUTION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select at what point in page rendering or processing this computation is executed.
The most typical computation point is <strong>After Submit</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'New Session',
        p_return_value  => 'ON_NEW_INSTANCE',
        p_help_text     => q'~Executes when a new session is generated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Before Header',
        p_return_value  => 'BEFORE_HEADER',
        p_help_text     => q'~Rendering: Executes before the page renders.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Header',
        p_return_value  => 'AFTER_HEADER',
        p_help_text     => q'~Rendering: Executes after the header renders.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Before Regions',
        p_return_value  => 'BEFORE_BOX_BODY',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Rendering: Executes before regions render.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Regions',
        p_return_value  => 'AFTER_BOX_BODY',
        p_help_text     => q'~Rendering: Executes after regions render.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Before Footer',
        p_return_value  => 'BEFORE_FOOTER',
        p_help_text     => q'~Rendering: Executes before footer renders.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Footer',
        p_return_value  => 'AFTER_FOOTER',
        p_help_text     => q'~Rendering: Executes after footer renders.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Submit',
        p_return_value  => 'AFTER_SUBMIT',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Processing: Executes after the page is submitted, but before page processing.~' );
    --
    l_property_id := 62;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EVENT',
        p_prompt             => 'Event',
        p_property_type      => 'SUPPORTED UI',
        p_db_column          => 'BIND_EVENT_TYPE',
        p_display_group_name => 'WHEN',
        p_lov_type           => 'EVENTS',
        p_help_text          => q'~<p>Specify the event that causes the dynamic action to fire.
For information about specific events, please see the <a rel="noopener noreferrer" href="#SYSTEM_HELP_URL#CSH:pd-event" target="_blank">relevant section</a> in the <em>App Builder User's Guide</em>.</p>
Events are categorized into the following types:
<dl>
  <dt>Browser Events</dt>
    <dd>Standard browser events.</dd>
  <dt>Framework Events</dt>
    <dd>Framework events are triggered from within the Oracle APEX framework.</dd>
  <dt>Component Events</dt>
    <dd>Only available when there is a component available to your application that triggers a custom event. These events are triggered from either native components or plug-in components you have installed in your application.</dd>
  <dt>Custom Event</dt>
    <dd>Any custom event triggered from your application.</dd>
</dl>~' );
    --
    l_property_id := 63;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CUSTOM_EVENT',
        p_prompt             => 'Custom Event',
        p_property_type      => 'TEXT',
        p_db_column          => 'BIND_EVENT_TYPE_CUSTOM',
        p_display_length     => 50,
        p_max_length         => 130,
        p_display_group_name => 'WHEN',
        p_help_text          => q'~Specify a custom JavaScript event name if the declarative events provided are not sufficient.~' );
    --
    l_property_id := 64;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WHEN_TYPE',
        p_prompt             => 'Selection Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TRIGGERING_ELEMENT_TYPE',
        p_display_group_name => 'WHEN',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of page element or construct to be used to trigger the event. For examples of using a specific selection type, see Help on the associated attribute.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item(s)',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Triggered by one or more page items.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Button',
        p_return_value  => 'BUTTON',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Triggered by a button.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region',
        p_return_value  => 'REGION',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Triggered by a region.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Column(s)',
        p_return_value  => 'COLUMN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Triggered by one or more columns.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DOM Object',
        p_return_value  => 'DOM_OBJECT',
        p_is_deprecated => 'Y',
        p_help_text     => q'~<p>Triggered by the DOM object (<code>document</code>, <code>window</code>) or the <em>id</em> of a DOM object (<code>myElementID</code>).</p>
        <p>Note: <em>DOM Object</em> is deprecated and should be replaced by <em>JavaScript Expression</em> or <em>jQuery Selector</em>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'jQuery Selector',
        p_return_value  => 'JQUERY_SELECTOR',
        p_help_text     => q'~Triggered by one or more page elements returned by the jQuery Selector.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JavaScript Expression',
        p_return_value  => 'JAVASCRIPT_EXPRESSION',
        p_help_text     => q'~Triggered by the page elements returned by the JavaScript expression.~' );
    --
    l_property_id := 65;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'WHEN_REGION',
        p_prompt                   => 'Region',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'TRIGGERING_REGION_ID',
        p_display_group_name       => 'WHEN',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~<p>Select the name of the region that triggers the dynamic action.
For example this could be an 'Interactive Report' region, used in conjunction with an 'After Refresh' event, to define a dynamic action that fire whenever the report refreshes.</p>
<p>Having region trigger a dynamic action can be useful when you want to define similar behavior for multiple page items in a region. However, this is only possible for certain events that are raised by items within that region.
For a list of events that support this type of definition and an example of how they could be utilized, see item Help for the <em>Affected Elements</em> &gt; <em>Selection Type</em> of Event Scope on the Action page.</p>~' );
    --
    l_property_id := 66;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'WHEN_BUTTON',
        p_prompt                   => 'Button',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'TRIGGERING_BUTTON_ID',
        p_display_group_name       => 'WHEN',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_button,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~Select the button to trigger the dynamic action.~' );
    --
    l_property_id := 67;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'WHEN_ITEMS',
        p_prompt                   => 'Item(s)',
        p_property_type            => 'ITEM',
        p_multi_value_delimiter    => ',',
        p_db_column                => 'TRIGGERING_ELEMENT',
        p_display_length           => 60,
        p_max_length               => 4000,
        p_display_group_name       => 'WHEN',
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~Enter page or application items to trigger the dynamic action.
For multiple items, separate each item name with a comma.
You can type in the name or pick from the list of available items.
If you pick from the list and there is already text entered, a comma is placed at the end of the existing text, followed by the item name returned from the list.~' );
    --
    l_property_id := 68;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WHEN_DOM_OBJECT',
        p_prompt             => 'DOM Object',
        p_property_type      => 'TEXT',
        p_db_column          => 'TRIGGERING_ELEMENT',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'WHEN',
        p_help_text          => q'~<p>Enter either a DOM object (<code>document</code>, <code>window</code>) or the <em>id</em> of a DOM object (<code>myElementID</code>) as the element to trigger the dynamic action.</p>
<p>Note: <em>DOM Object</em> is deprecated and should be replaced by <em>JavaScript Expression</em> or <em>jQuery Selector</em>.</p>~' );
    --
    l_property_id := 69;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WHEN_JQUERY_SELECTOR',
        p_prompt             => 'jQuery Selector',
        p_property_type      => 'TEXT',
        p_db_column          => 'TRIGGERING_ELEMENT',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
<dt>To select a page element with an DOM id of <code>my_id</code></dt>
<dd><pre>#my_id</pre></dd>
<dt>To select all the page elements with a class of <code>my_class</code></dt>
<dd><pre>.my_class</pre></dd>
<dt>To select all the page elements that are inputs</dt>
<dd><pre>input</pre></dd>
</dl>~',
        p_display_group_name => 'WHEN',
        p_help_text          => q'~<p>Enter jQuery Selector syntax to return one or more page element to trigger the dynamic action. The jQuery library offers a very powerful selector syntax which provides a way to easily access one or more elements from a page.</p>
<p>Please see the official documentation available from the <a rel="noopener noreferrer" target="_blank" href="http://docs.jquery.com">jQuery homepage</a> for further information about the selector syntax.</p>~' );
    --
    l_property_id := 70;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_CONDITION',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TRIGGERING_CONDITION_TYPE',
        p_display_group_name => 'CLIENT_SIDE_CONDITION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify a client-side condition to control whether True or False actions fire. If the condition
                                  evaluates to True, then True actions fire, if the condition evaluates to False, then False actions fire.
                                  If no condition is specified, only True actions fire.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item = Value',
        p_return_value  => 'EQUALS',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> is equal to the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item != Value',
        p_return_value  => 'NOT_EQUALS',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> is not equal to the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item > Value',
        p_return_value  => 'GREATER_THAN',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> is greater than the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item >= Value',
        p_return_value  => 'GREATER_THAN_OR_EQUAL',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> is greater than or equal to the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item < Value',
        p_return_value  => 'LESS_THAN',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> is less than the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item <= Value',
        p_return_value  => 'LESS_THAN_OR_EQUAL',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> is less than or equal to the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item is null',
        p_return_value  => 'NULL',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Checks if the selected <em>Item</em> is empty.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item is not null',
        p_return_value  => 'NOT_NULL',
        p_help_text     => q'~Checks if the selected <em>Item</em> is not empty.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item is in list',
        p_return_value  => 'IN_LIST',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> is in the <em>List</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item is not in list',
        p_return_value  => 'NOT_IN_LIST',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> is not in the <em>List</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JavaScript expression',
        p_return_value  => 'JAVASCRIPT_EXPRESSION',
        p_help_text     => q'~Evaluates the JavaScript Expression specified.~' );
    --
    l_property_id := 71;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'WHEN_IG_REGION',
        p_prompt                   => 'Interactive Grid',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'TRIGGERING_REGION_ID',
        p_display_group_name       => 'WHEN',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~<p>Select the name of the editable interactive grid region that triggers the dynamic action.~' );
    --
    l_property_id := 72;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'API_VALUE_TYPE_BASIC',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_TYPE',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how this parameter is populated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value entered into <em>Static Value</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return single value)',
        p_return_value  => 'SQL_QUERY',
        p_help_text     => q'~Set to the first value returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Expression',
        p_return_value  => 'EXPRESSION',
        p_help_text     => q'~Set to the value that results from executing the <em>Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body',
        p_return_value  => 'FUNCTION_BODY',
        p_help_text     => q'~Set to the value returned from the <em>Function Body</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Preference',
        p_return_value  => 'PREFERENCE',
        p_help_text     => q'~Set to the value of the <em>Preference</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'API Default',
        p_return_value  => 'API_DEFAULT',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Use the value defined as default in the API parameter declaration.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Null',
        p_return_value  => 'NULL',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to NULL as no value specified.~' );
    --
    l_property_id := 73;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'API_VALUE_TYPE_BLOB',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_TYPE',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how this parameter is populated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return single value)',
        p_return_value  => 'SQL_QUERY',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the first value returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Expression',
        p_return_value  => 'EXPRESSION',
        p_help_text     => q'~Set to the value that results from executing the <em>Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body',
        p_return_value  => 'FUNCTION_BODY',
        p_help_text     => q'~Set to the value returned from the <em>Function Body</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'API Default',
        p_return_value  => 'API_DEFAULT',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Use the value defined as default in the API parameter declaration.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Null',
        p_return_value  => 'NULL',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to NULL as no BLOB specified.~' );
    --
    l_property_id := 74;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'API_VALUE_TYPE_CUSTOM',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_TYPE',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how this parameter is populated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Expression',
        p_return_value  => 'EXPRESSION',
        p_help_text     => q'~Set to the value that results from executing the <em>PL/SQL Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body',
        p_return_value  => 'FUNCTION_BODY',
        p_help_text     => q'~Set to the value returned from the <em>PL/SQL Function Body</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'API Default',
        p_return_value  => 'API_DEFAULT',
        p_help_text     => q'~Use the value defined as default in the API parameter declaration.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Null',
        p_return_value  => 'NULL',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to an empty data type.~' );
    --
    l_property_id := 75;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARAM_DISPLAY_SEQUENCE',
        p_prompt             => 'Display Sequence',
        p_property_type      => 'INTEGER',
        p_db_column          => 'DISPLAY_SEQUENCE',
        p_display_length     => 6,
        p_min_value          => '0',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Enter the display sequence for this parameter in Page Designer.~' );
    --
    l_property_id := 76;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_STATIC_VALUE_BOOLEAN',
        p_prompt             => 'Static Value',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the BOOLEAN value that is used as the source for this parameter value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'True',
        p_return_value  => 'TRUE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'False',
        p_return_value  => 'FALSE' );
    --
    l_property_id := 77;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EVENT_SCOPE',
        p_prompt             => 'Event Scope',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'BIND_TYPE',
        p_display_group_name => 'EXECUTION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the scope of the event, which determines when the event is evaluated a second or successive time.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static',
        p_return_value  => 'bind',
        p_help_text     => q'~Binds the event handler to the triggering element(s) for the lifetime of the current page, but is no longer bound if a triggering element is updated via Partial Page Refresh (PPR).~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dynamic',
        p_return_value  => 'live',
        p_help_text     => q'~Binds the event handler to the triggering element(s) for the lifetime of the current page, irrespective of any triggering elements being recreated via Partial Page Refresh (PPR).~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Once',
        p_return_value  => 'one',
        p_help_text     => q'~Binds the event handler to the triggering element(s) only once. The dynamic action is not triggered again until after the page has been fully refreshed.~' );
    --
    l_property_id := 78;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'STATIC_CONTAINER_JQUERY',
        p_prompt             => 'Static Container (jQuery Selector)',
        p_property_type      => 'TEXT',
        p_db_column          => 'BIND_DELEGATE_TO_SELECTOR',
        p_display_length     => 50,
        p_max_length         => 255,
        p_display_group_name => 'EXECUTION',
        p_help_text          => q'~<p>Enter the jQuery Selector, of a static container, for use by this dynamic action.</p>
<p>You can improve the performance of dynamic actions that have an event scope of <strong>Dynamic</strong>.
This must be an element on the page that itself does not get recreated, but contains the triggering elements that are recreated using Partial Page Refresh (PPR).
This element reference needs to be defined as a jQuery selector.</p>~' );
    --
    l_property_id := 79;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DA_EXECUTION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'EXECUTION_TYPE',
        p_display_group_name => 'EXECUTION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Choose the type of execution method for the Dynamic Action. This defines if the actions are fired immediately, debounced, or throttled.</p>
        <p>If a Client-side Condition is defined, it will be evaluated when the Dynamic Action and its Actions are executed, not when the event fires.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Immediate',
        p_return_value  => 'IMMEDIATE',
        p_help_text     => q'~Actions are executed immediately.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Debounce',
        p_return_value  => 'DEBOUNCE',
        p_help_text     => q'~<p>Actions are only executed once after a specified time at the end of a single or series of events.</p>
        <p>Example 1:</p>
        <p>Update a text field if the user has stopped typing for 2 seconds and use the values last entered.</p>
        <p>Example 2:</p>
        <p>Refresh a region once after a click and ignore all other clicks in the next 5 seconds.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Throttle',
        p_return_value  => 'THROTTLE',
        p_help_text     => q'~<p>Actions are executed at timed intervals when the action is fired multiple times.</p>
        <p>Example 1:</p>
        <p>During scrolling, update the current screen position at least every 2 seconds. The action will continue to fire if the user keeps scrolling.</p>
        <p>Example 2:</p>
        <p>As a user types, update a text field with the values entered at least every 2 seconds. The action will continue to fire as the user keeps typing.</p>~' );
    --
    l_property_id := 80;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DA_EXECUTION_TIME',
        p_prompt             => 'Time',
        p_property_type      => 'INTEGER',
        p_db_column          => 'EXECUTION_TIME',
        p_display_group_name => 'EXECUTION',
        p_min_value          => 1,
        p_unit               => c_unit_milliseconds,
        p_help_text          => q'~Specify the amount of time to delay the execution of actions based on the execution type. Measured in milliseconds where 1 second = 1000 milliseconds.~' );
    --
    l_property_id := 81;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DA_EXECUTION_IMMEDIATE',
        p_prompt             => 'Immediate',
        p_property_type      => 'YES NO',
        p_db_column          => 'EXECUTION_IMMEDIATE',
        p_display_group_name => 'EXECUTION',
        p_help_text          => q'~Toggle when the selected execution type is invoked. Set to Yes for actions to be executed immediately before the timer starts. Set to No for actions to be executed after the value set in Time.~' );
    --
    l_property_id := 82;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DA_ACTION_TYPE',
        p_prompt             => 'Action',
        p_property_type      => 'SUPPORTED UI',
        p_db_column          => 'ACTION',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'PLUGINS',
        p_help_text          => q'~<p>Specify which action you want to perform. The following actions are supported:</p>
#NATIVE_PLUGINS#
<p>Depending on your application configuration, you may also have additional dynamic action plug-ins available here.
These are displayed as <em>&lt;My Plug-in&gt; [Plug-in]</em>.
The following plug-ins are installed within this application's shared components:</p>
#CUSTOM_PLUGINS#~' );
    --
    l_property_id := 83;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FIRE_WHEN_EVENT_RESULT_IS',
        p_prompt             => 'Fire When Event Result Is',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'EVENT_RESULT',
        p_display_group_name => 'EXECUTION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Specify whether this action fires when the triggering element condition is met by selecting <strong>True</strong> (True Action), or when it is not met by selecting <strong>False</strong> (False Action).</p>
<p>Note: if there is no condition specified, only <strong>True</strong> actions fire.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'True',
        p_return_value  => 'TRUE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'False',
        p_return_value  => 'FALSE' );
    --
    l_property_id := 84;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FIRE_ON_PAGE_LOAD',
        p_prompt             => 'Fire on Initialization',
        p_property_type      => 'YES NO',
        p_db_column          => 'EXECUTE_ON_PAGE_INIT',
        p_display_group_name => 'EXECUTION',
        p_help_text          => q'~<p>Specify if the action fires on initialization.</p>
                                    <p>Initialization has a slightly different meaning depending on how the Dynamic Action is defined. For Dynamic
                                    Actions defined to fire on Interactive Grid columns, this specifies if the action fires when the Interactive
                                    Grid row is activated for editing. For all other Dynamic Actions, this specifies if the action fires when the
                                    page loads.</p>~' );
    --
    l_property_id := 85;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AFFECTED_TYPE',
        p_prompt             => 'Selection Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'AFFECTED_ELEMENTS_TYPE',
        p_display_group_name => 'AFFECTED_ELEMENTS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how to define the page components to be affected when this action is executed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item(s)',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The action affects the one or more page items you enter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Button',
        p_return_value  => 'BUTTON',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The action affects the button you select.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region',
        p_return_value  => 'REGION',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The action affects the region you select.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Column(s)',
        p_return_value  => 'COLUMN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The action affects the one or more columns you enter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DOM Object',
        p_return_value  => 'DOM_OBJECT',
        p_is_deprecated => 'Y',
        p_help_text     => q'~The action affects the page element identified by the DOM Object or DOM ID you enter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'jQuery Selector',
        p_return_value  => 'JQUERY_SELECTOR',
        p_help_text     => q'~The action affects the page element(s) returned using the jQuery selector syntax you enter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JavaScript Expression',
        p_return_value  => 'JAVASCRIPT_EXPRESSION',
        p_help_text     => q'~The action affects the page element(s) returned using the JavaScript Expression you enter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Triggering Element',
        p_return_value  => 'TRIGGERING_ELEMENT',
        p_help_text     => q'~The action affects the page element or component that triggered the dynamic action.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Event Source',
        p_return_value  => 'EVENT_SOURCE',
        p_help_text     => q'~<p>The action affects the page element where the event originated, which could be different to the "Triggering Element" in some cases.</p>
<p>In this advanced configuration, the triggering element specified is generally a container element (such as a region) which handles events raised by all of it's sub-elements (such as page items in that region).
This selection type can then be used to act upon the sub-element that triggered the event, rather than the container element.
For example, if you have a dynamic action that defines a <strong>'Change'</strong> event on a region on your page, the action affects the actual item in the region that has changed.</p>
<p>Utilizing <em>'Event Source'</em> can be a more efficient way of defining common behaviors that affect many page elements.
The ability of container elements to catch events raised by sub-elements is determined by the event type.
The following event types support this:</p>
<ul>
  <li><strong>After Refresh</strong> (apexafterrefresh)</li>
  <li><strong>Before Refresh</strong> (apexbeforerefresh)</li>
  <li><strong>Change</strong> (change)</li>
  <li><strong>Click</strong> (click)</li>
  <li><strong>Double Click</strong> (dblclick)</li>
  <li><strong>Get Focus</strong> (focus)</li>
  <li><strong>Key Down</strong> (keydown)</li>
  <li><strong>Key Press</strong> (keypress)</li>
  <li><strong>Key Release</strong> (keyup)</li>
  <li><strong>Lose Focus</strong> (blur)</li>
  <li><strong>Mouse Button Press</strong> (mousedown)</li>
  <li><strong>Mouse Button Release</strong> (mouseup)</li>
  <li><strong>Mouse Move</strong> (mousemove)</li>
</ul>~' );
    --
    l_property_id := 86;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'AFFECTED_REGION',
        p_prompt                   => 'Region',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'AFFECTED_REGION_ID',
        p_display_group_name       => 'AFFECTED_ELEMENTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~Select the region to be affected by this action.~' );
    --
    l_property_id := 87;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'AFFECTED_BUTTON',
        p_prompt                   => 'Button',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'AFFECTED_BUTTON_ID',
        p_display_group_name       => 'AFFECTED_ELEMENTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_button,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~Select the button to be affected by this action.~' );
    --
    l_property_id := 88;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'AFFECTED_ITEMS',
        p_prompt                   => 'Item(s)',
        p_property_type            => 'ITEM',
        p_multi_value_delimiter    => ',',
        p_db_column                => 'AFFECTED_ELEMENTS',
        p_display_length           => 100,
        p_max_length               => 4000,
        p_display_group_name       => 'AFFECTED_ELEMENTS',
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~Enter one or more page items to be affected by this action.
For multiple items, separate each item name with a comma.
<p>You can type in the name or pick from the list of available items.
If you pick from the list and there is already text entered, then a comma is placed at the end of the existing text, followed by the item name returned from the list.~' );
    --
    l_property_id := 89;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AFFECTED_DOM_OBJECT',
        p_prompt             => 'DOM Object',
        p_property_type      => 'TEXT',
        p_db_column          => 'AFFECTED_ELEMENTS',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'AFFECTED_ELEMENTS',
        p_help_text          => q'~<p>Enter either a DOM object (<code>document</code>, <code>window</code>) or the <em>id</em> of a DOM object (<code>myElementID</code>) as the element to be affected by this action.</p>
<p>Note: <em>DOM Object</em> is deprecated and should be replaced by <em>JavaScript Expression</em> or <em>jQuery Selector</em>.</p>~' );
    --
    l_property_id := 90;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AFFECTED_JQUERY_SELECTOR',
        p_prompt             => 'jQuery Selector',
        p_property_type      => 'TEXT',
        p_db_column          => 'AFFECTED_ELEMENTS',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
<dt>To select a page element with an DOM id of <code>my_id</code></dt>
<dd><pre>#my_id</pre></dd>
<dt>To select all the page elements with a class of <code>my_class</code></dt>
<dd><pre>.my_class</pre></dd>
<dt>To select all the page elements that are inputs</dt>
<dd><pre>input</pre></dd>
</dl>~',
        p_display_group_name => 'AFFECTED_ELEMENTS',
        p_help_text          => q'~<p>Enter jQuery Selector syntax to return one or more page elements to be affected by this action. The jQuery library offers a very powerful selector syntax which provides a way to easily access one or more elements from a page.</p>
<p>Please see the official documentation available from the <a rel="noopener noreferrer" target="_blank" href="http://docs.jquery.com">jQuery homepage</a> for further information about the selector syntax.</p>~' );
    --
    l_property_id := 91;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXEC_STOP_EXECUTION_ON_ERROR',
        p_prompt             => 'Stop Execution On Error',
        p_property_type      => 'YES NO',
        p_db_column          => 'STOP_EXECUTION_ON_ERROR',
        p_display_group_name => 'EXECUTION',
        p_help_text          => q'~<p>Specify whether processing of all other pending actions is stopped when an error occurs while executing the current action.</p>
<p>Note: The order of execution of specific actions is determined by the sequence specified for each action. To ensure that actions are run in the same order, Oracle recommends that the sequence numbers be unique for all True Actions and all False Actions.</p>~' );
    --
    l_property_id := 92;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WAIT_FOR_RESULT',
        p_prompt             => 'Wait For Result',
        p_property_type      => 'YES NO',
        p_db_column          => 'WAIT_FOR_RESULT',
        p_display_group_name => 'EXECUTION',
        p_help_text          => q'~<p>Specify whether all pending actions wait for the result of the current action.
Set this attribute to <strong>On</strong> if pending actions are dependent on the result of this action,
or to <strong>Off</strong> if there is no dependency and they can execute asynchronously, without waiting.</p>
<p>Note: The order of execution of specific actions is determined by the sequence specified for each action.
To ensure that actions are run in the same order, Oracle recommends that the sequence numbers be unique for all True Actions and all False Actions.</p>~' );
    --
    l_property_id := 93;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEM_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SUPPORTED UI',
        p_db_column          => 'DISPLAY_AS',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'PLUGINS',
        p_help_text          => q'~<p>Specify how this item is rendered. For more information on specific item types, see <a rel="noopener noreferrer" target="_blank" href="#SYSTEM_HELP_URL#CSH:pd-type-item">About Item Types</a>.</p>
<p>The following item types are supported:</p>
#NATIVE_PLUGINS#
<p>Depending on your application configuration, you may also have additional item type plug-ins available here.
These display as <em>&lt;My Plug-in&gt; [Plug-in]</em>.
The following plug-ins install into this application's shared components:</p>
#CUSTOM_PLUGINS#~' );
    --
    l_property_id := 94;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SUPPORTED UI',
        p_db_column          => 'PLUG_SOURCE_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'PLUGINS',
        p_help_text          => q'~<p>Specify how this region is rendered. The following region types are supported:</p>
#NATIVE_PLUGINS#
<p>Depending on your application configuration, you may also have additional region type plug-ins available here.
The following plug-ins are installed within this application's shared components:</p>
#CUSTOM_PLUGINS#~' );
    --
    l_property_id := 95;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PROCESS_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SUPPORTED UI',
        p_db_column          => 'PROCESS_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'PLUGINS',
        p_help_text          => q'~<p>Specify the process type to execute. The following process types are supported:</p>
#NATIVE_PLUGINS#
<p>Depending on your application configuration, you may also have additional process type plug-ins available here.
These display as <em>&lt;My Plug-in&gt; [Plug-in]</em>.
The following plug-ins are installed within this application's shared components:</p>
#CUSTOM_PLUGINS#~' );
    --
    l_property_id := 96;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'ITEM_NAME',
        p_prompt                => 'Name',
        p_property_type         => 'TEXT',
        p_db_column             => 'NAME',
        p_display_length        => 50,
        p_max_length            => 255,
        p_text_case             => 'UPPER',
        p_restricted_characters => 'SAFE_COMPONENT_NAME',
        p_display_group_name    => 'IDENTIFICATION',
        p_help_text             => q'~Enter the name of this item. Item names must be valid Oracle identifiers. It is recommended that item names be no longer then 30 bytes so they can be used as bind variables in SQL Queries.~' );
    --
    l_property_id := 97;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DISPLAY_SEQUENCE',
        p_prompt             => 'Sequence',
        p_property_type      => 'NUMBER',
        p_db_column          => 'SEQUENCE',
        p_display_length     => 6,
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~<p>Enter the display sequence for this item. The sequence and other layout settings determine where this item displays in relation to other items within the region.</p>
<p>Note: If two items, within the same region, have the same sequence value then they display in a different order when the application is exported and imported into another environment, such as a test or production environment. To ensure consistency, Oracle recommends you specify unique sequence numbers for every item, or at least for those within the same region.</p>~' );
    --
    l_property_id := 98;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'REGION',
        p_prompt                   => 'Region',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'REGION_ID',
        p_display_group_name       => 'LAYOUT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~Select the region in which this component is associated. If the component is displayed then it is displayed within the specified region and relative to other components within this region.~' );
    --
    l_property_id := 99;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LABEL',
        p_prompt             => 'Label',
        p_property_type      => 'TEXT',
        p_db_column          => 'PROMPT',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'LABEL',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter the field label for the page item.
The label displays on the page only if the item displays.
Depending on the label alignment and the display, the label displays either in its own HTML table cell or in the same cell.</p>
<p>Item labels can include shortcuts using <code>"SHORTCUT_NAME"</code> syntax.</p>~' );
    --
    l_property_id := 100;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LABEL_ALIGNMENT',
        p_prompt             => 'Alignment',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LABEL_ALIGNMENT',
        p_display_group_name => 'LABEL',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the label alignment. Labels can display above, below, or to the left of the item.
When the label displays next to a form element, it occupies its own HTML table cell.
By changing this label alignment, you can control the label's position within that table cell.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Above ',
        p_return_value  => 'ABOVE',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Below',
        p_return_value  => 'BELOW' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center',
        p_return_value  => 'CENTER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center bottom',
        p_return_value  => 'CENTER-BOTTOM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center center',
        p_return_value  => 'CENTER-CENTER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center top',
        p_return_value  => 'CENTER-TOP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left',
        p_return_value  => 'LEFT',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left bottom',
        p_return_value  => 'LEFT-BOTTOM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left center',
        p_return_value  => 'LEFT-CENTER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left top',
        p_return_value  => 'LEFT-TOP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right',
        p_return_value  => 'RIGHT',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right bottom',
        p_return_value  => 'RIGHT-BOTTOM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right center',
        p_return_value  => 'RIGHT-CENTER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right top',
        p_return_value  => 'RIGHT-TOP' );
    --
    l_property_id := 101;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'FIELD_TEMPLATE',
        p_prompt                   => 'Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'ITEM_FIELD_TEMPLATE',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_field_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Select a label template to define the appearance and layout of this item label.</p>
        <p>Label templates are defined in the application theme.
        When an item is created, the template is automatically set to the default item template defined in the current theme.</p>
        <p>Many themes contain label templates for displaying required, optional, and hidden labels.<br>
        Universal Theme provides the following label templates:
          <dl>
            <dt>Hidden</dt>
              <dd>Use this when the label should not be displayed on screen. Note that Assistive Technology will still be able to read the label.
              Hidden is ignored for Checkbox items because a label must be shown after the checkbox.</dd>
            <dt>Optional</dt>
              <dd>Use this for form items that are optional. The label will be displayed to the side of the item.</dd>
            <dt>Optional - Above</dt>
              <dd>Use this for form items that are optional. The label will be displayed above the item.</dd>
            <dt>Optional - Floating</dt>
              <dd>Use this for form items that are optional. The label will be displayed inside of the input item, and will automatically shrink once the input field has a value.</dd>
            <dt>Required</dt>
              <dd>This label template displays a red asterisk next to the label, and is used for form items where user input is required.  The label will be displayed to the side of the item.</dd>
            <dt>Required - Above</dt>
              <dd>This label template displays a red asterisk next to the label, and is used for form items where user input is required.  The label will be displayed above the item. Item templates enable you to define the user interface attributes as part of a theme and share that definition among many page items.</dd>
            <dt>Required - Floating</dt>
              <dd>This label template displays a red asterisk next to the label, and is used for form items where user input is required.  The label will be displayed inside of the input item, and will automatically shrink once the input field has a value. Item templates enable you to define the user interface attributes as part of a theme and share that definition among many page items.</dd>
          </dl>
          See Also: <a rel="noopener noreferrer" target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a>
        </p>~' );
    --
    l_property_id := 102;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'FIELD_TABLE_CELL_ATTRIBUTES',
        p_prompt                => 'Table Cell Attributes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'CATTRIBUTES',
        p_display_length        => 60,
        p_max_length            => 255,
        p_display_group_name    => 'LABEL',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~Enter any additional attributes used in the HTML table cell that contains this label.~' );
    --
    l_property_id := 103;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_REQUIRED',
        p_prompt             => 'Value Required',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_REQUIRED',
        p_display_group_name => 'VALIDATION',
        p_help_text          => q'~<p>If set to <strong>On</strong> and the page item is visible, &PRODUCT_NAME. automatically performs a NOT NULL validation when the page is submitted.</p>
<p>By defining a message called <strong>APEX.PAGE_ITEM_IS_REQUIRED</strong> in Shared Components, Text Messages, the predefined error text can be replaced by an application specific error message.</p>
<p>The display location of the message is defined by the application level setting <strong>Default error display location</strong>.</p>~' );
    --
    l_property_id := 104;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GRID_NEW_GRID',
        p_prompt             => 'Start New Layout',
        p_property_type      => 'YES NO',
        p_db_column          => 'GRID_NEW_GRID',
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~Specify whether this component displays in a new layout, or in the same layout as the previous component.~' );
    --
    l_property_id := 105;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GRID_NEW_ROW',
        p_prompt             => 'Start New Row',
        p_property_type      => 'YES NO',
        p_db_column          => 'GRID_NEW_ROW',
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~Specify whether this component displays on the next row after the previous component, or on the same row.~' );
    --
    l_property_id := 106;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GRID_COLUMN',
        p_prompt             => 'Column',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GRID_COLUMN',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'GRID_COLUMNS',
        p_help_text          => q'~Select a specific layout column. Use <strong>Automatic</strong> to automatically determine the next available layout column where the component displays.~' );
    --
    l_property_id := 107;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GRID_NEW_COLUMN',
        p_prompt             => 'New Column',
        p_property_type      => 'YES NO',
        p_db_column          => 'GRID_NEW_COLUMN',
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~Specify whether this component displays in the next column or in the same column as the previous component.~' );
    --
    l_property_id := 108;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GRID_COLUMN_SPAN',
        p_prompt             => 'Column Span',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GRID_COLUMN_SPAN',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'GRID_COLUMNS',
        p_help_text          => q'~Select how many layout columns this component occupies. Use <strong>Automatic</strong> to balance the available layout columns across all components in the same row.~' );
    --
    l_property_id := 109;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GRID_ROW_SPAN',
        p_prompt             => 'Row Span',
        p_property_type      => 'NUMBER',
        p_db_column          => 'GRID_ROW_SPAN',
        p_display_length     => 2,
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~Enter how many rows within the HTML table this component occupies. Components are laid out in HTML tables. This attribute determines the value to be used for the <em>ROWSPAN</em> attribute in the table cell for this component.~' );
    --
    l_property_id := 110;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'GRID_COLUMN_ATTRIBUTES',
        p_prompt                => 'Column Attributes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'GRID_COLUMN_ATTRIBUTES',
        p_display_length        => 40,
        p_max_length            => 255,
        p_display_group_name    => 'LAYOUT',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~Enter additional attributes set for the layout column. This value replaces the <code>#ATTRIBUTES#</code> substitution placeholder in the layout column template.~' );
    --
    l_property_id := 111;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FORMAT_MASK',
        p_prompt             => 'Format Mask',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'FORMAT_MASK',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'ALL_FORMAT_MASKS',
        p_help_text          => q'~<p>Enter a format mask to apply to this component.
   You can type in the format mask or pick from the list of predefined format masks, based on a sample representation of how that format mask is displayed.</p>
   <p>It is important that number format masks are only applied to components that contain numbers and date format masks are only applied to components that contain dates.
    Otherwise, a runtime error is raised when the component contains a value that can not be converted using the specified format mask.</p>~' );
    --
    l_property_id := 112;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FORMAT_MASK_DATE',
        p_prompt             => 'Format Mask',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'FORMAT_MASK',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'DATE_FORMAT_MASKS',
        p_help_text          => q'~Enter a date format mask to apply to this component.
You can type in the format mask or pick from the list of predefined format masks, based on a sample representation of how that format mask displays.
You can also use substitution syntax to reference a dynamic format mask from an application or page item.~' );
    --
    l_property_id := 113;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FORMAT_MASK_NUMBER',
        p_prompt             => 'Format Mask',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'FORMAT_MASK',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'NUMBER_FORMAT_MASKS',
        p_help_text          => q'~Enter a number format mask to apply to this component.
You can type in the format mask or pick from the list of predefined format masks, based on a sample representation of how that format mask displays.
You can also use substitution syntax to reference a format mask from an application or page item.~' );
    --
    l_property_id := 114;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'NAMED_LOV',
        p_prompt                => 'List of Values',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'NAMED_LOV_ID',
        p_display_group_name    => 'LIST_OF_VALUES',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_lov,
        p_help_text             => q'~Select the name of an existing list of values.~' );
    --
    l_property_id := 115;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'DISPLAY_EXTRA_VALUES',
        p_prompt                     => 'Display Extra Values',
        p_property_type              => 'YES NO',
        p_db_column                  => 'LOV_DISPLAY_EXTRA',
        p_display_group_name         => 'LIST_OF_VALUES',
        p_help_text                  => q'~An item may have a session state value which does not occur in the given list of values definition.
Select whether this list of values displays this extra session state value.
If you choose to not display this extra session state value and there is no matching value in the list of values definition, the first value in the list of values is the selected and displayed value.~' );
    --
    l_property_id := 116;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'DISPLAY_NULL_VALUE',
        p_prompt                     => 'Display Null Value',
        p_property_type              => 'YES NO',
        p_db_column                  => 'LOV_DISPLAY_NULL',
        p_display_group_name         => 'LIST_OF_VALUES',
        p_help_text                  => q'~Specify whether the list of values used for this item displays a NULL value at the top of the list.~' );
    --
    l_property_id := 117;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NULL_DISPLAY_VALUE',
        p_prompt             => 'Null Display Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'LOV_NULL_TEXT',
        p_display_length     => 20,
        p_max_length         => 255,
        p_display_group_name => 'LIST_OF_VALUES',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the text to be displayed within the list NULL option at the top of this list. This value also displays when rendering the item if the value is null. If you do not enter any text, it is displayed as a blank line in the list and a blank item when rendered.~' );
    --
    l_property_id := 118;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NULL_RETURN_VALUE',
        p_prompt             => 'Null Return Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'LOV_NULL_VALUE',
        p_display_length     => 20,
        p_max_length         => 255,
        p_display_group_name => 'LIST_OF_VALUES',
        p_help_text          => q'~Enter the value to be returned if the NULL value is selected in this list of values. If you do not provide a value, the item value is left as null when the NULL option is selected from this list.~' );
    --
    l_property_id := 119;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'CASCADING_LOV_PARENT_ITEMS',
        p_prompt                   => 'Parent Item(s)',
        p_property_type            => 'ITEM',
        p_multi_value_delimiter    => ',',
        p_db_column                => 'LOV_CASCADE_PARENT_ITEMS',
        p_display_length           => 50,
        p_max_length               => 255,
        p_display_group_name       => 'CASCADING_LOV',
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~<p>Enter page or application items that trigger the refresh of this list of values.
For multiple items, separate each item name with a comma.
You can type in the name or pick from the list of available items.
If you pick from the list, and there is already text entered, then a comma is placed at the end of the existing text, followed by the item name returned from the list.</p>
<p>This list of values is refreshed whenever the value of any of the specified items are changed on this page.</p>
<p>You should use the page item(s) specified in this attribute within the <em>where clause</em> of this list of values SQL Query to restrict the values returned.</p>
<p>For example, if you have page items for Car Make and Model, you could specify Car Make as the Cascading LOV Parent Item within the List of Values definition for Model, and use Car Make within the where clause for that list of values.
Then whenever Car Make is changed, the LOV for Model is refreshed, and the list only displays values for the currently selected Car Make.</p>~' );
    --
    l_property_id := 120;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'LOV_PAGE_ITEMS_TO_SUBMIT',
        p_prompt                   => 'Items to Submit',
        p_property_type            => 'ITEM',
        p_multi_value_delimiter    => ',',
        p_db_column                => 'AJAX_ITEMS_TO_SUBMIT',
        p_display_length           => 50,
        p_max_length               => 4000,
        p_display_group_name       => 'CASCADING_LOV',
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~<p>Enter column, page or application items to set into session state when the value of any of the specified Cascading LOV Parent Item(s) change on this page.
For multiple items, separate each item name with a comma.
You can type in the name or pick from the list of available items.
If you pick from the list and there is already text entered, then a comma is placed at the end of the existing text, followed by the item name returned from the list.</p>
<p>You should use the page item(s) specified in this attribute within the <em>where clause</em> of this list of values SQL Query to restrict the values returned.</p>
<p>Note: The page items defined in <em>Cascading LOV Parent Item(s)</em> are automatically transmitted and do not need to be entered into this attribute.</p>~' );
    --
    l_property_id := 121;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CASCADING_LOV_PARENT_REQUIRED',
        p_prompt             => 'Parent Required',
        p_property_type      => 'YES NO',
        p_db_column          => 'AJAX_OPTIMIZE_REFRESH',
        p_display_group_name => 'CASCADING_LOV',
        p_help_text          => q'~<p>Specify under what conditions this list of values is refreshed.</p>
<p>If set to <strong>On</strong> the refresh call to get new values performs only when all <em>Cascading LOV Parent Item(s)</em> are not null.
If one item is null, it is assumed that the LOV Query does not return any rows.
In such cases, the select list entries are simply cleared in the browser, without doing a refresh.</p>
<p>If set to <strong>Off</strong>, the refresh is always performed.
This option is only used if you specifically handle nullable <em>Cascading LOV Parent Item(s)</em> in the <em>where clause</em> of this list of values SQL Query.
If nullable page items are not properly handled, unnecessary refresh calls are executed that never return any rows.</p>~' );
    --
    l_property_id := 122;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'LOV_SQL',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'LOV',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 2,
        p_sql_max_column_count => 2,
        p_display_group_name   => 'LIST_OF_VALUES',
        p_examples             => q'~<dl>
<dt>Display department name, set department number</dt>
<dd><pre>
select dname  as d,
       deptno as r
  from dept
 order by 1
</pre></dd>
</dl>~',
        p_help_text            => q'~<p>Enter the SQL query definition to populate this list of values. Generally list of value queries are of the form:</p>
<pre>
select [displayValue],
       [returnValue]
  from ...
 where ...
 order by ...
</pre>
<p>Each column selected must have a unique name or alias. Oracle recommends using an alias on any column that includes an SQL expression.</p>~' );
    --
    l_property_id := 123;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ELEMENT_FIELD_ALIGNMENT',
        p_prompt             => 'Alignment',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FIELD_ALIGNMENT',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the alignment of the item within the HTML table cell that surrounds it.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center',
        p_return_value  => 'CENTER',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center bottom',
        p_return_value  => 'CENTER-BOTTOM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center center',
        p_return_value  => 'CENTER-CENTER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center top',
        p_return_value  => 'CENTER-TOP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left',
        p_return_value  => 'LEFT',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left bottom',
        p_return_value  => 'LEFT-BOTTOM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left center',
        p_return_value  => 'LEFT-CENTER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left top',
        p_return_value  => 'LEFT-TOP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right',
        p_return_value  => 'RIGHT',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right bottom',
        p_return_value  => 'RIGHT-BOTTOM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right center',
        p_return_value  => 'RIGHT-CENTER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right top',
        p_return_value  => 'RIGHT-TOP' );
    --
    l_property_id := 124;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ELEMENT_WIDTH',
        p_prompt             => 'Width',
        p_property_type      => 'NUMBER',
        p_db_column          => 'CSIZE',
        p_display_length     => 3,
        p_unit               => c_unit_chars,
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Enter the width of the form element to be used to display this item.~' );
    --
    l_property_id := 125;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ELEMENT_MAX_CHARACTERS',
        p_prompt             => 'Maximum Length',
        p_property_type      => 'NUMBER',
        p_db_column          => 'CMAXLENGTH',
        p_display_length     => 4,
        p_unit               => c_unit_chars,
        p_display_group_name => 'VALIDATION',
        p_help_text          => q'~Enter the maximum number of characters users can type into this item.~' );
    --
    l_property_id := 126;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ELEMENT_HEIGHT',
        p_prompt             => 'Height',
        p_property_type      => 'NUMBER',
        p_db_column          => 'CHEIGHT',
        p_display_length     => 3,
        p_unit               => c_unit_lines,
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Enter the height (approximate number of rows) for textareas, shuttles, multi select lists, and any plug-in Item types that support the Has Height Attribute attribute.~' );
    --
    l_property_id := 127;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ELEMENT_VALUE_PLACEHOLDER',
        p_prompt             => 'Value Placeholder',
        p_property_type      => 'TEXT',
        p_db_column          => 'PLACEHOLDER',
        p_display_length     => 50,
        p_max_length         => 255,
        p_display_group_name => 'APPEARANCE',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter hint text displayed in this item when no value for that item is entered. Once any text is entered into the item, the hint is removed.</p>
<p>This placeholder attribute specifies a short hint that can be used to describe the expected value of a page item.
Such hints are useful for providing a sample value, or an example of the expected format, or instructions such as: Search on title, description, and tag.
For accessibility reasons, this attribute should not be used as an alternative to a well defined, meaningful label.</p>
<p><strong>Attention:</strong> This is a HTML5 feature and only works in modern browsers! Older browsers do not display the text entered into this attribute.</p>~' );
    --
    l_property_id := 128;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'ADVANCED_CSS_CLASSES',
        p_prompt                => 'CSS Classes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'CSS_CLASSES',
        p_display_length        => 50,
        p_max_length            => 255,
        p_examples              => q'~<dl>
<dt>Add the CSS classes <code>articlenumber</code> and <code>highlight</code> to the HTML tag of the component</dt>
<dd><pre>articlenumber highlight</pre></dd>
</dl>~',
        p_display_group_name    => 'ADVANCED',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~Enter additional space delimited CSS classes to be included in the component.~' );
    --
    l_property_id := 129;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'CUSTOM_ATTRIBUTES',
        p_prompt                => 'Custom Attributes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'HTML_ATTRIBUTES',
        p_display_length        => 50,
        p_max_length            => 2000,
        p_display_group_name    => 'ADVANCED',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~Enter additional space delimited attributes to be included in the item tag.
For the HTML CLASS attribute, Oracle recommends using the dedicated CSS Classes attribute.~' );
    --
    l_property_id := 130;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'ELEMENT_OPTION_HTML_ATTRIBUTES',
        p_prompt                => 'Option HTML Attributes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'TAG_ATTRIBUTES2',
        p_display_length        => 50,
        p_max_length            => 255,
        p_display_group_name    => 'ADVANCED',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~Enter additional space-delimited attributes for the HTML table cell used to display each individual option in a radio group or set of check boxes.~' );
    --
    l_property_id := 131;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ELEMENT_PRE_TEXT',
        p_prompt             => 'Pre Text',
        p_property_type      => 'HTML',
        p_db_column          => 'PRE_ELEMENT_TEXT',
        p_display_length     => 50,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter additional attributes displayed before the HTML table cell that displays each individual option in a radio group or set of check boxes.
You can include HTML, JavaScript, and shortcuts.</p>
<p>You can reference the following substitution strings:</p>
<dl>
  <dt><code>#CURRENT_FORM_ELEMENT#</code></dt>
  <dd>Obtains the name of the HTML form element that this page item is associated with.</dd>
  <dt><code>#CURRENT_ITEM_NAME#</code></dt>
  <dd>Obtains the name of the current page item.</dd>
</dl>~' );
    --
    l_property_id := 132;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ELEMENT_POST_TEXT',
        p_prompt             => 'Post Text ',
        p_property_type      => 'HTML',
        p_db_column          => 'POST_ELEMENT_TEXT',
        p_display_length     => 50,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter additional attributes displayed after the HTML table cell that displays each individual option in a radio group or set of check boxes.
You can include HTML, JavaScript, and shortcuts.</p>
<p>You can reference the following substitution strings:</p>
<dl>
  <dt><code>#CURRENT_FORM_ELEMENT#</code></dt>
  <dd>Obtains the name of the HTML form element that this page item is associated with.</dd>
  <dt><code>#CURRENT_ITEM_NAME#</code></dt>
  <dd>Obtains the name of the current page item.</dd>
</dl>~' );
    --
    l_property_id := 133;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_USED',
        p_prompt             => 'Used',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'USE_CACHE_BEFORE_DEFAULT',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select which value takes precedence, the value from session state or the item source value.</p>
<p>For items with the source type <strong>Database Column</strong>, select <strong>Always, replacing any existing value in session state</strong> unless you do not want the associated row fetch operation to populate the item if the page branches back to itself.
For other source types you must decide, based on how the page is used, whether the previously sourced value is displayed, or if the source type is applied anew for each page view.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Always, replacing any existing value in session state',
        p_return_value  => 'NO' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Only when current value in session state is null',
        p_return_value  => 'YES' );
    --
    l_property_id := 134;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SOURCE_TYPE',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the source type the value of this item is based on.</p>
<p>Note: If <strong>Source: Used</strong> is set to <em>Only when current value in session state is null</em>, the source will not be utilized if a value has been set into session state for this item.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the text entered into <em>Static Value</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Database Column',
        p_return_value  => 'DB_COLUMN',
        p_is_quick_pick => 'Y',
        p_is_deprecated => 'N', -- $$$ this should actually be legacy!
        p_help_text     => q'~Set to the column value entered in <em>Database Column</em>, that is retrieved from a built-in fetch row process.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return single value)',
        p_return_value  => 'QUERY',
        p_help_text     => q'~Set to the first value returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return multiple values)',
        p_return_value  => 'QUERY_COLON',
        p_help_text     => q'~Set to multiple values returned from the <em>SQL Query</em>. The format of what is returned is determined by the current item's Multiple Values setting. If Multiple Values is set to <em>Delimited Values</em>, the value will be a single concatenated list separated by the defined Separator. If Multiple Values is set to <em>JSON Array</em>, the value will be a JSON Array of the values. If Multiple Values is set to <em>No</em> or the item does not support multiple values, then the value is a single concatenated list separated by a colon.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Expression',
        p_return_value  => 'EXPRESSION',
        p_help_text     => q'~Set to the value that results from executing the <em>Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body',
        p_return_value  => 'FUNCTION_BODY',
        p_help_text     => q'~Set to the value returned from the <em>Function Body</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Preference',
        p_return_value  => 'PREFERENCE',
        p_help_text     => q'~Set to the value of the <em>Preference</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Null',
        p_return_value  => 'ALWAYS_NULL',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to null as no value specified.~' );
    --
    l_property_id := 135;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_STATIC_VALUE',
        p_prompt             => 'Static Value',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'SOURCE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Enter the static value used as the source for this item value.~' );
    --
    l_property_id := 136;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'SOURCE_QUERY',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'SOURCE',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_display_group_name   => 'SOURCE',
        p_help_text            => q'~Enter the SQL Query used as the source for this item value. If more than one row is returned then the value of the first row is used.~' );
    --
    l_property_id := 137;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'SOURCE_QUERY_COLON',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'SOURCE',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_display_group_name   => 'SOURCE',
        p_help_text            => q'~Enter the SQL Query that returns one or more rows to be used as the source for this item value. If the result contains multiple rows, then the format of what is returned is determined by the current item's Multiple Values setting. If Multiple Values is set to <em>Delimited Values</em>, the value will be a single concatenated list separated by the defined Separator. If Multiple Values is set to <em>JSON Array</em>, the value will be a JSON Array of the values. If Multiple Values is set to <em>No</em> or the column does not support multiple values, then the value is a single concatenated list separated by a colon.~' );
    --
    l_property_id := 138;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'SOURCE_ITEM',
        p_prompt                   => 'Item',
        p_property_type            => 'ITEM',
        p_db_column                => 'SOURCE',
        p_display_length           => 80,
        p_max_length               => 255,
        p_display_group_name       => 'SOURCE',
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Enter the page or application item used as the source for this item value.
You can type in the name or pick from the list of available items.~' );
    --
    l_property_id := 139;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CLIENT_ID_OR_USERNAME',
        p_prompt             => 'Client ID or Username',
        p_property_type      => 'TEXT',
        p_db_column          => 'CLIENT_ID',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'AUTHENTICATION',
        p_help_text          => q'~Enter the Username for Basic Authentication and the Client ID for the OAuth2 Client Credentials flow. &PRODUCT_NAME. does not store this information encrypted.~' );
    --
    l_property_id := 140;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TASK_VALUE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_TYPE',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how this parameter is populated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the text entered into <em>Static Value</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return single value)',
        p_return_value  => 'SQL_QUERY',
        p_help_text     => q'~Set to the first value returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Expression',
        p_return_value  => 'EXPRESSION',
        p_help_text     => q'~Set to the value that results from executing the <em>Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body',
        p_return_value  => 'FUNCTION_BODY',
        p_help_text     => q'~Set to the value returned from the <em>Function Body</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Preference',
        p_return_value  => 'PREFERENCE',
        p_help_text     => q'~Set to the value of the <em>Preference</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Null',
        p_return_value  => 'NULL',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to null as no value specified.~' );
    --
    l_property_id := 141;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_DB_COLUMN',
        p_prompt             => 'Database Column',
        p_property_type      => 'TEXT',
        p_db_column          => 'SOURCE',
        p_display_length     => 80,
        p_max_length         => 128,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~<p>Enter the case sensitive database column name used as the source for this item value.</p>
<p>This column must exist in the table specified within the built-in fetch row process defined on this page.
An error is raised, and the page is not loaded, if the database column name does not exist in the referenced table.
Similarly, if there is no built-in fetch row process defined and there is an item with a source type of <strong>Database Column</strong>, then an error is raised, and the page is not loaded when trying to render the page.</p>~' );
    --
    l_property_id := 142;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_PREFERENCE',
        p_prompt             => 'Preference',
        p_property_type      => 'TEXT',
        p_db_column          => 'SOURCE',
        p_display_length     => 80,
        p_max_length         => 255,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Enter the User Preference to be used as the source for this item value.~' );
    --
    l_property_id := 143;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POST_CALCULATION_COMPUTATION',
        p_prompt             => 'Post Calculation Computation',
        p_property_type      => 'PLSQL EXPRESSION VARCHAR2', -- no need to make this property available for other languages, because it's deprecated
        p_db_column          => 'SOURCE_POST_COMPUTATION',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'SOURCE',
        p_deprecated_values  => '$NOT_NULL$',
        p_help_text          => q'~<p>Enter a PL/SQL expression to refine the value of the item.</p>
<p>For example, if this item is named <code>P1_X</code>, you could use post calculation expressions such as <code>UPPER(:P1_X)</code>, <code>INITCAP(:P2_Y)</code>, <code>MIN(:P1_X, :P2_Y - 200)</code>, <code>NVL(:P1_X, :P2_Y)</code>, or a function call such as <code>my_func(:P1_X)</code> to set the final value of the item.
Note that these examples demonstrate that the expressions can reference the current item, or they may reference any other item in session state.</p>~' );
    --
    l_property_id := 144;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAINTAIN_SESSION_STATE',
        p_prompt             => 'Storage',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'IS_PERSISTENT',
        p_display_group_name => 'SESSION_STATE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how session state is maintained.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Per Request (Memory Only)',
        p_return_value  => 'N',
        p_help_text     => q'~Do not save state in the database. State is only available when processing the current request. When AJAX requests need to use an item, make sure to pass the item name via "Page Items To Submit".~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Per Session (Persistent)',
        p_return_value  => 'Y',
        p_help_text     => q'~Maintain for each session by storing the value in the database, to access it across requests.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Per User (Persistent)',
        p_return_value  => 'U',
        p_help_text     => q'~Maintain for a user by storing the value in the database, to access it across sessions.~' );
    --
    l_property_id := 145;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_VALUE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ITEM_DEFAULT_TYPE',
        p_display_group_name => 'DEFAULT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a default value type for this item.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static',
        p_return_value  => 'STATIC_TEXT_WITH_SUBSTITUTIONS',
        p_help_text     => q'~Set to the value entered in <em>Static</em> value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_help_text     => q'~Set to the value returned from the session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return single value)',
        p_return_value  => 'SQL_QUERY',
        p_help_text     => q'~Set to the first value returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return multiple values)',
        p_return_value  => 'SQL_QUERY_COLON',
        p_help_text     => q'~Set to multiple values returned from the <em>SQL Query</em>. The format of what is returned is determined by the current item's Multiple Values setting. If Multiple Values is set to <em>Delimited Values</em>, the value will be a single concatenated list separated by the defined Separator. If Multiple Values is set to <em>JSON Array</em>, the value will be a JSON Array of the values. If Multiple Values is set to <em>No</em> or the item does not support multiple values, then the value is a single concatenated list separated by a colon.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Expression',
        p_return_value  => 'EXPRESSION',
        p_help_text     => q'~Set to the value returned from the <em>Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body',
        p_return_value  => 'FUNCTION_BODY',
        p_help_text     => q'~Set to the value returned from the <em>Function Body</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Sequence',
        p_return_value  => 'SEQUENCE',
        p_help_text     => q'~<p>Set to the value returned from the <em>Sequence</em> entered. This is a "special" default type: It is executed as part of the Form Region DML process and <em>not</em> during page load. Use this type for auto-generated primary key values, when <strong>Return Primary Key(s) after Insert</strong> cannot be used, for instance, when working with views and INSTEAD OF triggers or with database links. The sequence name is case-sensitive.</p>~' );
    --
    l_property_id := 146;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_VALUE_STATIC_TEXT',
        p_prompt             => 'Static Value',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'ITEM_DEFAULT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'DEFAULT',
        p_help_text          => q'~Specify a default value for this item. The default value is used when the item's value is not derived from session state and when the source value is null.~' );
    --
    l_property_id := 147;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OCI_USER_ID',
        p_prompt             => 'OCI User ID',
        p_property_type      => 'TEXT',
        p_db_column          => 'CLIENT_ID',
        p_display_length     => 80,
        p_max_length         => null,
        p_display_group_name => 'AUTHENTICATION',
        p_help_text          => q'~<p>Enter the Oracle Cloud Infrastructure <em>User OCID</em>. &PRODUCT_NAME. does not store this information encrypted.</p> <p><a rel="noopener noreferrer" target="_blank" href="https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigning
key.htm">Oracle Cloud Infrastructure Documentation</a></p>~' );
    --
    l_property_id := 148;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OCI_PRIVATE_KEY',
        p_prompt             => 'OCI Private Key',
        p_property_type      => 'PASSWORD',
        p_db_column          => 'CLIENT_SECRET',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'AUTHENTICATION',
        p_help_text          => q'~<p>Enter the private key in PEM format for OCI authentication. &PRODUCT_NAME. stores this information encrypted and secure, so it cannot be retrieved back in clear text.</p><p><a rel="noopener noreferrer" target="_blank" href="https://docs.clo
ud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm">Oracle Cloud Infrastructure Documentation</a></p>~' );
    --
    l_property_id := 149;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_QUICK_PICKS',
        p_prompt             => 'Show Quick Picks',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_QUICK_PICKS',
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~<p>Specify whether quick picks display for this page item.
Quick picks enable users to select predefined values with just one click, rather than typing in text or selecting from a list of available options.</p>
<p>You should specify quick picks when there is a relatively small, discrete set of <em>common</em> input values.
There is a maximum of ten quick picks that can be defined for an item.
Such user aids are especially useful when defined for an item that has a lengthy select list of available values.</p>~' );
    --
    l_property_id := 150;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LINK_ATTRIBUTES',
        p_prompt             => 'Link Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LINK_ATTR',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter HTML attributes that are associated with the display of each <strong>Quick Pick</strong> link.~' );
    --
    l_property_id := 151;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_01',
        p_prompt             => 'Label 1',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_01',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the first <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 152;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_01',
        p_prompt             => 'Value 1',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_01',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the first <strong>Quick Pick</strong>.  This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 153;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_02',
        p_prompt             => 'Label 2',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_02',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the second <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 154;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_02',
        p_prompt             => 'Value 2',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_02',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the second <strong>Quick Pick</strong>. This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 155;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_03',
        p_prompt             => 'Label 3',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_03',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the third <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 156;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_03',
        p_prompt             => 'Value 3',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_03',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the third <strong>Quick Pick</strong>.  This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 157;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_04',
        p_prompt             => 'Label 4',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_04',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the forth <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 158;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_04',
        p_prompt             => 'Value 4',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_04',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the forth <strong>Quick Pick</strong>.  This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 159;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_05',
        p_prompt             => 'Label 5',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_05',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the fifth <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 160;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_05',
        p_prompt             => 'Value 5',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_05',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the fifth <strong>Quick Pick</strong>.  This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 161;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_06',
        p_prompt             => 'Label 6',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_06',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the sixth <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 162;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_06',
        p_prompt             => 'Value 6',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_06',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the sixth <strong>Quick Pick</strong>. This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 163;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_07',
        p_prompt             => 'Label 7',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_07',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the seventh <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 164;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_07',
        p_prompt             => 'Value 7',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_07',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the seventh <strong>Quick Pick</strong>.  This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 165;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_08',
        p_prompt             => 'Label 8',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_08',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the eighth <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 166;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_08',
        p_prompt             => 'Value 8',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_08',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the eighth <strong>Quick Pick</strong>.  This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 167;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_09',
        p_prompt             => 'Label 9',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_09',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the ninth <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 168;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_09',
        p_prompt             => 'Value 9',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_09',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the ninth <strong>Quick Pick</strong>.  This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 169;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_10',
        p_prompt             => 'Label 10',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_10',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the tenth <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 170;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_10',
        p_prompt             => 'Value 10',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_10',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the tenth <strong>Quick Pick</strong>.  This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 171;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'READ_ONLY_HTML_ATTRIBUTES',
        p_prompt             => 'Read Only HTML Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'READ_ONLY_DISP_ATTR',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<pre>bgcolor="#FF0000"</pre>~',
        p_display_group_name => 'READ_ONLY',
        p_help_text          => q'~Enter attributes included in the item HTML table cell tag, <code>&lt;td&gt;</code>, when displayed in read only mode.~' );
    --
    l_property_id := 172;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SESSION_STATE_PROTECTION',
        p_prompt             => 'Session State Protection',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PROTECTION_LEVEL',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a Session State Protection level.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Unrestricted',
        p_return_value  => 'N',
        p_help_text     => q'~The item can be set by passing the item in a URL or in a form. No checksum is required in the URL.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Checksum Required - Application Level',
        p_return_value  => 'B',
        p_help_text     => q'~The item can be set by passing the item in a URL that includes a checksum specific to the workspace and application.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Checksum Required - User Level',
        p_return_value  => 'P',
        p_help_text     => q'~The item can be set by passing the item in a URL that includes a checksum specific to the workspace, application and user.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Checksum Required - Session Level',
        p_return_value  => 'S',
        p_help_text     => q'~The item can be set by passing the item in a URL that includes a checksum specific to the session.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Restricted - May not be set from browser',
        p_return_value  => 'I',
        p_help_text     => q'~The item can not be altered using the URL or POSTDATA.
Select this option to restrict what can set the item value to internal processes, computations, and so on.
This attribute only applies to items that are not used as data entry items and is always observed, even if Session State Protection is disabled.
Use this attribute for page or application items that have the following <strong>Display As</strong> types:
<ul>
  <li>Display Only (Save State=No)</li>
  <li>Text Field (Disabled, does not save state)</li>
</ul>~' );
    --
    l_property_id := 173;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENCRYPT_SESSION_STATE',
        p_prompt             => 'Store value encrypted in session state',
        p_property_type      => 'YES NO',
        p_db_column          => 'ENCRYPT_SESSION_STATE_YN',
        p_display_group_name => 'SECURITY',
        p_help_text          => q'~<p>Specify whether to encrypt this item when stored in session state.
If the contents of an item contain sensitive data, then you should encrypt the value when it is stored in the &PRODUCT_NAME. session state management tables.
Otherwise, anyone with rights to read the &PRODUCT_NAME. meta data tables could potentially write a query to extract this sensitive data.</p>~' );
    --
    l_property_id := 174;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ESCAPE_SPECIAL_CHARACTERS',
        p_prompt             => 'Escape special characters',
        p_property_type      => 'YES NO',
        p_db_column          => 'ESCAPE_ON_HTTP_OUTPUT',
        p_display_group_name => 'SECURITY',
        p_help_text          => q'~To prevent Cross-Site Scripting (XSS) attacks, always set this attribute to <strong>On</strong>.
If you need to render HTML tags stored in the page item or in the entries of a list of values, you can set this flag to <strong>Off</strong>.
In such cases, you should take additional precautions to ensure any user input to such fields are properly escaped when entered and before saving.~' );
    --
    l_property_id := 175;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RESTRICTED_CHARACTERS',
        p_prompt             => 'Restricted Characters',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'RESTRICTED_CHARACTERS',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select how to restrict the characters that can be saved in session state.
&PRODUCT_NAME. displays an error message if a user tries to save data that does not conform to the selected character restriction.</p>
<p>Restricting the characters hardens application security and is a possible counter measure to cross-site scripting (XSS) attacks.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Allowlist for a-Z, 0-9 and space',
        p_return_value  => 'US_ONLY',
        p_help_text     => q'~Only characters a-z, A-Z, 0-9 and space can be saved.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Blocklist HTML command characters (<>")',
        p_return_value  => 'WEB_SAFE',
        p_help_text     => q'~Reserved HTML characters can NOT be saved.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Blocklist &<>"/;,*|=% and --',
        p_return_value  => 'NO_SPECIAL_CHAR',
        p_help_text     => q'~The following characters: &amp;, &lt;, &gt;, ", /, ;, ",", *, |, =, % and "--" (PL/SQL comment) can NOT be saved.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Blocklist &<>"/;,*|=% or -- and new line',
        p_return_value  => 'NO_SPECIAL_CHAR_NL',
        p_help_text     => q'~The following characters: &amp;, &lt;, &gt;, ", /, ;, ",", *, |, =, %, "--", and new line characters can NOT be saved.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Workspace Schema',
        p_return_value  => 'WORKSPACE_SCHEMA',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Workspace User Schema',
        p_return_value  => 'WRKSP_USER_SCHEMA',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Workspace User Schema ID',
        p_return_value  => 'WRKSP_USER_SCHEMA_ID',
        p_is_internal   => 'Y' );
    --
    l_property_id := 176;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'BUTTON_NAME',
        p_prompt                => 'Button Name',
        p_property_type         => 'TEXT',
        p_db_column             => 'BUTTON_NAME',
        p_display_length        => 60,
        p_max_length            => 255,
        p_restricted_characters => 'SAFE_COMPONENT_NAME',
        p_display_group_name    => 'IDENTIFICATION',
        p_help_text             => q'~<p>Enter the name used to identify this button within subsequent page processing.
When the page is submitted, by pressing this button, the REQUEST value is set to the name entered.</p>
<p>Button name does not have to be unique, for buttons on the same page or in the same region.
You can define multiple buttons with the same button name, which sets the same REQUEST value when pressed.
This is useful for defining buttons with different <strong>Button Labels</strong> or conditions, that need to execute the same page processing, by simply evaluating the common REQUEST value.</p>
<p>If you name the button <code>FLOW_RESET_BUTTON</code> then the button resets the current page without doing a page submit.</p>~' );
    --
    l_property_id := 177;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_LABEL',
        p_prompt             => 'Label',
        p_property_type      => 'TEXT',
        p_db_column          => 'BUTTON_IMAGE_ALT',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_is_translatable    => true,
        p_help_text          => q'~If the button is text, enter the text to be displayed on the button. If the button is an image, then this text becomes the ALT text for the image.~' );
    --
    l_property_id := 178;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HAS_DEFAULT',
        p_prompt             => 'Has Default',
        p_property_type      => 'YES NO',
        p_db_column          => 'HAS_DEFAULT',
        p_display_group_name => 'PARAMETER',
        p_help_text          => q'~Specify whether the parameter has a default value and can be omitted.~' );
    --
    l_property_id := 179;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HORIZONTAL_ALIGNMENT',
        p_prompt             => 'Horizontal Alignment',
        p_property_type      => 'PILL BUTTONS',
        p_db_column          => 'HORIZONTAL_ALIGNMENT',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the horizontal alignment for this button within the specified template position.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left',
        p_return_value  => 'LEFT',
        p_icon          => 'icon-align-start' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right',
        p_return_value  => 'RIGHT',
        p_icon          => 'icon-align-end' );
    --
    l_property_id := 180;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'STATIC_ID',
        p_prompt                => 'Static ID',
        p_property_type         => 'TEXT',
        p_db_column             => 'STATIC_ID',
        p_display_length        => 60,
        p_max_length            => 255,
        p_display_group_name    => 'ADVANCED',
        p_help_text             => q'~Enter a static ID to uniquely identify this component in API calls.~' );
    --
    l_property_id := 181;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'DOM_STATIC_ID',
        p_prompt                => 'Static ID',
        p_property_type         => 'TEXT',
        p_db_column             => 'STATIC_ID',
        p_restricted_characters => 'DOM_STATIC_ID',
        p_display_length        => 60,
        p_max_length            => 255,
        p_display_group_name    => 'ADVANCED',
        p_help_text             => q'~Enter a static ID to uniquely identify this component. This ID will be placed in the DOM and can be used for API calls or custom JavaScript or CSS.~' );
    --
    l_property_id := 182;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'BUTTON_TEMPLATE',
        p_prompt                   => 'Button Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'BUTTON_TEMPLATE_ID',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_button_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~Select a button template to define the appearance of this button.~' );
    --
    l_property_id := 183;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_IS_HOT',
        p_prompt             => 'Hot',
        p_property_type      => 'YES NO',
        p_db_column          => 'BUTTON_IS_HOT',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Specify whether to use the <strong>Normal</strong> or <strong>Hot</strong> button template when rendering this button.~' );
    --
    l_property_id := 184;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_BOOLEAN_TRUE',
        p_prompt             => 'True Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'TRUE_VALUE',
        p_display_length     => 10,
        p_max_length         => 10,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~<p>Value used to determine TRUE. It's used to convert a VARCHAR2 value into a BOOLEAN and back into a VARCHAR2.
If no value has been specified, and &PRODUCT_NAME. can't determine the value from an item of type Checkbox or Switch, the
values <code>Y,y,TRUE,true,T,1</code> are considered TRUE.~' );
    --
    l_property_id := 185;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_BOOLEAN_FALSE',
        p_prompt             => 'False Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'FALSE_VALUE',
        p_display_length     => 10,
        p_max_length         => 10,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~<p>Value used to determine FALSE. It's used to convert a VARCHAR2 value into a BOOLEAN and back into a VARCHAR2.
If no value has been specified, and &PRODUCT_NAME. can't determine the value from an item of type Checkbox or Switch, the
values <code>N,n,FALSE,false,f,0</code> and NULL are considered FALSE.~' );
    --
    l_property_id := 186;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'COLUMN_NAME_UPPER',
        p_prompt                => 'Name',
        p_property_type         => 'TEXT',
        p_db_column             => 'NAME',
        p_display_length        => 128,
        p_max_length            => 128,
        p_text_case             => 'UPPER',
        p_restricted_characters => 'SAFE_COMPONENT_NAME_NO_NUMBER',
        p_display_group_name    => 'IDENTIFICATION',
        p_help_text             => q'~Enter the name of this region column. It must be a valid Oracle identifier.~' );
    --
    l_property_id := 187;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_TARGET',
        p_prompt             => 'Target',
        p_property_type      => 'LINK',
        p_db_column          => 'BUTTON_REDIRECT_URL',
        p_display_group_name => 'BEHAVIOR',
        p_help_text          => q'~Click the Target to invoke a modal dialog. You can enter the target to be called when this button is clicked. Only enter a target for buttons that should not invoke page processing when clicked (for example, a Cancel button).~' );
    --
    l_property_id := 188;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_EXECUTE_VALIDATIONS',
        p_prompt             => 'Execute Validations',
        p_property_type      => 'YES NO',
        p_db_column          => 'BUTTON_EXECUTE_VALIDATIONS',
        p_display_group_name => 'BEHAVIOR',
        p_help_text          => q'~<p>If the page is submitted and this attribute is set to <strong>On</strong>, all validations defined for the page and also the built-in validations are executed (such as required, valid number or valid date) on the server-side.
In addition, if <em>Compatibility Mode</em> of the application is set to <strong>5.1</strong> or above, &PRODUCT_NAME. will also perform client-side validations, such as item required. Please see "Compatibility Mode" in the Release Notes for further details.
The page will not be submitted until all issues are fixed.</p>
<p>If set to <strong>Off</strong>, none of the defined validations nor the built-in validations are executed.
If you want a specific validation to execute independent of this setting, modify the validation and set the validation attribute <strong>Always Execute</strong> to <strong>On</strong>.</p>
<p>This attribute is particularly useful for buttons such as Delete or Cancel where the majority of validations should not be executed.
Users should generally not be stopped from performing such actions if an item is null or of the wrong type.
However, if actions, such as Delete, should only be performed by authorized users it is important to set the corresponding validation attribute <strong>Always Execute</strong> to <strong>On</strong>, or ensure there is an appropriate condition defined on the button itself so that the button is only displayed to authorized users.</p>~' );
    --
    l_property_id := 189;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_DATABASE_ACTION',
        p_prompt             => 'Database Action',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DATABASE_ACTION',
        p_display_group_name => 'BEHAVIOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of SQL operation that clicking this button performs.
This selection is used to trigger the specified database action within built-in Automatic Row Processing (DML).
If you do not select a type, database processing executes based on the REQUEST value, which is set based on the <strong>Button Name</strong> defined for this button.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL INSERT action',
        p_return_value  => 'INSERT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL UPDATE action',
        p_return_value  => 'UPDATE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL DELETE action',
        p_return_value  => 'DELETE' );
    --
    l_property_id := 190;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PARENT_REGION',
        p_prompt                   => 'Parent Region',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'PARENT_REGION_ID',
        p_display_group_name       => 'LAYOUT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE',
        p_help_text                => q'~Select the parent region in which the region will be displayed.~' );
    --
    l_property_id := 191;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SLOT_PLACEHOLDER',
        p_prompt             => 'Slot',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SLOT_PLACEHOLDER', -- this column does not exist in any table, the correct columns are defined in its usage of store_component_prop
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'SLOTS',
        p_help_text          => q'~Select the slot used to display this component. The slots are derived from the appropriate page template, region template or template component definition.~' );
    --
    l_property_id := 192;
    store_process_point_property (
        p_property_id => l_property_id,
        p_name        => 'PROCESS_POINT' ); -- $$$ should be renamed into PAGE_PROCESS_POINT
    --
    l_property_id := 193;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'REGION_SQL',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'PLUG_SOURCE',
        p_display_length       => 80,
        p_max_length           => 32767,
        p_sql_min_column_count => 1,
        p_display_group_name   => 'SOURCE',
        p_help_text            => q'~Enter the SQL source for this component.~' );
    --
    l_property_id := 194;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_PLAIN',
        p_prompt             => 'Text',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'PLUG_SOURCE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Enter the text source for this component.~' );
    --
    l_property_id := 195;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DIALOG_HEIGHT',
        p_prompt             => 'Height',
        p_property_type      => 'TEXT',
        p_db_column          => 'DIALOG_HEIGHT',
        p_display_length     => 10,
        p_max_length         => 20,
        p_display_group_name => 'DIALOG',
        p_help_text          => q'~Enter the height of the dialog, in pixels, for example, <strong><em>500</em></strong>.
The substitution string <code>#DIALOG_HEIGHT#</code> in the dialog initialization code of the page template is replaced with the value entered.~' );
    --
    l_property_id := 196;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AUTHENTICATION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SUPPORTED UI',
        p_db_column          => 'SCHEME_TYPE',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'PLUGINS',
        p_help_text          => q'~<p>Select which authentication scheme is applied. The following authentication types are supported:</p>
#NATIVE_PLUGINS#
<p>Depending on your application configuration, you may have additional authentication type plug-ins available here.
These are displayed as <em>&lt;My Plugin&gt; [Plug-in]</em>.
The following plug-ins are installed in this application's shared components:</p>
#CUSTOM_PLUGINS#~' );
    --
    l_property_id := 197;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'AUTHENTICATION_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_authentication,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Use this field to base this authentication scheme on an existing authentication scheme in this application or another application in your workspace.~' );
    --
    l_property_id := 198;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLSQL_CODE',
        p_prompt             => 'PL/SQL Code',
        p_property_type      => 'PLSQL',
        p_db_column          => 'PLSQL_CODE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Enter the PL/SQL source utilized within this authentication scheme.~' );
    --
    l_property_id := 199;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VERIFY_FUNCTION_NAME',
        p_prompt             => 'Verify Function Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'VERIFICATION_FUNCTION',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'SESSION_NOT_VALID',
        p_examples           => q'~<dl>
<dt>Restrict the use of an application to specific business hours</dt>
<dd><pre>
function check_business_hours return boolean
is
begin
    return to_char(to_char(sysdate, 'hh24:mi')) between '08:00' and '17:00';
end check_business_hours;
</pre></dd>
</dl>~',
        p_help_text          => q'~Enter the name of a function that is called after the session sentry has returned successfully.
The function can either be defined in the <strong>PL/SQL code</strong> attribute or in the database.
The result must be boolean, with TRUE representing the user is verified, and FALSE representing the user has failed verification.~' );
    --
    l_property_id := 200;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INVALID_SESSION_TYPE',
        p_prompt             => 'Redirect to',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'INVALID_SESSION_TYPE',
        p_display_group_name => 'SESSION_NOT_VALID',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select where &PRODUCT_NAME. redirects to if the session is not valid.
This happens if the <strong>Sentry Function</strong> or the <strong>Verify Function</strong> returns FALSE on normal page requests, but not on Ajax requests.</p>
<p>Note: If using the <strong>Custom</strong> Authentication Scheme Type, the <strong>Sentry Function</strong> attribute in the Authentication Scheme can also be utilized.
For plug-in Authentication Scheme Types this is defined by the plug-in developer in the <strong>Session Sentry Function Name</strong> callback.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Login Page',
        p_return_value  => 'LOGIN',
        p_help_text     => q'~Redirect to the Login URL defined in the application attributes.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Built-In Login Page',
        p_return_value  => 'BUILTIN_LOGIN',
        p_help_text     => q'~Redirect to the URL defined in <code>wwv_flow_custom_auth_std.login_page</code>, provided by &PRODUCT_NAME..~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'URL',
        p_return_value  => 'URL',
        p_help_text     => q'~Redirect to the URL you enter, such as <code>f?p=&amp;APP_ID.:101:&amp;SESSION</code>.~' );
    --
    l_property_id := 201;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INVALID_SESSION_URL',
        p_prompt             => 'Invalid Session URL',
        p_property_type      => 'LINK',
        p_db_column          => 'INVALID_SESSION_URL',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'SESSION_NOT_VALID',
        p_help_text          => q'~Enter a URL that &PRODUCT_NAME. redirects to if the session sentry function returns FALSE. This would normally be a URL to a login page or single sign-on portal. For example, f?p=&amp;APP_ID.:101:&amp;SESSION~' );
    --
    l_property_id := 202;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRE_AUTHENTICATION_PROCEDURE_NAME',
        p_prompt             => 'Pre-Authentication Procedure Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'PRE_AUTH_PROCESS',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'LOGIN_PROCESSING',
        p_help_text          => q'~<p>Enter the name of a procedure to be executed after the login page is submitted and just before credentials verification is performed.
The procedure can be defined in the <strong>PL/SQL Code</strong> attribute or within the database.</p>
<p>Authentication schemes, where user credential checking is done outside of &PRODUCT_NAME., typically do not execute the Pre-Authentication procedure.
Examples include <em>HTTP Header Variable</em>, <em>Oracle Application Server Single Sign-On</em> and custom authentication schemes that use <code>apex_authentication.post_login</code> instead of <code>apex_authentication.login</code>.</p>~' );
    --
    l_property_id := 203;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POST_AUTHENTICATION_PROCEDURE_NAME',
        p_prompt             => 'Post-Authentication Procedure Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'POST_AUTH_PROCESS',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'LOGIN_PROCESSING',
        p_examples           => q'~<dl>
<dt>Remove the domain from the authenticated username, i.e. transforms <code>JOHNDOE@EXAMPLE.COM</code> to <code>JOHNDOE</code></dt>
<dd><pre>
apex_custom_auth.set_user (
    p_user => regexp_replace(:APP_USER, '@.*', null) );
</pre></dd>
</dl>~',
        p_help_text          => q'~Enter the name of a procedure to be executed by the &PRODUCT_NAME. login procedure (login API) after the authentication step (login credentials verification).
The login procedure executes this code after performing normal login procedure duties, which include setting a cookie and registering the session, but before it redirects to the desired application page.
The procedure can be defined in the <strong>PL/SQL Code</strong> attribute or in the database.~' );
    --
    l_property_id := 204;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOGOUT_TYPE',
        p_prompt             => 'Logout Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOGOUT_TYPE',
        p_is_query_only      => true,
        p_display_group_name => 'POST_LOGOUT_URL',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Enter where &PRODUCT_NAME. redirects to after logout.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Home Page',
        p_return_value  => 'HOME',
        p_help_text     => q'~Redirect to the Home Link value specified in the application attributes.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'URL',
        p_return_value  => 'URL',
        p_help_text     => q'~Redirect to the URL you enter, such as <code>f?p=&amp;APP_ID.:101:&amp;SESSION</code>.~' );
    --
    l_property_id := 205;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POST_LOGOUT_URL',
        p_prompt             => 'Post-Logout URL',
        p_property_type      => 'TEXT',
        p_db_column          => 'LOGOUT_URL',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'POST_LOGOUT_URL',
        p_help_text          => q'~Enter the URL where your application is redirected after &PRODUCT_NAME. has cleaned up the user session.~' );
    --
    l_property_id := 206;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COOKIE_NAME',
        p_prompt             => 'Cookie Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'COOKIE_NAME',
        p_display_length     => 32,
        p_max_length         => 255,
        p_display_group_name => 'SESSION_SHARING',
        p_help_text          => q'~<p>Enter the name for the session cookie, which is required to identify a &PRODUCT_NAME. session, together with the session id in the URL.
If you do not specify a session cookie name, &PRODUCT_NAME. utilizes a default value.</p>
<p>By entering the same cookie name in multiple applications, each of the applications can utilize the same session cookie.
Therefore, a URL call from a &PRODUCT_NAME. application to another &PRODUCT_NAME. application, with the same cookie name, does not require the user to re-authenticate, because the new application can utilize the existing session cookie.</p>~' );
    --
    l_property_id := 207;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COOKIE_PATH',
        p_prompt             => 'Cookie Path',
        p_property_type      => 'TEXT',
        p_db_column          => 'COOKIE_PATH',
        p_display_length     => 32,
        p_max_length         => 255,
        p_display_group_name => 'SESSION_SHARING',
        p_help_text          => q'~<p>Enter the URL path attribute for the session cookie.
If the start of the request URL does not match the path specified, the cookie is not sent to the browser.
The default value is the path of the request URL.</p>
<p>Use this attribute to specify a less restrictive path, when you wish to share session cookies between applications that have initially conforming URL paths.</p>~' );
    --
    l_property_id := 208;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COOKIE_DOMAIN',
        p_prompt             => 'Cookie Domain',
        p_property_type      => 'TEXT',
        p_db_column          => 'COOKIE_DOMAIN',
        p_display_length     => 32,
        p_max_length         => 255,
        p_display_group_name => 'SESSION_SHARING',
        p_help_text          => q'~<p>Enter the URL domain attribute for the session cookie.
If the tail comparison of the request URL does not match the domain specified, the cookie is not sent to the browser.
The default value is the host name of the request URL.</p>
<p>Use this attribute to specify a less restrictive domain, when you wish to share session cookies between applications that have common domains.
For example, <code>my.yahoo.com</code>, <code>sport.yahoo.com</code>, and <code>finance.yahoo.com</code> could all access the same cookie if a domain of <code>yahoo.com</code> is entered.</p>~' );
    --
    l_property_id := 209;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SECURE_COOKIE',
        p_prompt             => 'Secure',
        p_property_type      => 'YES NO',
        p_db_column          => 'USE_SECURE_COOKIE_YN',
        p_display_group_name => 'SESSION_SHARING',
        p_help_text          => q'~<p>Specify <strong>On</strong> to enable the session management cookie to be sent from the browser only when the protocol is HTTPS.
Select <strong>Off</strong> to enable the session management cookie to be sent from the browser when the protocol is HTTP or HTTPS.</p>
<p>If SSL is configured on your web server, you should select <strong>On</strong> to strengthen your application's security by preventing unencrypted HTTP traffic.</p>~' );
    --
    l_property_id := 210;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RAS_MODE',
        p_prompt             => 'RAS Mode',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'RAS_MODE',
        p_display_group_name => 'REAL_APPLICATION_SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select how Oracle Real Application Security (RAS) is used in this application.</p>
<p>If you enable RAS Mode, make sure that the users have privileges to access the application's schema objects.
For example, with <strong>External Users</strong> you can grant database privileges to a <em>RAS Dynamic Application Role</em> and configure it in this authentication scheme as a <em>Dynamic Role</em>.
You can also enable roles via a call to <em>apex_authorization.enable_dynamic_groups</em>, such as within a Post-Authentication procedure.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Disabled',
        p_return_value  => '0',
        p_help_text     => q'~Real Application Security does not get used in the application~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'External Users',
        p_return_value  => '1',
        p_help_text     => q'~For light weight external users, &PRODUCT_NAME. passes <em>true</em> via the <em>is_external</em> parameter to <em>dbms_xs_sessions.assign_user</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Internal Users',
        p_return_value  => '2',
        p_help_text     => q'~&PRODUCT_NAME. assumes that all users are internal and passes <em>false</em> via the <em>is_external</em> parameter to <em>dbms_xs_sessions.assign_user</em>.~' );
    --
    l_property_id := 211;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RAS_DYNAMIC_ROLES',
        p_prompt             => 'Dynamic Roles',
        p_property_type      => 'TEXT',
        p_db_column          => 'RAS_DYNAMIC_ROLES',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'REAL_APPLICATION_SECURITY',
        p_help_text          => q'~<p>Enter a colon separated list of Real Application Security Dynamic Roles, such as:
<pre>
DB_EMP:DB_DEPT
</pre></p>
<p>&PRODUCT_NAME. enables these roles on login, by passing them via the <em>enable_dynamic_roles</em> parameter of <em>sys.dbms_xs_sessions.assign_user</em>.</p>~' );
    --
    l_property_id := 212;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RAS_NAMESPACES',
        p_prompt             => 'Namespaces',
        p_property_type      => 'TEXT',
        p_db_column          => 'RAS_NAMESPACES',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'REAL_APPLICATION_SECURITY',
        p_help_text          => q'~<p>Enter a colon separated list of Real Application Security Namespace Templates, such as:
<pre>
NS1:NS2
</pre></p>
<p>&PRODUCT_NAME. enables these namespaces on login, by passing them via the <em>namespaces</em> parameter of <em>sys.dbms_xs_sessions.assign_user</em>.</p>~' );
    --
    l_property_id := 213;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'EXCLUDE_TITLE_FROM_TRANSLATION',
        p_prompt               => 'Exclude Title from Translation',
        p_property_type        => 'YES NO',
        p_db_column            => 'EXCLUDE_TITLE_FROM_TRANSLATION',
        -- Requires new parameter as dev_view.sql inverts the value (case when translate_title = 'N' then 'Y' else 'N' end as exclude_title_from_translation)
        -- Commenting out until a new parameter is added to make it more understandable
        -- p_import_api_parameter => 'translate_title',
        p_display_group_name   => 'ADVANCED',
        p_help_text            => q'~Specify whether you want to exclude this title from translation. This attribute has no effect, except when translating the application into another language.~' );
    --
    l_property_id := 214;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_HTML_CODE',
        p_prompt             => 'HTML Code',
        p_property_type      => 'HTML',
        p_db_column          => 'PLUG_SOURCE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'SOURCE',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the region source or content, depending on the <em>Region Type</em> selected.~' );
    --
    l_property_id := 215;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'SOURCE_PAGE_ITEMS_TO_SUBMIT',
        p_prompt                   => 'Page Items to Submit',
        p_property_type            => 'ITEM',
        p_multi_value_delimiter    => ',',
        p_db_column                => 'AJAX_ITEMS_TO_SUBMIT',
        p_display_length           => 50,
        p_max_length               => 4000,
        p_display_group_name       => 'SOURCE',
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~<p>Enter page or application items to be set into session state when the region is refreshed by a partial page refresh.
For multiple items, separate each item name with a comma.
You can type in the name or pick from the list of available items.
If you pick from the list and there is already text entered, then a comma is placed at the end of the existing text, followed by the item name returned from the list.</p>
<p>The region can be refreshed with partial page refresh either during pagination, if <em>Enable Partial Page Refresh</em> is set to <strong>On</strong>), or with the Refresh action within a Dynamic Action.</p>
These page items can then be used in the <em>where condition</em> of the Region Source SQL Query to restrict the query result.~' );
    --
    l_property_id := 216;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SCHEMA_OVERRIDE_ITEM',
        p_prompt             => 'Schema Override Item',
        p_property_type      => 'ITEM',
        p_db_column          => 'PLUG_QUERY_PARSE_OVERRIDE',
        p_display_length     => 45,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_is_internal        => true,
        p_help_text          => q'~Enter the page or application item to be used as the overriding parsing schema.  This is for internal applications only.~' );
    --
    l_property_id := 217;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'REGION_TEMPLATE',
        p_prompt                   => 'Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'PLUG_TEMPLATE',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Select a region template to define the appearance and layout of this region.</p>
        <p>Region templates are defined in the application theme.
        When a region is created, the template is automatically set to the default region template defined in the current theme.</p>
        <p>Many themes contain region templates for displaying reports, forms, alerts, buttons, collapsible (hide / show) content, login forms, and so forth.<br>
        Universal Theme provides the following region templates:
          <dl>
            <dt>Alert</dt>
            <dt>Blank with Attributes</dt>
            <dt>Blank with Attributes (No Grid)</dt>
            <dt>Buttons Container</dt>
            <dt>Cards Container</dt>
            <dt>Carousel Container</dt>
            <dt>Collapsible</dt>
            <dt>Content Block</dt>
            <dt>Hero</dt>
            <dt>Image</dt>
            <dt>Inline Dialog</dt>
            <dt>Inline Drawer</dt>
            <dt>Inline Popup</dt>
            <dt>Interactive Report</dt>
            <dt>Login</dt>
            <dt>Standard</dt>
            <dt>Tabs Container</dt>
            <dt>Title Bar</dt>
            <dt>Wizard Container</dt>
          </dl>
          See Also: <a rel="noopener noreferrer" target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a>
        </p>~' );
    --
    l_property_id := 218;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEM_DISPLAY_POSITION',
        p_prompt             => 'Render Components',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PLUG_ITEM_DISPLAY_POINT',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select if the region components (sub regions, items, buttons) display above or below the main region content.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Above Content',
        p_return_value  => 'ABOVE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Below Content',
        p_return_value  => 'BELOW' );
    --
    l_property_id := 219;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_DISPLAY_SELECTOR',
        p_prompt             => 'Region Display Selector',
        p_property_type      => 'YES NO',
        p_db_column          => 'INCLUDE_IN_REG_DISP_SEL_YN',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Specify <strong>On</strong> if you want this region included in the Region Display Selector.
This attribute is only utilized if a region type of <em>Region Display Selector</em> is defined and viewable on the page.</p>
<p>When a user clicks on a region name, included in the Region Display Selector, only the selected region shows and all other listed regions are hidden.
The first entry within the Region Display Selector is <em>Show All</em>, which enables the user to show all of the available regions rather than only the previously selected region.</p>
<p>If a region is not displayable, based on the region conditions, then it is not included in the lists of regions within the Region Display Selector.</p>~' );
    --
    l_property_id := 220;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_IMAGE',
        p_prompt             => 'Region Image',
        p_property_type      => 'TEXT',
        p_db_column          => 'REGION_IMAGE',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'ADVANCED',
        p_deprecated_values  => '$NOT_NULL$',
        p_help_text          => q'~Enter a reference to an image that displays in the upper left of the region. There is no control over the table tag used to display this image.~' );

    l_property_id := 221;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IMAGE_TAG_ATTRIBUTES',
        p_prompt             => 'Image Tag Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'REGION_IMAGE_ATTR',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'ADVANCED',
        p_deprecated_values  => '$NOT_NULL$',
        p_help_text          => q'~<p>Enter custom region image attributes to be included in the image HTML. This can be used for attributes such as height or width.</p>~' );
    --
    l_property_id := 222;
    --
    -- region and page caching
    --
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CACHE_MODE',
        p_prompt             => 'Caching',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CACHE_MODE',
        p_display_group_name => 'SERVER_CACHE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how the &PRODUCT_NAME. engine can cache HTML text on the server side. If caching can be used, it emits the cached result instead of computing it again. This cuts down on expensive computation time on the server. This feature is unrelated to the browser's caching capabilities.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Disabled',
        p_return_value  => 'NOCACHE',
        p_help_text     => q'~Content is not cached and computed for each request.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Enabled',
        p_return_value  => 'CACHE',
        p_help_text     => q'~Content is cached and utilized by all users.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cache By User',
        p_return_value  => 'USER',
        p_help_text     => q'~Content is cached specifically for each user.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cache By Session',
        p_return_value  => 'SESSION',
        p_help_text     => q'~Content is cached specifically for each session.~' );
    --
    l_property_id := 223;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CUSTOMIZABLE',
        p_prompt             => 'Customizable',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PLUG_CUSTOMIZED',
        p_display_group_name => 'CUSTOMIZATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select whether display attributes in this region can be customized by the user.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Not Customizable By End Users',
        p_return_value  => '0' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Customizable and Shown By Default',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Customizable and Not Shown By Default',
        p_return_value  => '2' );
    --
    l_property_id := 224;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CUSTOMIZED_OPTION_NAME',
        p_prompt             => 'Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'PLUG_CUSTOMIZED_NAME',
        p_display_length     => 70,
        p_max_length         => 255,
        p_display_group_name => 'CUSTOMIZATION',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the link that displays under this region, which provides access to the region customization page.
This label only displays for regions that are customizable.~' );
    --
    l_property_id := 225;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'REGION_FUNCTION_RETURNING_SQL',
        p_prompt               => 'PL/SQL Function Body returning SQL Query',
        p_property_type        => 'PLSQL FUNCTION BODY SQL',
        p_db_column            => 'PLUG_SOURCE',
        p_display_length       => 80,
        p_max_length           => 32767,
        p_sql_min_column_count => 1,
        p_display_group_name   => 'SOURCE',
        p_help_text            => q'~Enter a PL/SQL Function that returns a SQL query that is used as the basis for this region.~' );
    --
    l_property_id := 226;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BRANCH_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'BRANCH_TYPE',
        p_display_group_name => 'BEHAVIOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the type of page branch to perform.</p>
<dl>
<dt>Redirect branches</dt>
<dd>&PRODUCT_NAME. returns the new page or URL to the browser, which performs a new request before showing the resultant page.
The major advantage is that the end users can refresh the page without losing context, as the browser address contains the full page URL.
The disadvantage is that the browser performs an additional request to show the page.</dd>
<dt>Show Only branches</dt>
<dd>&PRODUCT_NAME. immediately renders the new page as part of the current page processing, without performing another request.
This has the advantage that the browser does not have to perform an additional request.
The major disadvantage is that the browser address will be <code>wwv_flow.accept</code>.
If the end users refreshes the page the browser will ask to resend the data, as the browser address is not a full page URL.</dd>
</dl>
<p>Oracle recommends that you select one of the redirect branch types to provide a better end user experience.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page or URL (Redirect)',
        p_return_value  => 'REDIRECT_URL',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'URL Identified by Item (Redirect)',
        p_return_value  => 'BRANCH_TO_URL_IDENT_BY_ITEM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Returning a URL (Redirect)',
        p_return_value  => 'BRANCH_TO_FUNCTION_RETURNING_URL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page (Show only)',
        p_return_value  => 'BRANCH_TO_STEP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page Identified by Item (Show only)',
        p_return_value  => 'BRANCH_TO_PAGE_IDENT_BY_ITEM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Returning a Page (Show only)',
        p_return_value  => 'BRANCH_TO_FUNCTION_RETURNING_PAGE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL procedure [Legacy]',
        p_return_value  => 'PLSQL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page Processing {not common}',
        p_return_value  => 'BRANCH_TO_PAGE_ACCEPT' );
    --
    l_property_id := 227;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BRANCH_POINT',
        p_prompt             => 'Point',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'BRANCH_POINT',
        p_display_group_name => 'EXECUTION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select at what point in page rendering or processing this branch is executed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Before Header',
        p_return_value  => 'BEFORE_HEADER',
        p_help_text     => q'~Rendering: Branches before the page renders.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Submit',
        p_return_value  => 'BEFORE_COMPUTATION',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Processing: Branches after submitting the page and before computation, validations and processes are executed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Validating',
        p_return_value  => 'BEFORE_VALIDATION',
        p_help_text     => q'~Processing: Branches before validations performed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Processing',
        p_return_value  => 'BEFORE_PROCESSING',
        p_help_text     => q'~Processing: Branches before processing performed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Processing',
        p_return_value  => 'AFTER_PROCESSING',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Processing: Branches after processing performed.~' );
    --
    l_property_id := 228;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TARGET',
        p_prompt             => 'Target',
        p_property_type      => 'LINK',
        p_db_column          => 'TARGET',
        p_display_group_name => 'BEHAVIOR',
        p_help_text          => q'~Click the Target to invoke a modal dialog. You can enter the target that is called when this branch is invoked.~',
        p_comment_text       => q'~$$$ can't we merge that with BUTTON_TARGET?~' );
    --
    l_property_id := 229;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BRANCH_PAGE_NUMBER',
        p_prompt             => 'Page Number',
        p_property_type      => 'PAGE',
        p_db_column          => 'BRANCH_PAGE_NUMBER',
        p_display_length     => 5,
        p_max_length         => 20,
        p_display_group_name => 'BEHAVIOR',
        p_help_text          => q'~Enter the page to which this branch is redirected.~' );
    --
    l_property_id := 230;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'BRANCH_ITEM',
        p_prompt                   => 'Item',
        p_property_type            => 'ITEM',
        p_db_column                => 'BRANCH_ITEM',
        p_display_length           => 30,
        p_max_length               => 255,
        p_display_group_name       => 'BEHAVIOR',
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Enter the page or application item containing a page number or URL to redirect to.
This item can be set by the calling page, or by a process when the page first loads.
Specifying an item provides an easy way to dynamically set the branch for pages that are called from many other pages.~' );
    --
    l_property_id := 231;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALID_FOR_URLS',
        p_prompt             => 'Valid for URLs',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'VALID_FOR_URLS',
        p_display_length     => 64,
        p_max_length         => null,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>&PRODUCT_NAME. will check whether the URL, for which the credential is being used at run time, matches one of the URLs within this list. If the URL does not match, &PRODUCT_NAME. will raise an error.</p>
<p>Enter each URL on a new line. The URL endpoint being used must start with one of the URLs provided here.</p>
<p>Example:</p>
<pre>
https://www.example.com/restapis/my-protected-api
https://www.example.com/allowed-urls
</pre>
<p>If the credential is used to
invoke a REST service at <strong>https://www.example.com/restapis/my-protected-api/restendpoint</strong> or <strong>https://www.example.com/allowed-urls/page1</strong>, the credential can be used and the call will succeed.</p>
<p>If the credential is
 used to invoke a REST service at <strong>https://localhost/myapis/test</strong> or <strong>https://dev.example.com/myapis/test</strong>, the credential <em>cannot</em> be used and &PRODUCT_NAME. will raise an error.</p>
<p>Note that changing this va
lue requires to re-enter the client secret.</p>~' );
    --
    l_property_id := 232;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BRANCH_PLSQL',
        p_prompt             => 'PL/SQL Code',
        p_property_type      => 'PLSQL',
        p_db_column          => 'BRANCH_PLSQL',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'BEHAVIOR',
        p_help_text          => q'~Enter the PL/SQL code executed by the branch. This PL/SQL procedure is responsible for invoking the necessary URL.~' );
    --
    l_property_id := 233;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SAVE_STATE_BEFORE_BRANCH',
        p_prompt             => 'Save State before Branching',
        p_property_type      => 'YES NO',
        p_db_column          => 'SAVE_STATE_BEFORE_BRANCH_YN',
        p_display_group_name => 'BEHAVIOR',
        p_deprecated_values  => 'Y',
        p_help_text          => q'~Specify whether values in session state are saved to the database before the branch executes.
It is important to set this attribute to <strong>On</strong> if you are navigating to a different application that needs to access the session state values from this application.~' );
    --
    l_property_id := 234;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'WHEN_BUTTON_PRESSED',
        p_prompt                   => 'When Button Pressed',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'WHEN_BUTTON_ID',
        p_display_group_name       => 'SERVER_SIDE_CONDITION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_button,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~If you want this page processing component to execute only when the specified button is clicked, select a button from the list. You can incorporate this button condition with other conditions to further refine when this page processing component executes.~' );
    --
    l_property_id := 235;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_FORMAT_MASK',
        p_prompt             => 'Format Mask',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'FORMAT_MASK',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'VALUE',
        p_lov_type           => 'ALL_FORMAT_MASKS',
        p_help_text          => q'~<p>Format mask to be used to convert the value into a NUMBER, DATE and TIMESTAMP and back into a VARCHAR2.
If no format mask has been specified, &PRODUCT_NAME. will automatically read the format mask of the specified item.~' );
    --
    l_property_id := 236;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_PLSQL_EXPRESSION_NO_LANG',
        p_prompt             => 'PL/SQL Expression',
        p_property_type      => 'PLSQL EXPRESSION CUSTOM',
        p_db_column          => 'VALUE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the PL/SQL expression that produces a value used as the source for this parameter value.~',
        p_examples           => q'~
<dl><dt>To return YES when the employee is in department 30 or is a manager:</dt>
<dd><pre>
case when ( :P2_DEPTNO = 30 or :P2_JOB = 'MANAGER' ) then 'YES' else 'NO' end
</pre></dd>
</dl>~'
            );
    --
    l_property_id := 237;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'VALUE_PLSQL_FUNC_BODY_NO_LANG',
        p_prompt               => 'PL/SQL Function Body',
        p_property_type        => 'PLSQL FUNCTION BODY CUSTOM',
        p_db_column            => 'VALUE',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_display_group_name   => 'VALUE',
        p_help_text            => q'~Enter the PL/SQL function body which returns a value used as the source for this parameter value.~',
        p_examples             => q'~
<dl><dt>To return some data from the EMP table as a stringified JSON:</dt>
<dd><pre>
declare
    l_result json;
begin
    select json_arrayagg (
               json_object (
                   'empno' value empno,
                   'ename' value ename
               )
           )
      into l_result
      from emp;

    return l_result;
end;
</pre></dd>
</dl>~'
            );
    --
    l_property_id := 238;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MENU_ENTRY_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'MENU_ENTRY_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how the menu entry should be rendered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Menu Entry',
        p_return_value  => 'ENTRY',
        p_help_text     => q'~A menu entry that executes an action.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Sub-Menu',
        p_return_value  => 'SUB_MENU',
        p_help_text     => q'~Groups multiple other menu entries in a sub-menu. A sub-menu entry can't execute an action.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Separator',
        p_return_value  => 'SEPARATOR',
        p_help_text     => q'~To group menu entries, a separator can be used to divide menu entries. If there is no previous or next menu entry, the separator will not be shown.~' );
    --
    l_property_id := 239;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HIDDEN_PLUGIN_NAME',
        p_prompt             => 'Plugin Name',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'PLUGIN_NAME',
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_is_query_only      => true );
    --
    l_property_id := 240;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ACTION_POSITION',
        p_prompt             => 'Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'POSITION_ID',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'PLUGIN_ACTION_POSITIONS',
        p_help_text          => q'~Determines where the action is positioned on the Template Component.~' );
    --
    l_property_id := 241;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENTITY_TITLE_SINGULAR',
        p_prompt             => 'Singular',
        p_property_type      => 'TEXT',
        p_db_column          => 'ENTITY_TITLE_SINGULAR',
        p_display_length     => 80,
        p_max_length         => 255,
        p_display_group_name => 'ENTITY_TITLE',
        p_is_translatable    => true,
        p_help_text          => q'~
<p>Define a custom title for the entity displayed by the region. Note: If nothing is defined, the generic term "row" will be used.</p>
<p>The singular and plural titles are used to show more descriptive messages to end users. Instead of a generic "No rows found" a more engaging "No customers found" message is displayed.</p>
~' );
    --
    l_property_id := 242;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENTITY_TITLE_PLURAL',
        p_prompt             => 'Plural',
        p_property_type      => 'TEXT',
        p_db_column          => 'ENTITY_TITLE_PLURAL',
        p_display_length     => 80,
        p_max_length         => 255,
        p_display_group_name => 'ENTITY_TITLE',
        p_is_translatable    => true,
        p_help_text          => q'~
<p>Define a custom title for the entity displayed by the region. Note: If nothing is defined, the generic term "rows" will be used.</p>
<p>The singular and plural titles are used to show more descriptive messages to end users. Instead of a generic "No rows found" a more engaging "No customers found" message is displayed.</p>
~' );
    --
    l_property_id := 301;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HIDDEN_COLUMNS_HAVE_GROUPS',
        p_prompt             => 'Columns have Groups',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'COLUMNS_HAVE_GROUPS',
        p_display_group_name => 'APPEARANCE',
        p_is_query_only      => true );
    --
    l_property_id := 243;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TEMPLATE_COMPONENT_TYPE',
        p_prompt             => 'Display',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TEMPLATE_COMPONENT_TYPE',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how the data should be displayed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Multiple (Report)',
        p_return_value  => 'REPORT',
        p_help_text     => q'~A report with pagination controls is rendered based on the rows returned by the region source.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Single (Partial)',
        p_return_value  => 'PARTIAL',
        p_help_text     => q'~Only one partial is rendered based on the single row the region source returns.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region Only',
        p_return_value  => 'REGION_ONLY',
        p_help_text     => q'~A single partial based on the values from the attributes.~' );
    --
    l_property_id := 244;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENTITIES_PER_PAGE',
        p_prompt             => 'Entities per Page',
        p_property_type      => 'INTEGER',
        p_db_column          => 'PLUG_QUERY_NUM_ROWS',
        p_display_length     => 3,
        p_min_value          => 1,
        p_display_group_name => 'PAGINATION',
        p_help_text          => q'~Enter the number of entities to display per page.~' );
    --
    l_property_id := 245;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALWAYS_EXECUTE',
        p_prompt             => 'Always Execute',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALWAYS_EXECUTE',
        p_display_group_name => 'VALIDATION',
        p_help_text          => q'~<p>Specify whether this validation is always executed.
If set to <strong>On</strong>, this validation is always evaluated, irrespective of the <em>Execute Validations</em> setting defined against the button that submitted the page.
If set to <strong>Off</strong>, this validation is only evaluated if the triggering button has an <em>Execute Validations</em> setting of <strong>On</strong>.</p>
<p>Note: This validation must also comply with the conditions specified before being evaluated.</p>~' );
    --
    l_property_id := 246;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ERROR_MESSAGE_DISPLAY_LOCATION',
        p_prompt             => 'Display Location',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ERROR_DISPLAY_LOCATION',
        p_display_group_name => 'ERROR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select where the error message displays for this validation.
Validation error messages display on a separate error page, or inline with the existing page.
Inline error messages display underneath the <em>Associated Item</em> label and/or in a Notification area, defined as part of the page template.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inline with Field and in Notification',
        p_return_value  => 'INLINE_WITH_FIELD_AND_NOTIFICATION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inline with Field',
        p_return_value  => 'INLINE_WITH_FIELD' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inline in Notification',
        p_return_value  => 'INLINE_IN_NOTIFICATION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'On Error Page',
        p_return_value  => 'ON_ERROR_PAGE' );
    --
    l_property_id := 247;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'ASSOCIATED_ITEM',
        p_prompt                   => 'Associated Item',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'ASSOCIATED_ITEM',
        p_display_group_name       => 'ERROR',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_page_item,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~Select the item where this validation error message displays.
If you select an item and the <em>Error message display location</em> includes "Inline with Field", the error message displays underneath the label of the specified item.
If the <em>Error message display location</em> does not include "Inline with Field", this attribute has no impact on the display of the error message.~' );
    --
    l_property_id := 248;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ASSOCIATED_COLUMN',
        p_prompt             => 'Associated Column',
        p_property_type      => 'REGION COLUMN',
        p_db_column          => 'ASSOCIATED_COLUMN',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'ERROR',
        p_help_text          => q'~Select the column associated with this page processing component.~' );
    --
    l_property_id := 249;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXECUTION_SCOPE',
        p_prompt             => 'Execution Scope',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ONLY_FOR_CHANGED_ROWS',
        p_display_group_name => 'SERVER_SIDE_CONDITION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the execution scope for this editable region validation.
Select <strong>For Created and Modified Rows</strong>, if you want this validation to be evaluated for new and updated rows in your editable region.
If you want your validation to be evaluated for every submitted row, select <strong>All Submitted Rows</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'For Created and Modified Rows',
        p_return_value  => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'All Submitted Rows',
        p_return_value  => 'N' );
    --
    l_property_id := 250;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXECUTE_CONDITION',
        p_prompt             => 'Execute Condition',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'EXEC_COND_FOR_EACH_ROW',
        p_display_group_name => 'SERVER_SIDE_CONDITION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how many times this editable region validation is executed.
If you refer to <em>Columns</em> in your condition, you must specify <strong>For Each Row</strong> in order for the condition to be evaluated for each row of the editable region.
Otherwise, set to <strong>Once</strong> to evaluate the validations one time for the region.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'For Each Row',
        p_return_value  => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Once',
        p_return_value  => 'N' );
    --
    l_property_id := 251;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'VALIDATION_REGION',
        p_prompt                   => 'Editable Region',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'TABULAR_FORM_REGION_ID',
        p_display_group_name       => 'VALIDATION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE',
        p_help_text                => q'~Select the associated region for this validation.~' );
    --
    l_property_id := 252;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_ACTION',
        p_prompt             => 'Action',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'BUTTON_ACTION',
        p_display_group_name => 'BEHAVIOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the action to be performed when this button is clicked.~',
        p_comment_text       => q'~$$$ Missing ability to create "Download Printable Report Query" button, which would create a submit button with corresponding branch to invoke a report query.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Submit Page',
        p_return_value  => 'SUBMIT',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Submit the current page with a REQUEST value equal to the Button Name.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Redirect to Page in this Application',
        p_return_value  => 'REDIRECT_PAGE',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Redirect to a page in the current application, with optional additional attributes for resetting pagination, setting the request value, clearing cache and setting item values, on the target page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Redirect to Page in a different Application',
        p_return_value  => 'REDIRECT_APP',
        p_help_text     => q'~<p>Redirect to a page in a different application, with optional additional attributes for resetting pagination, setting the request value, clearing cache and setting item values, on the target page.</p>
<p>Note: Redirecting to a page in different application relies on deep linking being enabled in the target application. To enable deep linking, go to the application's <em>Security</em> attributes and enable <em>Deep Linking</em>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Redirect to URL',
        p_return_value  => 'REDIRECT_URL',
        p_help_text     => q'~Redirect to the target URL you specify.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Defined by Dynamic Action',
        p_return_value  => 'DEFINED_BY_DA',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Does not submit the page or redirect to another page. Instead the button's behavior is defined by a Dynamic Action.~' );
    --
    /*
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Download Printable Report Query',
        p_return_value  => 'REPORT',
        p_comment_text  => q'~Download the report query.~' );
    */
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Reset Page',
        p_return_value  => 'RESET',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Reset the page by performing a complete page refresh, not a Partial Page Refresh (PPR).~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Next Page',
        p_return_value  => 'NEXT_PAGE',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Redirect to the next page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Previous Page',
        p_return_value  => 'PREVIOUS_PAGE',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Redirect to the previous page.~' );
    --
    l_property_id := 253;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INITIAL_ENTITIES_COUNT',
        p_prompt             => 'Initial Entities Count',
        p_property_type      => 'INTEGER',
        p_db_column          => 'PLUG_QUERY_NUM_ROWS',
        p_display_length     => 3,
        p_min_value          => 1,
        p_display_group_name => 'PAGINATION',
        p_help_text          => q'~Enter the number of entities to display initially. If not specified a default of 40 will be used.~' );
    --
    l_property_id := 254;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DIALOG_TEMPLATE',
        p_prompt                   => 'Dialog Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'STEP_TEMPLATE',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_page_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Select a dialog template to define the appearance and layout of this page.</p>
        <p>Dialog templates are defined in the application theme.
        When a dialog page is created, the template is automatically set to <em>Theme Default</em> which will render the page using the default page template defined in the current theme.
        Making a selection here overrides the default dialog template.</p>
        <p>Universal Theme provides the following dialog templates:
          <dl>
            <dt>Modal Dialog</dt>
              <dd>Useful for most dialog use cases.</dd>
            <dt>Wizard Modal Dialog</dt>
              <dd>Provides a streamlined user interface and is well suited for modal dialog wizards, alerts, notifications, or small forms.</dd>
          </dl>
          See Also: <a rel="noopener noreferrer" target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a>
        </p>~' );
    --
    l_property_id := 255;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OVERWRITE_NAVIGATION_LIST',
        p_prompt             => 'Override User Interface Level',
        p_property_type      => 'YES NO',
        p_db_column          => 'OVERWRITE_NAVIGATION_LIST',
        p_display_group_name => 'NAVIGATION_MENU',
        p_help_text      => q'~Specify whether the default User Interface level navigation is overwritten. This can be used to either have no navigation for the current page, or choose alternative navigation for the current page (for example to provide different navigation around a sub-section of your app).~' );
    --
    l_property_id := 256;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'NAVIGATION_LIST',
        p_prompt                => 'List',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'NAVIGATION_LIST_ID',
        p_display_group_name    => 'NAVIGATION_MENU',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_list,
        p_help_text             => q'~Select the navigation menu list utilized for navigation on this page.~' );
    --
    l_property_id := 257;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'NAVIGATION_LIST_TEMPLATE',
        p_prompt                   => 'List Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'NAVIGATION_LIST_TEMPLATE_ID',
        p_display_group_name       => 'NAVIGATION_MENU',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_list_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~Select the navigation menu list template utilized with the navigation menu list on this page.~' );
    --
    l_property_id := 258;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'REGION_ACTION_PARENT_MENU',
        p_prompt                   => 'Parent Menu',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'PARENT_MENU_ENTRY_ID',
        p_display_group_name       => 'IDENTIFICATION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_reg_act_menu_entry,
        p_lov_component_type_scope => 'PARENT',
        p_help_text                => q'~Select the parent menu in which the menu entry will be displayed.~' );
    --
    l_property_id := 259;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ACTION_TEMPLATE',
        p_prompt             => 'Template',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TEMPLATE_ID',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'PLUGIN_ACTION_TEMPLATES',
        p_help_text          => q'~Determines which template is used to render the action.~' );
    --
    l_property_id := 260;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HIDDEN_TEMPLATE_ID',
        p_prompt             => 'Hidden Template Id',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'HIDDEN_TEMPLATE_ID',
        p_display_group_name => 'IDENTIFICATION',
        p_is_query_only      => true );
    --
    l_property_id := 261;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HOME_URL',
        p_prompt             => 'Home URL',
        p_property_type      => 'LINK',
        p_db_column          => 'HOME_LINK',
        p_display_length     => 60,
        p_max_length         => 2000,
        p_display_group_name => 'NAVIGATION',
        p_help_text          => q'~Specify the application home page.~' );
    --
    l_property_id := 262;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOGIN_URL',
        p_prompt             => 'Login URL',
        p_property_type      => 'LINK',
        p_db_column          => 'LOGIN_URL',
        p_display_length     => 60,
        p_max_length         => 2000,
        p_display_group_name => 'NAVIGATION',
        p_help_text          => q'~Specify the application login page.~' );
    --
    l_property_id := 263;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'THEME',
        p_prompt                => 'Theme',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'THEME_ID',
        p_display_group_name    => 'ATTRIBUTES',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_theme,
        p_help_text             => q'~Select the theme to associate with the current application.~' );
    --
    l_property_id := 264;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GLOBAL_PAGE',
        p_prompt             => 'Global Page',
        p_property_type      => 'PAGE',
        p_db_column          => 'GLOBAL_PAGE_ID',
        p_display_group_name => 'ATTRIBUTES',
        p_help_text          => q'~Select the global page, if one is not defined.~' );
    --
    l_property_id := 265;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_CATEGORY',
        p_prompt             => 'Category',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CATEGORY',
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select under which category the plug-in is displayed in the user interface.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Component',
        p_return_value  => 'COMPONENT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Effect',
        p_return_value  => 'EFFECT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Execute',
        p_return_value  => 'EXECUTE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Initialize',
        p_return_value  => 'INIT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Miscellaneous',
        p_return_value  => 'MISC' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Navigation',
        p_return_value  => 'NAVIGATION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Notification',
        p_return_value  => 'NOTIFICATION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Style',
        p_return_value  => 'STYLE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Built-in Components',
        p_return_value  => 'NATIVE',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Application Components',
        p_return_value  => 'APPLICATION',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Theme Components',
        p_return_value  => 'THEME',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'AI',
        p_return_value  => 'AI' );
    --
    l_property_id := 266;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INCLUDE_SEARCH_BAR',
        p_prompt             => 'Include Search Bar',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_SEARCH_BAR',
        p_display_group_name => 'SEARCH_BAR',
        p_help_text          => q'~<p>A search bar is displayed above the report.  If you include the search bar, you can also fully customize which functions to display.</p>
The search bar can include the following components:
<dl>
  <dt>Search Field</dt>
    <dd>Displays a text field in the search bar used to enter search criteria.</dd>
  <dt>Finder Drop Down</dt>
    <dd>Embedded within the <em>Search Field</em>, displays a drop down list of displayed columns. If a column is selected then the search is only performed against the values in the selected column.</dd>
  <dt>Reports Select List</dt>
    <dd>Displays a list of all available reports for the user, including primary, alternate, public and private reports. This list is only displayed if a report, other than the primary report, is accessible to the user.</dd>
  <dt>Rows Per Page Selector</dt>
    <dd>Displays a select list used to select the number of rows to display per page.</dd>
  <dt>Actions Menu</dt>
    <dd>Displays the Actions menu button, which generally includes a comprehensive set of options. These options enables the end user to customize the report based upon the functions you make available.</dd>
</dl>~' );
    --
    l_property_id := 267;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_NAME',
        p_prompt             => 'Column Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'DB_COLUMN_NAME',
        p_display_length     => 128,
        p_max_length         => 128,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Enter the column name for this report column.~' );
    --
    l_property_id := 268;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_TYPE',
        p_prompt             => 'Data Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'COLUMN_TYPE',
        p_display_length     => 32,
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Enter the data type for the report column.~' );
    --
    l_property_id := 269;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'IR_COLUMN_GROUP',
        p_prompt                   => 'Group',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'GROUP_ID',
        p_display_group_name       => 'LAYOUT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_ir_column_group,
        p_lov_component_type_scope => 'PARENT',
        p_help_text                => q'~Select the group for this column. Groups are used to display columns in logical groups in the Single Row View.~' );
    --
    l_property_id := 270;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_BY_DEFAULT',
        p_prompt             => 'Show by Default',
        p_property_type      => 'YES NO',
        p_db_column          => 'DISPLAY_IN_DEFAULT_RPT',
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~Specify whether or not this column displays in the report by default.~' );
    --
    l_property_id := 271;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IR_COLUMN_DISPLAY_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SUPPORTED UI',
        p_db_column          => 'DISPLAY_TEXT_AS',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'PLUGINS',
        p_help_text          => q'~<p>Select the relevant column display type to define how column values are displayed. The following types are supported:</p>
#NATIVE_PLUGINS#
<p>Depending on your application configuration, you may also have additional plug-ins available here. The following plug-ins are installed within this application's shared components:</p>
#CUSTOM_PLUGINS#~' );
    --
    l_property_id := 272;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_HEADING',
        p_prompt             => 'Heading',
        p_property_type      => 'TEXT',
        p_db_column          => 'REPORT_LABEL',
        p_display_length     => 50,
        p_max_length         => 4000,
        p_display_group_name => 'HEADING',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the report column heading text.~' );
    --
    l_property_id := 273;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SYNC_FORM_LABEL',
        p_prompt             => 'Use Column Heading',
        p_property_type      => 'YES NO',
        p_db_column          => 'SYNC_FORM_LABEL',
        p_display_group_name => 'SINGLE_ROW_VIEW',
        p_help_text          => q'~Specify this attribute if you want to use the column heading text as the label in the Detail View.~' );
    --
    l_property_id := 274;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SINGLE_ROW_VIEW_LABEL',
        p_prompt             => 'Label',
        p_property_type      => 'TEXT',
        p_db_column          => 'COLUMN_LABEL',
        p_display_length     => 50,
        p_max_length         => 4000,
        p_display_group_name => 'SINGLE_ROW_VIEW',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the column label to use in the Single Row View.~' );
    --
    l_property_id := 275;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HEADING_ALIGNMENT',
        p_prompt             => 'Alignment',
        p_property_type      => 'PILL BUTTONS',
        p_db_column          => 'HEADING_ALIGNMENT',
        p_display_group_name => 'HEADING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the heading alignment. Note that your alignment selection must be supported by the selected report template.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'start',
        p_return_value  => 'LEFT',
        p_icon          => 'icon-align-start' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'center',
        p_return_value  => 'CENTER',
        p_icon          => 'icon-align-center' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'end',
        p_return_value  => 'RIGHT',
        p_icon          => 'icon-align-end' );
    --
    l_property_id := 276;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_ALIGNMENT',
        p_prompt             => 'Column Alignment',
        p_property_type      => 'PILL BUTTONS',
        p_db_column          => 'COLUMN_ALIGNMENT',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the column display alignment. Note that your alignment selection must be supported by the selected report template.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'start',
        p_return_value  => 'LEFT',
        p_icon          => 'icon-align-start' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'center',
        p_return_value  => 'CENTER',
        p_icon          => 'icon-align-center' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'end',
        p_return_value  => 'RIGHT',
        p_icon          => 'icon-align-end' );
    --
    l_property_id := 277;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_HIDE',
        p_prompt             => 'Hide',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_HIDE',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can hide this column.~' );
    --
    l_property_id := 278;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_SORT',
        p_prompt             => 'Sort',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_SORTING',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can sort this column.~' );
    --
    l_property_id := 279;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_FILTER',
        p_prompt             => 'Filter',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_FILTERING',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can filter this column.~' );
    --
    l_property_id := 280;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_HIGHLIGHT',
        p_prompt             => 'Highlight',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_HIGHLIGHTING',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can highlight this column.~' );
    --
    l_property_id := 281;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_CONTROL_BREAK',
        p_prompt             => 'Control Break',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_CTRL_BREAKS',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can utilize this column in a control break.~' );
    --
    l_property_id := 282;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_AGGREGATE',
        p_prompt             => 'Aggregate',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_AGGREGATIONS',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can aggregate this column.~' );
    --
    l_property_id := 283;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_COMPUTE',
        p_prompt             => 'Compute',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_COMPUTATIONS',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can utilize this column in a computational column they define.~' );
    --
    l_property_id := 284;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_CHART',
        p_prompt             => 'Chart',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_CHARTING',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can use this column within a chart.~' );
    --
    l_property_id := 285;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_GROUP_BY',
        p_prompt             => 'Group By',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_GROUP_BY',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can group by this column.~' );
    --
    l_property_id := 286;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IR_COLUMN_FILTER_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'RPT_SHOW_FILTER_LOV',
        p_display_group_name => 'COLUMN_FILTER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how to derive the filters provided in the report column drop down list.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'N',
        p_help_text     => q'~There is no column filter provided for this report.~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Default Based on Column Type',
        p_return_value  => 'D',
        p_help_text     => q'~STRING and NUMBER columns derive the list of values from distinct column values. DATE columns derive the list of values from predefined date ranges.~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Defined List of Values to Filter Exact Match',
        p_return_value  => 'S',
        p_help_text     => q'~Derive the list of values from a defined list of values SQL query to create an equal match filter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Defined List of Values to Filter Word Contains',
        p_return_value  => 'C',
        p_help_text     => q'~Derive the list of values from a defined list of values SQL query to create a contains filter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Named List of Values to Filter Exact Match',
        p_return_value  => '1',
        p_help_text     => q'~Derive the list of values from the named list of values to create an equal filter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Named List of Values to Filter Word Contains',
        p_return_value  => '2',
        p_help_text     => q'~Derive the list of values from the named list of values to create a contains filter.~' );
    --
    l_property_id := 287;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_AS_DISABLED',
        p_prompt             => 'Show as Disabled',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_AS_DISABLED',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Specify whether to render the button or menu entries as <strong>disabled</strong> instead of hiding them if the entered row-level condition evaluates to FALSE.</p>
<p>Setting this attribute to <strong>On></strong> improves layout stability and guides end-users on which actions are available.</p>~' );
    --
    l_property_id := 288;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REPORT_FILTER_DATE_RANGES',
        p_prompt             => 'Date Ranges',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'RPT_FILTER_DATE_RANGES',
        p_display_group_name => 'COLUMN_FILTER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the list of values date restrictions.
For date columns, the list of values can display past time, future time, or both in the filter for the report column drop down list.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'All',
        p_return_value  => 'ALL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Past',
        p_return_value  => 'PAST' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Future',
        p_return_value  => 'FUTURE' );
    --
    l_property_id := 289;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HTML_EXPRESSION',
        p_prompt             => 'HTML Expression',
        p_property_type      => 'HTML',
        p_db_column          => 'COLUMN_HTML_EXPRESSION',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
  <dt>Change the background and text colors</dt>
    <dd><pre>&lt;span style="background-color:yellow; color:red;">#EMPLOYEE_STATUS#&lt;/span></pre></dd>
  <dt>Use Heading 2</dt>
    <dd><pre>&lt;h2>#EMPLOYEE_NAME#&lt;/h2></pre></dd>
  <dt>Use a dynamic class from the SQL query</dt>
    <dd><pre>&lt;span class="#COLUMN_CLASS#">#EMPLOYEE_STATUS#&lt;/span></pre><br>
    The <code>#COLUMN_CLASS#</code> and <code>#EMPLOYEE_STATUS#</code> substitutions in this example are columns selected in the report SQL query.</dd>
  <dt>Show an image, and a tooltip on hover</dt>
    <dd><pre>&lt;img src="#IMAGE_NAME#" title="#EMPLOYEE_NAME#"&gt;</pre></dd>
  <dt>Loop over a comma separated list of values</dt>
    <dd><pre>&lt;ul>{loop "," TAGS/}&lt;li>&APEX$ITEM.&lt;/li>{endloop/}&lt;/ul></pre></dd>
  <dt>Use an "if" directive for a column with a quoted identifier</dt>
    <dd><pre>{if Mixed Case Name/}&lt;strong>#"Mixed Case Name"#&lt;/strong>{endif/}</pre></dd>
</dl>~',
        p_display_group_name => 'COLUMN_FORMATTING',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter HTML expressions to be shown in this column. Use <code>#COLUMN#</code> syntax to show column values in HTML.</p>
  <p>If a column name is a quoted identifier, use #"COLUMN"# syntax.</p> ~' );
    --
    l_property_id := 290;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINK_TEXT',
        p_prompt             => 'Link Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'COLUMN_LINKTEXT',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'LINK',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the HTML text to be shown as a link. Use an image tag to display images, or pick from the list of default images.~' );
    --
    l_property_id := 291;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINK_ATTRIBUTES',
        p_prompt             => 'Link Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'COLUMN_LINK_ATTR',
        p_display_length     => 62,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
<dt>Open the link in a new window</dt>
<dd><pre>target="_blank"</pre></dd>
<dt>Show a tooltip on hover</dt>
<dd><pre>title="Click to edit"</pre></dd>
</dl>~',
        p_display_group_name => 'LINK',
        p_help_text          => q'~Enter additional column link attributes to be included in the <code>&lt;a href=...&gt;</code> tag, including link target, classes or styles.~' );
    --
    l_property_id := 292;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IR_PAGINATION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PAGINATION_TYPE',
        p_display_group_name => 'PAGINATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the pagination type for this report. Often only a certain number of rows of a report display on a page.
In order to include additional rows, the application end user must to navigate to the next page of the report.</p>
<p>Pagination provides the end user with information about the number of rows and the current position within the result set.</p>
<p>Pagination can be shown above or below the report (or both) and can be positioned on the left or right.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Ranges X to Y of Z',
        p_return_value  => 'ROWS_X_TO_Y_OF_Z' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Ranges X to Y',
        p_return_value  => 'ROWS_X_TO_Y' );
    --
    l_property_id := 293;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGINATION_DISPLAY_POSITION',
        p_prompt             => 'Display Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PAGINATION_DISPLAY_POSITION',
        p_display_group_name => 'PAGINATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select where the report pagination displays.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bottom - Left',
        p_return_value  => 'BOTTOM_LEFT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bottom - Right',
        p_return_value  => 'BOTTOM_RIGHT',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top - Left',
        p_return_value  => 'TOP_LEFT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top - Right',
        p_return_value  => 'TOP_RIGHT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top and Bottom - Left',
        p_return_value  => 'TOP_AND_BOTTOM_LEFT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top and Bottom - Right',
        p_return_value  => 'TOP_AND_BOTTOM_RIGHT',
        p_is_quick_pick => 'Y' );
    --
    l_property_id := 294;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_NULL_VALUES_AS',
        p_prompt             => 'Show Null Values as',
        p_property_type      => 'TEXT',
        p_db_column          => 'SHOW_NULLS_AS',
        p_display_length     => 16,
        p_max_length         => 255,
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Enter the text you want to display for null columns.~' );
    --
    l_property_id := 295;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAXIMUM_ROW_COUNT',
        p_prompt             => 'Maximum Rows to Process',
        p_property_type      => 'INTEGER',
        p_db_column          => 'MAX_ROW_COUNT',
        p_min_value          => 1,
        p_display_group_name => 'PERFORMANCE',
        p_help_text          => q'~<p>Enter the maximum number of rows which can be processed by the query. If the maximum number of rows to be processed exceeds the limit, then an error message will be displayed instead of data.
A custom message can be defined by specifying a message in <strong>More Data Found</strong>.</p>
<p>This attribute is to safeguard against end users performing actions, such as sorts or aggregations, on all the records in very large tables or views, which might not be performant.
Instead, the number of records being processed must first be reduced by adding additional filters.</p>~' );
    --
    l_property_id := 296;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'IR_COLUMN_ACTION_PARENT_MENU',
        p_prompt                   => 'Parent Menu',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'PARENT_MENU_ENTRY_ID',
        p_display_group_name       => 'IDENTIFICATION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_ir_act_menu_entry,
        p_lov_component_type_scope => 'PARENT',
        p_help_text                => q'~Select the parent menu in which the menu entry will be displayed.~' );
    --
    l_property_id := 297;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_prompt             => 'When No Data Found',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'NO_DATA_FOUND_MESSAGE',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'MESSAGES',
        p_is_translatable    => true,
        p_help_text          => q'~Enter a text message to display if the query does not return any rows.~' );
    --
    l_property_id := 298;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NO_DATA_FOUND_ICON_CLASSES',
        p_prompt             => 'No Data Found Icon',
        p_property_type      => 'ICON',
        p_db_column          => 'NO_DATA_FOUND_ICON_CLASSES',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
<dt>Show an arrow pointing right</dt>
<dd><pre>fa-chevron-right</pre></dd>
</dl>~',
        p_display_group_name => 'MESSAGES',
        p_lov_type           => 'DISTINCT',
        p_help_text          => q'~<p>Enter the classes for the icon you want to add to the component. You may add multiple classes by separating them with spaces.</p>
        <p>If your theme uses Font APEX then review the <a rel="noopener noreferrer" target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a> to view available icons and modifiers.</p>~',
        p_comment_text       => '$$$ CSS class names are depending on the theme. Different icon classes are supported. For new universal theme it is http://fontawesome.io/icons/ we should mention something in the help.'  );
    --
    l_property_id := 302;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SAVE_PUBLIC_REPORT_AUTHORIZATION',
        p_prompt                => 'Save Public Report Authorization',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'SAVE_RPT_PUBLIC_AUTH_SCHEME',
        p_display_group_name    => 'ACTIONS_MENU',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~Select an authorization scheme to restrict who can save public report definitions.
To enable an end user to save a public report, this authorization scheme must evaluate to TRUE.
If no authorization scheme is provided then reports may be saved by any user.~',
        p_comment_text          => q'~$$$ should we put it into display group SECURITY?~' );
    --
    l_property_id := 306;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_BUTTON_LABEL',
        p_prompt             => 'Search Button Label',
        p_property_type      => 'TEXT',
        p_db_column          => 'SEARCH_BUTTON_LABEL',
        p_display_length     => 30,
        p_max_length         => 4000,
        p_display_group_name => 'SEARCH_BAR',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the text for the search button label.~' );
    --
    l_property_id := 307;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAXIMUM_ROWS_PER_PAGE',
        p_prompt             => 'Maximum Rows Per Page',
        p_property_type      => 'TEXT',
        p_db_column          => 'MAX_ROWS_PER_PAGE',
        p_display_length     => 7,
        p_max_length         => 4000,
        p_display_group_name => 'SEARCH_BAR',
        p_help_text          => q'~Enter the maximum number to display in the Rows Per Page selector.~',
        p_comment_text       => q'~$$$ should be number, but is a string in the data model~' );
    --
    l_property_id := 308;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DOWNLOAD_FORMATS',
        p_prompt             => 'Formats',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'DOWNLOAD_FORMATS',
        p_display_group_name => 'DOWNLOAD',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Check which download formats users can utilize to download the currently displayed columns.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CSV',
        p_return_value  => 'CSV' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML',
        p_return_value  => 'HTML' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Excel',
        p_return_value  => 'XLSX' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PDF',
        p_return_value  => 'PDF' );
    --
    --
    l_property_id := 309;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'CSV_SEPARATOR',
        p_prompt                     => 'CSV Separator',
        p_property_type              => 'TEXT',
        p_db_column                  => 'CSV_OUTPUT_SEPARATOR',
        p_display_length             => 1,
        p_max_length                 => 2,
        p_display_group_name         => 'DOWNLOAD',
        p_help_text                  => q'~Enter a column separator. If no value is entered, a comma or semicolon is used depending on your current NLS settings. Use <code>\t</code> to indicate the TAB character.~',
        p_validation_plsql_ret_error => q'~begin if length( p_value ) = 1 or p_value = '\t' then return null; else return wwv_flow_lang.message( 'PD.ERROR.SEPARATOR_MUST_BE_ONE_CHAR' ); end if; end;~' );

    --
    l_property_id := 310;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CSV_ENCLOSED_BY',
        p_prompt             => 'CSV Enclosed By',
        p_property_type      => 'TEXT',
        p_db_column          => 'CSV_OUTPUT_ENCLOSED_BY',
        p_display_length     => 1,
        p_max_length         => 1,
        p_display_group_name => 'DOWNLOAD',
        p_help_text          => q'~Enter a delimiter character to delineate the starting and ending boundary of a data value. The default delimiter is double quotation marks.~' );
    --
    l_property_id := 311;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DOWNLOAD_FILENAME',
        p_prompt             => 'Filename',
        p_property_type      => 'TEXT',
        p_db_column          => 'DOWNLOAD_FILENAME',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'DOWNLOAD',
        p_help_text          => q'~Enter the filename for the document when downloaded. Do not specify a file extension. The extension is added automatically. If you leave this attribute blank, the region name is used as the file name.~' );
    --
    l_property_id := 312;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IR_LINK_COLUMN',
        p_prompt             => 'Link Column',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SHOW_DETAIL_LINK',
        p_display_group_name => 'LINK',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the link column type for this report.
If you select the link column, it always displays as the first column in the report and cannot be hidden by the user.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Link to Single Row View',
        p_return_value  => 'Y',
        p_help_text     => q'~The end user is directed to a page which shows the column values for the specified row. What and how columns display is governed by various report and column attributes.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Link to Custom Target',
        p_return_value  => 'C',
        p_help_text     => q'~The end user is directed to another page based on the target URL you enter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Exclude Link Column',
        p_return_value  => 'N',
        p_help_text     => q'~The link column is not displayed.~' );
    --
    l_property_id := 313;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_EXCLUDE_NULL_VALUES',
        p_prompt             => 'Exclude Null Values',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_EXCLUDE_NULL_VALUES',
        p_display_group_name => 'SINGLE_ROW_VIEW',
        p_help_text          => q'~Specify whether null columns are hidden on the Single Record View.~' );
    --
    l_property_id := 314;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_HIDE_EXTRA_COLUMNS',
        p_prompt             => 'Only Displayed Columns',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_HIDE_EXTRA_COLUMNS',
        p_display_group_name => 'SINGLE_ROW_VIEW',
        p_help_text          => q'~Specify whether only those columns currently displayed are displayed in the Single Record View. If you specify <strong>Off</strong> then non displayed report columns may also be shown on the Single Record View.~' );
    --
    l_property_id := 315;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UNIQUELY_IDENTIFY_ROWS_BY',
        p_prompt             => 'Uniquely Identify Rows by',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'UNIQUELY_IDENTIFY_ROWS_BY',
        p_is_query_only      => true,
        p_display_group_name => 'LINK',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of column used to identify the current row when utilizing the link column.
By default, <strong>ROWID</strong> is used to uniquely identify rows in a report. However, you can also utilize another column by selecting <strong>Unique Column</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'ROWID',
        p_return_value  => 'ROWID' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Unique Column',
        p_return_value  => 'COLUMN' );
    --
    l_property_id := 316;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UNIQUE_COLUMN',
        p_prompt             => 'Unique Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BASE_PK1',
        p_column_data_types  => 'VARCHAR2:ROWID',
        p_display_group_name => 'LINK',
        p_help_text          => q'~<p>Select the first column used to uniquely identify rows for this component.</p>
<p><strong>ROWID</strong> is also included in the list of available columns for backward compatibility.</p>
<p>Note: For an interactive report with the <em>Link Column</em> attribute set to <strong>Link to Single Row View</strong>, only a single unique column can be selected. Other components support the selection of up to three columns.</p>~' );
    --
    l_property_id := 317;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UNIQUE_COLUMN_2',
        p_prompt             => 'Unique Column 2',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BASE_PK2',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'LINK',
        p_help_text          => q'~<p>Select the second column to be used to uniquely identify rows for this component. Use this attribute when your table has a two-part primary key.</p>
<p><strong>ROWID</strong> is also included in the list of available columns for backward compatibility.</p>~' );
    --
    l_property_id := 318;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UNIQUE_COLUMN_3',
        p_prompt             => 'Unique Column 3',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BASE_PK3',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'LINK',
        p_help_text          => q'~<p>Select the third column to be used to uniquely identify rows for this component. Use this attribute when your table has a three-part primary key.</p>
<p><strong>ROWID</strong> is also included in the list of available columns for backward compatibility.</p>
<p>Note: If your table's primary key has more than three columns, then you need to uniquely identify rows by <strong>ROWID</strong>.~' );
    --
    l_property_id := 319;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINK_ICON',
        p_prompt             => 'Link Icon',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'DETAIL_LINK_TEXT',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'LINK',
        p_help_text          => q'~Enter the HTML to be used for the link. Use an image tag to display images, or pick from the list of default images.  If not defined, a default icon is used.~' );
    --
    l_property_id := 320;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'LINK_AUTHORIZATION_SCHEME',
        p_prompt                => 'Authorization Scheme',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'DETAIL_LINK_AUTH_SCHEME',
        p_display_group_name    => 'LINK',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~Select an authorization scheme to associate with the Link Column. This authorization scheme must evaluate to TRUE in order for the Link Column to be rendered in the report.~' );
    --
    l_property_id := 321;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REPORT_ALIAS',
        p_prompt             => 'Region Alias',
        p_property_type      => 'TEXT',
        p_db_column          => 'ALIAS',
        p_display_length     => 32,
        p_max_length         => 255,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Enter an alphanumeric alias for this interactive report region.
The alias must be unique within the application.
You can use an alias to reference an interactive report region in your custom API call.
For example, you can write a function to return the <code>INTERACTIVE_REPORT_ID</code> by querying the <code>ALIAS</code> column in the <code>APEX_APPLICATION_PAGE_IR</code> view.
Since the <code>INTERACTIVE_REPORT_ID</code> value can change when you export or import the application to different instances, referencing interactive report regions using an alias may be preferable.~' );
    --
    l_property_id := 322;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'REPORT_ID_ITEM',
        p_prompt                   => 'Report ID Item',
        p_property_type            => 'ITEM',
        p_db_column                => 'REPORT_ID_ITEM',
        p_display_length           => 32,
        p_max_length               => 255,
        p_display_group_name       => 'ADVANCED',
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Select a page or application item whose value stores the saved report ID.
Interactive report uses this item value to link to a saved report.
For example, you can define list of saved reports with links with defined item name and saved report ID as its value to link to a saved default reports, public or private reports.
The saved report IDs can be retrieved from the <code>APEX_APPLICATION_PAGE_IR_RPT</code> view.~' );
    --
    l_property_id := 323;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EMAIL_FROM_ADDRESS',
        p_prompt             => 'Email From Address',
        p_property_type      => 'TEXT',
        p_db_column          => 'EMAIL_FROM',
        p_display_length     => 30,
        p_max_length         => 255,
        p_examples           => q'~<ul>
<li><code>john.doe@abc.com</code></li>
<li><code>&amp;MY_APP_EMAIL_FROM.</code></li>
</ul>~',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Enter a valid email address to use as the <em>From</em> address when sending email from this report. Emails are sent from this report for Downloads of type Email and for Subscriptions.</p>
<p>The value can be a literal string containing a valid email address or a static substitution reference defined in the application using substitution syntax.
Using a page or application item substitution is NOT recommended because it only works in email download and causes any subscription emails to fail since these items can not be accessed outside of a valid session.
Subscriptions are sent directly from the &PRODUCT_NAME. engine and not from a user session.</p>~',
        p_comment_text       => q'~$$$ should we have a type EMAIL? -> used in a few places, otherwise we have to use a PL/SQL validation or do not verify it at all~' );
    --
    l_property_id := 324;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_ENABLED',
        p_prompt             => 'Show',
        p_property_type      => 'YES NO',
        p_db_column          => 'ICON_VIEW_ENABLED_YN',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Specify whether the Icon View is enabled. Selecting <strong>On</strong> adds a View Icons icon to the Search bar for interactive reports, or to the interactive grid View button, enabling users to access this view.~' );
    --
    l_property_id := 325;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USE_CUSTOM_ICON_VIEW',
        p_prompt             => 'Custom',
        p_property_type      => 'YES NO',
        p_db_column          => 'ICON_VIEW_USE_CUSTOM',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Specify whether you wish to define a custom link for the Icon View. This option provides greater flexibility in defining the content of the Icon View, including the ability to utilize more than one column.~' );
    --
    l_property_id := 326;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMNS_PER_ROW',
        p_prompt             => 'Columns Per Row',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ICON_VIEW_COLUMNS_PER_ROW',
        p_display_group_name => 'ICON_VIEW',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the number of icons to display per row in Icon View. A value of 5 displays 5 icons per row of the report.~',
        p_comment_text       => q'~$$$ should this really be a LOV, why not a one digit INTEGER?~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '1',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '2',
        p_return_value  => '2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '3',
        p_return_value  => '3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '4',
        p_return_value  => '4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '5',
        p_return_value  => '5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '6',
        p_return_value  => '6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '7',
        p_return_value  => '7' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '8',
        p_return_value  => '8' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '9',
        p_return_value  => '9' );
    --
    l_property_id := 327;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_LINK_COLUMN',
        p_prompt             => 'Link Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'ICON_VIEW_LINK_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_examples           => q'~<dl>
<dt>Examine the <code>LINK</code> column</dt>
<dd><pre>
select ename,
       job,
       'F?P=&APP_ID.:2:' || :APP_SESSION || '::::P2_ID:' || empno as link,
       '#IMAGE_PREFIX#menu/user_red_64.gif' as image
  from emp
</pre></dd>
</dl>~',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Select the report column that returns the link target of the icon.~' );
    --
    l_property_id := 328;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_IMAGE_SOURCE_COLUMN',
        p_prompt             => 'Image Source Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'ICON_VIEW_IMG_SRC_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_examples           => q'~<dl>
<dt>Examine the <code>IMAGE</code> column</dt>
<dd><pre>
select ename,
       job,
       'F?P=&APP_ID.:2:' || :APP_SESSION || '::::P2_ID:' || empno as link,
       '#IMAGE_PREFIX#menu/user_red_64.gif' as image
  from emp
</pre></dd>
</dl>~',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Select the report column that returns the image source.~' );
    --
    l_property_id := 329;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_LABEL_COLUMN',
        p_prompt             => 'Label Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'ICON_VIEW_LABEL_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_examples           => q'~<dl>
<dt>Examine the <code>ENAME</code> column</dt>
<dd><pre>
select ename,
       job,
       'F?P=&APP_ID.:2:' || :APP_SESSION || '::::P2_ID:' || empno as link,
       '#IMAGE_PREFIX#menu/user_red_64.gif' as image
  from emp
</pre></dd>
</dl>~',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Select the report column that returns the image label.~' );
    --
    l_property_id := 330;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_IMAGE_ATTRIBUTES',
        p_prompt             => 'Image Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'ICON_VIEW_IMG_ATTR_TEXT',
        p_display_length     => 30,
        p_max_length         => 512,
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Enter the image attributes used for the HTML IMG tag.~' );
    --
    l_property_id := 331;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_HTML_ALT_TEXT',
        p_prompt             => 'HTML ALT Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'ICON_VIEW_ALT_TEXT',
        p_display_length     => 30,
        p_max_length         => 512,
        p_display_group_name => 'ICON_VIEW',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the HTML ALT text for the image.~' );
    --
    l_property_id := 332;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_HTML_TITLE_TEXT',
        p_prompt             => 'HTML TITLE Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'ICON_VIEW_TITLE_TEXT',
        p_display_length     => 30,
        p_max_length         => 512,
        p_display_group_name => 'ICON_VIEW',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the HTML TITLE tag for the image.~' );
    --
    l_property_id := 333;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_CUSTOM_LINK',
        p_prompt             => 'Custom Link',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'ICON_VIEW_CUSTOM_LINK',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<pre>
&lt;a href="#EMP_LINK#"&gt;&lt;img src="#EMP_IMG#" title="#ENAME#" alt="#ENAME#"&gt;&lt;br&gt;#ENAME#&lt;/a&gt;
</pre>~',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Enter the column link for the Icon View. Use <code>#COLUMN_NAME#</code> substitution strings for column names as required.~' );
    --
    l_property_id := 334;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DETAIL_VIEW_ENABLED',
        p_prompt             => 'Show',
        p_property_type      => 'YES NO',
        p_db_column          => 'DETAIL_VIEW_ENABLED_YN',
        p_display_group_name => 'DETAIL_VIEW',
        p_help_text          => q'~Specify whether the Detail View is enabled. Selecting <strong>On</strong> adds a View Details icon to the Search bar for interactive reports, or to the interactive grid View button, enabling users to access this view.~' );
    --
    l_property_id := 335;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DETAIL_VIEW_BEFORE_ROWS',
        p_prompt             => 'Before Rows',
        p_property_type      => 'HTML',
        p_db_column          => 'DETAIL_VIEW_BEFORE_ROWS',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<pre>
&lt;table&gt;
</pre>~',
        p_display_group_name => 'DETAIL_VIEW',
        p_help_text          => q'~Enter the HTML to be displayed before report rows.~' );
    --
    l_property_id := 336;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DETAIL_VIEW_FOR_EACH_ROW',
        p_prompt             => 'For Each Row',
        p_property_type      => 'HTML',
        p_db_column          => 'DETAIL_VIEW_FOR_EACH_ROW',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<pre>
&lt;tr&gt;&lt;td align="right"&gt;#ENAME_LABEL#:&lt;/td&gt;&lt;td&gt;#ENAME#&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td align="right"&gt;#JOB_LABEL#:&lt;/td&gt;&lt;td&gt;#JOB#&lt;/td&gt;&lt;/tr&gt;
</pre>~',
        p_display_group_name => 'DETAIL_VIEW',
        p_help_text          => q'~Enter the body for report rows in the Detail View. Use <code>#COLUMN_NAME#</code> substitution strings for column names and column labels.~' );
    --
    l_property_id := 337;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DETAIL_VIEW_AFTER_ROWS',
        p_prompt             => 'After Rows',
        p_property_type      => 'HTML',
        p_db_column          => 'DETAIL_VIEW_AFTER_ROWS',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<pre>
&lt;/table&gt;
</pre>~',
        p_display_group_name => 'DETAIL_VIEW',
        p_help_text          => q'~Enter the HTML to be displayed after report rows.~' );
    --
    l_property_id := 338;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_FILTER',
        p_prompt             => 'Filter',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_FILTER',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define filters on this report.~' );
    --
    l_property_id := 339;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_SELECT_COLUMNS',
        p_prompt             => 'Select Columns',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_SELECT_COLUMNS',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can use <strong>Select Columns</strong> in the Actions menu to change the columns displayed in this report. User can select (or show), deselect (or hide) and reorder multiple columns using this option.~' );
    --
    l_property_id := 340;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_ROWS_PER_PAGE',
        p_prompt             => 'Rows Per Page',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_ROWS_PER_PAGE',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can change the number of rows displayed for this report.~' );
    --
    l_property_id := 341;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_SORT',
        p_prompt             => 'Sort',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_SORT',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define sort columns for this report.~' );
    --
    l_property_id := 342;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_CONTROL_BREAK',
        p_prompt             => 'Control Break',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_CONTROL_BREAK',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define control breaks for this report.~' );
    --
    l_property_id := 343;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_HIGHLIGHT',
        p_prompt             => 'Highlight',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_HIGHLIGHT',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define highlights for this report.~' );
    --
    l_property_id := 344;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_COMPUTATION',
        p_prompt             => 'Compute',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_COMPUTATION',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define computational columns for this report.~' );
    --
    l_property_id := 345;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_AGGREGATE',
        p_prompt             => 'Aggregate',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_AGGREGATE',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define aggregates for this report.~' );
    --
    l_property_id := 346;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_CHART',
        p_prompt             => 'Chart',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_CHART',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define charts for this report.~' );
    --
    l_property_id := 347;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_NOTIFY',
        p_prompt             => 'Subscription',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_NOTIFY',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define subscription settings for this report.~' );
    --
    l_property_id := 348;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_GROUP_BY',
        p_prompt             => 'Group By',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_GROUP_BY',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end,users can define group by break-downs for this report.~' );
    --
    l_property_id := 349;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_PIVOT',
        p_prompt             => 'Pivot',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_PIVOT',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define pivot break-downs for this report.~' );
    --
    l_property_id := 350;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_FLASHBACK',
        p_prompt             => 'Flashback',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_FLASHBACK',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~<p>Specify whether end users can utilize flashback queries for this report.</p>
<p>Flashback queries utilize the Oracle Flashback Technology and Database Point-in-Time Recovery to view data as it existed at a previous point in time. Users can only query this data, but can not rewind any data changes. How far back in time they can successfully perform a flashback query is determined by when the redo log files were last switched within the Oracle database, as this technology utilizes the RMAN backup.~' );
    --
    l_property_id := 351;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_RESET',
        p_prompt             => 'Reset',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_RESET',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~<p>Specify whether end users can reset their reports from the Actions menu.</p>
<p>Resetting the report reverts all customizations made by the user, or specified by the calling URL, and displays the Primary Report.</p>~' );
    --
    l_property_id := 352;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_DOWNLOAD',
        p_prompt             => 'Download',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_DOWNLOAD',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can download the report to one of the download formats specified.~' );
    --
    l_property_id := 353;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_HELP',
        p_prompt             => 'Help',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_HELP',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~<p>Specify whether end users can invoke the built-in help modal dialog for interactive reports.</p>
<p>The help dialog only outlines those options available to the current user.</p>~' );
    --
    l_property_id := 354;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_SAVE_REPORTS',
        p_prompt             => 'Save Report',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_REPORT_SAVING',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~<p>Specify whether end users can save their current report definition as a <em>Private</em> report.</p>
<p>Private reports are displayed in a select list of available reports in the Search Bar, and are only displayed to the user who saved the report, providing they are authenticated.
The option on the Actions menu is only available to authenticated users.</p>~' );
    --
    l_property_id := 355;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_SAVE_PUBLIC_REPORT',
        p_prompt             => 'Save Public Report',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_SAVE_RPT_PUBLIC',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~<p>Specify whether end users can save their current report definition as a <em>Public</em> report.</p>
<p>Public reports are displayed in a select list of available reports in the Search Bar, and are displayed to everyone.
The option on the Actions menu is only available to authenticated users and is further restricted if you also populate the <strong>Save Public Report Authorization</strong>.</p>~' );
    --
    l_property_id := 356;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_SAVE_REPORT_CATEGORIES',
        p_prompt             => 'Save Report Categories',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_REPORT_CATEGORIES',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can save report categories.~',
        p_comment_text       => q'~$$$ what does this property do?~' );
    --
    l_property_id := 357;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_FINDER_DROP_DOWN',
        p_prompt             => 'Finder Drop Down',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_FINDER_DROP_DOWN',
        p_display_group_name => 'SEARCH_BAR',
        p_help_text          => q'~Specify whether the Finder drop down is included at the beginning of the Search field within the search bar.
The Finder drop down is a list of columns that enables users to limit their search to a specific column.~' );
    --
    l_property_id := 358;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_DISPLAY_ROW_COUNT',
        p_prompt             => 'Rows Per Page Selector',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_DISPLAY_ROW_COUNT',
        p_display_group_name => 'SEARCH_BAR',
        p_help_text          => q'~Specify whether a separate drop down row selector is included within the search bar.
You should not select both this attribute and <strong>Rows Per Page</strong>.~' );
    --
    l_property_id := 360;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_SEARCH_TEXTBOX',
        p_prompt             => 'Search Field',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_SEARCH_TEXTBOX',
        p_display_group_name => 'SEARCH_BAR',
        p_help_text          => q'~Specify whether the search field is included within the search bar.~' );
    --
    l_property_id := 361;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_ACTIONS_MENU',
        p_prompt             => 'Include Actions Menu',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_ACTIONS_MENU',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether the <em>Actions</em> menu is included within the Search Bar.~' );
    --
    l_property_id := 362;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'SHOW_REPORTS_SELECT_LIST',
        p_prompt                     => 'Reports Select List',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'TABS',
        p_prop_type_yesno_override_n => 'NONE',
        p_db_column                  => 'REPORT_LIST_MODE',
        p_display_group_name         => 'SEARCH_BAR',
        p_help_text                  => q'~<p>Specify whether the Reports select list displays in the search bar.</p>
<p>The Reports select list only displays if a report, other than the primary report, is accessible to the user.</p>~' );
    --
    l_property_id := 363;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINK_TARGET',
        p_prompt             => 'Target',
        p_property_type      => 'LINK',
        p_db_column          => 'DETAIL_LINK',
        p_display_group_name => 'LINK',
        p_help_text          => q'~<p>Click the Target to invoke a modal dialog. You can enter a custom target to be called when the Link Column is clicked.</p>
        <p>Select the appropriate type in Link Builder - Target based on your requirements:
        <dl>
        <dt>Page in this application</dt>
        <dd>Enter the following:
        <ul>
        <li>Page - enter the page number or page alias to navigate to. You can also select the page number from the select list.</li>
        <li>Set Items: Name - enter or select page items (<code>P3_ID</code>), application items (<code>LAST_PAGE</code>) or interactive report filters (<code>IR_EMPNO</code>) to be set into session state.</li>
        <li>Set Items: Value - enter or select a report column (<code>#ID#</code>), enter an application or page item (<code>&P2_EMPNO.</code>), or enter a static value (<code>2</code>).</li>
        <li>Clear Cache - enter a comma-delimited list of page numbers (<code>2,3</code>), items (<code>P3_EMPNO,LAST_PAGE</code>), and report settings to be cleared. To reset pagination for a report enter <code>RP</code>. To clear or reset interactive report settings enter <code>CIR</code> or <code>RIR</code>.</li>
        <li>Reset Pagination - select Yes to reset pagination, back to the first set of records, for reports on the target page. This has the same affect as passing <code>RP</code> in Clear Cache.</li>
        <li>Advanced: Request - enter the request to be used.</li>
        </ul>
        </dd>
        <dt>Page in a different application</dt>
        <dd>Enter the same attributes as listed for Page in this application, with the addition that you need to enter the application ID or application alias for Application.</dd>
        <dt>URL</dt>
        <dd>Enter the URL</dd>
        </dl></p>~' );
    --
    l_property_id := 364;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IR_SAVED_VISIBILITY',
        p_prompt             => 'Visibility',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VISIBILITY',
        p_is_query_only      => true,
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~View the saved report category, which dictates where this report displays within the Reports select List. This attribute is view only and cannot be updated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Primary Default',
        p_return_value  => 'PRIMARY_DEFAULT',
        p_help_text     => q'~Report saved by developers, that is displayed by default.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Alternative Default',
        p_return_value  => 'ALTERNATIVE_DEFAULT',
        p_help_text     => q'~Subsequent report layouts saved by developers, that end users can select.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Public',
        p_return_value  => 'PUBLIC',
        p_help_text     => q'~Report layouts saved by end users, that all other end users can select.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Private',
        p_return_value  => 'PRIVATE',
        p_help_text     => q'~Report layouts saved by end users, that only the end user who saved it can select.~' );
    --
    l_property_id := 365;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'IR_SAVED_REPORT_ALIAS',
        p_prompt                => 'Alias',
        p_property_type         => 'TEXT',
        p_db_column             => 'REPORT_ALIAS',
        p_restricted_characters => 'US_ONLY_UNDERSCORE_NO_SPACE',
        p_display_group_name    => 'IDENTIFICATION',
        p_help_text             => q'~Enter an alias for this saved report. Use this alias to define a more meaningful URL link to this specific saved report. This link can be used to link directly from elsewhere in the application.~' );
    --
    l_property_id := 366;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINK_EXAMPLE',
        p_prompt             => 'Link Example',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'LINK_EXAMPLE',
        p_is_query_only      => true,
        p_display_group_name => 'LINK',
        p_help_text          => q'~<p>View the URL link for this saved report. This attribute is view only and cannot be updated.</p>
<p>This attribute enables you to quickly copy the displayed URL. This URL can be used to link directly to this particular saved report from anywhere else in the application.</p>~' );
    --
    l_property_id := 367;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RUN_PROCESS',
        p_prompt             => 'Run Process',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PROCESS_IS_STATEFUL_Y_N',
        p_display_group_name => 'EXECUTION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the frequency that this process is executed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Once Per Session or When Reset',
        p_return_value  => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Once Per Page Visit (default)',
        p_return_value  => 'N' );
    --
    l_property_id := 368;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SUCCESS_MESSAGE',
        p_prompt             => 'Success Message',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'PROCESS_SUCCESS_MESSAGE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'SUCCESS_MESSAGE',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the text to be displayed in the "Notification" area (defined as part of the page template), when this process completes successfully.~' );
    --
    l_property_id := 369;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PROCESS_ERROR_DISPLAY_LOCATION',
        p_prompt             => 'Display Location',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ERROR_DISPLAY_LOCATION',
        p_display_group_name => 'ERROR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select where this process error message displays, when the process fails to complete successfully.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inline in Notification',
        p_return_value  => 'INLINE_IN_NOTIFICATION',
        p_help_text     => q'~The process error message is displayed in the "Notification" area (defined as part of the page template)~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'On Error Page',
        p_return_value  => 'ON_ERROR_PAGE',
        p_help_text     => q'~The Process error message is displayed on the error page.~' );
    --
    l_property_id := 370;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PROCESS_REGION',
        p_prompt                   => 'Editable Region',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'REGION_ID',
        p_display_group_name       => 'IDENTIFICATION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE',
        p_help_text                => q'~Select the region to associate with this process.~',
        p_comment_text             => q'~$$$ could this be merged with VALIDATION_REGION by putting the property into the display group Execution Options?
p_lov_component_type_scope = PAGE -> should only include tabular forms~' );
    --
    l_property_id := 371;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DA_EVENT',
        p_prompt                   => 'Event',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'EVENT_ID',
        p_display_group_name       => 'EXECUTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_da_event,
        p_lov_component_type_scope => 'PAGE',
        p_help_text                => q'~Select the appropriate dynamic action event from the available list.~' );
    --
    l_property_id := 372;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'IR_COLUMN_FILTER_LOV_SQL',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'RPT_LOV',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_display_group_name   => 'COLUMN_FILTER',
        p_examples             => q'~<dl>
<dt>To return the department name:</dt>
<dd><pre>select dname from dept order by 1</pre></dd>
</dl>~',
        p_help_text            => q'~<p>Enter a SQL query which needs to return one column. If the query returns multiple columns, only the first column is used in the list of values.</p>
<p>Entering a SQL query can improve performance in some reports, or be used to limit the values displayed.</p>~' );
    --
    l_property_id := 373;
    store_lov_type_property (
        p_name => 'LOV_TYPE' );
    --
    l_property_id := 374;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOV_STATIC_VALUES',
        p_prompt             => 'Static Values',
        p_property_type      => 'STATIC LOV',
        p_db_column          => 'LOV',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'LIST_OF_VALUES',
        p_help_text          => q'~Enter the values for this static list of values.~' );
    --
    l_property_id := 375;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TZ_DEPENDENT',
        p_prompt             => 'Timezone Aware',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'TZ_DEPENDENT',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Indicates whether or not this column is timezone aware.~' );
    --
    l_property_id := 376;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_PROC_WS_PARM_ITEM',
        p_prompt             => 'Item',
        p_property_type      => 'ITEM',
        p_db_column          => 'PARAMETER_VALUE',
        p_display_group_name => 'PARAMETER',
        p_help_text          => q'~Enter the page or application item used as the source for this parameter. You can type in the name or pick from the list of available items.~' );
    --
    l_property_id := 377;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_PROC_WS_PARM_SOURCE',
        p_prompt             => 'Source',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'MAP_TYPE',
        p_display_group_name => 'PARAMETER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the source for the parameter from the available list.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_help_text     => q'~Set to the value held in session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC',
        p_help_text     => q'~Set to the text entered into <em>Static Value</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body',
        p_return_value  => 'FUNCTION',
        p_help_text     => q'~Set to the value returned from the <em>PL/SQL Function Body</em> entered.~' );
    --
    l_property_id := 379;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_PROC_WS_PARM_VALUE',
        p_prompt             => 'Static Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'PARAMETER_VALUE',
        p_display_group_name => 'PARAMETER',
        p_help_text          => q'~Enter the value for this parameter.~' );
    --
    l_property_id := 380;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_TITLE',
        p_prompt             => 'Title',
        p_property_type      => 'TEXT',
        p_db_column          => 'CHART_TITLE',
        p_display_length     => 65,
        p_max_length         => 255,
        p_display_group_name => 'TITLE',
        p_is_translatable    => true,
        p_help_text          => q'~Enter a title to display at the top of the chart.  For gantt charts, this value is only used to define the accessible chart title.~' );
    --
    l_property_id := 381;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHANGED_BY',
        p_prompt             => 'Changed By',
        p_property_type      => 'TEXT',
        p_db_column          => 'LAST_UPDATED_BY',
        p_is_query_only      => true,
        p_display_length     => 30,
        p_display_group_name => 'AUDIT_INFORMATION',
        p_is_searchable      => false,
        p_help_text          => q'~Displays the user credentials of the developer who last updated this attribute.~' );
    --
    l_property_id := 382;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHANGED_ON',
        p_prompt             => 'Changed On',
        p_property_type      => 'TEXT',
        p_db_column          => 'LAST_UPDATED_ON',
        p_is_query_only      => true,
        p_display_length     => 30,
        p_display_group_name => 'AUDIT_INFORMATION',
        p_is_searchable      => false,
        p_help_text          => q'~Displays when this attribute was last updated.~' );
    --
    l_property_id := 383;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_PIVOT',
        p_prompt             => 'Pivot',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_PIVOT',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end user can define a pivot break-down within this report.~' );
    --
    l_property_id := 384;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SOURCE_LIST',
        p_prompt                => 'List',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'LIST_ID',
        p_display_group_name    => 'SOURCE',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_list,
        p_help_text             => q'~Select the source for this list.~' );
    --
    l_property_id := 385;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SOURCE_BREADCRUMB',
        p_prompt                => 'Breadcrumb',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'BREADCRUMB_ID',
        p_display_group_name    => 'SOURCE',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_breadcrumb,
        p_help_text             => q'~Select the breadcrumb list associated with this page.~' );
    --
    l_property_id := 386;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'LIST_TEMPLATE',
        p_prompt                   => 'List Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'LIST_TEMPLATE_ID',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_list_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Select a template to define the appearance and layout of this list.</p>
        <p>List templates are defined in the application theme.
        When a list region is created, the template is automatically set to the default list template defined in the current theme.</p>
        <p>Universal Theme provides the following list templates:
          <dl>
            <dt>Badge List</dt>
            <dt>Cards</dt>
            <dt>Links List</dt>
            <dt>Media List</dt>
            <dt>Menu Bar</dt>
            <dt>Menu Popup</dt>
            <dt>Navigation Bar</dt>
            <dt>Side Navigation Menu</dt>
            <dt>Tabs</dt>
            <dt>Top Navigation Menu</dt>
            <dt>Wizard Progress</dt>
          </dl>
          See Also: <a rel="noopener noreferrer" target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a>
        </p>~' );
    --
    l_property_id := 387;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'BREADCRUMB_TEMPLATE',
        p_prompt                   => 'Breadcrumb Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'MENU_TEMPLATE_ID',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_bc_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~Select the breadcrumb template utilized with this breadcrumb.~' );
    --
    l_property_id := 388;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'APP_ITEM_SCOPE',
        p_prompt             => 'Scope',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SCOPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the scope of this application item. Select <strong>Global</strong> if the &PRODUCT_NAME. session is shared by more than one application and the item's value should be the same for all applications.
Otherwise, select <strong>Application</strong>, which is the default scope.</p>
<p>Applications can share the same session, if their authentications have the same <em>Session Cookie Attributes</em>.
The scope attribute, of application items, has to be the same across these applications as well.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Application',
        p_return_value  => 'APP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Global',
        p_return_value  => 'GLOBAL' );
    --
    l_property_id := 389;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'LOV_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_lov,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Use this field to base this list of values on an existing list of values in this application or another application in your workspace.~' );
    --
    l_property_id := 390;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'HAS_GENERIC_COLUMNS',
        p_prompt                     => 'Use Generic Column Names',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'GENERIC_REPORT_COLUMNS',
        p_prop_type_yesno_override_n => 'DERIVED_REPORT_COLUMNS',
        p_db_column                  => 'PLUG_QUERY_OPTIONS',
        p_display_group_name         => 'SOURCE',
        p_help_text                  => q'~Specify whether column definitions are derived from the SQL query.
Doing this requires &PRODUCT_NAME. to parse the query.
If you do not want the query parsed at this time, use generic column names, which produces placeholder column definitions.~' );
    --
    l_property_id := 391;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GENERIC_COLUMN_COUNT',
        p_prompt             => 'Generic Column Count',
        p_property_type      => 'INTEGER',
        p_db_column          => 'PLUG_QUERY_MAX_COLUMNS',
        p_display_length     => 3,
        p_max_length         => 3,
        p_min_value          => 1,
        p_max_value          => 999,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~<p>Enter the maximum number of generic report columns.
Reports that use generic column names are parsed at runtime only, so the number of columns is not known when editing the report.</p>
<p>The maximum number of report columns should match the expected number of report columns.
If the actual number is smaller, the report renders with the actual number of columns.
However, if the actual number is higher than the maximum, then an error message shows at runtime.</p>~' );
    --
    l_property_id := 392;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_PROC_WS_PARM_FUNCTION',
        p_prompt             => 'PL/SQL Function Body',
        p_property_type      => 'PLSQL FUNCTION BODY VARCHAR2',
        p_db_column          => 'PARAMETER_VALUE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'PARAMETER',
        p_help_text          => q'~Enter a PL/SQL function body that returns a value used as the source for this parameter.~' );
    --
    l_property_id := 394;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'PAGE_PROC_WS_PARM_ITEMS',
        p_prompt                => 'Item(s)',
        p_property_type         => 'ITEM',
        p_multi_value_delimiter => ',',
        p_db_column             => 'PARAMETER_VALUE',
        p_display_group_name    => 'PARAMETER',
        p_help_text             => q'~<p>Enter one or more page or application item used as the destination for this parameter. For multiple items, separate each item name with a comma.</p>
<p>You can type in the name or pick from the list of available items.
If you pick from the list and there is already text entered, then a comma is placed at the end of the existing text, followed by the item name returned from the list.~' );
    --
    l_property_id := 395;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMPUTE_SUM',
        p_prompt             => 'Compute Sum',
        p_property_type      => 'YES NO',
        p_db_column          => 'SUM_COLUMN',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~For this column, specify whether the sum is computed and displays at the end of the report.
When used with break columns, the total sum and the sum on each break displays.~' );
    --
    l_property_id := 396;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_WIDTH',
        p_prompt             => 'Cell Width',
        p_property_type      => 'INTEGER',
        p_db_column          => 'REPORT_COLUMN_WIDTH',
        p_display_length     => 3,
        p_min_value          => 1,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Enter the column width in pixels.
Use this attribute when displaying reports in a browser.
Note that setting the column width must be supported by the selected report template.~' );
    --
    l_property_id := 397;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USE_AS_ROW_HEADER',
        p_prompt             => 'Value Identifies Row',
        p_property_type      => 'YES NO',
        p_db_column          => 'USE_AS_ROW_HEADER',
        p_display_group_name => 'ACCESSIBILITY',
        p_help_text          => q'~<p>Define the column value, or combination of column values that help to identify the row of data. For example for person data this could be the first and last name, for customer data this could be the customer name, and so on.</p>
<p>For regions that render tabular report data (like Classic or Interactive Reports), defining this attribute is very important for the usability of the report for users of assistive technologies like screen readers. When a screen reader user navigates to different rows of the report, the column, or columns defined as identifying the row will be announced as the row header, as soon as they move to the new row. If this is not defined, it is much harder for these users to orientate themselves when moving around the report.</p>~' );
    --
    l_property_id := 398;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CLASSIC_REPORT_COLUMN_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DISPLAY_AS',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the basis for this report column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Plain Text',
        p_return_value  => 'PLAIN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Displays the column value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Plain Text (based on List of Values)',
        p_return_value  => 'PLAIN_LOV',
        p_help_text     => q'~Displays the value returned from the list of values specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Rich Text',
        p_return_value  => 'RICH_TEXT',
        p_help_text     => q'~Renders the column using HTML or Markdown.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Link',
        p_return_value  => 'LINK',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Displays the column as a link.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Display Image',
        p_return_value  => 'IMAGE',
        p_help_text     => q'~Displays the column as an image.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Download BLOB',
        p_return_value  => 'DOWNLOAD',
        p_help_text     => q'~Displays the column as a link to download the file.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Percent Graph',
        p_return_value  => 'PCT_GRAPH',
        p_help_text     => q'~Displays the column as a percentage graph. The value retrieved must be between 0 and 100.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hidden',
        p_return_value  => 'HIDDEN_COLUMN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Does not display the column, but it is referenceable.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Display as Text (saves state)',
        p_return_value  => 'DISPLAY_AND_SAVE',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Date Picker (Classic)',
        p_return_value  => 'DATE_POPUP',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Date Picker',
        p_return_value  => 'DATE_PICKER',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Text Field',
        p_return_value  => 'TEXT',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Text Area',
        p_return_value  => 'TEXTAREA',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Select List',
        p_return_value  => 'SELECT_LIST',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Radio Group',
        p_return_value  => 'RADIOGROUP',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Hidden Field',
        p_return_value  => 'HIDDEN_FIELD',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Popup LOV',
        p_return_value  => 'POPUP',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Popup Key LOV',
        p_return_value  => 'POPUPKEY',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Simple Checkbox',
        p_return_value  => 'SIMPLE_CHECKBOX',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Row Selector',
        p_return_value  => 'ROW_SELECTOR',
        p_is_deprecated => 'Y' );
    --
    l_property_id := 399;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATE_PICKER_FORMAT_MASK',
        p_prompt             => 'Format Mask',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'COLUMN_FORMAT',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the format mask to apply to the date picker for this column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Application Date Format',
        p_return_value  => 'PICK_DATE_USING_APP_DATE_FORMAT',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Application Format Mask',
        p_return_value  => 'PICK_DATE_USING_APP_FORMAT_MASK',
        p_comment_text  => '$$$ ???? DJP: What is the difference b/n this and Application Date Format Mask' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Item Format Mask',
        p_return_value  => 'PICK_DATE_USING_FORMAT_MASK' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MM-YYYY',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY_DASH' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD.MM.YYYY',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY_DOT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD/MM/YYYY',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MM-YYYY HH:MI',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY_HH_MI_DASH' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD.MM.YYYY HH:MI',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY_HH_MI_DOT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD/MM/YYYY HH:MI',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY_HH_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MM-YYYY HH24:MI',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY_HH24_MI_DASH' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD.MM.YYYY HH24:MI',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY_HH24_MI_DOT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD/MM/YYYY HH24:MI',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY_HH24_MI',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MON-RR',
        p_return_value  => 'PICK_DATE_DD_MON_RR' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MON-RR HH:MI',
        p_return_value  => 'PICK_DATE_DD_MON_RR_HH_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MON-RR HH24:MI',
        p_return_value  => 'PICK_DATE_DD_MON_RR_HH24_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MON-YYYY',
        p_return_value  => 'PICK_DATE_DD_MON_YYYY',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MON-YYYY HH:MI',
        p_return_value  => 'PICK_DATE_DD_MON_YYYY_HH_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MON-YYYY HH24:MI',
        p_return_value  => 'PICK_DATE_DD_MON_YYYY_HH24_MI',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'MM/DD/YYYY',
        p_return_value  => 'PICK_DATE_MM_DD_YYYY',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'MM/DD/YYYY HH:MI',
        p_return_value  => 'PICK_DATE_MM_DD_YYYY_HH_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'MM/DD/YYYY HH24:MI',
        p_return_value  => 'PICK_DATE_MM_DD_YYYY_HH24_MI',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'RR-MON-DD',
        p_return_value  => 'PICK_DATE_RR_MON_DD' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'RR-MON-DD HH:MI',
        p_return_value  => 'PICK_DATE_RR_MON_DD_HH_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'RR-MON-DD HH24:MI',
        p_return_value  => 'PICK_DATE_RR_MON_DD_HH24_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY.DD.MM',
        p_return_value  => 'PICK_DATE_YYYY_DD_MM_DOT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY.DD.MM HH:MI',
        p_return_value  => 'PICK_DATE_YYYY_DD_MM_HH_MI_DOT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY.DD.MM HH24:MI',
        p_return_value  => 'PICK_DATE_YYYY_DD_MM_HH24_MI_DOT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY-MM-DD',
        p_return_value  => 'PICK_DATE_YYYY_MM_DD' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY/MM/DD',
        p_return_value  => 'PICK_DATE_YYYY_MM_DD_SLASH' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY-MM-DD HH:MI',
        p_return_value  => 'PICK_DATE_YYYY_MM_DD_HH_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY/MM/DD HH:MI',
        p_return_value  => 'PICK_DATE_YYYY_MM_DD_HH_MI_SLASH' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY-MM-DD HH24:MI',
        p_return_value  => 'PICK_DATE_YYYY_MM_DD_HH24_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY/MM/DD HH24:MI',
        p_return_value  => 'PICK_DATE_YYYY_MM_DD_HH24_MI_SLASH' );
    --
    l_property_id := 400;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RADIO_COLUMNS',
        p_prompt             => 'Number of Columns',
        p_property_type      => 'INTEGER',
        p_db_column          => 'ATTRIBUTE_01',
        p_display_length     => 2,
        p_min_value          => 1,
        p_display_group_name => 'ELEMENT',
        p_help_text          => q'~Enter the number of columns to display for this radio group column.~' );
    --
    l_property_id := 402;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SIMPLE_CHECKBOX_VALUES',
        p_prompt             => 'Checkbox Values',
        p_property_type      => 'TEXT',
        p_db_column          => 'INLINE_LOV',
        p_display_length     => 60,
        p_display_group_name => 'LIST_OF_VALUES',
        p_help_text          => q'~For the Simple Checkbox display type, enter either one value or two comma separated values.
The first value is submitted if the checkbox is selected. The second value, if defined, is submitted if the checkbox is deselected.',
        p_examples           => q'~<dl>
<dt>Submit Yes when selected and No when deselected</dt>
<dd><pre>
Yes,No
</pre></dd>
</dl>~' );
    --
    l_property_id := 403;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'FORMATTING_CSS_CLASSES',
        p_prompt                => 'CSS Classes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'COLUMN_CSS_CLASS',
        p_display_length        => 50,
        p_max_length            => 255,
        p_examples              => q'~<dl>
<dt>Setting this attribute to <code>fielddatabold</code> results in the following HTML being generated</dt>
<dd><pre>
&lt;span class="fielddatabold"&gt;Sample Data&lt;/span&gt;
</pre></dd>
</dl>~',
        p_display_group_name    => 'COLUMN_FORMATTING',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~<p>Enter CSS classes to apply to this column's value. You can type in the CSS class or pick from the list of available items.</p>
<p>This class is included by default on all &PRODUCT_NAME. pages and has the definition of <code>'.fielddatabold{font-size: 10pt; font-weight: bold; color: #000000;}'</code>.</p>~' );
    --
    l_property_id := 404;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'CSS_STYLE',
        p_prompt                => 'CSS Style',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'COLUMN_CSS_STYLE',
        p_display_length        => 50,
        p_max_length            => 255,
        p_examples              => q'~<dl>
<dt>Setting this attribute to <code>color:#FF0000;</code> changes the text color of the column to red and generates the following HTML</dt>
<dd><pre>
&lt;span style="color:#FF0000"&gt;Sample Data&lt;/span&gt;
</pre></dd>
</dl>~',
        p_display_group_name    => 'COLUMN_FORMATTING',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~Enter CSS styles to apply to this column's value. You can type in the CSS style or pick from the list of available items.~' );
    --
    l_property_id := 405;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'HIGHLIGHT_WORDS',
        p_prompt                => 'Highlight Words',
        p_property_type         => 'TEXT',
        p_db_column             => 'COLUMN_HIT_HIGHLIGHT',
        p_display_length        => 84,
        p_max_length            => 255,
        p_restricted_characters => 'WEB_SAFE',
        p_display_group_name    => 'COLUMN_FORMATTING',
        p_help_text             => q'~Enter text strings to be highlighted in a report column.
For multiple highlighted words, use a comma delimited list.
You can also reference page or application items using <code>&amp;ITEM.</code> syntax.
For example, you can highlight strings entered into a search field.~' );
    --
    l_property_id := 406;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_SORT_SEQUENCE',
        p_prompt             => 'Default Sequence',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DEFAULT_SORT_COLUMN_SEQUENCE',
        p_display_group_name => 'SORTING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the sort sequence for this column.
Each column should have a unique sequence to correctly order the report output.~',
        p_comment_text       => q'~$$$ should this really be a LOV, why not a one digit INTEGER?~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '1',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '2',
        p_return_value  => '2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '3',
        p_return_value  => '3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '4',
        p_return_value  => '4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '5',
        p_return_value  => '5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '6',
        p_return_value  => '6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '7',
        p_return_value  => '7' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '8',
        p_return_value  => '8' );
    --
    l_property_id := 407;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_SORT_DIRECTION',
        p_prompt             => 'Direction',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DEFAULT_SORT_DIR',
        p_display_group_name => 'SORTING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify whether this column is sorted in Descending order. If not specified, the column is sorted in Ascending order (the default).~',
        p_comment_text       => q'~$$$ I think we should add ASC as well and migrate DEFAULT_SORT_DIR to ASC if no value is set~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Descending',
        p_return_value  => 'desc' );
    --
    l_property_id := 408;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'DISABLE_SORT_COLUMN',
        p_prompt                     => 'Sortable',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'N',
        p_prop_type_yesno_override_n => 'Y',
        p_db_column                  => 'DISABLE_SORT_COLUMN',
        p_display_group_name         => 'SORTING',
        p_help_text                  => q'~Specify whether this column can be used by the end user to sort the report.~' );
    --
    l_property_id := 409;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INCLUDE_IN_EXPORT_PRINT',
        p_prompt             => 'Include In Export / Print',
        p_property_type      => 'YES NO',
        p_db_column          => 'INCLUDE_IN_EXPORT',
        p_display_group_name => 'EXPORT_PRINTING',
        p_help_text          => q'~Specify whether this column is included when the report is exported to CSV or printed.~' );
    --
    l_property_id := 410;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_COLUMN_WIDTH',
        p_prompt             => 'Print Width',
        p_property_type      => 'TEXT',
        p_db_column          => 'PRINT_COL_WIDTH',
        p_display_length     => 4,
        p_max_length         => 4000,
        p_display_group_name => 'EXPORT_PRINTING',
        p_help_text          => q'~Enter the column width used to size this column when the report is printed. The unit is defined in the Columns group of the Printing Attributes.~' );
    --
    l_property_id := 411;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'REPORT_TEMPLATE',
        p_prompt                   => 'Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'PLUG_QUERY_ROW_TEMPLATE',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_report_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Select a report template to define the appearance and layout of this classic report.</p>
        <p>Report templates are defined in the application theme.
        When a classic report is created, the template is automatically set to the default report template defined in the current theme.</p>
        <p>Many themes contain classic report templates for displaying data in a table, key value pairs, search results, cards, and so forth.
        Note that some report templates, such as cards and search results, are "row based" and expect your SQL query to return a particular set of column aliases that are substituted in the template.<br>
        Universal Theme provides the following report templates:
          <dl>
            <dt>Alerts</dt>
              <dd>Displays any number of horizontal alerts or notifications on your page.</dd>
            <dt>Badge List</dt>
              <dd>Displays key value pairs in a dashboard-like user interface.</dd>
            <dt>Cards</dt>
              <dd>Displays report data in cards, or small blocks and is useful for presenting a variety of information. Cards can be heavily customized via Template Options.</dd>
            <dt>Comments</dt>
              <dd>Displays comments and other messages.</dd>
            <dt>Content Row</dt>
              <dd>Displays report data in a set of rows, with support for a selection column, icons, and actions. Suitable for most types of content.</dd>
            <dt>Contextual Info</dt>
              <dd>Displays simple key-value pairs one after the next. It uses the column headers as the labels and displays the associated column value next to each label.</dd>
            <dt>Media List</dt>
              <dd>Displays report content in a media list, with an icon, heading, description, and badge.</dd>
            <dt>Search Results</dt>
              <dd>Displays search-engine style search results.</dd>
            <dt>Standard</dt>
              <dd>This is the default report template for displaying data in a table and can be heavily customized via Template Options.</dd>
            <dt>Timeline</dt>
              <dd>Displays a timeline of actions. It is well suited for home pages, change logs, and other areas where an activity feed of recent actions is needed.</dd>
            <dt>Value Attribute Pairs - Column</dt>
              <dd>Displays key-value pairs for column-based queries. It uses the column header as the label for each item.</dd>
            <dt>Value Attribute Pairs - Row</dt>
              <dd>Displays key-value pairs for row-based queries. It uses the first column for labels, and second column for values.</dd>
          </dl>
          See Also: <a rel="noopener noreferrer" target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a>
        </p>~' );
    --
    l_property_id := 412;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PCT_GRAPH_BACKGROUD_COLOR',
        p_prompt             => 'Background Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'PCT_GRAPH_BACKGROUND_COLOR',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Enter the color used for the background of this graph.</p>~' );
    --
    l_property_id := 413;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PCT_GRAPH_FOREGROUND_COLOR',
        p_prompt             => 'Foreground Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'PCT_GRAPH_FOREGROUND_COLOR',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Enter the color used for the foreground of this graph.</p>~' );
    --
    l_property_id := 414;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PCT_GRAPH_BAR_WIDTH',
        p_prompt             => 'Bar Width',
        p_property_type      => 'INTEGER',
        p_db_column          => 'PCT_GRAPH_BAR_WIDTH',
        p_min_value          => 1,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Enter the width in pixels for this bar chart.~' );
    --
    l_property_id := 415;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_TABLE_OWNER',
        p_prompt             => 'Table Owner',
        p_property_type      => 'OWNER',
        p_db_column          => 'BLOB_TABLE_OWNER',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Select the schema that owns the table which stores the BLOB content you want to display.~' );
    --
    l_property_id := 416;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_TABLE',
        p_prompt             => 'Table Name',
        p_property_type      => 'TABLE',
        p_db_column          => 'BLOB_TABLE',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Enter the table name which stores the BLOB content you want to display.
You can type in the table name or pick from the list of available tables.~' );
    --
    l_property_id := 417;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_CONTENT_COLUMN',
        p_prompt             => 'BLOB Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BLOB_CONTENT_COLUMN',
        p_column_data_types  => 'BLOB',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Select the BLOB column from the table which stores the BLOB content you want to display. The image is unlikely to display if you select a column with the wrong data type.~' );
    --
    l_property_id := 418;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_PK_COLUMN1',
        p_prompt             => 'Primary Key Column 1',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BLOB_PK_COLUMN1',
        p_column_data_types  => 'VARCHAR2:ROWID',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Select the first primary key column from the table which stores the BLOB content you want to display. If the primary key of this table has more than two columns, you must select the <code>ROWID</code> column. The image is unlikely to display if you select a column with the wrong data type.~' );
    --
    l_property_id := 419;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_PK_COLUMN2',
        p_prompt             => 'Primary Key Column 2',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BLOB_PK_COLUMN2',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Only select the second primary key column if the primary key for your table has two columns. If you select <code>ROWID</code> for the first primary key column, you should not populate this column. The image is unlikely to display if you select a column with the wrong data type.~' );
    --
    l_property_id := 420;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_MIME_TYPE_COLUMN',
        p_prompt             => 'Mime Type Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BLOB_MIME_TYPE_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Select the mime type column from the table which stores the BLOB content you want to display. The image is unlikely to display if you select a column with the wrong data type.~' );
    --
    l_property_id := 421;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_FILENAME_COLUMN',
        p_prompt             => 'Filename Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BLOB_FILENAME_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Enter the filename column from the table which stores the BLOB content you want to display. The image is unlikely to display if you select a column with the wrong data type.~' );
    --
    l_property_id := 422;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_CHARSET_COLUMN',
        p_prompt             => 'Character Set Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BLOB_CHARSET_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Select the character set column from the table which stores the BLOB content you want to display. The image is unlikely to display if you select a column with the wrong data type.~' );
    --
    l_property_id := 423;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_LAST_UPDATED_COLUMN',
        p_prompt             => 'Last Updated Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BLOB_LAST_UPDATED_COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Select the last updated column from the table which stores the BLOB content you want to display. If you already have an <code>UPDATED</code> column with an associated trigger to maintain the date, you could use this column instead of defining a new column specifically for when the image was last updated. However, if columns other than the BLOB content are updated regularly, then image caching is adversely affected. The image is unlikely to display if you select a column with the wrong data type.~' );
    --
    l_property_id := 424;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CONTENT_DISPOSITION',
        p_prompt             => 'View File As',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CONTENT_DISPOSITION',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the content-disposition for the downloaded file. Content-disposition is an extension to the MIME protocol that instructs the browser on how the document displays.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Attachment',
        p_return_value  => 'attachment',
        p_help_text     => q'~Saves the file to disk.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inline',
        p_return_value  => 'inline',
        p_help_text     => q'~Displays the file instead of the current page.~' );
    --
    l_property_id := 425;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DOWNLOAD_TEXT',
        p_prompt             => 'Download Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'DOWNLOAD_TEXT',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'APPEARANCE',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the text to use for the download link on the page. End users use this link to download the BLOB content.~' );
    --
    l_property_id := 426;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IMAGE_DESCRIPTION',
        p_prompt             => 'Image Description',
        p_property_type      => 'TEXT',
        p_db_column          => 'IMAGE_DESCRIPTION',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'ACCESSIBILITY',
        p_is_translatable    => true,
        p_help_text          => q'~Provide text, or a reference to a column containing the text to describe the image. This will be used as alternative text for the image and be rendered with the <alt> tag. If no Image Description is provided, then the <alt> tag with double quote will be rendered.~' );
    --
    l_property_id := 427;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HEADINGS_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PLUG_QUERY_HEADINGS_TYPE',
        p_display_group_name => 'HEADING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how headings are defined for your report.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Column Names',
        p_return_value  => 'QUERY_COLUMNS',
        p_help_text     => q'~Generates headings based on a query of the column names.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Column Names (InitCap)',
        p_return_value  => 'QUERY_COLUMNS_INITCAP',
        p_help_text     => q'~Generates headings, which are converted to initial capitalization, based on a query of the column names.~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom Headings',
        p_return_value  => 'COLON_DELMITED_LIST',
        p_help_text     => q'~Enables you to enter your own headings. The headings are initially defaulted, based on a query of column names.~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body',
        p_return_value  => 'FUNCTION_BODY_RETURNING_COLON_DELIMITED_LIST',
        p_help_text     => q'~Creates headings based on a PL/SQL Function returning a colon delimited list of names.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'NO_HEADINGS',
        p_help_text     => q'~The report is displayed without report headings.~' );
    --
    l_property_id := 428;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HEADING_TYPE_PLSQL_FUNCTION_BODY',
        p_prompt             => 'PL/SQL Function Body',
        p_property_type      => 'PLSQL FUNCTION BODY VARCHAR2',
        p_db_column          => 'PLUG_QUERY_HEADINGS',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
<dt>Provide the headings for a report based on the DEPT table</dt>
<dd><pre>return 'Deptno:DName:Loc';</pre></dd>
</dl>~',
        p_display_group_name => 'HEADING',
        p_help_text          => q'~Enter a PL/SQL function to return a string of column headings delimited by colons.~' );
    --
    l_property_id := 429;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TEMPLATE_TYPE',
        p_prompt             => 'Template Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TEMPLATE_TYPE',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the template type for this report.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Theme',
        p_return_value  => 'THEME',
        p_help_text     => q'~Report templates available in the corresponding theme.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Predefined',
        p_return_value  => 'PREDEFINED',
        p_help_text     => q'~Predefined report templates which are not associated directly with any themes. Because there is no correlation between these predefined templates and your current theme, your report layout remains the same even if you change the application theme.~' );
    --
    l_property_id := 430;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REPORT_PREDEFINED_TEMPLATE',
        p_prompt             => 'Template',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PLUG_QUERY_ROW_TEMPLATE',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a predefined report templates to control the display of this report.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML (standard)',
        p_return_value  => '1',
        p_help_text     => q'~Creates a standard HTML table.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Vertical Report',
        p_return_value  => '2',
        p_help_text     => q'~Shows each column in a separate row.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CSV',
        p_return_value  => '21',
        p_help_text     => q'~Exports the report as a CSV file.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'XML',
        p_return_value  => '22',
        p_help_text     => q'~Exports the report as an XML file.~' );
    --
    l_property_id := 431;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CLASSIC_REPORT_PAGINATION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PLUG_QUERY_NUM_ROWS_TYPE',
        p_display_group_name => 'PAGINATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the pagination type to utilize in this report.
Generally only a subset of the results are currently displayed in the report.
Pagination provides the user with information about the number of rows and the current position within the result set. Pagination also defines the style of links or buttons that are used to navigate to the next or previous page.</p>
<p>Pagination can be shown above or below the report (or both) and can be positioned on the left or right.</p>
<p>You can also use a simplified pagination style to improve performance, such as <strong>Row Ranges X to Y (with next and previous links)</strong>.
Using pagination types of the form "X to Y of Z", require the &PRODUCT_NAME. engine to perform two queries to return the results.
One query retrieves the current records to be displayed and another query gets the total record count to display in the pagination control.
For reports based on exceedingly large data sets or with very CPU intensive queries, such as numerous non-optimal table joins or expensive conditions, this additional query can add some processing time, which can lead to the report taking longer to render.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Ranges X to Y (no pagination)',
        p_return_value  => 'ROWS_X_TO_Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Ranges X to Y of Z (no pagination)',
        p_return_value  => 'ROWS_X_TO_Y_OF_Z' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Ranges X to Y of Z (with pagination)',
        p_return_value  => 'ROW_RANGES_WITH_LINKS',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Ranges 1-15 16-30  (with set pagination)',
        p_return_value  => 'ROW_RANGES' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Ranges 1-15 16-30 in select list (with pagination)',
        p_return_value  => 'ROW_RANGES_IN_SELECT_LIST' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Search Engine 1,2,3,4 (set based pagination)',
        p_return_value  => 'SEARCH_ENGINE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Externally Created Pagination Buttons',
        p_return_value  => 'COMPUTED_BUT_NOT_DISPLAYED' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Ranges X to Y (with next and previous links)',
        p_return_value  => 'NEXT_PREVIOUS_LINKS',
        p_is_quick_pick => 'Y' );
    --
    l_property_id := 432;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARTIAL_PAGE_REFRESH',
        p_prompt             => 'Partial Page Refresh',
        p_property_type      => 'YES NO',
        p_db_column          => 'AJAX_ENABLED',
        p_display_group_name => 'PAGINATION',
        p_help_text          => q'~<p>Specify whether to use Partial Page Refresh (PPR) to update the report display.</p>
If the end user performs an action, such as a pagination request or selection of a new sort column, the current report rows must be refreshed. Setting this attribute to <strong>On</strong>, refreshes just the report region. Setting this attribute to <strong>Off</strong>, refreshes the entire page.~' );
    --
    l_property_id := 433;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NUMBER_OF_ROWS_TYPE',
        p_prompt             => 'Number of Rows Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'NUMBER_OF_ROWS_TYPE',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how the number of rows for this report are entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Based on Item Value',
        p_return_value  => 'ITEM' );
    --
    l_property_id := 434;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NUMBER_OF_ROWS',
        p_prompt             => 'Number of Rows',
        p_property_type      => 'INTEGER',
        p_db_column          => 'PLUG_QUERY_NUM_ROWS',
        p_display_length     => 3,
        p_min_value          => 0, -- Has to be 0 because of backward compatibility. See APEX 5.0 - EA1 feedback EA1-499 where a developer used it to hide the report but provide a download link.
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~Enter the number of report rows to display per report page.~' );
    --
    l_property_id := 435;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NUMBER_OF_ROWS_ITEM',
        p_prompt             => 'Item',
        p_property_type      => 'ITEM',
        p_db_column          => 'PLUG_QUERY_NUM_ROWS_ITEM',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~Select the item whose value specifies the number of report rows to display per report page.~' );
    --
    l_property_id := 436;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'STRIP_HTML',
        p_prompt             => 'Strip HTML',
        p_property_type      => 'YES NO',
        p_db_column          => 'PLUG_QUERY_STRIP_HTML',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Specify whether or not to remove HTML tags from the original column values.
This is particularly important for columns that utilize HTML expressions, are used in column links, or are exported to CSV files.</p>
<p>If you select values from the database that already contain HTML tags, then those tags can cause conflicts with the HTML generated for your HTML expressions or URL generated for column links.
When exporting such values, the existing HTML tags are included as plain text in the generated CSV file.
When this option is enabled, only the actual data portion of your column value is used.</p>~' );
    --
    l_property_id := 437;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SORT_NULLS',
        p_prompt             => 'Sort Nulls',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SORT_NULL',
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~For report columns that enable column heading sorting, select how you want records with null values to be sorted in relation to records with not null values~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'First',
        p_return_value  => 'F',
        p_help_text     => q'~Records with a null value are displayed before any columns with not-null values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Last',
        p_return_value  => 'L',
        p_help_text     => q'~Records with a not-null values are displayed before any columns with a null value.~' );
    --
    l_property_id := 438;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WHEN_MORE_DATA_FOUND_MESSAGE',
        p_prompt             => 'When More Data Found',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'PLUG_QUERY_MORE_DATA',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'MESSAGES',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter the text message that displays when more report rows exist.
Use this approach as an alternative to pagination, especially if a report generally only has a discrete record set.
If the report query returns additional rows, this message can be used to alert the end user to the anomaly, rather than simply displaying slightly different pagination controls.
Your text message can readily incorporate a "Call to action" so end users are given guidance on how to respond to this unusual query result and can include page or URL links.</p>
<p>The following pagination substitution strings can be utilized in your message:</p>
<dl>
  <dt><code>#ROWS_FETCHED#</code></dt>
    <dd>The number of rows displayed (page size)</dd>
  <dt><code>#TOTAL_ROWS#</code></dt>
    <dd>The "Z" in "rows X - Y of Z"</dd>
  <dt><code>#FIRST_ROW_FETCHED#</code></dt>
    <dd>The "X" in "rows X - Y of Z"</dd>
  <dt><code>#LAST_ROW_FETCHED#</code></dt>
    <dd>The "Y" in "rows X - Y of Z"</dd>
  <dt><code>#ROW_RANGES"</code></dt>
    <dd>Shows: Row(s) 1-15 16-30 30-32</dd>
  <dt><code>#ROW_RANGES_IN_SELECT_LIST</code></dt>
    <dd>Same as row ranges but in a select list<dd>
  <dt><code>#INTERNET_PAGINATION#</code></dt>
    <dd>Page Sets: 1 2 3 4 5 6</dd>
</dl>~' );
    --
    l_property_id := 439;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CSV_EXPORT_ENABLED',
        p_prompt             => 'CSV Export Enabled',
        p_property_type      => 'YES NO',
        p_db_column          => 'CSV_OUTPUT',
        p_display_group_name => 'DOWNLOAD',
        p_help_text          => q'~Specify whether end users can download the report contents to a CSV file. To enable <em>CSV Downloads</em>, you must use a report template with a <code>#CSV_LINK#</code> substitution string and set this option to <strong>On</strong>.~' );
    --
    l_property_id := 440;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DOWNLOAD_LINK_TEXT',
        p_prompt             => 'Link Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'CSV_OUTPUT_LINK_TEXT',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'DOWNLOAD',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the text for the link to invoke the CSV download.~' );
    --
    l_property_id := 441;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REPORT_SUM_LABEL',
        p_prompt             => 'Report Sum Label',
        p_property_type      => 'TEXT',
        p_db_column          => 'REPORT_TOTAL_TEXT_FORMAT',
        p_display_length     => 40,
        p_max_length         => 255,
        p_display_group_name => 'BREAK_FORMATTING',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the text that displays adjacent to report sum values. This is always wrapped in a <code>b</code> element.~' );
    --
    l_property_id := 442;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREAK_COLUMNS',
        p_prompt             => 'Break Columns',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PLUG_QUERY_BREAK_COLS',
        p_display_group_name => 'BREAK_FORMATTING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Define the break columns used in the report. The columns must be consecutive columns, starting from the first column displayed in the report.</p>
<p>Note that the report must be sorted by the break columns in break order, or the output will be unexpected.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'First Column',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'First and Second Columns',
        p_return_value  => '1:2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'First, Second and Third Column',
        p_return_value  => '1:2:3' );
    --
    l_property_id := 443;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREAK_COLUMN_STYLE',
        p_prompt             => 'Style',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'BREAK_TYPE_FLAG',
        p_display_group_name => 'BREAK_FORMATTING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~How break columns are displayed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Repeat Headings on Break',
        p_return_value  => 'REPEAT_HEADINGS_ON_BREAK_1',
        p_help_text     => q'~The report displays as several subreports with repeating headings for each break.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Default Break Formatting',
        p_return_value  => 'DEFAULT_BREAK_FORMATTING',
        p_help_text     => q'~The breaks display in a single report without repeating the headings for each break.~' );
    --
    l_property_id := 444;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREAK_REPEAT_HEADING_FORMAT',
        p_prompt             => 'Repeat Heading Format',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'BREAK_REPEAT_HEADING_FORMAT',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'BREAK_FORMATTING',
        p_help_text          => q'~The HTML markup for the repeating headings displayed for report breaks. You can utilize <code>#COLUMN_VALUE#</code> that's substituted with the value of the first report column.
</br>
If omitted, APEX will generate default HTML row markup.~' );
    --
    l_property_id := 445;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREAK_COLUMN_TEXT_FORMAT',
        p_prompt             => 'Report Break Format',
        p_property_type      => 'TEXT',
        p_db_column          => 'BREAK_COLUMN_TEXT_FORMAT',
        p_display_length     => 80,
        p_max_length         => 2000,
        p_display_group_name => 'BREAK_FORMATTING',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label that displays on report breaks. This is always output wrapped in a <code>b</code> element. Utilize <code>#SUM_COLUMN_HEADER#</code> that gets replaced by the break column header.~',
        p_comment_text       => q'~$$$ improve prompt~' );
    --
    l_property_id := 446;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREAK_BEFORE_ROW',
        p_prompt             => 'Before Row',
        p_property_type      => 'TEXT',
        p_db_column          => 'BREAK_BEFORE_ROW',
        p_display_length     => 80,
        p_max_length         => 2000,
        p_display_group_name => 'BREAK_FORMATTING',
        p_help_text          => q'~Define the HTML markup used in the control break row element. Any tags opened here should be closed later in the <b>After Row</b> attribute below to form a container for the column break element defined in the <b>Column Break Format</b> attribute.
<br>
Example:
<ul>
<li>Before Row: <code>&lt;tr style="border: 2px red solid" &gt;</code> </li>
<li>Column Break Format: <code> &lt;td&gt; #COLUMN_VALUE# &lt;/td&gt; </code> </li>
<li>After Row: <code>&lt;/tr&gt;</code> </li>~' );
    --
    l_property_id := 447;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREAK_GENERIC_COLUMN',
        p_prompt             => 'Column Break Format',
        p_property_type      => 'TEXT',
        p_db_column          => 'BREAK_GENERIC_COLUMN',
        p_display_length     => 80,
        p_max_length         => 2000,
        p_display_group_name => 'BREAK_FORMATTING',
        p_help_text          => q'~<p>Define the HTML used in the column break row element. You can utilize <code>#COLUMN_VALUE#</code> which is replaced by the sum computed for the control break. If omitted, a bold sum value appears by default.</p>~',
        p_comment_text       => q'~$$$ improve prompt~' );
    --
    l_property_id := 448;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREAK_AFTER_ROW',
        p_prompt             => 'After Row',
        p_property_type      => 'TEXT',
        p_db_column          => 'BREAK_AFTER_ROW',
        p_display_length     => 80,
        p_max_length         => 2000,
        p_display_group_name => 'BREAK_FORMATTING',
        p_help_text          => q'~The HTML markup to close the element opened in the <b>Before Row</b> attribute.~' );
    --
    l_property_id := 449;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXTERNAL_PROCESSING_ENABLED',
        p_prompt             => 'Enabled',
        p_property_type      => 'YES NO',
        p_db_column          => 'PRINT_ENABLED',
        p_display_group_name => 'EXTERNAL_PROCESSING',
        p_deprecated_values  => 'Y',
        p_help_text          => q'~Specify whether external post processing is enabled for this report.~' );
    --
    l_property_id := 450;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXTERNAL_PROCESSING_URL',
        p_prompt             => 'URL',
        p_property_type      => 'TEXT',
        p_db_column          => 'PRINT_URL',
        p_display_length     => 60,
        p_max_length         => 2000,
        p_display_group_name => 'EXTERNAL_PROCESSING',
        p_deprecated_values  => '$NOT_NULL$',
        p_help_text          => q'~Enter the URL to a server for post processing of this report.~' );
    --
    l_property_id := 451;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXTERNAL_PROCESSING_LINK_TEXT',
        p_prompt             => 'Link Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'PRINT_URL_LABEL',
        p_display_length     => 60,
        p_max_length         => 2000,
        p_display_group_name => 'EXTERNAL_PROCESSING',
        p_is_translatable    => true,
        p_deprecated_values  => '$NOT_NULL$',
        p_help_text          => q'~Enter the text for the link which end users click to invoke the external processing engine.~' );
    --
    l_property_id := 452;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TAB_FORM_COLUMN_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DISPLAY_AS',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the basis for this Tabular Form column.</p>
<p>The selection determines whether this column is updateable within the Tabular Form.
Updates can only be performed if a multiple row update is defined, or a PL/SQL process is implemented to process updated data.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Selector',
        p_return_value  => 'ROW_SELECTOR',
        p_help_text     => q'~Includes a checkbox at the beginning of each row.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Plain Text',
        p_return_value  => 'PLAIN',
        p_help_text     => q'~Displays the column value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Plain Text (saves state)',
        p_return_value  => 'DISPLAY_AND_SAVE',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Displays the column value, and saves in the value in session state. This column can be utilized in page processing.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Plain Text (based on List of Values)',
        p_return_value  => 'PLAIN_LOV',
        p_help_text     => q'~Displays the value returned from the list of values specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Link',
        p_return_value  => 'LINK',
        p_help_text     => q'~Displays the column as a link.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Display Image',
        p_return_value  => 'IMAGE',
        p_help_text     => q'~Displays the column as an image.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Download BLOB',
        p_return_value  => 'DOWNLOAD',
        p_help_text     => q'~Displays the column as a link to download the file.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Percent Graph',
        p_return_value  => 'PCT_GRAPH',
        p_help_text     => q'~Displays the column as a percentage graph. The value retrieved must be between 0 and 100.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Text Field',
        p_return_value  => 'TEXT',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Enter a value into a text field.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Text Area',
        p_return_value  => 'TEXTAREA',
        p_help_text     => q'~Enter a value into a text area field.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Select List',
        p_return_value  => 'SELECT_LIST',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Select a value from the list of values specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Popup LOV (shows displays value)',
        p_return_value  => 'POPUPKEY',
        p_help_text     => q'~Select a value from the popup. The display value from the list of values is shown.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Popup LOV (shows return value)',
        p_return_value  => 'POPUP',
        p_help_text     => q'~Select a value from the popup. The return value from the list of values is shown.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Radio Group',
        p_return_value  => 'RADIOGROUP',
        p_help_text     => q'~Select a single radio group from the list of values specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Simple Checkbox',
        p_return_value  => 'SIMPLE_CHECKBOX',
        p_help_text     => q'~Check or uncheck a single checkbox.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Date Picker',
        p_return_value  => 'DATE_PICKER',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Enter the date, or utilize the date picker to select the date.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Date Picker (Classic)',
        p_return_value  => 'DATE_POPUP',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Enter the date, or utilize the date picker to select the date.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hidden',
        p_return_value  => 'HIDDEN_COLUMN',
        p_help_text     => q'~Does not display the column, but it is referenceable.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hidden (saves state)',
        p_return_value  => 'HIDDEN_FIELD',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Does not display the column, but it is referenceable. This column can be utilized in page processing.~' );
    --
    l_property_id := 453;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ROW_SELECTION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ROW_SELECTION_TYPE',
        p_display_group_name => 'ROW_SELECTION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of row selection.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Focus only',
        p_return_value  => 'FOCUS',
        p_help_text     => q'~Only enables setting the focus to a selected row. Useful to improve accessibility or being able to keyboard navigate through the result set.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Single Selection',
        p_return_value  => 'SINGLE',
        p_help_text     => q'~Enables single row selection.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Multiple Selection',
        p_return_value  => 'MULTIPLE',
        p_help_text     => q'~Enables multiple row selection.~' );
    --
    l_property_id := 454;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CURRENT_SELECTION_PAGE_ITEM',
        p_prompt             => 'Current Selection Page Item',
        p_property_type      => 'ITEM',
        p_db_column          => 'CURRENT_SELECTION_PAGE_ITEM',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'ROW_SELECTION',
        p_help_text          => q'~Enter the page item used to store the selection state. It holds information about all selected records and their primary key values. Stores these values as a string separated by colons.~' );
    --
    l_property_id := 455;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SELECT_ALL_PAGE_ITEM',
        p_prompt             => 'Select All Page Item',
        p_property_type      => 'ITEM',
        p_db_column          => 'SELECT_ALL_PAGE_ITEM',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'ROW_SELECTION',
        p_help_text          => q'~Enter the page item used as the source for selecting all records. This item must be of type checkbox.~' );
    --
    l_property_id := 456;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HIDDEN_TEMPLATE_COMPONENT_TYPE',
        p_prompt             => 'Template Component Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'TEMPLATE_COMPONENT_TYPE',
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_is_query_only      => true );
    --
    l_property_id := 457;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UI_DEFAULT_REF_TABLE_OWNER',
        p_prompt             => 'Table Owner',
        p_property_type      => 'OWNER',
        p_db_column          => 'REF_SCHEMA',
        p_display_group_name => 'UI_DEFAULTS_REFERENCE',
        p_help_text          => q'~Select the schema that owns the reference table.
This attribute is used to compare references to columns across applications using UI Defaults.
This reference is maintained manually, after being initialized by a wizard, whenever possible.~' );
    --
    l_property_id := 458;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UI_DEFAULT_REF_TABLE',
        p_prompt             => 'Table Name',
        p_property_type      => 'TABLE',
        p_db_column          => 'REF_TABLE_NAME',
        p_display_group_name => 'UI_DEFAULTS_REFERENCE',
        p_help_text          => q'~Select the table or view that this column references.
This attribute is used to compare references to columns across applications using UI Defaults.
This reference is maintained manually, after being initialized by a wizard, whenever possible.~' );
    --
    l_property_id := 459;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UI_DEFAULT_REF_COLUMN',
        p_prompt             => 'Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'REF_COLUMN_NAME',
        p_column_data_types  => 'VARCHAR2:BLOB:BFILE',
        p_display_group_name => 'UI_DEFAULTS_REFERENCE',
        p_help_text          => q'~Select the column name that this report column references.
This attribute is used to compare references to columns across applications using UI Defaults.
This reference is maintained manually, after being initialized by a wizard, whenever possible.~' );
    --
    l_property_id := 460;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_DEFAULT_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'COLUMN_DEFAULT_TYPE',
        p_display_group_name => 'DEFAULT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a default column value type.~',
        p_comment_text       => q'~$$$ to be in sync with item default value we should add a STATIC option as well, item default should be enhanced to support ITEM. If we do that, we can use the property DEFAULT_VALUE_TYPE.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Expression',
        p_return_value  => 'FUNCTION' );
    --
    l_property_id := 461;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_VALUE_ITEM',
        p_prompt             => 'Item',
        p_property_type      => 'ITEM',
        p_db_column          => 'ITEM_DEFAULT',
        p_display_group_name => 'DEFAULT',
        p_help_text          => q'~Enter the page or application item which holds the default value.~' );
    --
    l_property_id := 462;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PK_SOURCE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PK_COL_SOURCE_TYPE',
        p_display_group_name => 'PRIMARY_KEY_SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the source type for the primary key.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Existing trigger',
        p_return_value  => 'T' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Expression',
        p_return_value  => 'F' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Existing sequence',
        p_return_value  => 'S' );
    --
    l_property_id := 463;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PK_SOURCE_PLSQL_EXPRESSION',
        p_prompt             => 'PL/SQL Expression',
        p_property_type      => 'PLSQL EXPRESSION VARCHAR2',
        p_db_column          => 'PK_COL_SOURCE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'PRIMARY_KEY_SOURCE',
        p_help_text          => q'~Enter a PL/SQL expression that provides a value for the primary key.~' );
    --
    l_property_id := 464;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PK_SOURCE_SEQUENCE_NAME',
        p_prompt             => 'Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'PK_COL_SOURCE',
        p_display_length     => 30,
        p_max_length         => 128,
        p_display_group_name => 'PRIMARY_KEY_SOURCE',
        p_help_text          => q'~Enter a name for the primary key.~' );
    --
    l_property_id := 465;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BRANCH_ACCEPT_REQUEST',
        p_prompt             => 'Request',
        p_property_type      => 'TEXT',
        p_db_column          => 'BRANCH_ACCEPT_REQUEST',
        p_display_length     => 20,
        p_max_length         => 128,
        p_display_group_name => 'BEHAVIOR',
        p_help_text          => q'~Enter the request to be included within the branch link.~' );
    --
    l_property_id := 466;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUERY_COLUMN_ID',
        p_prompt             => 'Report Column Query Id',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'QUERY_COLUMN_ID',
        p_max_length         => 4,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~$$$ DJP currently hidden~' );
    --
    l_property_id := 467;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DERIVED_COLUMN',
        p_prompt             => 'Derived Column',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'DERIVED_COLUMN',
        p_max_length         => 4,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~$$$ DJP currently hidden~' );
    --
    l_property_id := 474;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SERIES_CHART_TYPE',
        p_prompt             => 'Series Chart Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'CHART_TYPE',
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION' );
    --
    l_property_id := 475;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_GRAPH_OWNER',
        p_prompt             => 'Graph Owner',
        p_property_type      => 'OWNER',
        p_db_column          => 'QUERY_OWNER',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Select the schema that owns the Property Graph.~' );
    --
    l_property_id := 476;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_GRAPH_NAME',
        p_prompt             => 'Graph Name',
        p_property_type      => 'GRAPH',
        p_db_column          => 'QUERY_TABLE',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Enter the case-sensitive Property Graph name. You can type in the name or pick from the list.~' );
    --
    l_property_id := 477;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SOURCE_GRAPH_MATCH_CLAUSE',
        p_prompt                => 'Match Clause',
        p_property_type         => 'TEXT EDITOR',
        p_db_column             => 'QUERY_MATCH',
        p_display_length        => 40,
        p_max_length            => 4000,
        p_display_group_name    => 'SOURCE',
        p_examples              => q'~<dl><dt>Find all persons who bought cars.</dt><dd><pre>(p is person) - [t is buys] -> (c is car)</pre></dd><dt>Find all employees working in departments.</dt><dd><pre>(e is employees) - [is works_at] -> (d is departments)</pre></dd><dt>Find all employees working in departments who bought cars.</dt><dd><pre>(e is employees) - [is works_at] -> (d is departments), (e is employees) - [t is buys] -> (c is car)</pre></dd></dl>~',
        p_help_text             => q'~Enter a path pattern to find on the property graph. In order to find all edges in your graph, use the following: <strong>(a) - [e] -> (b)</strong>. In addition to this, use <em>label constraints</em> to restrict the types of vertices or edges of interest.~');
    --
    l_property_id := 478;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_GRAPH_WHERE_CLAUSE',
        p_prompt             => 'Where Clause',
        p_property_type      => 'WHERE CLAUSE',
        p_db_column          => 'QUERY_WHERE',
        p_display_length     => 40,
        p_max_length         => 4000,
        p_display_group_name => 'SOURCE',
        p_examples           => q'~
    <dl>
    <dt>Only include those employees which have a manager or have a job of salesman.</dt>
    <dd><pre>( e.mgr is not null or e.job = 'SALESMAN' )</pre></dd>
    </dl>~',
            p_help_text          => q'~Enter an optional WHERE clause to restrict the returned rows. Columns must use a vertex or edge alias.~' );
    --
    l_property_id := 479;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SOURCE_GRAPH_COLUMNS_CLAUSE',
        p_prompt                => 'Columns Clause',
        p_property_type         => 'TEXT EDITOR',
        p_db_column             => 'QUERY_COLUMNS',
        p_display_length        => 40,
        p_max_length            => 4000,
        p_display_group_name    => 'SOURCE',
        p_examples              => q'~
    <dl>
    <dt>Return <strong>NAME</strong>, <strong>BRAND</strong> and <strong>TOTAL_COST</strong> columns, the latter is the <strong>COST</strong> column, multiplied by 100.</dt>
    <dd><pre>p.name, c.brand, t.cost * 100 as total_cost</pre></dd>
   </dl>~',
        p_help_text             => q'~Define the query return columns. Those are properties of vertices or edges or expressions using them.~' );
    --
    l_property_id := 480;
    store_order_by_clause_property(
        p_name               => 'SOURCE_GRAPH_STATIC_ORDER_BY',
        p_display_group_name => 'SOURCE' );
    --
    l_property_id := 481;
    store_order_by_clause_property(
        p_name               => 'SOURCE_GRAPH_ORDER_BY',
        p_display_group_name => 'SOURCE_ORDER_BY' );
    --
    l_property_id := 482;
    store_order_by_item_property (
        p_name               => 'SOURCE_GRAPH_ORDER_BY_ITEM',
        p_prompt             => 'Item',
        p_display_group_name => 'SOURCE_ORDER_BY' );
    --
    l_property_id := 483;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MLE_ENVIRONMENT',
        p_prompt             => 'MLE Environment',
        p_property_type      => 'TEXT',
        p_db_column          => 'MLE_ENVIRONMENT',
        p_display_length     => 40,
        p_max_length         => 255,
        p_display_group_name => 'DATABASE_SESSION',
        p_min_db_version     => c_db_23ai,
        p_help_text          => q'~Specifies the MLE Environment in which to execute all snippets of MLE code in the application.
If none is provided, the default environment will be used.~' );
    --
    l_property_id := 484;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FILE_STORAGE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FILE_STORAGE',
        p_display_group_name => 'FILE_STORAGE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~
Controls whether static files are sourced from APEX itself or from Oracle Cloud Object Store~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Database',
        p_return_value  => 'DB',
        p_help_text     => q'~ Store Static Application Files in APEX, in the local database.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Object Storage',
        p_return_value  => 'OBJECT_STORE',
        p_help_text     => q'~Store Static Application Files in a bucket in Oracle Cloud Object Store.~' );
    --
    l_property_id := 485;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'REMOTE_FILE_SERVER',
        p_prompt                   => 'Remote File Server',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'FILE_REMOTE_SERVER_ID',
        p_display_group_name       => 'FILE_STORAGE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_file_server,
        p_help_text                => q'~
Select a remote server defined in Workspace Utilities of the type "File Server".~' );
    --
    l_property_id := 486;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TERMINATION_FUNCTION_NAME',
        p_prompt             => 'Termination Function Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'TERMINATION_FUNCTION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'CALLBACKS' );
    --
    l_property_id := 487;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TASK_VACATION_RULE_PROCEDURE',
        p_prompt             => 'Task Vacation Rule Procedure Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'VACATION_RULE_PROCEDURE',
        p_display_length     => 64,
        p_max_length         => 500,
        p_display_group_name => 'SETTINGS',
        p_examples           => q'~
<p>
This example shows a vacation rule procedure implementation where SCOTT is added as an alternate participant as JANE
would be on maternity leave.</p>
<pre>

    procedure alternate_job_approvers(
                p_param    in apex_approval.t_vacation_rule_input,
                p_result  out apex_approval.t_vacation_rule_result)
    is
        l_result            apex_approval.t_vacation_rule_result;
        l_changes           apex_approval.t_task_participant_changes;
        l_participants      apex_approval.t_task_participants;
        l_new_participant   apex_approval.t_task_participant;
        l_old_participant   apex_approval.t_task_participant;
        l_has_changed       boolean                             := false;
        l_index             pls_integer                         := 1;
    begin
        l_participants := p_param.original_participants;
        for i in 1..l_participants.count loop
            if l_participants(i).value = 'JANE' then
                l_old_participant               :=  l_participants(i);
                l_new_participant.value         := 'SCOTT';
                l_new_participant.type          := 'POTENTIAL_OWNER';
                l_new_participant.identity      := 'USER';
                l_has_changed                   := true;
            end if;
        end loop;
        if l_has_changed then
            l_changes(l_index).old_participant   := l_old_participant;
            l_changes(l_index).new_participant   := l_new_participant;
            l_changes(l_index).change_reason     := 'Jane is out on maternity leave';
        end if;
        l_result.participant_changes            := l_changes;
        l_result.has_participant_changes        := l_has_changed;
        p_result                                := l_result;
    end;
</pre>~',
        p_help_text          => q'~
<p>Specify the name of a PL/SQL procedure in the format <strong>schemaName.packageName.procedureName</strong>.
The procedure is expected to return alternate participants for this task definitions.
The vacation rule procedure should implement the following interface.</p>
<pre>
    procedure my_vacation_rule (
        p_param    in apex_approval.t_vacation_rule_input,
        p_result  out apex_approval.t_vacation_rule_output );
</pre>
<p>The procedure input is of type <strong>apex_approval.t_vacation_rule_input</strong> and the result output is of type <strong>apex_approval.t_vacation_rule_output</strong> </p>~' );
    --
    -- *** free 488 - 534
    --
    l_property_id := 535;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DB_CREDENTIAL_NAME',
        p_prompt             => 'Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'DB_CREDENTIAL_NAME',
        p_display_length     => 128,
        p_max_length         => 128,
        p_display_group_name => 'DATABASE_CREDENTIAL',
        p_help_text          => q'~<p>
    To use the secrets stored within a database credential, enter its name here.
    Available credentials can be obtained from the <strong>ALL_CREDENTIALS</strong> d
    ictionary view. Use the <strong>DBMS_CREDENTIAL</strong> package
    to maintain database credentials.</p>
<p>
    <em>Using a database credential changes the behavior of HTTP requests being done and how Web Credentials work:</em></p>
<ul>
    <li>
        If a database credential is used, all HTTP requests will be done in the
        context of the application's parsing schema, and not in the context of the
        APEX engine any more. That means, that PL/SQL network ACLs must be granted
        to the application's parsing schema. See the documentation for the
        <strong>DBMS_NETWORK_ACL_ADMIN</strong> for more details.</li>
    <li>
        A database credentials is completely maintained by the database, &PRODUCT_NAME.
        does not have access to the stored secrets. As &PRODUCT_NAME. thus cannot enforce
        the <strong>Valid for URLs</strong> attribute, this attribute is disabled when a
        database credential is used.</li>
</ul>~' );
    l_property_id := 536;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DB_CREDENTIAL_IS_INSTANCE',
        p_prompt             => 'Instance Credential',
        p_property_type      => 'YES NO',
        p_db_column          => 'DB_CREDENTIAL_IS_INSTANCE',
        p_display_group_name => 'DATABASE_CREDENTIAL',
        p_help_text          => q'~<p>Enable this switch to indicate that the chosen database credential is available at the instance level.</p>
<p>An instance level database credential must be accessible to the APEX Engine (<code>APEX_NNNNNN</code>) schema.</p>~');
    --
    l_property_id := 537;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LEGEND_TITLE',
        p_prompt             => 'Title',
        p_property_type      => 'TEXT',
        p_db_column          => 'LEGEND_TITLE',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'LEGEND',
        p_is_translatable    => true,
        p_help_text          => q'~Enter a title to display at the top of the chart legend.~' );
    --
    l_property_id := 545;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_HEIGHT',
        p_prompt             => 'Height',
        p_property_type      => 'INTEGER',
        p_db_column          => 'CHART_HEIGHT',
        p_display_length     => 5,
        p_min_value          => 1,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~<p>Enter the height of the chart in pixels. The height defines a fixed height for your chart region. Alternatively, to enable automatic resizing of the chart height, leave this item empty.
The height is then based upon the height of the browser.</p>~' );
    --
    l_property_id := 555;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'AUTH_CONFIG_PROCEDURE',
        p_prompt                   => 'Configuration Procedure',
        p_property_type            => 'TEXT',
        p_db_column                => 'AUTH_CONFIG_PROCEDURE',
        p_display_group_name       => 'AUTHENTICATION',
        p_help_text                => q'~
Enter the name of a procedure which configures authentication at runtime.~' );
    --
    l_property_id := 588;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_DECIMAL_PLACES',
        p_prompt             => 'Decimal Places',
        p_property_type      => 'INTEGER',
        p_db_column          => 'VALUE_DECIMAL_PLACES',
        p_display_length     => 3,
        p_min_value          => 0,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the number of decimal places to use in value labels.~' );
    --
    l_property_id := 631;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'CALENDAR_TEMPLATE',
        p_prompt                   => 'Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'TEMPLATE_ID',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_calendar_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~Select a template to use when the calendar is rendered.~' );
    --
    l_property_id := 632;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATE_COLUMN',
        p_prompt             => 'Date Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'DATE_COLUMN',
        p_column_data_types  => 'DATE',
        p_display_group_name => 'ENTRY',
        p_help_text          => q'~Select the column from the table or query that contains the dates to be placed on the calendar.~' );
    --
    l_property_id := 633;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATE_FORMAT',
        p_prompt             => 'Show Time',
        p_property_type      => 'YES NO',
        p_db_column          => 'INCLUDE_TIME_WITH_DATE',
        p_display_group_name => 'ENTRY',
        p_help_text          => q'~Specify if you want to show time or only date values on your calendar.~' );
    --
    l_property_id := 634;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CALENDAR_DATE_ITEM',
        p_prompt             => 'Start Date',
        p_property_type      => 'ITEM',
        p_db_column          => 'DATE_ITEM',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'CALENDAR_STATE_ITEMS',
        p_help_text          => q'~Select the page or application item that holds the start date of the calendar which is currently displayed to the end user.
This item is used by the &PRODUCT_NAME. engine when the end user selects to navigate to the previous or next period.~' );
    --
    l_property_id := 635;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CALENDAR_END_DATE_ITEM',
        p_prompt             => 'End Date',
        p_property_type      => 'ITEM',
        p_db_column          => 'END_DATE_ITEM',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'CALENDAR_STATE_ITEMS',
        p_help_text          => q'~Select the page or application item that holds the end date of the calendar which is currently displayed to the end user.
This item is used by the &PRODUCT_NAME. engine when the end user selects to navigate to the previous or next period.~' );
    --
    l_property_id := 636;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CALENDAR_TYPE_ITEM',
        p_prompt             => 'Type',
        p_property_type      => 'ITEM',
        p_db_column          => 'DATE_TYPE_COLUMN',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'CALENDAR_STATE_ITEMS',
        p_help_text          => q'~Select the page or application item that holds the calendar type which is currently displayed to the end user.~' );
    --
    l_property_id := 637;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CALENDAR_DISPLAY_TYPE',
        p_prompt             => 'Display Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DISPLAY_TYPE',
        p_display_group_name => 'ENTRY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the values displayed on the calendar.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Column',
        p_return_value  => 'COL',
        p_help_text     => q'~Uses the <strong>Display Column</strong> attribute to select the column to display in the calendar cell.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom',
        p_return_value  => 'CUS',
        p_help_text     => q'~Enables you to enter a custom column format using HTML expressions and supported substitution strings.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No Display Value',
        p_return_value  => 'NONE',
        p_help_text     => q'~No data is displayed in the calendar cells.~' );
    --
    l_property_id := 638;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DISPLAY_COLUMN',
        p_prompt             => 'Display Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'DISPLAY_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'ENTRY',
        p_help_text          => q'~Select the single column to display in the calendar cells.~' );
    --
    l_property_id := 639;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRIMARY_KEY_COLUMN',
        p_prompt             => 'Primary Key Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'PRIMARY_KEY_COLUMN',
        p_column_data_types  => 'VARCHAR2:ROWID',
        p_display_group_name => 'ENTRY',
        p_help_text          => q'~Select the column which holds the primary key for the table.~',
        p_comment_text       => q'~$$$ DJP - Carsten, I asked Patrick M. to remove this attribute~' );
    --
    l_property_id := 640;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CALENDAR_CUSTOM_FORMAT',
        p_prompt             => 'Custom Display Format',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'ITEM_FORMAT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
<dt>Display column values</dt>
<dd><pre>
#FIRST_NAME# <strong>#LAST_NAME#</strong>
</pre></dd>
<dt>Display an image in a calendar event.</dt>
<dd><pre>
&lt;img src="#IMAGE_NAME#"&gt;
</pre></dd>
</dl>~',
        p_display_group_name => 'ENTRY',
        p_help_text          => q'~Enter custom text to display in calendar cells. You can enter HTML expressions and use <code>#COLUMN_NAME#</code> syntax to show column values. This display type enables you to enter multiple columns in the display.~' );
    --
    l_property_id := 641;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BEGIN_AT_START_OF_INTERVAL',
        p_prompt             => 'Begin at Start of Interval',
        p_property_type      => 'YES NO',
        p_db_column          => 'BEGIN_AT_START_OF_INTERVAL',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Specify when the calendar starts. Selecting this option creates a calendar that spans an entire interval such as a month.</p>
<ul>
  <li>If Begin at start of interval is <strong>On</strong>, the date is June 15th, and the display is monthly, the resulting calendar spans from June 1st to June 30th.</li>
  <li>If Begin at start of interval is <strong>Off</strong>, the date is June 15th, and the display is monthly, the resulting calendar spans from June 15th to June 30th.</li>
</ul>~' );
    --
    store_cal_weekday_property (
        p_property_id        => 642,
        p_name               => 'START_OF_WEEK_FOR_MONTHLY_CALENDAR',
        p_prompt             => 'Start Day',
        p_db_column          => 'START_OF_WEEK',
        p_display_group_name => 'MONTHLY_CALENDAR',
        p_help_text          => q'~Determines the day of the week on which the monthly calendar starts.~' );
    --
    store_cal_weekday_property (
        p_property_id        => 643,
        p_name               => 'START_DAY_FOR_WEEKLY_CALENDAR',
        p_prompt             => 'Start Day',
        p_db_column          => 'WEEK_START_DAY',
        p_display_group_name => 'WEEKLY_CALENDAR',
        p_help_text          => q'~Select the first day of the week displayed on the weekly calendar.
You can use this attribute in conjunction with <strong>End Day</strong> to restrict the days of the week displayed, or simply specify the first day of the week displayed.~' );
    --
    store_cal_weekday_property (
        p_property_id        => 644,
        p_name               => 'END_DAY_FOR_WEEKLY_CALENDAR',
        p_prompt             => 'End Day',
        p_db_column          => 'WEEK_END_DAY',
        p_display_group_name => 'WEEKLY_CALENDAR',
        p_help_text          => q'~Select the last day of the week displayed on the weekly calendar.
You can use this attribute in conjunction with <strong>Start Day</strong> to restrict the days of the week displayed, or select the day before the <strong>Start Day</strong> value to show all seven days.~' );
    --
    l_property_id := 645;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TIME_FORMAT',
        p_prompt             => 'Time Format',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TIME_FORMAT',
        p_display_group_name => 'ENTRY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how to display the time format.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '12 Hour',
        p_return_value  => '12HOUR' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '24 Hour',
        p_return_value  => '24HOUR' );
    --
    l_property_id := 646;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'START_TIME',
        p_prompt             => 'Start Hour',
        p_property_type      => 'INTEGER',
        p_db_column          => 'START_TIME',
        p_display_length     => 2,
        p_min_value          => 0,
        p_max_value          => 23,
        p_display_group_name => 'DAILY_WEEKLY_CALENDAR',
        p_help_text          => q'~Enter the start hour to focus the display of the weekly and daily calendar.~' );
    --
    l_property_id := 647;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'END_TIME',
        p_prompt             => 'End Hour',
        p_property_type      => 'INTEGER',
        p_db_column          => 'END_TIME',
        p_display_length     => 2,
        p_min_value          => 0,
        p_max_value          => 23,
        p_display_group_name => 'DAILY_WEEKLY_CALENDAR',
        p_help_text          => q'~Enter the end hour to focus the display of the weekly and daily calendar.~' );
    --
    l_property_id := 648;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_BACKGROUND_COLOR',
        p_prompt             => 'Data Background',
        p_property_type      => 'COLOR',
        p_db_column          => 'DATA_BACKGROUND_COLOR',
        p_display_length     => 7,
        p_max_length         => 30,
        p_display_group_name => 'COLORS',
        p_help_text          => q'~<p>Enter the color used for the background of the data displayed in this calendar.</p>~' );
    --
    l_property_id := 649;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_TEXT_COLOR',
        p_prompt             => 'Data Text',
        p_property_type      => 'COLOR',
        p_db_column          => 'DATA_TEXT_COLOR',
        p_display_length     => 7,
        p_max_length         => 30,
        p_display_group_name => 'COLORS',
        p_help_text          => q'~<p>Enter the color used for the data in this calendar.</p>~' );
    --
    l_property_id := 651;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_VIEW_DAYS_DISPLAY',
        p_prompt             => 'Display',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'AGENDA_CAL_DAYS_TYPE',
        p_display_group_name => 'LIST_VIEW_CALENDAR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the days to display for the List View.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Current Month',
        p_return_value  => 'MONTH',
        p_help_text     => q'~Display the calendar entries for the current month.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Current Year',
        p_return_value  => 'YEAR',
        p_help_text     => q'~Display the calendar entries for the current year.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom',
        p_return_value  => 'CUSTOM',
        p_help_text     => q'~Display the calendar entries based on the number of days you enter.~' );
    --
    l_property_id := 652;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_VIEW_CUSTOM_DAYS',
        p_prompt             => 'Number of Days',
        p_property_type      => 'INTEGER',
        p_db_column          => 'AGENDA_CAL_DAYS',
        p_display_length     => 3,
        p_max_length         => 3,
        p_min_value          => 1,
        p_unit               => c_unit_days,
        p_display_group_name => 'LIST_VIEW_CALENDAR',
        p_help_text          => q'~Enter the total number of days to display in the Agenda View.~',
        p_comment_text       => q'~$$$ DJP - Carsten, asked for clarification on how used from Patrick M.~' );
    --
    l_property_id := 653;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OPEN_LINK_IN',
        p_prompt             => 'Open Link in',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ITEM_LINK_OPEN_IN',
        p_display_group_name => 'LINK',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify if the page or URL replaces the current page or opens in a dialog.~',
        p_comment_text       => q'~$$$ DJP - Carsten, I asked Patrick M. to remove this attribute as derived from Target Page Mode not specified here.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Same Window',
        p_return_value  => 'W' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dialog',
        p_return_value  => 'P' );
    --
    l_property_id := 654;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENTRY_LINK_TARGET',
        p_prompt             => 'Event Target',
        p_property_type      => 'LINK',
        p_db_column          => 'ITEM_LINK',
        p_display_group_name => 'LINK',
        p_help_text          => q'~Click Target to invoke a modal dialog. You can enter the target link the calendar calls to view the details of an existing event.~' );
    --
    l_property_id := 657;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DAY_LINK_TARGET',
        p_prompt             => 'Create Target',
        p_property_type      => 'LINK',
        p_db_column          => 'DAY_LINK',
        p_display_group_name => 'LINK',
        p_help_text          => q'~Click Target to invoke a modal dialog. You can enter the target link the calendar calls when creating an event by clicking on a calendar cell outside of an existing event.~' );
    --
    l_property_id := 658;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DRAG_DROP_PROCESS',
        p_prompt                   => 'Process',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'DRAG_DROP_PROCESS_ID',
        p_examples                 => q'~<dl>
<dt>Custom process</dt>
<dd><pre>
declare
    l_date_value        varchar2(32767) := apex_application.g_x01;
    l_primary_key_value varchar2(32767) := apex_application.g_x02;
begin
    update emp
       set hiredate = to_date(l_date_value, 'YYYYMMDD HH24MISS')
     where rowid    = l_primary_key_value;
end;
</pre></dd>
</dl>~',
        p_display_group_name       => 'DRAG_AND_DROP',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_page_process,
        p_lov_component_type_scope => 'PAGE',
        p_help_text                => q'~Define the process to be executed when a Calendar entry is dragged and dropped.~',
        p_comment_text             =>q'~$$$ ??? DJP - Carsten does the PL/SQL use apex_application.g_x01 etc for getting calendar values~' );
    --
    l_property_id := 659;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'DRAG_AND_DROP_AUTHORIZATION_SCHEME',
        p_prompt                => 'Authorization Scheme',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'DRAG_DROP_REQUIRED_ROLE',
        p_display_group_name    => 'DRAG_AND_DROP',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~Select an authorization scheme to limit who has rights to update existing calendar events using drag and drop.
If specified, this authorization scheme must evaluate to TRUE in order for the drag and drop to be processed.~' );
    --
    l_property_id := 660;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'DIALOG_CSS_CLASSES',
        p_prompt                => 'CSS Classes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'DIALOG_CSS_CLASSES',
        p_display_length        => 100,
        p_max_length            => 255,
        p_display_group_name    => 'DIALOG',
        p_lov_type              => 'DISTINCT',
        p_examples              => q'~<pre>ui-dialog--wizard</pre>~',
        p_help_text             => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~',
        p_comment_text          => '$$$ we should only show this property if the template supports the #DIALOG_CSS_CLASSES# placeholder' );
    --
    l_property_id := 694;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLAIN_LOV_IR_COLUMN_FILTER_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'RPT_SHOW_FILTER_LOV',
        p_display_group_name => 'COLUMN_FILTER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how to derive the list of values for the filter on the report column drop down list.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'N',
        p_help_text     => q'~Disable filter on list of values.~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Default Based on Column Type',
        p_return_value  => 'D',
        p_help_text     => q'~STRING and NUMBER columns derive the list of values from distinct column values. DATE columns derive the list of values from predefined date ranges.~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Defined List of Values to Filter Exact Match',
        p_return_value  => 'S',
        p_help_text     => q'~Derive the list of values from a defined list of values SQL query to create an equal filter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Defined List of Values to Filter Word Contains',
        p_return_value  => 'C',
        p_help_text     => q'~Derive the list of values from a defined list of values SQL query to create a contains filter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Named List of Values to Filter Exact Match',
        p_return_value  => '1',
        p_help_text     => q'~Derive the list of values from the named list of values to create an equal filter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Named List of Values to Filter Word Contains',
        p_return_value  => '2',
        p_help_text     => q'~Derive the list of values from the named list of values to create a contains filter.~' );
    --
    l_property_id := 695;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'IR_COLUMN_FILTER_NAMED_LOV',
        p_prompt                => 'Named LOV',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'RPT_NAMED_LOV',
        p_display_group_name    => 'COLUMN_FILTER',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_lov,
        p_help_text             => q'~Select a defined named list of values. The column filter only uses the first column of the dynamic list of values query or the display value of the static list of values to filter the report data.~' );
    --
    l_property_id := 696;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'PLAIN_LOV_IR_COLUMN_FILTER_LOV_SQL',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'RPT_LOV',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_display_group_name   => 'COLUMN_FILTER',
        p_help_text            => q'~Enter a SQL query to be used in place of a automatically generated query that selects the distinct column values. The SQL query needs to return one column. Entering a SQL query can improve performance in some reports.  This list of values displays when a user clicks on a column header.~' );
    --
    l_property_id := 698;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_VIEW_FILE_AS',
        p_prompt             => 'View File As',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PRN_CONTENT_DISPOSITION',
        p_display_group_name => 'OUTPUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the content-disposition for the print document. Content-disposition is an extension to the MIME protocol that instructs the browser on how the document displays.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Attachment',
        p_return_value  => 'ATTACHMENT',
        p_help_text     => q'~Saves the file to disk.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inline',
        p_return_value  => 'INLINE',
        p_help_text     => q'~Displays the file instead of the current page.~' );
    --
    l_property_id := 700;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_PAGE_SIZE',
        p_prompt             => 'Size',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PRN_PAPER_SIZE',
        p_display_group_name => 'PAGE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the report page size. To type in your own page width and height, select <strong>Custom</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Letter',
        p_return_value  => 'LETTER',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Legal',
        p_return_value  => 'LEGAL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Tabloid',
        p_return_value  => 'TABLOID' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'A4',
        p_return_value  => 'A4',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'A3',
        p_return_value  => 'A3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom',
        p_return_value  => 'CUSTOM' );
    --
    l_property_id := 701;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_ORIENTATION',
        p_prompt             => 'Orientation',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PRN_ORIENTATION',
        p_display_group_name => 'PAGE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the orientation for the page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Portrait',
        p_return_value  => 'VERTICAL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Landscape',
        p_return_value  => 'HORIZONTAL' );
    --
    l_property_id := 702;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_UNITS',
        p_prompt             => 'Units',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PRN_UNITS',
        p_display_group_name => 'PAGE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the units used to specify page width and height.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inches',
        p_return_value  => 'INCHES' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Millimeters',
        p_return_value  => 'MILLIMETERS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Centimeters',
        p_return_value  => 'CENTIMETERS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Points',
        p_return_value  => 'POINTS' );
    --
    l_property_id := 703;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_WIDTH',
        p_prompt             => 'Width',
        p_property_type      => 'NUMBER',
        p_db_column          => 'PRN_WIDTH',
        p_display_length     => 8,
        p_display_group_name => 'PAGE',
        p_help_text          => q'~Enter the width of this page.~' );
    --
    l_property_id := 704;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_HEIGHT',
        p_prompt             => 'Height',
        p_property_type      => 'NUMBER',
        p_db_column          => 'PRN_HEIGHT',
        p_display_length     => 8,
        p_display_group_name => 'PAGE',
        p_help_text          => q'~Enter the height of this page.~' );
    --
    l_property_id := 705;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_BORDER_WIDTH',
        p_prompt             => 'Border Width',
        p_property_type      => 'NUMBER',
        p_db_column          => 'PRN_BORDER_WIDTH',
        p_display_length     => 8,
        p_max_length         => 255,
        p_display_group_name => 'PAGE',
        p_help_text          => q'~Enter the width in pixels of the table borders.~',
        p_comment_text       => q'~$$$ is this really specified in pixels???? Not in the unit of the page?~' );
    --
    l_property_id := 706;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_BORDER_COLOR',
        p_prompt             => 'Border Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'PRN_BORDER_COLOR',
        p_display_group_name => 'PAGE',
        p_help_text          => q'~<p>Enter the color used to display the border for the specified attribute.</p>~' );
    --
    store_print_font_properties (
        p_font_group              => 'PRINT_PAGE_HEADER',
        p_display_group_name      => 'PAGE_HEADER',
        p_db_column_prefix        => 'PRN_PAGE_HEADER',
        p_property_id_font        => 707,
        p_property_id_font_weight => 708,
        p_property_id_font_size   => 709,
        p_property_id_font_color  => 710 );
    --
    l_property_id := 711;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_PAGE_HEADER_ALIGNMENT',
        p_prompt             => 'Alignment',
        p_property_type      => 'PILL BUTTONS',
        p_db_column          => 'PRN_PAGE_HEADER_ALIGNMENT',
        p_display_group_name => 'PAGE_HEADER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select an alignment for the page header.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'start',
        p_return_value  => 'LEFT',
        p_icon          => 'icon-align-start' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'center',
        p_return_value  => 'CENTER',
        p_icon          => 'icon-align-center' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'end',
        p_return_value  => 'RIGHT',
        p_icon          => 'icon-align-end' );
    --
    l_property_id := 712;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_PAGE_HEADER_TEXT',
        p_prompt             => 'Page Header Text',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'PRN_PAGE_HEADER',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'PAGE_HEADER',
        p_is_translatable    => true,
        p_help_text          => q'~Enter text to appear in the header section of the document. To show values of page or application items, use <code>&amp;ITEM_NAME.</code> syntax.~' );
    --
    store_print_font_properties (
        p_font_group                => 'PRINT_COLUMN_HEADING',
        p_display_group_name        => 'COLUMN_HEADINGS',
        p_db_column_prefix          => 'PRN_HEADER',
        p_property_id_font          => 713,
        p_property_id_font_weight   => 714,
        p_property_id_font_size     => 715,
        p_property_id_font_color    => 716,
        p_property_id_font_bg_color => 717 );
    --
    store_print_font_properties (
        p_font_group                => 'PRINT_COLUMN',
        p_display_group_name        => 'COLUMNS',
        p_db_column_prefix          => 'PRN_BODY',
        p_property_id_font          => 718,
        p_property_id_font_weight   => 719,
        p_property_id_font_size     => 720,
        p_property_id_font_color    => 721,
        p_property_id_font_bg_color => 722 );
    --
    store_print_font_properties (
        p_font_group                => 'PRINT_PAGE_FOOTER',
        p_display_group_name        => 'PAGE_FOOTER',
        p_db_column_prefix          => 'PRN_PAGE_FOOTER',
        p_property_id_font          => 723,
        p_property_id_font_weight   => 724,
        p_property_id_font_size     => 725,
        p_property_id_font_color    => 726 );
    --
    l_property_id := 727;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_PAGE_FOOTER_ALIGNMENT',
        p_prompt             => 'Alignment',
        p_property_type      => 'PILL BUTTONS',
        p_db_column          => 'PRN_PAGE_FOOTER_ALIGNMENT',
        p_display_group_name => 'PAGE_FOOTER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the alignment for the page footer.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'start',
        p_return_value  => 'LEFT',
        p_icon          => 'icon-align-start' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'center',
        p_return_value  => 'CENTER',
        p_icon          => 'icon-align-center' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'end',
        p_return_value  => 'RIGHT',
        p_icon          => 'icon-align-end' );
    --
    l_property_id := 728;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_PAGE_FOOTER_TEXT',
        p_prompt             => 'Page Footer Text',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'PRN_PAGE_FOOTER',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'PAGE_FOOTER',
        p_is_translatable    => true,
        p_help_text          => q'~Enter text to appear in the footer section of the document. To show values of page or application items, use <code>&amp;ITEM_NAME.</code> syntax.~' );
    --
    l_property_id := 729;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_PRINTING',
        p_prompt             => 'Enabled',
        p_property_type      => 'YES NO',
        p_db_column          => 'PRN_OUTPUT',
        p_display_group_name => 'PRINTING',
        p_help_text          => q'~Specify whether to enable report printing. Selecting <strong>On</strong> enables users to download a report in a variety of formats, including PDF, Microsoft Word, Microsoft Excel and HTML.~' );
    --
    l_property_id := 730;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_LINK_TEXT',
        p_prompt             => 'Link Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'PRN_OUTPUT_LINK_TEXT',
        p_display_length     => 40,
        p_max_length         => 255,
        p_display_group_name => 'OUTPUT',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter the text for the download link. To replace the link with a different navigational component, such as a button, leave this field blank. You can set up the other component to start the printing process by using a URL with the following syntax as the target:</p>
<p><pre>f?p=&amp;APP_ID.:&amp;SESSION.:FLOW_XMLP_OUTPUT_R[REGION_ID]</pre></p>
<p><strong>Note</strong>: Replace  <code>[REGION_ID]</code> in the string above with your region ID.</p>~' );
    --
    l_property_id := 731;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_FILE_NAME',
        p_prompt             => 'File Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'PRN_OUTPUT_FILE_NAME',
        p_display_length     => 40,
        p_max_length         => 255,
        p_display_group_name => 'OUTPUT',
        p_help_text          => q'~Enter a name for the downloaded document. If you leave this blank, the region name is used as the file name.~' );
    --
    l_property_id := 732;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_OUTPUT_FORMAT',
        p_prompt             => 'Format',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PRN_FORMAT',
        p_display_group_name => 'OUTPUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the report output format. You can also have the output format specified by an item.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PDF',
        p_return_value  => 'PDF',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Word',
        p_return_value  => 'RTF' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Excel',
        p_return_value  => 'XLS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML',
        p_return_value  => 'HTM',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'XML',
        p_return_value  => 'XML' );
    --
    l_property_id := 733;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_OUTPUT_FORMAT_ITEM',
        p_prompt             => 'Format Item',
        p_property_type      => 'ITEM',
        p_db_column          => 'PRN_FORMAT_ITEM',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'OUTPUT',
        p_help_text          => q'~<p>Enter the page or application item that holds the format value. You can include a <em>Select List</em> page item for users to select the output format at runtime. Valid values are</p>
<dl>
<dt>PDF</dt>
<dd>Opens the document in a PDF Previewer</dd>
<dt>RTF</dt>
<dd>Opens the document in Microsoft Word</dd>
<dt>XLS</dt>
<dd>Opens the document in Microsoft Excel</dd>
<dt>HTM</dt>
<dd>Downloads the document as an HTML file</dd>
<dt>XML</dt>
<dd>Downloads the document as an XML file</dd>
</dl>~' );
    --
    l_property_id := 734;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'REPORT_LAYOUT',
        p_prompt                => 'Layout',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'PRN_TEMPLATE_ID',
        p_display_group_name    => 'OUTPUT',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_report_layout,
        p_help_text             => q'~Select the report layout to utilize when printing the report.~' );
    --
    l_property_id := 735;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_COLUMN_WIDTH_UNITS',
        p_prompt             => 'Width Units',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PRN_WIDTH_UNITS',
        p_display_group_name => 'COLUMNS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the units used to define the column width values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Percent',
        p_return_value  => 'PERCENTAGE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Point',
        p_return_value  => 'POINTS' );
    --
    l_property_id := 736;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REJOIN_EXISTING_SESSIONS',
        p_prompt             => 'Rejoin Sessions',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'REJOIN_EXISTING_SESSIONS',
        p_display_group_name => 'SESSION_MANAGEMENT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Use this attribute to control if &PRODUCT_NAME. should support application URLs that do not contain session IDs.
When rejoin sessions is enabled, &PRODUCT_NAME. will attempt to use the session cookie to join an existing session, when a URL does not contain a session ID.
</p>
<p>A more restrictive instance level setting overrides this page level value.
</p>
<p><em><strong>Note:</strong></em> Enabling rejoin sessions exposes your application to possible security breaches,
as it can enable attackers to take over existing end user sessions.
To learn more, see the <a rel="noopener noreferrer" href="#SYSTEM_HELP_URL#CSH:pd-rejoin-existing-sessions" target="_blank">Rejoin Sessions</a> sections in "Managing Application Security" in the App Builder User's Guide.
</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Disabled',
        p_return_value  => 'N',
        p_help_text     => q'~If the URL does not contain a session ID &PRODUCT_NAME. creates a new session.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Enabled for Public Sessions',
        p_return_value  => 'P',
        p_help_text     => q'~If the URL goes to a public page and does not contain a session ID &PRODUCT_NAME. attempts to utilize the existing session cookie established for that application.
For applications with both public and authenticated pages, a session ID is defined after the end user authenticates.
&PRODUCT_NAME. only joins via the cookie when the session is not yet authenticated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Enabled for All Sessions',
        p_return_value  => 'Y',
        p_help_text     => q'~<p>If the URL does not contain a session ID &PRODUCT_NAME. attempts to utilize the existing session cookie established for that application, providing the following conditions are met:</p>
<p><ul>
  <li>Session State Protection is enabled for the application and the URL includes a valid checksum.
    For public bookmarks, the most restrictive item level protection must be either <em>Unrestricted</em> or <em>Checksum Required - Application Level</em>.</li>
  <li>OR, the URL does not contain payload (a request parameter, clear cache or data value pairs).</li>
</ul></p>
<p>This setting also requires that <em>Embed In Frames</em> is set to <em>Allow from same origin</em> or to <em>Deny</em> for the application.</p>~' );
    --
    l_property_id := 737;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HIDDEN_REGION_TYPE',
        p_prompt             => 'Region Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'PLUG_SOURCE_TYPE',
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_is_query_only      => true );
    --
    l_property_id := 738;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_VISIBLE',
        p_prompt             => 'Show',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_VISIBLE',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Specify whether this column is displayed or hidden. Even if hidden, columns can always be referenced using substitution syntax, <code>&amp;COLUMN_NAME.</code>.~' );
    --
    l_property_id := 739;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'ICON_CSS_CLASSES',
        p_prompt                => 'Icon',
        p_property_type         => 'ICON',
        p_db_column             => 'ICON_CSS_CLASSES',
        p_display_length        => 50,
        p_max_length            => 255,
        p_examples              => q'~<dl>
<dt>Show an arrow pointing right</dt>
<dd><pre>fa-chevron-right</pre></dd>
</dl>~',
        p_display_group_name    => 'APPEARANCE',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~<p>Enter the classes for the icon you want to add to the component. You may add multiple classes by separating them with spaces.</p>
        <p>If your theme uses Font APEX then review the <a rel="noopener noreferrer" target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a> to view available icons and modifiers.</p>~',
        p_comment_text          => '$$$ CSS class names are depending on the theme. Different icon classes are supported. For new universal theme it is http://fontawesome.io/icons/ we should mention something in the help.' );
    --
    l_property_id := 740;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'APPEARANCE_CSS_CLASSES',
        p_prompt                => 'CSS Classes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'CSS_CLASSES',
        p_display_length        => 50,
        p_max_length            => 255,
        p_examples              => q'~<dl>
<dt>Add the CSS classes <code>articlenumber</code> and <code>highlight</code> to the component</dt>
<dd><pre>articlenumber highlight</pre></dd>
</dl>~',
        p_display_group_name    => 'APPEARANCE',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~Enter CSS classes to add to this component. You may add multiple classes by separating them with spaces.~' );
    --
    l_property_id := 741;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'TEMPLATE_OPTIONS',
        p_prompt                => 'Template Options',
        p_property_type         => 'TEMPLATE OPTIONS',
        p_db_column             => 'TEMPLATE_OPTIONS',
        p_display_group_name    => 'APPEARANCE',
        p_lov_type              => 'TEMPLATE_OPTIONS',
        p_help_text             => q'~<p>Select template options to customize the user interface of this component.</p>
<p>You can also modify the template options when running the application using <strong>Live Template Options</strong>.
Live Template Options enables you to customize your application in real time, allowing you to preview and apply various options.
To access Live Template Options, run the application from Application Builder and click <em>Quick Edit</em> in the developer toolbar.
Hover over a page component, such as a region, and click the wrench icon ( <span class="a-Icon icon-util" aria-hidden="true"></span> ) displayed in the top left corner.</p>~' );
    --
    l_property_id := 742;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'TEMPLATE_OPTIONS2',
        p_prompt                => 'Template Options',
        p_property_type         => 'TEMPLATE OPTIONS',
        p_db_column             => 'TEMPLATE_OPTIONS',
        p_display_group_name    => 'APPEARANCE',
        p_lov_type              => 'TEMPLATE_OPTIONS',
        p_help_text             => q'~<p>Select template options to customize the user interface of this component.</p>
<p>You can also modify the template options when running the application using <strong>Live Template Options</strong>.
Live Template Options enables you to customize your application in real time, allowing you to preview and apply various options.
To access Live Template Options, run the application from Application Builder and click <em>Quick Edit</em> in the developer toolbar.
Hover over a page component, such as a region, and click the wrench icon ( <span class="a-Icon icon-util" aria-hidden="true"></span> ) displayed in the top left corner.</p>~' );
    --
    l_property_id := 743;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DIALOG_CHAINED',
        p_prompt             => 'Chained',
        p_property_type      => 'YES NO',
        p_db_column          => 'DIALOG_CHAINED',
        p_display_group_name => 'DIALOG',
        p_help_text          => q'~Select <strong>On</strong> if this dialog is opened by another dialog, and should reuse the same dialog window.
For example, if this dialog is part of a multiple page dialog wizard, and you wish to reuse the dialog window for each step of the wizard.<p><p>
Select <strong>Off</strong> if this dialog is opened by another dialog, and should be opened in a new dialog window. For example, when this dialog is modal,
and you wish to open it within a parent modal dialog window.~' );
    --
    l_property_id := 744;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'COMPUTATION_SQL_COLON',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'COMPUTATION',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_display_group_name   => 'COMPUTATION',
        p_help_text            => q'~Enter a SQL query that provides a value used to populate the computation item. If the result contains multiple rows then the value from each row is formed into a single colon delimited value.~' );
    --
    l_property_id := 745;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_REQUEST_SOURCE_TYPE',
        p_prompt             => 'Request Source Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'REQUEST_SOURCE_TYPE',
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_deprecated_values  => '$NOT_NULL$',
        p_help_text          => q'~This identifies the type of expression that is contained in the request source attribute. ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to the text entered into <em>Static Value</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Database Column',
        p_return_value  => 'DB_COLUMN',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to the column value entered in <em>Database Column</em>, that is retrieved from a built-in fetch row process.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return single value)',
        p_return_value  => 'QUERY',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to the first value returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return colon separated value)',
        p_return_value  => 'QUERY_COLON',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to a single colon separated value, which concatenates each row value, returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Expression', -- no need to make this available for other languages because property is deprecated
        p_return_value  => 'FUNCTION',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to the value that results from executing the <em>PL/SQL Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body', -- no need to make this available for other languages because property is deprecated
        p_return_value  => 'FUNCTION_BODY',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to the value returned from the <em>PL/SQL Function Body</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Preference',
        p_return_value  => 'PREFERENCE',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to the value of the <em>Preference</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Null',
        p_return_value  => 'ALWAYS_NULL',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to null.~',
        p_is_quick_pick => 'Y' );
    --
    l_property_id := 746;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_REQUEST_SOURCE',
        p_prompt             => 'Request Source',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'REQUEST_SOURCE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~When this button is pressed the page will be submitted and the page request will be set to this value. If this value is null and the <em>Request Source Type</em> is <em>Static Value</em>, then the Button Name will be used as the request value.~' );
    --
    l_property_id := 747;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_ELEMENT_PRE_TEXT',
        p_prompt             => 'Pre Text',
        p_property_type      => 'HTML',
        p_db_column          => 'PRE_ELEMENT_TEXT',
        p_display_length     => 50,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_is_translatable    => true,
        p_deprecated_values  => '$NOT_NULL$',
        p_help_text          => q'~<p>Enter additional attributes displayed before the HTML table cell that displays each individual option in a radio group or set of check boxes.
You can include HTML, JavaScript, and shortcuts.</p>
<p>You can reference the following substitution strings:</p>
<dl>
  <dt><code>#CURRENT_FORM_ELEMENT#</code></dt>
  <dd>Obtains the name of the HTML form element that this page item is associated with.</dd>
  <dt><code>#CURRENT_ITEM_NAME#</code></dt>
  <dd>Obtains the name of the current page item.</dd>
</dl>~' );
    --
    l_property_id := 748;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_ELEMENT_POST_TEXT',
        p_prompt             => 'Post Text ',
        p_property_type      => 'HTML',
        p_db_column          => 'POST_ELEMENT_TEXT',
        p_display_length     => 50,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_is_translatable    => true,
        p_deprecated_values  => '$NOT_NULL$',
        p_help_text          => q'~<p>Enter additional attributes displayed after the HTML table cell that displays each individual option in a radio group or set of check boxes.
You can include HTML, JavaScript, and shortcuts.</p>
<p>You can reference the following substitution strings:</p>
<dl>
  <dt><code>#CURRENT_FORM_ELEMENT#</code></dt>
  <dd>Obtains the name of the HTML form element that this page item is associated with.</dd>
  <dt><code>#CURRENT_ITEM_NAME#</code></dt>
  <dd>Obtains the name of the current page item.</dd>
</dl>~' );
    --
    l_property_id := 749;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_GLOBAL_PAGE',
        p_prompt             => 'Is Global Page',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'IS_GLOBAL_PAGE',
        p_display_group_name => 'IDENTIFICATION',
        p_is_query_only      => true );
    --
    l_property_id := 750;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DIALOG_RESIZABLE',
        p_prompt             => 'Resizable',
        p_property_type      => 'YES NO',
        p_db_column          => 'DIALOG_RESIZABLE',
        p_display_group_name => 'DIALOG',
        p_help_text          => q'~<p>Specify whether end users can resize this modal dialog.</p>~' );
    --
    l_property_id := 751;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'CACHE_DEPENDS_ON_ITEMS',
        p_prompt                => 'Depends On Item(s)',
        p_property_type         => 'ITEM',
        p_db_column             => 'DEPENDS_ON_ITEMS',
        p_display_group_name    => 'SERVER_CACHE',
        p_multi_value_delimiter => ',',
        p_display_length        => 50,
        p_max_length            => 4000,
        p_help_text             => q'~Enter a comma separated list of items that cached content depends on.~' );
    --
    l_property_id := 753;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARAMETER_ID',
        p_prompt             => 'Parameter Id',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'PARAMETER_ID',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~~' );
    --
    l_property_id := 754;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_NAVIGATION_TYPE',
        p_prompt             => 'Navigation Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'NAVIGATION_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_is_query_only      => true );
    --
    l_property_id := 755;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AFFECTED_JAVASCRIPT_EXPRESSION',
        p_prompt             => 'JavaScript Expression',
        p_property_type      => 'JAVASCRIPT',
        p_db_column          => 'AFFECTED_ELEMENTS',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'AFFECTED_ELEMENTS',
        p_examples           => q'~<dl>
<dt>Returns a reference to the browser's <code>window</code> DOM object.</dt>
<dd><code>window</code></dd>
<dt>Returns a reference to the browser's <code>document</code> DOM object.</dt>
<dd>document</dd>
<dt>jQuery selector selects all DIV elements that have a class of 'alert', and then returns a jQuery object containing all their parents.</dt>
<dd><code>$( "div.alert" ).parent()</code></dd>
</dl>~',
        p_help_text          => q'~Specify the JavaScript Expression to be evaluated to return a single DOM object, an array of DOM objects or a jQuery object as the element(s) to be affected by this action.~' );
    --
    l_property_id := 756;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WHEN_JAVASCRIPT_EXPRESSION',
        p_prompt             => 'JavaScript Expression',
        p_property_type      => 'JAVASCRIPT',
        p_db_column          => 'TRIGGERING_ELEMENT',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'WHEN',
        p_examples           => q'~<dl>
<dt>Returns a reference to the browser's <code>window</code> DOM object.</dt>
<dd><code>window</code></dd>
<dt>Returns a reference to the browser's <code>document</code> DOM object.</dt>
<dd><code>document</code></dd>
<dt>jQuery selector selects all DIV elements that have a class of 'alert', and then returns a jQuery object containing all their parents.</dt>
<dd><code>$( "div.alert" ).parent()</code></dd>
</dl>~',
        p_help_text          => q'~Enter the JavaScript Expression to be evaluated to return a single DOM object, an array of DOM objects or a jQuery object as the element(s) to trigger the dynamic action.~' );
    --
    l_property_id := 757;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'NAVIGATION_LIST_POSITION',
        p_prompt                   => 'List Position',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'NAVIGATION_LIST_POSITION',
        p_display_group_name       => 'NAVIGATION_MENU',
        p_lov_type                 => 'STATIC',
        p_help_text                => q'~Select the position for the navigation menu list on this page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top',
        p_return_value  => 'TOP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Side',
        p_return_value  => 'SIDE' );
    --
    l_property_id := 758;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'NAV_LIST_TEMPLATE_OPTIONS',
        p_prompt                => 'Template Options',
        p_property_type         => 'TEMPLATE OPTIONS',
        p_db_column             => 'NAV_LIST_TEMPLATE_OPTIONS',
        p_display_group_name    => 'NAVIGATION_MENU',
        p_lov_type              => 'TEMPLATE_OPTIONS',
        p_help_text             => q'~<p>Select template options to customize the user interface of this navigation list.</p>~' );
    --
    l_property_id := 759;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RICH_TEXT_FORMAT',
        p_prompt             => 'Format',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'RICH_TEXT_FORMAT',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the input format for the content rendered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML',
        p_return_value  => 'HTML',
        p_help_text     => q'~Content contains HTML tags and will be rendered without applying special characters escaping. Make sure that the data is safe and does not contain end-user entered data to avoid Cross-Side Scripting vulnerabilities (XSS).~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Markdown',
        p_return_value  => 'MARKDOWN',
        p_help_text     => q'~Content contains Markdown tags which will be translated into safe HTML tags before rendering. The translation of well known Markdown tags will <strong>prevent</strong> Cross-Side Scripting vulnerabilities (XSS).~' );
    --
    l_property_id := 760;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GRID_LABEL_COLUMN_SPAN',
        p_prompt             => 'Label Column Span',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GRID_LABEL_COLUMN_SPAN',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'GRID_COLUMNS',
        p_help_text          => q'~Select how many layout columns the label occupies.~' );
    --
    l_property_id := 761;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FIXED_HEADER',
        p_prompt             => 'Fixed To',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FIXED_HEADER',
        p_display_group_name => 'HEADING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify whether you would like to fix the report's column headers to the top of the <strong>Page</strong> or top of the <strong>Region</strong>, so that the column headers remain visible as the user vertically scrolls the report.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'NONE',
        p_help_text     => q'~Report header is not fixed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region',
        p_return_value  => 'REGION',
        p_help_text     => q'~Fixes the report header to the top of the current region. As the user vertically scrolls within the region, the report header will remain fixed at the top of the region. <strong>Region</strong> level fixed headings could be useful for a page containing multiple regions, for example a dashboard page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page',
        p_return_value  => 'PAGE',
        p_help_text     => q'~Fixes the report header to the top of the page. As the user vertically scrolls the page, the report header will remain fixed at the top of the page. <strong>Page</strong> level fixed headings are useful for when the report is the main content on the page. This setting is not supported when the region is in a dialog.~' );
    --
    l_property_id := 762;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FIXED_HEADER_MAX_HEIGHT',
        p_prompt             => 'Maximum Report Height',
        p_property_type      => 'INTEGER',
        p_db_column          => 'FIXED_HEADER_MAX_HEIGHT',
        p_display_length     => 5,
        p_min_value          => 1,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'HEADING',
        p_help_text          => q'~Enter the maximum height for the report in pixels.~' );
    --
    l_property_id := 763;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'GRID_COLUMN_CSS_CLASSES',
        p_prompt                => 'Column CSS Classes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'GRID_COLUMN_CSS_CLASSES',
        p_display_length        => 40,
        p_max_length            => 255,
        p_display_group_name    => 'LAYOUT',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~<p>Enter CSS classes you want to apply to the layout column that contains this region. You may add multiple classes by separating them with spaces.</p>
        <p>This property can be used to provide fine grained control over the responsiveness and layout of the region's layout column as the viewport size is changed.
        For Universal Theme applications, there are a number of CSS modifiers you may use to extend your page components. Review the Reference section of the Universal Theme Sample Application to learn more.</p>~' );
    --
    l_property_id := 766;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_COND_VALUE',
        p_prompt             => 'Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'TRIGGERING_EXPRESSION',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'CLIENT_SIDE_CONDITION',
        p_help_text          => q'~Enter the value for this condition.~' );
    --
    l_property_id := 767;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'JS_COND_LIST',
        p_prompt                => 'List',
        p_property_type         => 'TEXT',
        p_db_column             => 'TRIGGERING_EXPRESSION',
        p_display_length        => 60,
        p_max_length            => 4000,
        p_multi_value_delimiter => ',',
        p_display_group_name    => 'CLIENT_SIDE_CONDITION',
        p_help_text             => q'~Enter the comma separated list of values for this condition.~' );
    --
    l_property_id := 768;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_COND_JS_EXPRESSION',
        p_prompt             => 'JavaScript Expression',
        p_property_type      => 'JAVASCRIPT',
        p_db_column          => 'TRIGGERING_EXPRESSION',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'CLIENT_SIDE_CONDITION',
        p_help_text          => q'~<p>Specify the JavaScript Expression to be evaluated for this condition.
The code has access to the following dynamic action related attributes:</p>
<dl>
  <dt>this.triggeringElement</dt>
    <dd>A reference to the DOM object of the element that triggered the dynamic action.</dd>
  <dt>this.browserEvent</dt>
    <dd>The event object that triggered the event. Note: On load this is equal to 'load'.</dd>
  <dt>this.data</dt>
    <dd>Optional additional data that can be passed from the event handler.</dd>
</dl>~' );
    --
    l_property_id := 769;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'MASTER_REGION',
        p_prompt                   => 'Master Region',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'MASTER_REGION_ID',
        p_display_group_name       => 'MASTER_DETAIL',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE',
        p_help_text                => q'~<p>Select the master region to which this detail region belongs.<br>
        This should be set when this region is the detail region in a master-detail relationship with another region on this page.</p>
        <p>For the master-detail relationship to work correctly, select the column(s) in this region which are foreign keys to the master region, and specify the <strong>Master Column</strong> accordingly.~' );
    --
    l_property_id := 770;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_EDITABLE',
        p_prompt             => 'Enabled',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_EDITABLE',
        p_display_group_name => 'EDIT',
        p_help_text          => q'~<p>Specify whether end users can edit this Interactive Grid.</p>
        <p>Note - When the Interactive Grid is made editable a process is automatically created to process the rows.~' );
    --
    l_property_id := 771;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EDIT_OPERATIONS',
        p_prompt             => 'Allowed Operations',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'EDIT_OPERATIONS',
        p_display_group_name => 'EDIT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Check which data manipulation operations are allowed on this interactive grid.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Add Row',
        p_return_value  => 'i' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Update Row',
        p_return_value  => 'u' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Delete Row',
        p_return_value  => 'd' );
    --
    l_property_id := 772;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EDIT_ROW_OPERATIONS_COLUMN',
        p_prompt             => 'Allowed Row Operations Column',
        p_property_type      => 'REGION COLUMN',
        p_db_column          => 'EDIT_ROW_OPERATIONS_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'EDIT',
        p_help_text          => q'~Select a column where the column value indicates if the row can be updated and/or deleted. The allowable values are:
        <dl>
          <dt>U</dt>
            <dd>Row can be updated</dd>
          <dt>D</dt>
            <dd>Row can be deleted</dd>
          <dt>UD</dt>
            <dd>Row can be updated or deleted</dd>
        </dl>~' );
    --
    l_property_id := 773;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'ADD_AUTHORIZATION_SCHEME',
        p_prompt                => 'Add',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'ADD_AUTHORIZATION_SCHEME',
        p_display_group_name    => 'EDIT_AUTH',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~Specify an authorization scheme to restrict who can add rows.
In order for an end user to add rows, this authorization scheme must evaluate to TRUE for that user.
If no authorization scheme is provided then any user can add rows in this interactive grid.~' );
    --
    l_property_id := 774;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'UPDATE_AUTHORIZATION_SCHEME',
        p_prompt                => 'Update',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'UPDATE_AUTHORIZATION_SCHEME',
        p_display_group_name    => 'EDIT_AUTH',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~Select an authorization scheme to restrict who can update rows.
In order for an end user to update rows, this authorization scheme must evaluate to TRUE for that user.
If no authorization scheme is provided then any user can update rows in this interactive grid.~' );
    --
    l_property_id := 775;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'DELETE_AUTHORIZATION_SCHEME',
        p_prompt                => 'Delete',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'DELETE_AUTHORIZATION_SCHEME',
        p_display_group_name    => 'EDIT_AUTH',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~Select an authorization scheme to restrict who can delete rows.
        In order for an end user to delete rows, this authorization scheme must evaluate to TRUE for that user.
        If no authorization scheme is provided then any user can delete rows in this interactive grid.~' );
    --
    l_property_id := 776;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOST_UPDATE_CHECK_TYPE',
        p_prompt             => 'Lost Update Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOST_UPDATE_CHECK_TYPE',
        p_display_group_name => 'EDIT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select how to protect data against lost updates.
        Lost updates occur when two or more people try to update the same data, and the last update overwrites updates made by the first user to save changes.
        To prevent this from happening, updates can check the existing column value(s) in the database with the value(s) retrieved when the record was originally queried.</p>
        <p>For example:
          <ol>
            <li>User A queries employee (EMP) records.</li>
            <li>User B queries the same employee records.</li>
            <li>User B updates employee details for EMPNO = 7839 and applies (commits) the changes to the database.</li>
            <li>User A updates employee details for EMPNO = 7839 and is attempting to apply the changes to the database.</li>
          </ol>
          If User A successfully updates the same record, changes made by User B will be lost.</p>
         <p>When User A is attempting to save the employee record, then the data in the database is different from what User A queried originally.
          In step 1 above, the column value(s) originally queried by User A can be captured.
          Then in step 4 above, the value(s) can be compared to the current values in the database.
          This comparison will raise an error for User A, as the database value(s) were updated by User B in step 3.
          This prevents a user from overwriting changes made by another user to the same row.</p>
          <p>Note - Lost Update Type will only be used if the corresponding process, Interactive Grid - Automatic Row Processing (DML), has <strong>Prevent Lost Updates</strong> enabled.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Values',
        p_return_value  => 'VALUES',
        p_help_text       => q'~<p>A checksum value will be calculated for each row, when initially querying the data.
        The checksum is calculated by concatenating all of the updateable columns into a string and then generating a unique value.
        When committing the updated record, this checksum will be compared to the checksum value of the current database record.
        If they are not the same, an error will be raised.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Version Column',
        p_return_value  => 'COLUMN',
        p_help_text       => q'~<p>If your database table includes a column which is incremented every time a record is updated, preferably by a database trigger, then this column can be used instead of calculating checksums.
        This option should not be used if your interactive grid updates data in multiple tables.</p>
        <p>Note - The row version column must be included in the SQL Source for the region.</p>~' );
    --
    l_property_id := 777;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ROW_VERSION_COLUMN',
        p_prompt             => 'Row Version Column',
        p_property_type      => 'REGION COLUMN',
        p_db_column          => 'ROW_VERSION_COLUMN',
        p_column_data_types  => 'VARCHAR2:NUMBER:DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_display_group_name => 'EDIT',
        p_help_text          => q'~Select the column which stores the row version number for the table being updated. This column will be used in the lost update check.~' );
    --
    l_property_id := 778;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ADD_ROW_IF_EMPTY',
        p_prompt             => 'Add Row If Empty',
        p_property_type      => 'YES NO',
        p_db_column          => 'ADD_ROW_IF_EMPTY',
        p_display_group_name => 'EDIT',
        p_help_text          => q'~<p>Specify whether to add a new row if the interactive grid currently has no records returned.
        The <em>No Data Found</em> message will never be displayed as there will always be at least one record displayed.</p>
        <p>Note - If no updates are made to the record that was added it will not be inserted when the region is saved.</p>~' );
    --
    l_property_id := 779;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SUBMIT_CHECKED_ROWS',
        p_prompt             => 'Submit Includes Selected Rows',
        p_property_type      => 'HIDDEN', /* pwolf: pushed to 5.2 -- 'YES NO' */
        p_db_column          => 'SUBMIT_CHECKED_ROWS',
        p_display_group_name => 'EDIT',
        p_help_text          => q'~<p>Specify whether to include checked rows in page processing, generally initiated by a custom button, such as <strong>Mark Completed</strong>.
        These checked rows can then be utilized in a custom process to perform the required action.</p>
        <p>Note - The selected rows will be processed even if nothing on the row has been updated. Generally, only rows which have been inserted, updated or deleted are processed.</p>~' );
    --
    l_property_id := 780;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LAZY_LOADING',
        p_prompt             => 'Lazy Loading',
        p_property_type      => 'YES NO',
        p_db_column          => 'LAZY_LOADING',
        p_display_group_name => 'PERFORMANCE',
        p_help_text          => q'~<p>Specify whether to load the region independently of the data for the region.</p>
        <p>When lazy loading is specified, the page is rendered immediately, showing an empty region, until the data is loaded.
        Generally, the page is not displayed until all of the page is loaded and ready to be rendered.
        Therefore, if it takes 5 seconds to load all of the data for a region, without lazy loading, the end user would have to wait 5 seconds before the page started to render.</p>
        <p>Note - Lazy Loading should only be utilized on data sets that take significant time to load, as this adds unnecessary processing overhead on the database for regions that load quickly.</p>~' );
    --
    l_property_id := 781;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REQUIRES_FILTER',
        p_prompt             => 'Requires Filter',
        p_property_type      => 'HIDDEN', -- pwolf: pushed to 5.2 -- 'YES NO',
        p_db_column          => 'REQUIRES_FILTER',
        p_display_group_name => 'PERFORMANCE',
        p_help_text          => q'~<p>Specify whether to prevent the interactive grid from displaying data, unless at least one filter is defined on one of the report columns.
        This option is designed to limit the data loaded from a very large data set, by restricting the rows returned based on a filter.</p>
        <p>Individual columns can have <strong>Column Filter Required</strong> enabled, ensuring a filter is required for that column, whereas, this option only requires one filter across any of the columns.</p>
        <p>Note - When this option is set and no filters are currently defined, a message will be displayed requesting the users to input a filter.</p>~',
        p_comment_text       => q'~??? [DP] THis feature not yet working - Test region and column filters required~' );
    --
    l_property_id := 782;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FIXED_ROW_HEIGHT',
        p_prompt             => 'Fixed Row Height',
        p_property_type      => 'YES NO',
        p_db_column          => 'FIXED_ROW_HEIGHT',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Specify whether to display the interactive grid with fixed row height.</p>
        <p>If set to <em>Yes</em>, ellipses (...) will be displayed at the end of data, for columns that are too narrow to display all of the data.
        If set to <em>No</em> data will wrap across multiple lines as necessary.</p>~' );
    --
    l_property_id := 783;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGINATION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PAGINATION_TYPE',
        p_display_group_name => 'PAGINATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the pagination type for this report. Often not all report rows are displayed in the report.
        In order to display additional rows, the end user can use the pagination provided.</p>
        <p>Pagination provides the end user with information about the number of rows displayed, and the current position within the result set.</p>~' );
    --
/* pwolf: pushed to APEX 5.2
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'NONE',
        p_help_text     => q'~No pagination provided. End users can only see the records displayed, based on the number specified in <em>Rows per Page</em>.~' );
*/
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page',
        p_return_value  => 'SET',
        p_help_text     => q'~The first rows will be displayed, based on the number specified in <em>Rows per Page</em>.
        If there are additional rows, controls will be added to the report footer, allowing end users to navigate forwards and backwards between row sets.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scroll',
        p_return_value  => 'SCROLL',
        p_help_text     => q'~Initially enough rows to fill the height of the region are displayed.
        As the end user scrolls additional rows are displayed, getting more data from the server as needed.~' );
    --
/* pwolf: pushed to APEX 5.2
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Load More',
        p_return_value  => 'MORE' );
*/
    --
    l_property_id := 784;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_TOTAL_ROW_COUNT',
        p_prompt             => 'Show Total Count',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_TOTAL_ROW_COUNT',
        p_display_group_name => 'PAGINATION',
        p_help_text          => q'~<p>Specify whether to display the total row count in the report footer.<p/>
        <p>Note - An additional query is performed to obtain the total row count, which may hinder performance, especially on very large data sets.</p>~' );
    --
    l_property_id := 785;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_TOOLBAR',
        p_prompt             => 'Show',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_TOOLBAR',
        p_display_group_name => 'TOOLBAR',
        p_help_text          => q'~Specify whether a toolbar is displayed above the report. The toolbar may include search, report type, saved reports, actions, change, and reset functionality.~');
    --
    l_property_id := 786;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TOOLBAR_CONTROLS',
        p_prompt             => 'Controls',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'TOOLBAR_BUTTONS',
        p_display_group_name => 'TOOLBAR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Check which additional controls are to be displayed in the toolbar.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Search Column Selection',
        p_return_value  => 'SEARCH_COLUMN',
        p_help_text     => q'~Displays a drop down list of displayed non-numeric columns. If a column is selected then the search is only performed against the values in the selected column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Search Field',
        p_return_value  => 'SEARCH_FIELD',
        p_help_text     => q'~Displays a text field in the search bar used to enter search criteria.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Actions Menu',
        p_return_value  => 'ACTIONS_MENU',
        p_help_text     => q'~Displays the Actions menu button, which generally includes a comprehensive set of options. These options enables the end user to customize the report based upon the functions you make available.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Reset Button',
        p_return_value  => 'RESET',
        p_help_text     => q'~Displays the Reset button. When this button is pressed, any customizations, such as filters, column width, and ordering will be removed, and the report definition will be reloaded from the server.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Save Button',
        p_return_value  => 'SAVE',
        p_help_text     => q'~Displays the Save button. When this button is pressed, only changes made to this Interactive Grid will be saved, without needing to save the whole page.
        <p>The save button will only be displayed when the Interactive Grid is editable, and the end user has authorization to add, update or delete.</p>~' );
    --
    l_property_id := 787;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ADD_BUTTON_LABEL',
        p_prompt             => 'Add Button Label',
        p_property_type      => 'TEXT',
        p_db_column          => 'ADD_BUTTON_LABEL',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'TOOLBAR',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter an alternative label for the Add button. The default label is <em>Add Row</em>.</p>
        <p>For example, enter <em>Add Employee</em> for an interactive grid where employees are maintained.</p>~' );
    --
    l_property_id := 788;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_SAVE_PUBLIC_REPORT',
        p_prompt             => 'Save Public Report',
        p_property_type      => 'YES NO',
        p_db_column          => 'ENABLE_SAVE_PUBLIC_REPORT',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~<p>Specify whether end users can save their current report definition as a <em>Public</em> report.</p>
        <p>Public reports are displayed in a select list of available reports in the Toolbar, and are displayed to everyone.<p>
        <p>Note - This option is only available to authenticated users, and is further restricted if you also populate the <strong>Save Public Report Authorization</strong>.</p>~' );
    --
    l_property_id := 789;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'PUBLIC_REPORT_AUTH_SCHEME',
        p_prompt                => 'Save Public Report Authorization',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'PUBLIC_REPORT_AUTH_SCHEME',
        p_display_group_name    => 'ENABLE_USER_TO',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~<p>Select an authorization scheme to restrict who can save public report definitions.
        To enable an end user to save a public report, this authorization scheme must evaluate to TRUE for that user.</p>
        <p>Note - If no authorization scheme is provided then public reports may be saved by any user.</p>~' );
    --
    l_property_id := 790;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_SUBSCRIPTIONS',
        p_prompt             => 'Subscription',
        p_property_type      => 'HIDDEN', -- pwolf: Feature didn't make it into 5.1 'YES NO',
        p_db_column          => 'ENABLE_SUBSCRIPTIONS',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can define subscription settings for this report.~' );
    --
    l_property_id := 791;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_DOWNLOAD',
        p_prompt             => 'Download',
        p_property_type      => 'YES NO',
        p_db_column          => 'ENABLE_DOWNLOAD',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can download the report to one of the download formats specified.~' );
    --
    l_property_id := 792;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IG_DOWNLOAD_FORMATS',
        p_prompt             => 'Formats',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'DOWNLOAD_FORMATS',
        p_display_group_name => 'DOWNLOAD',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Check which download formats users can utilize to download the currently displayed columns.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CSV',
        p_return_value  => 'CSV' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML',
        p_return_value  => 'HTML' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PDF',
        p_return_value  => 'PDF' );

    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Excel',
        p_return_value  => 'XLSX' );
    --
    l_property_id := 793;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_MAIL_DOWNLOAD',
        p_prompt             => 'Send as Email',
        p_property_type      => 'YES NO',
        p_db_column          => 'ENABLE_MAIL_DOWNLOAD',
        p_display_group_name => 'DOWNLOAD',
        p_help_text          => q'~<p>Specify whether end users can send an email, with the report download included as an attachment.</p>
<p>Email is only available to authenticated users, and requires the SMTP to be configured within &PRODUCT_NAME. Administration Services application by an Instance Administrator.</p>~');
    --
    l_property_id := 794;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_CUSTOM',
        p_prompt             => 'Custom Icon',
        p_property_type      => 'HTML',
        p_db_column          => 'ICON_VIEW_CUSTOM',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<pre>
&lt;a href="&APEX$ROW_URL!ATTR."&gt;&lt;img src="&EMP_IMG!ATTR." title="&ENAME!ATTR." alt="&ENAME!ATTR."&gt;&lt;br&gt;&ENAME.&lt;/a&gt;
</pre>~',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~<p>Enter the custom column HTML for the Icon View.</p>
<p>The following substitution strings are available:
<ul>
<li><code>&&lt;COLUMN_NAME&gt;.</code> - substitution strings for column names.</li>
<li><code>&&lt;COLUMN_NAME&gt;_LABEL.</code> - substitution strings for column labels.</li>
<li><code>&APEX$ROW_ID.</code> - the record identifier for the row.</li>
<li><code>&APEX$ROW_INDEX.</code> - the record display sequence number.</li>
<li><code>&APEX$ROW_URL.</code> - reference the specified Link Target.</li>
<li><code>&APEX$ROW_STATE_CLASSES.</code> - the record state such as <code>is-inserted</code> or <code>is-deleted</code>.</li>
</ul>
</p>~' );
    --
    l_property_id := 795;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_ICON_TYPE',
        p_prompt             => 'Icon Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ICON_VIEW_ICON_TYPE',
        p_display_group_name => 'ICON_VIEW',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the column type that holds the icon image source.~'  );
    --
/* pwolf: Pushed to 5.2
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Image in BLOB',
        p_return_value  => 'BLOB' );
    --
*/
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Image in URL',
        p_return_value  => 'URL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Icon CSS Classes',
        p_return_value  => 'CSS_CLASSES' );
    --
    l_property_id := 796;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_ICON_BLOB_COLUMN',
        p_prompt             => 'Image Column',
        p_property_type      => 'REGION COLUMN',
        p_db_column          => 'ICON_VIEW_ICON_COLUMN',
        p_column_data_types  => 'BLOB',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Select the interactive grid column that returns the BLOB for the icon image source.~' );
    --
    l_property_id := 797;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_ICON_URL_COLUMN',
        p_prompt             => 'Icon URL',
        p_property_type      => 'REGION COLUMN',
        p_db_column          => 'ICON_VIEW_ICON_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Select the interactive grid column that returns the URL for the icon image source.~' );
    --
    l_property_id := 798;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_ICON_CSS_COLUMN',
        p_prompt             => 'Icon',
        p_property_type      => 'REGION COLUMN',
        p_db_column          => 'ICON_VIEW_ICON_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Select the interactive grid column that returns the CSS classes for the icon image source.~' );
    --
    l_property_id := 799;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_ICON_ATTRIBUTES',
        p_prompt             => 'Icon Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'ICON_VIEW_ICON_ATTRIBUTES',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Enter the icon image attributes used for the HTML IMG tag.~' );
    --
    l_property_id := 800;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IG_ICON_VIEW_LINK_TARGET',
        p_prompt             => 'Link Target',
        p_property_type      => 'LINK',
        p_db_column          => 'ICON_VIEW_LINK_TARGET',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Click the Link Target to invoke a modal dialog. You can enter a custom target to be called when the icon is clicked.~' );
    --
    l_property_id := 801;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_LINK_ATTRIBUTES',
        p_prompt             => 'Link Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'ICON_VIEW_LINK_ATTRIBUTES',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Enter HTML attributes that are associated with the display of each <strong>Link Target</strong>.~' );
    --
    l_property_id := 803;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_INIT_JAVASCRIPT_CODE',
        p_prompt             => 'Column Initialization JavaScript Function',
        p_property_type      => 'JAVASCRIPT',
        p_db_column          => 'JAVASCRIPT_CODE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_examples           => q'~<pre>
function( options ) {
  options.advancedOption = true;
  return options;
}
</pre>
~',
        p_help_text          => q'~<p>Enter a JavaScript function that takes a configuration object for the component, modifies the object, and returns it. This allows advanced customization of the appearance, features, and behavior of the component.</p>~' );
    --
    l_property_id := 804;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALTERNATIVE_LABEL',
        p_prompt             => 'Alternative Label',
        p_property_type      => 'TEXT',
        p_db_column          => 'LABEL',
        p_display_length     => 50,
        p_max_length         => 4000,
        p_display_group_name => 'HEADING',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the alternative label to use in dialogs and in the Single Row View.
        Use an alternative label when the heading contains extra formatting, such as HTML tags, which do not display properly.~' );
    --
    l_property_id := 805;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'IG_COLUMN_GROUP',
        p_prompt                   => 'Group',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'GROUP_ID',
        p_display_group_name       => 'LAYOUT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_ig_column_group,
        p_lov_component_type_scope => 'PARENT',
        p_help_text                => q'~Select the group for this column. Groups are used to associate columns together in the grid and Single Row View.
        <p>Note - Groups are added by expanding the Attributes folder within the Rendering tree, and right-clicking on Column Groups to create a new group.</p>~' );
    --
    l_property_id := 806;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IG_USE_GROUP_FOR',
        p_prompt             => 'Use Group For',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'USE_GROUP_FOR',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select where the group is used to display this column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Both',
        p_return_value  => 'BOTH',
        p_help_text     => q'~The group will display in both the report heading and in the Single Row view.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Single Row View',
        p_return_value  => 'SRV',
        p_help_text     => q'~The group will only display in the Single Row View.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Heading',
        p_return_value  => 'HEADING',
        p_help_text     => q'~The group will only display in the report heading.~' );
    --
    l_property_id := 807;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_FILTER',
        p_prompt             => 'Enabled',
        p_property_type      => 'YES NO',
        p_db_column          => 'ENABLE_FILTER',
        p_display_group_name => 'COLUMN_FILTER',
        p_help_text          => q'~Specify whether end users can filter this column.~' );
    --
    l_property_id := 808;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FILTER_OPERATORS',
        p_prompt             => 'Performance Impacting Operators',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'FILTER_OPERATORS',
        p_display_group_name => 'COLUMN_FILTER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select which filter operators end users can utilize for this column.</p>
        <p>Depending on the size of the data set and column indexes, you may choose to disable certain filter operators to avoid performance issues for the end users.
        Certain operators may cause full table scans instead of using column indexes.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Contains',
        p_return_value  => 'C',
        p_help_text     => q'~<p>Filter returns results of column values containing the filter value.
        &PRODUCT_NAME. will utilize a <code>column LIKE <strong>%</strong>filtervalue<strong>%</strong></code> in the where clause.</p>
        <p>Note - this operator will prevent any column indexes being used, which may result in a full table scan.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Starts With',
        p_return_value  => 'S',
        p_help_text     => q'~<p>Filter returns results of column values starting with the filter value.
        &PRODUCT_NAME. will utilize a <code>column LIKE filtervalue<strong>%</strong></code> in the where clause.</p>
        <p>Note - this operator can utilize available column indexes. {Please review <strong>Case Insensitive</strong> for exceptions}.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Case Insensitive',
        p_return_value  => 'CASE_INSENSITIVE',
        p_help_text     => q'~<p>Filter returns results of column values irrespective of differences in the case of the column value and filter value.
        &PRODUCT_NAME. will utilize a <code>UPPER(column) <em>operator</em> UPPER(filtervalue)</code> in the where clause.</p>
        <p>Note - Generally performing UPPER on both the column and filter value will prevent the use of any column indexes, except for function based column indexes with UPPER(<em>column</em>).</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Regular Expression',
        p_return_value  => 'REGEXP',
        p_help_text     => q'~<p>Filter returns results based on the regular expression entered.</p>
        <p>Note - using REGEXP operators is complex and generally only used by advanced users. Such operators can result in very bad performance.</p>~' );
    --
    l_property_id := 809;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FILTER_TEXT_CASE',
        p_prompt             => 'Text Case',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FILTER_TEXT_CASE',
        p_display_group_name => 'COLUMN_FILTER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select which case the text within the column value is stored.</p>
        <p>If the column can be specified as always upper case, for example <em>Username</em>, or always lower case, then the performance of retrieving filter results can be improved.
          If <strong>Upper</strong> or <strong>Lower</strong> is selected searches will always perform case sensitive searches.</p>
        <p>Note - If Mixed is selected, then end users can specify <strong>Case Sensitive</strong> in the Search and Filter dialogs.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Upper',
        p_return_value  => 'UPPER',
        p_help_text     => q'~For when the column value is always stored in upper case.
        &PRODUCT_NAME. will utilize a <code>column <em>operator</em> UPPER(filtervalue)</code> in the where clause.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Lower',
        p_return_value  => 'LOWER',
        p_help_text     => q'~For when the column value is always stored in lower case.
        &PRODUCT_NAME. will utilize a <code>column <em>operator</em> LOWER(filtervalue)</code> in the where clause.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Mixed',
        p_return_value  => 'MIXED',
        p_help_text     => q'~For when the column value is stored in mixed case. The setting for the <strong>Case Insensitive</strong> operator will determine the where clause utilized.~' );
    --
    l_property_id := 810;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FILTER_IS_REQUIRED',
        p_prompt             => 'Required',
        p_property_type      => 'YES NO',
        p_db_column          => 'FILTER_IS_REQUIRED',
        p_display_group_name => 'COLUMN_FILTER',
        p_help_text          => q'~<p>Specify whether a filter is always required for this column.</p>
        <p>Note - a filter will always be required for this specific column before any data is returned, irrespective of the <strong>Filter Required</strong> option in the interactive grid attributes.</p>~' );
    --
    l_property_id := 811;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FILTER_LOV_TYPE',
        p_prompt             => 'LOV Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FILTER_LOV_TYPE',
        p_display_group_name => 'COLUMN_FILTER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how to derive the list of values for the filter when a user clicks on the column header or in filter dialogs.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'NONE',
        p_help_text     => q'~Disable any values being displayed in the filter.
        This option is appropriate on large columns, generally with most values being over 50 characters, or when a list would not be very usable for selecting a specific record.
        Instead the end user can just type in a partial value and then view the results.~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Distinct Column',
        p_return_value  => 'DISTINCT',
        p_help_text     => q'~Distinct column values are displayed for VARCHAR2 and NUMBER columns. DATE and TIMESTAMP columns utilize the built-in predefined date ranges.~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'SQL_QUERY',
        p_help_text     => q'~Values are derived from the SQL query definition.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Shared Component',
        p_return_value  => 'SHARED',
        p_help_text     => q'~Values are derived from an existing list of values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Values',
        p_return_value  => 'STATIC',
        p_help_text     => q'~Values are derived from a static list of values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body returning SQL Query',
        p_return_value  => 'PLSQL_FUNCTION_BODY',
        p_help_text     => q'~Values are derived from the PL/SQL function body that returns a SQL Query.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use List of Values',
        p_return_value  => 'LOV',
        p_help_text     => q'~Values are derived from list of values.~' );
    --
    l_property_id := 812;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FILTER_EXACT_MATCH',
        p_prompt             => 'Exact Match',
        p_property_type      => 'YES NO',
        p_db_column          => 'FILTER_EXACT_MATCH',
        p_display_group_name => 'COLUMN_FILTER',
        p_help_text          => q'~<p>Specify whether to perform an exact match search when the end user enters text into a column filter.
      If set to <strong>Off</strong>, the filter will perform a contains search, rather than an equals search.</p>
      <p>For example, for a column called TAGS, this is equivalent to TAGS = '<<value>>'. If Exact Match is set to <strong>Off</strong>, this is equivalent to TAGS LIKE '%<<value>>%'. ~' );
    --
    l_property_id := 813;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'IG_COLUMN_FILTER_STATIC_VALUES',
        p_prompt               => 'Static Values',
        p_property_type        => 'TEXT EDITOR',
        p_db_column            => 'FILTER_LOV_QUERY',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_examples           => q'~<pre>Cow,Dog,Cat,Lion</pre>~',
        p_display_group_name   => 'COLUMN_FILTER',
        p_help_text            => q'~<p>Enter a comma delimited list of values for this static list.</p>
        <p>Note - the Static Values will always be displayed in the same order they are specified, not alphabetically.</p>~' );
    --
    l_property_id := 814;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'GRID_ROW_CSS_CLASSES',
        p_prompt                => 'Row CSS Classes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'GRID_ROW_CSS_CLASSES',
        p_display_length        => 40,
        p_max_length            => 255,
        p_display_group_name    => 'LAYOUT',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~<p>Enter CSS classes you want to apply to the layout row that contains this region. You may add multiple classes by separating them with spaces.</p>
        <p>This property can be used to provide fine grained control over the responsiveness and layout of the region's layout row as the viewport size is changed.
        For Universal Theme applications, there are a number of CSS modifiers you may use to extend your page components. Review the Reference section of the Universal Theme Sample Application to learn more.</p>~' );
    --
    l_property_id := 815;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_SOURCE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SOURCE_TYPE',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the source type the value of this column is based on.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Database Column',
        p_return_value  => 'DB_COLUMN',
        p_help_text     => q'~Set to the column value entered in <em>Database Column</em>, that is retrieved from the region source SQL Query.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Expression',
        p_return_value  => 'SQL_EXPRESSION',
        p_help_text     => q'~Set to the value returned from the <em>SQL Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'NONE',
        p_help_text     => q'~The column value is not retrieved from any source. For example, the APEX$ROW_SELECTOR and APEX$ROW_ACTION columns have no source.~');
    --
    l_property_id := 817;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_SQL_EXPRESSION',
        p_prompt             => 'SQL Expression',
        p_property_type      => 'SQL EXPRESSION',
        p_db_column          => 'SOURCE_EXPRESSION',
        p_display_length     => 50,
        p_max_length         => 4000,
        p_display_group_name => 'SOURCE',
        p_examples             => q'~<dl>
<dt>To concatenate two columns together:</dt>
<dd><pre>
FIRSTNAME || ' ' || LASTNAME
</pre></dd>
<dt>Include an inner select:</dt>
<dd><pre>
(select count(*) from emp e where e.deptno = DEPTID)
</pre></dd>
<pre>
The SQL Expression will be combined with the main query.
Make sure that there are no ambiguities, use column aliases.
</pre>
</dl>~',
        p_help_text          => q'~Enter the SQL Expression.~' );
    --
    l_property_id := 818;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_TYPE',
        p_prompt             => 'Data Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DATA_TYPE',
        p_display_length     => 32,
        p_max_length         => 128,
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the data type of the underlying database column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'VARCHAR2',
        p_return_value  => 'VARCHAR2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'NUMBER',
        p_return_value  => 'NUMBER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DATE',
        p_return_value  => 'DATE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'TIMESTAMP',
        p_return_value  => 'TIMESTAMP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'TIMESTAMP WITH TIME ZONE',
        p_return_value  => 'TIMESTAMP_TZ' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'TIMESTAMP WITH LOCAL TIME ZONE',
        p_return_value  => 'TIMESTAMP_LTZ' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'INTERVAL YEAR TO MONTH',
        p_return_value  => 'INTERVAL_Y2M' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'INTERVAL DAY TO SECOND',
        p_return_value  => 'INTERVAL_D2S' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CLOB',
        p_return_value  => 'CLOB' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'BLOB',
        p_return_value  => 'BLOB' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'ROWID',
        p_return_value  => 'ROWID' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'BFILE',
        p_return_value  => 'BFILE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SDO_GEOMETRY',
        p_return_value  => 'SDO_GEOMETRY' );
    --
    l_property_id := 819;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_QUERY_ONLY',
        p_prompt             => 'Query Only',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_QUERY_ONLY',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~<p>Specify whether to exclude the column from DML operations.</p>
        <p>If set to <strong>On</strong>, &PRODUCT_NAME. will not utilize the column when executing Interactive Grid - Automatic Row Processing (DML).
        For example, you should exclude columns whose definitions include concatenations, inner selects, function calls, or a column in an updateable view which is based on an expression.</p>
        <p>All columns which need to be included in any INSERT or UPDATE statements must have this option set to <strong>Off</strong>.</p>
        <p>Note: Columns of type <em>Display Only</em> are <u>also</u> included in the Automatic Row Processing unless this option is turned <strong>On</strong>.</p>~' );
    --
    l_property_id := 820;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_PRIMARY_KEY',
        p_prompt             => 'Primary Key',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_PRIMARY_KEY',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Specify whether the column is one of the primary key values for the underlying table(s).~' );
    --
    l_property_id := 821;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'MASTER_COLUMN',
        p_prompt                   => 'Master Column',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'PARENT_COLUMN_ID',
        p_column_data_types        => 'VARCHAR2:NUMBER:DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_display_group_name       => 'MASTER_DETAIL',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_ig_column,
        p_lov_component_type_scope => 'PAGE',
        p_help_text                => q'~<p>If this column is a foreign key column for the master interactive grid region, as specified by <strong>Master Region</strong> in the region settings, select the corresponding primary key column from the master table.</p>
        <p>For example, if the master region was DEPT and this interactive grid was EMP, then you would select the DEPTNO column within the EMP interactive grid and then select the DEPTNO column from the list of DEPT columns for Master Column.</p>~' );
    --
    l_property_id := 822;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_SORT_GROUP',
        p_prompt             => 'Sort', -- $$$ pawolf09082016: Group by didn't make it into 5.1 Sort/Group By
        p_property_type      => 'YES NO',
        p_db_column          => 'ENABLE_SORT_GROUP',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~<p>Specify whether end users can use this column in sorting.</p>
        <p>Note - Allowing a sort operation can lead to performance issues, especially on large data sets or where appropriate column indexes are not available.</p>~' );
/* $$$ pawolf09082016: Group by didn't make it into 5.1
        p_help_text          => q'~<p>Specify whether end users can use this column in sorts, control breaks, aggregates, and group by.</p>
        <p>Note - Allowing these operations can lead to performance issues, especially on large data sets or where appropriate column indexes are not available.</p>~' );
*/
    --
    l_property_id := 823;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DEFAULT_TYPE',
        p_display_group_name => 'DEFAULT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how the default value of this column is determined.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static',
        p_return_value  => 'STATIC',
        p_help_text     => q'~Set to the value entered in <em>Static</em> value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_help_text     => q'~Set to the value returned from the session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return single value)',
        p_return_value  => 'SQL_QUERY',
        p_help_text     => q'~Set to the first value returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return multiple values)',
        p_return_value  => 'SQL_QUERY_COLON',
        p_help_text     => q'~Set to multiple values returned from the <em>SQL Query</em>. The format of what is returned is determined by the current column's Multiple Values setting. If Multiple Values is set to <em>Delimited Values</em>, the value will be a single concatenated list separated by the defined Separator. If Multiple Values is set to <em>JSON Array</em>, the value will be a JSON Array of the values. If Multiple Values is set to <em>No</em> or the column does not support multiple values, then the value is a single concatenated list separated by a colon.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Expression',
        p_return_value  => 'EXPRESSION',
        p_help_text     => q'~Set to the value returned from the <em>Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body',
        p_return_value  => 'FUNCTION_BODY',
        p_help_text     => q'~Set to the value returned from the <em>Function Body</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Sequence',
        p_return_value  => 'SEQUENCE',
        p_help_text     => q'~<p>Set to the value returned from the <em>Sequence</em> entered. This is a "special" default type: It is executed as part of the Interactive Grid DML process and <em>not</em> during page load. Use this type for auto-generated primary key values, when <strong>Return Primary Key(s) after Insert</strong> cannot be used, for instance when working with views and INSTEAD OF triggers or with database links. The sequence name is case-insensitive; use double quotes to indicate a mixed case sequence name ("mySequence").</p>~' );
    --
    l_property_id := 824;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_VALUE_SQL_QUERY',
        p_prompt             => 'SQL Query (return single value)',
        p_property_type      => 'SQL',
        p_db_column          => 'DEFAULT_EXPRESSION',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'DEFAULT',
        p_help_text          => q'~Set to the first value returned from the <em>SQL Query</em> entered.~' );
    --
    l_property_id := 825;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_VALUE_SQL_QUERY_COLON',
        p_prompt             => 'SQL Query (return multiple values)',
        p_property_type      => 'SQL',
        p_db_column          => 'DEFAULT_EXPRESSION',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'DEFAULT',
        p_help_text          => q'~Set to multiple values returned from the <em>SQL Query</em>. The format of what is returned is determined by the current item's Multiple Values setting. If Multiple Values is set to <em>Delimited Values</em>, the value will be a single concatenated list separated by the defined Separator. If Multiple Values is set to <em>JSON Array</em>, the value will be a JSON Array of the values. If Multiple Values is set to <em>No</em> or the item does not support multiple values, then the value is a single concatenated list separated by a colon.~' );
    --
    l_property_id := 826;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_VALUE_SEQUENCE',
        p_prompt             => 'Sequence',
        p_property_type      => 'TEXT',
        p_db_column          => 'DEFAULT_EXPRESSION',
        p_display_length     => 80,
        p_max_length         => 128,
        p_display_group_name => 'DEFAULT',
        p_help_text          => q'~Enter the name of the database sequence which returns the default value for this column.~' );
    --
    l_property_id := 827;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DUPLICATE_VALUE',
        p_prompt             => 'Duplicate Copies Existing Value',
        p_property_type      => 'YES NO',
        p_db_column          => 'DUPLICATE_VALUE',
        p_display_group_name => 'DEFAULT',
        p_help_text          => q'~Specify whether the column should be defaulted to the existing column value when duplicating the record.~' );
    --
    l_property_id := 828;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXECUTE_READONLY',
        p_prompt             => 'Execute',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'READONLY_FOR_EACH_ROW',
        p_display_group_name => 'READ_ONLY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select when this read only condition is executed.</p>
        <p>If you refer to <em>Columns</em> in your read only condition, you must specify <strong>For Each Row</strong> in order for the condition to be evaluated for each row of the Interactive Grid.
        Otherwise, set to <strong>Once</strong> to evaluate the condition only one time for the region.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'For Each Row',
        p_return_value  => 'Y',
        p_help_text     => q'~Evaluate the read only condition independently for each row.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Once',
        p_return_value  => 'N',
        p_help_text     => q'~Evaluate the read only condition only once for the whole region.~' );
    --
    -- JET Chart Properties (829-862)
    -- Chart Group Settings
    l_property_id := 829;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_CHART_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CHART_TYPE',
        p_display_group_name => 'CHART',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the chart type. The chart type determines the visualization used to render the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area',
        p_return_value  => 'area',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Area charts are useful for comparing trends of cumulative values over time, such as breakdowns of sales trends.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar',
        p_return_value  => 'bar',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Bar charts are useful for comparing values across categories, or over time.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Box Plot',
        p_return_value  => 'boxPlot' ,
        p_help_text     => q'~Box plot charts are useful for analyzing the distribution of data, displaying the minimum, quartiles, median, and maximum values of groups of numerical data. Box plots are also called Box and Whisker diagrams.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bubble',
        p_return_value  => 'bubble' ,
        p_help_text     => q'~Bubble charts define data items using x, y, and z values, making them useful for viewing relationships between 3 dimensions. The third dimension is represented by the size of the bubble.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Combination',
        p_return_value  => 'combo' ,
        p_help_text     => q'~Combination charts allow bar, line, and area series to be displayed on the same chart. The most common use case is lines with bars or lines with stacked bars.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Status Meter Gauge',
        p_return_value  => 'dial',
        p_is_quick_pick => 'Y' ,
        p_help_text     => q'~Status Meter gauges are used to display a metric value in relation to the minimum and maximum possible values for that metric.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Donut',
        p_return_value  => 'donut' ,
        p_help_text     => q'~Donut charts are a pie chart with a hole in the middle. They are useful for visualizing parts of a whole.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Funnel',
        p_return_value  => 'funnel' ,
        p_help_text     => q'~Funnel charts are useful for viewing data for stages of a process, such as the stages of a sales process. The area of a funnel slice is proportional to the value for the corresponding stage.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Gantt',
        p_return_value  => 'gantt' ,
        p_help_text     => q'~Gantt charts are useful for displaying project schedules, displaying bars that indicate the start and end date of tasks.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line',
        p_return_value  => 'line',
        p_is_quick_pick => 'Y' ,
        p_help_text     => q'~Line charts are useful for visualizing trends in a set of values over time and comparing these values across series.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line with Area',
        p_return_value  => 'lineWithArea',
        p_help_text     => q'~Line with Area charts are the same as line charts, with the area below each line filled in.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Pie',
        p_return_value  => 'pie',
        p_is_quick_pick => 'Y' ,
        p_help_text     => q'~Pie charts are useful for visualizing parts of a whole.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Polar',
        p_return_value  => 'polar' ,
        p_help_text     => q'~Polar charts have a radial y-axis and a tangential x-axis. Polar charts can be rendered as bar, line, area, combination, scatter, or bubble chart series types.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Pyramid',
        p_return_value  => 'pyramid' ,
        p_help_text     => q'~Pyramid charts are useful for visualizing hierarchical, proportional and foundation-based relationships, process steps, organizational layers or topics interconnections. The area of a pyramid slice is proportional to its value for the corresponding stage.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Radar',
        p_return_value  => 'radar' ,
        p_help_text     => q'~Radar charts are polar charts with a polygonal grid shape, rather than a circle surround. They are supported for line and area chart series types.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Range',
        p_return_value  => 'range',
        p_help_text     => q'~Range charts display maximum and minimum (high / low) values for each entry, using either bars or area.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scatter',
        p_return_value  => 'scatter',
        p_help_text     => q'~Scatter charts define data items using x and y values, making them useful for viewing relationships between 2 dimensions.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Stock',
        p_return_value  => 'stock' ,
        p_help_text     => q'~Stock charts are useful for displaying information about a stock on a time axis. Unique to stock charts is the candlestick <strong>Stock Render As</strong> property, which allows for displaying open, close, high, low information for the stock price.~' );
    --
    -- Appearance Group Settings
    l_property_id := 830;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ORIENTATION',
        p_prompt             => 'Orientation',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ORIENTATION',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the orientation of this chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Vertical',
        p_return_value  => 'vertical',
        p_help_text     => q'~Displays the data items of the chart vertically.  For example, the bars on a Bar chart will display vertically.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Horizontal',
        p_return_value  => 'horizontal',
        p_help_text     => q'~Displays the data items of the chart horizontally.  For example, the bars on a Bar chart will display horizontally.~');
    --
    l_property_id := 832;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_GROUP',
        p_prompt             => 'Group',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_GROUP',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Specify whether the column is used to group the rows.</p><p>Note: The used Template Component must support Group Templates and grouping depends on Order by. All group columns must be referenced in order by clause and column value cannot be null.</p>~' );
    --
    l_property_id := 833;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'STACK',
        p_prompt                     => 'Stack',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'STACK',
        p_display_group_name         => 'APPEARANCE',
        p_help_text                  => q'~<p>Specify whether the data items are stacked.~' );
    --
    l_property_id := 834;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'STACK_LABEL',
        p_prompt                     => 'Stack Label',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'STACK_LABEL',
        p_display_group_name         => 'APPEARANCE',
        p_help_text                  => q'~<p>Specify whether the total values of stacked data items should be displayed. Only applies to bar charts.~' );
    --
    /*l_property_id := 834;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SPARK_CHART',
        p_prompt             => 'Spark Chart',
        p_property_type      => 'YES NO',
        p_db_column          => 'SPARK_CHART',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Specify whether the chart should be rendered as a spark chart.</p>
        <p>Spark Charts display trends or variations as a line, bar, floating bar, or area. Spark charts are simple and condensed. They are used to provide quick context to data.</p>~',
        p_comment_text       => '$$$ [HF] Retaining this option for EA1. Would like customer feedback before removing.'); */
    --
    l_property_id := 836;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ANIMATION_ON_DISPLAY',
        p_prompt             => 'On Display',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ANIMATION_ON_DISPLAY',
        p_display_group_name => 'ANIMATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the type of animation used when initially displaying the chart.</p>
        <p>The options <strong>Alpha Fade</strong> and <strong>Zoom</strong> do not apply to Dial charts.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto',
        p_help_text     => q'~Apply the Oracle JET defined default animation settings for the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Alpha Fade',
        p_return_value  => 'alphaFade',
        p_help_text     => q'~Fade in the chart when initially displayed. This setting does not apply to Gantt charts.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Zoom',
        p_return_value  => 'zoom',
        p_help_text     => q'~Zoom in to the chart when initially displayed. This setting does not apply to Gantt charts.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'none',
        p_help_text     => q'~No animation applied to the chart when initially displayed.~' );
    --
    l_property_id := 837;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ANIMATION_ON_DATA_CHANGE',
        p_prompt             => 'On Data Change',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ANIMATION_ON_DATA_CHANGE',
        p_display_group_name => 'ANIMATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select whether animation is shown when data is changed on the chart. A data change can occur if the chart gets automatically refreshed, if hide and show behavior is performed when clicking on a legend item, or when chart data is programmatically updated via some custom JavaScript code or a Dynamic Action.</p>
        <p>The options <strong>Slide to Left</strong> and <strong>Slide to Right</strong> do not apply to Dial charts</p>.  ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto',
        p_help_text     => q'~Apply the Oracle JET defined default animation settings for the chart.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide to Left',
        p_return_value  => 'slideToLeft',
        p_help_text     => q'~The data elements slide to the left when data is changed. This setting does not apply to Gantt charts.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide to Right',
        p_return_value  => 'slideToRight',
        p_help_text     => q'~The data elements slide to the right when data is changed. This setting does not apply to Gantt charts.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'none' ,
        p_help_text     => q'~No animation is applied to the chart when data is changed.~' );
    --
    -- Gauge Group Settings
    l_property_id := 838;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GAUGE_ORIENTATION',
        p_prompt             => 'Orientation',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GAUGE_ORIENTATION',
        p_display_group_name => 'GAUGE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of Status Meter Gauge chart to render.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Circular',
        p_return_value  => 'circular' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Horizontal',
        p_return_value  => 'horizontal' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Vertical',
        p_return_value  => 'vertical' );
    --
    l_property_id := 839;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_GAUGE_PLOT_AREA',
        p_prompt                     => 'Show Plot Area',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'GAUGE_PLOT_AREA',
        p_display_group_name         => 'GAUGE',
        p_help_text                  => q'~Specify whether the plot area of a Status Meter Gauge chart is to be rendered.~' );
    --
    -- Data Cursor Group Settings
    l_property_id := 840;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_DATA_CURSOR',
        p_prompt             => 'Cursor',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DATA_CURSOR',
        p_display_group_name => 'DATA_CURSOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select whether the data cursor is enabled on the chart.
        Data cursor is a useful alternative to tooltips when the data items are difficult to navigate to, especially on touch devices.<p/>
        <p>If set to <strong>Automatic</strong>, the data cursor is shown only for line or area charts on touch devices.<p/>
        <p>Note - The data cursor is not shown when the tooltip is null, and it is not supported on polar charts.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto' ,
        p_help_text     => q'~Apply the Oracle JET defined default data cursor display for the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Yes',
        p_return_value  => 'on' ,
        p_help_text     => q'~The data cursor is always displayed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No',
        p_return_value  => 'off',
        p_help_text     => q'~The data cursor is not displayed.~' );
    --
    l_property_id := 841;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_DATA_CURSOR_BEHAVIOR',
        p_prompt             => 'Behavior',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DATA_CURSOR_BEHAVIOR',
        p_display_group_name => 'DATA_CURSOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the behavior of the data cursor on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto',
        p_help_text     => q'~Apply the Oracle JET defined default data cursor behavior for the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Smooth',
        p_return_value  => 'smooth',
        p_help_text     => q'~<p>The data cursor follows the mouse/touch movement smoothly, displaying the tooltip whenever the data cursor is hovering over any part of a data element, and not just specific data points. An indicator identifies the currently selected data element.</p>
        <p>Note - Set <strong>Cursor</strong> to <strong>Yes</strong> for this visualization to work fully.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Snap',
        p_return_value  => 'snap',
        p_help_text     => q'~<p>The data cursor snaps (jumps) to a data element when a mouse/touch movement occurs over the chart, displaying the tooltip whenever the data cursor is hovering over a data element. An indicator identifies the currently selected data element.</p>
        <p>Note - Set <strong>Cursor</strong> to <strong>Yes</strong> for this visualization to work fully.</p>~' );
    --
    l_property_id := 842;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_HOVER_BEHAVIOR',
        p_prompt                     => 'Dim On Hover',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'dim',
        p_prop_type_yesno_override_n => 'none',
        p_db_column                  => 'HOVER_BEHAVIOR',
        p_display_group_name         => 'DATA_CURSOR',
        p_help_text                  => q'~Specify the behavior to be applied when hovering over data items on the chart.<p/>
        Select <strong>On</strong> to dim all data items when not currently hovered over, and highlight only the current data item hovered over.~' );
    --
    -- Settings Group
    l_property_id := 843;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_TIME_AXIS_TYPE',
        p_prompt             => 'Time Axis Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TIME_AXIS_TYPE',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of time axis to display on the chart. This setting will automatically render the chart data in chronological order, and should not be used if you require your data to be rendered in reverse chronological order.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto',
        p_help_text     => q'~Apply the Oracle JET defined default time axis setting for the chart, based on the data being rendered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Disabled',
        p_return_value  => 'disabled',
        p_help_text     => q'~Apply no time axis type setting to the chart.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Enabled',
        p_return_value  => 'enabled',
        p_help_text     => q'~Apply a time axis type setting to the chart.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Mixed Frequency',
        p_return_value  => 'mixedFrequency',
        p_help_text     => q'~The time values displayed on the chart axis in mixed frequency. Since the time value of the data can vary, stacking is not supported.~');
    -- new in 1.2.0
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Skip Gaps',
        p_return_value  => 'skipGaps',
        p_help_text     => q'~The time values displayed on the chart axis will be rendered at a regular interval regardless of any time gaps that may exist in the data.~');
    --
    l_property_id := 873;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SORT_ORDER',
        p_prompt             => 'Sort Order',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SORTING',
        p_display_group_name => 'MULTI_SERIES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the chart sort order of the data on a multi-series chart, based on either the value or label of the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Value - Ascending',
        p_return_value  => 'value-asc',
        p_help_text     => q'~Set to order the chart based on the values in ascending order (1, 2, 3, ...). This setting should only be used for pie charts, bar/line/area charts with one series, or stacked bar/area charts. Sorting will not apply when using a hierarchical group axis.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Value - Descending',
        p_return_value  => 'value-desc',
        p_help_text     => q'~Set to order the chart based on the values in descending order (10, 9, 8, ...). This setting should only be used for pie charts, bar/line/area charts with one series, or stacked bar/area charts. Sorting will not apply when using a hierarchical group axis.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Label - Ascending',
        p_return_value  => 'label-asc',
        p_help_text     => q'~Set to order the chart based on the x-axis labels in ascending order. This is the default sort order. ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Label - Descending',
        p_return_value  => 'label-desc',
        p_help_text     => q'~Set to order the chart based on the x-axis labels in descending order. ~' );
    --
    l_property_id := 844;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_ZOOM_AND_SCROLL',
        p_prompt             => 'Zoom and Scroll',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ZOOM_AND_SCROLL',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify the zoom and scroll behavior of the chart.
        Zoom and scroll allows the end user to use gestures, such as dragging on the plot area, using the mouse wheel, or two-finger pinches, to resize the values displayed and navigate within the chart to display different chart values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No',
        p_return_value  => 'off',
        p_help_text     => q'~Zoom and scroll are disabled for the chart.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Delayed',
        p_return_value  => 'delayed',
        p_help_text     => q'~The change to the data display will wait until the zoom/scroll action is done.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Delayed Scroll Only',
        p_return_value  => 'delayedScrollOnly',
        p_help_text     => q'~The change to the data display will wait until the scroll action is done.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Live',
        p_return_value  => 'live',
        p_help_text     => q'~Live behavior means that the chart will be updated continuously as it is being manipulated.
        For large data sets or slow client environments, it is recommended to select <strong>Delayed</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Live Scroll Only',
        p_return_value  => 'liveScrollOnly',
        p_help_text     => q'~Live Scroll Only behavior means that the chart will be updated continuously as it is being scrolled.
        For large data sets or slow client environments, consider selecting <strong>Delayed Scroll Only</strong>.~' );
    --
    l_property_id := 845;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PIE_OTHER_THRESHOLD',
        p_prompt             => 'Pie Chart Other Threshold',
        p_property_type      => 'NUMBER',
        p_db_column          => 'PIE_OTHER_THRESHOLD',
        p_display_length     => 5,
        p_min_value          => 0,
        p_max_value          => 1,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~<p>Enter the fraction of the whole pie chart, below which the slices are aggregated into an "Other" slice.  Valid values range from 0 (default) to 1</p>
        <p>For example, a value of 0.15 would cause all slices which are less than 15% of the pie to be aggregated into the "Other" slice.</p>~' );
    --
    -- Value Group Settings
    l_property_id := 846;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_MIN',
        p_prompt             => 'Minimum',
        p_property_type      => 'INTEGER',
        p_db_column          => 'VALUE_MIN',
        p_display_length     => 10,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Specify a minimum value for the chart.~' );
    --
    l_property_id := 831;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_TEXT_TYPE',
        p_prompt             => 'Value Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_TEXT_TYPE',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify how the value should be displayed on the chart, either as a number or a percentage of the total value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Number',
        p_return_value  => 'number',
        p_help_text     => q'~<p>The value will be displayed as a number on the chart.</p> <p>Note: the <strong>Format</strong> attribute should only be used to apply custom decimal or currency formatting to the label and value displayed on the chart.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Percent',
        p_return_value  => 'percent',
        p_help_text     => q'~<p>The value will be displayed as a percent between 0% and 100%.</p> <p>Note: When <strong>Format</strong> is set to <strong>Percent</strong>, the values on the chart are multiplied by 100 to format as a percent. If you wish to use the Format attribute, ensure that Label Type is set to number.</p>~' );

    --
    l_property_id := 847;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_FORMAT_TYPE',
        p_prompt             => 'Format',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_FORMAT_TYPE',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a numeric, date and/or time type of formatting to be applied to the value on the chart.  For date and/or time formatting, ensure the chart attribute <strong>Time Axis Type</strong> is set to one of the following values, depending on your chart data: <strong>Enabled</strong>, <strong>Mixed Frequency</strong>, or <strong>Skip Gaps</strong>. The date and/or time formatting options are only applicable to the x axis of a chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Date - Short',
        p_return_value  => 'date-short',
        p_help_text     => q'~When a date is formatted as short, the formatted date will contain year, numeric-month (MM/M), day. For example, 1/6/16.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Date - Medium',
        p_return_value  => 'date-medium',
        p_help_text     => q'~When a date is formatted as medium, the formatted date will contain year, abbreviated-month (MMM), day. For example, Jan 6, 2016.
        For some languages, abbreviated months are not used; in that case, the medium format will contain the numeric month (MM/M).~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Date - Long',
        p_return_value  => 'date-long',
        p_help_text     => q'~When a date is formatted as long, the formatted date will contain year, long-month, day. For example, January 6, 2016.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Date - Full',
        p_return_value  => 'date-full',
        p_help_text     => q'~When a date is formatted as full, the formatted date will contain long-weekday (EEEE), year (y), long-month (MMMM), day (d). For example, Wednesday, January 6, 2016.
        For some languages, long months are not used; for example, in Japanese the numeric month is used in patterns.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Time - Short',
        p_return_value  => 'time-short',
        p_help_text     => q'~When a time is formatted as short, the formatted time will contain hour, minute. For example, 7:30 AM.
        The hour format depends on whether the application language uses 12-hour time or not.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Time - Medium',
        p_return_value  => 'time-medium',
        p_help_text     => q'~When a time is formatted as medium, the formatted time will contain hour, minute, second. For example, 7:30:21 AM.
        The hour format depends on whether the application language uses 12-hour time or not.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Time - Long',
        p_return_value  => 'time-long',
        p_help_text     => q'~When a time is formatted as long, the formatted time will contain hour, minute, second, and zone (z). For example, 7:30:21 AM.
        The hour format depends on whether the application language uses 12-hour time or not.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Time - Full',
        p_return_value  => 'time-full',
        p_help_text     => q'~When a time is formatted as full, the formatted time will contain hour (h/H), minute (mm), second (ss), and zone (zzzz). For example, 7 h 30 min 21 s.
        The hour format depends on whether the application language uses 12-hour time or not.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DateTime - Short',
        p_return_value  => 'datetime-short',
        p_help_text     => q'~When a date-time is formatted as short, the formatted date-time will contain year, numeric-month (MM/M), day, hour, minute. For example, 1/6/16 7:30 AM.
        The hour format depends on whether the application language uses 12-hour time or not.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DateTime - Medium',
        p_return_value  => 'datetime-medium',
        p_help_text     => q'~When a date-time is formatted as medium, the formatted date-time will contain year, abbreviated-month (MMM), day, hour, minute, second, and zone (z). For example, Jan 6, 2016 7:30:21 AM.
        The hour format depends on whether the application language uses 12-hour time or not.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DateTime - Long',
        p_return_value  => 'datetime-long',
        p_help_text     => q'~When a date-time is formatted as long, the formatted date-time will contain year, long-month, day, hour, minute, second, and zone (z). For example, Jan 6, 2016 7:30:21 AM.
        The hour format depends on whether the application language uses 12-hour time or not.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DateTime - Full',
        p_return_value  => 'datetime-full',
        p_help_text     => q'~When a date-time is formatted as full, the formatted date-time will contain long-weekday (EEEE), year (y), long-month (MMMM), day (d), hour (h/H), minute (mm), second (ss), and zone (zzzz). For example, Wednesday, January 6, 2016 7 h 30 min 21 s.
        The hour format depends on whether the application language uses 12-hour time or not.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Decimal',
        p_return_value  => 'decimal',
        p_help_text     => q'~When a number is formatted as a decimal, the decimal character is replaced with the most appropriate symbol for the locale. In English this is a decimal point ("."), while in many locales it is a decimal comma (",").~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Currency',
        p_return_value  => 'currency',
        p_help_text     => q'~When a number is formatted as currency, the Currency property is required to be set to specify the currency that will be used when formatting the number.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Percent',
        p_return_value  => 'percent',
        p_help_text     => q'~When a number is formatted as a percent, the values on the chart are multiplied by 100 to format as a percent.~');
    --
    l_property_id := 848;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_CURRENCY',
        p_prompt             => 'Currency',
        p_property_type      => 'TEXT',
        p_db_column          => 'VALUE_CURRENCY',
        p_display_length     => 10,
        p_max_length         => 128,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the currency that will be used when formatting the value on the chart.
        The value should be a ISO 4217 alphabetic currency code. If the format is set to currency, and no currency is defined in the <strong>Currency</strong> property, the currency will be automatically derived from the application language when the chart is rendered.~' );
    --
    l_property_id := 849;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_NUMERIC_PATTERN',
        p_prompt             => 'Pattern',
        p_property_type      => 'TEXT',
        p_db_column          => 'VALUE_NUMERIC_PATTERN',
        p_display_length     => 10,
        p_max_length         => 30,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter an optional localized numeric or date pattern, where the characters used in the pattern conform to Unicode CLDR for date time formats.
        When present, this will override the Format selected.~',
        p_examples           => q'~
<dl><dt>Numeric Pattern to represent temperatures in fahrenheit, for example 15&deg;F:</dt>
<dd><pre>
#&deg;F
</pre></dd>
<dt>Numeric pattern to represent numbers in specific format, for example, 12,30,00:</dt>
<dd><pre>
##,##,##
</pre></dd>
<dt>Numeric pattern to represent numbers in millimeters:</dt>
<dd><pre>
# mm
</pre></dd>
<dt>Date pattern to represent date as Month Year, for example, Jul 2016:</dt>
<dd><pre>
MMM yyyy
</pre></dd>
<dt>Date pattern to represent date as Month, for example, July:</dt>
<dd><pre>
MMMM
</pre></dd>
</dl>~' );

    --
    l_property_id := 850;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_FORMAT_SCALING',
        p_prompt             => 'Format Scaling',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_FORMAT_SCALING',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the scaling behavior of the value on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'none');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Thousand',
        p_return_value  => 'thousand');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Million',
        p_return_value  => 'million');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Billion',
        p_return_value  => 'billion');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Trillion',
        p_return_value  => 'trillion');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Quadrillion',
        p_return_value  => 'quadrillion');
    --
    -- Tooltip Group Settings
    l_property_id := 851;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SHOW_TOOLTIP',
        p_prompt             => 'Show',
        p_property_type      => 'YES NO',
        p_db_column          => 'TOOLTIP_RENDERED',
        p_display_group_name => 'TOOLTIP',
        p_help_text          => q'~Specify whether a tooltip should be rendered on the chart.~' );
    --
    l_property_id := 852;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_SERIES_NAME',
        p_prompt             => 'Show Series Name',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_SERIES_NAME',
        p_display_group_name => 'TOOLTIP',
        p_help_text          => q'~Specify whether the series name should be displayed in the tooltip rendered on the chart.~' );
    --
    l_property_id := 853;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_GROUP_NAME',
        p_prompt             => 'Show Group Name',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_GROUP_NAME',
        p_display_group_name => 'TOOLTIP',
        p_help_text          => q'~Specify whether the group name should be displayed in the tooltip rendered on the chart.~' );
    --
    l_property_id := 854;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SHOW_VALUE',
        p_prompt             => 'Show Value',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_VALUE',
        p_display_group_name => 'TOOLTIP',
        p_help_text          => q'~Specify whether to display values in the tooltip on your chart. Values are derived from your chart query and display next to your chart data.~' );
    --
    l_property_id := 855;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SHOW_GANTT_ROW',
        p_prompt             => 'Show Row',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_ROW',
        p_display_group_name => 'TOOLTIP',
        p_help_text          => q'~Specify whether to display row information in the tooltip on your chart.~' );
    --
    l_property_id := 856;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SHOW_GANTT_START',
        p_prompt             => 'Show Start Date',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_START',
        p_display_group_name => 'TOOLTIP',
        p_help_text          => q'~Specify whether to display the start date in the tooltip on your chart.~' );
    --
    l_property_id := 865;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SHOW_LABEL',
        p_prompt             => 'Show Label',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_START',
        p_display_group_name => 'TOOLTIP',
        p_help_text          => q'~Specify whether to display the label in the tooltip on your chart.~' );
    --
    l_property_id := 866;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SHOW_GANTT_END',
        p_prompt             => 'Show End Date',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_ROW',
        p_display_group_name => 'TOOLTIP',
        p_help_text          => q'~Specify whether to display the end date in the tooltip on your chart.~' );
    --
    l_property_id := 867;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SHOW_GANTT_PROGRESS',
        p_prompt             => 'Show Progress',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_ROW',
        p_display_group_name => 'TOOLTIP',
        p_help_text          => q'~Specify whether to display the progress in the tooltip on your chart.~' );
--
    l_property_id := 868;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SHOW_GANTT_BASELINE',
        p_prompt             => 'Show Baseline',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_ROW',
        p_display_group_name => 'TOOLTIP',
        p_help_text          => q'~Specify whether to display the baseline information in the tooltip on your chart.~' );
    --
    l_property_id := 857;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'LEGEND_RENDERED',
        p_prompt                     => 'Show',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'LEGEND_RENDERED',
        p_display_group_name         => 'LEGEND',
        p_help_text                  => q'~Specify whether a legend should be rendered on the chart.~' );
    --
    l_property_id := 858;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LEGEND_POSITION',
        p_prompt             => 'Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LEGEND_POSITION',
        p_display_group_name => 'LEGEND',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the position of a legend on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Start',
        p_return_value  => 'start' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'End',
        p_return_value  => 'end');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top',
        p_return_value  => 'top');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bottom',
        p_return_value  => 'bottom');
    --
    l_property_id := 859;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HIDE_AND_SHOW_BEHAVIOR',
        p_prompt             => 'Hide and Show Behavior',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'HIDE_AND_SHOW_BEHAVIOR',
        p_display_group_name => 'LEGEND',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the hide and show behavior that is performed when clicking on a legend item.
        For example, deselecting a legend item will hide its associated data series on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'none',
        p_help_text     => q'~ The chart will not enable the hide and show behavior.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Rescale',
        p_return_value  => 'withRescale',
        p_help_text     => q'~ The chart axes will rescale as the minimum and maximum values of the visible data increase or decrease. This is useful for series with largely varying values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No Rescaling',
        p_return_value  => 'withoutRescale',
        p_help_text     => q'~ The chart axes will not rescale. This is useful to keep the user in context.~' );
    --
    l_property_id := 860;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'OVERVIEW_RENDERED',
        p_prompt                     => 'Show',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'OVERVIEW_RENDERED',
        p_display_group_name         => 'OVERVIEW',
        p_help_text                  => q'~<p>Specify whether an overview scrollbar should be rendered on the chart.
        Currently this option is only supported for vertical bar, line, area, line with area, stock, and combination charts.</p>
        <p>Note - The <strong>Zoom and Scroll</strong> option must be enabled for the overview scrollbar to be displayed.</p>~' );
    --
    l_property_id := 861;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OVERVIEW_HEIGHT',
        p_prompt             => 'Height',
        p_property_type      => 'TEXT',
        p_db_column          => 'OVERVIEW_HEIGHT',
        p_display_length     => 5,
        p_max_length         => 5,
        p_display_group_name => 'OVERVIEW',
        p_help_text          => q'~Enter the height of the overview scrollbar, in pixels (for example 50px) or percent (for example 15%), to be rendered on the chart.~' );
    --
    l_property_id := 862;
        store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_MAX_WIDTH',
        p_prompt             => 'Maximum Width',
        p_property_type      => 'INTEGER',
        p_db_column          => 'WIDTH',
        p_display_length     => 5,
        p_min_value          => 1,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~<p>Enter the maximum width of the chart in pixels. The maximum width defines a fixed width for your chart region.
Alternatively, to enable automatic resizing of the chart width, leave this item empty. The width is then automatically set to 100% of the region.</p>~' );
    --
    l_property_id := 863;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_ZOOM_DIRECTION',
        p_prompt             => 'Zoom Direction',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ZOOM_DIRECTION',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the zoom direction of the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Both Axes',
        p_return_value  => 'auto',
        p_help_text     => q'~Zooms in both x and y axes direction.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'X-Axis',
        p_return_value  => 'x',
        p_help_text     => q'~Zooms only in the x-axis direction.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Y-Axis',
        p_return_value  => 'y',
        p_help_text     => q'~Zooms only in the y-axis direction.~' );
    --
    l_property_id := 872;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_INITIAL_ZOOMING',
        p_prompt             => 'Initial Zooming',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'INITIAL_ZOOMING',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the initial zooming of the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'First',
        p_return_value  => 'first',
        p_help_text     => q'~Initially zoom to the first data points that can fit in the chart plot area.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Last',
        p_return_value  => 'last',
        p_help_text     => q'~Initially zoom to the last data points that can fit in the chart plot area.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'none',
        p_help_text     => q'~To disable initial zooming.~' );
    --
    l_property_id := 864;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_TYPE_COMBO',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SERIES_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the chart series type. You can also create a chart combining different types of series on the same data plot.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area',
        p_return_value  => 'area' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar',
        p_return_value  => 'bar' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line',
        p_return_value  => 'line' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line with Area',
        p_return_value  => 'lineWithArea' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar Range',
        p_return_value  => 'barRange' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area Range',
        p_return_value  => 'areaRange' );
    --
    l_property_id := 869;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_Z_COLUMN_NAME',
        p_prompt             => 'Z',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER',
        p_db_column          => 'ITEMS_Z_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the z value on this chart.  The z value defines the bubble radius for a bubble chart, the width of a box plot item, and the bar width for a bar or combination chart. ~' );
    --
    l_property_id := 870;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINK_TARGET_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LINK_TARGET_TYPE',
        p_display_group_name => 'LINK',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the action to be performed when the chart is clicked.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Redirect to Page in this Application',
        p_return_value  => 'REDIRECT_PAGE',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Redirect to a page in the current application, with optional additional attributes for resetting pagination, setting the request value, clearing cache and setting item values, on the target page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Redirect to Page in a different Application',
        p_return_value  => 'REDIRECT_APP',
        p_help_text     => q'~<p>Redirect to a page in a different application, with optional additional attributes for resetting pagination, setting the request value, clearing cache and setting item values, on the target page.</p>
<p>Note: Redirecting to a page in different application relies on deep linking being enabled in the target application. To enable deep linking, go to the application's <em>Security</em> attributes and enable <em>Deep Linking</em>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Redirect to URL',
        p_return_value  => 'REDIRECT_URL',
        p_help_text     => q'~Redirect to the target URL you specify.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Redirect to URL returned by First Column',
        p_return_value  => 'DEPRECATED_LINK_COLUMN',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Redirect to the target URL returned by the first column of the SQL query.~' );
    --
    l_property_id := 886;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SERIES_NAME_COLUMN_NAME',
        p_prompt             => 'Series Name',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_db_column          => 'SERIES_NAME_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining your multi-series dynamic query.~' );
    --
    l_property_id := 888;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_LOW_COLUMN_NAME',
        p_prompt             => 'Low',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER',
        p_db_column          => 'ITEMS_LOW_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the low value on this chart.~' );
    --
    l_property_id := 889;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_HIGH_COLUMN_NAME',
        p_prompt             => 'High',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER',
        p_db_column          => 'ITEMS_HIGH_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the high value on this chart.~' );
    --
    l_property_id := 890;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_OPEN_COLUMN_NAME',
        p_prompt             => 'Open',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER:DATE', -- $$$
        p_db_column          => 'ITEMS_OPEN_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the opening value on this chart.~' );
    --
    l_property_id := 891;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_CLOSE_COLUMN_NAME',
        p_prompt             => 'Close',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER:DATE', -- $$$
        p_db_column          => 'ITEMS_CLOSE_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the closing value on this chart.~' );
    --
    l_property_id := 892;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_VOLUME_COLUMN_NAME',
        p_prompt             => 'Volume',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER:DATE', -- $$$
        p_db_column          => 'ITEMS_VOLUME_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the volume value on this chart. When values are provided, the volume is displayed on the y2 axis.~' );
    --
    l_property_id := 893;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_X_COLUMN_NAME',
        p_prompt             => 'X',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER',
        p_db_column          => 'ITEMS_X_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the x value on this chart.~' );     --
    --
    l_property_id := 894;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_Y_COLUMN_NAME',
        p_prompt             => 'Y',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER',
        p_db_column          => 'ITEMS_Y_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the y value on this chart.~' );
    --
    l_property_id := 895;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_TARGET_VALUE',
        p_prompt             => 'Target Value',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER:DATE', -- $$$
        p_db_column          => 'ITEMS_TARGET_VALUE',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the target value on this chart. When set, the value attribute defines the filled area within the slice and this represents the value of the whole slice. ~' );
    --
    l_property_id := 871;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_MIN_VALUE',
        p_prompt             => 'Minimum Value',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER',
        p_db_column          => 'ITEMS_MIN_VALUE',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the minimum value on this chart.~' );
    --
    l_property_id := 896;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_MAX_VALUE',
        p_prompt             => 'Maximum Value',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER',
        p_db_column          => 'ITEMS_MAX_VALUE',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the maximum value on this chart.~' );
    --
    l_property_id := 897;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GROUP_NAME_COLUMN_NAME',
        p_prompt             => 'Legend Tooltip',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_db_column          => 'GROUP_NAME_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining a short descriptive custom tooltip on the series name(s) on the chart legend. For a Box Plot chart, the column should not match the selected Value column mapping. Selection of a column that matches the Value column mapping will result in no legend tooltip being rendered on the chart.~' );
    --
    l_property_id := 898;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GROUP_SHORT_DESC_COLUMN_NAME',
        p_prompt             => 'Label Tooltip',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_db_column          => 'GROUP_SHORT_DESC_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining a short descriptive custom tooltip on the x axis label(s) of the chart. For a Box Plot chart, the column should not match the selected Value column mapping. Selection of a column that matches the Value column mapping will result in no label tooltip being rendered on the chart.~' );
    --
    l_property_id := 899;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_LABEL_COLUMN_NAME',
        p_prompt             => 'Label',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_db_column          => 'ITEMS_LABEL_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the label(s) of the x-axis on the chart. For a Stock chart, the column should be of data type Date/Timestamp, to represent the stock information on a time axis.~' );
    --
    l_property_id := 900;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_SHORT_DESC_COLUMN_NAME',
        p_prompt             => 'Custom Tooltip',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_db_column          => 'ITEMS_SHORT_DESC_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining a short descriptive custom tooltip on the data points of the chart. To render a tooltip on chart data points, ensure the chart tooltip attribute <strong>Show</strong> is set to <strong>On</strong>. For a Box Plot chart, the column should not match the selected Value column mapping. Selection of a column that matches the Value column mapping will result in no custom tooltip being rendered on the chart.~' );
    --
    l_property_id := 901;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_COLOR',
        p_prompt             => 'Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'COLOR',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Enter the color to be displayed for the data items associated with this chart series. You can utilize <code>&COLUMN_VALUE.</code> substitutions. For a Status Meter Gauge chart, this color will be applied to the indicator, with the exception of when thresholds have been defined, and the <strong>Threshold Display</strong> attribute is set to <strong>On Indicator</strong>.</p>~' );
    --
    l_property_id := 902;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINE_STYLE',
        p_prompt             => 'Style',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LINE_STYLE',
        p_display_group_name => 'LINE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify the style of the line to be rendered on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dotted',
        p_return_value  => 'dotted' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dashed',
        p_return_value  => 'dashed' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Solid',
        p_return_value  => 'solid' );
    --
    l_property_id := 903;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINE_WIDTH',
        p_prompt             => 'Width',
        p_property_type      => 'INTEGER',
        p_db_column          => 'LINE_WIDTH',
        p_display_group_name => 'LINE',
        p_unit               => c_unit_pixels,
        p_help_text          => q'~Specify the width of the line to be rendered on the chart.~' );
    --
    l_property_id := 904;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LINE_TYPE',
        p_display_group_name => 'LINE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify the type of line to be rendered on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Centered Stepped',
        p_return_value  => 'centeredStepped' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Curved',
        p_return_value  => 'curved' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Centered Segmented',
        p_return_value  => 'centeredSegmented' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Stepped',
        p_return_value  => 'stepped' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Segmented',
        p_return_value  => 'segmented' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Straight',
        p_return_value  => 'straight' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'none' );
    --
    l_property_id := 905;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MARKER_RENDERED',
        p_prompt             => 'Show',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'MARKER_RENDERED',
        p_display_group_name => 'MARKER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify whether a marker should be rendered on the data items of the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Yes',
        p_return_value  => 'on' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No',
        p_return_value  => 'off' );
    --
    l_property_id := 906;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MARKER_SHAPE',
        p_prompt             => 'Shape',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'MARKER_SHAPE',
        p_display_group_name => 'MARKER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the shape of the marker to be rendered on the data items of the chart. Only <strong>auto</strong> is supported for range series. ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Circle',
        p_return_value  => 'circle' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Diamond',
        p_return_value  => 'diamond' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Human',
        p_return_value  => 'human' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Plus',
        p_return_value  => 'plus' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Square',
        p_return_value  => 'square' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Star',
        p_return_value  => 'star' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Triangle Down',
        p_return_value  => 'triangleDown' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Triangle Up',
        p_return_value  => 'triangleUp' );
    --
    l_property_id := 907;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'ASSIGNED_TO_Y2',
        p_prompt                     => 'Assigned To Y2 Axis',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'ASSIGNED_TO_Y2',
        p_display_group_name         => 'APPEARANCE',
        p_help_text                  => q'~Specify whether the current series is assigned to the Y2 axis rendered on the chart.~' );
    --
    l_property_id := 908;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_LABEL_RENDERED',
        p_prompt             => 'Show',
        p_property_type      => 'YES NO',
        p_db_column          => 'ITEMS_LABEL_RENDERED',
        p_display_group_name => 'LABEL',
        p_help_text          => q'~Specify whether the label(s) should be rendered on the chart. This setting applies to the visibility of the metric value on a Dial chart. ~' );
    --
    l_property_id := 909;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_LABEL_POSITION',
        p_prompt             => 'Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ITEMS_LABEL_POSITION',
        p_display_group_name => 'LABEL',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the position of the label(s) to be rendered on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center',
        p_return_value  => 'center' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Outside Slice',
        p_return_value  => 'outsideSlice' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Above Marker',
        p_return_value  => 'aboveMarker' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Below Marker',
        p_return_value  => 'belowMarker' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Before Marker',
        p_return_value  => 'beforeMarker' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Marker',
        p_return_value  => 'afterMarker' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inside Bar Edge',
        p_return_value  => 'insideBarEdge' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Outside Bar Edge',
        p_return_value  => 'outsideBarEdge' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'none' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Start',
        p_return_value  => 'start' );
    --
    l_property_id := 910;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'ITEMS_LABEL_CSS_CLASSES',
        p_prompt                => 'CSS Styling',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'ITEMS_LABEL_CSS_CLASSES',
        p_display_length        => 80,
        p_max_length            => 255,
        p_display_group_name    => 'LABEL',
        p_help_text             => q'~<p>Enter a CSS style string defining the style of the labels on this chart.</p>~' );
    --
    l_property_id := 912;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_SHOW_AXIS',
        p_prompt                     => 'Show Axis',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'IS_RENDERED',
        p_display_group_name         => 'IDENTIFICATION',
        p_help_text                  => q'~Specify whether the axis is rendered on the chart.~');
    --
    l_property_id := 913;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AXIS_MIN',
        p_prompt             => 'Minimum',
        p_property_type      => 'NUMBER',
        p_db_column          => 'MIN',
        p_display_length     => 10,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the minimum value of the axis. Defaults to null for automatic calculation based on the data.~' );
    --
    l_property_id := 914;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AXIS_MAX',
        p_prompt             => 'Maximum',
        p_property_type      => 'NUMBER',
        p_db_column          => 'MAX',
        p_display_length     => 10,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the maximum value of the axis. Defaults to null for automatic calculation based on the data.~' );
    --
    l_property_id := 915;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RELOAD_ON_SUBMIT',
        p_prompt             => 'Reload on Submit',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'RELOAD_ON_SUBMIT',
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select when the page should be reloaded following a page submission.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Always',
        p_return_value  => 'A',
        p_help_text     => 'Always reload the page to display errors and the success message.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Only for Success',
        p_return_value  => 'S',
        p_help_text     => 'Show errors dynamically without reloading page, but reload it after a successful processing.' );
    --
/* For Future if we support Single Page like apps behavior where we also return session state in the Ajax response
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'On Demand',
        p_return_value  => 'D' );
*/
    --
    l_property_id := 916;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_WARN_ON_UNSAVED_CHANGES',
        p_prompt             => 'Warn on Unsaved Changes',
        p_property_type      => 'YES NO',
        p_db_column          => 'WARN_ON_UNSAVED_CHANGES',
        p_display_group_name => 'NAVIGATION',
        p_help_text          => q'~<p>Specify if the user is warned when trying to navigate away from the page, where the page contains unsaved changes.
        Page Items and Buttons also offer more granular control over when this check is performed, and what is included in it.
        For Buttons, you can specify if clicking the button will perform the check.
        For Page Items, you can specify if changes to the item are included, or ignored by the check (see the <em>Warn on Unsaved Changes</em> attribute for both).</p>
        <p>Note: This does not apply to an end user closing a Modal dialog page.</p>~' );
    --
    l_property_id := 917;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_BASELINE_SCALING',
        p_prompt             => 'Baseline Scaling',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'BASELINE_SCALING',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select whether the axis baseline starts at the minimum value of the data or at zero. Only applies to numerical data axes.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Minimum',
        p_return_value  => 'min');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Zero',
        p_return_value  => 'zero');
    --
    l_property_id := 918;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AXIS_STEP',
        p_prompt             => 'Step',
        p_property_type      => 'NUMBER',
        p_db_column          => 'STEP',
        p_display_length     => 10,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the increment between major tick marks. Defaults to null for automatic calculation based on the data. Only applies to time and numerical axes.~' );
    --
    l_property_id := 919;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AXIS_POSITION',
        p_prompt             => 'Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'POSITION',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the position of the label(s) to be rendered on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Start',
        p_return_value  => 'start' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'End',
        p_return_value  => 'end' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top',
        p_return_value  => 'top' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bottom',
        p_return_value  => 'bottom' );
    --
    l_property_id := 920;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAJOR_TICK_RENDERED',
        p_prompt             => 'Show',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'MAJOR_TICK_RENDERED',
        p_display_group_name => 'MAJOR_TICKS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select whether the major tick marks are rendered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Yes',
        p_return_value  => 'on' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No',
        p_return_value  => 'off' );
    --
    l_property_id := 921;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MIN_STEP',
        p_prompt             => 'Minimum Step',
        p_property_type      => 'NUMBER',
        p_db_column          => 'MIN_STEP',
        p_display_length     => 10,
        p_display_group_name => 'MAJOR_TICKS',
        p_help_text          => q'~Enter the minimum increment between major tick marks. This is typically used to prevent fractional axis values for discrete measures.~' );
    --
    l_property_id := 922;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'MINOR_TICK_RENDERED',
        p_prompt                     => 'Show',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'MINOR_TICK_RENDERED',
        p_display_group_name         => 'MINOR_TICKS',
        p_help_text                  => q'~Specify whether the minor tick marks are rendered.~' );
    --
    l_property_id := 923;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MINOR_STEP',
        p_prompt             => 'Step',
        p_property_type      => 'NUMBER',
        p_db_column          => 'MINOR_STEP',
        p_display_length     => 10,
        p_display_group_name => 'MINOR_TICKS',
        p_help_text          => q'~Enter the increment between minor tick marks. Defaults to null for automatic calculation based on the data. Only applies to numerical axes.~' );
    --
    l_property_id := 924;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'TICK_LABEL_RENDERED',
        p_prompt                     => 'Show',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'TICK_LABEL_RENDERED',
        p_display_group_name         => 'TICK_LABEL',
        p_help_text                  => q'~Specify whether the tick labels are rendered.~' );
    --
    l_property_id := 925;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'TICK_LABEL_ROTATION',
        p_prompt                     => 'Rotation',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'auto',
        p_prop_type_yesno_override_n => 'none',
        p_db_column                  => 'TICK_LABEL_ROTATION',
        p_display_group_name         => 'TICK_LABEL',
        p_help_text                  => q'~Specify whether the chart will automatically rotate the labels by 90 degrees in order to fit more labels on the axis.
        The rotation will only be applied to categorical labels for a horizontal axis.~' );
    --
    l_property_id := 926;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TICK_LABEL_POSITION',
        p_prompt             => 'Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TICK_LABEL_POSITION',
        p_display_group_name => 'TICK_LABEL',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the position of the tick labels relative to the plot area.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Outside',
        p_return_value  => 'outside' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inside',
        p_return_value  => 'inside' );
    --
    l_property_id := 927;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SPLIT_DUAL_Y',
        p_prompt             => 'Show',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SPLIT_DUAL_Y',
        p_display_group_name => 'DUAL_Y_AXES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify whether the plot area is split into two sections, so that sets of data assigned to the different Y-axes appear in different parts of the plot area. Stock charts do not support <strong>No</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Yes',
        p_return_value  => 'on' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No',
        p_return_value  => 'off' );
    --
    l_property_id := 928;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SPLITTER_POSITION',
        p_prompt             => 'Splitter Position',
        p_property_type      => 'NUMBER',
        p_db_column          => 'SPLITTER_POSITION',
        p_display_length     => 10,
        p_min_value          => 0,
        p_max_value          => 1,
        p_display_group_name => 'DUAL_Y_AXES',
        p_help_text          => q'~In a split dual-Y chart, specify the fraction of the space that is given to the Y-axis subchart. Valid values are numbers from 0 to 1.~' );
    --
    l_property_id := 929;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PIE_SELECTION_EFFECT',
        p_prompt             => 'Pie Selection Effect',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PIE_SELECTION_EFFECT',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the effect applied when a pie segment is selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Explode',
        p_return_value  => 'explode');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Highlight And Explode',
        p_return_value  => 'highlightAndExplode');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Highlight',
        p_return_value  => 'highlight');
    --
    l_property_id := 930;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'STOCK_RENDER_AS',
        p_prompt             => 'Render As',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'STOCK_RENDER_AS',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the series type to be applied to the rendered stock chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area',
        p_return_value  => 'area');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar',
        p_return_value  => 'bar');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Candlestick',
        p_return_value  => 'candlestick');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line',
        p_return_value  => 'line');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line with Area',
        p_return_value  => 'lineWithArea');
    --
    l_property_id := 931;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REFRESH_INTERVAL',
        p_prompt             => 'Interval',
        p_property_type      => 'INTEGER',
        p_db_column          => 'AUTOMATIC_REFRESH_INTERVAL',
        p_display_length     => 5,
        p_min_value          => 1,
        p_unit               => c_unit_seconds,
        p_display_group_name => 'AUTOMATIC_REFRESH',
        p_help_text          => q'~Enter the interval in seconds between chart updates. Very small updates intervals, such as 2 seconds, are discouraged since they may cause serious database performance issues.~' );

    -- End of JET Chart Attributes

    -- JET Chart Series Properties (863-910,932-)
    --
    l_property_id := 932;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_prompt             => 'Series Type Column Mapping',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'SERIES_TYPE_COLUMN_MAPPING',
        p_display_group_name => 'IDENTIFICATION',
        p_is_query_only      => true );
    --
    l_property_id := 934;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_TYPE_RANGE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SERIES_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the chart series type.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar Range',
        p_return_value  => 'barRange' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area Range',
        p_return_value  => 'areaRange' );
    --
    l_property_id := 935;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CUSTOM_COLUMN_NAME',
        p_prompt             => 'Custom Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_db_column          => 'CUSTOM_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Specify the custom column name, which can be used for defining a custom tooltip, or database-based colors to be used for the chart elements. For a Box Plot chart, the column should not match the selected Value column mapping. Selection of a column that matches the Value column mapping will result in no custom column being used for the chart.~' );
    --
    l_property_id := 936;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_TYPE_POLAR',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SERIES_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the chart series type.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area',
        p_return_value  => 'area' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar',
        p_return_value  => 'bar' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line',
        p_return_value  => 'line' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line with Area',
        p_return_value  => 'lineWithArea' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scatter',
        p_return_value  => 'scatter' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bubble',
        p_return_value  => 'bubble' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar Range',
        p_return_value  => 'barRange' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area Range',
        p_return_value  => 'areaRange' );
    --
    l_property_id := 937;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_TYPE_RADAR',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SERIES_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the chart series type.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area',
        p_return_value  => 'area' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area Range',
        p_return_value  => 'areaRange' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line',
        p_return_value  => 'line' );
    --
    l_property_id := 938;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FILTER_DATA_TYPE',
        p_prompt             => 'Filter Data Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'FILTER_DATA_TYPE',
        p_max_length         => 255,
        p_display_group_name => 'COLUMN_FILTER',
        p_is_query_only      => true );
    --
    l_property_id := 939;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AXIS_SCALING',
        p_prompt             => 'Scale',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SCALING',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the axis scale. Only applies to numerical axes.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Linear',
        p_return_value  => 'linear');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Log',
        p_return_value  => 'log');
    --
    l_property_id := 940;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEM_WARN_ON_UNSAVED_CHANGES',
        p_prompt             => 'Warn on Unsaved Changes',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'WARN_ON_UNSAVED_CHANGES',
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify if the page item is included in the unsaved changes check, which warns the user when they try to navigate away from the page, and where the page contains unsaved changes. Some items may not need to be checked (for example they are not based on a database column, like a search item), so can be set to be ignored.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Ignore',
        p_return_value  => 'I',
        p_help_text     => q'~Changes to the item are ignored by the unsaved changes check.~' );
    --
    l_property_id := 941;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_WARN_ON_UNSAVED_CHANGES',
        p_prompt             => 'Warn on Unsaved Changes',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'WARN_ON_UNSAVED_CHANGES',
        p_display_group_name => 'BEHAVIOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify if the user is warned when they try to navigate away from the page by clicking the button, and where the page contains unsaved changes.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Do Not Check',
        p_return_value  => 'I',
        p_help_text     => q'~The unsaved changes check will not be performed when the button is clicked. This setting should be used for Cancel, Delete and Apply Changes buttons.~' );
    --
    l_property_id := 942;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INLINE_HELP_TEXT',
        p_prompt             => 'Inline Help Text',
        p_property_type      => 'HTML',
        p_db_column          => 'INLINE_HELP_TEXT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'HELP',
        p_is_translatable    => true,
        p_help_text          => q'~Enter inline help text for this item. The help text is being displayed immediately with the item and may be used to provide field level context sensitive help.~' );
    --
    l_property_id := 943;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INIT_JAVASCRIPT_FUNCTION',
        p_prompt             => 'Initialization JavaScript Function',
        p_property_type      => 'JAVASCRIPT',
        p_db_column          => 'PLUGIN_INIT_JAVASCRIPT_CODE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_is_translatable    => false,
        p_help_text          => q'~<p>Enter JavaScript code that can be executed. Note: The exact nature of what this does will depend on the current plug-in.</p>~' );
    --
    l_property_id := 944;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'WHEN_COLUMNS',
        p_prompt                   => 'Column(s)',
        p_property_type            => 'ITEM',
        p_multi_value_delimiter    => ',',
        p_db_column                => 'TRIGGERING_ELEMENT',
        p_display_length           => 100,
        p_max_length               => 4000,
        p_display_group_name       => 'WHEN',
        p_lov_component_type_scope => 'COLUMN',
        p_help_text                => q'~Enter one or more columns to trigger the dynamic action.
For multiple columns, separate each item name with a comma.
You can type in the name or pick from the list of available columns.
If you pick from the list and there is already text entered, a comma is placed at the end of the existing text, followed by the column name returned from the list.~' );
    --
    l_property_id := 945;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_CONDITION_ELEMENT_TYPE',
        p_prompt             => 'Component Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CONDITION_ELEMENT_TYPE',
        p_display_group_name => 'CLIENT_SIDE_CONDITION',
        p_lov_type           => 'STATIC',
        p_help_text          => 'Select whether an <em>Item</em> or <em>Column</em> is used in this condition.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Column',
        p_return_value  => 'COLUMN' );
    --
    l_property_id := 946;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'JS_CONDITION_ITEM_WHEN_IG',
        p_prompt                   => 'Item',
        p_property_type            => 'ITEM',
        p_db_column                => 'CONDITION_ELEMENT',
        p_display_length           => 60,
        p_max_length               => 4000,
        p_display_group_name       => 'CLIENT_SIDE_CONDITION',
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => 'Enter the page item used in this condition. You can type in the name or pick from the list of available items.' );
    --
    l_property_id := 947;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'JS_CONDITION_COLUMN_WHEN_IG',
        p_prompt                   => 'Column',
        p_property_type            => 'COLUMN',
        p_db_column                => 'CONDITION_ELEMENT',
        p_column_data_types        => 'VARCHAR2',
        p_display_length           => 60,
        p_max_length               => 4000,
        p_display_group_name       => 'CLIENT_SIDE_CONDITION',
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text            => q'~<p>Select the column used in this condition.</p>
<p>Note: In the majority of cases this should be the column specified above, in the <em>When Column(s)</em>,
and is therefore defaulted to this. However you may want to base the condition on a different column,
for example with an Interactive Grid based on the EMP table, if you want to fire a dynamic action
whenever <code>SAL</code> changes but only if the <code>JOB</code> equals <em>SALESMAN</em>, then you would change this attribute to <code>JOB</code>.</p>~' );
    --
    l_property_id := 948;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'AFFECTED_COLUMNS',
        p_prompt                   => 'Column(s)',
        p_property_type            => 'ITEM',
        p_multi_value_delimiter    => ',',
        p_db_column                => 'AFFECTED_ELEMENTS',
        p_display_length           => 100,
        p_max_length               => 4000,
        p_display_group_name       => 'AFFECTED_ELEMENTS',
        p_lov_component_type_scope => 'COLUMN',
        p_help_text                => q'~Enter one or more columns to be affected by this action.
For multiple columns, separate each column name with a comma.
<p>You can type in the name or pick from the list of available columns.
If you pick from the list and there is already text entered, then a comma is placed at the end of the existing text, followed by the column name returned from the list.~' );
    --
    l_property_id := 949;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'IG_REGION',
        p_prompt                   => 'Interactive Grid Region',
        p_property_type            => 'HIDDEN',
        p_db_column                => 'IG_REGION_ID',
        p_max_length               => 255,
        p_display_group_name       => 'IDENTIFICATION',
        p_is_query_only            => true,
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL' );
    --
    l_property_id := 950;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'JS_CONDITION_ITEM',
        p_prompt                   => 'Item',
        p_property_type            => 'ITEM',
        p_db_column                => 'CONDITION_ELEMENT',
        p_display_length           => 60,
        p_max_length               => 4000,
        p_display_group_name       => 'CLIENT_SIDE_CONDITION',
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~<p>Enter the page item used in this condition. You can type in the name or pick from the list of available items.</p>
<p>Note: In the majority of cases this should be the item specified above, in the <em>When Item(s)</em>,
and is therefore defaulted to this. However you may want to base the condition on a different page item,
for example with a form based on the EMP table, if you want to fire a dynamic action whenever <code>P2_SAL</code> changes but only if the
<code>P2_JOB</code> equals <em>SALESMAN</em>, then you would change this attribute to <code>P2_JOB</code>.</p>~' );
    --
    l_property_id := 951;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_CONDITION_WHEN_IG',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TRIGGERING_CONDITION_TYPE',
        p_display_group_name => 'CLIENT_SIDE_CONDITION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify a client-side condition to control whether True or False actions fire. If the condition
                                  evaluates to True, then True actions fire, if the condition evaluates to False, then False actions fire.
                                  If no condition is specified, only True actions fire.~'  );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column = Value',
        p_return_value  => 'EQUALS',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> or <em>Column</em> is equal to the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column != Value',
        p_return_value  => 'NOT_EQUALS',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> or <em>Column</em> is not equal to the <em>Value</em> specified.~'  );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column > Value',
        p_return_value  => 'GREATER_THAN',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> or <em>Column</em> is greater than the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column >= Value',
        p_return_value  => 'GREATER_THAN_OR_EQUAL',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> or <em>Column</em> is greater than or equal to the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column < Value',
        p_return_value  => 'LESS_THAN',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> or <em>Column</em> is less than the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column <= Value',
        p_return_value  => 'LESS_THAN_OR_EQUAL',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> or <em>Column</em> is less than or equal to the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column is null',
        p_return_value  => 'NULL',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Checks if the selected <em>Item</em> or <em>Column</em> is empty.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column is not null',
        p_return_value  => 'NOT_NULL',
        p_help_text     => q'~Checks if the selected <em>Item</em> or <em>Column</em> is not empty.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column is in list',
        p_return_value  => 'IN_LIST',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> or <em>Column</em> is in the <em>List</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column is not in list',
        p_return_value  => 'NOT_IN_LIST',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em>  or <em>Column</em> is not in the <em>List</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JavaScript expression',
        p_return_value  => 'JAVASCRIPT_EXPRESSION',
        p_help_text     => q'~Evaluates the JavaScript Expression specified.~');
    --
    l_property_id := 952;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_COND_VALUE_WHEN_IG',
        p_prompt             => 'Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'TRIGGERING_EXPRESSION',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'CLIENT_SIDE_CONDITION',
        p_help_text          => q'~Enter the value for the condition to test.~' );
    --
    l_property_id := 953;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'JS_COND_LIST_WHEN_IG',
        p_prompt                => 'List',
        p_property_type         => 'TEXT',
        p_db_column             => 'TRIGGERING_EXPRESSION',
        p_display_length        => 60,
        p_max_length            => 4000,
        p_multi_value_delimiter => ',',
        p_display_group_name    => 'CLIENT_SIDE_CONDITION',
        p_help_text             => q'~Enter the comma separated list of values for the condition to test.~' );
    --
    l_property_id := 954;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_COND_JS_EXPRESSION_WHEN_IG',
        p_prompt             => 'JavaScript Expression',
        p_property_type      => 'JAVASCRIPT',
        p_db_column          => 'TRIGGERING_EXPRESSION',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'CLIENT_SIDE_CONDITION',
        p_help_text          => q'~<p>Specify the JavaScript Expression to be evaluated for this condition.
The code has access to the following dynamic action related attributes:</p>
<dl>
  <dt>this.triggeringElement</dt>
    <dd>A reference to the DOM object of the element that triggered the dynamic action.</dd>
  <dt>this.browserEvent</dt>
    <dd>The event object that triggered the event. Note: On load this is equal to 'load'.</dd>
  <dt>this.data</dt>
    <dd>Optional additional data that can be passed from the event handler.</dd>
</dl>~' );
    --
    l_property_id := 955;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ORACLE_TEXT_INDEX_COLUMN',
        p_prompt             => 'Oracle Text Index Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'ORACLE_TEXT_INDEX_COLUMN',
        p_column_data_types  => 'VARCHAR2:CLOB',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Select a column where the column is indexed by an Oracle Text index.</p>
<p>Row Search returns results based on the Oracle Text operator entered, providing the corresponding Oracle Text index has been created for the column.
This option should only be enabled if the necessary index exist, and the end users have been trained in how to utilize the Oracle Text search operators.
To simplify Oracle Text syntax for end users, you can select a ready-to-use function or specify your own custom function for the "Text Query Function" in the Application Definition settings.<br>
See <a rel="noopener noreferrer" target="_blank" href="https://docs.oracle.com/en/database/oracle/oracle-database/23/ccapp/index.html">Oracle Text Application Developers Guide</a>.</p>
<p>Note - When end users correctly enter the Oracle Text operators, then the search should be far more performant.</p>
~' );
    --
    l_property_id := 956;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'CASCADING_LOV_PARENT_COLUMNS',
        p_prompt                   => 'Parent Column(s)',
        p_property_type            => 'ITEM',
        p_multi_value_delimiter    => ',',
        p_db_column                => 'LOV_CASCADE_PARENT_ITEMS',
        p_display_length           => 50,
        p_max_length               => 255,
        p_display_group_name       => 'CASCADING_LOV',
        p_lov_component_type_scope => 'COLUMN',
        p_help_text                => q'~<p>Enter columns that trigger the refresh of this list of values.
For multiple columns, separate each column name with a comma.
You can type in the name or pick from the list of available columns.
If you pick from the list, and there is already text entered, then a comma is placed at the end of the existing text, followed by the column name returned from the list.</p>
<p>This list of values is refreshed whenever the value of any of the specified columns are changed on this page.</p>
<p>You should use the column(s) specified in this attribute within the <em>where clause</em> of this list of values SQL Query to restrict the values returned.</p>
<p>For example, if you have columns for Car Make and Model, you could specify Car Make as the Cascading LOV Parent Column within the List of Values definition for Model, and use Car Make within the where clause for that list of values.
Then whenever Car Make is changed, the LOV for Model is refreshed, and the list only displays values for the currently selected Car Make.</p>~' );

    --
    l_property_id := 957;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_LOCATION',
        p_prompt             => 'Location',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOCATION',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the location of the data.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Local Database',
        p_return_value  => 'LOCAL',
        p_help_text     => q'~Data is sourced from the local database.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'REST Enabled SQL',
        p_return_value  => 'REMOTE',
        p_help_text     => q'~Data is sourced from a remote database, where the connection is defined using REST Enabled SQL. ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'REST Source',
        p_return_value  => 'WEB_SOURCE',
        p_help_text     => q'~Data is sourced from a RESTful web service defined using REST Data Sources.~' );
    --
    store_property_lov_values (
        p_property_id    => l_property_id,
        p_display_value  => 'Duality View',
        p_return_value   => 'DUALITY_VIEW',
        p_min_db_version => c_db_23ai,
        p_help_text      => q'~Data is sourced from a Duality View.~' );
    --
    store_property_lov_values (
        p_property_id    => l_property_id,
        p_display_value  => 'JSON Source',
        p_return_value   => 'JSON_COLLECTION',
        p_help_text      => q'~Data is sourced from a JSON Collection Table or Table with JSON columns.~' );
    --
    l_property_id := 958;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SOURCE_REMOTE_DATABASE',
        p_prompt                => 'Remote Server',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'REMOTE_SERVER_ID',
        p_display_group_name    => 'SOURCE',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_remote_database,
        p_help_text             => q'~Select the remote database server.~' );
    --
    l_property_id := 959;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_QUERY_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'QUERY_TYPE',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how the data is queried.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Table / View',
        p_return_value  => 'TABLE',
        p_help_text     => q'~The data is retrieved based on a table or view.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'SQL',
        p_help_text     => q'~The data is retrieved based on a SQL Query.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body returning SQL Query',
        p_return_value  => 'FUNC_BODY_RETURNING_SQL',
        p_help_text     => q'~The data is retrieved based on the SQL Query returned by executing a Function Body.~' );
    --
    store_property_lov_values (
        p_property_id    => l_property_id,
        p_display_value  => 'Property Graph',
        p_return_value   => 'GRAPH',
        p_min_db_version => c_db_23ai,
        p_help_text      => q'~The data is retrieved based on a Property Graph.~' );
    --
    l_property_id := 960;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_QUERY_OWNER',
        p_prompt             => 'Table Owner',
        p_property_type      => 'OWNER',
        p_db_column          => 'QUERY_OWNER',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Select the schema that owns the table.~' );
    --
    l_property_id := 961;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_QUERY_TABLE',
        p_prompt             => 'Table Name',
        p_property_type      => 'TABLE',
        p_db_column          => 'QUERY_TABLE',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Enter the case-sensitive table or view name. You can type in the name or pick from the list.~' );
    --
    l_property_id := 962;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_QUERY_WHERE',
        p_prompt             => 'Where Clause',
        p_property_type      => 'WHERE CLAUSE',
        p_db_column          => 'QUERY_WHERE',
        p_display_length     => 40,
        p_max_length         => 4000,
        p_display_group_name => 'SOURCE',
        p_examples           => q'~
<dl><dt>Only include those employees which have a manager or have a job of salesman.</dt>
<dd><pre>
( MGR is not null or JOB = 'SALESMAN' )
</pre></dd>
</dl>~',
        p_help_text          => q'~Enter a valid SQL where condition, used to limit the records retrieved.~' );
    --
    l_property_id := 963;
    store_order_by_clause_property(
        p_name               => 'SOURCE_QUERY_ORDER_BY',
        p_display_group_name => 'SOURCE_ORDER_BY' );
    --
    l_property_id := 964;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'SOURCE_SQL_QUERY',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'PLUG_SOURCE',
        p_display_length       => 80,
        p_max_length           => 32767,
        p_sql_min_column_count => 1,
        p_display_group_name   => 'SOURCE',
        p_examples             => q'~<pre>select empno,
       ename,
       job,
       sal
  from emp
 where deptno = :P1_DEPTNO
</pre>~',
        p_help_text            => q'~Enter the SQL source for this component.~' );
    --
    l_property_id := 965;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REMOTE_CACHING',
        p_prompt             => 'Caching',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'REMOTE_SQL_CACHING',
        p_display_group_name => 'REMOTE_CACHE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how the &PRODUCT_NAME. engine can cache data in the local database.
        If caching can be used, the component will be rendered based on cached results, instead of fetching from the remote database.
        Cached results will greatly improve performance, especially if there is latency between the local and remote database.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'For All Users',
        p_return_value  => 'ALL_USERS',
        p_help_text     => q'~Result is cached and utilized by all users.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'By User',
        p_return_value  => 'USER',
        p_help_text     => q'~Result is cached specifically for each user, across sessions.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'By Session',
        p_return_value  => 'SESSION',
        p_help_text     => q'~Result is cached specifically for each user session.~' );
    --
    l_property_id := 966;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REMOTE_INVALIDATE_WHEN',
        p_prompt             => 'Cache Timeout',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'REMOTE_SQL_INVALIDATE_WHEN',
        p_display_length     => 40,
        p_max_length         => 255,
        p_display_group_name => 'REMOTE_CACHE',
        p_examples           => q'~<dl>
<dt>Expire the data 15 minutes after it has been cached</dt>
  <dd><pre>15</pre></dd>
<dt>Expire the data at the top of the hour</dt>
  <dd><pre>FREQ=HOURLY;BYMINUTE=0;BYSECOND=0</pre></dd>
<dt>Expire the data at midnight</dt>
  <dd><pre>FREQ=DAILY;BYHOUR=0;BYMINUTE=0;BYSECOND=0</pre></dd>
</dl>~',
        p_help_text          => q'~<p>Enter when cached data is to be invalidated.
        Provide either the amount of minutes or a DBMS_SCHEDULER Calendar String.</p>
        <p>For DBMS_SCHEDULER Calendar String, you can define that cached data is invalidated at the top of the hour, at midnight, or another specific recurring point in time.
        See the documentation on DBMS_SCHEDULER.EVALUATE_CALENDAR_STRING for more details.</p>~' );
    --
    l_property_id := 967;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SOURCE_WEB_SRC_QUERY',
        p_prompt                => 'REST Source',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'WEB_SRC_MODULE_ID',
        p_display_group_name    => 'SOURCE',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_web_src_query,
        p_help_text             => q'~Select the REST Data Source which supports fetching a collection.~' );
    --
    l_property_id := 968;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'SOURCE_QUERY_PLSQL_FUNCTION_BODY',
        p_prompt               => 'PL/SQL Function Body returning SQL Query',
        p_property_type        => 'PLSQL FUNCTION BODY SQL',
        p_db_column            => 'PLUG_SOURCE',
        p_display_length       => 80,
        p_max_length           => 32767,
        p_sql_min_column_count => 1,
        p_display_group_name   => 'SOURCE',
        p_help_text            => q'~Enter a PL/SQL Function that returns a SQL query that is used as the basis for this region.~' );
    --
    l_property_id := 969;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'SOURCE_WEB_SRC_ARRAY_COL',
        p_prompt                   => 'Nested Rows',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'ARRAY_COLUMN_ID',
        p_display_group_name       => 'DATA_PROFILE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_web_src_array_col,
        p_help_text                => q'~<p>Select the <strong>Nested Rows</strong> from the REST Source to use for this component. All columns of the selected nested row, and all columns of all parents will become available to this component, as a flat table structure.</p><p>Note: &PRODUCT_NAME. uses the <code>JSON_TABLE</code> SQL function with <code>NESTED PATH</code> clauses to convert nested JSON to a flat result.</p>~' );
    --
    l_property_id := 970;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_LABEL_REGION_COLUMN',
        p_prompt             => 'Label Column',
        p_property_type      => 'REGION COLUMN',
        p_db_column          => 'ICON_VIEW_LABEL_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_examples           => q'~<dl>
<dt>Examine the <code>ENAME</code> column</dt>
<dd><pre>
select empno,
       ename,
       job,
       '#IMAGE_PREFIX#menu/user_red_64.gif' as image
  from emp
</pre></dd>
</dl>~',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Select the report column that returns the image label.~' );

    l_property_id := 971;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_BOX_LOW_COLUMN_NAME',
        p_prompt             => 'Low',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER', -- $$$
        p_db_column          => 'ITEMS_LOW_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the low value on this chart. Where no column is selected, the lowest value of the Box Plot chart will be based upon the data set. ~' );
    --
    l_property_id := 972;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_BOX_HIGH_COLUMN_NAME',
        p_prompt             => 'High',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER', -- $$$
        p_db_column          => 'ITEMS_HIGH_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the high value on this chart. . Where no column is selected, the highest value of the Box Plot chart will be based upon the data set.~' );
    --
    l_property_id := 973;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_TYPE_BOX_PLOT',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SERIES_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the chart series type.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area',
        p_return_value  => 'area' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar',
        p_return_value  => 'bar' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Box Plot',
        p_return_value  => 'boxPlot' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line',
        p_return_value  => 'line' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line with Area',
        p_return_value  => 'lineWithArea' );
    --
    l_property_id := 974;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_CONNECT_NULLS',
        p_prompt             => 'Render Gap as Zero',
        p_property_type      => 'YES NO',
        p_db_column          => 'CONNECT_NULLS',
        p_display_group_name => 'MULTI_SERIES',
        p_help_text          => q'~<p>Specify whether gaps in your multi-series chart data should be set to a value of zero, or null.</p>
        <p>When set to <strong>On</strong>, gaps in data are handled as zero.  For a Line chart, this will ensure the line is rendered as a continuous line. For a stacked Bar chart with Stack Label set to On, this will ensure the stack label is rendered for each stack.</p>
        <p>When set to <strong>Off</strong>, gaps in data are handled as null. For a Line chart, the line will be rendered as a broken line, with gaps representing null data points.<p>
        <p>This setting will be applied to multi-series chart types that support rendering as a bar, and line, such as Bar, Line, Line with Area, Combination, Area, Polar, Radar and Scatter.  The default is <strong>On</strong>.</p>~' );
    --
    l_property_id := 975;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OPTIMIZER_HINT',
        p_prompt             => 'Optimizer Hint',
        p_property_type      => 'TEXT',
        p_db_column          => 'OPTIMIZER_HINT',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'SOURCE',
        p_examples              => q'~<dl>
<dt><pre>INDEX (employees emp_department_ix)</pre></dt>
<dd>When accessing the table <code>employee</code> try to use the index <code>emp_department_ix</code></dd>
<dt><pre>WITH_PLSQL</pre></dt>
<dd>Enable the use of the <code>WITH plsql_declarations</code> clause within the SQL query</dd>
</dl>
<h5>The following <em>APEX Pseudo Hints</em> are available:</h5>
<dl>
<dt><pre>APEX$USE_OFFSET_PAGINATION</pre></dt>
<dd>Use the <strong>OFFSET m ROWS FETCH n ROWS</strong> (SQL2008) syntax, instead of the <strong>ROW_NUMBER</strong> analytic function, when generating pagination SQL. The executed query will only return rows of interest for the current component page.</dd>
<dt><pre>APEX$USE_ROWNUM_PAGINATION</pre></dt>
<dd>Use the <strong>ROWNUM</strong> pseudo column, instead of the <strong>ROW_NUMBER</strong> analytic function, when generating pagination SQL. The executed query will only return rows of interest for the current component page.</dd>
<dt><pre>APEX$USE_NO_PAGINATION</pre></dt>
<dd>Do not build any pagination SQL. The component always starts fetching at the first row; the current page is shown by skipping rows and stopping after fetching the last row of interest.</dd>
<dt><pre>APEX$USE_NO_BULK_FETCH</pre></dt>
<dd>Do not use bulk fetching for this query.</dd>
<dt><pre>APEX$USE_NO_GROUPING_SETS</pre></dt>
<dd>Do not use the <strong>GROUPING SETS</strong> SQL clause for Faceted Search or Smart Filters. Instead, compute counts for each facet or filter using an individual query, and combine these with UNION ALL.</dd>
</dl>~',
        p_help_text          => q'~<p>Enter the Oracle Optimizer hint which is added to the top-level statement when executing the SQL query generated by &PRODUCT_NAME..
        A hint is an instruction to the Optimizer. When writing SQL, you may know information about the data unknown to the Optimizer. Hints enable you to make decisions normally made by the Optimizer,
        sometimes causing the Optimizer to select a plan that it sees as higher cost.</p>
        <p>For example, you might know that a certain index is more selective for certain queries. Based on this information, you might be able to choose a more efficient execution plan than the Optimizer.
        In such a case, use hints to force the Optimizer to use the optimal execution plan.</p>~' );
    --
    l_property_id := 976;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_Q2_COLOR',
        p_prompt             => 'Q2 Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'Q2_COLOR',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Enter the color to be displayed for the q2 segment of the Box Plot chart series. You can utilize <code>&COLUMN_VALUE.</code> substitutions.</p>~' );
    --
    l_property_id := 977;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_Q3_COLOR',
        p_prompt             => 'Q3 Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'Q3_COLOR',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Enter the color to be displayed for the q3 segment of the Box Plot chart series. You can utilize <code>&COLUMN_VALUE.</code> substitutions.</p>~' );
    --
    l_property_id := 978;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INCLUDE_ROWID_COLUMN',
        p_prompt             => 'Include ROWID Column',
        p_property_type      => 'YES NO',
        p_db_column          => 'INCLUDE_ROWID_COLUMN',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Specify whether the pseudo column ROWID should be selected.~' );
    --
    l_property_id := 979;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_HORIZONTAL_GRID',
        p_prompt                     => 'Show Horizontal Grid',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'visible',
        p_prop_type_yesno_override_n => 'hidden',
        p_db_column                  => 'HORIZONTAL_GRID',
        p_display_group_name         => 'SETTINGS',
        p_help_text                  => q'~Specify whether to display horizontal gridlines on the chart.~' );
    --
    l_property_id := 980;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_VERTICAL_GRID',
        p_prompt                     => 'Show Vertical Grid',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'visible',
        p_prop_type_yesno_override_n => 'hidden',
        p_db_column                  => 'VERTICAL_GRID',
        p_display_group_name         => 'SETTINGS',
        p_help_text                  => q'~Specify whether to display vertical gridlines on the chart.~' );
    --
    l_property_id := 981;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ROW_AXIS',
        p_prompt                     => 'Show Row Axis',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'ROW_AXIS_RENDERED',
        p_display_group_name         => 'SETTINGS',
        p_help_text                  => q'~Specify whether to render the row labels on the chart.~' );
    --
    l_property_id := 982;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_AXIS_POSITION',
        p_prompt             => 'Axis Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GANTT_AXIS_POSITION',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify the position of the major and minor axes on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top',
        p_return_value  => 'top');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bottom',
        p_return_value  => 'bottom' );
    --
    l_property_id := 983;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_AXIS_SCALE',
        p_prompt             => 'Scale',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'AXIS_SCALE',
        p_display_group_name => 'TIME_SCALE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify the time scale to be used for the axis on the chart. This is required in order for the Gantt to properly render. The selected time scale will be used for zooming, when no Zoom Scale options have been selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Seconds',
        p_return_value  => 'seconds');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Minutes',
        p_return_value  => 'minutes');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hours',
        p_return_value  => 'hours');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Days',
        p_return_value  => 'days');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Weeks',
        p_return_value  => 'weeks');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Months',
        p_return_value  => 'months');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Quarters',
        p_return_value  => 'quarters');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Years',
        p_return_value  => 'years');
    --
    l_property_id := 984;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ZOOM_ORDER_SECONDS',
        p_prompt                     => 'Seconds',
        p_property_type              => 'YES NO',
        p_db_column                  => 'ZOOM_ORDER_SECONDS',
        p_display_group_name         => 'ZOOM_SCALE',
        p_help_text                  => q'~Specify whether to allow zooming to a scale of seconds on the chart.~' );
    --
    l_property_id := 985;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ZOOM_ORDER_MINUTES',
        p_prompt                     => 'Minutes',
        p_property_type              => 'YES NO',
        p_db_column                  => 'ZOOM_ORDER_MINUTES',
        p_display_group_name         => 'ZOOM_SCALE',
        p_help_text                  => q'~Specify whether to allow zooming to a scale of minutes on the chart.~' );
    --
    l_property_id := 986;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ZOOM_ORDER_HOURS',
        p_prompt                     => 'Hours',
        p_property_type              => 'YES NO',
        p_db_column                  => 'ZOOM_ORDER_HOURS',
        p_display_group_name         => 'ZOOM_SCALE',
        p_help_text                  => q'~Specify whether to allow zooming to a scale of hours on the chart.~' );
    --
    l_property_id := 987;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ZOOM_ORDER_DAYS',
        p_prompt                     => 'Days',
        p_property_type              => 'YES NO',
        p_db_column                  => 'ZOOM_ORDER_DAYS',
        p_display_group_name         => 'ZOOM_SCALE',
        p_help_text                  => q'~Specify whether to allow zooming to a scale of days on the chart.~' );
    --
    l_property_id := 988;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ZOOM_ORDER_WEEKS',
        p_prompt                     => 'Weeks',
        p_property_type              => 'YES NO',
        p_db_column                  => 'ZOOM_ORDER_WEEKS',
        p_display_group_name         => 'ZOOM_SCALE',
        p_help_text                  => q'~Specify whether to allow zooming to a scale of weeks on the chart.~' );
    --
    l_property_id := 989;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ZOOM_ORDER_MONTHS',
        p_prompt                     => 'Months',
        p_property_type              => 'YES NO',
        p_db_column                  => 'ZOOM_ORDER_MONTHS',
        p_display_group_name         => 'ZOOM_SCALE',
        p_help_text                  => q'~Specify whether to allow zooming to a scale of months on the chart.~' );
    --
    l_property_id := 990;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ZOOM_ORDER_QUARTERS',
        p_prompt                     => 'Quarters',
        p_property_type              => 'YES NO',
        p_db_column                  => 'ZOOM_ORDER_QUARTERS',
        p_display_group_name         => 'ZOOM_SCALE',
        p_help_text                  => q'~Specify whether to allow zooming to a scale of quarters on the chart.~' );
    --
    l_property_id := 991;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ZOOM_ORDER_YEARS',
        p_prompt                     => 'Years',
        p_property_type              => 'YES NO',
        p_db_column                  => 'ZOOM_ORDER_YEARS',
        p_display_group_name         => 'ZOOM_SCALE',
        p_help_text                  => q'~Specify whether to allow zooming to a scale of years on the chart.~' );
    --
    -- Gantt Chart Series Attributes
    --
    l_property_id := 992;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_START_DATE_SOURCE',
        p_prompt             => 'Start Date Source Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GANTT_START_DATE_SOURCE',
        p_display_group_name => 'GANTT_TIMELINE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the source to be used for defining the start date of the Gantt chart. A start date is required in order to render the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Database Column',
        p_return_value  => 'DB_COLUMN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the column value entered in <em>Start Date Column</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>Start Date Item</em> selected.~' );
    --
    l_property_id := 993;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_START_DATE_COLUMN',
        p_prompt             => 'Start Date Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_db_column          => 'GANTT_START_DATE_COLUMN',
        p_display_group_name => 'GANTT_TIMELINE',
        p_help_text          => q'~Select the column name to be used for defining the start date of the Gantt chart.~' );
    --
    l_property_id := 994;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_START_DATE_ITEM',
        p_prompt             => 'Start Date Item',
        p_property_type      => 'ITEM',
        p_display_length     => 80,
        p_max_length         => 255,
        p_db_column          => 'GANTT_START_DATE_ITEM',
        p_display_group_name => 'GANTT_TIMELINE',
        p_help_text          => q'~Select the page or application item to be used for defining the start date of the Gantt chart.~' );
    --
    l_property_id := 995;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_END_DATE_SOURCE',
        p_prompt             => 'End Date Source Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GANTT_END_DATE_SOURCE',
        p_display_group_name => 'GANTT_TIMELINE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the source to be used for defining the end date of the Gantt chart. An end date is required in order to render the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Database Column',
        p_return_value  => 'DB_COLUMN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the column value entered in <em>End Date Column</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>End Date Item</em> selected.~' );
    --
    l_property_id := 996;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_END_DATE_COLUMN',
        p_prompt             => 'End Date Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_db_column          => 'GANTT_END_DATE_COLUMN',
        p_display_group_name => 'GANTT_TIMELINE',
        p_help_text          => q'~Select the column name to be used for defining the end date of the Gantt chart.~' );
    --
    l_property_id := 997;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_END_DATE_ITEM',
        p_prompt             => 'End Date Item',
        p_property_type      => 'ITEM',
        p_display_length     => 80,
        p_max_length         => 255,
        p_db_column          => 'GANTT_END_DATE_ITEM',
        p_display_group_name => 'GANTT_TIMELINE',
        p_help_text          => q'~Select the page or application item to be used for defining the end date of the Gantt chart.~' );
    --
    l_property_id := 998;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARAM_DIRECTION',
        p_prompt             => 'Direction',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DIRECTION',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the direction of the parameter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'In',
        p_return_value  => 'IN' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Out',
        p_return_value  => 'OUT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'In/Out',
        p_return_value  => 'IN_OUT' );
    --
    l_property_id := 999;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AGGREGATE_FUNCTION',
        p_prompt             => 'Value Aggregation',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'AGGREGATE_FUNCTION',
        p_display_group_name => 'COLUMN_MAPPING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how to aggregate the associated chart values column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Count',
        p_return_value  => 'COUNT',
        p_help_text     => q'~Returns the number of records.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Sum',
        p_return_value  => 'SUM',
        p_help_text     => q'~Returns the total of the value column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Average',
        p_return_value  => 'AVG',
        p_help_text     => q'~Returns the average of the value column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Median',
        p_return_value  => 'MEDIAN',
        p_help_text     => q'~Returns the middle number, ignoring nulls. This aggregation is best suited to a continuous distribution model as it returns the number in the center.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Minimum',
        p_return_value  => 'MIN',
        p_help_text     => q'~Returns the minimum value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Maximum',
        p_return_value  => 'MAX',
        p_help_text     => q'~Returns the maximum value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Count Distinct',
        p_return_value  => 'COUNT_DISTINCT',
        p_help_text     => q'~Returns the exact number of distinct values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Approximate Count Distinct',
        p_return_value  => 'APPROX_COUNT_DISTINCT',
        p_help_text     => q'~Returns the approximate number of distinct values. This aggregation is significantly faster than <em>Count Distinct</em> when processing large amounts of data.~' );
    --
    l_property_id := 1000;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_STATIC',
        p_prompt             => 'Static',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_STATIC',
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Specify whether the parameter can only be set once with a static value or be overridden on component level.~' );
    --
    l_property_id := 1001;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARAMETER_REQUIRED',
        p_prompt             => 'Required',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_REQUIRED',
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Specify whether the parameter is required and must always be set.~' );
    --
    l_property_id := 1002;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARAMETER_VALUE',
        p_prompt             => 'Value',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'VALUE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Specify a default or static value for this parameter.~' );
    --
    l_property_id := 1003;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATABASE_OPERATION',
        p_prompt             => 'Database Operation',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DATABASE_OPERATION',
        p_display_group_name => 'OPERATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>
    Assign a <strong>Database Operation</strong> to this HTTP operation. The database operation is important for &PRODUCT_NAME. components to work with the REST Data Source. An &PRODUCT_NAME. component is assigned a REST Data Source (and not an operation), thus it looks up the HTTP operation based on the required database operation.
</p>
<ul>
    <li>Visualization components like report, charts, CSS calendar and others, will always use the HTTP operation assigned to the <strong>Fetch Rows</strong> database operation. <strong>APEX_EXEC.OPEN_WEB_SOURCE_QUERY</strong> will also use the Fetch Rows database operation.</li>
    <li>When a Form component inserts, updates or deletes rows, it will use the operations assigned to the <strong>Insert Row</strong>, <strong>Update Row</strong> or <strong>Delete Row</strong>, respectively. In PL/SQL, <strong>APEX_EXEC.OPEN_WEB_SOURCE_DML_CONTEXT</strong> is the equivalent to a form.</li>
    <li>The <strong>Fetch Single Row</strong> database operation is used by the Form component when lost update detection or the allowed operations check is performed. The form then uses this operation to re-fetch the row from the REST service before doing the actual DML operation.</li>
    <li>Operations which are not mapped to a database operation, will not be used by &PRODUCT_NAME. components. Use the <strong>APEX_EXEC.EXECUTE_WEB_SOURCE</strong> PL/SQL procedure to execute these from a PL/SQL context.</li>
</ul>
<p>
    <br>
    For instance, the report or chart components of &PRODUCT_NAME. require a collection of rows. When working with
    a REST Data Source, &PRODUCT_NAME. will look up the <strong>Fetch rows</strong> database operation and  execute
    the assigned HTTP operation at runtime. A Form will look for Insert Row, Update Row or Delete Row database operations.
</p>
<p>
    Each database operation can be assigned only once within a REST Data Source. This abstraction of the &PRODUCT_NAME. component from the actual HTTP operation allows to create a new operation with different behavior and assign that to the database operation. All components will then transparently use the new HTTP operation.
</p>
<p>
    There is no restriction on which HTTP operation (GET, POST, PUT, DELETE) can be mapped to which database operation. A POST HTTP operation can be mapped to the Fetch Rows database operation. However, for clarity and maintainability, it is recommended to design REST APIs to use GET for fetch operations and to use POST, PUT, DELETE to change data.
</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Fetch Rows',
        p_return_value  => 'FETCH_COLLECTION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Fetch Single Row',
        p_return_value  => 'FETCH_SINGLE_ROW' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Insert Row',
        p_return_value  => 'INSERT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Update Row',
        p_return_value  => 'UPDATE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Delete Row',
        p_return_value  => 'DELETE' );
    --
    l_property_id := 1004;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'WEB_SRC_PARAM',
        p_prompt                => 'Name',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'WEB_SRC_PARAM_ID',
        p_display_group_name    => 'IDENTIFICATION',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_web_src_param,
        p_help_text             => q'~The name of the parameter, as configured in Shared Components, REST Data Sources.~' );
    --
    l_property_id := 1005;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_TYPE',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how this parameter is populated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the text entered into <em>Static Value</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'REST Source Default',
        p_return_value  => 'DEFAULT',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Use the value defined as default within the REST Data Source.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return single value)',
        p_return_value  => 'SQL_QUERY',
        p_help_text     => q'~Set to the first value returned from the <em>SQL Query</em> entered.~' );
    --
/*
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return colon separated value)',
        p_return_value  => 'QUERY_COLON',
        p_help_text     => q'~Set to a single colon separated value, which concatenates each row value, returned from the <em>SQL Query</em> entered.~' );
*/
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Expression',
        p_return_value  => 'EXPRESSION',
        p_help_text     => q'~Set to the value that results from executing the <em>Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body',
        p_return_value  => 'FUNCTION_BODY',
        p_help_text     => q'~Set to the value returned from the <em>Function Body</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Collection (CLOB)',
        p_return_value  => 'COLLECTION',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to the CLOB column value of the first row from the <em>Collection</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Preference',
        p_return_value  => 'PREFERENCE',
        p_help_text     => q'~Set to the value of the <em>Preference</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Parent Column',
        p_return_value  => 'PARENT_COLUMN',
        p_help_text     => q'~Set to the value of the specified <em>Parent column</em>, if a <strong>Master Region</strong> is configured (currently only available for Interactive Grid).~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Null',
        p_return_value  => 'NULL',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to null as no value specified.~' );
    --
    l_property_id := 1006;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_STATIC_VALUE',
        p_prompt             => 'Static Value',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'VALUE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the static value used as the source for this parameter value.~' );
    --
    l_property_id := 1007;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'VALUE_QUERY',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'VALUE',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_display_group_name   => 'VALUE',
        p_help_text            => q'~Enter the SQL Query used as the source for this parameter value. If more than one row is returned then the value of the first row is used.~' );
    --
    l_property_id := 1008;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OUT_VALUE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_TYPE',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how this parameter is populated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Collection (CLOB)',
        p_return_value  => 'COLLECTION',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to the CLOB column value of the first row from the <em>Collection</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Preference',
        p_return_value  => 'PREFERENCE',
        p_help_text     => q'~Set to the value of the <em>Preference</em> entered.~' );
    --
    l_property_id := 1009;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'VALUE_ITEM',
        p_prompt                   => 'Item',
        p_property_type            => 'ITEM',
        p_db_column                => 'VALUE',
        p_display_length           => 80,
        p_max_length               => 255,
        p_display_group_name       => 'VALUE',
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Enter the page or application item used as the source for this parameter value.
You can type in the name or pick from the list of available items.~' );
    --
    l_property_id := 1010;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_IS_SORTABLE',
        p_prompt             => 'Is Sortable',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'IS_SORTABLE',
        p_max_length         => 255,
        p_display_group_name => 'ENABLE_USER_TO',
        p_is_query_only      => true );
    --
    l_property_id := 1011;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TRANSLATE_FROM_TEXT',
        p_prompt             => 'Translate from Text',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'TRANSLATE_FROM_TEXT',
        p_max_length         => 32767,
        p_display_group_name => 'ATTRIBUTES',
        p_help_text          => q'~Enter the text in the primary language to be translated.~' );
    --
    l_property_id := 1012;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_PREFERENCE',
        p_prompt             => 'Preference',
        p_property_type      => 'TEXT',
        p_db_column          => 'VALUE',
        p_display_length     => 80,
        p_max_length         => 255,
        p_text_case          => 'UPPER',
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the User Preference to be used as the source for this parameter value.~' );
    --
    l_property_id := 1013;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HTTP_METHOD',
        p_prompt             => 'HTTP Method',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'OPERATION',
        p_display_group_name => 'OPERATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>
    HTTP Operation or <em>Method</em> (GET, POST, PUT, DELETE) to be executed on the REST Web Service. The combination of URL pattern and HTTP Operation identifies the operation within a REST Data Source. A REST Data Source may contain the same URL pattern for different HTTP operations and different URL patterns for the same HTTP operation.
</p>
<p>
    Following is a brief explanation of HTTP methods and their usage in REST services. Note this this is all convention - REST services should adhere to this, but real implementations can be different. Always check the documentation of the REST service you plan to access on which methods can be called and how they work.
</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'GET',
        p_return_value  => 'GET',
        p_help_text     => q'~
Fetch data from the REST service. GET is supposed to be idempotent; it's invocation does not change anything at the server side. For this reason,
GET requests can be typically be cached or called multiple times. GET requests do also <em>not</em> have a request body in normal cases.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'POST',
        p_return_value  => 'POST',
        p_help_text     => q'~
Typically used to create a new resource on the server. However, in practice, POST requests can do all sort of things. POST requests typically
require a request body to be sent.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PUT',
        p_return_value  => 'PUT',
        p_help_text     => q'~
Typically used to <em>replace</em> a new resource on the server. A request body is typically required. Note that you need to pass <em>all</em> attributes
to the server - missing attributes are likely to be written as null or empty values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DELETE',
        p_return_value  => 'DELETE',
        p_help_text     => q'~
Typically used to remove a resource on the server. A request body is typically not required.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PATCH',
        p_return_value  => 'PATCH',
        p_help_text     => q'~
Typically used to <em>change</em> a new resource on the server. Not all REST services provide PATCH endpoints. A request body, containing information on
which attribute to change to which value, is required. PATCH thus allows to do partial updates on a server resource. Note that there is no standard on how
the request body for a PATCH endpoint should look like - check the documentation of your REST service before invoking it.~' );
    --
    l_property_id := 1014;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLSQL_PROCESS_LOCATION',
        p_prompt             => 'Location',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOCATION',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select where the process is executed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Local Database',
        p_return_value  => 'LOCAL',
        p_help_text     => q'~PL/SQL code is executed in the local database.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'REST Enabled SQL',
        p_return_value  => 'REMOTE',
        p_help_text     => q'~PL/SQL code is executed in a remote database, where the connection is defined using REST Enabled SQL. ~' );
    --
    l_property_id := 1015;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_COLLECTION',
        p_prompt             => 'Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'VALUE',
        p_display_length     => 80,
        p_max_length         => 255,
        p_text_case          => 'UPPER',
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the Collection name. The source for this parameter value will be based on the value of the CLOB column from the collection's first row.~' );
    --
    l_property_id := 1016;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FIXED_REPORT_HEIGHT',
        p_prompt             => 'Fixed Report Height',
        p_property_type      => 'INTEGER',
        p_db_column          => 'FIXED_HEADER_MAX_HEIGHT',
        p_display_length     => 5,
        p_min_value          => 1,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'HEADING',
        p_help_text          => q'~Enter the fixed height for the report in pixels.~' );
    --
    --  Gantt Chart Column Mappings
    --
    l_property_id := 1017;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_ROW_ID',
        p_prompt             => 'Row ID',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2:NUMBER',
        p_db_column          => 'GANTT_ROW_ID',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the row ID on the gantt chart. A row ID is required if you wish to render multiple tasks per row. When no row ID column mapping is defined, each task will be rendered as a single task per row.~' );
    --
    l_property_id := 1018;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_ROW_NAME',
        p_prompt             => 'Row Name',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_db_column          => 'GANTT_ROW_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the row name on the gantt chart.~' );
    --
    l_property_id := 1019;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_TASK_ID',
        p_prompt             => 'Task ID',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2:NUMBER',
        p_db_column          => 'GANTT_TASK_ID',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the task ID on the gantt chart.~' );
    --
    l_property_id := 1020;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_TASK_NAME',
        p_prompt             => 'Task Name',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_db_column          => 'GANTT_TASK_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the task name on the gantt chart. When no row name column mapping is defined, the task name will be used as the row label on the row axis of the chart. ~' );
    --
    l_property_id := 1021;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_TASK_START_DATE',
        p_prompt             => 'Task Start Date',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_db_column          => 'GANTT_TASK_START_DATE',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the task start date on the Gantt chart.~' );
    --
    l_property_id := 1022;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_TASK_END_DATE',
        p_prompt             => 'Task End Date',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_db_column          => 'GANTT_TASK_END_DATE',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the task end date on the Gantt chart.~' );
    --
    l_property_id := 1023;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TRANSLATE_TO_TEXT',
        p_prompt             => 'Translate to Text',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'TRANSLATE_TO_TEXT',
        p_max_length         => 32767,
        p_display_group_name => 'ATTRIBUTES',
        p_help_text          => q'~Enter the translated text in the target language.~' );
    --
    l_property_id := 1024;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'JET_GANTT_TASK_CSS_CLASS',
        p_prompt                => 'Task CSS Classes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'GANTT_TASK_CSS_CLASS',
        p_display_length        => 80,
        p_max_length            => 255,
        p_display_group_name    => 'APPEARANCE',
        p_help_text             => q'~<p>Enter CSS classes to be applied to task bars on the Gantt chart. You may add multiple classes by separating them with spaces. You can utilize <code>&COLUMN_VALUE.</code> substitutions.</p>~' );
    --
    l_property_id := 1025;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'JET_GANTT_PROGRESS_CSS_CLASS',
        p_prompt                => 'Progress CSS Classes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'GANTT_PROGRESS_CSS_CLASS',
        p_display_length        => 80,
        p_max_length            => 255,
        p_display_group_name    => 'APPEARANCE',
        p_help_text             => q'~<p>Enter CSS classes to be applied to progress bars on the Gantt chart. You may add multiple classes by separating them with spaces. You can utilize <code>&COLUMN_VALUE.</code> substitutions.</p>~' );
    --
/*    l_property_id := 1024;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_PREDECESSOR_TASK_ID',
        p_prompt             => 'Predecessor Task ID',
        p_property_type      => 'HIDDEN',
        --p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2:NUMBER',
        p_db_column          => 'GANTT_PREDECESSOR_TASK_ID',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the predecessor task ID on the Gantt chart.~' ); */
    --
/*    l_property_id := 1025;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_SUCCESSOR_TASK_ID',
        p_prompt             => 'Successor Task ID',
        p_property_type      => 'HIDDEN',
        --p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2:NUMBER',
        p_db_column          => 'GANTT_SUCCESSOR_TASK_ID',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the successor task ID on the Gantt chart.~' );   */
    --
    l_property_id := 1026;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_BASELINE_START_COLUMN',
        p_prompt             => 'Baseline Start Date',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_db_column          => 'GANTT_BASELINE_START_COLUMN',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the baseline start date on the Gantt chart. A baseline start date is the task's original planned start date.~' );
    --
    l_property_id := 1027;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_BASELINE_END_COLUMN',
        p_prompt             => 'Baseline End Date',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_db_column          => 'GANTT_BASELINE_END_COLUMN',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the baseline end date on the Gantt chart. A baseline end date is the task's original planned end date.~' );
    --
    l_property_id := 1028;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_PROGRESS_COLUMN',
        p_prompt             => 'Progress',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER',
        p_db_column          => 'GANTT_PROGRESS_COLUMN',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the task progress on the Gantt chart. The value of the progress must be between 0 and 1.  If the value is invalid, no progress will be shown.~' );
    --
    l_property_id := 1029;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_VIEWPORT_START_SOURCE',
        p_prompt             => 'Start Date Source Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GANTT_VIEWPORT_START_SOURCE',
        p_display_group_name => 'GANTT_VIEWPORT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the source to be used for defining the start date of the Gantt chart's viewport. A viewport is a date range, which when defined can control the initial zooming of a chart when rendered. The chart will be zoomed in to the specified date range.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Database Column',
        p_return_value  => 'DB_COLUMN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the column value entered in <em>Start Date Column</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>Start Date Item</em> selected.~' );
    --
    l_property_id := 1030;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_VIEWPORT_START_COLUMN',
        p_prompt             => 'Start Date Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_db_column          => 'GANTT_VIEWPORT_START_COLUMN',
        p_display_group_name => 'GANTT_VIEWPORT',
        p_help_text          => q'~Select the column name to be used for defining the viewport start date of the Gantt chart.~' );
    --
    l_property_id := 1031;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_TASK_LABEL_POSITION',
        p_prompt             => 'Task Label Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TASK_LABEL_POSITION',
        p_display_group_name => 'LABEL',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the position of the task labels on the Gantt chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Start',
        p_return_value  => 'start',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The task label is rendered at the start of the task bar on the gantt chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'End',
        p_return_value  => 'end',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The task label is rendered at the end of the task bar on the gantt chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inner Center',
        p_return_value  => 'innerCenter',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The task label is rendered at the inner center of the task bar on the gantt chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inner Start',
        p_return_value  => 'innerStart',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The task label is rendered at the inner start of the task bar on the gantt chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inner End',
        p_return_value  => 'innerEnd',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The task label is rendered at the inner end of the task bar on the gantt chart.~' );
    --
    --  End of Gantt Chart Column Mappings
    --
    --
    l_property_id := 1032;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHILD_SOURCE_LOCATION',
        p_prompt             => 'Location',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOCATION',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the location of the data.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Local Database',
        p_return_value  => 'LOCAL',
        p_help_text     => q'~Data is sourced from the local database.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'REST Enabled SQL',
        p_return_value  => 'REMOTE',
        p_help_text     => q'~Data is sourced from a remote database, where the connection is defined using REST Enabled SQL. ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'REST Source',
        p_return_value  => 'WEB_SOURCE',
        p_help_text     => q'~Data is sourced from a RESTful web service defined using REST Data Sources.~' );
    --
    store_property_lov_values (
        p_property_id    => l_property_id,
        p_display_value  => 'Duality View',
        p_return_value   => 'DUALITY_VIEW',
        p_min_db_version => c_db_23ai,
        p_help_text      => q'~Data is sourced from a Duality View.~' );
    --
    store_property_lov_values (
        p_property_id    => l_property_id,
        p_display_value  => 'JSON Source',
        p_return_value   => 'JSON_COLLECTION',
        p_help_text      => q'~Data is sourced from a JSON Collection Table or Table with JSON columns.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region Source',
        p_return_value  => 'REGION_SOURCE',
        p_help_text     => q'~Data is sourced from the location specified in the region source definition.~' );
    --
    l_property_id := 1033;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_VALUE_COLUMN_NAME',
        p_prompt             => 'Value',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER:DATE', -- $$$
        p_db_column          => 'ITEMS_VALUE_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the value on this chart. For a Box Plot chart, this column will be used for defining the minimum, quartiles, median, and maximum values of the numerical data set.~' );
    --
    store_post_processing_props(
        p_prefix        => '',
        p_ids           => wwv_flow_t_number( 1034,        -- SOURCE_POST_PROCESSING
                                              1035,        -- POST_PROC_WHERE
                                              1036,        -- POST_PROC_ORDER_BY
                                              1041,        -- POST_PROC_SQL_QUERY
                                              1241,        -- POST_PROC_ORDER_BY_TYPE
                                              1242,        -- POST_PROC_ORDER_BY_ITEM
                                              1243,        -- POST_PROC_ORDER_BY_ITEM2
                                              5380 ) );    -- store_func_body_properties
    --
    l_property_id := 1037;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_VIEWPORT_START_ITEM',
        p_prompt             => 'Start Date Item',
        p_property_type      => 'ITEM',
        p_display_length     => 80,
        p_max_length         => 255,
        p_db_column          => 'GANTT_VIEWPORT_START_ITEM',
        p_display_group_name => 'GANTT_VIEWPORT',
        p_help_text          => q'~Select the page or application item to be used for defining the viewport start date of the Gantt chart.~' );
    --
    l_property_id := 1038;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_VIEWPORT_END_SOURCE',
        p_prompt             => 'End Date Source Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GANTT_VIEWPORT_END_SOURCE',
        p_display_group_name => 'GANTT_VIEWPORT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the source to be used for defining the end date of the Gantt chart's viewport. A viewport is a date range, which when defined can control the initial zooming of a chart when rendered. The chart will be zoomed in to the specified date range.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Database Column',
        p_return_value  => 'DB_COLUMN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the column value entered in <em>End Date Column</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>End Date Item</em> selected.~' );
    --
    l_property_id := 1039;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_VIEWPORT_END_COLUMN',
        p_prompt             => 'End Date Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_db_column          => 'GANTT_VIEWPORT_END_COLUMN',
        p_display_group_name => 'GANTT_VIEWPORT',
        p_help_text          => q'~Select the column name to be used for defining the viewport end date of the Gantt chart.~' );
    --
    l_property_id := 1040;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_VIEWPORT_END_ITEM',
        p_prompt             => 'End Date Item',
        p_property_type      => 'ITEM',
        p_display_length     => 80,
        p_max_length         => 255,
        p_db_column          => 'GANTT_VIEWPORT_END_ITEM',
        p_display_group_name => 'GANTT_VIEWPORT',
        p_help_text          => q'~Select the page or application item to be used for defining the viewport end date of the Gantt chart.~' );
    --
    l_property_id := 1042;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'USE_EXTERNAL_EXPR',
        p_prompt               => 'Enabled',
        p_property_type        => 'YES NO',
        p_db_column            => 'USE_EXTERNAL_EXPR',
        p_is_query_only        => true,
        p_display_group_name   => 'EXTERNAL_FILTER_ORDER_BY',
        p_help_text            => q'~Whether to use external Filtering or Order By expressions, which are directly passed to the REST service.~' );
    --
    l_property_id := 1043;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'EXTERNAL_FILTER_EXPR',
        p_prompt               => 'Filter',
        p_property_type        => 'TEXT EDITOR',
        p_db_column            => 'EXTERNAL_FILTER_EXPR',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_display_group_name   => 'EXTERNAL_FILTER_ORDER_BY',
        p_examples             => q'~
<dl><dt>For an ORDS REST Service, retrieve all records with the "sal" attribute less than 3000.</dt>
<dd><pre>
{"sal": {"$lt": 3000}}
</pre></dd>
</dl>
<dl><dt>For an Oracle Cloud Applications (Saas) REST Service, retrieve all records with the "sal" attribute less than 3000.</dt>
<dd><pre>sal &lt; 3000
</pre></dd>
</dl>~',
        p_help_text            => q'~Provide a filter expression to be passed to the external REST service. The expression will be passed to the remote server as-is. The syntax depends on the type of the REST Data Source. For example, Oracle REST Data Services (ORDS) expects JSON syntax while Oracle Cloud Applications (SaaS) expects a SQL-like where clause predicate using filterable attribute names.~' );
    --
    l_property_id := 1044;
    store_ext_order_by_property(
        p_name               => 'EXTERNAL_ORDER_BY_EXPR' );
    --
    l_property_id := 1045;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'JET_GANTT_BASELINE_CSS_CLASS',
        p_prompt                => 'Baseline CSS Classes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'GANTT_BASELINE_CSS_CLASS',
        p_display_length        => 80,
        p_max_length            => 255,
        p_display_group_name    => 'APPEARANCE',
        p_help_text             => q'~<p>Enter CSS classes to be applied to baseline bars on the Gantt chart. You may add multiple classes by separating them with spaces. You can utilize <code>&COLUMN_VALUE.</code> substitutions.</p>~' );
    --
    l_property_id := 1046;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_LABEL_DISPLAY_AS',
        p_prompt             => 'Display As',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ITEMS_LABEL_DISPLAY_AS',
        p_display_group_name => 'LABEL',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify how the labels should be displayed on the slices of the pie chart. ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Label',
        p_return_value  => 'LABEL',
        p_help_text     => q'~<p>The labels will display on the slices of the chart, based on the selected Label column mapping. For example, <strong>Bugs</strong>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Percentage',
        p_return_value  => 'PERCENT',
        p_help_text     => q'~<p>The labels will display as values between 0% and 100%, based on the selected Value column mapping. The value is a percentage of the total values represented on the chart. For example, <strong>15%</strong>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Value',
        p_return_value  => 'VALUE',
        p_help_text     => q'~<p>The labels will display as numeric values, based on the selected Value column mapping.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Label - Value',
        p_return_value  => 'LBL_VAL',
        p_help_text     => q'~<p>The labels will display the label and value information in the following format: label - value. For example, <strong>Bugs - 18</strong>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Label - Percentage',
        p_return_value  => 'LBL_PCT',
        p_help_text     => q'~<p>The labels will display the label and percentage information in the following format: label - percentage. For example, <strong>Bugs - 15%</strong>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Label - Percentage ( Value )',
        p_return_value  => 'ALL',
        p_help_text     => q'~<p>The labels will display the label, value and percentage information in the following format: label - percentage ( value ). For example, <strong>Bugs - 15% ( 18 )</strong>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Percentage ( Value )',
        p_return_value  => 'COMBO',
        p_help_text     => q'~<p>The labels will display as numeric values, based on the selected Value column mapping. For example, <strong>15% ( 18 )</strong>.</p>~' );
    --
    l_property_id := 1047;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'STRETCH_COLUMN',
        p_prompt             => 'Stretch',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'STRETCH',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify if the column should stretch if there is sufficient screen real estate. ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Never',
        p_return_value  => 'N',
        p_help_text     => q'~The column will not stretch and always just use the width specified. This is useful for columns with short content like Yes/No or Numbers.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Always',
        p_return_value  => 'A',
        p_help_text     => q'~The column will always stretch, irrespective of the <strong>Stretch</strong> Report Setting set by the End User.~' );
    --
    --
    l_property_id := 1048;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_FILL_GAPS',
        p_prompt             => 'Fill Gaps in Chart Data',
        p_property_type      => 'YES NO',
        p_db_column          => 'FILL_MULTI_SERIES_GAPS',
        p_display_group_name => 'MULTI_SERIES',
        p_help_text          => q'~Specify whether gaps in your multi-series chart data should be automatically filled.  This setting does not apply to single series charts or the following chart types: Bubble, Donut, Funnel, Gantt, Pie, Pyramid, Scatter, and Stock.  When set to <strong>On</strong>, data densification logic introduced in Oracle APEX 5.1.3 will be applied to the chart data.  When set to <strong>Off</strong>, gaps in data will not be filled and may result in inaccurate chart rendering. The default is <strong>On</strong>.  ~' );
    --
    l_property_id := 1049;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GAUGE_INDICATOR_SIZE',
        p_prompt             => 'Indicator Size',
        p_property_type      => 'NUMBER',
        p_db_column          => 'GAUGE_INDICATOR_SIZE',
        p_display_length     => 5,
        p_min_value          => 0,
        p_display_group_name => 'GAUGE',
        p_help_text          => q'~Specify the ratio of relative thickness of the indicator to the plot area.  The default is 1.~' );
    --
    l_property_id := 1050;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GAUGE_INNER_RADIUS',
        p_prompt             => 'Inner Radius',
        p_property_type      => 'NUMBER',
        p_db_column          => 'GAUGE_INNER_RADIUS',
        p_display_length     => 5,
        p_min_value          => 0,
        p_display_group_name => 'GAUGE',
        p_help_text          => q'~Specify the inner radius of a Status Meter gauge chart with circular orientation, defined by the distance from the center of the gauge to the innermost edge of the indicator and plot area. Valid values are a percent or ratio from 0 to 1.~' );
    --
    l_property_id := 1051;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GAUGE_START_ANGLE',
        p_prompt             => 'Start Angle',
        p_property_type      => 'NUMBER',
        p_db_column          => 'GAUGE_START_ANGLE',
        p_display_length     => 5,
        p_display_group_name => 'GAUGE',
        p_help_text          => q'~Enter the start angle in degrees for the Status Meter Gauge chart with circular orientation. Positive values indicate clockwise start angle. Negative values indicate counterclockwise start angle. You may draw your circular gauge at any angle you want and change its shape according to the chosen angle. The shape of your gauge depends on 2 settings: <strong>Start Angle</strong> and <strong>Angle Extent</strong>.~' );
    --
    l_property_id := 1052;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GAUGE_ANGLE_EXTENT',
        p_prompt             => 'Angle Extent',
        p_property_type      => 'NUMBER',
        p_db_column          => 'GAUGE_ANGLE_EXTENT',
        p_display_length     => 5,
        p_min_value          => 0,
        p_display_group_name => 'GAUGE',
        p_help_text          => q'~Enter the angle extent in degrees for the Status Meter Gauge chart with circular orientation. The Angle Extent is an actual angle of the circular orientation. Positive values indicate clockwise angle.  Negative values indicate counterclockwise angle. You may draw your circular gauge at any angle you want and change its shape according to the chosen angle. The shape of your gauge depends on 2 settings: <strong>Start Angle</strong> and <strong>Angle Extent</strong>.~' );
    --
    l_property_id := 1053;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GAUGE_PLOT_AREA_COLOR',
        p_prompt             => 'Plot Area Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'GAUGE_PLOT_AREA_COLOR',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Enter the color to be displayed for the plot area of a Status Meter Gauge chart. You can utilize <code>&COLUMN_VALUE.</code> substitutions. This color only applies when threshold colors have not been defined for the chart.</p>~' );
    --
    l_property_id := 1054;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_THRESHOLD_VALUES',
        p_prompt             => 'Values',
        p_property_type      => 'TEXT',
        p_db_column          => 'THRESHOLD_VALUES',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'THRESHOLDS',
        p_examples             => q'~
<dl>
<dt>A comma delimited list of static numeric values:</dt>
<dd><pre>
<strong>5,10,15</strong>
</pre></dd>
<dt>A comma delimited list of page or application items, returning numeric values, using:</dt>
<dd><pre>
<code>&amp;ITEM.</code> syntax. For example, <strong><code>&amp;ITEM_1.</code>,<code>&amp;ITEM_2.</code>,<code>&amp;ITEM_3.</code></strong>
</pre></dd>
<dt>A comma delimited list of columns, returning numeric values, using:</dt>
<dd><pre>
<code>&amp;COLUMN_NAME.</code> syntax. For example, <strong><code>&amp;COLUMN_NAME_1.</code>,<code>&amp;COLUMN_NAME_2.</code>,<code>&amp;COLUMN_NAME_3.</code></strong>
</pre></dd>
</dl>~',
        p_help_text          => q'~Enter the number(s) to be used to identify the upper bound of the threshold(s) to be rendered on a Status Meter Gauge chart.
For multiple thresholds, use a comma delimited list.~' );
    --
    l_property_id := 1055;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SHOW_GAUGE_VALUE',
        p_prompt             => 'Show',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_GAUGE_VALUE',
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Specify whether the value should be rendered on the chart.~' );
    --
    l_property_id := 1056;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GAUGE_LABEL_COLUMN_NAME',
        p_prompt             => 'Label',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_db_column          => 'ITEMS_LABEL_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the label(s) of the chart.~' );
    --
    l_property_id := 1057;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_THRESHOLD_COLORS',
        p_prompt             => 'Colors',
        p_property_type      => 'TEXT',
        p_db_column          => 'THRESHOLD_COLORS',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'THRESHOLDS',
        p_examples             => q'~
<dl>
<dt>A comma delimited list of colors:</dt>
<dd><pre>
<strong>red,yellow,blue</strong>
</pre></dd>
<dt>A comma delimited list of page or application items, returning colors, using:</dt>
<dd><pre>
<code>&amp;ITEM.</code> syntax. For example, <strong><code>&amp;ITEM_1.</code>,<code>&amp;ITEM_2.</code>,<code>&amp;ITEM_3.</code></strong>
</pre></dd>
<dt>A comma delimited list of columns, returning colors, using:</dt>
<dd><pre>
<code>&amp;COLUMN_NAME.</code> syntax. For example, <strong><code>&amp;COLUMN_NAME_1.</code>,<code>&amp;COLUMN_NAME_2.</code>,<code>&amp;COLUMN_NAME_3.</code></strong>
</pre></dd>
</dl>~',
        p_help_text          => q'~Enter the color(s) to be used to identify the upper bound of the threshold(s) to be rendered on a Status Meter Gauge chart.
For multiple thresholds, use a comma delimited list.~' );
    --
    l_property_id := 1058;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_THRESHOLD_DISPLAY',
        p_prompt             => 'Display',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'THRESHOLD_DISPLAY',
        p_display_group_name => 'THRESHOLDS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify how thresholds are to be displayed on the Status Meter Gauge chart. ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'All',
        p_return_value  => 'all',
        p_help_text     => q'~All thresholds, defined using the <strong>Threshold Values</strong> attribute, are displayed in the plot area of the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'On Indicator',
        p_return_value  => 'onIndicator',
        p_help_text     => q'~The current threshold, defined using the <strong>Threshold Values</strong> attribute, is displayed on the indicator of the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Current Threshold Only',
        p_return_value  => 'currentOnly',
        p_help_text     => q'~The current threshold, defined using the <strong>Threshold Values</strong> attribute, is displayed in the plot area of the chart.~' );
    --
    l_property_id := 1059;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_POSITION',
        p_prompt             => 'Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_POSITION',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify the position where the value should be displayed on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto',
        p_help_text     => q'~<p>The value will be displayed in the default position for the chart, which is outside of the plot area.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center',
        p_return_value  => 'center',
        p_help_text     => q'~<p>The value will be displayed in the center of the indicator on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inside Indicator Edge',
        p_return_value  => 'insideIndicatorEdge',
        p_help_text     => q'~<p>The value will be displayed inside the edge of the indicator on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Outside Indicator Edge',
        p_return_value  => 'outsideIndicatorEdge',
        p_help_text     => q'~<p>The value will be displayed outside the edge of the indicator on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Outside Plot Area',
        p_return_value  => 'outsidePlotArea',
        p_help_text     => q'~<p>The value will be displayed outside the plot area of the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'With Label',
        p_return_value  => 'withLabel',
        p_help_text     => q'~<p>If the label is rendered, the value will be displayed in the same position as the label. If the label is not rendered, the value will be displayed outside the plot area of the chart.~' );
    --
    l_property_id := 1060;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DATA_SOURCE_REGION',
        p_prompt                   => 'Form Region',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'ITEM_SOURCE_PLUG_ID',
        p_display_group_name       => 'SOURCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE',
        p_help_text                => q'~Select the associated Form region for this page item.~' );
    --
    l_property_id := 1061;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_SOURCE_COLUMN',
        p_prompt             => 'Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2:NUMBER:DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ:CLOB:BLOB:ROWID', -- $$$ add BFILE and interval types?
        p_db_column          => 'SOURCE',
        p_display_length     => 80,
        p_max_length         => 128,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~<p>Enter the case sensitive column name used as the source for this item value.</p>
<p>This column must exist in the data source specified within the Form region.
An error is raised at runtime, and the page is not loaded, if the column name does not exist in the referenced table.
Similarly, if there is no built-in fetch row process defined and there is an item with a source type of <strong>Database Column</strong>, then an error is raised, and the page is not loaded when trying to render the page.</p>~' );
    --
    l_property_id := 1062;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PROCESS_DATA_SOURCE_REGION',
        p_prompt                   => 'Form Region',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'REGION_ID',
        p_display_group_name       => 'IDENTIFICATION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE',
        p_help_text                => q'~Select the associated Form region for this page item.~' );
    --
    l_property_id := 1063;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_REFERENCE_LINE_VALUES',
        p_prompt             => 'Values',
        p_property_type      => 'TEXT',
        p_db_column          => 'REFERENCE_LINE_VALUES',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'REFERENCE_LINES',
        p_examples             => q'~
<dl>
<dt>A comma delimited list of static numeric values:</dt>
<dd><pre>
<strong>5,10,15</strong>
</pre></dd>
<dt>A comma delimited list of page or application items, returning numeric values, using:</dt>
<dd><pre>
<code>&amp;ITEM.</code> syntax. For example, <strong><code>&amp;ITEM_1.</code>,<code>&amp;ITEM_2.</code>,<code>&amp;ITEM_3.</code></strong>
</pre></dd>
<dt>A comma delimited list of columns, returning numeric values, using:</dt>
<dd><pre>
<code>&amp;COLUMN_NAME.</code> syntax. For example, <strong><code>&amp;COLUMN_NAME_1.</code>,<code>&amp;COLUMN_NAME_2.</code>,<code>&amp;COLUMN_NAME_3.</code></strong>
</pre></dd>
</dl>~',
        p_help_text          => q'~Enter the number(s) to be used to identify the reference line(s) to be rendered on a Status Meter Gauge chart.
For multiple reference lines, use a comma delimited list.~' );
    --
    l_property_id := 1064;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_REFERENCE_LINE_COLORS',
        p_prompt             => 'Colors',
        p_property_type      => 'TEXT',
        p_db_column          => 'REFERENCE_LINE_COLORS',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'REFERENCE_LINES',
        p_examples             => q'~
<dl>
<dt>A comma delimited list of colors:</dt>
<dd><pre>
<strong>red,yellow,blue</strong>
</pre></dd>
<dt>A comma delimited list of page or application items, returning colors, using:</dt>
<dd><pre>
<code>&amp;ITEM.</code> syntax. For example, <strong><code>&amp;ITEM_1.</code>,<code>&amp;ITEM_2.</code>,<code>&amp;ITEM_3.</code></strong>
</pre></dd>
<dt>A comma delimited list of columns, returning colors, using:</dt>
<dd><pre>
<code>&amp;COLUMN_NAME.</code> syntax. For example, <strong><code>&amp;COLUMN_NAME_1.</code>,<code>&amp;COLUMN_NAME_2.</code>,<code>&amp;COLUMN_NAME_3.</code></strong>
</pre></dd>
</dl>~',
        p_help_text          => q'~Enter the color(s) to be used to identify the reference line(s) to be rendered on a Status Meter Gauge chart.
For multiple reference lines, use a comma delimited list.~' );
    --
    l_property_id := 1065;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'STACK_CATEGORY',
        p_prompt                     => 'Stack Category',
        p_property_type              => 'TEXT',
        p_db_column                  => 'STACK_CATEGORY',
        p_display_length             => 60,
        p_max_length                 => 100,
        p_display_group_name         => 'APPEARANCE',
        p_help_text                  => q'~Specify the stack category name to assign this series to. By default, all series of a stacked chart are grouped together in the same stack. To group this series in a separate stack, set a stack category. You can utilize <code>&COLUMN_VALUE.</code> substitutions.~' );
    --
    l_property_id := 1066;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAINTAIN_SESSION_STATE_FORM',
        p_prompt             => 'Storage',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'IS_PERSISTENT',
        p_display_group_name => 'SESSION_STATE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how session state is maintained.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Per Request (Memory Only)',
        p_return_value  => 'N',
        p_help_text     => q'~Do not save state in the database. State is only available when processing the current request. When AJAX requests need to use an item, make sure to pass the item name via "Page Items To Submit".~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Per Session (Persistent)',
        p_return_value  => 'Y',
        p_help_text     => q'~Maintain for each session by storing the value in the database, to access it across requests.~' );
    --
    store_jet_font_properties (
        p_font_group              => 'TITLE_FONT',
        p_display_group_name      => 'TITLE',
        p_property_id_font_family => 1067,
        p_property_id_font_style  => 1068,
        p_property_id_font_size   => 1069,
        p_property_id_font_color  => 1070 );
    --
    store_jet_font_properties (
        p_font_group              => 'TICK_LABEL_FONT',
        p_display_group_name      => 'TICK_LABEL',
        p_property_id_font_family => 1071,
        p_property_id_font_style  => 1072,
        p_property_id_font_size   => 1073,
        p_property_id_font_color  => 1074 );
    --
    store_jet_font_properties (
        p_font_group              => 'LEGEND_FONT',
        p_display_group_name      => 'LEGEND',
        p_property_id_font_family => 1075,
        p_property_id_font_style  => 1076,
        p_property_id_font_size   => 1077,
        p_property_id_font_color  => 1078 );
    --
    store_jet_font_properties (
        p_font_group              => 'ITEMS_LABEL_FONT',
        p_display_group_name      => 'LABEL',
        p_property_id_font_family => 1079,
        p_property_id_font_style  => 1080,
        p_property_id_font_size   => 1081,
        p_property_id_font_color  => 1082 );
    --
    l_property_id := 1083;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_FLASHBACK',
        p_prompt             => 'Flashback',
        p_property_type      => 'YES NO',
        p_db_column          => 'ENABLE_FLASHBACK',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~<p>Specify whether end users can utilize flashback queries for this Interactive Grid.</p>
<p>Flashback queries utilize the Oracle Flashback Technology and Database Point-in-Time Recovery to view data as it existed at a previous point in time. Users can only query this data, but can not rewind any data changes. How far back in time they can successfully perform a flashback query is determined by when the redo log files were last switched within the Oracle database, as this technology utilizes the RMAN backup.~' );
    --
    l_property_id := 1084;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFINE_CHART_VIEW',
        p_prompt             => 'Define Chart View',
        p_property_type      => 'YES NO',
        p_db_column          => 'DEFINE_CHART_VIEW',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~<p>Specify whether end users can define a chart for this Interactive Grid.</p>~' );
    --
    l_property_id := 1085;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SELECT_FIRST_ROW',
        p_prompt             => 'Select First Row',
        p_property_type      => 'YES NO',
        p_db_column          => 'SELECT_FIRST_ROW',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Specify whether the first row should automatically be selected.~' );
    --
    l_property_id := 1086;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_HIDE',
        p_prompt             => 'Hide',
        p_property_type      => 'YES NO',
        p_db_column          => 'ENABLE_HIDE',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can hide this column.~' );
    --
    l_property_id := 1087;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_CONTROL_BREAK',
        p_prompt             => 'Control Break/Aggregate',
        p_property_type      => 'YES NO',
        p_db_column          => 'ENABLE_CONTROL_BREAK',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~<p>Specify whether end users can use this column in control breaks, and aggregates.</p>
        <p>Note - Allowing these operations can lead to performance issues, especially on large data sets or where appropriate column indexes are not available.</p>~' );
    --
    l_property_id := 1088;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HELP_TEXT_CLOB',
        p_prompt             => 'Help Text',
        p_property_type      => 'HTML',
        p_db_column          => 'HELP_TEXT',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'HELP',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Use this attribute to enter help text for the current page. Page level help supports shortcuts using the following syntax:</p>
<pre>"SHORTCUT_NAME"</pre>
<p>Page help text is not displayed by default. However, you can readily develop a help system that exposes this text.</p>~' );
    --
    l_property_id := 1089;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SUPPLEMENTAL_TEXT',
        p_prompt             => 'Supplemental Text',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'SUPPLEMENTAL_TEXT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'DOWNLOAD',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter text that appears at the top of the download files. You can enter data classification, legal or warning messages about the data in the file.</p>
        <p> Note - The entered text will be included in all report download formats.  If CSV download is enabled, the defined text will invalidate the CSV file format.</p>~' );
    --
    l_property_id := 1090;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SOURCE_FILTERED_REGION',
        p_prompt                => 'Filtered Region',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'FILTERED_REGION_ID',
        p_display_group_name    => 'SOURCE',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_region,
        p_help_text             => q'~Select the region associated with this Faceted Search or Smart Filter region.~' );
    --
    l_property_id := 1091;
    store_lov_type_property (
        p_name => 'FACET_LOV_TYPE' );
    --
    l_property_id := 1092;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FC_COMPUTE_COUNTS',
        p_prompt             => 'Compute Counts',
        p_property_type      => 'YES NO',
        p_db_column          => 'FC_COMPUTE_COUNTS',
        p_display_group_name => 'LIST_ENTRIES',
        p_help_text          => q'~<p>Specify whether to compute the count of the list entries for the facet or filter. There is a performance impact associated with the use of this option.</p>~' );
    --
    l_property_id := 1093;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FC_SHOW_COUNTS',
        p_prompt             => 'Show Counts',
        p_property_type      => 'YES NO',
        p_db_column          => 'FC_SHOW_COUNTS',
        p_display_group_name => 'LIST_ENTRIES',
        p_help_text          => q'~<p>Specify whether to show the count of occurrences of the list entries for the facet or filter.  When set to <strong>On</strong>, the count will display in brackets next to the list entry. For example, KING (3).</p>~' );
    --
    l_property_id := 1094;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FC_ZERO_COUNT_ENTRIES',
        p_prompt             => 'Zero Count Entries',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FC_ZERO_COUNT_ENTRIES',
        p_display_group_name => 'LIST_ENTRIES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Specify how list entries with zero count are displayed for the facet or filter.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hide',
        p_return_value  => 'H',
        p_help_text     => q'~<p>Only show filterable list entries.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Disable',
        p_return_value  => 'D',
        p_help_text     => q'~<p>Show all entries but disable those that are not filterable.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Show Last',
        p_return_value  => 'L',
        p_help_text     => q'~<p>Show all entries but disable those that are not filterable, and show them last in the list for the facet or filter. This option is ignored if the associated Shared List of Values makes use of the group feature.</p>~' );
    --
    l_property_id := 1095;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FC_FILTER_VALUES_INITIALLY',
        p_prompt             => 'Display Filter Initially',
        p_property_type      => 'YES NO',
        p_db_column          => 'FC_FILTER_VALUES',
        p_display_group_name => 'LIST_ENTRIES',
        p_help_text          => q'~<p>Specify whether the client-side filtering is displayed initially for the facet.  When set to <strong>On</strong>, a filter field is shown above the list entries. If the number of entries in the facet is less than the value on Maximum Displayed Entries, the filter field won't be displayed.</p>~' );
    --
    l_property_id := 1096;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FC_SHOW_SELECTED_FIRST',
        p_prompt             => 'Show Selected First',
        p_property_type      => 'YES NO',
        p_db_column          => 'FC_SHOW_SELECTED_FIRST',
        p_display_group_name => 'LIST_ENTRIES',
        p_help_text          => q'~<p>Specify whether any selected list entries are shown first in the list for the facet or filter. This attribute does not apply where the list of values associated with the facet defines groups.</p>~' );
    --
    l_property_id := 1097;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INCLUDE_NULL_OPTION',
        p_prompt             => 'Include Null Option',
        p_property_type      => 'YES NO',
        p_db_column          => 'LOV_DISPLAY_NULL',
        p_display_group_name => 'LIST_OF_VALUES',
        p_help_text          => q'~Specify whether the list of values includes a NULL option at the top of the list.~' );
    --
    l_property_id := 1098;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FC_SHOW_MORE_COUNT',
        p_prompt             => 'Maximum Displayed Entries',
        p_property_type      => 'INTEGER',
        p_db_column          => 'FC_SHOW_MORE_COUNT',
        p_min_value          => 1,
        p_display_group_name => 'LIST_ENTRIES',
        p_help_text          => q'~<p>Specify the maximum number of list entries to display for the facet.  When a value is specified, and the list contains more than this number of entries, a <strong>Show More</strong> link will render at the bottom of the list. When no value is specified, all list entries will be displayed.</p>~' );
    --
    l_property_id := 1099;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FC_COLLAPSIBLE',
        p_prompt             => 'Collapsible',
        p_property_type      => 'YES NO',
        p_db_column          => 'FC_COLLAPSIBLE',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Specify whether the facet is collapsible.  When set to <strong>On</strong>, a toggle displays to the left of the facet, to hide/show its list entries. When set to <strong>Off</strong>, the facet and its list entries are always visible.</p>~' );
    --
    l_property_id := 1100;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FC_INITIAL_COLLAPSED',
        p_prompt             => 'Initially Collapsed',
        p_property_type      => 'YES NO',
        p_db_column          => 'FC_INITIAL_COLLAPSED',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Specify whether the facet should be initially rendered in a collapsed state. Changes to this property may not be seen right away because the expansion state is persisted in the browser session. To see the effect of changes to this property reset the report using the link Reset Regions cache control option such as with the wizard generated Reset button.</p>~' );
    --
    l_property_id := 1101;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FC_MAX_HEIGHT',
        p_prompt             => 'Maximum Height',
        p_property_type      => 'INTEGER',
        p_db_column          => 'FC_MAX_HEIGHT',
        p_display_length     => 5,
        p_min_value          => 1,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~Enter the maximum height for the facet in pixels.~' );
    --
    l_property_id := 1102;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TEXT_SEARCH_DB_COLUMNS',
        p_prompt             => 'Database Column(s)',
        p_property_type      => 'TEXT',
        p_db_column          => 'SOURCE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~<p>Depending on the <strong>Search Type</strong> specified, enter one, or a list of database column names that are used for text search.</p>
<ul>
  <li><strong>Row Search</strong>: Enter a comma delimited list of case sensitive database column names of type VARCHAR2 used for text search. If no column is specified, all VARCHAR2 columns will automatically be used.</li>
  <li><strong>Oracle Text</strong>: Enter the case sensitive database column name which contains the Oracle Text index.</li>
</ul>~' );
    --
    l_property_id := 1103;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FC_SORT_BY_TOP_COUNTS',
        p_prompt             => 'Sort By Top Counts',
        p_property_type      => 'YES NO',
        p_db_column          => 'FC_SORT_BY_TOP_COUNTS',
        p_display_group_name => 'LIST_ENTRIES',
        p_help_text          => q'~Specify whether to sort the list entries for the facet or filter. When set to <strong>On</strong>, the list entries are sorted by count descending. When set to <strong>Off</strong>, the list entries are displayed in the order defined by the List of Values.~' );
    --
    l_property_id := 1104;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEPENDING_ON_FACET',
        p_prompt                   => 'Facet',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'DEPENDING_ON_ID',
        p_display_group_name       => 'DEPENDING_ON',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_facet,
        p_lov_component_type_scope => 'PARENT',
        p_help_text                => q'~Select the associated Facet which should be checked to decide if the current Facet should be displayed.~' );
    --
    l_property_id := 1105;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEPENDING_ON_CONDITION',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DEPENDING_ON_CONDITION_TYPE',
        p_display_group_name => 'DEPENDING_ON',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify a condition which checks the value of another Facet or Filter to control whether the current Facet or Filter should be displayed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'equal to',
        p_return_value  => 'EQUALS',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Checks if the value of the depending on <em>Facet or Filter</em> is equal to the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'not equal to',
        p_return_value  => 'NOT_EQUALS',
        p_help_text     => q'~Checks if the value of the depending on <em>Facet or Filter</em> is not equal to the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'in list',
        p_return_value  => 'IN_LIST',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Checks if the value of the depending on <em>Facet or Filter</em> is in the <em>List</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'not in list',
        p_return_value  => 'NOT_IN_LIST',
        p_help_text     => q'~Checks if the value of the depending on <em>Facet or Filter</em> is not in the <em>List</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'is null',
        p_return_value  => 'NULL',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Checks if the value of the depending on <em>Facet or Filter</em> is empty.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'is not null',
        p_return_value  => 'NOT_NULL',
        p_help_text     => q'~Checks if the value of the depending on <em>Facet or Filter</em> is not empty.~' );
    --
    l_property_id := 1106;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEPENDING_ON_COND_VALUE',
        p_prompt             => 'Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'DEPENDING_ON_EXPRESSION',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'DEPENDING_ON',
        p_help_text          => q'~Enter the value for this condition.~' );
    --
    l_property_id := 1107;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'DEPENDING_ON_COND_LIST',
        p_prompt                => 'List',
        p_property_type         => 'TEXT',
        p_db_column             => 'DEPENDING_ON_EXPRESSION',
        p_display_length        => 60,
        p_max_length            => 4000,
        p_multi_value_delimiter => ',',
        p_display_group_name    => 'DEPENDING_ON',
        p_help_text             => q'~Enter the comma separated list of values for this condition.~' );
    --
    l_property_id := 1108;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CASCADING_LOV_PARENT_COLUMN',
        p_prompt             => 'LOV Column',
        p_property_type      => 'TEXT',
        p_db_column          => 'LOV_CASCADE_PARENT_COLUMN',
        p_display_length     => 80,
        p_max_length         => 128,
        p_display_group_name => 'CASCADING_LOV',
        p_help_text          => q'~Enter the case sensitive database column name of the List of Values, which is used to query it using the parent facet or filter value.~' );
    --
    l_property_id := 1109;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CASCADING_LOV_PARENT_FACET',
        p_prompt             => 'Parent Facet',
        p_property_type      => 'FACET',
        p_db_column          => 'LOV_CASCADE_PARENT_ITEMS',
        p_display_group_name => 'CASCADING_LOV',
        p_help_text          => q'~Select a Facet that triggers the refresh of this list of values.~' );
    --
    l_property_id := 1110;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'DOWNLOAD_AUTH_SCHEME',
        p_prompt                => 'Authorization',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'DOWNLOAD_AUTH_SCHEME',
        p_display_group_name    => 'DOWNLOAD',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~<p>Select an authorization scheme to restrict who can download.
        To enable an end user to download, this authorization scheme must evaluate to TRUE for that user.</p>
        <p>Note - If no authorization scheme is provided then any user may download.</p>~' );
    --
    l_property_id := 1111;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'WEB_SRC_HAS_LOCAL_TABLE',
        p_prompt                      => 'REST Data Source has a Synchronization table',
        p_property_type               => 'HIDDEN',
        p_db_column                   => 'WEB_SRC_HAS_LOCAL_TABLE',
        p_display_group_name          => 'SYNCHRONIZATION',
        p_is_query_only               => true,
        p_help_text                   => q'~Identifies whether the REST Data Source has a local synchronization table~' );
    --
    l_property_id := 1112;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'WEB_SRC_USE_LOCAL_TABLE',
        p_prompt                      => 'Use Local Table',
        p_property_type               => 'YES NO',
        p_db_column                   => 'USE_LOCAL_SYNC_TABLE',
        p_display_group_name          => 'SYNCHRONIZATION',
        p_help_text                   => q'~<p>Enable this to use the local table, which is configured within the <strong>Synchronization</strong> section of the REST Data Source, instead of reaching out to the external REST service.~' );
    --
    --
    store_jet_font_properties (
        p_font_group              => 'STACK_FONT',
        p_display_group_name      => 'APPEARANCE',
        p_property_id_font_family => 1113,
        p_property_id_font_style  => 1114,
        p_property_id_font_size   => 1115,
        p_property_id_font_color  => 1116 );
    --
    --  IG Saved Reports
    l_property_id := 1117;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IG_SAVED_VISIBILITY',
        p_prompt             => 'Visibility',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VISIBILITY',
        p_is_query_only      => true,
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~View the saved report category, which dictates where this report displays within the Reports select List. This attribute is view only and cannot be updated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Primary',
        p_return_value  => 'PRIMARY',
        p_help_text     => q'~Report saved by developers, that is displayed by default.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Alternative',
        p_return_value  => 'ALTERNATIVE',
        p_help_text     => q'~Subsequent report layouts saved by developers, that end users can select.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Public',
        p_return_value  => 'PUBLIC',
        p_help_text     => q'~Report layouts saved by end users, that all other end users can select.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Private',
        p_return_value  => 'PRIVATE',
        p_help_text     => q'~Report layouts saved by end users, that only the end user who saved it can select.~' );
    --
    l_property_id := 1118;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'IG_SAVED_REPORT_ALIAS',
        p_prompt                => 'Alias',
        p_property_type         => 'TEXT',
        p_db_column             => 'STATIC_ID',
        p_restricted_characters => 'US_ONLY_UNDERSCORE_NO_SPACE',
        p_display_group_name    => 'IDENTIFICATION',
        p_help_text             => q'~Enter an alias for this saved report. Use this alias to define a more meaningful URL link to this specific saved report. This link can be used to link directly from elsewhere in the application.~' );
    --
    l_property_id := 1119;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOV_SORT_DIRECTION',
        p_prompt             => 'Sort Direction',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOV_SORT_DIRECTION',
        p_display_group_name => 'LIST_OF_VALUES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Define the sort direction for the values. Due to performance reasons the sorting is done on the client side and the values are sorted alphanumerically. If a server-side sort is required, a different List of Values type should be used.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Ascending',
        p_return_value  => 'ASC' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Descending',
        p_return_value  => 'DESC' );
    --
    --
    -- CARD Properties
    --
    l_property_id := 1130;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'CARD_LAYOUT_TYPE',
        p_prompt                      => 'Layout',
        p_property_type               => 'SELECT LIST',
        p_db_column                   => 'LAYOUT_TYPE',
        p_display_group_name          => 'APPEARANCE',
        p_lov_type                    => 'STATIC',
        p_help_text                   => q'~This property determines how the cards are arranged on the page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Grid',
        p_return_value  => 'GRID',
        p_help_text     => q'~Arranges the cards in a grid of columns.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Float',
        p_return_value  => 'FLOAT',
        p_help_text     => q'~Cards will wrap when they no longer fit horizontally on the screen.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Horizontal (Row)',
        p_return_value  => 'ROW',
        p_help_text     => q'~Cards will be positioned on top of each other.~' );
    --
    l_property_id := 1131;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'GRID_COLUMN_COUNT',
        p_prompt                      => 'Grid Columns',
        p_property_type               => 'SELECT LIST',
        p_db_column                   => 'GRID_COLUMN_COUNT',
        p_display_group_name          => 'APPEARANCE',
        p_lov_type                    => 'STATIC',
        p_help_text                   => q'~<p>Select how many layout columns this component occupies. Use Automatic to balance the available layout columns across all components in the same row.</p>
<dl>
  <dt>Auto</dt>
    <dd>Cards will have an initial width and will automatically wrap to a new row when they can no longer fit comfortably.</dd>
  <dt>2, 3, 4, 5 Columns</dt>
    <dd>Cards will be arranged to fit the selected number of columns per line.  The layout may reduce the number of columns based on the viewport width.</dd>
  <dt>You can configure the width of the cards by setting a CSS variable.</dt>
    <dd>For example add the following snippet to set the card width to 320px: <pre>:root {
  --a-cv-item-width: 320px;
}</pre></dd>
</dl>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '2 Columns',
        p_return_value  => '2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '3 Columns',
        p_return_value  => '3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '4 Columns',
        p_return_value  => '4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '5 Columns',
        p_return_value  => '5' );
    --
    l_property_id := 1132;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'COMPONENT_CSS_CLASSES',
        p_prompt                      => 'CSS Classes',
        p_property_type               => 'COMBOBOX',
        p_multi_value_delimiter       => ' ',
        p_db_column                   => 'COMPONENT_CSS_CLASSES',
        p_display_length              => 50,
        p_max_length                  => 255,
        p_display_group_name          => 'APPEARANCE',
        p_help_text                   => q'~Enter CSS classes to apply to this component. This class will apply to the cards container.  You may add multiple classes by separating them with spaces.~' );
    -- not for 20.2
    -- l_property_id := 1133;
    -- store_property (
    --     p_id                          => l_property_id,
    --     p_name                        => 'CARD_APPEARANCE',
    --     p_prompt                      => 'Appearance',
    --     p_property_type               => 'SELECT LIST',
    --     p_db_column                   => 'CARD_APPEARANCE',
    --     p_display_group_name          => 'CARD',
    --     p_lov_type                    => 'STATIC',
    --     p_help_text                   => q'~This determines the overall appearance of the card component.~' );
    --
    --store_property_lov_values (
    --    p_property_id   => l_property_id,
    --    p_display_value => 'Block',
    --    p_return_value  => 'BLOCK' );
    ----
    --store_property_lov_values (
    --    p_property_id   => l_property_id,
    --    p_display_value => 'Featured',
    --    p_return_value  => 'FEATURED' );
    ----
    --store_property_lov_values (
    --    p_property_id   => l_property_id,
    --    p_display_value => 'Compact',
    --    p_return_value  => 'COMPACT' );
    --
    l_property_id := 1134;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'CARD_CSS_CLASSES',
        p_prompt                      => 'CSS Classes',
        p_property_type               => 'COMBOBOX',
        p_multi_value_delimiter       => ' ',
        p_db_column                   => 'CARD_CSS_CLASSES',
        p_display_length              => 50,
        p_max_length                  => 255,
        p_display_group_name          => 'CARD',
        p_help_text                   => q'~Enter CSS classes to apply to each individual card. You may add multiple classes by separating them with spaces.~' );
    --
    l_property_id := 1135;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'TITLE_ADV_FORMATTING',
        p_prompt                      => 'Advanced Formatting',
        p_property_type               => 'YES NO',
        p_db_column                   => 'TITLE_ADV_FORMATTING',
        p_display_group_name          => 'TITLE',
        p_help_text                   => q'~Specify whether this component displays using a column or advanced formatting using HTML expressions and supported substitution strings.~' );
    --
    l_property_id := 1136;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'TITLE_COLUMN_NAME',
        p_prompt                      => 'Column',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'TITLE_COLUMN_NAME',
        p_column_data_types           => 'VARCHAR2',
        p_display_group_name          => 'TITLE',
        p_help_text                   => q'~Select the column to be used as title.~' );
    --
    l_property_id := 1137;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TITLE_HTML_EXPR',
        p_prompt             => 'HTML Expression',
        p_property_type      => 'HTML',
        p_db_column          => 'TITLE_HTML_EXPR',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
  <dt>Change the background and text colors</dt>
    <dd><pre>&lt;span style="background-color:yellow; color:red;">&EMPLOYEE_STATUS.&lt;/span></pre></dd>
  <dt>Use Heading 2</dt>
    <dd><pre>&lt;h2>&EMPLOYEE_NAME.&lt;/h2></pre></dd>
  <dt>Use a dynamic class from the SQL query</dt>
    <dd><pre>&lt;span class="&COLUMN_CLASS.">&EMPLOYEE_STATUS.&lt;/span></pre><br>
    The <code>&COLUMN_CLASS.</code> and <code>&EMPLOYEE_STATUS.</code> substitutions in this example are columns selected in the report SQL query.</dd>
  <dt>Show an image, and a tooltip on hover</dt>
    <dd><pre>&lt;img src="&IMAGE_NAME." title="&EMPLOYEE_NAME."&gt;</pre></dd>
</dl>~',
        p_display_group_name => 'TITLE',
        p_is_translatable    => true,
        p_help_text          => q'~Enter HTML expressions to be shown in this column. Use <code>&COLUMN.</code> syntax to show column values in HTML.~' );
    --
    l_property_id := 1138;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'TITLE_CSS_CLASSES',
        p_prompt                      => 'CSS Classes',
        p_property_type               => 'COMBOBOX',
        p_multi_value_delimiter       => ' ',
        p_db_column                   => 'TITLE_CSS_CLASSES',
        p_display_length              => 50,
        p_max_length                  => 255,
        p_display_group_name          => 'TITLE',
        p_help_text                   => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~' );
    --
    l_property_id := 1139;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'SUB_TITLE_ADV_FORMATTING',
        p_prompt                      => 'Advanced Formatting',
        p_property_type               => 'YES NO',
        p_db_column                   => 'SUB_TITLE_ADV_FORMATTING',
        p_display_group_name          => 'SUB_TITLE',
        p_help_text                   => q'~Specify whether this component displays using a column or advanced formatting using HTML expressions and supported substitution strings.~' );
    --
    l_property_id := 1140;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'SUB_TITLE_COLUMN_NAME',
        p_prompt                      => 'Column',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'SUB_TITLE_COLUMN_NAME',
        p_column_data_types           => 'VARCHAR2',
        p_display_group_name          => 'SUB_TITLE',
        p_help_text                   => q'~Select the column to be used as subtitle.~' );
    --
    l_property_id := 1141;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SUB_TITLE_HTML_EXPR',
        p_prompt             => 'HTML Expression',
        p_property_type      => 'HTML',
        p_db_column          => 'SUB_TITLE_HTML_EXPR',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
  <dt>Change the background and text colors</dt>
    <dd><pre>&lt;span style="background-color:yellow; color:red;">&EMPLOYEE_STATUS.&lt;/span></pre></dd>
  <dt>Use Heading 2</dt>
    <dd><pre>&lt;h2>&EMPLOYEE_NAME.&lt;/h2></pre></dd>
  <dt>Use a dynamic class from the SQL query</dt>
    <dd><pre>&lt;span class="&COLUMN_CLASS.">&EMPLOYEE_STATUS.&lt;/span></pre><br>
    The <code>&COLUMN_CLASS.</code> and <code>&EMPLOYEE_STATUS.</code> substitutions in this example are columns selected in the report SQL query.</dd>
  <dt>Show an image, and a tooltip on hover</dt>
    <dd><pre>&lt;img src="&IMAGE_NAME." title="&EMPLOYEE_NAME."&gt;</pre></dd>
</dl>~',
        p_display_group_name => 'SUB_TITLE',
        p_is_translatable    => true,
        p_help_text          => q'~Enter HTML expressions to be shown in this column. Use <code>&COLUMN.</code> syntax to show column values in HTML.~' );
    --
    l_property_id := 1142;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'SUB_TITLE_CSS_CLASSES',
        p_prompt                      => 'CSS Classes',
        p_property_type               => 'COMBOBOX',
        p_multi_value_delimiter       => ' ',
        p_db_column                   => 'SUB_TITLE_CSS_CLASSES',
        p_display_length              => 50,
        p_max_length                  => 255,
        p_display_group_name          => 'SUB_TITLE',
        p_help_text                   => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~' );
    --
    l_property_id := 1143;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'BODY_ADV_FORMATTING',
        p_prompt                      => 'Advanced Formatting',
        p_property_type               => 'YES NO',
        p_db_column                   => 'BODY_ADV_FORMATTING',
        p_display_group_name          => 'BODY',
        p_help_text                   => q'~Specify whether this component displays using a column or advanced formatting using HTML expressions and supported substitution strings.~' );
    --
    l_property_id := 1144;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'BODY_COLUMN_NAME',
        p_prompt                      => 'Column',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'BODY_COLUMN_NAME',
        p_column_data_types           => 'VARCHAR2',
        p_display_group_name          => 'BODY',
        p_help_text                   => q'~Select the column to be used as body.~' );
    --
    l_property_id := 1145;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BODY_HTML_EXPR',
        p_prompt             => 'HTML Expression',
        p_property_type      => 'HTML',
        p_db_column          => 'BODY_HTML_EXPR',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
  <dt>Change the background and text colors</dt>
    <dd><pre>&lt;span style="background-color:yellow; color:red;">&EMPLOYEE_STATUS.&lt;/span></pre></dd>
  <dt>Use Heading 2</dt>
    <dd><pre>&lt;h2>&EMPLOYEE_NAME.&lt;/h2></pre></dd>
  <dt>Use a dynamic class from the SQL query</dt>
    <dd><pre>&lt;span class="&COLUMN_CLASS.">&EMPLOYEE_STATUS.&lt;/span></pre><br>
    The <code>&COLUMN_CLASS.</code> and <code>&EMPLOYEE_STATUS.</code> substitutions in this example are columns selected in the report SQL query.</dd>
  <dt>Show an image, and a tooltip on hover</dt>
    <dd><pre>&lt;img src="&IMAGE_NAME." title="&EMPLOYEE_NAME."&gt;</pre></dd>
</dl>~',
        p_display_group_name => 'BODY',
        p_is_translatable    => true,
        p_help_text          => q'~Enter HTML expressions to be shown in this column. Use <code>&COLUMN.</code> syntax to show column values in HTML.~' );
    --
    l_property_id := 1146;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'BODY_CSS_CLASSES',
        p_prompt                      => 'CSS Classes',
        p_property_type               => 'COMBOBOX',
        p_multi_value_delimiter       => ' ',
        p_db_column                   => 'BODY_CSS_CLASSES',
        p_display_length              => 50,
        p_max_length                  => 255,
        p_display_group_name          => 'BODY',
        p_help_text                   => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~' );
    --
    l_property_id := 1147;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'SECOND_BODY_ADV_FORMATTING',
        p_prompt                      => 'Advanced Formatting',
        p_property_type               => 'YES NO',
        p_db_column                   => 'SECOND_BODY_ADV_FORMATTING',
        p_display_group_name          => 'SECONDARY_BODY',
        p_help_text                   => q'~Specify whether this component displays using a column or advanced formatting using HTML expressions and supported substitution strings.~' );
    --
    l_property_id := 1148;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'SECOND_BODY_COLUMN_NAME',
        p_prompt                      => 'Column',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'SECOND_BODY_COLUMN_NAME',
        p_column_data_types           => 'VARCHAR2',
        p_display_group_name          => 'SECONDARY_BODY',
        p_help_text                   => q'~Select the column to be used as secondary body.~' );
    --
    l_property_id := 1149;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SECOND_BODY_HTML_EXPR',
        p_prompt             => 'HTML Expression',
        p_property_type      => 'HTML',
        p_db_column          => 'SECOND_BODY_HTML_EXPR',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
  <dt>Change the background and text colors</dt>
    <dd><pre>&lt;span style="background-color:yellow; color:red;">&EMPLOYEE_STATUS.&lt;/span></pre></dd>
  <dt>Use Heading 2</dt>
    <dd><pre>&lt;h2>&EMPLOYEE_NAME.&lt;/h2></pre></dd>
  <dt>Use a dynamic class from the SQL query</dt>
    <dd><pre>&lt;span class="&COLUMN_CLASS.">&EMPLOYEE_STATUS.&lt;/span></pre><br>
    The <code>&COLUMN_CLASS.</code> and <code>&EMPLOYEE_STATUS.</code> substitutions in this example are columns selected in the report SQL query.</dd>
  <dt>Show an image, and a tooltip on hover</dt>
    <dd><pre>&lt;img src="&IMAGE_NAME." title="&EMPLOYEE_NAME."&gt;</pre></dd>
</dl>~',
        p_display_group_name => 'SECONDARY_BODY',
        p_is_translatable    => true,
        p_help_text          => q'~Enter HTML expressions to be shown in this column. Use <code>&COLUMN.</code> syntax to show column values in HTML.~' );
    --
    l_property_id := 1150;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'SECOND_BODY_CSS_CLASSES',
        p_prompt                      => 'CSS Classes',
        p_property_type               => 'COMBOBOX',
        p_multi_value_delimiter       => ' ',
        p_db_column                   => 'SECOND_BODY_CSS_CLASSES',
        p_display_length              => 50,
        p_max_length                  => 255,
        p_display_group_name          => 'SECONDARY_BODY',
        p_help_text                   => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~' );
    --
    l_property_id := 1151;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'ICON_SOURCE_TYPE',
        p_prompt                      => 'Icon Source',
        p_property_type               => 'SELECT LIST',
        p_db_column                   => 'ICON_SOURCE_TYPE',
        p_display_group_name          => 'ICON_AND_BADGE',
        p_lov_type                    => 'STATIC',
        p_help_text                   => q'~Select the icon source for the icon that is displayed in the header of the card component.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Initials',
        p_return_value  => 'INITIALS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Icon Class',
        p_return_value  => 'STATIC_CLASS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Icon Class Column',
        p_return_value  => 'DYNAMIC_CLASS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Image URL',
        p_return_value  => 'URL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Image BLOB Column',
        p_return_value  => 'BLOB' );
    --
    l_property_id := 1152;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'ICON_CLASS_COLUMN_NAME',
        p_prompt                      => 'Icon Column',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'ICON_CLASS_COLUMN_NAME',
        p_column_data_types           => 'VARCHAR2',
        p_display_group_name          => 'ICON_AND_BADGE',
        p_help_text                   => q'~Select the column to be used as icon image source.~' );
    --
    l_property_id := 1153;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'ICON_BLOB_COLUMN_NAME',
        p_prompt                      => 'Image Column',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'ICON_BLOB_COLUMN_NAME',
        p_column_data_types           => 'BLOB',
        p_display_group_name          => 'ICON_AND_BADGE',
        p_help_text                   => q'~Select the column that returns the BLOB for the icon image source.~' );
    --
    l_property_id := 1154;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'ICON_IMAGE_URL',
        p_prompt                      => 'Image URL',
        p_property_type               => 'TEXT',
        p_db_column                   => 'ICON_IMAGE_URL',
        p_display_length              => 70,
        p_max_length                  => 4000,
        p_display_group_name          => 'ICON_AND_BADGE',
        p_help_text                   => q'~Enter the URL for the icon image source.~' );
    --
    l_property_id := 1155;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'CARD_ICON_CSS_CLASSES',
        p_prompt                      => 'Icon CSS Classes',
        p_property_type               => 'ICON',
        p_db_column                   => 'ICON_CSS_CLASSES',
        p_display_length              => 50,
        p_max_length                  => 255,
        p_examples                    => q'~<dl>
<dt>Show an arrow pointing right</dt>
<dd><pre>fa-chevron-right</pre></dd>
</dl>~',
        p_display_group_name          => 'ICON_AND_BADGE',
        p_lov_type                    => 'DISTINCT',
        p_help_text                   => q'~<p>Enter the classes for the icon you want to add to the component. You may add multiple classes by separating them with spaces.</p>
        <p>If your theme uses Font APEX then review the <a rel="noopener noreferrer" target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a> to view available icons and modifiers.</p>~',
        p_comment_text          => '$$$ CSS class names are depending on the theme. Different icon classes are supported. For new universal theme it is http://fontawesome.io/icons/ we should mention something in the help.'  );
    --
    l_property_id := 1156;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'ICON_POSITION',
        p_prompt                      => 'Icon Position',
        p_property_type               => 'SELECT LIST',
        p_db_column                   => 'ICON_POSITION',
        p_display_group_name          => 'ICON_AND_BADGE',
        p_lov_type                    => 'STATIC',
        p_help_text                   => q'~Determines the position of the icon in the card header.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top',
        p_return_value  => 'TOP',
        p_help_text     => q'~Displays the icon at the top of the header.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Start',
        p_return_value  => 'START',
        p_help_text     => q'~Aligns the icon to the starting position (typically to the left side) of the header.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'End',
        p_return_value  => 'END',
        p_help_text     => q'~Aligns the icon to the end position (typically to the right side) of the header.~' );
    --
    l_property_id := 1157;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'ICON_DESCRIPTION',
        p_prompt                      => 'Icon Description',
        p_property_type               => 'TEXT',
        p_db_column                   => 'ICON_DESCRIPTION',
        p_display_length              => 60,
        p_max_length                  => 255,
        p_display_group_name          => 'ICON_AND_BADGE',
        p_help_text                   => q'~This text describes the icon and may used for tooltips and alterative text for images.~' );
    --
    l_property_id := 1158;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'BADGE_COLUMN_NAME',
        p_prompt                      => 'Badge Column',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'BADGE_COLUMN_NAME',
        p_column_data_types           => 'VARCHAR2',
        p_display_group_name          => 'ICON_AND_BADGE',
        p_help_text                   => q'~Select the column to be used as badge.~' );
    --
    l_property_id := 1159;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'BADGE_CSS_CLASSES',
        p_prompt                      => 'Badge CSS Classes',
        p_property_type               => 'COMBOBOX',
        p_multi_value_delimiter       => ' ',
        p_db_column                   => 'BADGE_CSS_CLASSES',
        p_display_length              => 50,
        p_max_length                  => 255,
        p_display_group_name          => 'ICON_AND_BADGE',
        p_help_text                   => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~' );
    --
    l_property_id := 1160;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'BADGE_LABEL',
        p_prompt                      => 'Badge Label',
        p_property_type               => 'TEXT',
        p_db_column                   => 'BADGE_LABEL',
        p_display_length              => 60,
        p_max_length                  => 255,
        p_display_group_name          => 'ICON_AND_BADGE',
        p_is_translatable             => true,
        p_examples                    => q'~<dl>
  <dt>To display movie ratings</dt>
    <dd>The Badge Column may be the RATING column, and the Badge Label can be "Stars"</dd>
</dl>~',
        p_help_text                   => q'~Enter the label for the badge to describe the badge value.~' );
    --
    l_property_id := 1161;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MEDIA_ADV_FORMATTING',
        p_prompt                      => 'Advanced Formatting',
        p_property_type               => 'YES NO',
        p_db_column                   => 'MEDIA_ADV_FORMATTING',
        p_display_group_name          => 'MEDIA',
        p_help_text                   => q'~Specify whether this component displays using a column or advanced formatting using HTML expressions and supported substitution strings.~' );
    --
    l_property_id := 1162;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MEDIA_HTML_EXPR',
        p_prompt             => 'HTML Expression',
        p_property_type      => 'HTML',
        p_db_column          => 'MEDIA_HTML_EXPR',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
  <dt>Change the background and text colors</dt>
    <dd><pre>&lt;span style="background-color:yellow; color:red;">&EMPLOYEE_STATUS.&lt;/span></pre></dd>
  <dt>Use Heading 2</dt>
    <dd><pre>&lt;h2>&EMPLOYEE_NAME.&lt;/h2></pre></dd>
  <dt>Use a dynamic class from the SQL query</dt>
    <dd><pre>&lt;span class="&COLUMN_CLASS.">&EMPLOYEE_STATUS.&lt;/span></pre><br>
    The <code>&COLUMN_CLASS.</code> and <code>&EMPLOYEE_STATUS.</code> substitutions in this example are columns selected in the report SQL query.</dd>
  <dt>Show an image, and a tooltip on hover</dt>
    <dd><pre>&lt;img src="&IMAGE_NAME." title="&EMPLOYEE_NAME."&gt;</pre></dd>
</dl>~',
        p_display_group_name => 'MEDIA',
        p_is_translatable    => true,
        p_help_text          => q'~Enter HTML expressions to be shown in this column. Use <code>&COLUMN.</code> syntax to show column values in HTML.~' );
    --
    l_property_id := 1163;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MEDIA_SOURCE_TYPE',
        p_prompt                      => 'Source',
        p_property_type               => 'SELECT LIST',
        p_db_column                   => 'MEDIA_SOURCE_TYPE',
        p_display_group_name          => 'MEDIA',
        p_lov_type                    => 'STATIC',
        p_help_text                   => q'~Select the media source type.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Image URL',
        p_return_value  => 'STATIC_URL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'URL Column',
        p_return_value  => 'DYNAMIC_URL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'BLOB Column',
        p_return_value  => 'BLOB' );
    --
    l_property_id := 1164;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MEDIA_URL',
        p_prompt                      => 'URL',
        p_property_type               => 'TEXT',
        p_db_column                   => 'MEDIA_URL',
        p_display_length              => 70,
        p_max_length                  => 4000,
        p_display_group_name          => 'MEDIA',
        p_help_text                   => q'~Enter the URL for the media source.~' );
    --
    l_property_id := 1165;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MEDIA_URL_COLUMN_NAME',
        p_prompt                      => 'URL Column',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'MEDIA_URL_COLUMN_NAME',
        p_column_data_types           => 'VARCHAR2',
        p_display_group_name          => 'MEDIA',
        p_help_text                   => q'~Select the column to be used as media source.~' );
    --
    l_property_id := 1166;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MEDIA_BLOB_COLUMN_NAME',
        p_prompt                      => 'BLOB Column',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'MEDIA_BLOB_COLUMN_NAME',
        p_column_data_types           => 'BLOB',
        p_display_group_name          => 'MEDIA',
        p_help_text                   => q'~Select the column that returns the BLOB for the media source.~' );
    --
    l_property_id := 1167;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MEDIA_DISPLAY_POSITION',
        p_prompt                      => 'Position',
        p_property_type               => 'SELECT LIST',
        p_db_column                   => 'MEDIA_DISPLAY_POSITION',
        p_display_group_name          => 'MEDIA',
        p_lov_type                    => 'STATIC',
        p_help_text                   => q'~Determines where the media component is positioned on the card.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'First',
        p_return_value  => 'FIRST',
        p_help_text     => q'~Displays the media before the card header.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Body',
        p_return_value  => 'BODY',
        p_help_text     => q'~Displays the media within the card body.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'As Background Image',
        p_return_value  => 'BACKGROUND',
        p_help_text     => q'~Displays the media as the card background.~' );
    --
    l_property_id := 1168;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MEDIA_APPEARANCE',
        p_prompt                      => 'Appearance',
        p_property_type               => 'SELECT LIST',
        p_db_column                   => 'MEDIA_APPEARANCE',
        p_display_group_name          => 'MEDIA',
        p_lov_type                    => 'STATIC',
        p_help_text                   => q'~Determines the aspect ratio for the media.
<strong>Auto</strong> Uses a best fit to preserve the original media size.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Square',
        p_return_value  => 'SQUARE',
        p_help_text     => q'~Applies a square aspect ratio.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Widescreen',
        p_return_value  => 'WIDESCREEN',
        p_help_text     => q'~Applies a widescreen aspect ratio.~' );
    --
    l_property_id := 1169;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MEDIA_SIZING',
        p_prompt                      => 'Sizing',
        p_property_type               => 'SELECT LIST',
        p_db_column                   => 'MEDIA_SIZING',
        p_display_group_name          => 'MEDIA',
        p_lov_type                    => 'STATIC',
        p_help_text                   => q'~Determines how the media is sized within the media component.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Fit',
        p_return_value  => 'FIT',
        p_help_text     => q'~Adjusts the sizing so the media is contained within the media display area.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cover',
        p_return_value  => 'COVER',
        p_help_text     => q'~Adjusts the sizing so the media fills the media display area.~' );
    --
    l_property_id := 1170;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MEDIA_CSS_CLASSES',
        p_prompt                      => 'CSS Classes',
        p_property_type               => 'COMBOBOX',
        p_multi_value_delimiter       => ' ',
        p_db_column                   => 'MEDIA_CSS_CLASSES',
        p_display_length              => 50,
        p_max_length                  => 255,
        p_display_group_name          => 'MEDIA',
        p_help_text                   => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~' );
    --
    l_property_id := 1171;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MEDIA_DESCRIPTION',
        p_prompt                      => 'Image Description',
        p_property_type               => 'TEXT',
        p_db_column                   => 'MEDIA_DESCRIPTION',
        p_display_length              => 60,
        p_max_length                  => 255,
        p_display_group_name          => 'MEDIA',
        p_help_text                   => q'~This text describes the media and may used for tooltips and alterative text for images.~' );
    --
    l_property_id := 1172;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'FACET_GROUP',
        p_prompt                   => 'Facet Group',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'ITEM_GROUP_ID',
        p_display_group_name       => 'LAYOUT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_facet_group,
        p_lov_component_type_scope => 'REGION',
        p_help_text                => q'~Select the facet group to which this checkbox is associated.~' );
    --
    l_property_id := 1173;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'HIDDEN_PARENT_REGION',
        p_prompt                   => 'Region',
        p_property_type            => 'HIDDEN',
        p_db_column                => 'ITEM_PLUG_ID',
        p_max_length               => 255,
        p_display_group_name       => 'IDENTIFICATION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL' );
    --
    l_property_id := 1174;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FC_FILTER_COMBINATION',
        p_prompt             => 'Combine Filters',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FC_FILTER_COMBINATION',
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify how to combine filters within this group.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'OR (Union)',
        p_return_value  => 'OR',
        p_help_text     => q'~Filters will be combined using "OR"; thus the result will be the union set of individual filters.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'AND (Intersect)',
        p_return_value  => 'AND',
        p_help_text     => q'~Filters will be combined using "AND"; thus the result will be the intersection of all individual filters.~' );
    --
    l_property_id := 1175;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEPENDING_ON_FACET_GRP_ITEM',
        p_prompt                   => 'Checkbox',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'DEPENDING_ON_ID',
        p_display_group_name       => 'DEPENDING_ON',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_facet_group_item,
        p_lov_component_type_scope => 'REGION',
        p_help_text                => q'~Select the associated checkbox which should be checked to decide if the current checkbox should be displayed.~' );
    --
    l_property_id := 1176;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FC_ACTIONS_CHART',
        p_prompt             => 'Chart',
        p_property_type      => 'YES NO',
        p_db_column          => 'FC_SHOW_CHART',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~<p>Specify whether a button is shown next to the facet to allow the user to show a chart of the facet list entry counts. This property only applies when the Faceted Search region property Show Charts is not No.</p>~' );
    --
    l_property_id := 1177;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FC_INITIAL_CHART',
        p_prompt             => 'Show Chart Initially',
        p_property_type      => 'YES NO',
        p_db_column          => 'FC_INITIAL_CHART',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Specify whether the chart is initially displayed. This property only applies when Faceted Search region property Show Charts is Selector. Changes to this property may not be seen right away because the set of charts the user has shown is persisted in the browser session. To see the effect of changes to this property reset the report using the link Reset Regions cache control option such as with the wizard generated Reset button.</p>~' );
    --
    l_property_id := 1180;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'CARD_ACTION_TYPE',
        p_prompt                      => 'Type',
        p_property_type               => 'SELECT LIST',
        p_db_column                   => 'ACTION_TYPE',
        p_display_group_name          => 'IDENTIFICATION',
        p_lov_type                    => 'STATIC',
        p_help_text                   => q'~<p>Select the type of action to add to the card component.</p>
<p>Note: You can define multiple actions of the same type.  However, only button actions are rendered multiple times.
For all other action types, the first TRUE display condition gets rendered, and the rest are ignored.</p>
<p>Display conditions can be defined based on the column values if execution condition is set to check for each row.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Button',
        p_return_value  => 'BUTTON',
        p_help_text     => q'~Adds button to the card.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Full Card',
        p_return_value  => 'FULL_CARD',
        p_help_text     => q'~Adds link to the full card. Usually, one of this action type should be defined.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Title',
        p_return_value  => 'TITLE',
        p_help_text     => q'~Adds link to the card title. Usually, one of this action type should be defined.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Subtitle',
        p_return_value  => 'SUB_TITLE',
        p_help_text     => q'~Adds link to the card subtitle. Usually, one of this action type should be defined.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Media',
        p_return_value  => 'MEDIA',
        p_help_text     => q'~Adds link to the card media. Usually, one of this action type should be defined.~' );
    --
    l_property_id := 1181;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'CARD_ACTION_POSITION',
        p_prompt                      => 'Position',
        p_property_type               => 'SELECT LIST',
        p_db_column                   => 'POSITION',
        p_display_group_name          => 'LAYOUT',
        p_lov_type                    => 'STATIC',
        p_help_text                   => q'~Determines where the button is positioned on the card.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Primary',
        p_return_value  => 'PRIMARY' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Secondary',
        p_return_value  => 'SECONDARY' );
    --
    l_property_id := 1182;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ACTION_LINK_TARGET_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LINK_TARGET_TYPE',
        p_display_group_name => 'LINK',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the action to be performed when the specified action type is clicked.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Redirect to Page in this Application',
        p_return_value  => 'REDIRECT_PAGE',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Redirect to a page in the current application, with optional additional attributes for resetting pagination, setting the request value, clearing cache and setting item values, on the target page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Redirect to Page in a different Application',
        p_return_value  => 'REDIRECT_APP',
        p_help_text     => q'~<p>Redirect to a page in a different application, with optional additional attributes for resetting pagination, setting the request value, clearing cache and setting item values, on the target page.</p>
<p>Note: Redirecting to a page in different application relies on deep linking being enabled in the target application. To enable deep linking, go to the application's <em>Security</em> attributes and enable <em>Deep Linking</em>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Redirect to URL',
        p_return_value  => 'REDIRECT_URL',
        p_help_text     => q'~Redirect to the target URL you specify.~' );
    -- not for 20.2
    -- store_property_lov_values (
    --     p_property_id   => l_property_id,
    --     p_display_value => 'Defined by Dynamic Action',
    --     p_return_value  => 'DEFINED_BY_DA',
    --     p_help_text     => q'~Does not submit the page or redirect to another page. Instead the card action's behavior is defined by a Dynamic Action.~' );
    --
    l_property_id := 1183;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CARDS_PER_PAGE',
        p_prompt             => 'Cards per Page',
        p_property_type      => 'INTEGER',
        p_db_column          => 'PLUG_QUERY_NUM_ROWS',
        p_display_length     => 3,
        p_min_value          => 1,
        p_display_group_name => 'PAGINATION',
        p_help_text          => q'~Enter the number of cards to display per page.~' );
    --
    l_property_id := 1184;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CARD_USES_BLOB_COLUMN',
        p_prompt             => 'Card uses BLOB column',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'USES_BLOB_COLUMN',
        p_display_group_name => 'APPEARANCE', -- 'BLOB' doesn't work, because hidden properties somehow causes the group to be displayed too early
        p_is_query_only      => true );
    --
    l_property_id := 1185;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'BUTTON_DISPLAY_TYPE',
        p_prompt                   => 'Display Type',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'BUTTON_DISPLAY_TYPE',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'STATIC',
        p_help_text                => q'~Select a button display type to define the appearance of this button.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Text',
        p_return_value  => 'TEXT',
        p_help_text     => q'~Displays the button label only.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Icon',
        p_return_value  => 'ICON',
        p_help_text     => q'~Displays an icon only.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Text with Icon',
        p_return_value  => 'TEXT_WITH_ICON',
        p_help_text     => q'~Displays an icon next to the button label.~' );
    --
    l_property_id := 1186;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'CARD_ICON_CSS_CLASSES_REQUIRED',
        p_prompt                      => 'Icon CSS Classes',
        p_property_type               => 'ICON',
        p_db_column                   => 'ICON_CSS_CLASSES',
        p_display_length              => 50,
        p_max_length                  => 255,
        p_examples                    => q'~<dl>
<dt>Show an arrow pointing right</dt>
<dd><pre>fa-chevron-right</pre></dd>
</dl>~',
        p_display_group_name          => 'ICON_AND_BADGE',
        p_lov_type                    => 'DISTINCT',
        p_help_text                   => q'~<p>Enter the classes for the icon you want to add to the component. You may add multiple classes by separating them with spaces.</p>
        <p>If your theme uses Font APEX then review the <a rel="noopener noreferrer" target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a> to view available icons and modifiers.</p>~',
        p_comment_text          => '$$$ CSS class names are depending on the theme. Different icon classes are supported. For new universal theme it is http://fontawesome.io/icons/ we should mention something in the help.'  );
    --
    l_property_id := 1187;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CARD_PK_COLUMN1',
        p_prompt             => 'Primary Key Column 1',
        p_property_type      => 'COLUMN',
        p_db_column          => 'PK1_COLUMN_NAME',
        p_column_data_types  => 'VARCHAR2:ROWID',
        p_display_group_name => 'CARD',
        p_help_text          => q'~Select the first primary key column from the region source. If the primary key of this table has more than two columns, you must select the <code>ROWID</code> column. If the region is set to display scroll pagination, the primary key is used to avoid displaying duplicate rows.  If the region displays an image from a BLOB column, the primary key is used to get the image.~' );
    --
    l_property_id := 1188;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CARD_PK_COLUMN2',
        p_prompt             => 'Primary Key Column 2',
        p_property_type      => 'COLUMN',
        p_db_column          => 'PK2_COLUMN_NAME',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'CARD',
        p_help_text          => q'~Only select the second primary key column if the primary key for your region source has two columns. If you select <code>ROWID</code> for the first primary key column, you should not populate this column. If the region is set to display scroll pagination, the second primary key is used to avoid displaying duplicate rows.  If the region displays an image from a BLOB column, the second primary key is used to get the image.~' );
    l_property_id := 1189;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CARD_PK_COLUMN1_REQUIRED',
        p_prompt             => 'Primary Key Column 1',
        p_property_type      => 'COLUMN',
        p_db_column          => 'PK1_COLUMN_NAME',
        p_column_data_types  => 'VARCHAR2:ROWID',
        p_display_group_name => 'CARD',
        p_help_text          => q'~Select the first primary key column from the region source. If the primary key of this table has more than two columns, you must select the <code>ROWID</code> column. If the region is set to display scroll pagination, the primary key is used to avoid displaying duplicate rows.  If the region displays an image from a BLOB column, the primary key is used to get the image.~' );
    --
    l_property_id := 1190;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CARD_PK_COLUMN2_REQUIRED',
        p_prompt             => 'Primary Key Column 2',
        p_property_type      => 'COLUMN',
        p_db_column          => 'PK2_COLUMN_NAME',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'CARD',
        p_help_text          => q'~Only select the second primary key column if the primary key for your region source has two columns. If you select <code>ROWID</code> for the first primary key column, you should not populate this column. If the region is set to display scroll pagination, the second primary key is used to avoid displaying duplicate rows.  If the region displays an image from a BLOB column, the second primary key is used to get the image.~' );
    --
    l_property_id := 1200;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LIST_TYPE',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the list type.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Values',
        p_return_value  => 'STATIC',
        p_help_text     => q'~The Static list is based on the text value you enter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'SQL_QUERY',
        p_help_text     => q'~The Dynamic list is based on the SQL Query you enter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body returning SQL Query',
        p_return_value  => 'FUNCTION_RETURNING_SQL_QUERY',
        p_help_text     => q'~The Dynamic list is based on the SQL Query returned by the entered Function Body you enter.~' );
    --
    l_property_id := 1201;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DB_SESSION_INIT',
        p_prompt             => 'Initialization PL/SQL Code',
        p_property_type      => 'PLSQL',
        p_db_column          => 'VPD',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'DATABASE_SESSION',
        p_help_text          => q'~
<p>Use this attribute to enter a PL/SQL block that sets a context for the database session associated with the current "show page" or "accept page" request. The block you enter here is executed at a very early point during the page request, immediately after the <code>APP_USER</code> value is established. The value of <code>APP_USER</code> (using <code>:APP_USER</code> or <code>v('APP_USER')</code>) may be used within the block. Values of other items in session state may be referenced as well, but any such items must have been established in session state before the initiation of the current page request.
Consider the following example:
</p>
<pre>
dbms_session.set_context('CTX_USER_QRY','USERPRIV',my_package.my_function(:APP_USER));
</pre>

<p>This example sets the value of <code>USERPRIV</code> in the context named <code>CTX_USER_QRY</code> to the value returned by the function <code>my_function</code> in package <code>my_package</code>. The function is passed the current value of <code>APP_USER</code> as an input argument. Presumably, the named context would be used in a VPD policy (created within the application's parsing schema) to effect the generation of predicates appropriate to the authenticated user.</p>

<p>Virtual Private Database, also know as Fine-Grained Access Control or FGAC, is an Oracle database feature that provides an application programming interface (API) that enables developers to assign security policies to database tables and views. Using PL/SQL, developers can create security policies with stored procedures and bind the procedures to a table or view by means of a call to an RDBMS package. Such policies are based on the content of application data stored within the database, or based on context variables provided by Oracle database. In this way, VPD permits access security mechanisms to be removed from applications, and to be situated closer to particular schemas.</p>

<p>The code entered here need not pertain to VPD/FGAC and may not be related to security at all. Any code that needs to be executed at the earliest point in a page request can be placed here. For example, the following code sets the database session time zone for every page request:</p>

<pre>
BEGIN
   EXECUTE IMMEDIATE 'alter session set time_zone = ''Australia/Sydney'' ';
END;
</pre>~' );
    --
    l_property_id := 1202;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DB_SESSION_CLEANUP',
        p_prompt             => 'Cleanup PL/SQL Code',
        p_property_type      => 'PLSQL',
        p_db_column          => 'VPD_TEARDOWN_CODE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'DATABASE_SESSION',
        p_help_text          => q'~
<p>Use this attribute to enter a PL/SQL block that runs at the end of page processing.
It can be used to free or clean up resources that were used, like VPD contexts or database links.
</p>
<p>Example 1:
<pre>
dbms_session.clear_context('CTX_USER_QRY');
</pre>
This call resets the application context named CTX_USER_QRY before the database session is given back to the session pool,
to ensure that no information will be leaked when it gets reused later on.
</p>
<p>Example 2:
<pre>
dbms_session.close_database_link('SALES');
</pre>
This call closes the database link SALES, which might have been opened in the "Initialization PL/SQL Code" or implicitly, just by querying data via the link.
Again, this frees resources and prevents resource leakage when the database session will be reused.
</p>~' );
    --
    -- There are other lov values but export_source only cares about sql, plsql and js
    l_property_id := 1203;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SCHEME_TYPE',
        p_prompt             => 'Scheme Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SCHEME_TYPE',
        p_display_group_name => 'AUTHORIZATION_SCHEME',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select how this authorization scheme will be applied.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Exists SQL Query',
        p_return_value  => 'NATIVE_EXISTS',
        p_help_text     => q'~Authorization passes when query returns a value~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'NOT Exists SQL Query',
        p_return_value  => 'NATIVE_NOT_EXISTS',
        p_help_text     => q'~Authorization passes when query does not return any values~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Returning Boolean',
        p_return_value  => 'NATIVE_FUNCTION_BODY',
        p_help_text     => q'~Enter a PL/SQL Function Body that returns a boolean value~' );
    --
    l_property_id := 1204;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'SCHEME_SQL_STATEMENT',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'ATTRIBUTE_01',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_display_group_name => 'AUTHORIZATION_SCHEME');
    --
    l_property_id := 1205;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SCHEME_PLSQL_FUNCTION_BODY',
        p_prompt             => 'PL/SQL Function Body',
        p_property_type      => 'PLSQL FUNCTION BODY BOOLEAN',
        p_db_column          => 'ATTRIBUTE_01',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'AUTHORIZATION_SCHEME');
    --
    l_property_id := 1206;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHORTCUT_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SHORTCUT_TYPE',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~The shortcut type identifies what is in the shortcut text.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body returning VARCHAR2',
        p_return_value  => 'FUNCTION_BODY' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML Text',
        p_return_value  => 'HTML_TEXT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML Text with Escaped Special Chars',
        p_return_value  => 'HTML_TEXT_ESCAPE_SC' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Image',
        p_return_value  => 'IMAGE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Text with JavaScript Escaped Single Quotes',
        p_return_value  => 'TEXT_ESCAPE_JS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Message',
        p_return_value  => 'MESSAGE',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Message with JavaScript Escaped Single Quotes',
        p_return_value  => 'MESSAGE_ESCAPE_JS',
        p_is_deprecated => 'Y' );
    --
    l_property_id := 1207;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'SHORTCUT_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_shortcut,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~You may base the shortcut definition on an existing shortcut in this application or another in your workspaces schema.~' );
    --
    l_property_id := 1208;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PROMPT_ON_INSTALL',
        p_prompt             => 'Prompt On Install',
        p_property_type      => 'YES NO',
        p_db_column          => 'PROMPT_ON_INSTALL',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Choose whether prompts for this credential should be displayed when the application is being imported on another &PRODUCT_NAME. instance. Since &PRODUCT_NAME. never exports Passwords or Client Secrets, installation pr
ompts are <em>always</em> generated when a Client ID or Username are provided.~' );
    --
    l_property_id := 1209;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FILE_NAME',
        p_prompt             => 'File Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'FILE_NAME',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~This is the name of the file in the workspace file repository. Use <strong><code>&#35;WORKSPACE_IMAGES#filename</code></strong> in your application to reference a file.~' );
    --
    l_property_id := 1210;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ORDS_CLEANUP_CODE',
        p_prompt             => 'Cleanup Code',
        p_property_type      => 'PLSQL',
        p_db_column          => 'ORDS_CLEANUP_CODE',
        p_display_length     => 80,
        p_max_length         => 30000,
        p_display_group_name => 'SESSION' );
    --
    l_property_id := 1211;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'TREE_NAME',
        p_prompt                => 'Name',
        p_property_type         => 'TEXT',
        p_db_column             => 'TREE_NAME',
        p_display_length        => 50,
        p_max_length            => 255,
        p_text_case             => 'UPPER',
        p_restricted_characters => 'SAFE_COMPONENT_NAME',
        p_display_group_name    => 'IDENTIFICATION' );
    --
    l_property_id := 1212;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TREE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SUPPORTED UI',
        p_db_column          => 'TREE_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'PLUGINS' );
    --
    l_property_id := 1213;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'TREE_SQL_STATEMENT',
        p_prompt               => 'Tree Query',
        p_property_type        => 'SQL',
        p_db_column            => 'TREE_QUERY',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_display_group_name => 'QUERY');
    --
    l_property_id := 1214;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AUTOMATION_TYPE',
        p_prompt             => 'Source Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'QUERY_TYPE',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify the source of the data evaluated during the execution of the automation. Automations can be based on tables, SQL queries or PL/SQL functions returning a SQL query.~' );
    --
    l_property_id := 1215;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'AUTOMATION_SQL_STATEMENT',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'QUERY_SOURCE',
        p_display_length       => 80,
        p_max_length           => 32767,
        p_display_group_name => 'SOURCE');
    --
    l_property_id := 1216;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ADDITIONAL_CODE_PLSQL_CODE',
        p_prompt             => 'PL/SQL Code',
        p_property_type      => 'PLSQL',
        p_db_column          => 'CODE_SNIPPET',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'ADDITIONAL_CODE',
        p_help_text          => q'~<p>Enter a PL/SQL anonymous block of code that contains procedures to be called for Initialization or Cleanup of the automation, or before action processing for each row.</p>
<p>For performance reasons you can also store this code in a PL/SQL package in the database.</p>~' );
    --
    l_property_id := 1217;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ERROR_STOP_EXECUTION_ON_ERROR',
        p_prompt             => 'Stop Execution On Error',
        p_property_type      => 'YES NO',
        p_db_column          => 'STOP_EXECUTION_ON_ERROR',
        p_display_group_name => 'ERROR',
        p_help_text          => q'~<p>Specify whether processing of all other pending actions is stopped when an error occurs while executing the current action.</p>
<p>Note: The order of execution of specific actions is determined by the sequence specified for each action. To ensure that actions are run in the same order, Oracle recommends that the sequence numbers be unique.</p>~' );
    --
    l_property_id := 1218;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CLIENT_SECRET_OR_PASSWORD',
        p_prompt             => 'Client Secret or Password',
        p_property_type      => 'PASSWORD',
        p_db_column          => 'CLIENT_SECRET',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'AUTHENTICATION',
        p_help_text          => q'~Enter the Password for Basic Authentication and the Client Secret for the OAuth2 Client Credentials flow. &PRODUCT_NAME. stores this information encrypted, so it cannot be retrieved back in clear text.~' );
    --
    l_property_id := 1219;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FC_DISPLAY_AS',
        p_prompt             => 'Display',
        p_property_type      => 'PILL BUTTONS',
        p_db_column          => 'FC_DISPLAY_AS',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Specify whether the facet will be displayed inline or in a filter dialog.</p>~' );

    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inline',
        p_return_value  => 'INLINE',
        p_help_text     => q'~<p>Displays the facet inline in the facet region.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Add Filter Dialog',
        p_return_value  => 'FILTER_DIALOG',
        p_help_text     => q'~<p>Displays the facet in a filter dialog.</p>~' );
    --
    l_property_id := 1221;
    store_multiple_value_type_prop (
        p_property_id        => l_property_id,
        p_name               => 'MULTI_VALUE_TYPE',
        p_help_text          => q'~<p>Determines whether the Source Column contains multiple values, and how these are encoded.</p>~' );
    --
    l_property_id := 1222;
    store_multiple_value_sep_prop (
        p_property_id        => l_property_id,
        p_name               => 'MULTI_VALUE_SEPARATOR' );
    --
    l_property_id := 1223;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MULTI_VALUE_TRIM_SPACE',
        p_prompt             => 'Trim Whitespace',
        p_property_type      => 'YES NO',
        p_db_column          => 'MULTI_VALUE_TRIM_SPACE',
        p_display_group_name => 'MULTIPLE_VALUES',
        p_help_text          => q'~<p>Whether to trim leading and trailing whitespace from individual values after splitting.</p>
<pre>
APEX:SQL:Spatial :Oracle Text: Data Warehouse
APEX :SQL:Data Warehouse
</pre>
<dl>
<dt>Trim Whitespace <em>disabled</em> leads to the following individual values counted:</dt>
<dd><pre>
"APEX":            1
"APEX ":           1
"SQL":             2
"Spatial":         1
"Oracle Text":     1
"Data Warehouse":  1
" Data Warehouse": 1
</pre></dd>
<dt>Trim Whitespace <em>enabled</em> leads to the following individual values counted:</dt>
<dd><pre>
"APEX":            2
"SQL":             2
"Spatial":         1
"Oracle Text":     1
"Data Warehouse":  2
</pre></dd>
</dl>
<p>Note that trimming whitespace can significantly impact query performance. For larger data sets, consider data cleansing instead.</p>~' );
    --
    l_property_id := 1224;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FC_MULTI_VALUE_COMBINATION',
        p_prompt             => 'Filter Combination',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FC_FILTER_COMBINATION',
        p_display_group_name => 'MULTIPLE_VALUES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify how to combine individual values when filtering.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'OR (Union)',
        p_return_value  => 'OR',
        p_help_text     => q'~Values will be combined using "OR"; thus the result will be the union set of individual values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'AND (Intersect)',
        p_return_value  => 'AND',
        p_help_text     => q'~Values will be combined using "AND"; thus the result will be the intersection of all individual values.~' );
    --
    l_property_id := 1226;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SUGGESTIONS_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SUGGESTIONS_TYPE',
        p_display_group_name => 'SUGGESTIONS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select how suggestions are determined for this filter.</p>
<p>Note: The values provided are still checked against the visible entries of the List of Values and will only be used if there is a match.
If a value is not found it will be skipped and the next one is checked.</p>~' ); -- $$$ add help text that only one is picked until we support the max suggestions attribute
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dynamic',
        p_return_value  => 'DYNAMIC',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Picks the <strong>first</strong> visible entry from the List of Values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Values',
        p_return_value  => 'STATIC',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Comma delimited list of values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'SQL_QUERY',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Values are returned from the <em>SQL Query</em> entered.~' );
    --
    /* $$$ phase 2
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body Returning Array',
        p_return_value  => 'FUNC_BODY_RETURNING_ARRAY',
        p_help_text     => q'~$$$~' );
    */
    --
    l_property_id := 1227;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SUGGESTIONS_STATIC_VALUES',
        p_prompt                => 'Static Values',
        p_property_type         => 'TEXT EDITOR',
        p_multi_value_delimiter => ',',
        p_db_column             => 'SUGGESTIONS_SOURCE',
        p_display_length        => 80,
        p_max_length            => 4000,
        p_display_group_name    => 'SUGGESTIONS',
        p_help_text             => q'~<p>Enter a comma delimited list of static values used as the source for the suggestions.</p>
<p>Note: The order in which the values are specified is used to determine the order they should get displayed.</p>~' );
    --
    l_property_id := 1228;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SUGGESTIONS_SQL_QUERY',
        p_prompt                => 'SQL Query',
        p_property_type         => 'SQL',
        p_db_column             => 'SUGGESTIONS_SOURCE',
        p_display_length        => 80,
        p_max_length            => 4000,
        p_sql_min_column_count  => 1,
        p_sql_max_column_count  => 1,
        p_display_group_name    => 'SUGGESTIONS',
        p_help_text             => q'~<p>Enter the SQL Query used as the source for the suggestions.</p>
<p>Note: The order in which the values are returned is used to determine the order they should get displayed.</p>~' );
    --
    /* $$$ phase 2
    l_property_id := 1229;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAXIMUM_SUGGESTIONS',
        p_prompt             => 'Maximum Displayed Chips',
        p_property_type      => 'INTEGER',
        p_db_column          => 'MAX_SUGGESTIONS',
        p_min_value          => 1,
        p_max_value          => 5,
        p_display_group_name => 'SUGGESTIONS',
        p_help_text          => q'~Enter the maximum number of suggestion chips displayed for this filter.~' );
     */
    --
    l_property_id := 1230;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_SUGGESTIONS_LABEL',
        p_prompt             => 'Show Label',
        p_property_type      => 'YES NO',
        p_db_column          => 'FC_SHOW_LABEL',
        p_display_group_name => 'SUGGESTIONS',
        p_help_text          => q'~Specify whether to show the label of the filter or only the value in the Suggestion Chip. Hide the label if the suggested value is self-explaining, for example, an order status.~' );
    --
    l_property_id := 1231;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEPENDING_ON_SFILTER',
        p_prompt                   => 'Filter',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'DEPENDING_ON_ID',
        p_display_group_name       => 'DEPENDING_ON',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_sfilter,
        p_lov_component_type_scope => 'PARENT',
        p_help_text                => q'~Select the associated Filter which should be checked to decide if the current Filter should be displayed.~' );
    --
    l_property_id := 1232;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEPENDING_ON_SFILTER_GRP_ITEM',
        p_prompt                   => 'Checkbox',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'DEPENDING_ON_ID',
        p_display_group_name       => 'DEPENDING_ON',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_sfilter_group_item,
        p_lov_component_type_scope => 'REGION',
        p_help_text                => q'~Select the associated checkbox which should be checked to decide if the current checkbox should be displayed.~' );
    --
    l_property_id := 1233;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'SFILTER_GROUP',
        p_prompt                   => 'Filter Group',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'ITEM_GROUP_ID',
        p_display_group_name       => 'LAYOUT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_sfilter_group,
        p_lov_component_type_scope => 'REGION',
        p_help_text                => q'~Select the filter group to which this checkbox is associated.~' );
    --
    l_property_id := 1234;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CASCADING_LOV_PARENT_FILTER',
        p_prompt             => 'Parent Filter',
        p_property_type      => 'FACET',
        p_db_column          => 'LOV_CASCADE_PARENT_ITEMS',
        p_display_group_name => 'CASCADING_LOV',
        p_help_text          => q'~Select a Filter that triggers the refresh of this list of values.~' );
    --
    l_property_id := 1235;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_CURRENT_FACET_LABEL',
        p_prompt             => 'Show Label for Current Facet',
        p_property_type      => 'YES NO',
        p_db_column          => 'FC_SHOW_LABEL',
        p_display_group_name => 'LABEL',
        p_help_text          => q'~Specify whether to display the facet label next to its selected value(s) in the list of current facets. Hide the label if the selected value is self-explaining, for example, an order status.~' );
    --
    /* $$$ Phase 2
    l_property_id := 1236;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_SUGGESTIONS_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SUGGESTIONS_TYPE',
        p_display_group_name => 'SUGGESTIONS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how search term suggestions are determined.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'SQL_QUERY',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Values are returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Column',
        p_return_value  => 'STATIC',
        p_help_text     => q'~<p>The text of the specified column gets tokenized on the fly.</p>
<p>Note: Only use this option for small data sets!</p>~' );
    --
    l_property_id := 1237;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAXIMUM_SEARCH_SUGGESTIONS',
        p_prompt             => 'Maximum Search Terms',
        p_property_type      => 'INTEGER',
        p_db_column          => 'MAX_SUGGESTIONS',
        p_min_value          => 1,
        p_max_value          => 10,
        p_display_group_name => 'SUGGESTIONS',
        p_help_text          => q'~Enter the maximum number of search term suggestions which get displayed.~' );
    --
    */
    --
    l_property_id := 1238;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_QUERY_ORDER_BY_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'QUERY_ORDER_BY_TYPE',
        p_display_group_name => 'SOURCE_ORDER_BY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how this component is sorted.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Based on the ORDER BY clause entered into <em>Order By Clause</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Based on the value held in session state for the <em>Item</em> selected.~' );
    --
    l_property_id := 1239;
    store_order_by_item_property (
        p_name               => 'SOURCE_QUERY_ORDER_BY_ITEM',
        p_prompt             => 'Item',
        p_display_group_name => 'SOURCE_ORDER_BY' );
    --
    l_property_id := 1244;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXTERNAL_ORDER_BY_TYPE',
        p_prompt             => 'Order By Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'EXTERNAL_ORDER_BY_TYPE',
        p_display_group_name => 'EXTERNAL_FILTER_ORDER_BY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how this component is sorted.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Based on the REST service order by expression entered into <em>External Order By</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Based on the value held in session state for the <em>Item</em> selected.~' );
    --
    l_property_id := 1245;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXTERNAL_ORDER_BY_ITEM',
        p_prompt             => 'Item',
        p_property_type      => 'ORDER BY ITEM',
        p_db_column          => 'EXTERNAL_ORDER_BY_EXPR',
        p_display_length     => 40,
        p_max_length         => 4000,
        p_display_group_name => 'EXTERNAL_FILTER_ORDER_BY',
        p_examples             => q'~
<dl><dt>For an ORDS REST Service, order by the "job" attribute ascending, then by "ename", descending.</dt>
<dd><pre>
{"job": "asc", "ename": "desc"}
</pre></dd>
</dl>
<dl><dt>For an Oracle Cloud Applications (SaaS) REST Service, order by the "job" attribute ascending, then by "ename", descending.</dt>
<dd><pre>
job:asc,ename:desc
</pre></dd>
</dl>~',
        p_help_text            => q'~Provide an order by expression involving one or more columns to be passed to the external REST service. The expression will be passed to the remote server as-is. The syntax depends on the type of the REST Data Source. For example, Oracle REST Data Services (ORDS) expects JSON syntax while Oracle Cloud Applications (SaaS) expects a comma-separated list of attribute names with optional direction indicator.~' );
    --
    l_property_id := 1246;
    store_order_by_clause_property(
        p_name               => 'SOURCE_QUERY_STATIC_ORDER_BY',
        p_display_group_name => 'SOURCE' );
    --
    l_property_id := 1247;
    store_ext_order_by_property(
        p_name               => 'EXTERNAL_STATIC_ORDER_BY_EXPR' );
    --
    l_property_id := 1248;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SOURCE_REMOTE_ORACLE_DATABASE',
        p_prompt                => 'Remote Server',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'REMOTE_SERVER_ID',
        p_display_group_name    => 'SOURCE',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_remote_oracle_db,
        p_help_text             => q'~Select the remote database server.~' );
    --
    l_property_id := 1249;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SERVER_TIMEOUT',
        p_prompt             => 'Server Timeout',
        p_property_type      => 'INTEGER',
        p_db_column          => 'SERVER_TIMEOUT',
        p_display_length     => 4,
        p_max_length         => null,
        p_min_value          => 1,
        p_max_value          => 3600,
        p_unit               => c_unit_seconds,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Defines the transfer timeout for communicating with the server in seconds.~' );
    --
    l_property_id := 1250;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MIME_TYPE',
        p_prompt             => 'Mime Type',
        p_property_type      => 'TEXT',
        p_db_column          => 'MIME_TYPE',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'ATTRIBUTES',
        p_help_text          => q'~Mime type of the file.~' );
    --
    l_property_id := 1251;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENDPOINT_URL',
        p_prompt             => 'URL',
        p_property_type      => 'TEXT', -- $$$ should we add URL which checks that the urls starts with https:// or http://
        p_db_column          => 'BASE_URL',
        p_display_length     => 50,
        p_max_length         => 500,
        p_display_group_name => 'ENDPOINT_URL',
        p_help_text          => q'~Enter the base URL for this Remote Server.~' );
    --
    l_property_id := 1252;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OCI_TENANCY_ID',
        p_prompt             => 'OCI Tenancy ID',
        p_property_type      => 'TEXT',
        p_db_column          => 'NAMESPACE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'AUTHENTICATION',
        p_help_text          => q'~<p>Enter the Oracle Cloud Infrastructure <em>Tenancy's OCID</em>.</p>
<p><a rel="noopener noreferrer" target="_blank" href="https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm">Oracle Cloud Infrastructure Documentation</a></p>~' );
    --
    l_property_id := 1253;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OCI_PUBLIC_KEY_FINGERPRINT',
        p_prompt             => 'OCI Public Key Fingerprint',
        p_property_type      => 'TEXT',
        p_db_column          => 'FINGERPRINT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'AUTHENTICATION',
        p_help_text          => q'~<p>Enter the <em>public RSA key fingerprint</em> for OCI authentication. </p><p><a rel="noopener noreferrer" target="_blank" href="https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm">Oracle Cloud Infrastructure Documenta
tion</a></p>~' );
    --
    l_property_id := 1254;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CERTIFICATE',
        p_prompt             => 'Certificate',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'CLIENT_ID',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'AUTHENTICATION',
        p_help_text          => q'~Enter the Certificate in PEM format.~' );
    --
    l_property_id := 1255;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CERTIFICATE_PRIVATE_KEY',
        p_prompt             => 'Private Key',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'CLIENT_SECRET',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'AUTHENTICATION',
        p_help_text          => q'~Enter the private key in PEM format. &PRODUCT_NAME. stores this information encrypted and secure, so it cannot be retrieved back in clear text.~' );
    --
    l_property_id := 1256;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HTTP_CREDENTIAL_NAME',
        p_prompt             => 'Credential Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'CLIENT_ID',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'AUTHENTICATION',
        p_help_text          => q'~Provide the name of the HTTP Header or URL Query String parameter to use for this credential.~' );
    --
    l_property_id := 1257;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HTTP_CREDENTIAL_SECRET',
        p_prompt             => 'Credential Secret',
        p_property_type      => 'PASSWORD',
        p_db_column          => 'CLIENT_SECRET',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'AUTHENTICATION',
        p_help_text          => q'~Provide the (secret) value of the credential.~' );
    --
    l_property_id := 1258;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'CREDENTIALS',
        p_prompt                => 'Credentials',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'CREDENTIAL_ID',
        p_display_group_name    => 'AUTHENTICATION',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_credential,
        p_help_text             => q'~Select the credential to authenticate against. To edit the credential, navigate to <strong>Web Credentials</strong> in <strong>Workspace Utilities</strong>.~' );
    --
    l_property_id := 1259;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HTTPS_HOST_NAME',
        p_prompt             => 'HTTPS Host Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'HTTPS_HOST',
        p_display_length     => 50,
        p_max_length         => 500,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~The host name to be matched against the common name (CN) of the remote server's certificate for an HTTPS request. It can also be a domain name like *.example.com. If NULL, the host name in the given URL will be used.~' );
    --
    l_property_id := 1260;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SERVER_TIME_ZONE',
        p_prompt             => 'Server Time Zone',
        p_property_type      => 'TEXT',
        p_db_column          => 'ORDS_TIMEZONE',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Time Zone which the REST Enabled SQL service uses to decode DATE and TIMESTAMP values. This value will be updated with each <strong>Test Service</strong> operation.~' );
    --
    l_property_id := 1261;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REMOTE_SERVER_TYPE',
        p_prompt             => 'Remote Server Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'SERVER_TYPE',
        p_display_length     => 18,
        p_max_length         => 18,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~~' );
    --
    l_property_id := 1262;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FILE_CHARACTER_SET',
        p_prompt             => 'File Character Set',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FILE_CHARSET',
        p_display_length     => 10,
        p_max_length         => 128,
        p_display_group_name => 'ATTRIBUTES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Indicates the character set encoding of the file.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Arabic ISO-8859-6',
        p_return_value  => 'iso-8859-6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Arabic Windows 1256',
        p_return_value  => 'windows-1256' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Chinese Big5',
        p_return_value  => 'big5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Chinese GBK',
        p_return_value  => 'gbk' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cyrilic ISO-8859-5',
        p_return_value  => 'iso-8859-5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cyrilic KOI8-R',
        p_return_value  => 'koi8-r' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cyrilic KOI8-U',
        p_return_value  => 'koi8-u' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cyrilic Windows 1251',
        p_return_value  => 'windows-1251' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Eastern European ISO-8859-2',
        p_return_value  => 'iso-8859-2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Eastern European Windows 1250',
        p_return_value  => 'windows-1250' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Greek ISO-8859-7',
        p_return_value  => 'iso-8859-7' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Greek Windows 1253',
        p_return_value  => 'windows-1253' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hebrew ISO-8859-8-i',
        p_return_value  => 'iso-8859-8-i' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hebrew Windows 1255',
        p_return_value  => 'windows-1255' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Japanese EUC',
        p_return_value  => 'euc-jp' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Japanese Shift JIS',
        p_return_value  => 'shift_jis' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Korean EUC',
        p_return_value  => 'euc-kr' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Northern European ISO-8859-4',
        p_return_value  => 'iso-8859-4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Northern European Windows 1257',
        p_return_value  => 'windows-1257' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Southern European ISO-8859-3',
        p_return_value  => 'iso-8859-3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Thai TIS-620',
        p_return_value  => 'tis-620' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Turkish ISO-8859-9',
        p_return_value  => 'iso-8859-9' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Turkish Windows 1254',
        p_return_value  => 'windows-1254' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'US-ASCII',
        p_return_value  => 'us-ascii' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Unicode UTF-16 Big Endian',
        p_return_value  => 'utf-16be' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Unicode UTF-16 Little Endian',
        p_return_value  => 'utf-16le' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Unicode UTF-8',
        p_return_value  => 'utf-8' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Vietnamese Windows 1258',
        p_return_value  => 'windows-1258' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Western European ISO-8859-1',
        p_return_value  => 'iso-8859-1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Western European Windows 1252',
        p_return_value  => 'windows-1252' );
    --
    l_property_id := 1263;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EMAIL_SUBJECT',
        p_prompt             => 'Email Subject',
        p_property_type      => 'TEXT',
        p_db_column          => 'SUBJECT',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_is_translatable    => true,
        p_help_text          => q'~Substitution strings may be used with the <code>#STRING_NAME#</code> format. You can pass in values for these strings using the <code>APEX_MAIL</code> API.~' );
    --
    l_property_id := 1264;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EMAIL_HTML_HEADER',
        p_prompt             => 'Header',
        p_property_type      => 'HTML',
        p_db_column          => 'HTML_HEADER',
        p_display_length     => 60,
        p_max_length         => 32767,
        p_display_group_name => 'HTML_FORMAT',
        p_is_translatable    => true,
        p_help_text          => q'~Substitution strings may be used with the <code>#STRING_NAME#</code> format. You can pass in values for these strings using the <code>APEX_MAIL</code> API.~' );
    --
    l_property_id := 1265;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EMAIL_HTML_BODY',
        p_prompt             => 'Body',
        p_property_type      => 'HTML',
        p_db_column          => 'HTML_BODY',
        p_display_length     => 60,
        p_max_length         => 32767,
        p_display_group_name => 'HTML_FORMAT',
        p_is_translatable    => true,
        p_help_text          => q'~<p>You can use basic markup to format the body of your HTML email.</p>
<p>Substitution strings may be used with the <code>#STRING_NAME#</code> format. You can pass in values for these strings using the <code>APEX_MAIL</code> API.</p>~' );
    --
    l_property_id := 1266;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EMAIL_HTML_FOOTER',
        p_prompt             => 'Footer',
        p_property_type      => 'HTML',
        p_db_column          => 'HTML_FOOTER',
        p_display_length     => 60,
        p_max_length         => 32767,
        p_display_group_name => 'HTML_FORMAT',
        p_is_translatable    => true,
        p_help_text          => q'~Substitution strings may be used with the <code>#STRING_NAME#</code> format. You can pass in values for these strings using the <code>APEX_MAIL</code> API.~' );
    --
    l_property_id := 1267;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EMAIL_HTML_TEMPLATE',
        p_prompt             => 'HTML Template',
        p_property_type      => 'HTML',
        p_db_column          => 'HTML_TEMPLATE',
        p_display_length     => null,
        p_max_length         => 32767,
        p_display_group_name => 'ADVANCED',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Available substitution strings:</p>

<ul>
    <li>Global strings (automatically set):
        <ul>
            <li><code>#APP_NAME#</code></li>
            <li><code>#APP_URL#</code></li>
            <li><code>#APEX_HOST#</code></li>
        </ul></li>

    <li>Template strings:
        <ul>
            <li><code>#BODY#</code></li>
            <li><code>#BEFORE_ROWS#</code></li>
            <li><code>#ROWS#</code></li>
            <li><code>#AFTER_ROWS#</code></li>
            <li><code>#ACTION_LINK#</code></li>
        </ul></li>
</ul>~' );
    --
    l_property_id := 1268;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EMAIL_PLAIN_BODY',
        p_prompt             => 'Content',
        p_property_type      => 'HTML',
        p_db_column          => 'TEXT_TEMPLATE',
        p_display_length     => 60,
        p_max_length         => 32767,
        p_display_group_name => 'PLAIN_TEXT_FORMAT',
        p_is_translatable    => true,
        p_help_text          => q'~Substitution strings may be used with the <code>#STRING_NAME#</code> format. You can pass in values for these strings using the <code>APEX_MAIL</code> API.~' );
    --
    l_property_id := 1269;
    store_process_point_property (
        p_property_id => l_property_id,
        p_name        => 'APP_PROCESS_POINT' );
    --
    l_property_id := 1270;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'APP_ITEM_DATA_TYPE',
        p_is_internal        => true,
        p_prompt             => 'Session State Data Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DATA_TYPE',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Defining a value as numeric will ensure that any time this session state is set, that it is numeric.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'NUMBER',
        p_return_value  => 'NUMBER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'VARCHAR',
        p_return_value  => 'VARCHAR' );
    --
    l_property_id := 1271;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHORTCUT_HTML_CODE',
        p_prompt             => 'HTML Code',
        p_property_type      => 'HTML',
        p_db_column          => 'SHORTCUT',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'SOURCE',
        p_is_translatable    => true,
        p_help_text          => q'~<p>HTML code of the shortcut.</p>
<p>Support substitution strings include:
<ul>
<li><code>#PAGE_TITLE#</code> - the title of the current page)</li>
<li><code>#CURRENT_FORM_ELEMENT#</code> - the number of the current HTML form element</li>
<li><code>#CURRENT_ITEM_ID#</code> - the generated ID of the current item</li>
<li><code>#CURRENT_ITEM_NAME#</code> - the name of the current item</li>
<li><code>#CURRENT_ITEM_HELP_TEXT# - the help text of the current item</code>
</ul>
</p>~' );
    --
    l_property_id := 1272;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHORTCUT_TEXT',
        p_prompt             => 'Text',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'SHORTCUT',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'SOURCE',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Text of the shortcut which can be substituted in a JavaScript string.</p>
<p>Support substitution strings include:
<ul>
<li><code>#PAGE_TITLE#</code> - the title of the current page)</li>
<li><code>#CURRENT_FORM_ELEMENT#</code> - the number of the current HTML form element</li>
<li><code>#CURRENT_ITEM_ID#</code> - the generated ID of the current item</li>
<li><code>#CURRENT_ITEM_NAME#</code> - the name of the current item</li>
<li><code>#CURRENT_ITEM_HELP_TEXT# - the help text of the current item</code>
</ul>
</p>~' );
    --
    l_property_id := 1273;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_MESSAGE_NAME',
        p_prompt             => 'Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'SHORTCUT',
        p_display_length     => 80,
        p_max_length         => 255,
        p_text_case          => 'UPPER',
        p_display_group_name => 'SOURCE',
        p_is_translatable    => false,
        p_help_text          => q'~<p>Name of the Shared Component Text Message.</p>~' );
    --
    l_property_id := 1274;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_IMAGE_URL',
        p_prompt             => 'Image URL',
        p_property_type      => 'TEXT',
        p_db_column          => 'SHORTCUT',
        p_display_length     => 80,
        p_max_length         => 255,
        p_display_group_name => 'SOURCE',
        p_is_translatable    => false,
        p_help_text          => q'~Enter the URL to an image.~' );
    --
    l_property_id := 1275;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'I18N_LANGUAGE',
        p_prompt             => 'Language',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LANGUAGE',
        p_display_group_name => 'ATTRIBUTES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a language.~' );
    --
    store_i18n_lang_prop_lov_value;
    --
    l_property_id := 1276;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USED_IN_JAVASCRIPT',
        p_prompt             => 'Used in JavaScript',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_JS_MESSAGE',
        p_display_group_name => 'ATTRIBUTES',
        p_help_text          => q'~Select <strong>On</strong> if the message is used in <code>apex.lang.*</code> API calls in JavaScript code.~' );
    --
    l_property_id := 1277;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MESSAGE_TEXT',
        p_prompt             => 'Text',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'MESSAGE_TEXT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'MESSAGE',
        p_help_text          => q'~Enter the text to be returned when this text message is called. Use <code>%0</code> - <code>%9</code> to add placeholders to your message.~',
        p_examples           => q'~
<dl><dt>Text message with two placeholders</dt>
<dd><pre>The order# %0 with #1 order items has been deleted!</pre></dd>
</dl>~' );
    --
    l_property_id := 1278;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NAME_UPPER',
        p_prompt             => 'Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'NAME',
        p_display_length     => 32,
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_is_translatable    => false,
        p_text_case          => 'UPPER',
        p_help_text          => q'~Enter a unique name for the component.~' );
    --
    l_property_id := 1279;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'TRANSLATION_APPLICATION_ID',
        p_prompt                     => 'Translation Application',
        p_property_type              => 'INTEGER',
        p_db_column                  => 'TRANSLATION_FLOW_ID',
        p_min_value                  => 1,
        p_validation_plsql_ret_error => q'~
declare
begin
    if mod(p_value, 10) = 0 then
        return wwv_flow_lang.system_message( 'PD.ERROR.TRANS_APP_ID_NO_ZERO' );
    end if;
    --
    select count(*)
      into l_count
      from wwv_flows
     where id = p_value;
    --
    if l_count > 0 then
        return wwv_flow_lang.system_message( 'PD.ERROR.APP_ID_EXISTS' );
    end if;

    return null;
end;~',
        p_display_group_name         => 'ATTRIBUTES',
        p_help_text                  => q'~Enter a unique integer value that identifies an application.  The application ID must be unique on your instance of Oracle &PRODUCT_NAME..~' );
    --
    l_property_id := 1280;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DOCUMENT_DIRECTION',
        p_prompt             => 'Document Direction',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DIRECTION_RIGHT_TO_LEFT',
        p_display_group_name => 'GLOBALIZATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Set document direction left-to-right or right-to-left, Language Default uses direction defined against language.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left-To-Right',
        p_return_value  => 'N' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right-To-Left',
        p_return_value  => 'Y' );
    --
    l_property_id := 1283;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IMAGE_DIRECTORY',
        p_prompt             => 'Image Directory',
        p_property_type      => 'TEXT',
        p_db_column          => 'IMAGE_PREFIX',
        p_display_length     => 32,
        p_max_length         => 2000,
        p_display_group_name => 'ATTRIBUTES',
        p_help_text          => q'~Enter the directory where images will be obtained. If not specified, the instance default will be used. This is the default and most common option.~' );
    --
    l_property_id := 1284;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALID_VALUES',
        p_prompt             => 'Valid Values',
        p_property_type      => 'TEXT',
        p_db_column          => 'VALID_VALUES',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Enter comma separated valid values.  If defined, Application Express only accepts valid values when the settings change.~' );
    --
    l_property_id := 1285;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ON_UPGRADE_KEEP_VALUE',
        p_prompt             => 'On Upgrade Keep Value',
        p_property_type      => 'YES NO',
        p_db_column          => 'ON_UPGRADE_KEEP_VALUE',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Select whether the application setting value in the deployed application should be kept, or overwritten with the specified value when the application is upgraded. Selecting <strong>On</strong> to keep the deployed value is useful if the application supports application setting configuration (using the <code>APEX_APP_SETTING.SET_VALUE</code> API) to change the application setting value in the deployed application, and where you want to respect those values upon upgrade.~' );
    --
    l_property_id := 1286;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'INCLUDE_SESSION_STATE',
        p_prompt                     => 'Include',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'APEX',
        p_prop_type_yesno_override_n => 'STANDARD',
        p_db_column                  => 'INCLUDE_SESSION_STATE',
        p_display_group_name         => 'SESSION_STATE',
        p_help_text                  => q'~Report Queries are processed as XML or JSON files using report layouts for formatting. The data can optionally include application specific information and session state. Use the standard Structure for maximum compatibility with RTF templates from BI Pubisher and use the advanced Structure for including &PRODUCT_NAME. specific data.~' );

    --
    l_property_id := 1287;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'SESSION_STATE_ITEMS',
        p_prompt                   => 'Items',
        p_property_type            => 'ITEM',
        p_multi_value_delimiter    => ':',
        p_db_column                => 'SESSION_STATE_ITEMS',
        p_display_length           => 50,
        p_max_length               => 2000,
        p_display_group_name       => 'SESSION_STATE',
        p_help_text                => q'~Add application and page items to the list of items that should be included with the report query. The actually session state of those items will only be rendered if they are defined in the report layout. The built-in generic layouts do not include any session state. ~' );
    --
    l_property_id := 1288;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREADCRUMB_PAGE_NUMBER',
        p_prompt             => 'Page Number',
        p_property_type      => 'PAGE',
        p_db_column          => 'PAGE_ID',
        p_display_length     => 5,
        p_max_length         => 20,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Identify the page associated with this breadcrumb.~' );
    --
    l_property_id := 1289;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PARENT_BREADCRUMB_ENTRY',
        p_prompt                   => 'Parent Entry',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'PARENT_ID',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_breadcrumb_entry,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identify the breadcrumb entry that is the parent of this entry. Any given breadcrumb should have only one root node, identified as an item with no parent ID.~' );
    --
    l_property_id := 1290;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LONG_NAME',
        p_prompt             => 'Long Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'LONG_NAME',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'APPEARANCE',
        p_is_translatable    => true,
        p_help_text          => q'~Identify the long name of this breadcrumb entry. Both the short and long names can be referenced from the breadcrumb template.~' );
    --

    l_property_id := 1291;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'AUTHORIZATION_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_authorization,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Use this field to base this authorization scheme on an existing authorization scheme in this application or another application in your workspace.~' );

    --
    l_property_id := 1292;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ON_UPGRADE_KEEP_STATUS',
        p_prompt             => 'On Upgrade Keep Status',
        p_property_type      => 'YES NO',
        p_db_column          => 'ON_UPGRADE_KEEP_STATUS',
        p_display_group_name => 'STATUS',
        p_help_text          => q'~Select whether the build option status in the deployed application should be kept, or overwritten with the specified status when the application is upgraded. Selecting <strong>On</strong> to keep the deployed status is useful if the application supports build option configuration (using the <code>APEX_UTIL.SET_BUILD_OPTION_STATUS</code> API) to enable or disable the build option in the deployed application, and where you want to respect those settings upon upgrade.~' );
    --
    l_property_id := 1293;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COOKIE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_is_query_only      => true,
        p_db_column          => 'COOKIE_TYPE',
        p_display_group_name => 'SESSION_SHARING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>
Define which type of session cookie should be used by this application.
You can use this attribute to share the same &PRODUCT_NAME. session between multiple applications in a workspace.
With session sharing, users can seamlessly navigate between applications without logging in multiple times.
</p><p>
<ul>
    <li><em>Application (No Sharing)</em>: The session cookie is specific to this application.
        Sessions are not shared with other applications.</li>
    <li><em>Workspace Sharing</em>: The session is shared with other applications of this workspace,
        if these also set <em>Cookie Type</em> to <em>Workspace Sharing</em>.</li>
    <li><em>Custom</em>: Define custom session cookie attributes.</li>
</ul>
</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Application (No Sharing)',
        p_return_value  => 'A',
        p_help_text     => q'~The session cookie is specific to this application. Sessions are not shared with other applications.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Workspace Sharing',
        p_return_value  => 'W',
        p_help_text     => q'~The session is shared with other applications of this workspace, if these also set <em>Type</em> to <em>Workspace Sharing</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom',
        p_return_value  => 'C',
        p_help_text     => q'~Define custom session cookie attributes.~' );
    --
    l_property_id := 1294;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SWITCH_AUTHENTICATION_IN_SESSION',
        p_prompt             => 'Switch in Session',
        p_property_type      => 'YES NO',
        p_db_column          => 'SWITCH_IN_SESSION_YN',
        p_display_group_name => 'LOGIN_PROCESSING',
        p_examples           => q'~<dl>
<dt>The developer adds a button labeled "Sign In with OAuth2" to the application's login page, where "OAuth2-Scheme" is the authentication scheme name.
When processing the request (and assuming <strong>Switch in Session</strong> is turned on), &PRODUCT_NAME. registers the scheme in the session and will use it for all future requests.
</dt>
<dd><pre>f?p=&amp;APP_ID.:1:&amp;APP_SESSION.:APEX_AUTHENTICATION=OAuth2-Scheme</pre></dd>
</dl>~',
        p_help_text          => q'~<p>
Select <strong>On</strong> to enable switching from the default authentication scheme to this scheme in the current &PRODUCT_NAME. session. Select <strong>Off</strong> if the authentication scheme should not be enabled at runtime.
</p><p>
If enabled, the current session's authentication scheme can be changed by passing <code>APEX_AUTHENTICATION=scheme name</code> in a URL's request parameter.
</p>~' );
    --
    l_property_id := 1295;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'LIST_SQL_QUERY',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'LIST_QUERY',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 3,
        p_sql_max_column_count => 17,
        p_display_group_name   => 'SOURCE',
        p_examples             => q'~<dl>
<dt>Display employee names</dt>
<dd><pre>
select null  as level,
       ename as label,
       null  as target
  from emp
 order by ename
</pre></dd>
<dt>Display employee names using bind variables</dt>
<dd><pre>
select null  as level,
       ename as label,
       apex_page.get_url( p_items => 'P1_EMPNO', p_values => empno ) as target
  from emp
 where deptno = :MY_ITEM
 order by ename
</pre></dd>
<dt>Display employee names using a hierarchical SQL query</dt>
<dd><pre>
select level,
       ename as label,
       apex_page.get_url( p_items => 'P1_EMPNO', p_values => empno ) as target
  from emp
 start with mgr is null
connect by prior empno = mgr
 order siblings by ename
</pre></dd>
</dl>~',
        p_help_text            => q'~<p>Enter a SQL Query to populate this list. Generally list queries are of the form:</p>
<pre>
select level,
       labelValue            as label,
       [targetValue]         as target,
       [is_current]          as is_current_list_entry,
       [imageValue]          as image,
       [imageAttributeValue] as image_attribute,
       [imageAltValue]       as image_alt_attribute,
       [attribute1]          as attribute1,
       [attribute2]          as attribute2,
       [attribute3]          as attribute3,
       [attribute4]          as attribute4,
       [attribute5]          as attribute5,
       [attribute6]          as attribute6,
       [attribute7]          as attribute7,
       [attribute8]          as attribute8,
       [attribute9]          as attribute9,
       [attribute10]         as attribute10
  from ...
 where ...
 order by ...
</pre>
<p>Each column selected must have a unique name or alias. Oracle recommends using an alias on any column that includes an SQL expression.</p>~' );
    --
    l_property_id := 1296;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PARENT_LIST_ENTRY',
        p_prompt                   => 'Parent Entry',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'PARENT_LIST_ITEM_ID',
        p_display_group_name       => 'LAYOUT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_list_entry,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identify the parent for this list entry. Use this attribute if you are creating a hierarchical list.
<p>To create a hierarchical list, you must select a list template that supports hierarchical lists. To determine which list templates support hierarchical lists, look for templates having the naming convention "with Sublist." For more information on hierarchical list item display, see list template item help.~' );
    --
    l_property_id := 1364;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'SUBENTRIES_LIST',
        p_prompt                   => 'List',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'SUB_LIST_ID',
        p_display_group_name       => 'SUBENTRIES',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_list,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identify the list populating subentries for this list entry. Use this attribute if you are creating a hierarchical list.
<p>To create a hierarchical list, you must select a list template that supports hierarchical lists. To determine which list templates support hierarchical lists, look for templates having the naming convention "with Sublist." For more information on hierarchical list item display, see list template item help.~' );
    --
    l_property_id := 1297;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_CURRENT_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LIST_ITEM_CURRENT_TYPE',
        p_display_group_name => 'IS_CURRENT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Specify when this list entry should be current based on the page type.</p>
<p>List items can be current or non-current. Current list items use the current template, non current list items use the non current list item template. The actual condition and templates are defined in subsequent attributes.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Target Page',
        p_return_value  => 'TARGET_PAGE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Pages',
        p_return_value  => 'COLON_DELIMITED_PAGE_LIST' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Exists SQL Query',
        p_return_value  => 'EXISTS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Not Exists SQL Query',
        p_return_value  => 'NOT_EXISTS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Expression',
        p_return_value  => 'EXPRESSION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Always',
        p_return_value  => 'ALWAYS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Never',
        p_return_value  => 'NEVER' );
    --
    l_property_id := 1298;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'IS_CURRENT_SQL_STATEMENT',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'LIST_ITEM_CURRENT_FOR_PAGES',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_display_group_name   => 'IS_CURRENT',
        p_sql_min_column_count => 1,
        p_help_text            => q'~Enter a SQL query for this condition.~',
        p_examples             => q'~
<dl><dt>To return successfully as one or more rows exist when checking if the employee is in department 30:</dt>
<dd><pre>
select 1
  from emp
 where empno  = :P2_EMPNO
   and deptno = 30
</pre></dd>
<dt>To return successfully as no rows exist when checking if the employee is in department 40:</dt>
<dd><pre>
select 1
  from emp
 where empno  = :P2_EMPNO
   and deptno = 40
</pre></dd>
</dl>~' );
    --
    l_property_id := 1299;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'IS_CURRENT_PAGES',
        p_prompt                => 'Pages',
        p_property_type         => 'PAGE',
        p_multi_value_delimiter => ',',
        p_db_column             => 'LIST_ITEM_CURRENT_FOR_PAGES',
        p_display_length        => 80,
        p_max_length            => 4000,
        p_display_group_name    => 'IS_CURRENT',
        p_help_text             => q'~Enter a comma separated list of page numbers for this condition.~' );
    --
    l_property_id := 1300;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COUNT_CLICKS',
        p_prompt             => 'Count Clicks',
        p_property_type      => 'YES NO',
        p_db_column          => 'LIST_COUNTCLICKS_Y_N',
        p_display_group_name => 'CLICK_COUNTING',
        p_help_text          => q'~If this is a link to an external page (for example www.google.com) you can count clicks. Reference API documentation for the <a rel="noopener noreferrer" href="#SYSTEM_HELP_URL#CSH:pd-count-clicks" target="_blank">Z</a> procedure.~' );
    --
    l_property_id := 1301;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CLICK_COUNT_CATEGORY',
        p_prompt             => 'Category',
        p_property_type      => 'TEXT',
        p_db_column          => 'LIST_COUNTCLICKS_CAT',
        p_display_length     => 96,
        p_max_length         => 255,
        p_display_group_name => 'CLICK_COUNTING',
        p_help_text          => q'~Reference API documentation for the <a rel="noopener noreferrer" href="#SYSTEM_HELP_URL#CSH:pd-click-count-category" target="_blank">Z</a> procedure.~' );
    --
    l_property_id := 1302;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TRANSLATE_USER_DEFINED_ATTRIBUTES',
        p_prompt             => 'Translatable',
        p_property_type      => 'YES NO',
        p_db_column          => 'TRANSLATE_LIST_TEXT_Y_N',
        p_display_group_name => 'USER_DEFINED_ATTRIBUTES',
        p_help_text          => q'~Specify whether you want to translate user defined attributes.~' );
    --
    l_property_id := 1303;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USER_DEFINED_ATTRIBUTE1',
        p_prompt             => '1.',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'LIST_TEXT_01',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'USER_DEFINED_ATTRIBUTES',
        p_is_translatable    => true,
        p_help_text          => q'~Extra attributes that can be accessed via the list template.~' );
    --
    l_property_id := 1304;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USER_DEFINED_ATTRIBUTE2',
        p_prompt             => '2.',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'LIST_TEXT_02',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'USER_DEFINED_ATTRIBUTES',
        p_is_translatable    => true,
        p_help_text          => q'~Extra attributes that can be accessed via the list template.~' );
    --
    l_property_id := 1305;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USER_DEFINED_ATTRIBUTE3',
        p_prompt             => '3.',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'LIST_TEXT_03',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'USER_DEFINED_ATTRIBUTES',
        p_is_translatable    => true,
        p_help_text          => q'~Extra attributes that can be accessed via the list template.~' );
    --
    l_property_id := 1306;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USER_DEFINED_ATTRIBUTE4',
        p_prompt             => '4.',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'LIST_TEXT_04',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'USER_DEFINED_ATTRIBUTES',
        p_is_translatable    => true,
        p_help_text          => q'~Extra attributes that can be accessed via the list template.~' );
    --
    l_property_id := 1307;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USER_DEFINED_ATTRIBUTE5',
        p_prompt             => '5.',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'LIST_TEXT_05',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'USER_DEFINED_ATTRIBUTES',
        p_is_translatable    => true,
        p_help_text          => q'~Extra attributes that can be accessed via the list template.~' );
    --
    l_property_id := 1308;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USER_DEFINED_ATTRIBUTE6',
        p_prompt             => '6.',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'LIST_TEXT_06',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'USER_DEFINED_ATTRIBUTES',
        p_is_translatable    => true,
        p_help_text          => q'~Extra attributes that can be accessed via the list template.~' );
    --
    l_property_id := 1309;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USER_DEFINED_ATTRIBUTE7',
        p_prompt             => '7.',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'LIST_TEXT_07',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'USER_DEFINED_ATTRIBUTES',
        p_is_translatable    => true,
        p_help_text          => q'~Extra attributes that can be accessed via the list template.~' );
    --
    l_property_id := 1310;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USER_DEFINED_ATTRIBUTE8',
        p_prompt             => '8.',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'LIST_TEXT_08',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'USER_DEFINED_ATTRIBUTES',
        p_is_translatable    => true,
        p_help_text          => q'~Extra attributes that can be accessed via the list template.~' );
    --
    l_property_id := 1311;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USER_DEFINED_ATTRIBUTE9',
        p_prompt             => '9.',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'LIST_TEXT_09',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'USER_DEFINED_ATTRIBUTES',
        p_is_translatable    => true,
        p_help_text          => q'~Extra attributes that can be accessed via the list template.~' );
    --
    l_property_id := 1312;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USER_DEFINED_ATTRIBUTE10',
        p_prompt             => '10.',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'LIST_TEXT_10',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'USER_DEFINED_ATTRIBUTES',
        p_is_translatable    => true,
        p_help_text          => q'~Extra attributes that can be accessed via the list template.~' );
    --
    l_property_id := 1313;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IMAGE_ICON_CSS_CLASSES',
        p_prompt             => 'Image/Icon CSS Classes',
        p_property_type      => 'ICON',
        p_db_column          => 'LIST_ITEM_ICON',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'ICON',
        p_lov_type           => 'DISTINCT',
        p_help_text          => q'~<p>Identify an image file name or the icon class for the icon associated with this list entry.</p>
<h3>Using Universal Theme</h3>

<p>Most Universal Theme apps use the Font APEX icon library. To pick an icon, use the built-in icon picker and select an icon from the popup window. See examples below:</p>
<ul>
    <li><code>fa-cloud</code> - displays the cloud icon</li>
    <li><code>fa-exclamation-circle u-danger-text</code> - displays a red exclamation icon</li>
</ul>

<p>You can see more examples on the <a rel="noopener noreferrer" href="https://apex.oracle.com/fontapex" target="_blank">Icons</a> page of the <a rel="noopener noreferrer" href="https://apex.oracle.com/ut" target="_blank">Universal Theme sample app</a>.</p>

<h3>Using a Custom or Legacy Theme</h3>

<p>You can also enter the full image path if your application theme does not use an icon library.</p>
~' );
    --
    l_property_id := 1314;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'IMAGE_ATTRIBUTES',
        p_prompt                   => 'Attributes',
        p_property_type            => 'TEXT',
        p_db_column                => 'LIST_ITEM_ICON_ATTRIBUTES',
        p_display_length           => 60,
        p_max_length               => 255,
        p_display_group_name       => 'ICON',
        p_help_text                => q'~<p>Identify the image attributes (such as width="12" height="12") for the list element image.</p>
<p>Use the #LIST_LABEL# substitution string to reference the list label text. This substitution string allows for the title image attribute to be automatically set based on the value of the list label text. For example:
<pre>...title="#LIST_LABEL#"...</pre></p>~' );
    --
    l_property_id := 1315;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IMAGE_ALT_ATTRIBUTE',
        p_prompt             => 'Alt Attribute',
        p_property_type      => 'TEXT',
        p_db_column          => 'LIST_ITEM_ICON_ALT_ATTRIBUTE',
        p_display_length     => 32,
        p_max_length         => 255,
        p_display_group_name => 'ICON',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Identify the image alt attribute for the list element image.</p>
<p>Use the #LIST_LABEL# substitution string to reference the list label text.  This substitution string allows for the image alt attribute to be automatically set based on the value of the list label text.  For example:
<pre>...alt="#LIST_LABEL#"...</pre></p>~' );
    --
    l_property_id := 1316;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOV_SOURCE_LOCATION',
        p_prompt             => 'Location',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOCATION',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the location of the data.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Values',
        p_return_value  => 'STATIC',
        p_help_text     => q'~Data is a static list of values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Local Database',
        p_return_value  => 'LOCAL',
        p_help_text     => q'~Data is sourced from the local database.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'REST Enabled SQL',
        p_return_value  => 'REMOTE',
        p_help_text     => q'~Data is sourced from a remote database, where the connection is defined using REST Enabled SQL. ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'REST Source',
        p_return_value  => 'WEB_SOURCE',
        p_help_text     => q'~Data is sourced from a RESTful web service defined using REST Data Sources.~' );
    --
    store_property_lov_values (
        p_property_id    => l_property_id,
        p_display_value  => 'Duality View',
        p_return_value   => 'DUALITY_VIEW',
        p_min_db_version => c_db_23ai,
        p_help_text      => q'~Data is sourced from a Duality View.~' );
    --
    store_property_lov_values (
        p_property_id    => l_property_id,
        p_display_value  => 'JSON Source',
        p_return_value   => 'JSON_COLLECTION',
        p_help_text      => q'~Data is sourced from a JSON Collection Table or Table with JSON columns.~' );
    --
    l_property_id := 1317;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOV_QUERY_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SOURCE_TYPE',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how the data is queried.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Table / View',
        p_return_value  => 'TABLE',
        p_help_text     => q'~The data is retrieved based on a table or view.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'SQL',
        p_help_text     => q'~The data is retrieved based on a SQL Query.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body returning SQL Query',
        p_return_value  => 'FUNC_BODY_RETURNING_SQL',
        p_help_text     => q'~The data is retrieved based on the SQL Query returned by executing a Function Body.~' );
    --
    store_property_lov_values (
        p_property_id    => l_property_id,
        p_display_value  => 'Property Graph',
        p_return_value   => 'GRAPH',
        p_min_db_version => c_db_23ai,
        p_help_text      => q'~The data is retrieved based on a Property Graph.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Legacy SQL Query',
        p_return_value  => 'LEGACY_SQL',
        p_is_deprecated => 'Y',
        p_help_text     => q'~The data is retrieved based on a SQL query with two columns.~' );
    --
    l_property_id := 1318;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'LOV_LEGACY_SQL_QUERY',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'LOV_QUERY',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 2,
        p_display_group_name   => 'SOURCE',
        p_help_text            => q'~<p>A list of values SQL Query in the format:</p>
<pre>
select [displayValue],
       [returnValue]
  from ...
 where ...
 order by ...
</pre>~' );
    --
    l_property_id := 1319;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'DISPLAY_COLUMN_NAME',
        p_prompt                      => 'Display',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'DISPLAY_COLUMN_NAME',
        p_column_data_types           => 'VARCHAR2',
        p_display_group_name          => 'COLUMN_MAPPING',
        p_help_text                   => q'~Select the column to be used as display value.~' );
    --
    l_property_id := 1320;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'RETURN_COLUMN_NAME',
        p_prompt                      => 'Return',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'RETURN_COLUMN_NAME',
        p_column_data_types           => 'VARCHAR2',
        p_display_group_name          => 'COLUMN_MAPPING',
        p_help_text                   => q'~Select the column to be used as return value which gets stored in the field.~' );
    --
    l_property_id := 1321;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'DEFAULT_SORT_COLUMN_NAME',
        p_prompt                      => 'Default Sort',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'DEFAULT_SORT_COLUMN_NAME',
        p_column_data_types           => 'VARCHAR2',
        p_display_group_name          => 'COLUMN_MAPPING',
        p_help_text                   => q'~Select the column to be used as default sort column.~' );
    --
    l_property_id := 1322;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SORT_DIRECTION',
        p_prompt             => 'Sort Direction',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DEFAULT_SORT_DIRECTION',
        p_display_group_name => 'COLUMN_MAPPING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Define the sort direction for the default sort.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Ascending (Nulls Last)',
        p_return_value  => 'ASC' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Ascending (Nulls First)',
        p_return_value  => 'ASC_NULLS_FIRST' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Descending (Nulls Last)',
        p_return_value  => 'DESC' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Descending (Nulls First)',
        p_return_value  => 'DESC_NULLS_FIRST' );
    --
    l_property_id := 1323;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'GROUP_COLUMN_NAME',
        p_prompt                      => 'Group',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'GROUP_COLUMN_NAME',
        p_column_data_types           => 'VARCHAR2',
        p_display_group_name          => 'COLUMN_MAPPING',
        p_help_text                   => q'~<p>Define the column that will be used as the group value for your List of Values. If the item type supports it, information will be grouped by this value.</p>
<p>Note: Currently in APEX the supported native item types are Popup LOV with multiple columns displayed, and Select List.</p>~' );
    --
    l_property_id := 1324;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GROUP_SORT_DIRECTION',
        p_prompt             => 'Group Sort Direction',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GROUP_SORT_DIRECTION',
        p_display_group_name => 'COLUMN_MAPPING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Define the sort direction for the group column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Ascending (Nulls Last)',
        p_return_value  => 'ASC' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Ascending (Nulls First)',
        p_return_value  => 'ASC_NULLS_FIRST' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Descending (Nulls Last)',
        p_return_value  => 'DESC' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Descending (Nulls First)',
        p_return_value  => 'DESC_NULLS_FIRST' );
    --
    l_property_id := 1325;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'ICON_COLUMN_NAME',
        p_prompt                      => 'Icon',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'ICON_COLUMN_NAME',
        p_column_data_types           => 'VARCHAR2',
        p_display_group_name          => 'COLUMN_MAPPING',
        p_help_text                   => q'~<p>Define the column that will be used as the icon column for your List of Values. The column needs to provide a value that corresponds to a CSS Class name for the icon. If the item type supports it, an icon will be displayed with your List of Values.</p>
<p>Note: Currently in APEX the only supported native item type is Popup LOV.</p>~' );
    --
    l_property_id := 1326;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOV_SEQUENCE',
        p_prompt             => 'Sequence',
        p_property_type      => 'NUMBER',
        p_db_column          => 'LOV_DISP_SEQUENCE',
        p_display_length     => 6,
        p_display_group_name => 'ENTRY',
        p_help_text          => q'~<p>Specify the sequence for this component. The sequence determines the order of evaluation.</p>~' );
    --
    l_property_id := 1327;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DISPLAY_VALUE',
        p_prompt             => 'Display',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'LOV_DISP_VALUE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'ENTRY',
        p_is_translatable    => true,
        p_help_text          => q'~This text is displayed to the user. The return value is returned.~' );
    --
    l_property_id := 1328;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RETURN_VALUE',
        p_prompt             => 'Return',
        p_property_type      => 'TEXT',
        p_db_column          => 'LOV_RETURN_VALUE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'ENTRY',
        p_help_text          => q'~Specify the return value for this list of values entry.~' );
    --
    l_property_id := 1329;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOV_ENTRY_TEMPLATE',
        p_prompt             => 'Template',
        p_property_type      => 'HTML',
        p_db_column          => 'LOV_TEMPLATE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'GLOBALIZATION',
        p_help_text          => q'~Use this optional template when developing list of values entries that need to be translated, and you wish to simplify the translation text.  Use the #DISPLAY_VALUE# substitution string.  The display value will be this attribute with the display value substituted for all occurences of the substitution string #DISPLAY_VALUE#.~' );
    --
    l_property_id := 1330;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_SEARCHABLE',
        p_prompt             => 'Searchable',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_SEARCHABLE',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Specify whether this column is searchable.~' );
    --
    l_property_id := 1331;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_REMOTE_DATABASE_TYPE',
        p_prompt             => 'Database Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'REMOTE_SQL_DATABASE_TYPE',
        p_display_group_name => 'SOURCE');
    --
    l_property_id := 1332;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REMOTE_SQL_DATABASE_TYPE',
        p_prompt             => 'Database Type',
        p_property_type      => 'SELECT LIST',
        p_lov_type           => 'STATIC',
        p_db_column          => 'REMOTE_SQL_DATABASE_TYPE',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Identifies the database vendor of this REST Enabled SQL Service. Currently, MySQL and Oracle Databases are supported.~' );

    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Oracle',
        p_return_value  => 'ORACLE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'MySQL',
        p_return_value  => 'MYSQL' );
    --
    l_property_id := 1333;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_FORMAT',
        p_prompt             => 'Format',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FORMAT',
        p_display_group_name => 'DATA_PROFILE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>
    Choose the data format. For Data Loading, CSV, JSON, XLSX and XML formats are supported. For REST Data Sources, JSON, XML and CSV can be chosen.
    </p>
    <p>For usage with a REST Data Source, the CSV response must contain column headers as the first row.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CSV',
        p_return_value  => 'CSV' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JSON',
        p_return_value  => 'JSON' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'XLSX',
        p_return_value  => 'XLSX' ); -- $$$ should not be available for REST
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'XML',
        p_return_value  => 'XML' );
    --
    l_property_id := 1334;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_ROW_SELECTOR',
        p_prompt             => 'Row Selector',
        p_property_type      => 'TEXT',
        p_db_column          => 'ROW_SELECTOR',
        p_display_length     => 50,
        p_max_length         => 255,
        p_display_group_name => 'DATA_PROFILE',
        p_help_text          => q'~<p>
    For a data profile returning a table, enter the expression to select the collection of rows within the Data Source. The rows collection is typically a JSON array or XML <em>collection</em> (in XML a sequence of tags with the same name). Nested arrays or nested XML <em>collections</em> are not supported.
</p>
<p>
    If the row selector
    references a single JSON object or an XML tag which is not a collection, the <strong>Contains Single Row</strong> data profile attribute must be set to <strong>Yes</strong>. Leave the attribute empty or enter <strong>"."</strong>, if the JSON array or object is at the root level.
</p>
<h2>
    Example 1:
</h2>
<pre>
{ "items": [
    { "ename": "SMITH", "sal": 200 },
    { "ename": "SCOTT", "sal": 100 } ] }
</pre>
<p>
    The JSON attribute contains an array in the <strong>items</strong> attribute, so choose that as the row selector. An element within that array will be considered as a row and each attribute will be considered as a column.
</p>
<h2>
    Example 2:
</h2>
<pre>
{ "header": { "generated": "2018-10-19", "version": "1.0" },
  "body": { "items": [
          { "ename": "SMITH", "sal": 200 },
          { "ename": "SCOTT", "sal": 100 } ] } }
</pre>
<p>
    The JSON attribute contains an array in the <strong>body.items</strong> attribute, so choose that as the row selector. An element within that array will be considered as a row and each attribute will be considered as a column.
</p>
 <h2>
    Example 3:
</h2>
<pre>
&lt;xml-document&gt;
  &lt;row&gt;
    &lt;ename&gt;SMITH&lt;/ename&gt;&lt;sal&gt;200&lt;/sal&gt;
  &lt;/row&gt;
  &lt;row&gt;
    &lt;ename&gt;SCOTT&lt;/ename&gt;&lt;sal&gt;100&lt;/sal&gt;
  &lt;/row&gt;
&lt;xml-document&gt;
</pre>
    <p>
    The XML tag attribute <strong>/xml-document/row</strong> contains a <em>collection</em>, so choose that as the row selector. Each <strong>row</strong> object will be considered as a row and each child tag of &lt;row&gt; will be considered as a column.
</p>~' );
    --
    l_property_id := 1680;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_USE_RAW_JSON_SELECTORS',
        p_prompt             => q'~Use Raw Selectors~',
        p_property_type      => 'YES NO',
        p_db_column          => 'USE_RAW_JSON_SELECTORS',
        p_display_group_name => 'DATA_PROFILE',
        p_help_text          => q'~<p>
    If enabled, &PRODUCT_NAME. will not sanitize row and column selectors when generating the SQL query for JSON parsing.
    All selectors will be used exactly as specified.
</p>~' );
    --
    l_property_id := 1335;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_IS_SINGLE_ROW',
        p_prompt             => 'Contains Single Row',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_SINGLE_ROW',
        p_display_group_name => 'DATA_PROFILE',
        p_help_text          => q'~Choose <strong>On</strong> if the response <em>always</em> contains only one row - and no collection. Choose <strong>Off</strong> if the response contains a collection of rows.~' );
    --
    l_property_id := 1336;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_SINGLE_ROW_SELECTOR',
        p_prompt             => 'Single Row Selector',
        p_property_type      => 'TEXT',
        p_db_column          => 'SINGLE_ROW_SELECTOR',
        p_display_length     => 50,
        p_max_length         => 255,
        p_display_group_name => 'DATA_PROFILE',
        p_help_text          => q'~<p>
    This is used for REST Services which return a JSON array or a simple object, based on the actual request. Enter the selector expression to select a single row from the REST Data Source response.
</p>
<p>
    Example:
</p>
<ul>
    <li>A REST Service Endpoint returns a JSON array - the data profile returns a <strong>Table</strong><br>
        <code>http://{server}/path/service/emp</code><br>
        <pre>
{ "header": { "generated": "2018-10-19", "version": "1.0" },
  "body": { "items": [
          { "ename": "SMITH", "sal": 200 },
          { "ename": "SCOTT", "sal": 100 } ] } }
        </pre>
    </li>
    <li>When an identifier is added to the URL, only one row is returned:<br>
        <code>http://{server}/path/service/emp/<strong>SMITH</strong></code><br>
        <pre>
{ "header": { "generated": "2018-10-19", "version": "1.0" },
  "body":   { "ename": "SMITH", "sal": 200 } }
        </pre>
    </li>
</ul>
<p>
    In this case, use <strong>body</strong> as the <strong>Single Row Selector</strong>. The <strong>Row Selector</strong> attribute (above) should be set to <strong>body.items</strong>.
</p>~' );
    --
    l_property_id := 1337;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'I18N_IANA_CHARSET_ENCODING',
        p_prompt             => 'Encoding',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ENCODING',
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Choose an encoding of the data. Use <strong>Default</strong> to treat the file as encoded in the <em>database character set</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Arabic ISO-8859-6',
        p_return_value  => 'iso-8859-6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Arabic Windows 1256',
        p_return_value  => 'windows-1256' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Chinese Big5',
        p_return_value  => 'big5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Chinese GBK',
        p_return_value  => 'gbk' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cyrilic ISO-8859-5',
        p_return_value  => 'iso-8859-5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cyrilic KOI8-R',
        p_return_value  => 'koi8-r' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cyrilic KOI8-U',
        p_return_value  => 'koi8-u' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cyrilic Windows 1251',
        p_return_value  => 'windows-1251' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Eastern European ISO-8859-2',
        p_return_value  => 'iso-8859-2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Eastern European Windows 1250',
        p_return_value  => 'windows-1250' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Greek ISO-8859-7',
        p_return_value  => 'iso-8859-7' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Greek Windows 1253',
        p_return_value  => 'windows-1253' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hebrew ISO-8859-8-i',
        p_return_value  => 'iso-8859-8-i' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hebrew Windows 1255',
        p_return_value  => 'windows-1255' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Japanese EUC',
        p_return_value  => 'euc-jp' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Japanese Shift JIS',
        p_return_value  => 'shift_jis' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Korean EUC',
        p_return_value  => 'euc-kr' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Northern European ISO-8859-4',
        p_return_value  => 'iso-8859-4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Northern European Windows 1257',
        p_return_value  => 'windows-1257' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Southern European ISO-8859-3',
        p_return_value  => 'iso-8859-3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Thai TIS-620',
        p_return_value  => 'tis-620' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Turkish ISO-8859-9',
        p_return_value  => 'iso-8859-9' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Turkish Windows 1254',
        p_return_value  => 'windows-1254' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'US-ASCII',
        p_return_value  => 'us-ascii' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Unicode UTF-16 Big Endian',
        p_return_value  => 'utf-16be' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Unicode UTF-16 Little Endian',
        p_return_value  => 'utf-16le' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Unicode UTF-8',
        p_return_value  => 'utf-8' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Vietnamese Windows 1258',
        p_return_value  => 'windows-1258' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Western European ISO-8859-1',
        p_return_value  => 'iso-8859-1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Western European Windows 1252',
        p_return_value  => 'windows-1252' );
    --
    l_property_id := 1338;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_NUMERIC_CHARACTERS',
        p_prompt             => 'Numeric Characters',
        p_property_type      => 'TEXT',
        p_db_column          => 'DECIMAL_CHARACTERS',
        p_display_length     => 2,
        p_max_length         => 2,
        p_validation_plsql_ret_error => q'~
begin
    if length( p_value ) != 2 then
        return wwv_flow_lang.system_message( 'PD.ERROR.DATA_PROFILE_NUMERIC_CHARACTERS' ); -- $$$ Numeric Characters must be exactly two characters, e.g. ".,"
    end if;
    --
    return null;
end;~',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>
Enter the numeric characters to be used for parsing numeric data types. If nothing is specified, "." will be used as the decimal character for XML and JSON data profiles, and the session defaults will be used for CSV and XLSX data profiles.
</p>
<p>
This attribute acts as a default for all columns; each column can have individual overrides.
</p>~' );
    --
    l_property_id := 1339;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'XML_NAMESPACES',
        p_prompt             => 'XML Namespaces',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'XML_NAMESPACES',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>
    Enter namespace information to parse XML responses here. Use the following format:
</p>
<pre>
<em>namespace-uri-1</em>=<em>namespace-prefix-1</em><em>CR</em>
<em>namespace-uri-2</em>=<em>namespace-prefix-2</em><em>CR</em>
:
</pre>
<h2>
    Example:
</h2>
<pre>
http://xmlns.oracle.com/xdb=<strong>xdb</strong>
http://www.w3.org/2005/Atom=<strong>atom</strong>
</pre>
<p>
    Defined namespace prefixes can be used in data profile row and column selectors.
</p>
~' );
    --
    l_property_id := 1340;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_CSV_SEPARATOR',
        p_prompt             => 'CSV Separator',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'CSV_SEPARATOR',
        p_display_length     => 1,
        p_max_length         => 1,
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>
Enter a column separator. If not specified, &PRODUCT_NAME. will automatically detect one of the following characters, based on the occurrence count in the first line.
</p>
<ul>
<li>;</li>
<li>,</li>
<li>|</li>
<li>#</li>
<li>[tab]</li>
</ul>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => ';',
        p_return_value  => ';' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => ',',
        p_return_value  => ',' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '|',
        p_return_value  => '|' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '#',
        p_return_value  => '#' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '[tab]',
        p_return_value  => chr(9) );
    --
    l_property_id := 1341;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_CSV_ENCLOSED_BY',
        p_prompt             => 'CSV Enclosed By',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'CSV_ENCLOSED',
        p_display_length     => 1,
        p_max_length         => 1,
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Enter a delimiter character to delineate the starting and ending boundary of a data value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '"',
        p_return_value  => '"' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '''',
        p_return_value  => '''' );
    --
    l_property_id := 1342;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_XLSX_SHEET_NAME',
        p_prompt             => 'Default XLSX Sheet Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'DEFAULT_XLSX_SHEET_NAME',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Enter the name of the XLSX worksheet to parse by default. If not defined, data loading will use the first worksheet found.~' );
    --
    l_property_id := 1343;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_SKIP_ROWS',
        p_prompt             => 'Skip Rows',
        p_property_type      => 'NUMBER',
        p_db_column          => 'SKIP_ROWS',
        p_display_length     => 5,
        p_max_length         => 5,
        p_min_value          => 1,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Enter how many rows to skip from the beginning of the file, before data parsing starts.</p> ~' );
    --
    l_property_id := 1344;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_HAS_HEADER_ROW',
        p_prompt             => 'First Line Contains Headers',
        p_property_type      => 'YES NO',
        p_db_column          => 'HAS_HEADER_ROW',
/* $$$ todo
        p_validation_plsql_ret_error => q'~
-- First Line Contains Headers cannot be disabled as there are columns based on Name selector type.
select 1
  from wwv_flow_data_profile_cols
 where flow_id = :FB_FLOW_ID
   and security_group_id = :FLOW_SECURITY_GROUP_ID
   and data_profile_id = :P1925_DATA_PROFILE_ID
   and :P1925_FORMAT in ( 'CSV', 'XLSX' )
   and column_type = 'DATA'
   and selector_type = 'NAME'
~',
*/
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Enable this option for CSV or XLSX data profiles, if the data contains column names in the first row.~' );
    --
    l_property_id := 1345;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PROMPT_SUBSTITUTION',
        p_prompt             => 'Prompt Substitution',
        p_property_type      => 'YES NO',
        p_db_column          => 'PROMPT_SUBSTITUTION_YN',
        p_display_group_name => 'INSTALLATION',
        p_help_text          => q'~Determines whether this application substitution should be prompted during installation.~' );
    --
    l_property_id := 1346;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_COLUMN_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'COLUMN_TYPE',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify the column type.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Table Column',
        p_return_value  => 'TABLE',
        p_help_text     => q'~Value comes from a plain relational table column. The <strong>Selector</strong> denotes the table column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Data',
        p_return_value  => 'DATA',
        p_help_text     => q'~Value is directly extracted from the source data (uploaded data or REST Source response). A <strong>Data</strong> column always requires the <strong>Selector</strong> attribute to be set.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Lookup',
        p_return_value  => 'LOOKUP',
        p_help_text     => q'~Used to "look up" a value from a table, based on (another) <strong>Data</strong> column. For instance, a lookup can be defined to return the <strong>DEPTNO</strong> value from the <strong>DEPT</strong> table, based on the value of the <strong>DNAME</strong> Data Column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Expression',
        p_return_value  => 'SQL_EXPRESSION',
        p_help_text     => q'~Compute a value based on other <strong>Data Columns</strong> using a SQL Expresssion.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return single value)',
        p_return_value  => 'SQL_QUERY',
        p_help_text     => q'~Execute a SQL query, which references other <strong>Data Columns</strong> in order to retrieve a value.~' );
    --
    l_property_id := 1347;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_SELECTOR_TYPE',
        p_prompt             => 'Selector Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SELECTOR_TYPE',
        p_display_group_name => 'PARSING',
        p_lov_type           => 'STATIC',
/* $$$ todo
        p_validation_plsql_ret_error => q'~
select 1
from wwv_flow_data_profiles
where flow_id = :FB_FLOW_ID
and security_group_id = :FLOW_SECURITY_GROUP_ID
and id = :P1926_DATA_PROFILE_ID
and :P1926_FORMAT in ( 'CSV', 'XLSX' )
and has_header_row = 'N'
~,
*/
        p_help_text          => q'~Specify the type of selector that is used to extract data.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Name',
        p_return_value  => 'NAME',
        p_help_text     => q'~References the column by name. This option requires the CSV or XLSX data to contain column names in the first row.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Sequence',
        p_return_value  => 'SEQ',
        p_help_text     => q'~Has a performance advantage, since &PRODUCT_NAME. does not need to determine column names and positions before loading the data. However use this option only if the uploaded data always has the same columns in the same sequence.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Regular Expression',
        p_return_value  => 'REGEXP',
        p_help_text     => q'~Is useful if the column names in uploaded data are likely to change. This option requires the CSV or XLSX data to contain column names in the first row.~' );
    --
    l_property_id := 1348;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_COLUMN_SELECTOR',
        p_prompt             => 'Selector',
        p_property_type      => 'TEXT',
        p_db_column          => 'SELECTOR',
        p_display_length     => 75,
        p_max_length         => 255,
        p_display_group_name => 'PARSING',
        p_examples           => q'~
<dl>
<dt>CSV Example</dt>
<dd><pre>
EMPNO   ENAME   SAL
------- ------- --------
   7839 KING        5000
   7844 FORD        2850
      : :              :
</pre>
<p>
If <strong>Name</strong> is used as the Selector Type, use the column names from the first line of CSV or XLSX data: <strong>EMPNO</strong>, <strong>ENAME</strong> or <strong>SAL</strong>.
</p>
</dd>
</dl>~',
        p_help_text          => q'~
The selector is being used to extract the column value from the source data. For <strong>CSV</strong> or <strong>XLSX</strong>, use the column name sequence,
based on the <strong>Selector Type</strong> attribute.~' );
    --
    l_property_id := 1349;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_COLUMN_SELECTOR_NO',
        p_prompt             => 'Column Number',
        p_property_type      => 'INTEGER',
        p_db_column          => 'SELECTOR',
        p_min_value          => 1,
        p_max_value          => 300,
        p_display_group_name => 'PARSING',
        p_help_text          => q'~Use <strong>1</strong>, <strong>2</strong> or <strong>3</strong>, to reference the column by its sequence number. The same semantics applies for XLSX data profiles.~' );
    --
    l_property_id := 1350;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_COLUMN_DATA_TYPE',
        p_prompt             => 'Data Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DATA_TYPE',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Data type of the column which is exposed to APEX components.</p>
<p>Notes:</p>
<ul>
<li>The <strong>JSON Document</strong> type is <em>only</em> avalable for JSON data profiles.</li>
<li>For XLSX and CSV data profiles, the contents of <strong>Clob</strong> columns are limited to 32,767 bytes.</li>
</ul>
~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'VARCHAR2',
        p_return_value  => 'VARCHAR2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'NUMBER',
        p_return_value  => 'NUMBER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DATE',
        p_return_value  => 'DATE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'TIMESTAMP',
        p_return_value  => 'TIMESTAMP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'TIMESTAMP WITH LOCAL TIME ZONE',
        p_return_value  => 'TIMESTAMP WITH LOCAL TIME ZONE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'TIMESTAMP WITH TIME ZONE',
        p_return_value  => 'TIMESTAMP WITH TIME ZONE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CLOB',
        p_return_value  => 'CLOB' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'BLOB',
        p_return_value  => 'BLOB' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Geometry (SDO_GEOMETRY)',
        p_return_value  => 'SDO_GEOMETRY' ); -- $$$ todo wwv_flow_db_version.c_has_locator
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JSON Document',
        p_return_value  => 'DOCUMENT_FRAGMENT' );
    --
    l_property_id := 1351;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAX_LENGTH',
        p_prompt             => 'Maximum Length',
        p_property_type      => 'INTEGER',
        p_db_column          => 'MAX_LENGTH',
        p_display_length     => 5,
        p_max_length         => 5,
        p_min_value          => '1',
        p_max_value          => '32767',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Maximum length attribute for VARCHAR2 columns.~' );
    --
    l_property_id := 1352;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARSING_FORMAT_MASK',
        p_prompt             => 'Format Mask',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'FORMAT_MASK',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'PARSING',
        p_lov_type           => 'ALL_FORMAT_MASKS',
        p_help_text          => q'~Format mask to be used for NUMBER, DATE and TIMESTAMP columns.~' );
    --
    l_property_id := 1353;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HAS_TIME_ZONE',
        p_prompt             => 'Has Time Zone',
        p_property_type      => 'YES NO',
        p_db_column          => 'HAS_TIME_ZONE',
        p_display_group_name => 'PARSING',
        p_examples           => q'~
<dl>
<dt>Does contain time zone information</dt>
<dd><pre>
2019-01-01T20:00:00Z
2019-01-01T20:00:00 Europe/Berlin
</pre></dd>
<dt>Does not contain time zone information</dt>
<dd><pre>
2019-01-01T20:00:00
</pre></dd>
</dl>~',
        p_help_text          => q'~Indicates whether the DATE or TIMESTAMP value in the <em>source data (REST Source response or uploaded data)</em> contains timestamp information. If enabled, &PRODUCT_NAME. respects the time zone and converts the value to the local application time zone. If not, the value is taken as-is.~' );
    --
    l_property_id := 1354;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOOKUP_OWNER',
        p_prompt             => 'Table Owner',
        p_property_type      => 'OWNER',
        p_db_column          => 'LOOKUP_OWNER',
        p_display_group_name => 'LOOKUP',
        p_help_text          => q'~Select the schema that owns the lookup table.~' );
    --
    l_property_id := 1355;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOOKUP_TABLE',
        p_prompt             => 'Table Name',
        p_property_type      => 'TABLE',
        p_db_column          => 'LOOKUP_TABLE',
        p_display_length     => 60,
        p_max_length         => 128,
        p_display_group_name => 'LOOKUP',
        p_examples           => c_data_profile_lookup_example,
        p_help_text          => q'~Enter the case-sensitive table or view name. You can type in the name or pick from the list.~' );
    --
    l_property_id := 1356;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOOKUP_RETURN_COLUMN',
        p_prompt             => 'Return Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2', -- includes all data types
        p_db_column          => 'LOOKUP_KEY_COLUMN',
        p_display_group_name => 'LOOKUP',
        p_examples           => c_data_profile_lookup_example,
        p_help_text          => q'~Select the column value to be returned and loaded to the target table. This value is typically the primary key value of the parent in a foreign key relationship.~' );
    --
    l_property_id := 1357;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOOKUP_WHERE_CLAUSE',
        p_prompt             => 'Where Clause',
        p_property_type      => 'WHERE CLAUSE',
        p_db_column          => 'LOOKUP_WHERE_CLAUSE',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'LOOKUP',
        p_examples           => q'~
<dl><dt>Only include those employees which have a manager or have a job of salesman.</dt>
<dd><pre>
( MGR is not null or JOB = 'SALESMAN' )
</pre></dd>
</dl>~',
        p_help_text          => q'~Additional WHERE clause to be applied to the lookup query.~' );
    --
    l_property_id := 1358;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOOKUP_TABLE_COLUMN1',
        p_prompt             => 'Table Column 1',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2', -- includes all data types
        p_db_column          => 'LOOKUP_COLUMN1',
        p_display_group_name => 'LOOKUP',
        p_examples           => c_data_profile_lookup_example,
        p_help_text          => q'~Select the first column name to be used to retrieve the return column from the lookup table.~' );
    --
    l_property_id := 1359;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOOKUP_DATA_COLUMN1',
        p_prompt             => 'Data Column 1',
        p_property_type      => 'TEXT', -- should be a SELECT list on DATA_PROFILE_COLS but return the NAME instead of ID
        p_db_column          => 'LOOKUP_VALUE1',
        p_display_group_name => 'LOOKUP',
        p_examples           => c_data_profile_lookup_example,
        p_help_text          => q'~Select the data profile column that matches the first lookup table column value.~' );
    --
    l_property_id := 1360;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOOKUP_TABLE_COLUMN2',
        p_prompt             => 'Table Column 2',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2', -- includes all data types
        p_db_column          => 'LOOKUP_COLUMN2',
        p_display_group_name => 'LOOKUP',
        p_examples           => c_data_profile_lookup_example,
        p_help_text          => q'~Select the second column name to be used to retrieve the return column from the lookup table.~' );
    --
    l_property_id := 1361;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOOKUP_DATA_COLUMN2',
        p_prompt             => 'Data Column 2',
        p_property_type      => 'TEXT', -- should be a SELECT list on DATA_PROFILE_COLS but return the NAME instead of ID
        p_db_column          => 'LOOKUP_VALUE2',
        p_display_group_name => 'LOOKUP',
        p_examples           => c_data_profile_lookup_example,
        p_help_text          => q'~Select the data profile column that matches the second lookup table column value.~' );
    --
    l_property_id := 1362;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOOKUP_TABLE_COLUMN3',
        p_prompt             => 'Table Column 3',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2', -- includes all data types
        p_db_column          => 'LOOKUP_COLUMN3',
        p_display_group_name => 'LOOKUP',
        p_examples           => c_data_profile_lookup_example,
        p_help_text          => q'~Select the third column name to be used to retrieve the return column from the lookup table.~' );
    --
    l_property_id := 1363;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOOKUP_DATA_COLUMN3',
        p_prompt             => 'Data Column 3',
        p_property_type      => 'TEXT', -- should be a SELECT list on DATA_PROFILE_COLS but return the NAME instead of ID
        p_db_column          => 'LOOKUP_VALUE3',
        p_display_group_name => 'LOOKUP',
        p_examples           => c_data_profile_lookup_example,
        p_help_text          => q'~Select the data profile column that matches the third lookup table column value.~' );
    --
    l_property_id := 1370;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TRANSFORMATION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TRANSFORM_TYPE',
        p_display_group_name => 'TRANSFORMATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a simple transformation rule to change the uploaded value. For example, if the source data contains column data in mixed case format, the <strong>To Lower Case</strong> or <strong>To Upper Case</strong> allow to convert the data to the desired case.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left Trim',
        p_return_value  => 'LTRIM',
        p_help_text     => '~Trim characters specified from the <strong>left</strong> side of the uploaded data value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right Trim',
        p_return_value  => 'RTRIM',
        p_help_text     => '~Trim characters specified from the <strong>right</strong> side of the uploaded data value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Trim',
        p_return_value  => 'TRIM',
        p_help_text     => '~Trim characters specified from <strong>both</strong> sides of the uploaded data value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Replace',
        p_return_value  => 'REPLACE',
        p_help_text     => '~Simple replacement of all occurrences of the specified value with <strong>Replace With</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'To Lower Case',
        p_return_value  => 'LOWER',
        p_help_text     => '~Convert the value to lower case.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'To Upper Case',
        p_return_value  => 'UPPER',
        p_help_text     => '~Convert the value to upper case.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Null If',
        p_return_value  => 'NULLIF',
        p_help_text     => '~If the uploaded value equals the string specified in <strong>Value</strong>, the value will be uploaded as NULL.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Regular Expression Replace',
        p_return_value  => 'REGEXP_REPLACE',
        p_help_text     => '~Apply the regular expression specified, and replace all matches with <strong>Replace With</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Regular Expression Null If',
        p_return_value  => 'REGEXP_NULLIF',
        p_help_text     => '~If the regular expression specified matches, the value will be uploaded as NULL.~' );
    --
    l_property_id := 1371;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TRANSFORMATION_TRIM_CHARS',
        p_prompt             => 'Trim Characters',
        p_property_type      => 'TEXT',
        p_db_column          => 'EXPRESSION1',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'TRANSFORMATION',
        p_help_text          => q'~Specify the characters that should be trimmed from the uploaded data value.~' );
    --
    l_property_id := 1372;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TRANSFORMATION_FIND',
        p_prompt             => 'Find',
        p_property_type      => 'TEXT',
        p_db_column          => 'EXPRESSION1',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'TRANSFORMATION',
        p_help_text          => q'~Specify the string that should be found in the uploaded data value.~' );
    --
    l_property_id := 1373;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TRANSFORMATION_REGEXP',
        p_prompt             => 'Regular Expression',
        p_property_type      => 'TEXT',
        p_db_column          => 'EXPRESSION1',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'TRANSFORMATION',
        p_help_text          => q'~Specify the regular expression that should be matched in the uploaded data value.~' );
    --
    l_property_id := 1374;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TRANSFORMATION_REPLACE_WITH',
        p_prompt             => 'Replace With',
        p_property_type      => 'TEXT',
        p_db_column          => 'EXPRESSION2',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'TRANSFORMATION',
        p_help_text          => q'~Specify the string that should replace the uploaded data value.~' );
    --
    l_property_id := 1375;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TRANSFORMATION_NULLIF',
        p_prompt             => 'Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'EXPRESSION1',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'TRANSFORMATION',
        p_help_text          => q'~If the uploaded value equals the string specified, the value will be uploaded as NULL.~' );
    --
    l_property_id := 1376;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REMOTE_ATTRIBUTE_NAME',
        p_prompt             => 'Attribute Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'REMOTE_ATTRIBUTE_NAME',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'REMOTE_REST',
        p_help_text          => q'~
When the column name is sent to the REST Data Source server for order by, filter or DML requests, &PRODUCT_NAME.
uses the <strong>Selector</strong> as the attribute name. This attribute allows to configure an alternative name for
the case that Selector and Attribute names are different. If unsure, leave this value blank.~' );
    --
    l_property_id := 1377;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REMOTE_DATA_TYPE',
        p_prompt             => 'Data Type',
        p_property_type      => 'TEXT',
        p_db_column          => 'REMOTE_DATA_TYPE',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'REMOTE_REST',
        p_help_text          => q'~
If specified, this data type is used by REST Source Plug-In implementations, when doing server-side filtering
or ordering. This is useful if the column's actual data type, at the REST site, is not available in &PRODUCT_NAME.,
for instance <strong>Boolean</strong> data types.~' );
    --
    l_property_id := 471;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ADDITIONAL_INFO',
        p_prompt             => 'Additional Information',
        p_property_type      => 'TEXT',
        p_db_column          => 'ADDITIONAL_INFO',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'REMOTE_REST',
        p_help_text          => q'~
If specified, this additional column information is used by REST Source Plug-In implementations to influence how they
interact with the REST endpoint.~' );
    --
    l_property_id := 1378;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_DECIMAL_CHARACTER',
        p_prompt             => 'Decimal Character',
        p_property_type      => 'TEXT',
        p_db_column          => 'DECIMAL_CHAR',
        p_display_length     => 1,
        p_max_length         => 1,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~<p>
Enter the decimal character to be used for parsing numeric data types. This value overrides the <strong>Numeric Characters</strong> attribute specified at the data profile level.
</p>
<p>
If nothing is specified, "." will be used for XML and JSON data profiles, and the current session NLS settings will be used for CSV and XLSX data profiles.
</p>~' );
    --
    l_property_id := 1379;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_GROUP_CHARACTER',
        p_prompt             => 'Group Character',
        p_property_type      => 'TEXT',
        p_db_column          => 'GROUP_CHAR',
        p_display_length     => 1,
        p_max_length         => 1,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~<p>
Enter the group character to be used for parsing numeric data types. This value overrides the <strong>Numeric Characters</strong> attribute specified at the data profile level.
</p>
<p>
If nothing is specified, no value will be used for XML and JSON data profiles, and the current session NLS settings will be used for CSV and XLSX data profiles.
</p>~' );
    l_property_id := 1380;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REMOTE_IS_FILTERABLE',
        p_prompt             => 'Filterable',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_FILTERABLE',
        p_display_group_name => 'REMOTE_REST',
        p_help_text          => q'~Determines whether this column can be filtered on the REST Data Source server. ~' );
    --
    l_property_id := 1381;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_HIDDEN',
        p_prompt             => 'Hidden',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_HIDDEN',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Specify whether this is a hidden column or not. Hidden columns will not be displayed in Page Designer and can therefore not be chosen for &PRODUCT_NAME. components. However, if a hidden column is being referenced by a component, it will work as expected.~' );
    --
    l_property_id := 1382;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_COLUMN_PATH',
        p_prompt             => 'Path Expression',
        p_property_type      => 'TEXT',
        p_db_column          => 'SELECTOR',
        p_display_length     => 75,
        p_max_length         => 255,
        p_display_group_name => 'PARSING',
        p_examples           => q'~
<dl>
<dt>JSON Example</dt>
<dd><pre>
{ "items": [
    { "ename": "SMITH", "sal": 200 },
    { "ename": "SCOTT", "sal": 100 } ] }
</pre>
<p>
<strong>items</strong> is used as the <strong>Row Selector</strong> attribute, so choose <strong>ename</strong> as the path expression for the ENAME column and
<strong>sal</strong> as the path expression for the SAL column. Note that the path expression must not reference a JSON array.
</p>
</dd>
</dl>~',
        p_help_text          => q'~
The path expression is being used to extract the column value from the source data. For <strong>XML</strong> and <strong>JSON</strong> formats,
this path expression is <em>relative</em> to the <strong>Row Selector</strong> which is configured at the data profile level.
Use XPath-Syntax for XML, and JSON path expressions for JSON formats.~' );
    --
    l_property_id := 1383;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_FORMAT_HIDDEN',
        p_prompt             => 'Data Profile Format',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'DATA_PROFILE_FORMAT',
        p_is_query_only      => true,
        p_display_group_name => 'IDENTIFICATION' );
    --
    l_property_id := 1384;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ADVANCED_SEQUENCE',
        p_prompt             => 'Sequence',
        p_property_type      => 'INTEGER',
        p_db_column          => 'SEQUENCE',
        p_display_length     => 6,
        p_min_value          => 1,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Sequence number to determine the order of columns.~' );
    --
    l_property_id := 1385;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TARGET_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TARGET_TYPE',
        p_display_group_name => 'TARGET',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select whether data is to be loaded into a table or an &PRODUCT_NAME. collection.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Table',
        p_return_value  => 'TABLE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Collection',
        p_return_value  => 'COLLECTION' );
    --
    l_property_id := 1386;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TARGET_OWNER',
        p_prompt             => 'Table Owner',
        p_property_type      => 'OWNER',
        p_db_column          => 'OWNER',
        p_display_group_name => 'TARGET',
        p_help_text          => q'~Select the schema that owns the target table.~' );
    --
    l_property_id := 1387;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TARGET_TABLE',
        p_prompt             => 'Table Name',
        p_property_type      => 'TABLE',
        p_db_column          => 'TABLE_NAME',
        p_display_length     => 60,
        p_max_length         => 128,
        p_display_group_name => 'TARGET',
        p_help_text          => q'~Enter the case-sensitive table or view name. You can type in the name or pick from the list.~' );
    --
    l_property_id := 1388;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TARGET_COLLECTION',
        p_prompt             => 'Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'COLLECTION_NAME',
        p_display_length     => 80,
        p_max_length         => 255,
        p_text_case          => 'UPPER',
        p_display_group_name => 'TARGET',
        p_help_text          => q'~Enter the &PRODUCT_NAME. collection name to temporarily store the data for the session.~' );
    --
    l_property_id := 1389;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOADING_METHOD_TABLE',
        p_prompt             => 'Loading Method',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOADING_METHOD',
        p_display_group_name => 'TARGET',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify the loading method to use.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Append',
        p_return_value  => 'APPEND',
        p_help_text     => q'~
Append rows to the table or collection. If one or more primary key columns are defined in the <em>Data Profile</em>,
existing rows will not be changed, and new rows will be appended. If the data profile has no primary key definition,
all rows will be simply appended.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Merge',
        p_return_value  => 'MERGE',
        p_help_text     => q'~
Merge rows into the table. The data profile must have a <em>Primary Key</em> defined to use this option. If a row for
the given primary key value exists, the row will be updated, otherwise the row will be created. This is only available
for loading data into tables.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Replace',
        p_return_value  => 'REPLACE',
        p_help_text     => q'~Existing data in the target table or collection will be removed before new data is loaded.~' );
    --
    l_property_id := 1390;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOADING_METHOD_COLLECTION',
        p_prompt             => 'Loading Method',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOADING_METHOD',
        p_display_group_name => 'TARGET',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify the loading method to use.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Append',
        p_return_value  => 'APPEND',
        p_help_text     => q'~
Append rows to the table or collection. If one or more primary key columns are defined in the <em>Data Profile</em>,
existing rows will not be changed, and new rows will be appended. If the data profile has no primary key definition,
all rows will be simply appended.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Replace',
        p_return_value  => 'REPLACE',
        p_help_text     => q'~Existing data in the target table or collection will be removed before new data is loaded.~' );
    --
    l_property_id := 1391;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ERROR_HANDLING_TYPE',
        p_prompt             => 'When on Error',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ERROR_HANDLING',
        p_display_group_name => 'ERROR_HANDLING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<Specify how to handle errors during data load.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Ignore',
        p_return_value  => 'IGNORE',
        p_help_text     => q'~The error rows are silently ignored, and Data Loading simply continues.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Stop',
        p_return_value  => 'ABORT',
        p_help_text     => q'~The data loading stops on the first error and raises an error message.~' );

    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Log Error into Collection',
        p_return_value  => 'LOG_ROWS',
        p_help_text     => q'~Error rows are logged into an &PRODUCT_NAME. collection.~' );

    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Log into Error Log',
        p_return_value  => 'ERROR_LOG', -- $$$ todo only available for TARGET_TYPE = TABLE
        p_help_text     => q'~
Error rows are logged into a DML error logging table using the <strong>DML Error Logging</strong> database functionality.
This is only available when loading into a table, and only if the <strong>Append</strong> method is used <em>without</em>
a primary key.~' );
    --
    l_property_id := 1392;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ERROR_COLLECTION',
        p_prompt             => 'Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'ERROR_COLLECTION_NAME',
        p_display_length     => 80,
        p_max_length         => 255,
        p_text_case          => 'UPPER',
        p_display_group_name => 'ERROR_HANDLING',
        p_help_text          => q'~<p>
Enter the &PRODUCT_NAME. collection name. When an error occurs during data loading, &PRODUCT_NAME. will store the error message and the row sequence (within the uploaded file) as the <strong>C001</strong> and <strong>N001</strong> collection members.
</p>
<p>
Use the APEX_COLLECTIONS view to retrieve and process this information within the APEX application.
</p>~' );
    --
    l_property_id := 1393;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'ERROR_LOGGING_TABLE',
        p_prompt                   => 'Table Name',
        p_property_type            => 'TABLE',
        p_db_column                => 'ERROR_COLLECTION_NAME',
        p_display_length           => 60,
        p_max_length               => 128,
        p_display_group_name       => 'ERROR_HANDLING',
        p_help_text                => q'~<p>
Select the name of the <em>DML Error Logging Table</em>, which has been created for the selected target table before.
Use <strong>DBMS_ERRLOG.CREATE_ERROR_LOG</strong> to create the error logging table.
</p>
<p>Example:</p>
<pre>
begin
    dbms_errlog.create_error_log(
        dml_table_name => '<em>{target table}</em>' );
end;
</pre>~' );
    --
    l_property_id := 1394;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMMIT_INTERVAL',
        p_prompt             => 'Commit Interval',
        p_property_type      => 'INTEGER',
        p_db_column          => 'COMMIT_INTERVAL',
        p_min_value          => 1,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Specify the commit interval to use during data load. If no commit interval is specified, the whole data load will be in one transaction, with a commit after the last row. If an interval is specified, &PRODUCT_NAME. will commit each time after the specified amount of rows have been processed.~' );
    --
    l_property_id := 1395;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REST_DATA_SOURCE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SUPPORTED UI',
        p_db_column          => 'WEB_SOURCE_TYPE',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'PLUGINS',
        p_help_text          => q'~<p>Determines the REST Data Source type. The following types are supported:</p>
#NATIVE_PLUGINS#
<p>Depending on your application configuration, you may also have additional REST Data Source type plug-ins available here.
These display as <em>&lt;My Plug-in&gt; [Plug-in]</em>.
The following plug-ins are installed within this application's shared components:</p>
#CUSTOM_PLUGINS#~' );
    --
    l_property_id := 1396;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SOURCE_REMOTE_REST_SERVER',
        p_prompt                => 'Remote Server',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'REMOTE_SERVER_ID',
        p_display_group_name    => 'SOURCE',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_rest_server,
        p_help_text             => q'~
<p>
    Choose a <strong>Remote Server</strong> object for this REST Data Source. &PRODUCT_NAME. splits the URL endpoint into the first (Remote Server) and the second (service-specific) part. One <strong>Remote Server</strong> object can contain multiple
    Service endpoints. It's recommended to assign the same remote server object to REST Data Sources, when they share the
    same server, port and URL path prefixes.
</p>
<div>
    <p>Example:</p>
    <p>
        REST Data Sources:
        <ol>
            <li><code><strong>http://api.example.com:8080/root/</strong>service1/method1</code></li>
            <li><code><strong>http://api.example.com:8080/root/</strong>service2/method1</code></li>
            <li><code><strong>http://api.example.com:8080/root/</strong>service2/method4</code></li>
        </ol>
    </p>
    <p>
        The <strong>http://api.example.com:8080/root/</strong> URL part is common to all three REST Data Sources,
        so that can be used as the Remote Server object and given a name. If, at a later point in time, those three REST Data Sources should be moved to another server, one only has to change the Remote Server object.
    </p>
</div>~' );
    --
    l_property_id := 1397;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'URL_PATH_PREFIX',
        p_prompt             => 'URL Path Prefix',
        p_property_type      => 'TEXT',
        p_db_column          => 'URL_PATH_PREFIX',
        p_display_length     => 65,
        p_max_length         => 500,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~
<p>
    The URL Path Prefix is specific to this REST Data Source. The URL Endpoints of all operations within the REST Data Source share the same URL Path Prefix. When the REST Data Source is invoked, &PRODUCT_NAME. builds the URL as follows:
</p>
<ol>
    <li><strong>Base URL</strong> of the <strong>Remote Server</strong> object</li>
    <li><strong>URL Path Prefix</strong> of the <strong>REST Data Source</strong></li>
    <li><strong>URL Pattern</strong> defined in the REST Data Sources <strong>Operation</strong></li>
</ol>
<div>
    <p>Example:</p>
    <p>
        REST Data Sources:
        <ol>
            <li><code>http://api.example.com:8080/root/<strong>service1/</strong>method1</code></li>
            <li><code>http://api.example.com:8080/root/<strong>service2/</strong>method1</code></li>
            <li><code>http://api.example.com:8080/root/<strong>service2/</strong>method4</code></li>
        </ol>
    </p>
    <p>
        The <strong>service1/</strong> or <strong>service2/</strong> URL parts are common to one REST Data Source, so these will be used as the <strong>URL Path Prefix</strong>.
    </p>
</div>~' );
    --
    l_property_id := 1398;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'AUTHENTICATION_SERVER',
        p_prompt                => 'Authentication Server',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'AUTH_REMOTE_SERVER_ID',
        p_display_group_name    => 'AUTHENTICATION',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_auth_server,
        p_help_text             => q'~
<p>
    If authentication has to be done on a (different) <em>Authentication Server</em>, create a <strong>Remote Server</strong> object for this and choose it here. &PRODUCT_NAME. splits the URL endpoint into the first (Remote Server) and the second (service-specific) part. One <strong>Remote Server</strong> object can contain multiple
    Service endpoints. It's recommended to assign the same remote server object to REST Data Sources, when they share the
    same server, port and URL path prefixes.
</p>
<div>
    <p>
    Example:
    </p>
    <ol>
        <li><code><strong>http://api.example.com:8080/root/</strong>auth/token</code></li>
        <li><code><strong>http://api.example.com:8080/root/</strong>auth-prod/token</code></li>
    </ol>
    <p>
        The <strong>http://api.example.com:8080/root/</strong> URL part is common to both of the authentication endpoints,
        so that can be used as the named Remote Server object.
    </p>
</div>~' );
    --
    l_property_id := 1399;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AUTH_URL_PATH_PREFIX',
        p_prompt             => 'URL Path Prefix',
        p_property_type      => 'TEXT',
        p_db_column          => 'AUTH_URL_PATH_PREFIX',
        p_display_length     => 65,
        p_max_length         => 500,
        p_display_group_name => 'AUTHENTICATION',
        p_help_text          => q'~<p>
    If authentication has to be done on a (different) <em>Authentication Server</em>, create a <strong>Remote Server</strong> object for this and choose it here. &PRODUCT_NAME. splits the URL endpoint into the first (Remote Server) and the second (service-specific) part. One <strong>Remote Server</strong> object can contain multiple
    Service endpoints. It's recommended to assign the same remote server object to REST Data Sources, when they share the
    same server, port and URL path prefixes.
</p>
<div>
    <p>
    Example:
    </p>
    <ol>
        <li><code>http://api.example.com:8080/root/<strong>auth/token</strong></code></li>
        <li><code>http://api.example.com:8080/root/<strong>auth-prod/token</strong></code></li>
    </ol>
    <p>
        The <strong>auth/token</strong> and <strong>auth-prod/token</strong> URL parts are specific to the individual autentication service and should the used as the <strong>URL Path Prefix</strong>.
    </p>
</div>~' );
    --
    l_property_id := 1400;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PASS_ECID',
        p_prompt             => 'Pass ECID',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PASS_ECID',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Indicates whether to pass the Execution Context ID (ECID) to the external web services for end-to-end tracing.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Yes',
        p_return_value  => 'Y',
        p_help_text     => q'~Pass the Execution Context ID (ECID) to the external web services.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No',
        p_return_value  => 'N',
        p_help_text     => q'~Do not pass the Execution Context ID (ECID) to the external web services.~' );
    --
    l_property_id := 1401;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HTTP_TRANSFER_TIMEOUT',
        p_prompt             => 'HTTP Transfer Timeout',
        p_property_type      => 'INTEGER',
        p_db_column          => 'MAX_REQUESTS_TIMEFRAME_SEC',
        p_display_length     => 4,
        p_max_length         => null,
        p_min_value          => 1,
        p_max_value          => 3600,
        p_unit               => c_unit_seconds,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Specify the transfer timeout for all future HTTP requests that are attempted while reading the HTTP response from the Web server or proxy server.</p><p>This timeout value can be used to avoid the application from being blocked by busy Web servers or heavy network traffic while retrieving responses. See the documentation for <strong>UTL_HTTP.SET_TRANSFER_TIMEOUT</strong>.</p>~' );
    --
    l_property_id := 1402;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FC_ACTIONS_FILTER',
        p_prompt             => 'Filter',
        p_property_type      => 'YES NO',
        p_db_column          => 'FC_ACTIONS_FILTER',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~<p>Specify whether the action Filter is displayed on the facet context menu to allow the user to toggle the client-side filtering On and Off, the user setting will be saved in session storage. The action will be disabled if the number of facet values is less than the value of Maximum Displayed Entries.</p>~' );
    --
    l_property_id := 1403;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SYNC_JOB_IS_ACTIVE',
        p_prompt             => 'Job is Active',
        p_property_type      => 'YES NO',
        p_db_column          => 'SYNC_IS_ACTIVE',
        p_display_group_name => 'SYNCHRONIZATION',
        p_help_text          => q'~<p>
    An inactive Synchronization can only be manually executed.
</p>
<p>
    Note that the synchronization job cannot be enabled for subscribed REST Data Sources, when the job is already active for the master REST Data Source. If the synchronization job is being enabled for a master REST Data source, it will be <em>disabled</em> for all subscribed REST Data Sources.
</p>~' );
    --
    l_property_id := 1404;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SYNC_LOCAL_TABLE_OWNER',
        p_prompt             => 'Local Table Owner',
        p_property_type      => 'OWNER',
        p_db_column          => 'SYNC_TABLE_OWNER',
        p_display_group_name => 'SYNCHRONIZATION',
        p_help_text          => q'~Pick the schema of the local table to synchronize data to. By default, the application <em>Parsing Schema</em> is used.~' );
    --
    l_property_id := 1405;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SYNC_LOCAL_TABLE_NAME',
        p_prompt             => 'Local Table Name',
        p_property_type      => 'TABLE',
        p_db_column          => 'SYNC_TABLE_NAME',
        p_display_length     => 60,
        p_max_length         => 128,
        p_display_group_name => 'SYNCHRONIZATION',
        p_help_text          => q'~Provide the name of a new or existing table to synchronize data to.~' );
    --
    l_property_id := 1406;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SYNCHRONIZATION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SYNC_TYPE',
        p_display_length     => null,
        p_max_length         => null,
        p_display_group_name => 'SYNCHRONIZATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Pick the synchronization type to use.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Append',
        p_return_value  => 'APPEND',
        p_help_text     => q'~Append rows to the local table. This is typically used when no primary key has been defined in the data profile.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Merge',
        p_return_value  => 'MERGE',
        p_help_text     => q'~Merge rows into the local table. The data profile must have a <em>Primary Key</em>em> defined to use
this option. If a row for the given primary key value exists, the row will be updated, otherwise the row will be created.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Full Refresh - Delete',
        p_return_value  => 'REPLACE',
        p_help_text     => q'~Empty the local table before loading new data.
A transactional SQL DELETE statement is used, which will make sure that nothing is lost if an error happens during synchronization.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Full Refresh - Truncate',
        p_return_value  => 'TRUNCATE',
        p_help_text     => q'~Empty the local table before loading new data.
The SQL <em>TRUNCATE</em> statement is used, which leads to more efficient storage usage. However, TRUNCATE is
non-transactional - so if an error happens during synchronization, the table will remain empty.~' );
    --
    l_property_id := 1407;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SYNCHRONIZATION_SCHEDULE',
        p_prompt             => 'Schedule',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'SYNC_INTERVAL',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'SYNCHRONIZATION',
        p_help_text          => q'~<p>
    Use the <em>Database Scheduler calendaring syntax</em> to define repeating synchronization schedules, such as "every Tuesday and Friday at 4:00 p.m." or "the second Wednesday of every month".
</p>
<p>
    The calendaring syntax can either be entered manually, or declaratively by using the <strong>Interval Builder</strong>, to build simple expressions. Click the <em>wrench icon</em> below the Schedule Expression text area, to open the Interval Builder.
</p>
<p>
    To have more complex execution schedules, review details about the <strong>Scheduler Calendaring Syntax</strong> in the documentation of the <strong>DBMS_SCHEDULER</strong> PL/SQL package, and provide your expression manually.
</p>~' );
    --
    l_property_id := 1408;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SYNC_COMMIT_INTERVAL',
        p_prompt             => 'Commit Interval',
        p_property_type      => 'INTEGER',
        p_db_column          => 'SYNC_COMMIT_INTERVAL',
        p_min_value          => 100,
        p_display_group_name => 'SYNCHRONIZATION',
        p_help_text          => q'~Specify the commit interval to use during REST synchronization. If no commit interval is specified,
the whole synchronization will be one transaction, with a commit after the last row. If an interval is specified, APEX will
commit each time after the specified amount of rows have been processed.~' );
    --
    l_property_id := 1409;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SYNC_HTTP_REQUEST_LIMIT',
        p_prompt             => 'HTTP Request Limit',
        p_property_type      => 'INTEGER',
        p_db_column          => 'SYNC_MAX_HTTP_REQUESTS',
        p_min_value          => 1,
        p_display_group_name => 'SYNCHRONIZATION',
        p_help_text          => q'~<p>
    If required, provide a maximum number of HTTP requests to make for each synchronization step. If this limit is exceeded, synchronization will stop and logged as <strong>Incomplete</strong>.
</p>
<p>
    <em>Note that due to the actual execution method, synchronization will exceed this limit by one request. So if you provide a limit of <strong>10</strong>, synchronization will stop after the 11th request has been made.</em>
</p>~' );
    --
    l_property_id := 1410;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SYNC_RATE_LIMIT_TIMEFRAME',
        p_prompt             => 'Timeframe',
        p_property_type      => 'INTEGER',
        p_db_column          => 'MAX_REQUESTS_TIMEFRAME_SEC',
        p_min_value          => 5,
        p_unit               => c_unit_seconds,
        p_display_group_name => 'SYNCHRONIZATION_RATE_LIMIT',
        p_help_text          => q'~Provide the time frame, for which to count HTTP requests, in seconds. APEX allows to specify a time frame between 5 and 300 seconds (5 minutes).~' );
    --
    l_property_id := 1411;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SYNC_RATE_LIMIT_HTTP_REQUESTS',
        p_prompt             => 'HTTP Requests',
        p_property_type      => 'INTEGER',
        p_db_column          => 'MAX_REQUESTS',
        p_min_value          => 1,
        p_display_group_name => 'SYNCHRONIZATION_RATE_LIMIT',
        p_help_text          => q'~Provide the HTTP request limit for this synchronization within the specified time frame.~' );
    --
    l_property_id := 1412;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SYNC_WHEN_RATE_LIMIT_EXCEEDED',
        p_prompt             => 'When Exceeded',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'MAX_REQUESTS_EXCEED_ACTION',
        p_display_group_name => 'SYNCHRONIZATION_RATE_LIMIT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~
Specify what APEX should do if the specified maximum of HTTP requests within the time frame is reached.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Raise Error',
        p_return_value  => 'ERROR',
        p_help_text     => q'~APEX will <em>terminate</em> the operation and raise an error message.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Wait',
        p_return_value  => 'WAIT',
        p_help_text     => q'~
APEX will <em>wait</em> with the next request until the request fits into the limit again. Note that the waiting
time is limited to the <strong>HTTP Transfer Timeout</strong> time, or to <strong>180 seconds</strong>, if no timeout
has been configured.~' );
    --
    l_property_id := 1413;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'IDENTIFICATION_STATIC_ID',
        p_prompt                => 'Static ID',
        p_property_type         => 'TEXT',
        p_db_column             => 'STATIC_ID',
        p_display_length        => 60,
        p_max_length            => 255,
        p_display_group_name    => 'IDENTIFICATION',
        p_help_text             => q'~Enter a static ID to uniquely identify this component.~' );
    --
    l_property_id := 1415;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXECUTION_IS_ACTIVE',
        p_prompt             => 'Active',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_ACTIVE',
        p_display_group_name => 'EXECUTION',
        p_help_text          => q'~Whether this component will be executed or not.~' );
    l_property_id := 1416;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WEB_SRC_PARAM_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PARAM_TYPE',
        p_display_group_name => 'PARAMETER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>
    Choose whether this parameter is to be sent as <em>HTTP Request Header</em>, as part of the URL (<em>URL Pattern Variable</em>), the <em>Query String Variable</em> or as the <em>Request Body</em>. Query String parameters are appended to the URL <em>after</em> the question mark in a "name=value" pattern, whereas URL Pattern Variables are part of the URL <em>before</em> the question mark; the name will be simply replaced by the value.
</p>
<p>
    Example for Parameters of type <strong>URL Pattern</strong>
</p>
<ul>
    <li>URL Endpoint: <code>http://{server}:{port}/ords/:schema/emp/:deptno</code></li>
    <li>Parameter 1: <em>URL Pattern Variable</em> "deptno" with a value of "10"</li>
    <li>Parameter 2: <em>URL Pattern Variable</em> "schema" with a value of "scott"</li>
</ul>
<p>
<br>
    Do <em>not</em> add the colon (:) to the parameter name. &PRODUCT_NAME. will build the URL to invoke as follows:<br>
    <code>http://{server}:{port}/ords/<strong>scott</strong>/emp/<strong>10</strong></code>
</p>
<p>
    Example for Parameters of type <strong>Query String</strong>
</p>
<ul>
    <li>URL Endpoint: <code>http://{server}:{port}/ords/scott/emp</code></li>
    <li>Parameter 1: <em>Query String Variable</em> "query_filter" with a value of "KING"</li>
</ul>
<p>
<br>
    &PRODUCT_NAME. will build the URL to invoke as follows:<br>
    <code>http://{server}:{port}/ords/scott/emp?<strong>query_filter</strong>=<strong>KING</strong></code>
</p>
<p>
    Example for Parameters of type <strong>HTTP Header</strong>
</p>
<ul>
    <li>URL Endpoint: <code>http://{server}:{port}/ords/scott/emp/</code></li>
    <li>Parameter 1: "Accept" with a value of "application/json"</li>
    <li>Parameter 1: "X-Request-Hdr" with a value of "XY4711"</li>
</ul>
<p>
    <br>
    &PRODUCT_NAME. will send the following HTTP Request headers:<br>
    <code><strong>Accept=application/json<br>
          X-Request-Hdr=XY4711</strong></code>
</p>
~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTTP Header',
        p_return_value  => 'HEADER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTTP Cookie',
        p_return_value  => 'COOKIE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'URL Pattern',
        p_return_value  => 'URL_PATTERN' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'URL Query String',
        p_return_value  => 'QUERY_STRING' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Request or Response Body',
        p_return_value  => 'BODY' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Data Profile Column',
        p_return_value  => 'DATA_PROFILE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTTP Status Code',
        p_return_value  => 'STATUS_CODE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTTP Reason Phrase',
        p_return_value  => 'REASON_PHRASE' );
    --
    l_property_id := 1417;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USE_FOR_ROW_SEARCH',
        p_prompt             => 'Use for Row Search',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_QUERY_PARAM',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>
    If <strong>Use for Row Search</strong> is enabled for a REST Data Source parameter, <em>Row Search</em> queries (from Interactive Reports, Interactive Grids or Popup LOVs) will be passed to the Web Service using this parameter. This is useful if your REST service supports <em>search</em> or <em>query</em> parameters.
</p>
<p>Example:</p>
<p>
    A REST service endpoint is invoked using a query parameter "q", e.g. <code>http://{server}/path/to/service?p={search-term}</code>. The REST Data Source will have the <strong>q</strong> query string parameter defined. If the <strong>Use for Row Search</strong> is enabled, search terms from Interactive Report or Interactive Grid row searches will be passed to the REST service as the <strong>q</strong> parameter.
</p>
<p>Only Parameters defined at the REST Source level can be used for Row Search.</p>~' );
    --
    l_property_id := 1418;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OMIT_WHEN_NULL',
        p_prompt             => 'Omit when value is empty',
        p_property_type      => 'YES NO',
        p_db_column          => 'OMIT_WHEN_NULL',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>
    If set to <strong>On</strong>, &PRODUCT_NAME. will only add the parameter to the request, when the value is not empty. When set to <strong>Off</strong>, the parameter will always be added to the request. This only applies to parameters of the <em>Query String</em>, <em>Cookie</em> or <em>HTTP Header</em> type.
</p>
<p>
    Example for a parameter <strong>param2</strong> of type Query String with an empty value.
</p>
<ul>
    <li>Omit when value is empty set to <strong>Off</strong>:<br>
    http://api.example.com/url/path?param1=value1&amp;param2=</li>
    <li>Omit when value is empty set to <strong>On</strong>:<br>
    http://api.example.com/url/path?param1=value1</li>
</ul>~' );
    --
    l_property_id := 1419;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MULTIPLE_VALUES',
        p_prompt             => 'Multiple Values',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_ARRAY',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>
    Determine whether this query string parameter supports multiple values. If enabled, then the URL query string will contain one parameter for each element of the colon-separated value list.
</p>
<p>
    Example for parameter value <strong>A:B:C</strong>
</p>
<ul>
    <li>Multiple set to <strong>On</strong>:<br>http://api.example.com/url/path?param=A&amp;param=B&amp;param=C</li>
    <li>Multiple set to <strong>Off</strong>:<br>http://api.example.com/url/path?param=A:B:C</li>
</ul>~' );
    l_property_id := 1420;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'URL_PATTERN',
        p_prompt             => 'URL Pattern',
        p_property_type      => 'TEXT',
        p_db_column          => 'URL_PATTERN',
        p_display_length     => 60,
        p_max_length         => 500,
        p_display_group_name => 'OPERATION',
        p_help_text          => q'~<p>
    The <strong>URL Pattern</strong> is the last part of the Web Service endpoint URL. The combination of URL pattern and HTTP Operation (GET, POST, PUT, DELETE) identifies the operation within a REST Data Source. A REST Data Source may contain the same URL pattern for different HTTP operations and different URL patterns for the same HTTP operation.
    The URL pattern can also be empty, use a <em>dot</em> (.) to identify this case.
</p>
<p>
        When the REST Data Source is invoked, &PRODUCT_NAME. builds the URL as follows:
</p>
<p>
    The URL Pattern can also contain parameters. These are denoted by :param-name or {param-name}. In this case, the parameter must be added to the <strong>REST Source Parameters</strong>, either at the Module or at the Operation level.
</p>
<ol>
    <li><strong>Base URL</strong> of the <strong>Remote Server</strong> object</li>
    <li><strong>URL Path Prefix</strong> of the <strong>REST Data Source</strong></li>
    <li><strong>URL Pattern</strong> defined in the REST Data Source's <strong>Operation</strong></li>
</ol>
<p>
    <br>
    Example for URL Patterns:
</p>
<ul>
    <li><strong>GET</strong> for <code>http://api.example.com:8080/root/service1/<strong>method1</strong></code></li>
    <li><strong>PUT</strong> for <code>http://api.example.com:8080/root/service1/<strong>method1</strong></code></li>
    <li><strong>GET</strong> for <code>http://api.example.com:8080/root/service1/<strong>method2</strong></code></li>
</ul>
<p>
    <br>
    URL Patterns with Parameters:
</p>
<ul>
    <li>
        The URL pattern contains a parameter <strong>id</strong>:<br>
        <strong>GET</strong> for <code>http://api.example.com:8080/root/service1/<strong>:id</strong></code></li>
    <li>The URL pattern is empty:<br>
        <strong>GET</strong> for <code>http://api.example.com:8080/root/service1/<strong>.</strong></code></li>
</ul>~' );
    --
    l_property_id := 1421;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REQUEST_BODY_TEMPLATE',
        p_prompt             => 'Request Body Template',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'REQUEST_BODY_TEMPLATE',
        p_display_length     => 100,
        p_max_length         => 32760,
        p_display_group_name => 'OPERATION',
        p_help_text          => q'~<p>
    Enter the request body template to be used for HTTP POST, PUT, PATCH or DELETE requests. Within the template, you can use placeholders (<em>#placeholder-name#</em>)
</p>
<ul>
    <li>for REST Source Parameters of type <strong>Request / Response body</strong>. These will be executed for all operations.</li>
    <li>for Data Profile columns. These will be replaced when the Insert Row, Update Row or Delete Row database operations are executed.</li>
</ul>
<p>
    <br>
    Note that Automatic DML processes (form region on a REST service) will replace placeholders with <em>data-type aware, quoted and escaped</em> values. Custom PL/SQL Processes (when APEX_EXEC.EXECUTE_WEB_SOURCE is used) will replace placeholders with just <em>Escaped</em> string values. Thus, for usage with APEX_EXEC.EXECUTE_WEB_SOURCE, you have to enquote placeholders in the template. For usage with declarative forms, placeholders must not be enquoted.
</p>
<p>
    Example Request Body template: Simple JSON structure to pass an object. For the Insert Row, Update Row or Delete Row database operations, the placeholders will be replaced by Data Profile columns. The REST Data Source is to be used with a form region, so placeholders are not enquoted.
</p>
<pre>
{"empno": #EMPNO#, "ename": #ENAME#, "job": #JOB#, "sal": #SAL#, "comm": #COMM#, "hiredate": #HIREDATE#, "deptno": #DEPTNO#}
</pre>
<p>
    Example Request Body template: More complex JSON structure to pass an object. For the Insert Row, Update Row or Delete Row database operations, the placeholders will be replaced by Data Profile columns. The REST Data Source is to be used with for custom PL/SQL usage, so placeholders are enquoted. Additional placeholders can be used for <strong>REST Source Parameters</strong>. Make sure to define these as parameters of the <strong>Request / Response Body</strong> type at the Module or Operation level.
</p>
<pre>
{ "passed-by": "#USERID#",
  "client-id": "APEX-#APEX_INSTANCE#",
  "object": {
      "empno": #EMPNO#,
      "ename": "#ENAME#",
      "job": "#JOB#",
      "sal": #SAL#,
      "comm": #COMM#,
      "hiredate": "#HIREDATE#",
      "deptno": #DEPTNO# } }
</pre>
<p>
    Click the <strong><span class="a-Icon icon-refresh"></span> Generate</strong> button in order to generate a request body template from the <em>Data Profile</em> within the REST Data Source definition (the button only appears when the text area is empty).
</p>
~' );
    --
    l_property_id := 1422;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FIXED_PAGE_SIZE',
        p_prompt             => 'Fixed Page Size',
        p_property_type      => 'INTEGER',
        p_db_column          => 'LEGACY_ORDS_FIXED_PAGE_SIZE',
        p_min_value          => 1,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~
Enter the size of the REST service's pagination window. The pagination for a resource handler
HTTP operation GET method, equates to the number of rows to return on each page of a JSON format
result set based on a database query.</p>~' );
    --
    l_property_id := 1423;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_FETCHING_ALL_ROWS',
        p_prompt             => 'Allow Fetching All Rows',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_FETCH_ALL_ROWS',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>
    Specify whether &PRODUCT_NAME. components are allowed to fetch all rows, thus executing multiple HTTP requests, from this REST source operation.
</p>
<p>
   This applies for REST sources which return their data page-wise, like Oracle REST Data Services does. For instance, a chart or the Group By view of Interactive Reports need to access all rows to compute correct results. When the REST service return their data page-wise, this requires multiple HTTP requests to the REST service.
</p>
<p>
    If the REST source only returns a few pages, which can be fetched in a few seconds, this is acceptable for most use-cases. For these services, set this attribute to <strong>On</strong>. On the other hand, when the REST service returns thousands of rows in hundreds of pages, fetching all rows would take too much time to complete - for such services, set this attribute to <strong>Off</strong>.
</p>~' );
    --
    l_property_id := 1424;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FETCH_ALL_ROWS_TIMEOUT',
        p_prompt             => 'Fetch All Rows Timeout ',
        p_property_type      => 'INTEGER',
        p_db_column          => 'FETCH_ALL_ROWS_TIMEOUT',
        p_min_value          => 1,
        p_unit               => c_unit_seconds,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~
Specify the timeout value (in seconds) for a "fetch all rows" operation. Since multiple pages will be requested,
this timeout value should be higher than the single-request timeout value specified at the module level. Make sure to
set it high enough to allow executing multiple HTTP requests but low enough to prevent hanging pages for end users.~' );
    --
    l_property_id := 1425;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FORCE_RAISE_HTTP_404_ERROR',
        p_prompt             => 'Force Raise HTTP-404 Error',
        p_property_type      => 'YES NO',
        p_db_column          => 'FORCE_ERROR_FOR_HTTP_404',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~
If the HTTP request, executed by the <strong>Fetch Rows</strong> database operation, receives the
<strong>404</strong> HTTP status code ("Not Found"), APEX treats this as a "No Rows Found" situation - and does
thus not raise an error (an error is raised only when <em>Debug</em> is enabled). Enabling this switch
forces APEX to <em>always</em> signal HTTP-404 situations as errors.~' );
    --
    l_property_id := 1426;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AUTOMATION_TRIGGER_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TRIGGER_TYPE',
        p_display_group_name => 'EXECUTION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how the automation will get executed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'On Demand',
        p_return_value  => 'API',
        p_help_text     => q'~The automation will only be executed when called explicitly using the <strong>APEX_AUTOMATION</strong> package.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scheduled',
        p_return_value  => 'POLLING',
        p_help_text     => q'~The automation will be executed automatically based on the selected frequency.~' );
    --
    l_property_id := 1427;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SCHEDULE_EXPRESSION',
        p_prompt             => 'Schedule Expression',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'POLLING_INTERVAL',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'EXECUTION',
        p_help_text          => q'~<p>
    Use the <em>Database Scheduler calendaring syntax</em> to define repeating execution schedules, such as "every Tuesday and Friday at 4:00 p.m." or "the second Wednesday of every month".
</p>
<p>
    The calendaring syntax can either be entered manually, or declaratively by using the <strong>Interval Builder</strong>, to build simple expressions. Click the <em>wrench icon</em> below the Schedule Expression text area, to open the Interval Builder.
</p>
<p>
    To have more complex execution schedules, review details about the <strong>Scheduler Calendaring Syntax</strong> in the documentation of the <strong>DBMS_SCHEDULER</strong> PL/SQL package, and provide your expression manually.
</p>
<p>
    This &PRODUCT_NAME. instance is configured to require at least &P7021_MIN_CADENCE. minutes between two automation executions.
</p>~' );
    --
    l_property_id := 1428;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SCHEDULE_STATUS',
        p_prompt             => 'Schedule Status',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'POLLING_STATUS',
        p_display_group_name => 'EXECUTION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Denotes the state of this automation schedule.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Active',
        p_return_value  => 'ACTIVE',
        p_help_text     => q'~
The schedule is active and the automation will be executed based on the <strong>Schedule Expression</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Disabled',
        p_return_value  => 'DISABLED',
        p_help_text     => q'~
The schedule will not be executed. However, the automation can still be executed by calling the
<strong>APEX_AUTOMATION</strong> PL/SQL package.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Disabled (Error)',
        p_return_value  => 'ERROR',
        p_help_text     => q'~
The schedule is disabled because an error occurred during the last execution. However, the automation can
still be executed by calling the <strong>APEX_AUTOMATION</strong> PL/SQL package.~' );
    --
    l_property_id := 1429;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ACTIONS_INITIATED_ON',
        p_prompt             => 'Actions Initiated On',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'RESULT_TYPE',
        p_display_group_name => 'EXECUTION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify the data source type for this automation.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Rows returned',
        p_return_value  => 'ROWS',
        p_help_text     => q'~
A SQL Query will be executed. Automation actions can be executed when data is found (for each row).~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No Rows returned',
        p_return_value  => 'NO_ROWS',
        p_help_text     => q'~
A SQL Query will be executed. Automation actions can be executed when no data is found (once).~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body Returning Boolean',
        p_return_value  => 'FUNC_BODY_RETURNING_BOOLEAN',
        p_help_text     => q'~
A function body is executed. If it returns <strong>true</strong>, then the automation actions are executed once.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Always',
        p_return_value  => 'ALWAYS',
        p_help_text     => q'~
Automation actions are always executed. This option is suitable to be used with the <strong>Schedule</strong> type,
to execute the actions based on a schedule, regardless of the presence of certain data.~' );
    --
    l_property_id := 1430;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMMIT_EACH_ROW',
        p_prompt             => 'Commit',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'COMMIT_EACH_ROW',
        p_display_group_name => 'ACTION_EXECUTION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~
Specify whether to commit after the actions for each row have been executed or to
commit just once after all rows have been processed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Once',
        p_return_value  => 'N' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Each Row',
        p_return_value  => 'Y' );
    --
    l_property_id := 1431;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAXIMUM_ROWS_TO_PROCESS',
        p_prompt             => 'Maximum Rows to Process',
        p_property_type      => 'INTEGER',
        p_db_column          => 'MAX_ROWS_TO_PROCESS',
        p_min_value          => 1,
        p_display_group_name => 'ACTION_EXECUTION',
        p_help_text          => q'~
If <strong>Maximum Rows to Process</strong> is specified, automation execution will stop
when that maximum is reached and the automation will be logged as <strong>Incomplete</strong>.~' );
    --
    l_property_id := 1432;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ACTION_ERROR_HANDLING',
        p_prompt             => 'Action Error Handling',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ERROR_HANDLING_TYPE',
        p_display_group_name => 'ACTION_EXECUTION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select what should happen when the automation encounters and error.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Ignore',
        p_return_value  => 'IGNORE',
        p_help_text     => q'~Ignore error and continue processing automation.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Terminate Automation',
        p_return_value  => 'ABORT',
        p_help_text     => q'~Terminate automation but leave it enabled.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Disable Automation',
        p_return_value  => 'DISABLE',
        p_help_text     => q'~Terminate automation and disable it.~' );
    --
    l_property_id := 1433;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INIT_PROCEDURE_NAME',
        p_prompt             => 'Initialization Procedure Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'INIT_PROC_NAME',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'ADDITIONAL_CODE',
        p_help_text          => q'~
Provide the name of an <strong>Initialization Procedure</strong>, which is either
defined as a PL/SQL object in the database schema, or in the above <strong>Additional Code Execution</strong>.
APEX will execute that procedure at the very beginning of an automation execution.~' );
    --
    l_property_id := 1434;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BEFORE_ROW_PROCESSING_PROCEDURE_NAME',
        p_prompt             => 'Before Row Processing Procedure Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'BEFORE_PROCESSING_PROC_NAME',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'ADDITIONAL_CODE',
        p_help_text          => q'~
Provide the name of a <strong>Before Row Processing Procedure</strong>, which is either
defined as a PL/SQL object in the database schema, or in the above <strong>Additional Code Execution</strong>.
APEX will execute that procedure for each row, before it starts executing the defined actions.~' );
    --
    l_property_id := 1435;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CLEANUP_PROCEDURE_NAME',
        p_prompt             => 'Cleanup Procedure Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'TEARDOWN_PROC_NAME',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'ADDITIONAL_CODE',
        p_help_text          => q'~
Provide the name of a <strong>Cleanup Procedure</strong>, which is either defined as a PL/SQL object
in the database schema, or in the above <strong>Additional Code Execution</strong>. APEX will
execute that procedure at the very end of the automation execution.~' );
    --
    l_property_id := 1436;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VERSION',
        p_prompt             => 'Version',
        p_property_type      => 'TEXT',
        p_db_column          => 'FLOW_VERSION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Includes the application's version number on a page. You can also automatically tie the version to the date of last modification using the following format masks:<p>
<ul>
<li>YYYY.MM.DD</li>
<li>MM.DD.YYYY</li>
<li>DD.MM.YYYY</li>
</ul>
<p>If your application version uses the format "YYYY.MM.DD", then &PRODUCT_NAME. replaces this format mask with the date of last modification of any application attribute.~' );
    --
    l_property_id := 1437;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'APPLICATION_GROUP',
        p_prompt                   => 'Application Group',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'GROUP_ID',
        p_import_api_parameter     => 'application_group',
        p_display_group_name       => 'IDENTIFICATION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_app_group,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Displays the application group currently associated with this application.~' );
    --
    l_property_id := 1438;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FRIENDLY_URLS',
        p_prompt             => 'Friendly URLs',
        p_property_type      => 'YES NO',
        p_db_column          => 'FRIENDLY_URL',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~
<p>Determines whether URLs generated to navigate to other pages in the application should be easier to read.
If set to <strong>On</strong>, a directory structure based on the application, page alias and standard web parameter
syntax will be used. If set to <strong>Off</strong>, the legacy <code>f?p=</code> syntax will be used.</p>

<p>Note: The friendly URL will include the workspace <em>Path Prefix</em> in the URL. To modify the Path Prefix
go to Workspace Administration > Manage Service > Set Workspace Preferences.</p>

<p>If Friendly URLs is set to <strong>On</strong>, you will have access to <strong>Progressive Web App</strong> options.</p>~' );
    --
    l_property_id := 1439;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_FEEDBACK',
        p_prompt             => 'Allow Feedback',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_FEEDBACK_YN',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~
Enables support for end user feedback for this application. You must create feedback feature page to use this attribute.
If you enable this option, feedback icon displays, so users can click to leave feedback. You can disable this option to
hide the feedback icon. This enables you to turn on feedback for testing and turn it off for production.~' );
    --
    l_property_id := 1440;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'LOGGING',
        p_prompt                     => 'Logging',
        p_property_type              => 'YES NO',
        p_db_column                  => 'WEBDB_LOGGING',
        p_import_api_parameter       => 'page_view_logging',
        p_display_group_name         => 'ADVANCED',
        p_prop_type_yesno_override_y => 'YES',
        p_prop_type_yesno_override_n => 'NO',
        p_help_text                  => q'~
<p>
Determines whether or not user activity is recorded in the activity log. When set to <strong>On</strong>, every page view is logged, enabling an administrator to monitor user activity for each application.<p/>
<p>
Disabling logging may be advisable for high volume applications.
</p>
<p>
This attribute can only be modified if the feature configuration "Application Activity Logging" in &PRODUCT_NAME. internal administration is set to "Use Application Setting".
</p>~' );
    --
    l_property_id := 1441;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'DEBUGGING',
        p_prompt                     => 'Debugging',
        p_property_type              => 'YES NO',
        p_db_column                  => 'APPLICATION_TAB_SET',
        p_prop_type_yesno_override_y => '1',
        p_prop_type_yesno_override_n => '0',
        p_display_group_name         => 'ADVANCED',
        p_help_text                  => q'~
Determines whether debug mode can be enabled from a browser. Available options include:<p>
<ul>
<li><strong>On</strong>. Enables the application to run in a debug mode from a browser at runtime.</li>
<li><strong>Off</strong>. Disables the application from enabling in debug from a browser.</li>
</ul>
<p>Running an application in debug mode is useful when an application is under development. For production applications, Oracle recommends disabling debugging and thus preventing users from viewing application logic.</p>
<p>Debug can be enabled programmatically regardless of this debug setting.</p>
<p>If the application is run from the &PRODUCT_NAME. development environment, debugging can always be enabled.</p>~' );
    --
    l_property_id := 1442;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXACT_SUBSTITUTIONS',
        p_prompt             => 'Exact Substitutions',
        p_property_type      => 'YES NO',
        p_db_column          => 'EXACT_SUBSTITUTIONS_ONLY',
        p_display_group_name => 'ADVANCED',
        p_deprecated_values  => 'N',
        p_help_text          => q'~Determines support for exact substitutions. Use exact substitutions!~' );
    --
    l_property_id := 1443;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMPATIBILITY_MODE',
        p_prompt             => 'Compatibility Mode',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'COMPATIBILITY_MODE',
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>
Controls the compatibility mode of the &PRODUCT_NAME. runtime engine. Certain runtime behaviors are changed from release to release. Use this attribute to obtain specific application behavior. To realize new behavior in an application, set the compatibility mode of the application to the current version.
</p>
<p>
For details see chapter "Changed Behavior - Compatibility Mode" in the Release Notes.
</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '24.2',
        p_return_value  => '24.2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '21.2 to 24.1',
        p_return_value  => '21.2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '19.2 / 20.1 / 20.2 / 21.1',
        p_return_value  => '19.2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '19.1',
        p_return_value  => '19.1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '5.1 / 18.1 / 18.2',
        p_return_value  => '5.1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '5.0',
        p_return_value  => '5.0' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '4.2',
        p_return_value  => '4.2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '4.1',
        p_return_value  => '4.1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Pre 4.1',
        p_return_value  => '4.0' );
    --
    l_property_id := 1444;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PROXY_SERVER',
        p_prompt             => 'Proxy Server',
        p_property_type      => 'TEXT',
        p_db_column          => 'PROXY_SERVER',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'ADVANCED',
        p_examples           => q'~<pre>www-proxy.example.com</pre>~',
        p_help_text          => q'~
<p>Use this field to specify a proxy server.</p>
<p>For example, App Builder may require a proxy server when using a region source type of URL. The URL region source
embeds the results of the URL (that is, the page returned by navigating to the URL) as the region source.
If you use a firewall and the target of a URL is outside the firewall relative to App Builder, you may need to
specify a proxy server.<p/>
<p>You can reference values entered into this field from PL/SQL using the PL/SQL package variable
<code>APEX_APPLICATION.G_PROXY_SERVER</code>.~' );
    --
    l_property_id := 1445;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NO_PROXY_DOMAINS',
        p_prompt             => 'No Proxy Domains',
        p_property_type      => 'TEXT',
        p_db_column          => 'NO_PROXY_DOMAINS',
        p_display_length     => 64,
        p_max_length         => 500,
        p_display_group_name => 'ADVANCED',
        p_examples           => q'~<pre>internal.example.com,local.example.com</pre>~',
        p_help_text          => q'~
<p>Use this field to specify a list of hosts and domains for which no proxy should be used.</p>
<p>You can reference values entered into this field from PL/SQL using the PL/SQL package variable
<code>APEX_APPLICATION.G_NO_PROXY_DOMAINS</code>.</p>~' );
    --
    l_property_id := 299;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TEXT_QUERY_FUNCTION_TYPE',
        p_prompt             => 'Text Query Function',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ORACLE_TEXT_FUNCTION_TYPE',
        p_display_group_name => 'ROW_SEARCH',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~
<p>The Oracle Text query syntax is very complex and powerful and provides a rich set of query operators to deal with wildcards, stemming, fuzzy searches and so forth. For end users, this syntax is often hard to understand. To simplify the search process for users, you can select a function that automatically converts simple end user input into an Oracle Text query, with the advanced search features applied automatically. Select the Text Query Function type to use.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Search Engine',
        p_return_value  => 'SEARCH_ENGINE',
        p_help_text     => q'~This function performs a query relaxation search to retrieve relevant results beyond just exact matches. The goal is to get as many related results as possible, allowing users to easily find related information without needing to input precise queries. The search process begins with an exact match search and then progressively relaxes the query using techniques like stemming and fuzzy matching. While maximizing the number of results, the search engine function ensures that the most exact and relevant matches are always ranked at the top of the search results.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Expert Search',
        p_return_value  => 'EXPERT_SEARCH',
        p_help_text     => q'~This function supports more advanced search operators for precise queries. It allows exact matching, Boolean operators (AND, OR, NOT), precedence with parentheses and proximity search. Additional parameters allow customizing search behavior. This is best when requiring highly accurate results from very specific queries. Also see the <code>QUERY_EXPERT_SEARCH</code> function within the <code>APEX_SEARCH</code> package.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom',
        p_return_value  => 'CUSTOM',
        p_help_text     => q'~Provide a custom function.~' );
    --
    l_property_id := 300;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'METADATA',
        p_prompt             => 'Metadata',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'METADATA',
        p_display_group_name => 'ADVANCED' );
    --
    l_property_id := 1446;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ORACLE_TEXT_FUNCTION',
        p_prompt             => 'Custom Function Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'ORACLE_TEXT_FUNCTION',
        p_display_length     => 64,
        p_max_length         => 500,
        p_display_group_name => 'ROW_SEARCH',
        p_help_text          => q'~
<p>
    Specify the name of a custom PL/SQL function which converts end user input to an Oracle Text query.
    The function takes the end user input as VARCHAR2 and returns the Oracle Text query as a result.</p>
<p>
    This example makes use of <em>Oracle Text Query Relaxation</em>: It first executes the exact query,
    then it performs increasing levels of <em>fuzzy search</em>, until the requested amount of rows
    is returned. This is all transparent to the end user.
</p>
<pre>
create or replace function convert_end_user_search (
    p_search in varchar2 )
    return varchar2
is
    c_xml constant varchar2(32767) :=
        '&lt;query&gt;&lt;textquery>&lt;progression&gt;'          ||
          '&lt;seq&gt;       #SEARCH#            &lt;/seq&gt;' ||
          '&lt;seq&gt; FUZZY(#SEARCH#,80, 100,W) &lt;/seq&gt;' ||
          '&lt;seq&gt; FUZZY(#SEARCH#,50,1000,W) &lt;/seq&gt;' ||
          '&lt;seq&gt; FUZZY(#SEARCH#,20,3000,W) &lt;/seq&gt;' ||
        '&lt;/progression>&lt;/textquery>&lt;/query&gt;';

    l_search varchar2(32767) := p_search;
begin
    --
    -- remove special characters;
    -- these are irrelevant for full text search
    --
    l_search := regexp_replace(
        srcstr  => l_search,
        pattern => '[&lt;&gt;{}/()*%&!$?.:,;\+#]' );

    return replace(
        srcstr  => c_xml,
        oldsub  => '#SEARCH#',
        newsub  => '{' || l_search || '}' );
end;
</pre>
<p>
    For more information about Oracle Text query syntax and the query relaxation
    feature see the <a rel="noopener noreferrer" target="_blank" href="https://docs.oracle.com/en/database/oracle/oracle-database/23/ccapp/index.html">Oracle Text Application Developers Guide</a>.</p>~' );
    --
    l_property_id := 1447;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TOKENIZE_ROW_SEARCH',
        p_prompt             => 'Tokenize',
        p_property_type      => 'YES NO',
        p_db_column          => 'TOKENIZE_ROW_SEARCH',
        p_display_group_name => 'ROW_SEARCH',
        p_help_text          => q'~<
p>Specify how the search terms are applied when a <em>row search</em> is performed within a component.</p>
<p>Selecting <strong>On</strong> will treat each word of a search term separately, to match a record where the words are contained in any of the columns, together or independently.To search for an exact phrase, use double quotes (") around the search terms. For example, "ui developer". To escape a double quote in a search term, use a double quote ("").
</p>
<h4>Examples</h4>
<dl>
<dt>1- Any record including the words "red" and "shoes"<dt><dd>search term: red shoes</dd>
<dt>2- Any record including the word "developer" and the exact expression "ui designer"</dt><dd>search term: developer "ui designer"</dd>
<dt>3- Any record including the word "author" and the exact expression "the sky is "blue" and nice"</dt><dd>search term: author "the sky is ""blue"" and nice"</dd>
</dl>
<p>Selecting <strong>Off</strong> will treat the whole search term as an exact match.</p>~' );
    --
    l_property_id := 1448;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'APP_AVAILABILITY',
        p_prompt             => 'Status',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FLOW_STATUS',
        p_display_group_name => 'AVAILABILITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specifies whether or not the application is available or unavailable for use.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Available',
        p_return_value  => 'AVAILABLE',
        p_help_text     => q'~Application is available with no restrictions.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Available with Developer Toolbar',
        p_return_value  => 'AVAILABLE_W_EDIT_LINK',
        p_help_text     => q'~
Application is available for use. For developers, the Developer Toolbar is included on each page.
Requires the developer to be logged in to the App Builder in the same browser session.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Available to Developers Only',
        p_return_value  => 'DEVELOPERS_ONLY',
        p_help_text     => q'~Application is available to users having developer privileges.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Restricted Access',
        p_return_value  => 'RESTRICTED_ACCESS',
        p_help_text     => q'~Application is available to developers named in Restrict to comma separated user list.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Unavailable',
        p_return_value  => 'UNAVAILABLE',
        p_help_text     => q'~
Application cannot be run or edited. The message in Message for unavailable application displays when users
attempt to access the application.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Unavailable (Status Shown with PL/SQL)',
        p_return_value  => 'UNAVAILABLE_PLSQL',
        p_help_text     => q'~Application cannot be run or edited.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Unavailable (Redirect to URL)',
        p_return_value  => 'UNAVAILABLE_URL',
        p_help_text     => q'~
Application cannot be run. The user is linked to the URL entered in Message for unavailable application.~' );
    --
    l_property_id := 1449;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UNAVAILABLE_MESSAGE',
        p_prompt             => 'Message',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'FLOW_UNAVAILABLE_TEXT',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'AVAILABILITY',
        p_help_text          => q'~Specify message that gets displayed for the unavailable application.~' );
    --
    l_property_id := 1450;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUILD_STATUS',
        p_prompt             => 'Build Status',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'BUILD_STATUS',
        p_display_group_name => 'AVAILABILITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Identifies the build status of the current application. Options include:<br>
<ul><li><strong>Run Application Only</strong> - Users can only run the application. This option is intended for applications in a production instance.</li>
<li><strong>Run and Build Application</strong> - Developers and users can both run and develop the application.</li>
</ul>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Run Application Only',
        p_return_value  => 'RUN_ONLY',
        p_help_text     => q'~
Users can only run the application. This option is intended for applications in a production instance.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Run and Build Application',
        p_return_value  => 'RUN_AND_BUILD',
        p_help_text     => q'~Developers and users can both run and develop the application.~' );
    --
    l_property_id := 1451;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'RESTRICT_ACCESS',
        p_prompt                => 'Restrict User List',
        p_property_type         => 'TEXT EDITOR',
        p_multi_value_delimiter => ',',
        p_db_column             => 'RESTRICT_TO_USER_LIST',
        p_display_length        => 64,
        p_max_length            => 4000,
        p_display_group_name    => 'AVAILABILITY',
        p_help_text             => q'~Enter a comma-delimited list of users who can run the application.~' );
    --
    l_property_id := 1452;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'DEFAULT_ERROR_DISPLAY_LOCATION',
        p_prompt               => 'Default Display Location',
        p_property_type        => 'SELECT LIST',
        p_db_column            => 'DEFAULT_ERROR_DISPLAY_LOCATION',
        p_import_api_parameter => 'default_error_display_loc',
        p_display_group_name   => 'ERROR_HANDLING',
        p_lov_type             => 'STATIC',
        p_help_text            => q'~
Identifies where the validation error messages display for basic validations performed by &PRODUCT_NAME. or
by plug-ins. Validation error messages can display in a "notification" area (defined as part of the page template),
or within the field label.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inline with Field and in Notification',
        p_return_value  => 'INLINE_WITH_FIELD_AND_NOTIFICATION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inline with Field',
        p_return_value  => 'INLINE_WITH_FIELD' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inline in Notification',
        p_return_value  => 'INLINE_IN_NOTIFICATION' );
    --
    l_property_id := 1453;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GLOBAL_NOTIFICATION_MESSAGE',
        p_prompt             => 'Global Notification Message',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'GLOBAL_NOTIFICATION',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'AVAILABILITY',
        p_help_text          => q'~
<p>You can use a global notification to communicate system status. If your page template contains
a <code>#GLOBAL_NOTIFICATION#</code> substitution string then the text entered here displays on each page.</p>
<p>For example, suppose you entered the message "Team picnic this Friday" in this attribute. Assuming your
page templates support the global notification substitution string then this message would display on each page.</p>
<p>To create a global notification:</p>
<ol>
<li>Include the <code>#GLOBAL_NOTIFICATION#</code> substitution string in your page template.</li>
<li>Navigate to the Edit Application page and enter a message in the Global Notifications attribute.</li>
<li>Click <strong>Apply Changes</strong>.</li>
</ol>~' );
    --
    l_property_id := 1454;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PRINT_SERVER_TYPE',
        p_display_group_name => 'REPORT_PRINTING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~
Controls the print server of the application. These settings override the settings from Administration Services.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Native Printing',
        p_return_value  => 'NATIVE',
        p_help_text     => q'~Use native printing. No external print server required.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Remote Print Server',
        p_return_value  => 'REMOTE',
        p_help_text     => q'~Choose a remote server of the type "Print Server" that is configured in the Workspace Utilities.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Instance Settings',
        p_return_value  => 'INSTANCE',
        p_help_text     => q'~Use the Report Printing settings defined in Administration Services.~' );
    --
    l_property_id := 1455;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'REMOTE_PRINT_SERVER',
        p_prompt                   => 'Remote Print Server',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'PRINT_REMOTE_SERVER_ID',
        p_display_group_name       => 'REPORT_PRINTING',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_print_server,
        p_help_text                => q'~
Select a remote server defined in Workspace Utilities of the type "Print Server".~' );

    --
    l_property_id := 1456;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'PRINT_CREDENTIALS',
        p_prompt                => 'Credentials',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'PRINT_CREDENTIAL_ID',
        p_display_group_name    => 'REPORT_PRINTING',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_credential,
        p_help_text             => q'~
Select the credential to authenticate against. To edit the credential, navigate to <strong>Web Credentials</strong> in <strong>Workspace Utilities</strong>.~' );
    --
    l_property_id := 1457;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COPYRIGHT_BANNER',
        p_prompt             => 'Copyright Banner',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'COPYRIGHT_BANNER',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_examples           => q'~
<pre>
Name: #APP_NAME#
Copyright (c) 1999, #YEAR#, Company Name.
</pre>~',
        p_help_text          => q'~
Enter copyright banner text here. This will be included in the APEX application export file. You can use
<code>#APP_NAME#</code> substitution string to refer to current application name and <code>#YEAR#</code> to
refer to the current year.~' );
    --
    l_property_id := 1458;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ON_EVENT',
        p_prompt             => 'On Event',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ON_EVENT',
        p_display_group_name => 'EXECUTION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~The event for which the action will be executed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Claim',
        p_return_value  => 'CLAIM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Complete',
        p_return_value  => 'COMPLETE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Delegate',
        p_return_value  => 'DELEGATE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Update Comment',
        p_return_value  => 'UPDATE_COMMENT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Update Priority',
        p_return_value  => 'UPDATE_PRIORITY' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Fail',
        p_return_value  => 'FAIL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Update Due On',
        p_return_value  => 'UPDATE_DUE_ON' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Release',
        p_return_value  => 'RELEASE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cancel',
        p_return_value  => 'CANCEL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Create',
        p_return_value  => 'CREATE' );
    --
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Before Expire',
        p_return_value  => 'BEFORE_EXPIRE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Expire',
        p_return_value  => 'EXPIRE' );
    --
    l_property_id := 1459;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OUTCOME',
        p_prompt             => 'Outcome',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'OUTCOME',
        p_display_group_name => 'EXECUTION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~The Action can be executed for a task when it is completed with a specific outcome.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Approved',
        p_return_value  => 'APPROVED' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Rejected',
        p_return_value  => 'REJECTED' );
    --
    l_property_id := 1460;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TASK_PARAM_DATA_TYPE',
        p_prompt             => 'Data Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DATA_TYPE',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the data type of the task parameter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'String',
        p_return_value  => 'VARCHAR2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Number',
        p_return_value  => 'NUMBER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Date',
        p_return_value  => 'DATE' );
    --
    l_property_id := 1461;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ADVANCED_IS_VISIBLE',
        p_prompt             => 'Show on Task Details',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_VISIBLE',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Specify whether this parameter is displayed or hidden.~' );
    --
    l_property_id := 1462;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TASK_SUBJECT',
        p_prompt             => 'Subject',
        p_property_type      => 'TEXT',
        p_db_column          => 'SUBJECT',
        p_display_length     => 100,
        p_max_length         => 400,
        p_display_group_name => 'SETTINGS',
        p_examples           => q'~
<dl>
<dt>Purchase Requisition for Order &ORDER_ID</dt>
<dd>Here ORDER_ID is a defined parameter of the task definition and will be substituted with
the given parameter value on task creation.</dd>
</dl>~',
        p_help_text          => q'~Enter the default subject of a task.~' );
    --
    l_property_id := 1463;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRIORITY',
        p_prompt             => 'Priority',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PRIORITY',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Priority of a task. A number between 1 and 5 with 3 being the default.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '1-Urgent',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '2-High',
        p_return_value  => '2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '3-Medium',
        p_return_value  => '3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '4-Low',
        p_return_value  => '4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '5-Lowest',
        p_return_value  => '5' );
    --
    l_property_id := 1464;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TASK_TYPE',
        p_prompt             => 'Task Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TASK_TYPE',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Task Type - this can be an Approval Task or an Action Task.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Approval Task',
        p_return_value  => 'APPROVAL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Action Task',
        p_return_value  => 'ACTION' );
    --
    l_property_id := 1465;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TASK_DETAILS_PAGE',
        p_prompt             => 'Details Page',
        p_property_type      => 'LINK',
        p_db_column          => 'DETAILS_LINK_TARGET',
        p_display_group_name => 'SETTINGS',
        p_help_text          => q'~
<p>The URL of the task details page.</p>

<p>This page will show up when clicking on a task in an unified task list
page, which can be created with the create page wizard.</p>

<p>The unified task list will show all initiated user tasks in the
workspace.</p>

<p>If you have your task definitions and your unified task list in different
applications inside a workspace then please make sure your unified task list
application is able to open the task details pages in your task definition
applications. You can configure session sharing in each application under
"Shared Components, Authentication Schemes, Your Scheme, Session
Sharing".</p>~' );
    --
    l_property_id := 1466;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARTICIPANT_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PARTICIPANT_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of participant.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Potential Owner',
        p_return_value  => 'POTENTIAL_OWNER',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Business Administrator',
        p_return_value  => 'BUSINESS_ADMIN',
        p_is_quick_pick => 'Y' );
    --
    l_property_id := 1467;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARTICIPANT_VALUE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_TYPE',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how this participant is populated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'SQL_QUERY' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Expression',
        p_return_value  => 'EXPRESSION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body',
        p_return_value  => 'FUNCTION_BODY' );
    --
    l_property_id := 1468;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PUBLIC_USER',
        p_prompt             => 'Public User',
        p_property_type      => 'TEXT',
        p_db_column          => 'PUBLIC_USER',
        p_display_length     => 32,
        p_max_length         => 255,
        p_display_group_name => 'AUTHENTICATION',
        p_help_text          => q'~
<p>Identifies the Oracle schema (or user) used to connect to the database through the Database Access Descriptor (DAD).</p>
<p>Once a user has been identified, the &PRODUCT_NAME. engine keeps track of each user by setting the value of the built-in substitution string <code>APP_USER</code>.</p>
<p>When <code>APP_USER</code> equals this value, the &PRODUCT_NAME. engine considers the current session to be a "public user" session. The &PRODUCT_NAME. engine supports the following built-in display conditions:</p>
<ul>
<li><code>USER_IS_PUBLIC_USER</code>
<li><code>USER_IS_NOT_PUBLIC_USER</code>
</ul>
<br>
<p>If the current application user (<code>APP_USER</code>) equals the value of this attribute, then the user is logged on as a public user. Some applications have public (not logged in) and a private (logged in) modes. By determining if the user is the public user, you can conditionally display or hide information.</p>
<p>For example, you can show a login button if the user is the public user and a logout link if the user is not the public user. Reference this value in PL/SQL code using <code>APEX_APPLICATION.G_PUBLIC_USER</code> global variable.</p>
<p">The following are examples of valid syntax for referencing <code>APP_USER</code>:</p>
<ul>
<li><code>&amp;APP_USER.</code>
<li><code>:APP_USER</code>
<li><code>v('APP_USER')</code>
</ul>~' );
    --
    l_property_id := 1469;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'CURRENT_AUTHENTICATION_SCHEME',
        p_prompt                   => 'Authentication Scheme',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'AUTHENTICATION_ID',
        p_display_group_name       => 'AUTHENTICATION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_authentication,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~
This attribute identifies the current authentication method used by this application. The purpose of authentication is to determine
the application users identity.~' );
    --
    l_property_id := 1470;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AUTHORIZE_PUBLIC_PAGES',
        p_prompt             => 'Run on Public Pages',
        p_property_type      => 'YES NO',
        p_db_column          => 'AUTHORIZE_PUBLIC_PAGES_YN',
        p_display_group_name => 'AUTHORIZATION',
        p_help_text          => q'~<p>
Controls whether the application-level authorization scheme is checked on public pages (that is, pages that do not require authorization). Options include:
</p>
<ul>
<li><strong>On</strong> - If you select <strong>On</strong> and the page is public, the application authorization is checked.</li>
<li><strong>Off</strong> - If you select <strong>Off</strong> and the page is public, the application authorization is ignored.</li>
</ul>
<p>
Note: This attribute is ignored if you select <strong>Must Not Be Public User</strong> as Authorization Scheme.
</p>~' );
    --
    l_property_id := 1471;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AUTHORIZE_BACKGROUND_JOBS',
        p_prompt             => 'Run on Background Job',
        p_property_type      => 'YES NO',
        p_db_column          => 'AUTHORIZE_BATCH_JOB',
        p_display_group_name => 'AUTHORIZATION',
        p_help_text          => q'~<p>
Controls whether the authorization schemes at application, page, region and column level are checked in the background job such as interactive report subscriptions. Options include:
</p>
<ul>
<li><strong>On</strong> - If you select <strong>On</strong>, the authorization is checked.</li>
<li><strong>Off</strong> - If you select <strong>Off</strong>, the authorization is ignored.</li>
</ul>
<p>
Note: The background job authorization check uses cloned session state instead of the current session state. The cloned session state does NOT include collection, report settings nor session state set during the post authentication process. The authorization check may fail if session state in cloned session is not found.
</p>~' );
    --
    l_property_id := 1472;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_FOR_ROLE_OR_GROUP_SCHEMES',
        p_prompt             => 'Source for Role or Group Schemes',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'POPULATE_ROLES',
        p_display_group_name => 'AUTHORIZATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~
Define what &PRODUCT_NAME. should use as the source for authorization schemes of type <em>Is In Role or Group</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Access Control User Role Assignments',
        p_return_value  => 'R',
        p_help_text     => q'~Enable the user's assigned roles (under Shared Components / Application Access Control).~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Authentication Scheme',
        p_return_value  => 'A',
        p_help_text     => q'~
If the application's authentication scheme is <em>&PRODUCT_NAME. Accounts</em>, enable the workspace user's assigned groups.
If the application's authentication scheme is <em>Database Accounts</em>, database roles are checked when the authorization scheme is enabled.
If the authentication scheme uses <em>Real Application Security</em>, enable <em>RAS Dynamic Roles</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom Code',
        p_return_value  => 'C',
        p_help_text     => q'~
Call the <code>apex_authorization.enable_dynamic_groups</code> procedure in a Post-Authentication process to populate dynamic groups.~' );
    --
    l_property_id := 1473;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAXIMUM_SESSION_LENGTH',
        p_prompt             => 'Maximum Session Length',
        p_property_type      => 'INTEGER',
        p_db_column          => 'MAX_SESSION_LENGTH_SEC',
        p_min_value          => 0,
        p_unit               => c_unit_seconds,
        p_display_group_name => 'SESSION_MANAGEMENT',
        p_help_text          => q'~Defines how long (in seconds) sessions can exist and be used by this application.

<ul>
    <li>Enter a positive integer to control how long a session can exist.</li>
    <li>Enter 0 to have sessions exist indefinitely.</li>
    <li>Leave the value empty in order to use the session duration defined at the workspace level or the instance level.</li>
</ul>~' );
    --
    l_property_id := 1474;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SESSION_TIMEOUT_URL',
        p_prompt             => 'Session Timeout URL',
        p_property_type      => 'TEXT',
        p_db_column          => 'ON_MAX_SESSION_TIMEOUT_URL',
        p_display_length     => 96,
        p_max_length         => 4000,
        p_display_group_name => 'SESSION_MANAGEMENT',
        p_help_text          => q'~<p>
Enter an optional URL to redirect to when the maximum session lifetime has been exceeded.
The target page in this URL, if implemented in &PRODUCT_NAME., should be a public page.
A common use for this page would be to inform the user of the session expiration and to present a login link or other options.
If you do not enter a URL, users will see the message "Your session has timed out" and a link to the application home page.
If you enter #LOGOUT_URL#, &PRODUCT_NAME. will execute a logout, just like when the user clicked on the application's logout link.
</p>
<p>
Only three substitution items are supported in this URL:
</p>
<ul>
<li>&amp;APP_SESSION.</li>
<li>&amp;SESSION.</li>
<li>&amp;APP_ID.</li>
</ul>
<p>
Because of the particular purpose of this URL, it is not necessary to include either &amp;APP_SESSION. or &amp;SESSION. in the link.
</p>~' );
    --
    l_property_id := 1475;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAXIMUM_SESSION_IDLE_TIME',
        p_prompt             => 'Maximum Session Idle Time',
        p_property_type      => 'INTEGER',
        p_db_column          => 'MAX_SESSION_IDLE_SEC',
        p_min_value          => 1,
        p_unit               => c_unit_seconds,
        p_display_group_name => 'SESSION_MANAGEMENT',
        p_help_text          => q'~The Session Idle Time is the time between the last page request and the next page request.
<ul>
    <li>Enter a positive integer to control the idle time for sessions used by this application.</li>
    <li>Leave the value empty in order to use the idle time defined at the workspace level or the instance level.</li>
</ul>~' );
    --
    l_property_id := 1476;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SESSION_IDLE_TIMEOUT_URL',
        p_prompt             => 'Session Idle Timeout URL',
        p_property_type      => 'TEXT',
        p_db_column          => 'ON_MAX_IDLE_TIMEOUT_URL',
        p_display_length     => 96,
        p_max_length         => 4000,
        p_display_group_name => 'SESSION_MANAGEMENT',
        p_help_text          => q'~<p>
Enter an optional URL to be redirected to when the maximum session idle time has been exceeded.
The target page in this URL, if implemented in &PRODUCT_NAME., should be a public page.
A common use for this page would be to inform the user of the session expiration and to present a login link or other options.
If you do not enter a URL, users will see the message "Your session has timed out" and a link to the application home page.
If you enter #LOGOUT_URL#, &PRODUCT_NAME. will execute a logout, just like when the user clicked on the application's logout link.
</p>
<p>
Only three substitution items are supported in this URL:
</p>
<ul>
<li>&amp;APP_SESSION.</li>
<li>&amp;SESSION.</li>
<li>&amp;APP_ID.</li>
</ul>
<p>
Because of the particular purpose of this URL, it is not necessary to include either &amp;APP_SESSION. or &amp;SESSION. in the link.
</p>~' );
    --
    l_property_id := 1477;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SESSION_TIMEOUT_WARNING',
        p_prompt             => 'Session Timeout Warning',
        p_property_type      => 'INTEGER',
        p_db_column          => 'SESSION_TIMEOUT_WARNING_SEC',
        p_min_value          => 0,
        p_unit               => c_unit_seconds,
        p_display_group_name => 'SESSION_MANAGEMENT',
        p_help_text          => q'~<p>The session timeout warning time defines (in seconds) how long before a session times out (either maximum session length, or maximum session idle time), to warn the user. For the maximum session idle time warning, the user will have the opportunity to extend the session. For maximum session length warning, the user will be prompted to save any work, to avoid loss of data when the session maximum time is reached.</p>
<ul>
    <li>Enter a positive integer to control the session timeout warning time for sessions used by this application.</li>
    <li>Enter 0 to switch off session timeout warnings for sessions used by this application.</li>
    <li>Leave the value empty in order to use the warning time defined at the workspace level or the instance level.</li>
</ul>~' );
    --
    l_property_id := 1478;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'APP_SESSION_STATE_PROTECTION',
        p_prompt             => 'Enabled',
        p_property_type      => 'YES NO',
        p_db_column          => 'PAGE_PROTECTION_ENABLED_Y_N',
        p_display_group_name => 'SESSION_STATE_PROTECTION',
        p_help_text          => q'~
<p>When you select <strong>Enabled</strong>, this feature uses the Page Access Protection page attribute and the Session State Protection item attributes in conjunction with checksums positioned in f?p= URLs. Enabling this feature prevents URL tampering and unauthorized access to and alteration of session state.</p>
<p>When you select <strong>Disabled</strong>, the &PRODUCT_NAME. engine does not consider Page Access Protection page attributes or Session State Protection item attributes during the execution of your application and does not include checksums in the f?p= section of the URLs.</p>
<p>If this attribute is set to <strong>Enabled</strong>, changing it to <strong>Disabled</strong> disableS Session State Protection, but leaves the setting of all Page Access Protection page attributes and all Session State Protection item attributes intact.</p>
<p>If the attribute is set to <strong>Disabled</strong>, changing it to <strong>Enabled</strong> enables Session State Protection and leaves all Page Access Protection page attributes and all Session State Protection item attributes intact, to be observed during the execution of your application.</p>
<p>An exception to the general rule about item Session State Protection attributes having effect only when Session State Protection is <strong>Enabled</strong>, is if an item's attribute is set to <strong>Protected</strong>, that status is always in effect. Protected items cannot be set from the URL, regardless of whether or not Session State Protection is Enabled or Disabled.</p>~' );
    --
    l_property_id := 1479;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SSP_ACCEPT_OLD_CHECKSUMS',
        p_prompt             => 'Accept pre-20.2 URL Checksums',
        p_property_type      => 'YES NO',
        p_db_column          => 'ACCEPT_OLD_CHECKSUMS',
        p_display_group_name => 'SESSION_STATE_PROTECTION',
        p_deprecated_values  => 'Y',
        p_help_text          => q'~
Indicates whether APEX accepts bookmarks generated by APEX 20.1 and earlier. If disabled, those public and private
bookmarks will raise checksum validation errors. If enabled, the bookmarks continue to work.~' );
    --
    l_property_id := 1480;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EMBED_IN_FRAMES',
        p_prompt             => 'Embed in Frames',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'BROWSER_FRAME',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>
Use this attribute to control if the browser is allowed to display your application's pages within a frame:
</p>
<p>
Displaying pages within frames can be misused with "clickjacking" attacks.
In a clickjacking attack the attacker uses multiple layers to trick a user into clicking a button or link on another page when they were intending to click on the top level page.
Thus, the attacker is hijacking clicks (or keystrokes) meant for their page and routing them to another page.
</p>
<p>
Dialog pages are often displayed within an iframe,
which would normally not work with the attribute value "Deny".
A dialog page template's attribute <em>Allow Embed In Frame</em> defines whether "Allow from same origin" should be used instead of "Deny",
for pages that use such a template.
To protect against clickjacking,
&PRODUCT_NAME. uses a page-specific checksum in dialog page URLs.
</p>
<p>
Note: This feature requires modern browsers that support the HTTP header response variable "X-Frame-Options".
</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Deny',
        p_return_value  => 'D',
        p_help_text     => q'~The page cannot be displayed in a frame, regardless of the site attempting to do so.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Allow from same origin',
        p_return_value  => 'S',
        p_help_text     => q'~The page can only be displayed in a frame on the same origin as the page itself.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Allow',
        p_return_value  => 'A',
        p_help_text     => q'~The page can be displayed in any frame.~' );
    --
    l_property_id := 1481;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REFERRER_POLICY',
        p_prompt             => 'Referrer Policy',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'REFERRER_POLICY',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>
This attribute defines what &PRODUCT_NAME. sends in the <code>Referrer-Policy</code> HTTP response header.
<code>Referrer-Policy</code> controls what the browser sends to servers in the
<code>Referer</code> and <code>Origin</code> request headers,
when users click on links or submit pages.
Normally, this information includes the full URL, including &PRODUCT_NAME. session IDs,
which should not be exposed to third parties.
New applications should use the value <code>strict-origin</code>,
unless there are specific business requirements for a different setting.
</p><p>
Please see the
<a rel="noopener noreferrer" href="https://www.w3.org/TR/referrer-policy/" referrerpolicy="no-referrer" target="_blank">
documentation for the Referrer-Policy header and its available values
</a>
for further information.
</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'no-referrer',
        p_return_value  => 'no-referrer' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'no-referrer-when-downgrade',
        p_return_value  => 'no-referrer-when-downgrade' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'origin',
        p_return_value  => 'origin' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'origin-when-cross-origin',
        p_return_value  => 'origin-when-cross-origin' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'same-origin',
        p_return_value  => 'same-origin' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'strict-origin',
        p_return_value  => 'strict-origin' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'strict-origin-when-cross-origin',
        p_return_value  => 'strict-origin-when-cross-origin' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'unsafe-url',
        p_return_value  => 'unsafe-url' );
    --
    l_property_id := 1482;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HTML_ESCAPING_MODE',
        p_prompt             => 'HTML Escaping Mode',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'HTML_ESCAPING_MODE',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Defines how &PRODUCT_NAME. should escape special characters.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Basic',
        p_return_value  => 'B',
        p_help_text     => q'~Escape &amp;, &quot;, &lt; and &gt;~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Extended',
        p_return_value  => 'E',
        p_help_text     => q'~
Escape &amp;, &quot;, &lt;, &gt;, &#x27;, &#x2F; and non-ASCII characters if the database character set is not AL32UTF8~' );
    --
    l_property_id := 1483;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HTTP_RESPONSE_HEADERS',
        p_prompt             => 'HTTP Response Headers',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'HTTP_RESPONSE_HEADERS',
        p_display_length     => 96,
        p_max_length         => 4000,
        p_display_group_name => 'SECURITY',
        p_help_text          => q'~
Enter additional application specific HTTP headers that &PRODUCT_NAME. should send on each
response and that it does not support in another way (for example, <code>X-Frame-Options</code>
using the Embed in Frames attribute).~' );
    --
    l_property_id := 1484;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'APP_AUTHORIZATION_SCHEME',
        p_prompt                => 'Authorization Scheme',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'SECURITY_SCHEME',
        p_display_group_name    => 'AUTHORIZATION',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~
Specify an authorization scheme for your application.  Application authorization schemes are defined for an application for the purpose of
controlling access.  Setting a required authorization scheme here at the application level will require all pages of the application to pass
the defined authorization check.~' );
    --
    l_property_id := 1485;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARSING_SCHEMA',
        p_prompt             => 'Parsing Schema',
        p_property_type      => 'OWNER',
        p_db_column          => 'OWNER',
        p_display_length     => 30,
        p_max_length         => 128,
        p_display_group_name => 'DATABASE_SESSION',
        p_help_text          => q'~Specifies the schema that all SQL and PL/SQL in the application will be parsed as.~' );
    --
    l_property_id := 1486;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RUNTIME_API_USAGE',
        p_prompt             => 'Runtime API Usage',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'RUNTIME_API_USAGE',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Control how this application can access &PRODUCT_NAME. APIs that modify applications and workspace data, while it is running.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Modify This Application',
        p_return_value  => 'T',
        p_help_text     => q'~The application can modify itself.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Modify Other Applications',
        p_return_value  => 'O',
        p_help_text     => q'~The application can change other applications in the workspace.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Modify Workspace Repository',
        p_return_value  => 'W',
        p_help_text     => q'~The application can change workspace users and groups.~' );
    l_property_id := 1487;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'APP_PRIMARY_LANGUAGE',
        p_prompt             => 'Primary Language',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FLOW_LANGUAGE',
        p_display_group_name => 'GLOBALIZATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~
<p>Identifies the language in which an application is developed. This language is the base language from
which all translations are made. For example, suppose application 100 was authored in English and then
translated into French and published as application 101. The application ID would be transparent to the
end user, thus all users regardless of language would access application 100.</p>

<p>All modifications to an application should be made to the primary language specified here.</p>~' );
    --
    store_i18n_lang_prop_lov_value;
    --
    l_property_id := 1488;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'APP_LANGUAGE_DERIVED_FROM',
        p_prompt             => 'Language Derived From',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FLOW_LANGUAGE_DERIVED_FROM',
        p_display_group_name => 'GLOBALIZATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~
Specifies how &PRODUCT_NAME. derives the translated application language.  The application primary language can be static,
derived from the Web browser language, or determined from a user preference or item.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No NLS (Application not translated)',
        p_return_value  => '0',
        p_help_text     => q'~Select this option if the application will not be translated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Application Primary Language',
        p_return_value  => 'FLOW_PRIMARY_LANGUAGE',
        p_help_text     => q'~Determines the translated application language based on the Application Primary Language attribute.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Browser (use browser language preference)',
        p_return_value  => 'BROWSER',
        p_help_text     => q'~Determines the translated application language based on the user's Web browser language.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Application Preference (use FSP_LANGUAGE_PREFERENCE)',
        p_return_value  => 'FLOW_PREFERENCE',
        p_help_text     => q'~
Determines the translated application language based on a value defined using the <code>APEX_UTIL.SET_PREFERENCE</code> API.
This option can be used to maintain a user's language preference across multiple logins.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item Preference (use item containing preference)',
        p_return_value  => 'ITEM_PREFERENCE',
        p_help_text     => q'~
Determines the translated application language based on an application-level item called <code>FSP_LANGUAGE_PREFERENCE</code>.
Using this option requires &PRODUCT_NAME. to determine the appropriate language preference every time the user logs in.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Session',
        p_return_value  => 'SESSION',
        p_help_text     => q'~
Determines the translated application language from the session setting.  The &PRODUCT_NAME. session language can be set via either
the <code>APEX_UTIL.SET_SESSION_LANG</code> procedure or via the <code>p_lang</code> parameter of the <code>F</code> procedure in the URL.~' );
    --
    l_property_id := 1489;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'APP_DATE_FORMAT',
        p_prompt             => 'Date',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'DATE_FORMAT',
        p_display_length     => 40,
        p_max_length         => 255,
        p_display_group_name => 'APP_FORMAT_MASKS',
        p_lov_type           => 'DATE_FORMAT_MASKS',
        p_help_text          => q'~
Determines the date format to be used in the application.</p>
<p>This date format is used to alter the <code>NLS_DATE_FORMAT</code> database session setting prior to showing or submitting any page in the application. This value can be a literal string containing a valid Oracle date format mask or an item reference using substitution syntax. If no value is specified, the default date format is derived from the database session at runtime.</p>
Examples:
<ul>
<li><code>Month DD, YYYY</code></li>
<li><code>&amp;MY_DATE_FORMAT.</code></li>
</ul>~' );
    --
    l_property_id := 1490;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'APP_DATE_TIME_FORMAT',
        p_prompt             => 'Date Time',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'DATE_TIME_FORMAT',
        p_display_length     => 40,
        p_max_length         => 255,
        p_display_group_name => 'APP_FORMAT_MASKS',
        p_lov_type           => 'DATE_FORMAT_MASKS',
        p_help_text          => q'~
<p>Specify the date time format to be used in the application.</p>
<p>This date time format can be referenced in an application using the substitution reference <code>&amp;APP_DATE_TIME_FORMAT.</code>, or in PL/SQL via the function <code>v('APP_DATE_TIME_FORMAT')</code>.  This attribute does not alter any NLS settings.  This value can be a literal string containing a valid Oracle date format mask or an item reference using substitution syntax.  If this attribute value is not specified, then a reference to <code>APP_DATE_TIME_FORMAT</code> will return the NLS database session date format and the NLS time format.</p>
Examples:
<ul>
<li><code>Month DD, RRRR HH24:MI</code></li>
<li><code>&amp;MY_DATE_TIME_FORMAT.</code></li>
</ul>~' );
    --
    l_property_id := 1491;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'APP_TIMESTAMP_FORMAT',
        p_prompt             => 'Timestamp',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'TIMESTAMP_FORMAT',
        p_display_length     => 40,
        p_max_length         => 255,
        p_display_group_name => 'APP_FORMAT_MASKS',
        p_lov_type           => 'DATE_FORMAT_MASKS',
        p_help_text          => q'~
<p>Determines the timestamp format to be used in the application.</p>
<p>This timestamp format is used to alter the <code>NLS_TIMESTAMP_FORMAT</code> database session setting prior to showing or submitting any page in the application. This value can be a literal string containing a valid Oracle timestamp format mask or an item reference using substitution syntax. If no value is specified, the default timestamp format is derived from the database session at runtime.</p>
Examples:
<ul>
<li><code>DD-MON-RR HH.MI.SSXFF AM</code></li>
<li><code>&amp;MY_TIMESTAMP_FORMAT.</code></li>
</ul>~' );
    --
    l_property_id := 1492;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'APP_TIMESTAMP_TZ_FORMAT',
        p_prompt             => 'Timestamp Time Zone',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'TIMESTAMP_TZ_FORMAT',
        p_display_length     => 40,
        p_max_length         => 255,
        p_display_group_name => 'APP_FORMAT_MASKS',
        p_lov_type           => 'DATE_FORMAT_MASKS',
        p_help_text          => q'~
~<p>Determines the timestamp with time zone format to be used in the application.</p>
<p>This date format is used to alter the <code>NLS_TIMESTAMP_TZ_FORMAT</code> database session setting prior to showing or submitting any page in the application. This value can be a literal string containing a valid Oracle timestamp with time zone format mask or an item reference using substitution syntax. If no value is specified, the default timestamp with time zone format is derived from the database session at runtime.</p>
Examples:
<ul>
<li><code>DD-MON-RR HH.MI.SSXFF AM TZR</code></li>
<li><code>&amp;MY_TIMESTAMP_TZ_FORMAT.</code></li>
</ul>~' );
    --
    l_property_id := 1493;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHARACTER_VALUE_COMPARISON',
        p_prompt             => 'Mode',
        p_property_type      => 'TEXT',
        p_db_column          => 'NLS_SORT',
        p_display_length     => 40,
        p_max_length         => 40,
        p_text_case          => 'UPPER',
        p_display_group_name => 'CHARACTER_VALUE_COMPARISON',
        p_examples           => q'~
<ul>
<li><code>BINARY</code></li>
<li><code>GERMAN</code></li>
<li><code>CANADIAN_M</code></li>
</ul>~',
        p_help_text          => q'~
<p>Determines the collating sequence for character value comparison in various SQL operations and clauses, for example, <code>ORDER BY</code>, <code>LIKE</code>, <code>MIN</code>/<code>MAX</code>.</p>
<p>This value is used to alter <code>NLS_SORT</code> database session parameter for the execution of SQL queries in classic report, interactive report, and List view regions, as well as in plug-in API. If no value is specified, the default value is derived from the database session at runtime.</p>~' );
    --
    l_property_id := 1494;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHARACTER_VALUE_COMPARISON_BEHAVIOR',
        p_prompt             => 'Behavior',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'NLS_COMP',
        p_display_group_name => 'CHARACTER_VALUE_COMPARISON',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~
<p>Determines the collation behavior of SQL operations, for example, <code>LIKE</code>, <code>MIN</code>/<code>MAX</code>.</p>
<p>This value is used to alter <code>NLS_COMP</code> database session parameter for the execution of SQL queries in classic report,
interactive report, and List view regions, as well as in plug-in API.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Database session NLS setting (default)',
        p_return_value  => '0',
        p_help_text     => q'~The <code>NLS_COMP</code> value is derived from the database session at runtime.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Binary',
        p_return_value  => 'BINARY',
        p_help_text     => q'~Comparisons in <code>WHERE</code> clause and other SQL operations are binary.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Linguistic',
        p_return_value  => 'LINGUISTIC',
        p_help_text     => q'~
Comparisons in <code>WHERE</code> clause and other SQL operations use the linguistic sort specified in the
Character Value Comparison attribute (<code>NLS_SORT</code>).~' );
    --
    l_property_id := 1495;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AUTOMATIC_TIME_ZONE',
        p_prompt             => 'Automatic Time Zone',
        p_property_type      => 'YES NO',
        p_db_column          => 'AUTO_TIME_ZONE',
        p_display_group_name => 'GLOBALIZATION',
        p_help_text          => q'~
Controls the setting of the database session time zone. When set to <strong>On</strong>, the client time zone is
derived from the client's Web browser and set for the duration of the &PRODUCT_NAME. session. Subsequent page views
will have the database session time zone set properly per page view. Once set, this setting can be overridden using
<code>APEX_UTIL.SET_SESSION_TIME_ZONE</code>, or reset using <code>APEX_UTIL.RESET_SESSION_TIME_ZONE</code>. ~' );
    --
    l_property_id := 1496;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AUTOMATIC_CSV_ENCODING',
        p_prompt             => 'Automatic CSV Encoding',
        p_property_type      => 'YES NO',
        p_db_column          => 'CSV_ENCODING',
        p_display_group_name => 'GLOBALIZATION',
        p_help_text          => q'~
Automatic CSV Encoding controls the encoding of all CSV report output in an application. If Automatic CSV Encoding is enabled,
CSV report output will be properly converted to a character set compatible with localized desktop applications.  The character
set for CSV Encoding will be determined by the specific application language setting.~' );
    --
    l_property_id := 1497;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FAVICONS',
        p_prompt             => 'Favicon HTML',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'FAVICONS',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_deprecated_values  => '$NOT_NULL$',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~
<strong>This attribute is deprecated. Use the declarative icon picker instead.</strong>
<p>Provide additional HTML for the <code>&lt;head&gt;</code> element of the page. The
<code>&lt;head&gt;</code> element is a container for metadata and is placed between the <code>&lt;html&gt;</code> tag
and the <code>&lt;body&gt;</code> tag.</p>
<p>This is referenced by the page template using the <code>#FAVICONS#</code> substitution string.</p>~' );
    --
    l_property_id := 1498;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOGO_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOGO_TYPE',
        p_display_group_name => 'LOGO',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~
Use this item to define the logo for your application. An application logo can be an
image, text, image and text, or based on custom markup. To use this feature, your page template
must include the #LOGO# substitution string.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Image',
        p_return_value  => 'I' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Text',
        p_return_value  => 'T' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Image and Text',
        p_return_value  => 'IT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom',
        p_return_value  => 'C' );
    --
    l_property_id := 1499;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOGO_IMAGE_URL',
        p_prompt             => 'Image URL',
        p_property_type      => 'TEXT',
        p_db_column          => 'LOGO',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'LOGO',
        p_examples           => q'~
<pre><strong>#</strong><strong>APP_FILES</strong><strong>#</strong>my-logo.png</pre>~',
        p_help_text          => q'~
<p>Please enter the url for the image to be used as the logo, including the filename extension.</p>
<p>Note that to use this feature, your page template must include the <code>#LOGO#</code> substitution string.</p>~' );
    --
    l_property_id := 1500;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOTO_TEXT',
        p_prompt             => 'Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'LOGO_TEXT',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'LOGO',
        p_is_translatable    => true,
        p_help_text          => q'~
<p>Enter the text that should be displayed in the application logo.</p>
<p>Note that to use this feature, your page template must include the <code>#LOGO#</code> substitution string.</p>~' );
    --
    l_property_id := 1501;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TILELAYER_TYPE',
        p_prompt             => 'Background',
        p_property_type      => 'SELECT LIST',
        p_lov_type           => 'STATIC',
        p_db_column          => 'TILELAYER_TYPE',
        p_display_group_name => 'MAP_REGION',
        p_help_text          => 'Select the background map to use.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Default',
        p_return_value  => 'DEFAULT',
        p_help_text     => 'Use default background map settings.' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Built-In',
        p_return_value  => 'CUSTOM',
        p_help_text     => 'Pick the map tile layers to use for the background map.' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Shared Component',
        p_return_value  => 'SHARED',
        p_help_text     => 'Select the custom map tile layers from the shared components to use as a background map.' );
    --
    l_property_id := 1502;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TILELAYER_DEFAULT',
        p_prompt             => 'Standard',
        p_property_type      => 'SELECT LIST',
        p_lov_type           => 'STATIC',
        p_db_column          => 'TILELAYER_NAME_DEFAULT',
        p_display_group_name => 'MAP_REGION',
        p_help_text          => 'Choose the tile layer to use as the background map.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'OpenStreetMap Positron',
        p_return_value  => 'osm-positron',
        p_help_text     => q'~<p>Non-obtrusive light basemap based on OpenStreetMap data. This basemap style accentuates visualizations of your data.</p>
<p>Style schema and definitions by KlokanTech.com & OpenMapTiles contributors, derived from "Mapbox Open Styles". Licensed under BSD/CC-BY license. Cartography by Stamen Design is licensed under CC0.</p>
<p><a rel="noopener noreferrer" href="https://github.com/openmaptiles/positron-gl-style" target="_blank">View on GitHub</a></p>~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'OpenStreetMap Dark',
        p_return_value  => 'osm-dark-matter',
        p_help_text     => q'~<p>Non-obtrusive dark basemap based on OpenStreetMap data. This basemap style accentuates visualizations of your data.</p>
<p>Style schema and definitions by KlokanTech.com & OpenMapTiles contributors, derived from "Mapbox Open Styles". Licensed under BSD/CC-BY license. Cartography by Stamen Design is licensed under CC0.</p>
<p><a rel="noopener noreferrer" href="https://github.com/openmaptiles/dark-matter-gl-style" target="_blank">View on GitHub</a></p>~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'OpenStreetMap Bright',
        p_return_value  => 'osm-bright',
        p_help_text     => q'~
<p>General purpose basemap based on OpenStreetMap data. This basemap style provides detailed location context for your data.</p>
<p>Style schema and definitions by KlokanTech.com & OpenMapTiles contributors, derived from "Mapbox Open Styles". Licensed under BSD/CC-BY license.</p>
<p><a rel="noopener noreferrer" href="https://github.com/openmaptiles/osm-bright-gl-style" target="_blank">View on GitHub</a></p>~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Oracle World Map',
        p_return_value  => 'world-map',
        p_help_text     => q'~<p>General purpose basemap based on HERE Map data. This base map style provides location context for your data and accentuates visualization of your data.</p>
<p>Style schema and definitions by Oracle, USA.</p>~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Oracle BI World Map',
        p_return_value  => 'bi-world-map',
        p_help_text     => q'~<p>Non-obtrusive base map based on HERE Map data. This base map style provides location context for your data and accentuates visualization of your data.</p>
<p>Style schema and definitions by Oracle, USA.</p>~' );
    --
    l_property_id := 1503;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TILELAYER_DARK',
        p_prompt             => 'Dark Mode',
        p_property_type      => 'SELECT LIST',
        p_lov_type           => 'STATIC',
        p_db_column          => 'TILELAYER_NAME_DARK',
        p_display_group_name => 'MAP_REGION',
        p_help_text          => 'Choose the tile layer to use as the background map when dark mode is enabled.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'OpenStreetMap Dark',
        p_return_value  => 'osm-dark-matter',
        p_help_text     => q'~
<p>Non-obtrusive light basemap based on OpenStreetMap data. This basemap style accentuates visualizations of your data.</p>
<p>Style schema and definitions by KlokanTech.com & OpenMapTiles contributors, derived from "Mapbox Open Styles". Licensed under BSD/CC-BY license. Cartography by Stamen Design is licensed under CC0.</p>
<p><a rel="noopener noreferrer" href="https://github.com/openmaptiles/positron-gl-style" target="_blank">View on GitHub</a></p>~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'OpenStreetMap Positron',
        p_return_value  => 'osm-positron',
        p_help_text     => q'~<p>Non-obtrusive dark basemap based on OpenStreetMap data. This basemap style accentuates visualizations of your data.</p>
<p>Style schema and definitions by KlokanTech.com & OpenMapTiles contributors, derived from "Mapbox Open Styles". Licensed under BSD/CC-BY license. Cartography by Stamen Design is licensed under CC0.</p>
<p><a rel="noopener noreferrer" href="https://github.com/openmaptiles/dark-matter-gl-style" target="_blank">View on GitHub</a></p>~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'OpenStreetMap Bright',
        p_return_value  => 'osm-bright',
        p_help_text     => q'~
<p>General purpose basemap based on OpenStreetMap data. This basemap style provides detailed location context for your data.</p>
<p>Style schema and definitions by KlokanTech.com & OpenMapTiles contributors, derived from "Mapbox Open Styles". Licensed under BSD/CC-BY license.</p>
<p><a rel="noopener noreferrer" href="https://github.com/openmaptiles/osm-bright-gl-style" target="_blank">View on GitHub</a></p>~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Oracle World Map',
        p_return_value  => 'world-map',
        p_help_text     => q'~<p>General purpose basemap based on HERE Map data. This base map style provides location context for your data and accentuates visualization of your data.</p>
<p>Style schema and definitions by Oracle, USA.</p>~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Oracle BI World Map',
        p_return_value  => 'bi-world-map',
        p_help_text     => q'~<p>Non-obtrusive base map based on HERE Map data. This base map style provides location context for your data and accentuates visualization of your data.</p>
<p>Style schema and definitions by Oracle, USA.</p>~' );
    --
    l_property_id := 1504;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NAVIGATION_BAR_TYPE',
        p_prompt             => 'Navigation Bar',
        p_property_type      => 'SELECT LIST',
        p_lov_type           => 'STATIC',
        p_db_column          => 'NAVIGATION_BAR_TYPE',
        p_display_group_name => 'CONTROLS',
        p_help_text          => 'The type of navigation bar to use.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'NONE',
        p_help_text     => q'~No navigation bar.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Zoom Only',
        p_return_value  => 'SMALL',
        p_help_text     => q'~Only zoom in and zoom out controls.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Zoom and Compass',
        p_return_value  => 'FULL',
        p_help_text     => q'~Zoom controls and compass to control map orientation.~' );
    --
    l_property_id := 1505;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NAVIGATION_BAR_POSITION',
        p_prompt             => 'Navigation Bar Position',
        p_property_type      => 'SELECT LIST',
        p_lov_type           => 'STATIC',
        p_db_column          => 'NAVIGATION_BAR_POSITION',
        p_display_group_name => 'CONTROLS',
        p_help_text          => 'Choose the position of the navigation bar on the map.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Start',
        p_return_value  => 'START',
        p_help_text     => q'~Show the navigation bar on the starting position (typically to the left side) of the map.~' );
   --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'End',
        p_return_value  => 'END',
        p_help_text     => q'~Show the navigation bar on the ending position (typically to the right side) of the map.~' );
    --
    l_property_id := 1506;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INIT_POSITION_ZOOM_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_lov_type           => 'STATIC',
        p_db_column          => 'INIT_POSITION_ZOOM_TYPE',
        p_display_group_name => 'MAP_REGION_INIT',
        p_help_text          => q'~Specify how to determine the initial map position and zoom level for a new APEX session or after a map region <strong>Clear</strong> or <strong>Reset</strong> operation. Within an APEX session, the map region memorizes the current position and zoom level across page requests.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Values',
        p_return_value  => 'STATIC',
        p_help_text     => q'~Provide Static Values for the initial map position.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'SQL',
        p_help_text     => q'~Provide a SQL query returning values for the initial map position.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Based on Spatial Results',
        p_return_value  => 'QUERY_RESULTS',
        p_help_text     => q'~The map will be positioned so that layer query results are visible. <em>Note that this is not supported if GeoJSON is chosen as the layer geometry column type</em>.~' );
    --
    l_property_id := 1507;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INIT_POSITION_FROM_BROWSER',
        p_prompt             => 'Get Position From Browser',
        p_property_type      => 'YES NO',
        p_db_column          => 'INIT_POSITION_FROM_BROWSER',
        p_display_group_name => 'MAP_REGION_INIT',
        p_help_text          => q'~<p>Whether to center the map to the current location from the browser. If enabled, and the browser can access the current location, this takes precedence over the initial position determined by Static Values, SQL query or based on Spatial Results, as configured above.</p><p>This only applies for the first page load within an APEX session. When the map page is revisited in the APEX session, the map will be centered to its last position.</p>~' );
    --
    l_property_id := 1508;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'INIT_POSITION_ZOOM_SOURCE_SQL',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'INIT_POSITION_ZOOM_SOURCE',
        p_display_length       => 80,
        p_max_length           => 32767,
        p_display_group_name   => 'MAP_REGION_INIT',
        p_help_text            => q'~Enter the SQL Query to determine the initial map position and zoom level.~',
        p_examples             => q'~<p>Query Returning NUMBER columns to determine the initial map position and zoom level:</p>
<pre>
select -133.5 longitude,
         35.2 latitude,
            3 zoom
  from sys.dual
</pre>
<p>Query Returning an SDO_GEOMETRY column to determine the initial map position and a NUMBER column for the zoom level.</p>
<pre>
select sdo_geometry( 2001,                                 -- 2 dimensional point
                     4326,                                 -- longitude/latitude (WGS84)
                     sdo_point_type( -133.5, 35.2, null ), -- concrete coordinates
                     null,                                 -- not used for points
                     null                                  -- not used for points
       )                   as geometry,
       3                   as zoom
  from sys.dual
</pre>~');
    --
    l_property_id := 1509;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INIT_POSITION_LON_STATIC',
        p_prompt             => 'Longitude',
        p_property_type      => 'TEXT',
        p_db_column          => 'INIT_POSITION_LON_STATIC',
        p_display_group_name => 'MAP_REGION_INIT',
        p_help_text          => 'Specify the longitude of the initial map position. Use values between -180 (West) and 180 (East), and "." as the decimal character. Example: <strong>100.5</strong>.' );
    --
    l_property_id := 1510;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INIT_POSITION_LAT_STATIC',
        p_prompt             => 'Latitude',
        p_property_type      => 'TEXT',
        p_db_column          => 'INIT_POSITION_LAT_STATIC',
        p_display_group_name => 'MAP_REGION_INIT',
        p_help_text          => 'Specify the latitude of the initial map position. Use values between -90 (South) and 90 (North), and "." as the decimal character. Example: <strong>45.5</strong>.' );
    --
    l_property_id := 1511;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INIT_ZOOMLEVEL_STATIC',
        p_prompt             => 'Zoom Level',
        p_property_type      => 'TEXT',
        p_db_column          => 'INIT_ZOOMLEVEL_STATIC',
        p_display_group_name => 'MAP_REGION_INIT',
        p_help_text          => 'Specify the initial zoom level. If <strong>Based on Spatial Results</strong> is used as <strong>Type</strong>, this denotes the <em>maximum zoom level</em> to allow when the map zooms in. Use integer values between 1 and 24.' );
    --
    l_property_id := 1512;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INIT_GEOMETRY_TYPE',
        p_prompt             => 'Geometry Column Data Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'INIT_POSITION_GEOMETRY_TYPE',
        p_lov_type           => 'STATIC',
        p_display_group_name => 'MAP_REGION_INIT',
        p_help_text          => q'~Identifies the column type to use for the initial map position.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SDO_GEOMETRY',
        p_return_value  => 'SDO_GEOMETRY',
        p_help_text     => q'~Oracle SDO_GEOMETRY type.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'GeoJSON',
        p_return_value  => 'GEOJSON',
        p_help_text     => q'~GeoJSON, as VARCHAR2 or CLOB column types.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Longitude/Latitude',
        p_return_value  => 'LONLAT_COLUMNS',
        p_help_text     => q'~Longitude and Latitude, as two NUMBER columns.~' );
    --
    l_property_id := 1514;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'INIT_GEOMETRY_SDOGEOM_COLUMN',
        p_prompt               => 'Geometry Column',
        p_property_type        => 'COLUMN',
        p_column_data_types    => 'SDO_GEOMETRY',
        p_db_column            => 'INIT_POSITION_GEOMETRY_COLUMN',
        p_display_group_name   => 'MAP_REGION_INIT',
        p_help_text            => q'~Pick the SDO_GEOMETRY column containing the initial map position as a point object.~' );
    --
    l_property_id := 1515;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'INIT_GEOMETRY_GEOJSON_COLUMN',
        p_prompt               => 'GeoJSON Column',
        p_property_type        => 'COLUMN',
        p_column_data_types    => 'VARCHAR2:CLOB:BLOB',
        p_db_column            => 'INIT_POSITION_GEOMETRY_COLUMN',
        p_display_group_name   => 'MAP_REGION_INIT',
        p_help_text            => q'~Pick the column containing the initial map position as a GeoJSON point object.~' );
    --
    l_property_id := 1516;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INIT_POSITION_LON_COLUMN',
        p_prompt             => 'Initial Longitude Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER',
        p_db_column          => 'INIT_POSITION_LON_COLUMN',
        p_display_group_name => 'MAP_REGION_INIT',
        p_help_text          => q'~Pick the column containing the longitude of the initial map position. The returned value should be between -180 and 180.~' );
    --
    l_property_id := 1517;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INIT_POSITION_LAT_COLUMN',
        p_prompt             => 'Initial Latitude Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER',
        p_db_column          => 'INIT_POSITION_LAT_COLUMN',
        p_display_group_name => 'MAP_REGION_INIT',
        p_help_text          => q'~Pick the column containing the latitude of the initial map position. The returned value should be between -90 and 90.~' );
    --
    l_property_id := 1518;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INIT_ZOOMLEVEL_COLUMN',
        p_prompt             => 'Initial Zoomlevel Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER',
        p_db_column          => 'INIT_ZOOMLEVEL_COLUMN',
        p_display_group_name => 'MAP_REGION_INIT',
        p_help_text          => q'~Pick the column containing the initial zoom level. The returned value should be between 1 and 24.~' );
    --
    l_property_id := 1519;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_REGION_FEATURES',
        p_property_type      => 'CHECKBOXES',
        p_lov_type           => 'STATIC',
        p_prompt             => 'Options',
        p_db_column          => 'FEATURES',
        p_display_group_name => 'CONTROLS',
        p_help_text          => q'~Enable or disable miscellaneous map widget features.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Mousewheel Zoom',
        p_return_value  => 'MOUSEWHEEL_ZOOM',
        p_help_text     => q'~Zoom in or out by using the mouse wheel.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Rectangle Zoom',
        p_return_value  => 'RECTANGLE_ZOOM',
        p_help_text     => q'~Zoom the map to an area by drawing a rectangle onto the map.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scale Bar',
        p_return_value  => 'SCALE_BAR',
        p_help_text     => q'~Display a scale bar on the map.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Overview Map',
        p_return_value  => 'OVERVIEW_MAP',
        p_help_text     => q'~Display an overview map in the lower right.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Infinite Map',
        p_return_value  => 'INFINITE_MAP',
        p_help_text     => q'~Infinite map scrolling.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Get Browser Location',
        p_return_value  => 'BROWSER_LOCATION',
        p_help_text     => q'~Get the user's current location from the browser.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Circle Tool',
        p_return_value  => 'CIRCLE_TOOL',
        p_help_text     => q'~The Circle Tool allows end users to draw a circle onto the map. When finished, an event is triggered, so that the circle can be processed by Dynamic Actions or JavaScript code.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Distance Tool',
        p_return_value  => 'DISTANCE_TOOL',
        p_help_text     => q'~Allows end users to measure distances between points on the map.~' );
    --
    l_property_id := 1520;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_COPYRIGHT_NOTICE',
        p_prompt             => 'Copyright Notice',
        p_property_type      => 'HTML',
        p_is_translatable    => true,
        p_db_column          => 'COPYRIGHT_NOTICE',
        p_display_group_name => 'ATTRIBUTES',
        p_help_text          => q'~Provide the copyright notice to be placed at the footer of the map. If empty, a notice for the used background map will be generated.~' );
    --
    l_property_id := 1521;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_REGION_SHOW_LEGEND',
        p_prompt                      => 'Show',
        p_property_type               => 'YES NO',
        p_db_column                   => 'SHOW_LEGEND',
        p_display_group_name          => 'LEGEND',
        p_help_text                   => q'~Specify whether to show a legend.~' );
    --
    l_property_id := 1522;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'TASK_DEF_PARAM',
        p_prompt                      => 'Name',
        p_property_type               => 'COMPONENT',
        p_db_column                   => 'TASK_DEF_PARAM_ID',
        p_display_group_name          => 'IDENTIFICATION',
        p_lov_type                    => 'COMPONENT',
        p_lov_component_type_id       => c_comp_type_task_def_param,
        p_help_text                   => q'~Show the name of the parameter of a Task Definition.~' );
    --
    l_property_id := 1523;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_REGION_LEGEND_POSITON',
        p_prompt                      => 'Position',
        p_property_type               => 'SELECT LIST',
        p_lov_type                    => 'STATIC',
        p_db_column                   => 'LEGEND_POSITION',
        p_display_group_name          => 'LEGEND',
        p_help_text                   => q'~Specify the position of the legend.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Start',
        p_return_value  => 'START',
        p_help_text     => q'~Show the legend on the starting position (typically above the map).~');
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'End',
        p_return_value  => 'END',
        p_help_text     => q'~Show the legend on the ending position (typically below the map).~');
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Selector',
        p_return_value  => 'SELECTOR',
        p_help_text     => q'~Specify a jQuery selector for the element to show the legend in.~');
    --
    l_property_id := 1524;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_REGION_LEGEND_POSITION_SELECTOR',
        p_prompt                      => 'Selector',
        p_property_type               => 'TEXT',
        p_db_column                   => 'LEGEND_POSITION_SELECTOR',
        p_display_group_name          => 'LEGEND',
        p_help_text                   => q'~jQuery selector for the element to display the legend in.~' );
    --
    l_property_id := 1525;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_REGION_LEGEND_CSS_CLASSES',
        p_prompt                      => 'CSS Classes',
        p_property_type               => 'COMBOBOX',
        p_multi_value_delimiter       => ' ',
        p_db_column                   => 'LEGEND_CSS_CLASSES',
        p_display_length              => 50,
        p_max_length                  => 255,
        p_display_group_name          => 'LEGEND',
        p_help_text                   => q'~Enter CSS classes to add to the legend. You may add multiple classes by separating them with spaces.~' );
    --
    l_property_id := 1526;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_CUSTOM_STYLES',
        p_prompt             => 'Custom SVG Styles',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'CUSTOM_STYLES',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Provide definitions for custom SVG shapes, which can be used as map markers. Styles defined here can be used as the <strong>SVG Shape</strong> attribute within a Point layer.</p>
<p>The SVG shape must have a width and height of <strong>20</strong>. The marker will be positioned on the map, so that the center of the shape bottom (SVG coordinate <strong>10</strong>, <strong>20</strong>) is pointing to the map object.</p>
<svg aria-labelledby="prop1526_SvgTitle" role="img" xmlns="http://www.w3.org/2000/svg" width="100px" height="100px" paint-order="stroke" viewBox="-5 -5 30 40">
<title id="prop1526_SvgTitle">SVG markers have a width and height of 20 and point to the map location at position x=10 and y=20.</title>
<path d="M10 2C6.7 2 4 4.7 4 8c0 4.6 5.4 9.7 5.7 9.9.2.2.5.2.7 0 .2-.2 5.6-5.3 5.6-9.9 0-3.3-2.7-6-6-6zm0 7.9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"/>
<rect x="0" y="0" width="20" height="20" style="stroke-dasharray:1 1;fill:none;stroke-width:0.5;stroke:black;"/>
<line x1="7" y1="17" x2="13" y2="23" style="stroke:red; stroke-width: 0.75;"/>
<line x1="13" y1="17" x2="7" y2="23" style="stroke:red; stroke-width: 0.75;"/>
<text x="10" y="30" text-anchor="middle" style="font: 6px Sans-Serif; fill: red;">[10 20]</text>
</svg>
~',
        p_examples           => q'~<pre>
[
    {
        "name": "MyCamera",
        "width": 20,
        "height": 20,
        "paint-order": "stroke",
        "viewBox": "0 0 20 20",
        "elements": [
            {
                "type": "path",
                "d": "M15 4h-1.2l-.9-1.2c-.4-.5-1-.8-1.6-.8H8.8c-.7 0-1.3.3-1.6.8L6.2 4H5c-1.1 0-2 .9-2 2v5c0 1.1.9 2 2 2h2.2l2.4 4.7c.1.2.4.3.7.2.1 0 .2-.1.2-.2l2.4-4.7H15c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-5 7c-1.4 0-2.5-1.1-2.5-2.5S8.6 6 10 6s2.5 1.1 2.5 2.5S11.4 11 10 11z"
            }
        ]
    },
    {
        "name": "MyCompany",
        "width": 20,
        "height": 20,
        :
    }
]</pre>~');
    --
    l_property_id := 1527;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_REGION_MESSAGES_POSITION',
        p_prompt                      => 'Messages Position',
        p_property_type               => 'SELECT LIST',
        p_lov_type                    => 'STATIC',
        p_db_column                   => 'LAYER_MESSAGES_POSITION',
        p_display_group_name          => 'ATTRIBUTES',
        p_help_text                   => q'~Specify where to show map layer No Data Found and More Data Found messages.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Above',
        p_return_value  => 'ABOVE',
        p_help_text     => 'Show messages above the map.');
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Below',
        p_return_value  => 'BELOW',
        p_help_text     => 'Show messages below the map.');
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Selector',
        p_return_value  => 'SELECTOR',
        p_help_text     => 'Specify a jQuery selector for the element to display the messages in.');
    --
    l_property_id := 1528;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_REGION_MESSAGES_SELECTOR',
        p_prompt             => 'Message Selector',
        p_property_type      => 'TEXT',
        p_db_column          => 'LAYER_MESSAGES_SELECTOR',
        p_display_group_name => 'ATTRIBUTES',
        p_help_text          => 'jQuery selector for the element to display the messages in.');
    --
    l_property_id := 1529;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'MAP_REGION_STATUS_ITEM',
        p_prompt                   => 'Bounding Box Item',
        p_property_type            => 'ITEM',
        p_db_column                => 'MAP_STATUS_ITEM',
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_display_group_name       => 'ADVANCED',
        p_help_text                => q'~<p>If a page item is chosen, the map region will always maintain the current map bounding box, in GeoJSON format, as the value of this item. This is useful to connect the map to another APEX component (for instance, a classic or interactive report): the contents of the bounding box item can be used by the other component to perform a spatial query and to display only data visible on the map.</p>
<p>Example content of the Bounding Box Item after some map movement or zoom level change:</p>
<pre>
{
  "type": "Polygon",
  "coordinates": [[
                    [-5.499,46.380],
                    [ 8.187,46.380],
                    [ 8.187,49.550],
                    [-5.499,49.550],
                    [-5.499,46.380]]]
}
</pre>
<p>
Using a <strong>Refresh</strong> Dynamic Action, the map can be connected to a report region. The report region can apply a spatial filter to show only results which are also visible on the map.</p>
<p>Example report query:</p>
<pre>
select [column1],
       [column2],
       ...
  from ...
 where sdo_anyinteract(
           [geometry-column],
           sdo_util.from_geojson( :[item-name-of-bounding-box-item] )
       ) = 'TRUE'
   and ...
</pre>~');
    --
    l_property_id := 1530;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_REGION_HEIGHT',
        p_prompt             => 'Height',
        p_unit               => c_unit_pixels,
        p_property_type      => 'NUMBER',
        p_db_column          => 'HEIGHT',
        p_display_group_name => 'MAP_REGION',
        p_help_text          => q'~Specify the height of the map region.~' );
    --
    l_property_id := 1531;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_HAS_SPATIAL_INDEX',
        p_prompt             => 'Use Spatial Index',
        p_property_type      => 'YES NO',
        p_db_column          => 'HAS_SPATIAL_INDEX',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~<p>Enable this switch, if the underlying table has a spatial index and the map widget should use it when fetching rows from the database. In this case, the widget will <em>only</em> fetch rows for the current map window from the database. This provides a performance benefit when the data source contains a large amount of rows.</p><p>A spatial index can be created on an SDO_GEOMETRY column in SQL Workshop.</p>
<p>Note that a Spatial Index will <em>not</em> be used in the following situations:</p>
<ul>
<li>More than one layer references the <strong>Region Source</strong> as their data source.</li>
<li>The map window is too large; that is the case when it spans more than half of the world.</li>
</ul>~' );
    --
    l_property_id := 1532;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_MAPPING_PK_COLUMN',
        p_prompt             => 'Primary Key Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER:VARCHAR2:ROWID',
        p_db_column          => 'PK_COLUMN',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Choose the column containing the unique key to identify a row. Use this to provide the primary key value to custom JavaScript code or map event handlers.~' );
    --
    l_property_id := 1533;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_GEOMETRY_TYPE',
        p_prompt             => 'Geometry Column Data Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GEOMETRY_COLUMN_DATA_TYPE',
        p_lov_type           => 'STATIC',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Identify the data type of the geometry column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SDO_GEOMETRY',
        p_return_value  => 'SDO_GEOMETRY',
        p_help_text     => q'~Oracle SDO_GEOMETRY type.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'GeoJSON',
        p_return_value  => 'GEOJSON',
        p_help_text     => q'~GeoJSON, as VARCHAR2 or CLOB types.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Longitude/Latitude',
        p_return_value  => 'LONLAT_COLUMNS',
        p_help_text     => q'~Longitude and Latitude, as two NUMBER columns. Only supported for the <strong>Points</strong> and <strong>Heat Map</strong> layer types.~' );
    --
    l_property_id := 1534;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_GEOMETRY_TYPE_REMOTE',
        p_prompt             => 'Geometry Column Data Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GEOMETRY_COLUMN_DATA_TYPE',
        p_lov_type           => 'STATIC',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Identify the data type of the geometry column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'GeoJSON',
        p_return_value  => 'GEOJSON',
        p_help_text     => q'~GeoJSON, as VARCHAR2 or CLOB types.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Longitude/Latitude',
        p_return_value  => 'LONLAT_COLUMNS',
        p_help_text     => q'~Longitude and Latitude, as two NUMBER columns.~' );
    --
    l_property_id := 1535;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_GEOMETRY_GEOJSON_COLUMN',
        p_prompt             => 'GeoJSON Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2:CLOB:BLOB',
        p_db_column          => 'GEOMETRY_COLUMN',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Column returning GeoJSON objects to display on the map.~');
    --
    l_property_id := 1536;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_GEOMETRY_GEOMETRY_COLUMN',
        p_prompt             => 'Geometry Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'SDO_GEOMETRY',
        p_db_column          => 'GEOMETRY_COLUMN',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~SDO_GEOMETRY column, returning geometry objects to display on the map.~');
    --
    l_property_id := 1537;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_LON_COLUMN',
        p_prompt             => 'Longitude Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'LONGITUDE_COLUMN',
        p_column_data_types  => 'NUMBER',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~NUMBER column, containing the longitude of the spatial objects to be displayed on the map. Returned values should be between -180 and 180.~');
    --
    l_property_id := 1538;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_LAT_COLUMN',
        p_prompt             => 'Latitude Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'LATITUDE_COLUMN',
        p_column_data_types  => 'NUMBER',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~NUMBER column, containing the latitude of the spatial objects to be displayed on the map. Returned values should be between -90 and 90.~');
    --
    l_property_id := 1539;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_FEATURE_STROKE_COLOR',
        p_prompt             => 'Stroke Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'STROKE_COLOR',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Specify the stroke color.~' );
    --
    l_property_id := 1540;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_FEATURE_STROKE_WIDTH',
        p_prompt             => 'Stroke Width',
        p_min_value          => 0.05,
        p_max_value          => 10,
        p_property_type      => 'NUMBER',
        p_db_column          => 'STROKE_WIDTH',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Specify the stroke width.~' );
    --
    l_property_id := 1541;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_FEATURE_FILL_COLOR',
        p_prompt             => 'Fill Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'FILL_COLOR',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Specify the fill color.~' );
    --
    l_property_id := 1542;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_FEATURE_FILL_OPACITY',
        p_prompt             => 'Fill Opacity',
        p_property_type      => 'NUMBER',
        p_min_value          => 0,
        p_max_value          => 1,
        p_db_column          => 'FILL_OPACITY',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Specify fill opacity. Ranges from zero (fully transparent) to 1.0 (opaque).~' );
    --
    l_property_id := 1543;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_POINT_FEATURE_DISPLAY_TYPE',
        p_prompt             => 'Style',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'POINT_DISPLAY_TYPE',
        p_lov_type           => 'STATIC',
        p_display_group_name => 'MAP_REGION_POINT_FEATURE_STYLE',
        p_help_text          => q'~Identifies how to display point objects.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SVG',
        p_return_value  => 'SVG',
        p_help_text     => q'~Display as SVG Shape.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Icon',
        p_return_value  => 'ICON',
        p_help_text     => q'~Display as Icon.~' );
    --
    l_property_id := 1544;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_POINT_ICON_SOURCE_TYPE',
        p_prompt                      => 'Icon Source',
        p_property_type               => 'SELECT LIST',
        p_db_column                   => 'POINT_ICON_SOURCE_TYPE',
        p_display_group_name          => 'MAP_REGION_POINT_FEATURE_STYLE',
        p_lov_type                    => 'STATIC',
        p_help_text                   => q'~Select the source for the icon to display the point on the map.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Icon Class',
        p_return_value  => 'STATIC_CLASS',
        p_help_text     => 'Use a Static CSS class for all rows.' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Icon Class Column',
        p_return_value  => 'DYNAMIC_CLASS',
        p_help_text     => 'Use individual CSS classes for each row.' );
    store_property_lov_values(
        p_property_id   => l_property_id,
        p_display_value => 'Image URL',
        p_return_value  => 'URL',
        p_help_text     => 'URL to an image to use for point display.' );
    --
    l_property_id := 1545;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_POINT_ICON_CLASS_COLUMN',
        p_prompt                      => 'Icon Column',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'POINT_ICON_CLASS_COLUMN',
        p_column_data_types           => 'VARCHAR2',
        p_display_group_name          => 'MAP_REGION_POINT_FEATURE_STYLE',
        p_help_text                   => q'~Select the column containing icon CSS classes.~' );
    --
    l_property_id := 1547;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_POINT_ICON_IMAGE_URL',
        p_prompt                      => 'Image URL',
        p_property_type               => 'TEXT',
        p_db_column                   => 'POINT_ICON_IMAGE_URL',
        p_display_length              => 70,
        p_max_length                  => 4000,
        p_display_group_name          => 'MAP_REGION_POINT_FEATURE_STYLE',
        p_help_text                   => q'~Enter the URL for the image source.~' );
    --
    l_property_id := 1548;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_POINT_ICON_CSS_CLASSES',
        p_prompt                      => 'Icon CSS Classes',
        p_property_type               => 'ICON',
        p_db_column                   => 'POINT_ICON_CSS_CLASSES',
        p_display_length              => 50,
        p_max_length                  => 255,
        p_display_group_name          => 'MAP_REGION_POINT_FEATURE_STYLE',
        p_help_text                   => q'~CSS classes to use as icon source.~');

    --
    l_property_id := 1550;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_POINT_FEATURE_SVG_SHAPE',
        p_prompt             => 'Shape',
        p_property_type      => 'COMBOBOX',
        p_lov_type           => 'STATIC',
        p_db_column          => 'POINT_SVG_SHAPE',
        p_display_group_name => 'MAP_REGION_POINT_FEATURE_STYLE',
        p_help_text          => q'~Specify the SVG shape to display point objects. Choose from the predefined shapes or enter the name of a <em>Custom SVG Shape</em>, specified in the <strong>Custom SVG Styles</strong> map region attribute. When no name is specified, or the specified name is not in the list of default or custom SVG shapes, then the <strong>Default</strong> shape will be used.~' );
    --
    store_default_svg_shapes_lov(
        p_property_id   => l_property_id );
    --
    l_property_id := 1551;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_POINT_FEATURE_SVG_SHAPE_SCALE',
        p_prompt             => 'Shape Scale',
        p_property_type      => 'TEXT',
        p_db_column          => 'POINT_SVG_SHAPE_SCALE',
        p_display_group_name => 'MAP_REGION_POINT_FEATURE_STYLE',
        p_help_text          => q'~Specify the scaling factor for the SVG shape. The maximum scale is <strong>10</strong>. If a column substitution is used and the value is greater than <strong>10</strong>, a message is written to the JavaScript console and the marker is displayed with a scale factor of <strong>10</strong>. The map component wil round the value to the first decimal digit.~' );
    --
    l_property_id := 1552;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_POINT_FEATURE_CLUSTER',
        p_prompt             => 'Enable',
        p_property_type      => 'YES NO',
        p_db_column          => 'FEATURE_CLUSTERING',
        p_display_group_name => 'MAP_REGION_POINT_CLUSTER',
        p_help_text          => q'~Whether to cluster co-located points on the map.~' );
    --
    l_property_id := 1553;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_CLUSTER_POINT_FEATURE_IMAGE_PATH',
        p_prompt             => 'Icon URL',
        p_property_type      => 'TEXT',
        p_db_column          => 'CLUSTER_POINT_IMAGE_PATH',
        p_display_group_name => 'MAP_REGION_POINT_CLUSTER',
        p_help_text          => q'~Specify the URL to the image to use to display a point cluster.~' );
    --
    l_property_id := 1554;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_CLUSTER_POINT_FEATURE_IMAGE_CSS',
        p_prompt             => 'Icon CSS Classes',
        p_property_type      => 'ICON',
        p_db_column          => 'CLUSTER_POINT_CSS_CLASSES',
        p_display_group_name => 'MAP_REGION_POINT_CLUSTER',
        p_help_text          => q'~Specify icon CSS classes to use to display a point cluster.~' );
    --
    l_property_id := 1555;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_CLUSTER_POINT_FEATURE_SVG_SHAPE',
        p_prompt             => 'Shape',
        p_property_type      => 'COMBOBOX',
        p_lov_type           => 'STATIC',
        p_db_column          => 'CLUSTER_POINT_SVG_SHAPE',
        p_display_group_name => 'MAP_REGION_POINT_CLUSTER',
        p_help_text          => q'~Specify the SVG shape to display a point cluster. Choose from the predefined shapes or enter the name of a <em>custom SVG shape</em>, specified in the <strong>Custom SVG Styles</strong> map region attribute. When the specified name is not in the list of default or custom SVG styles, then the <strong>Default Marker</strong> will be used.~' );
    --
    store_default_svg_shapes_lov(
        p_property_id   => l_property_id );
    --
    l_property_id := 1556;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'MAP_CLUSTER_POINT_FEATURE_SVG_SHAPE_SCALE',
        p_prompt               => 'Shape Scale',
        p_property_type        => 'TEXT',
        p_db_column            => 'CLUSTER_POINT_SVG_SHAPE_SCALE',
        p_display_group_name   => 'MAP_REGION_POINT_CLUSTER',
        p_help_text            => q'~Specify the scaling factor for the SVG shape to display a point cluster. The maximum scale is <strong>10</strong>, and the map component wil round the value to the first decimal digit.~' );
    --
    l_property_id := 1557;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_CLUSTER_POINT_FEATURE_FILL_COLOR',
        p_prompt             => 'Fill Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'CLUSTER_POINT_SVG_FILL_COLOR',
        p_display_group_name => 'MAP_REGION_POINT_CLUSTER',
        p_help_text          => q'~Specify the fill color to display a point cluster.~' );

    l_property_id := 1558;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_FEATURE_TOOLTIP_ADV_FORMATTING',
        p_prompt                      => 'Advanced Formatting',
        p_property_type               => 'YES NO',
        p_db_column                   => 'TOOLTIP_ADV_FORMATTING',
        p_display_group_name          => 'TOOLTIP',
        p_help_text                   => q'~Specify whether the tooltip displays using a column or advanced formatting using HTML expressions and supported substitution strings. The tooltip is displayed when hovering over an object on the map.~' );
    --
    l_property_id := 1559;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_FEATURE_TOOLTIP_COLUMN',
        p_prompt                      => 'Column',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'TOOLTIP_COLUMN',
        p_column_data_types           => 'VARCHAR2',
        p_display_group_name          => 'TOOLTIP',
        p_help_text                   => q'~Select the column to be used as tooltip.~' );
    --
    l_property_id := 1560;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_FEATURE_TOOLTIP_HTML_EXPR',
        p_prompt             => 'HTML Expression',
        p_property_type      => 'HTML',
        p_db_column          => 'TOOLTIP_HTML_EXPR',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
  <dt>Change the background and text colors</dt>
    <dd><pre>&lt;span style="background-color:yellow; color:red;">&EMPLOYEE_STATUS.&lt;/span></pre></dd>
  <dt>Use Heading 2</dt>
    <dd><pre>&lt;h2>&EMPLOYEE_NAME.&lt;/h2></pre></dd>
  <dt>Use a dynamic class from the SQL query</dt>
    <dd><pre>&lt;span class="&COLUMN_CLASS.">&EMPLOYEE_STATUS.&lt;/span></pre><br>
    The <code>&COLUMN_CLASS.</code> and <code>&EMPLOYEE_STATUS.</code> substitutions in this example are columns selected in the report SQL query.</dd>
  <dt>Show an image, and a tooltip on hover</dt>
    <dd><pre>&lt;img src="&IMAGE_NAME." title="&EMPLOYEE_NAME."&gt;</pre></dd>
</dl>~',
        p_display_group_name => 'TOOLTIP',
        p_is_translatable    => true,
        p_help_text          => q'~Enter HTML expressions to be shown as tooltip when hovering over an object on the map. Use <code>&COLUMN.</code> syntax to show column values in HTML.~' );
    --
    l_property_id := 1561;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_FEATURE_TOOLTIP_CSS_CLASSES',
        p_prompt                      => 'CSS Classes',
        p_property_type               => 'COMBOBOX',
        p_multi_value_delimiter       => ' ',
        p_db_column                   => 'TOOLTIP_CSS_CLASSES',
        p_display_length              => 50,
        p_max_length                  => 255,
        p_display_group_name          => 'TOOLTIP',
        p_help_text                   => q'~Enter CSS classes to use when rendering the tooltip. You may add multiple classes by separating them with spaces.~' );
    --
    l_property_id := 1562;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_FEATURE_INFOWINDOW_ADV_FORMATTING',
        p_prompt                      => 'Advanced Formatting',
        p_property_type               => 'YES NO',
        p_db_column                   => 'INFO_WINDOW_ADV_FORMATTING',
        p_display_group_name          => 'MAP_REGION_FEATURE_INFO_WINDOW',
        p_help_text                   => q'~Specify whether the information window displays using columns or advanced formatting using HTML expressions and supported substitution strings. The information window will be displayed as a pop-up when clicking an object on the map.~' );
    --
    l_property_id := 1563;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_FEATURE_INFOWINDOW_TITLE_COLUMN',
        p_prompt                      => 'Title Column',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'INFO_WINDOW_TITLE_COLUMN',
        p_column_data_types           => 'VARCHAR2',
        p_display_group_name          => 'MAP_REGION_FEATURE_INFO_WINDOW',
        p_help_text                   => q'~Select the column to be used as the title for the information window. The information window will be displayed as a pop-up when clicking an object on the map.~' );
    --
    l_property_id := 1564;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_FEATURE_INFOWINDOW_BODY_COLUMN',
        p_prompt                      => 'Body Column',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'INFO_WINDOW_BODY_COLUMN',
        p_column_data_types           => 'VARCHAR2',
        p_display_group_name          => 'MAP_REGION_FEATURE_INFO_WINDOW',
        p_help_text                   => q'~Select the column to be used as body for the information window. The information window will be displayed as a pop-up when clicking an object on the map..~' );
    --
    l_property_id := 1565;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_FEATURE_INFOWINDOW_HTML_EXPR',
        p_prompt             => 'HTML Expression',
        p_property_type      => 'HTML',
        p_db_column          => 'INFO_WINDOW_HTML_EXPR',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
  <dt>Change the background and text colors</dt>
    <dd><pre>&lt;span style="background-color:yellow; color:red;">&EMPLOYEE_STATUS.&lt;/span></pre></dd>
  <dt>Use Heading 2</dt>
    <dd><pre>&lt;h2>&EMPLOYEE_NAME.&lt;/h2></pre></dd>
  <dt>Use a dynamic class from the SQL query</dt>
    <dd><pre>&lt;span class="&COLUMN_CLASS.">&EMPLOYEE_STATUS.&lt;/span></pre><br>
    The <code>&COLUMN_CLASS.</code> and <code>&EMPLOYEE_STATUS.</code> substitutions in this example are columns selected in the report SQL query.</dd>
  <dt>Show an image, and a tooltip on hover</dt>
    <dd><pre>&lt;img src="&IMAGE_NAME." title="&EMPLOYEE_NAME."&gt;</pre></dd>
</dl>~',
        p_display_group_name => 'MAP_REGION_FEATURE_INFO_WINDOW',
        p_is_translatable    => true,
        p_help_text          => q'~Enter HTML expressions to be shown as the info popup when clicking a spatial object. Use <code>&COLUMN.</code> syntax to show column values in HTML.~' );
    --
    l_property_id := 1566;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_FEATURE_INFOWINDOW_CSS_CLASSES',
        p_prompt                      => 'CSS Classes',
        p_property_type               => 'COMBOBOX',
        p_multi_value_delimiter       => ' ',
        p_db_column                   => 'INFO_WINDOW_CSS_CLASSES',
        p_display_length              => 50,
        p_max_length                  => 255,
        p_display_group_name          => 'MAP_REGION_FEATURE_INFO_WINDOW',
        p_help_text                   => q'~Enter CSS classes to use when rendering the info window popup. You may add multiple classes by separating them with spaces.~' );
    --
    l_property_id := 1567;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_FEATURE_ROW_ASSIGN_COLUMN',
        p_prompt                      => 'Column',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'ROW_ASSIGNMENT_COLUMN',
        p_column_data_types           => 'VARCHAR2',
        p_display_group_name          => 'MAP_REGION_ROW_SELECTION',
        p_help_text                   => q'~Select the column to use to assign rows from the region source to this layer.~' );
    --
    l_property_id := 1568;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_FEATURE_ROW_ASSIGN_VALUE',
        p_prompt                      => 'Value for this Layer',
        p_property_type               => 'TEXT',
        p_db_column                   => 'ROW_ASSIGNMENT_VALUE',
        p_display_group_name          => 'MAP_REGION_ROW_SELECTION',
        p_help_text                   => q'~Provide the <strong>Row Assignment Column</strong> <em>value</em> which assigns rows from the region source to this layer.~' );
    --
    l_property_id := 1569;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_FEATURE_STROKE_STYLE',
        p_prompt                      => 'Stroke Style',
        p_property_type               => 'SELECT LIST',
        p_lov_type                    => 'STATIC',
        p_db_column                   => 'STROKE_STYLE',
        p_display_group_name          => 'APPEARANCE',
        p_help_text                   => q'~Specify the stroke style.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Solid',
        p_return_value  => 'SOLID' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dotted',
        p_return_value  => 'DOTTED' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dashed',
        p_return_value  => 'DASHED' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dot-Dashed',
        p_return_value  => 'DOT_DASHED' );
    --
    l_property_id := 1570;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_CLUSTER_POINT_FEATURE_THRESHOLD',
        p_prompt                      => 'Clustering Radius',
        p_property_type               => 'INTEGER',
        p_min_value                   => 10,
        p_unit                        => c_unit_pixels,
        p_db_column                   => 'CLUSTER_THRESHOLD_PIXELS',
        p_display_group_name          => 'MAP_REGION_POINT_CLUSTER',
        p_help_text                   => q'~The cluster radius in pixels. If a value of <strong>80</strong> is specified, points within 80 pixels of each other will be
aggregated to a point cluster.~' );
    --
    l_property_id := 1571;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_LAYER_TYPE',
        p_prompt             => 'Layer Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LAYER_TYPE',
        p_lov_type           => 'STATIC',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Identify the type of this layer.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Points',
        p_return_value  => 'POINT',
        p_help_text     => q'~Point Objects.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Lines',
        p_return_value  => 'LINE',
        p_help_text     => q'~Line Objects.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Polygons',
        p_return_value  => 'POLYGON',
        p_help_text     => q'~Polygon Objects.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Heat Map',
        p_return_value  => 'HEATMAP',
        p_help_text     => q'~Point Objects, displayed as a Heat Map. Heat maps are useful to visualize the density of point objects.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Extruded Polygons',
        p_return_value  => 'POLYGON_3D',
        p_help_text     => q'~"Extruded" Polygons as 3D objects. The height is based on a result column value.~' );
    --
    l_property_id := 1572;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'SHOW_IN_LEGEND',
        p_prompt                      => 'Show',
        p_property_type               => 'YES NO',
        p_db_column                   => 'DISPLAY_IN_LEGEND',
        p_display_group_name          => 'LEGEND',
        p_help_text                   => q'~Specify whether this layer is being shown in the legend.~' );
    --
    l_property_id := 1573;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'LEGEND_CAN_HIDE',
        p_prompt                      => 'Enable to Hide',
        p_property_type               => 'YES NO',
        p_db_column                   => 'ALLOW_HIDE',
        p_display_group_name          => 'LEGEND',
        p_help_text                   => q'~Specify whether layer visibility can be toggled by clicking its name in the legend.~' );
    --
    l_property_id := 1574;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_FEATURE_FILL_COLOR_IS_SPECTRUM',
        p_prompt                      => 'Use Color Scheme',
        p_property_type               => 'YES NO',
        p_db_column                   => 'FILL_COLOR_IS_SPECTRUM',
        p_display_group_name          => 'APPEARANCE',
        p_help_text                   => q'~Specify whether to use a <em>Color Scheme</em> for this layer. A color scheme is a list of colors. Based on a value and the minimum and maximum values, the map widget will pick the actual display color for this object from the list.~' );
    --
    l_property_id := 1575;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_FEATURE_FILL_COLOR_SPECTRUM',
        p_prompt                      => 'Custom Color List',
        p_property_type               => 'TEXT EDITOR',
        p_db_column                   => 'FILL_COLOR_SPECTRUM',
        p_display_group_name          => 'APPEARANCE',
        p_help_text                   => q'~Specify a custom <em>color scheme</em> for this layer. A color scheme is a list of colors. Based on a value and the minimum and maximum values, the map widget will pick the actual display color for this object from the list.~',
        p_examples                    => '<dl><dt>Color list ranging from red to white</dt>
    <dd><pre>#ff0000,#ff2020,#ff4040,#ff6060,#ff8080,#ffa0a0,#ffc0c0,#ffffff</pre></dd><dt>Color list ranging from blue to black</dt>
    <dd><pre>#0000ff,#0000c0,#0000a0,#000080,#000060,#000040,#000020,#000000</pre></dd></dl>' );
    --
    l_property_id := 1576;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_FEATURE_FILL_COLOR_VALUE_COLUMN',
        p_prompt                      => 'Color Value Column',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'FILL_VALUE_COLUMN',
        p_column_data_types           => 'NUMBER',
        p_display_group_name          => 'APPEARANCE',
        p_help_text                   => q'~Select the column returning a value in order to determine the display color from the scheme.~' );
    --
    l_property_id := 1577;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_FEATURE_HEATMAP_VALUE_COLUMN',
        p_prompt                      => 'Value Column',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'FILL_VALUE_COLUMN',
        p_column_data_types           => 'NUMBER',
        p_display_group_name          => 'APPEARANCE',
        p_help_text                   => q'~Select the column returning the value to determine the display color from the scheme. If no column is selected, the display color will be determined from point density only.~' );
    --
    l_property_id := 1578;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_LAYER_VISIBLE_MIN_ZOOM_LEVEL',
        p_min_value                   => 1,
        p_max_value                   => 24,
        p_prompt                      => 'Minimum',
        p_property_type               => 'INTEGER',
        p_db_column                   => 'VISIBLE_MIN_ZOOM_LEVEL',
        p_display_group_name          => 'MAP_LAYER_ZOOM',
        p_help_text                   => q'~Specify the minimum zoom level for this layer to become visible.~' );
    --
    l_property_id := 1579;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_LAYER_VISIBLE_MAX_ZOOM_LEVEL',
        p_prompt                      => 'Maximum',
        p_min_value                   => 1,
        p_max_value                   => 24,
        p_property_type               => 'INTEGER',
        p_db_column                   => 'VISIBLE_MAX_ZOOM_LEVEL',
        p_display_group_name          => 'MAP_LAYER_ZOOM',
        p_help_text                   => q'~Specify the maximum zoom level for this layer to remain visible.~' );
    --
    -- store_color_spectrum_property occupies 4 component IDs
    store_color_spectrum_property (
        p_start_property_id           => 1580,
        p_name_prefix                 => 'MAP_LAYER_COLOR_SPECTRUM_',
        p_db_column_prefix            => 'FILL_COLOR_SPECTRUM_',
        p_display_group_name          => 'APPEARANCE' );
    --
    store_color_spectrum_property (
        p_start_property_id           => 1584,
        p_name_prefix                 => 'MAP_LAYER_HEATMAP_SPECTRUM_',
        p_db_column_prefix            => 'FILL_COLOR_SPECTRUM_',
        p_display_group_name          => 'APPEARANCE' );
    --
    l_property_id := 1588;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_LAYER_HEATMAP_CUSTOM_SPECTRUM',
        p_prompt                      => 'Custom Color List',
        p_property_type               => 'TEXT EDITOR',
        p_db_column                   => 'FILL_COLOR_SPECTRUM',
        p_display_group_name          => 'APPEARANCE',
        p_help_text                   => q'~Specify a custom <em>color scheme</em> for this heat map layer. A color scheme is a list of colors. Based on a value and the minimum and maximum values, the map widget will pick the actual display color for this object from the list.~',
        p_examples                    => '<dl><dt>Color list ranging from red to white</dt>
    <dd><pre>#ff0000,#ff2020,#ff4040,#ff6060,#ff8080,#ffa0a0,#ffc0c0,#ffffff</pre></dd><dt>Color list ranging from blue to black</dt>
    <dd><pre>#0000ff,#0000c0,#0000a0,#000080,#000060,#000040,#000020,#000000</pre></dd></dl>' );
    --
    l_property_id := 1589;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'MAP_FEATURE_3D_VALUE_COLUMN',
        p_prompt                      => 'Extrusion Value Column',
        p_property_type               => 'COLUMN',
        p_db_column                   => 'EXTRUDE_VALUE_COLUMN',
        p_column_data_types           => 'NUMBER',
        p_display_group_name          => 'APPEARANCE',
        p_help_text                   => q'~Select the column returning a value to determine the height of the extruded polygon.~' );
    --
    l_property_id := 1590;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_FEATURE_POINT_STROKE_COLOR',
        p_prompt             => 'Stroke Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'STROKE_COLOR',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Specify the stroke color.~' );
    --
    l_property_id := 1591;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_FEATURE_POINT_STROKE_WIDTH',
        p_prompt             => 'Stroke Width',
        p_min_value          => 0.05,
        p_max_value          => 5,
        p_property_type      => 'NUMBER',
        p_db_column          => 'STROKE_WIDTH',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Specify the stroke width.~' );
    --
    l_property_id := 1592;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_UNIT_SYSTEM',
        p_prompt             => 'Unit System',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'UNIT_SYSTEM',
        p_lov_type           => 'STATIC',
        p_display_group_name => 'ATTRIBUTES',
        p_help_text          => q'~Select the unit system to use for the scale bar and distance tool.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Metric',
        p_return_value  => 'METRIC',
        p_help_text     => q'~Use the metric system.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Imperial',
        p_return_value  => 'IMPERIAL',
        p_help_text     => q'~Use the imperial system.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Derive from Item',
        p_return_value  => 'ITEM',
        p_help_text     => q'~Derive the unit system from the value of a page or application item.~' );
    --
    l_property_id := 1593;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_UNIT_SYSTEM_PAGE_ITEM',
        p_prompt             => 'Unit System Item',
        p_property_type      => 'ITEM',
        p_db_column          => 'UNIT_SYSTEM_PAGE_ITEM_NAME',
        p_display_group_name => 'ATTRIBUTES',
        p_help_text          => q'~Enter a page or application item containing the value to use as the map unit system: <strong>METRIC</strong> (<strong>M</strong>) or <strong>IMPERIAL</strong> (<strong>I</strong>).~' );
    --
    l_property_id := 1594;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_FEATURE_3D_VALUE_UNIT',
        p_prompt             => 'Unit',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'EXTRUDE_UNIT',
        p_lov_type           => 'STATIC',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Select the unit to determine the height of the extruded polygon.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Meter',
        p_return_value  => 'M' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Kilometer',
        p_return_value  => 'KM' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Foot',
        p_return_value  => 'FOOT' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Mile',
        p_return_value  => 'MILE' );
        --
    l_property_id := 1595;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_CLUSTER_POINT_FEATURE_TOOLTIP',
        p_prompt             => 'Tooltip',
        p_property_type      => 'HTML',
        p_db_column          => 'CLUSTER_TOOLTIP',
        p_is_translatable    => true,
        p_display_group_name => 'MAP_REGION_POINT_CLUSTER',
        p_help_text          => q'~Enter HTML expressions to be shown as tooltip when hovering over an cluster marker on the map. Use the <strong>&LAYER.</strong> and <strong>&COUNT.</strong> placeholders to reference the layer name and the amount of map objects in the cluster.~' );
    --
    l_property_id := 1596;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_FEATURE_POINT_FILL_OPACITY',
        p_prompt             => 'Fill Opacity',
        p_property_type      => 'NUMBER',
        p_min_value          => 0,
        p_max_value          => 1,
        p_db_column          => 'FILL_OPACITY',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Specify fill opacity. Ranges from zero (fully transparent) to 1.0 (opaque).~' );
    --
    l_property_id := 1597;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_FEATURE_POINT_FILL_COLOR',
        p_prompt             => 'Fill Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'FILL_COLOR',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Specify the marker fill color.~' );
    --
    l_property_id := 1598;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LEGEND_ICON_CSS_CLASSES',
        p_prompt             => 'Icon CSS Classes',
        p_property_type      => 'ICON',
        p_db_column          => 'LEGEND_ICON_CSS_CLASSES',
        p_display_group_name => 'LEGEND',
        p_help_text          => q'~Specify the Icon to display for this layer in the legend.~' );
    --
    l_property_id := 1599;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_FEATURE_LABEL',
        p_max_length         => 255,
        p_prompt             => 'Label',
        p_is_translatable    => true,
        p_property_type      => 'TEXT',
        p_db_column          => 'LABEL',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Specify the label to use for this layer in the legend and within tooltips.~' );
    --
    l_property_id := 1600;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CONFIRM_ENABLED',
        p_prompt             => 'Requires Confirmation',
        p_property_type      => 'YES NO',
        p_db_column          => 'CONFIRM_ENABLED',
        p_is_query_only      => true,
        p_display_group_name => 'BEHAVIOR',
        p_help_text          => q'~<p>Protect the button's behavior with a confirmation prompt. Shows a confirmation dialog after the button has been clicked, where the user must confirm before the button performs its action.</p>
<p>This functionality can be used to ensure the user does not perform a significant action by accident, such as deleting a record.</p>
<p>Note: The confirmation button in the dialog derives its label from the main button label.</p>~' );
    --
    l_property_id := 1601;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CONFIRM_MESSAGE',
        p_prompt             => 'Message',
        p_property_type      => 'HTML',
        p_db_column          => 'CONFIRM_MESSAGE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => '<pre>&lt;strong&gt;Are you sure&lt;&#x2F;strong&gt; you wish to delete employee &amp;P1_ENAME.?</pre>',
        p_display_group_name => 'CONFIRMATION',
        p_is_translatable    => true,
        p_help_text          => 'Enter the message to be displayed in the confirmation dialog.');
    --
    l_property_id := 1602;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CONFIRM_STYLE',
        p_prompt             => 'Style',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CONFIRM_STYLE',
        p_display_group_name => 'CONFIRMATION',
        p_lov_type           => 'STATIC',
        p_help_text          => 'Specify the style of the dialog.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Information',
        p_return_value  => 'information' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Warning',
        p_return_value  => 'warning' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Danger',
        p_return_value  => 'danger' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Success',
        p_return_value  => 'success' );
    --
    l_property_id := 1603;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_IMAGE_URL',
        p_prompt             => 'File URL',
        p_property_type      => 'TEXT',
        p_db_column          => 'REGION_IMAGE',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'REGION_IMAGE',
        p_help_text          => q'~Enter a reference to an image URL. Control over image placement within the region comes from region templates that contain the #REGION_IMAGE# or #REGION_IMAGE_URL# substitution strings.
        This property is required with the use of #REGION_IMAGE_URL# in the selected region template.~' );
    --
    l_property_id := 1604;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_IMAGE_ALT_TEXT',
        p_prompt             => 'Accessible Description',
        p_property_type      => 'TEXT',
        p_db_column          => 'REGION_IMAGE_ALT_TEXT',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'REGION_IMAGE',
        p_help_text          => q'~<p>Enter text that describes the image, to be used in the image HTML ALT attribute.
        If the image is purely decorative, or the equivalent visible text is already included on the page, then this field should be left blank and an empty ALT attribute will be rendered.
        Leaving this blank will mean users of Assistive Technology like screen readers, will not perceive the image.
        If the image is non-decorative, the text provided should be short and descriptive.
        This text will then be used as the image ALT text, and screen readers users will hear this description.</p>
        <p>Note: A 'decorative' image is one that does not present important content, or is used for layout or non-informative purposes.</p>~' );
    --
    l_property_id := 1605;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_IMAGE_ATTRIBUTES',
        p_prompt             => 'Custom Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'REGION_IMAGE_ATTR',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'REGION_IMAGE',
        p_help_text          => q'~<p>Enter custom image attributes to be included in the image HTML. This can be used for attributes such as height or width, and
        this value is substituted for the substitution string #REGION_IMAGE_ATTRIBUTES# in the selected region template.</p>~' );
    --
    l_property_id := 1606;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOGO_CUSTOM',
        p_prompt             => 'Custom HTML',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'LOGO',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'LOGO',
        p_help_text          => q'~
The custom logo textarea can be used to have full control over the markup of your
application's logo. The value in this field will be inserted into the <code>#LOGO#</code>
substitution string of your page template.~' );
    --
    l_property_id := 1607;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'THEME_STYLE_BY_USER_PREF',
        p_prompt             => 'Enable End Users to choose Theme Style',
        p_property_type      => 'YES NO',
        p_db_column          => 'THEME_STYLE_BY_USER_PREF',
        p_display_group_name => 'ATTRIBUTES',
        p_help_text          => q'~
When set to <strong>On</strong>, end users can choose a Theme Style for their sessions
within a customization dialog. Only Theme Styles marked as "Public" are eligible for selection.~' );
    --
    l_property_id := 1608;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ADD_BUILT_WITH_LOVE',
        p_prompt             => 'Add "Built with APEX" to Footer',
        p_property_type      => 'YES NO',
        p_db_column          => 'BUILT_WITH_LOVE',
        p_display_group_name => 'ATTRIBUTES',
        p_help_text          => q'~
When set to <strong>On</strong>, &PRODUCT_NAME. will add the text
<em>Built with Love using &PRODUCT_NAME.</em> to the footer of every page.~' );
    --
    l_property_id := 1609;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NAV_BAR_IMPLEMENTATION',
        p_prompt             => 'Implementation',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'NAV_BAR_TYPE',
        p_display_group_name => 'NAVIGATION_BAR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how to you wish to implement the navigation bar in this application.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Classic',
        p_return_value  => 'NAVBAR',
        p_help_text     => q'~
Render the navigation bar as a classic navigation bar in the #NAVIGATION_BAR# position on your page template.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'List',
        p_return_value  => 'LIST',
        p_help_text     => q'~
Render the navigation bar as a list, using the selected list and list template in the #NAVIGATION_BAR# position
on your page template.~' );
    --
    l_property_id := 1610;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'NAV_BAR_LIST',
        p_prompt                   => 'List',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'NAV_BAR_LIST_ID',
        p_display_group_name       => 'NAVIGATION_BAR',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_list,
        p_help_text                => q'~Select the list utilized for the navigation bar on this application.~' );
    --
    l_property_id := 1611;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'NAV_BAR_LIST_TEMPLATE',
        p_prompt                   => 'List Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'NAV_BAR_LIST_TEMPLATE_ID',
        p_display_group_name       => 'NAVIGATION_BAR',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_list_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~
Select the navigation menu list template utilized with the navigation menu list on this page.~' );
    --
    l_property_id := 1612;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'NAV_BAR_LIST_TEMPLATE_OPTIONS',
        p_prompt                => 'Template Options',
        p_property_type         => 'TEMPLATE OPTIONS',
        p_db_column             => 'NAV_BAR_TEMPLATE_OPTIONS',
        p_display_group_name    => 'NAVIGATION_BAR',
        p_lov_type              => 'TEMPLATE_OPTIONS',
        p_help_text             => q'~
Set Template Options for the List Template used for the navigation bar in this application.~' );
    --
    l_property_id := 1613;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INCLUDE_LEGACY_JAVASCRIPT',
        p_prompt             => 'Include Deprecated or Desupported Javascript Functions',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'INCLUDE_LEGACY_JAVASCRIPT',
        p_display_group_name => 'JAVASCRIPT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~
Specifies if deprecated or desupported JavaScript functions are included on every page in the application.
The functions deprecated or desupported are listed in the Release Notes for every release. If you are confident
your application does not contain any references to those deprecated or desupported functions, don't check any
checkbox to reduce the overall size of the JavaScript files loaded.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Pre 18.1',
        p_return_value  => 'PRE18' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '18.x',
        p_return_value  => '18' );
    --
    l_property_id := 1614;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INCLUDE_JQUERY_MIGRATE',
        p_prompt             => 'Include jQuery Migrate',
        p_property_type      => 'YES NO',
        p_db_column          => 'INCLUDE_JQUERY_MIGRATE',
        p_display_group_name => 'JAVASCRIPT',
        p_help_text          => q'~
<p>Specifies if the <strong>jQuery Migrate</strong> plug-in should be included on every page in the application.</p>

<p>The plug-in restores deprecated features and behaviors of jQuery so that old JavaScript code and jQuery plug-ins
will still run properly with the jQuery version loaded by &PRODUCT_NAME..</p>

<p>If you are confident your application and any used jQuery plug-in does not contain any references to deprecated
jQuery features, set this to <strong>Off</strong> to reduce the overall size of the JavaScript files loaded.</p>~' );
    --
    l_property_id := 1615;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'APP_FILES_PATH',
        p_prompt             => '#APP_FILES# Path',
        p_property_type      => 'TEXT',
        p_db_column          => 'FILE_PREFIX',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'ADVANCED',
        p_examples           => q'~
<ul>
  <li>/myFiles/</li>
  <li>https://www.example.com/myFiles/</li>
</ul>~',
        p_help_text          => q'~
<p>Determines the virtual path the Web server uses to point to the static files when using
<code>&#35;APP_FILES&#35;</code> substitution string.</p>

<p>Do not specify anything to reference files which are stored with your application definition in the database.</p>

<p>For performance reasons you can also store your application files on your Web server or a
Content Delivery Network (CDN). Use any valid URL to reference them.</p>~' );
    --
    l_property_id := 1616;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'APEX_FILES_PATH',
        p_prompt             => '#APEX_FILES# Path',
        p_property_type      => 'TEXT',
        p_db_column          => 'FLOW_IMAGE_PREFIX',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'ADVANCED',
        p_examples           => q'~
For example, to reference the image go.gif you would use the following syntax:
<pre>
&lt;img src="&#35;APEX_FILES&#35;go.gif"&gt;
</pre>~',
        p_help_text          => q'~
<p>Determines the virtual path the Web server uses to point to the images directory distributed
with &PRODUCT_NAME.. During installation, the virtual path is typically configured as <code>/i/</code>.
If you are unsure, contact your administrator.<p/>

<p>When embedding an image in static text (for example, in page or region headers or footers),
you can reference an image using the substitution string <code>&#35;APEX_FILES&#35;</code>.</p>

<p>Note: If the entered image prefix is equal to the instance image prefix, then the application-level
attribute will always be null. This easily facilities the movement of an application across different
instances that may have different image prefixes.</p>~' );
    --
    l_property_id := 1617;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CONCATENATED_FILE_URL',
        p_prompt             => 'Concatenated File URL',
        p_property_type      => 'TEXT',
        p_db_column          => 'COMBINED_FILE_URL',
        p_display_length     => 70,
        p_max_length         => 255,
        p_display_group_name => 'ATTRIBUTES',
        p_examples           => q'~
<pre>
&#35;APP_IMAGES&#35;js/all.min.js?version=&#35;APP_VERSION&#35;
</pre>~',
        p_help_text          => q'~<p>
Enter the file URL of the concatenated file to be loaded, instead of multiple single JavaScript or CSS files.
</p><p>
Using a concatenated file can increase the performance of loading your page, because instead of issuing
multiple HTTP requests for each single file, only one file has to be loaded by the browser.
It will also give you the freedom to use smaller, modular files during development, but where the
single concatenated file will be used when running the application outside of the &PRODUCT_NAME. development environment.
</p>

<p>Note: The concatenated file will be loaded as soon as the exact URL of a requested JavaScript or CSS file
is encountered when rendering a page. For example if the file is defined in the <em>JavaScript File URLs</em>
or <em>CSS File URLs</em> attribute for the current page, or loaded by other means such as via the
<code>apex_javascript</code> or <code>apex_css</code> APIs, or via another application level attribute where
files can be included.</p>~' );
    --
    l_property_id := 1618;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SINGLE_FILE_URLS',
        p_prompt             => 'Single File URLs',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'SINGLE_FILE_URLS',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'ATTRIBUTES',
        p_examples           => q'~
<pre>
&#35;APP_IMAGES&#35;js/core.min.js?version=&#35;APP_VERSION&#35;
&#35;APP_IMAGES&#35;js/search.widget.min.js?version=&#35;APP_VERSION&#35;
&#35;APP_IMAGES&#35;js/profile.widget.min.js?version=&#35;APP_VERSION&#35;
</pre>~',
        p_help_text          => q'~<p>
Enter multiple file URLs for which a concatenated file should be loaded instead. Each URL has to be written into a new line.
</p><p>
The individual file URL should only be contained in one concatenated file, unless the concatenated file has been
created for a specific page.
</p>

<p>Note: The concatenated file will be loaded as soon as the exact URL of a requested JavaScript or CSS file is
encountered when rendering a page. For example if the file is defined in the <em>JavaScript File URLs</em> or
<em>CSS File URLs</em> attribute for the current page, or loaded by other means such as via the
<code>apex_javascript</code> or <code>apex_css</code> APIs, or via another application level attribute where
files can be included.</p>~' );
    --
    l_property_id := 1619;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'ONLY_FOR_PAGE',
        p_prompt                   => 'Only for Page',
        p_property_type            => 'PAGE',
        p_db_column                => 'PAGE_ID',
        p_display_length           => 5,
        p_max_length               => 10,
        p_display_group_name       => 'ATTRIBUTES',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_page,
        p_help_text                => q'~
Enter a page number if the specified concatenated file should only be used on a particular page.~' );
    --
    l_property_id := 1620;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_PWA',
        p_prompt             => 'Enable',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_PWA',
        p_display_group_name => 'PWA',
        p_help_text          => q'~
<p>Progressive Web Apps are web applications designed to be capable, reliable, and installable.</p>
<p>Enabling this option will:</p>
<ul>
<li>Serve static files more efficiently using advanced caching</li>
<li>Enable more declarative Progressive Web App options</li>
</ul>~' );
    --
    l_property_id := 1621;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PWA_INSTALLABLE',
        p_prompt             => 'Installable',
        p_property_type      => 'YES NO',
        p_db_column          => 'PWA_IS_INSTALLABLE',
        p_display_group_name => 'PWA',
        p_help_text          => q'~
<p>A Progressive Web App can be installed on devices. When installing a Progressive Web App, an icon is added to the device home screen to feel like a native application.</p>
<p>Enabling this option will:</p>
<ul>
<li>Add a new navigation bar entry: Install App</li>
<li>Allow users to install this APEX app on devices</li>
</ul>~' );
    --
    l_property_id := 1622;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PWA_DISPLAY',
        p_prompt             => 'Display',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PWA_MANIFEST_DISPLAY',
        p_display_group_name => 'PWA',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~
<p>The display determines the preferred display mode for the application.</p>
<p>The display mode changes how much of browser UI is shown to the user.</p>
<ul>
    <li>Fullscreen: Opens the PWA without any browser UI. Takes the entirety of the screen or window.</li>
    <li>Standalone: Opens the PWA to look like a standalone application. The app runs in a distinct window, separate from the browser. Standard browser UI components like the URL bar and buttons are not visible.</li>
    <li>Minimal UI: Similar to standalone, except with browser controlling navigation buttons like back and refresh.</li>
    <li>Browser: Regular browser UI.</li>
</ul>
<p>Note: Some devices and browsers ignore this attribute. Oracle APEX is only relaying this information to the device which handles the Progressive Web App appropriately.</p>
<p>More information: <a rel="noopener noreferrer" href="https://web.dev/add-manifest/">https://web.dev/add-manifest/</a></p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Fullscreen',
        p_return_value  => 'fullscreen' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Standalone',
        p_return_value  => 'standalone' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Minimal UI',
        p_return_value  => 'minimal-ui' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Browser',
        p_return_value  => 'browser' );
    --
    l_property_id := 1623;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PWA_SCREEN_ORIENTATION',
        p_prompt             => 'Screen Orientation',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PWA_MANIFEST_ORIENTATION',
        p_display_group_name => 'PWA',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~
<p>The preferred screen orientation when using this Progressive Web App. This applies mostly for mobile devices.</p>
<p>Note: Some devices and browsers ignore this attribute. Oracle APEX is only relaying this information to the device
which handles the Progressive Web App appropriately.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Any',
        p_return_value  => 'any' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Natural',
        p_return_value  => 'natural' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Landscape',
        p_return_value  => 'landscape' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Landscape Primary',
        p_return_value  => 'landscape-primary' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Landscape Secondary',
        p_return_value  => 'landscape-secondary' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Portrait',
        p_return_value  => 'portrait' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Portrait Primary',
        p_return_value  => 'portrait-primary' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Portrait Secondary',
        p_return_value  => 'portrait-secondary' );
    --
    l_property_id := 1624;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PWA_THEME_COLOR',
        p_prompt             => 'Theme Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'PWA_MANIFEST_THEME_COLOR',
        p_display_length     => 30,
        p_max_length         => 128,
        p_display_group_name => 'PWA',
        p_help_text          => q'~
<p>This attribute defines the default theme color for the application.</p>
<p>This affects how the OS displays the application (e.g., on Android's task switcher, the theme color surrounds the application).</p>
<p>Note: Some devices and browsers ignore this attribute. Oracle APEX is only relaying this information to the device which handles
the Progressive Web App appropriately.</p>~' );
    --
    l_property_id := 1625;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'PWA_BACKGROUND_COLOR',
        p_prompt               => 'Background Color',
        p_property_type        => 'COLOR',
        p_db_column            => 'PWA_MANIFEST_BACKGROUND_COLOR',
        p_import_api_parameter => 'pwa_manifest_bg_color',
        p_display_length       => 30,
        p_max_length           => 128,
        p_display_group_name   => 'PWA',
        p_help_text            => q'~
<p>The background color defines a placeholder background color for the application to display before its stylesheet is loaded.</p>
<p>Therefore background color should match the theme body background color for a smooth transition between launching the
web application and loading the application content.</p>
<p>Note: Some devices and browsers ignore this attribute. Oracle APEX is only relaying this information to the device which
handles the Progressive Web App appropriately.</p>~' );
    --
    l_property_id := 1626;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PWA_IOS_STATUS_BAR_STYLE',
        p_prompt             => 'iOS Status Bar Style',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PWA_APPLE_STATUS_BAR_STYLE',
        p_display_group_name => 'PWA',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~
<p>The iOS Status Bar Style attribute is rendered as a meta tag on the page to control the appearance of the status bar in a web application when it is added to the home screen on an iOS device.</p>
<ul>
    <li><strong>Default</strong>: This is the default value and it displays the status bar in the usual way.</li>
    <li><strong>Black</strong>: This value makes the status bar black.</li>
    <li><strong>Translucent</strong>: This value makes the status bar translucent, allowing the content to be displayed behind it.</li>
</ul>
<p>Note: Only iOS devices use this attribute. Oracle APEX is only relaying this information to the device which handles
the Progressive Web App appropriately.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Default',
        p_return_value  => 'default' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Black',
        p_return_value  => 'black' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Translucent',
        p_return_value  => 'black-translucent' );
    --
    l_property_id := 1627;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PWA_APP_DESCRIPTION',
        p_prompt             => 'App Description',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'PWA_MANIFEST_DESCRIPTION',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'PWA',
        p_help_text          => q'~
<p>The app description explains what the application does.</p>
<p>This is used to provide more information to users when they are prompted to install the application.</p>~' );
    --
    l_property_id := 1628;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PWA_CUSTOM_MANIFEST',
        p_prompt             => 'Custom Manifest',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'PWA_MANIFEST_CUSTOM',
        p_display_length     => 30,
        p_max_length         => 4000,
        p_display_group_name => 'PWA',
        p_help_text          => q'~
<p>The Custom Manifest is used to store additional JSON properties for the Web App Manifest file.</p>
<p>The properties found here will be used to extend the declarative options above, by overriding existing
properties or appending new properties.</p>
<p>For more information on building your Custom Manifest, you can read the Web App Manifest specifications:
<a rel="noopener noreferrer" href="https://www.w3.org/TR/appmanifest/">https://www.w3.org/TR/appmanifest/</a></p>~' );
    --
    l_property_id := 1629;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PWA_CUSTOM_SERVICE_WORKER',
        p_prompt             => 'Custom Service Worker',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'PWA_SERVICE_WORKER_HOOKS',
        p_display_length     => 40,
        p_max_length         => 32767,
        p_display_group_name => 'PWA',
        p_help_text          => q'~~' );
    --
    l_property_id := 1630;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'LIST_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_list,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Use this field to base this list on an existing list in this application or another application in your workspace.~' );
    --
    l_property_id := 1631;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SUBSTITUTION_INSTALLATION_PROMPT',
        p_prompt             => 'Installation prompt',
        p_property_type      => 'TEXT',
        p_db_column          => 'INSTALL_PROMPT',
        p_display_length     => 40,
        p_max_length         => 255,
        p_display_group_name => 'INSTALLATION',
        p_help_text          => q'~~' );
    --
    l_property_id := 1632;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REQUIRED_FREE_SPACE',
        p_prompt             => 'Free Space',
        p_property_type      => 'INTEGER',
        p_db_column          => 'REQUIRED_FREE_KB',
        p_min_value          => 1,
        p_unit               => c_unit_kb,
        p_display_group_name => 'PREREQUISITES',
        p_help_text          => q'~
Identify the freespace required to install this application. On installation, the parsing schema's
default tablespace is checked to ensure that this much space is available.~' );
    --
    l_property_id := 1633;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REQUIRED_SYSTEM_PRIVILEGES',
        p_prompt             => 'System Privileges',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'REQUIRED_SYS_PRIVS',
        p_display_group_name => 'PREREQUISITES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Identify the system privileges required to install this application.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CREATE DATABASE LINK',
        p_return_value  => 'CREATE DATABASE LINK' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CREATE MATERIALIZED VIEW',
        p_return_value  => 'CREATE MATERIALIZED VIEW' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CREATE PROCEDURE',
        p_return_value  => 'CREATE PROCEDURE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CREATE SEQUENCE',
        p_return_value  => 'CREATE SEQUENCE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CREATE SYNONYM',
        p_return_value  => 'CREATE SYNONYM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CREATE TABLE',
        p_return_value  => 'CREATE TABLE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CREATE TRIGGER',
        p_return_value  => 'CREATE TRIGGER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CREATE TYPE ',
        p_return_value  => 'CREATE TYPE ' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CREATE VIEW',
        p_return_value  => 'CREATE VIEW' );
    --
    l_property_id := 1634;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'INSTALLED_OBJECT_NAMES',
        p_prompt                => 'Object Names',
        p_property_type         => 'TEXT EDITOR', -- $$$ todo this should be a different property type
        p_multi_value_delimiter => ':',
        p_db_column             => 'REQUIRED_NAMES_AVAILABLE',
        p_display_group_name    => 'INSTALLATION',
        p_help_text             => q'~
Identify the object names that are created by this application's installation scripts.
Installation is prevented if these objects already exist in the parsing schema.~' );
    --
    l_property_id := 1635;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALIDATION_MESSAGE',
        p_prompt             => 'Validations',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'VALIDATION_MESSAGE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'MESSAGES',
        p_help_text          => q'~
Enter a message to display above the list of installation validations when this application installs.~' );
    --
    l_property_id := 1636;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LICENSE_MESSAGE',
        p_prompt             => 'License',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'LICENSE_MESSAGE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'MESSAGES',
        p_help_text          => q'~
If the use of this application requires the user to accept a license, enter it here.
The user will be prompted to accept the message before installing database objects.~' );
    --
    l_property_id := 1637;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CONFIGURATION_MESSAGE',
        p_prompt             => 'Application Substitutions',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'CONFIGURATION_MESSAGE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'MESSAGES',
        p_help_text          => q'~
Enter a message to display above the application substitution prompts when this application installs.~' );
    --
    l_property_id := 1638;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUILD_OPTIONS_MESSAGE',
        p_prompt             => 'Build Options',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'BUILD_OPTIONS_MESSAGE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'MESSAGES',
        p_help_text          => q'~
Enter a message to display above the build option prompts when this application installs.~' );
    --
    l_property_id := 1639;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INSTALL_WELCOME_MESSAGE',
        p_prompt             => 'Welcome',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'WELCOME_MESSAGE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'INSTALL_MESSAGES',
        p_help_text          => q'~
<p>After successfully importing and installing an application definition, the installation wizard prompts
the user to install supporting objects for the application.</p><p>
Use this message to introduce the application and describe the actions of the installation scripts.</p>~' );
    --
    l_property_id := 1640;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INSTALL_CONFIRM_MESSAGE',
        p_prompt             => 'Confirmation',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'INSTALL_MESSAGE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'INSTALL_MESSAGES',
        p_help_text          => q'~
Enter a message to display during installation confirmation before the installation scripts are
run and configuration options are applied.~' );
    --
    l_property_id := 1641;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INSTALL_SUCCESS_MESSAGE',
        p_prompt             => 'Install Success',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'INSTALL_SUCCESS_MESSAGE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'INSTALL_MESSAGES',
        p_help_text          => q'~
Enter a message to display after all installation scripts have run without errors.~' );
    --
    l_property_id := 1642;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INSTALL_FAILURE_MESSAGE',
        p_prompt             => 'Install Failure',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'INSTALL_FAILURE_MESSAGE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'INSTALL_MESSAGES',
        p_help_text          => q'~Enter a message to display after installation scripts have been run with errors.~' );
    --
    l_property_id := 1643;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UPGRADE_WELCOME_MESSAGE',
        p_prompt             => 'Welcome',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'UPGRADE_MESSAGE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'UPGRADE_MESSAGES',
        p_help_text          => q'~
Enter a message to welcome message to display before this application's supporting objects are upgraded.~' );
    --
    l_property_id := 1644;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UPGRADE_CONFIRMATION_MESSAGE',
        p_prompt             => 'Confirmation',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'UPGRADE_CONFIRM_MESSAGE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'UPGRADE_MESSAGES',
        p_help_text          => q'~Enter a message to display during upgrade confirmation before the upgrade scripts are run and configuration options are applied.~' );
    --
    l_property_id := 1645;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UPGRADE_SUCCESS_MESSAGE',
        p_prompt             => 'Success',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'UPGRADE_SUCCESS_MESSAGE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'UPGRADE_MESSAGES',
        p_help_text          => q'~Enter a message to display after all upgrade scripts have run without errors.~' );
    --
    l_property_id := 1646;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UPGRADE_FAILURE_MESSAGE',
        p_prompt             => 'Failure',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'UPGRADE_FAILURE_MESSAGE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'UPGRADE_MESSAGES',
        p_help_text          => q'~Enter a message to display after upgrade scripts have been run with errors.~' );
    --
    l_property_id := 1647;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEINSTALL_CONFIRMATION_MESSAGE',
        p_prompt             => 'Confirmation',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'DEINSTALL_MESSAGE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'DEINSTALL_MESSAGES',
        p_help_text          => q'~
Enter a message to display during deinstallation confirmation when this application is de-installed.~' );
    --
    l_property_id := 1648;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POST_DEINSTALL_MESSAGE',
        p_prompt             => 'Post-Deinstall',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'DEINSTALL_SUCCESS_MESSAGE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'DEINSTALL_MESSAGES',
        p_help_text          => q'~Enter a message to display after all deinstallation scripts have run.~' );
    --
    l_property_id := 1649;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DATA_LOAD_DEF_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_data_load_def,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Use this field to base this data load definition on an existing data load definition in this application or another application in your workspace.~' );
    --
    l_property_id := 1650;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'WEB_SRC_MODULE_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_web_src_module,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Use this field to base this REST Data Source on an existing REST Data Source in this application or another application in your workspace.~' );
    --
    l_property_id := 1651;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REST_CATALOG_NAME',
        p_prompt             => 'Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'CATALOG_INTERNAL_NAME',
        p_display_group_name => 'REST_SOURCE_CATALOG',
        p_help_text          => q'~Identifies the REST Source Catalog from which this REST Data Source was created.~' );
    --
    l_property_id := 1652;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REST_CATALOG_SERVICE_NAME',
        p_prompt             => 'Service ',
        p_property_type      => 'TEXT',
        p_db_column          => 'CATALOG_SERVICE_NAME',
        p_display_group_name => 'REST_SOURCE_CATALOG',
        p_help_text          => q'~
Identifies the service within the REST Source Catalog, from which this REST Data Source was created.~' );
    --
    l_property_id := 1653;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REST_CATALOG_SERVICE_VERSION',
        p_prompt             => 'Version',
        p_property_type      => 'TEXT',
        p_db_column          => 'CATALOG_SERVICE_VERSION',
        p_display_group_name => 'REST_SOURCE_CATALOG',
        p_help_text          => q'~
Identifies the service version within the REST Source Catalog, from which this REST Data Source was created.~' );
    --
    l_property_id := 1654;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REPORT_LAYOUT_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'REPORT_LAYOUT_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Type of report layout.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Generic Columns (XSL-FO)',
        p_return_value  => 'XSL_GENERIC' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Named Columns (RTF)',
        p_return_value  => 'RTF_FILE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Named Columns (XSL-FO)',
        p_return_value  => 'XSL_FILE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Named Columns (DOCX)',
        p_return_value  => 'DOCX_FILE' );
    --
    l_property_id := 1655;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REPORT_LAYOUT_PAGE_TEMPLATE',
        p_prompt             => 'Page',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'PAGE_TEMPLATE',
        p_display_length     => 96,
        p_max_length         => 32000,
        p_display_group_name => 'TEMPLATES',
        p_help_text          => q'~<p>The report layout is the XSL-FO based definition of the page formatting. All attributes defining page size, orientation, fonts, styles, and so forth, are defined in this section.</p>
<p>The following are valid substitution strings: </p>
<ul>
<li>#PAGE_HEADER#</li>
<li>#PAGE_HEADERFONT_COLOR#</li>
<li>#PAGE_HEADER_FONT_FAMILY#</li>
<li>#PAGE_HEADER_FONT_SIZE#</li>
<li>#PAGE_HEADER_FONT_WEIGHT#</li>
<li>#PAGE_FOOTER#</li>
<li>#PAGE_FOOTER_FONT_COLOR#</li>
<li>#PAGE_FOOTER_FONT_FAMILY#</li>
<li>#PAGE_FOOTER_FONT_SIZE#</li>
<li>#PAGE_FOOTER_FONT_WEIGHT#</li>
<li>#PAGE_WIDTH#</li>
<li>#PAGE_HEIGHT#</li>
<li>#HEADER_BG_COLOR#</li>
<li>#HEADER_FONT_COLOR#</li>
<li>#HEADER_FONT_FAMILY#</li>
<li>#HEADER_FONT_SIZE#</li>
<li>#HEADER_FONT_WEIGHT#</li>
<li>#BODY_BG_COLOR#</li>
<li>#BODY_FONT_COLOR#</li>
<li>#BODY_FONT_FAMILY#</li>
<li>#BODY_FONT_SIZE#</li>
<li>#BODY_FONT_WEIGHT#</li>
<li>#BORDER_WIDTH#</li>
</ul>
<p>In order to make the report layout generic, there are additional sub templates defined that specify the layout for each individual column, column heading and column width. At runtime, those sub templates are dynamically assembled and included in the main report layout automatically by substituting the following strings: </p>
<ul>
<li>#PRN_TABLE_CELLS#</li>
<li>#PRN_TEMPLATE_BODY_ROW#</li>
<li>#PRN_TEMPLATE_HEADER_ROW#</li>
</ul>~');
    --
    l_property_id := 1656;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'REPORT_LAYOUT_REPORT_COLUMN_HEADING',
        p_prompt               => 'Column Heading',
        p_property_type        => 'TEXT EDITOR',
        p_db_column            => 'XSLFO_COLUMN_HEADING_TEMPLATE',
        p_display_length       => 96,
        p_max_length           => 32000,
        p_display_group_name   => 'TEMPLATES',
        p_help_text            => q'~The report column heading defines the look of each cell in the report heading row.~' );
    --
    l_property_id := 1657;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REPORT_LAYOUT_COLUMN_TEMPLATE_WIDTH',
        p_prompt             => 'Column Width',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'XSLFO_COLUMN_TEMPLATE_WIDTH',
        p_display_length     => 96,
        p_max_length         => 32000,
        p_display_group_name => 'TEMPLATES',
        p_help_text          => q'~
The report column width is computed at runtime time or can be derived from the report column definition of a report region. ~' );
    --
    l_property_id := 1658;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REPORT_LAYOUT_COLUMN_TEMPLATE',
        p_prompt             => 'Column',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'XSLFO_COLUMN_TEMPLATE',
        p_display_length     => 96,
        p_max_length         => 32000,
        p_display_group_name => 'TEMPLATES',
        p_help_text          => q'~The report column defines the look of each cell for all report rows. ~' );
    --
    l_property_id := 1659;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FC_FILTER_VALUES',
        p_prompt             => 'Client-Side Filtering',
        p_property_type      => 'YES NO',
        p_db_column          => 'FC_FILTER_VALUES',
        p_display_group_name => 'LIST_ENTRIES',
        p_help_text          => q'~Specify whether to allow client-side filtering of the list entries for the filter. When set to <strong>On</strong>, a search field will render above the list entries, to allow end users to filter the list.~' );
    --
    l_property_id := 1660;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DUE_ON_TYPE',
        p_prompt             => 'Due On Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DUE_ON_TYPE',
        p_display_group_name => 'DEADLINE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how the Due On Type is populated.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Interval',
        p_return_value  => 'INTERVAL',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'SQL_QUERY' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Expression',
        p_return_value  => 'EXPRESSION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body',
        p_return_value  => 'FUNCTION_BODY' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scheduler Expression',
        p_return_value  => 'SCHEDULER_EXPRESSION' );
    --
    l_property_id := 1661;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DUE_ON_INTERVAL_VALUE',
        p_prompt             => 'Interval',
        p_property_type      => 'TEXT',
        p_db_column          => 'DUE_ON_INTERVAL',
        p_display_length     => 80,
        p_max_length         => 255,
        p_display_group_name => 'DEADLINE',
        p_help_text          => q'~Enter the ISO or SQL interval used as the source for this due on value.~' );
    --
    l_property_id := 1662;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DUE_ON_SCHEDULER_VALUE',
        p_prompt             => 'Scheduler Expression',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'DUE_ON_INTERVAL',
        p_display_length     => 80,
        p_max_length         => 255,
        p_display_group_name => 'DEADLINE',
        p_help_text          => q'~Enter the Scheduler Calendar Expression used as the source for this due on value.~' );
    --
    l_property_id := 1663;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'DUE_ON_QUERY_VALUE',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'DUE_ON_INTERVAL',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_display_group_name   => 'DEADLINE',
        p_help_text            => q'~Enter the SQL Query used as the source for this due on value. If more than one row is returned then the value of the first row is used.~');
    --
    l_property_id := 1664;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOG_MESSAGE_TYPE',
        p_prompt             => 'Log Message Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOG_MESSAGE_TYPE',
        p_display_group_name => 'ERROR_HANDLING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of action message that gets logged to the task history.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'NONE',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Success',
        p_return_value  => 'SUCCESS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Failure',
        p_return_value  => 'FAILURE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'All',
        p_return_value  => 'ALL' );
    --
    l_property_id := 1665;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NAME_HIDDEN',
        p_prompt             => 'Name Hidden',
        p_property_type      => 'HIDDEN',
        p_is_query_only      => true,
        p_db_column          => 'NAME_HIDDEN',
        p_display_group_name => 'IDENTIFICATION',
        p_is_translatable    => false );
    --
    l_property_id := 1666;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BEFORE_EXPIRE_INTERVAL',
        p_prompt             => 'Before Expiration Interval',
        p_property_type      => 'TEXT',
        p_db_column          => 'BEFORE_EXPIRE_INTERVAL',
        p_display_group_name => 'EXECUTION',
        p_help_text          => q'~The interval in ISO or SQL format.~' );
    --
    l_property_id := 1667;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXPIRATION_POLICY',
        p_prompt             => 'Expiration Policy',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'EXPIRATION_POLICY',
        p_display_group_name => 'EXECUTION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~The action to perform when the Task is overdue.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'NONE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Expire',
        p_return_value  => 'EXPIRE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Renew',
        p_return_value  => 'RENEW' );
    --
    l_property_id := 1668;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAX_RENEWAL_COUNT',
        p_prompt             => 'Maximum Renewal Count',
        p_min_value          => 1,
        p_max_value          => 99,
        p_property_type      => 'NUMBER',
        p_db_column          => 'MAX_RENEWAL_COUNT',
        p_display_group_name => 'DEADLINE',
        p_help_text          => q'~Specify the maximum renewal count of a Task.~' );
    --
    l_property_id := 1669;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USE_LANDMARK',
        p_prompt             => 'Use Landmark',
        p_property_type      => 'YES NO',
        p_db_column          => 'USE_LANDMARK',
        p_display_group_name => 'ACCESSIBILITY',
        p_help_text          => q'~
    <p>Determines if this region should be exposed as a landmark. For more information on landmarks, see <a rel="noopener noreferrer" href="#SYSTEM_HELP_URL#CSH:pd-use-landmark" target="_blank">Page Structure - Landmarks</a>.</p>~' );
    --
    l_property_id := 1670;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LANDMARK_TYPE',
        p_prompt             => 'Landmark Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LANDMARK_TYPE',
        p_display_group_name => 'ACCESSIBILITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~
<p>There are 8 different landmark types available to use. 7 of the 8 have specific meanings and will be suitable under certain circumstances (eg "search" for a region containing search functionality, "navigation" for a region containing navigation functionality). The final type is "region", which is suitable in the case where no specific landmark is appropriate, but where you still want to include the region as a landmark on the page.</p>
<p>For more information on landmarks, see <a rel="noopener noreferrer" href="#SYSTEM_HELP_URL#CSH:pd-landmark-type" target="_blank">Page Structure - Landmarks</a>.</p>
~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Banner',
        p_return_value  => 'banner',
        p_help_text     => q'~
<p>A <code>banner</code> landmark identifies application-oriented content at the beginning of each page within your APEX application.
Within APEX, this will usually be everything contained within the top bar, for example application logo, name and navigation bar controls,
(but this could vary depending on your application, the theme you are using, or the template).
<p>Pages will usually only have one <code>banner</code> landmark, and the most common pattern for APEX pages will be for this <code>banner</code>
landmark to come from the page template, meaning defining page regions as <code>banner</code> regions in APEX will likely be rare.</p>
~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Complementary',
        p_return_value  => 'complementary',
        p_help_text     => q'~
<p>A <code>complementary</code> landmark is a supporting section of a page, designed to be <code>complementary</code> to the main
content at a similar level in the DOM hierarchy, but remains meaningful when separated from the main content.</p>
~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Content Info',
        p_return_value  => 'contentinfo',
        p_help_text     => q'~
<p>A <code>contentinfo</code> landmark is a way to identify common information at the bottom of each page of an application, typically
called the "footer" of the page.</p>
<p>Pages will usually only have one <code>contentinfo</code> landmark, and the most common pattern for APEX pages will be for this <code>contentinfo</code>
landmark to come from the page template, meaning defining page regions as <code>contentinfo</code> regions in APEX will likely be rare.</p>
~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Form',
        p_return_value  => 'form',
        p_help_text     => q'~
<p>A <code>form</code> landmark identifies a region that contains a collection of elements (usually page items and buttons) that, as a whole, combine to create a form when no other named landmark is appropriate (e.g. main or search).</p>
~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Main',
        p_return_value  => 'main',
        p_help_text     => q'~
<p>A <code>main</code> landmark identifies the primary content of the page.</p>
<p>Each page should have one <code>main</code> landmark, and the most common pattern for APEX pages will be for this <code>main</code>
landmark to come from the page template, meaning usually there will be no need to define individual regions as <code>main</code>
landmarks.</p>
~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Navigation',
        p_return_value  => 'navigation',
        p_help_text     => q'~
<p><code>Navigation</code> landmarks provide a way to identify groups (e.g. lists) of links that are intended to be used for application
or page content navigation.</p>
~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region',
        p_return_value  => 'region',
        p_help_text     => q'~
<p>A <code>region</code> landmark is a perceivable section containing content that is relevant to a specific purpose and sufficiently
important that users will likely want to be able to navigate to the section easily and to have it listed in a summary of the page.
This is probably the most common landmark type for APEX regions.</p>
<p>The <code>region</code> landmark can be used to identify content that the other named landmarks do not appropriately describe.</p>
~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Search',
        p_return_value  => 'search',
        p_help_text     => q'~
<p>A <code>search</code> landmark contains a collection of elements (usually page items and buttons) that, as a whole, combine to create
search functionality to content in the application.</p>
~' );
    --
    /*
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Exclude Landmark',
        p_return_value  => 'exclude_landmark',
        p_help_text     => q'~When selected, this region will not be exposed as a landmark to screen reader users. This could be useful for example if the region is just used for organisational purposes in Page Designer.~' );
    */
    --
    l_property_id := 1671;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LANDMARK_LABEL',
        p_prompt             => 'Landmark Label',
        p_property_type      => 'TEXT',
        p_db_column          => 'LANDMARK_LABEL',
        p_display_length     => 80,
        p_max_length         => 255,
        p_display_group_name => 'ACCESSIBILITY',
        p_is_translatable    => true,
        p_help_text          => q'~
<p>Define a custom label for the landmark. Note: If no label is defined, the region title will be used as the landmark label. For more information on landmarks, see <a rel="noopener noreferrer" href="#SYSTEM_HELP_URL#CSH:pd-landmark-label" target="_blank">Page Structure - Landmarks</a>.</p>
<p>It is important to provide good labels that truly improve user experience. Good labels are defined as follows:
<ul>
<li>Unique on a page, and not too long (preferably 3 words or less).</li>
<li>Accurately describe the purpose of the contents of the region, for example 'Edit Employee', or 'Useful Links'.</li>
<li>Do not use the landmark role in the label, for example the label for a navigation landmark for an application should just be 'Application', rather than 'Application Navigation', to avoid screen readers announcing 'navigation' twice.</li>
</ul>
</p>
~' );
    --
    l_property_id := 1672;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'META_TAG_NAME',
        p_prompt             => 'Name',
        p_property_type      => 'COMBOBOX',
        p_lov_type           => 'STATIC',
        p_db_column          => 'META_TAG_NAME',
        p_display_length     => 80,
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~The name of the meta tag identifies the type of content this meta tag is representing.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'description',
        p_return_value  => 'description',
        p_help_text     => q'~A brief description of the page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'og:type',
        p_return_value  => 'og:type',
        p_help_text     => q'~Open Graph Protocol: The type of page you are sharing. (e.g., article, website, etc.).~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'og:title',
        p_return_value  => 'og:title',
        p_help_text     => q'~Open Graph Protocol: The title of your page as it should appear within the graph.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'og:description',
        p_return_value  => 'og:description',
        p_help_text     => q'~Open Graph Protocol: A brief description of the page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'og:image',
        p_return_value  => 'og:image',
        p_help_text     => q'~Open Graph Protocol: An image URL which should represent the page within the graph.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'og:url',
        p_return_value  => 'og:url',
        p_help_text     => q'~Open Graph Protocol: The canonical URL of the page that will be used as its permanent ID in the graph.~' );
    --
    l_property_id := 1673;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'META_TAG_VALUE',
        p_prompt             => 'Value',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'META_TAG_VALUE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'IDENTIFICATION',
        p_is_translatable    => true,
        p_help_text          => q'~The value of the meta tag.~' );
    --
    l_property_id := 1701;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_PREFIX',
        p_prompt             => 'Search Query Prefix',
        p_property_type      => 'TEXT',
        p_db_column          => 'SEARCH_PREFIX',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Prefix a search term to only evaluate it for specific search configurations.~' );
    --
    l_property_id := 1702;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_TYPE',
        p_prompt             => 'Search Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SEARCH_TYPE',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of search for this configuration.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Simple (APEX Data Source)',
        p_return_value  => 'SIMPLE',
        p_help_text     => q'~Use an APEX Data Source (local, REST Enabled SQL, or REST Data Source).~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Oracle Vector Search',
        p_return_value  => 'VECTOR',
        p_help_text     => q'~
Search using an Oracle Vector Search (requires Oracle Database 23ai or later).<br/>
Requires a Vector Provider which will be used to get the embedding of a search phrase.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Oracle Text (Manual)',
        p_return_value  => 'TEXT_MANUAL',
        p_help_text     => q'~Search using a manually maintained Oracle Text index.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Oracle Ubiquitous Search',
        p_return_value  => 'TEXT_DBMS_SEARCH',
        p_help_text     => q'~
Search using an Oracle Ubiquitous Search index (requires Oracle Database 23ai or later).<br/>
<em>The index must be located in the parsing schema of the application.</em>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'APEX List',
        p_return_value  => 'APEX_LIST',
        p_help_text     => q'~Search within an APEX List.~' );
    --
    l_property_id := 1703;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ORACLE_TEXT_INDEX_COLUMN_NAME',
        p_prompt             => 'Oracle Text Index Column',
        p_property_type      => 'TEXT',
        p_db_column          => 'ORATEXT_INDEX_COLUMN_NAME',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Identify the name of the Oracle Text index to use for search.~' );
    --
    l_property_id := 1704;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ORACLE_TEXT_INDEX_NAME',
        p_prompt             => 'Oracle Text Index Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'ORATEXT_INDEX_NAME',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Identify the name of the Oracle Text or Ubiquitous Search index to use for search.~' );
    --
    l_property_id := 1705;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCHABLE_COLUMNS',
        p_prompt             => 'Searchable Columns',
        p_property_type      => 'TEXT',
        p_db_column          => 'SEARCHABLE_COLUMNS',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Provide a list of columns to include when searching.~' );
    --
    l_property_id := 1706;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WEB_SRC_FUNCTION',
        p_prompt             => 'REST Source Query Function',
        p_property_type      => 'TEXT',
        p_db_column          => 'WEB_SRC_FUNCTION',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Provide the name of a function to convert the end user query to syntax which the REST Source understands.~' );
    --
    l_property_id := 1707;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_PK1_COLUMN_NAME',
        p_prompt             => 'Primary Key 1 Column Name',
        p_property_type      => 'COLUMN',
        p_db_column          => 'PK_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the first primary key column from the search data source. If the primary key of this table has more than two columns, the query must provide a <code>ROWID</code> column.~' );
    --
    l_property_id := 1708;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_PK2_COLUMN_NAME',
        p_prompt             => 'Primary Key 2 Column Name',
        p_property_type      => 'COLUMN',
        p_db_column          => 'PK2_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the second primary key column from the search data source. If the primary key of this table has more than two columns, the query must provide a <code>ROWID</code> column.~' );
    --
    l_property_id := 1709;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_TITLE_COLUMN_NAME',
        p_prompt             => 'Title Column Name',
        p_property_type      => 'COLUMN',
        p_db_column          => 'TITLE_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Identify the column which contains content to display as the search result title.~' );
    --
    l_property_id := 1710;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_SUBTITLE_COLUMN_NAME',
        p_prompt             => 'Subtitle Column Name',
        p_property_type      => 'COLUMN',
        p_db_column          => 'SUBTITLE_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Identify the column which contains content to display as the search result subtitle.~' );
    --
    l_property_id := 1711;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_DESCR_COLUMN_NAME',
        p_prompt             => 'Description Column Name',
        p_property_type      => 'COLUMN',
        p_db_column          => 'DESCRIPTION_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Identify the column which contains content to display as the search result description.~' );
    --
    l_property_id := 1712;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_BADGE_COLUMN_NAME',
        p_prompt             => 'Badge Column Name',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BADGE_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Identify the column which contains content to display as the search result badge.~' );
    --
    l_property_id := 1713;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_LAST_MODIFIED_COLUMN_NAME',
        p_prompt             => 'Last Modified Column Name',
        p_property_type      => 'COLUMN',
        p_db_column          => 'LAST_MODIFIED_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Identify the column which contains content to display as the search result last modfied timestamp.~' );
    --
    l_property_id := 1714;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_CUSTOM_01_COLUMN_NAME',
        p_prompt             => 'Custom Column Name 1',
        p_property_type      => 'COLUMN',
        p_db_column          => 'CUSTOM_01_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Identify the column which contains content to display as the search result custom attribute "1".~' );
    --
    l_property_id := 1715;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_CUSTOM_02_COLUMN_NAME',
        p_prompt             => 'Custom Column Name 2',
        p_property_type      => 'COLUMN',
        p_db_column          => 'CUSTOM_02_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Identify the column which contains content to display as the search result custom attribute "2".~' );
    --
    l_property_id := 1716;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_CUSTOM_03_COLUMN_NAME',
        p_prompt             => 'Custom Column Name 3',
        p_property_type      => 'COLUMN',
        p_db_column          => 'CUSTOM_03_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Identify the column which contains content to display as the search result custom attribute "3".~' );
    --
    l_property_id := 1717;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_SCORE_COLUMN_NAME',
        p_prompt             => 'Score Column Name',
        p_property_type      => 'COLUMN',
        p_db_column          => 'SCORE_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Identify the column which contains the result score. This is useful to provide a result score also Search Configurations not based on Oracle Text.~' );
    --
    l_property_id := 1718;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SIMPLE_SOURCE_QUERY_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'QUERY_TYPE',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how the data is queried.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Table / View',
        p_return_value  => 'TABLE',
        p_help_text     => q'~The data is retrieved based on a table or view.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'SQL',
        p_help_text     => q'~The data is retrieved based on a SQL Query.~' );
    --
    l_property_id := 1719;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_TEXT_TABLE_OWNER',
        p_prompt             => 'Table Owner',
        p_property_type      => 'OWNER',
        p_db_column          => 'QUERY_OWNER',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Select the schema that owns the table.~' );
    --
    l_property_id := 1720;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_TEXT_TABLE_NAME',
        p_prompt             => 'Table Name',
        p_property_type      => 'TABLE',
        p_db_column          => 'QUERY_TABLE',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Enter the case-sensitive table or view name. You can type in the name or pick from the list.~' );
    --
    l_property_id := 1721;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_TEXT_SQL_QUERY',
        p_prompt             => 'SQL Query',
        p_property_type      => 'SQL',
        p_db_column          => 'QUERY_SOURCE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Enter the SQL query for the search text.~' );
    --
    l_property_id := 1722;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'SEARCH_CONFIG_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_search_config,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~You may base the search config definition on an existing search config in this application or another in your workspaces schema.~' );
    --
    l_property_id := 1723;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ORACLE_DBMS_SEARCH_INDEX_OWNER',
        p_prompt             => 'Search Index Owner',
        p_property_type      => 'OWNER',
        p_db_column          => 'ORATEXT_INDEX_OWNER',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Choose an owner that has an Oracle Ubiquitous Search index. Only schemas are listed for which you also have object privileges.~' );
    --
    l_property_id := 1724;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ORACLE_DBMS_SEARCH_INDEX_NAME',
        p_prompt             => 'Search Index Name',
        p_property_type      => 'TABLE', -- limited to Ubiquitous Search indexes
        p_db_column          => 'ORATEXT_INDEX_NAME',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Choose an Oracle Ubiquitous Search index, this index must already exist in your parsing schema.~' );
    --
    l_property_id := 1725;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ORACLE_DBMS_SEARCH_SOURCE_OWNER',
        p_prompt             => 'Search Source Owner',
        p_property_type      => 'OWNER',
        p_db_column          => 'QUERY_OWNER',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Choose an owner. Only schemas are listed for which a data source exists for the selected Oracle Ubiquitous Search index.~' );
    --
    l_property_id := 1726;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ORACLE_DBMS_SEARCH_SOURCE_NAME',
        p_prompt             => 'Search Source Name',
        p_property_type      => 'TABLE', -- limited to Ubiquitous Search index source tables
        p_db_column          => 'QUERY_TABLE',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Choose an Oracle Ubiquitous Search index source from your parsing schema which is part of your selected Oracle Ubiquitous Search index.~' );
    --
    l_property_id := 1727;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VECTOR_OWNER',
        p_prompt             => 'Table Owner',
        p_property_type      => 'OWNER',
        p_db_column          => 'QUERY_OWNER',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Select the owner of the table that contains the vector column to be used for the search configuration.~' );
    --
    l_property_id := 1728;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VECTOR_TABLE',
        p_prompt             => 'Table Name',
        p_property_type      => 'TABLE',
        p_db_column          => 'QUERY_TABLE', -- filtered by tables with vector columns
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Select the table that contains the vector column to be used for the search configuration.~' );
    --
    l_property_id := 1729;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VECTOR_SQL_QUERY',
        p_prompt             => 'SQL Query',
        p_property_type      => 'SQL',
        p_db_column          => 'QUERY_SOURCE',
        p_display_length     => 60,
        p_max_length         => 32767,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Enter the SQL query for the search text.~' );
    --
    l_property_id := 1730;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'VECTOR_PROVIDER',
        p_prompt                => 'Provider',
        p_property_type         => 'SELECT LIST',
        p_db_column             => 'EMB_AI_PROVIDER_ID',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_vector_provider,
        p_display_group_name    => 'VECTOR_ATTRIBUTES',
        p_help_text             => q'~Select a Vector Provider that will be used to get an embedding for a given search term.
The search term must be converted using the same embedding model as for the dataset in your table.~' );
    --
    l_property_id := 1731;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VECTOR_COLUMN',
        p_prompt             => 'Column Name',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ORATEXT_INDEX_COLUMN_NAME',
        p_display_group_name => 'VECTOR_ATTRIBUTES',
        p_help_text          => q'~Select the vector column. For similarity searches through approximate method, there must be a vector index for this column.~' );
    --
    l_property_id := 1732;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VECTOR_SEARCH_TYPE',
        p_prompt             => 'Search Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VECTOR_SEARCH_TYPE',
        p_display_group_name => 'VECTOR_ATTRIBUTES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Choose between exact and approximate similarity searches.
For similarity searches through approximate method, a vector index is required.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Exact',
        p_return_value  => 'EXACT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Approx',
        p_return_value  => 'APPROX' );
    --
    l_property_id := 1733;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VECTOR_DISTANCE_METRIC',
        p_prompt             => 'Distance Metric',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DISTANCE_METRIC',
        p_display_group_name => 'VECTOR_ATTRIBUTES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Choose the distance metric to determine how similar, or dissimilar, two vectors are.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cosine',
        p_return_value  => 'COSINE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dot',
        p_return_value  => 'DOT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Euclidean',
        p_return_value  => 'EUCLIDEAN' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Euclidean Squared',
        p_return_value  => 'EUCLIDEAN_SQUARED' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hamming',
        p_return_value  => 'HAMMING' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Manhattan',
        p_return_value  => 'MANHATTAN' );
    --
    l_property_id := 1734;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VECTOR_TARGET_ACCURACY',
        p_prompt             => 'Target Accuracy',
        p_property_type      => 'INTEGER',
        p_min_value          => 1,
        p_max_value          => 100,
        p_db_column          => 'TARGET_ACCURACY',
        p_display_length     => 32,
        p_max_length         => 255,
        p_display_group_name => 'VECTOR_ATTRIBUTES',
        p_help_text          => q'~Specify a target accuracy percentage value for an approximate search to influence the number of candidates considered to probe the search.~' );
    --
    l_property_id := 1735;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VECTOR_MAXIMUM_VECTOR_DISTANCE',
        p_prompt             => 'Maximum Vector Distance',
        p_property_type      => 'INTEGER',
        p_db_column          => 'MAX_VECTOR_DISTANCE',
        p_display_length     => 32,
        p_max_length         => 255,
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Select a maximum vector distance for your search result.~' );
    --
    l_property_id := 1751;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SEARCH_CONFIGURATION',
        p_prompt                => 'Search Configuration',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'SEARCH_CONFIG_ID',
        p_display_group_name    => 'IDENTIFICATION',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_search_config,
        p_help_text             => q'~Select a Search Configuration (Shared Component) to search within.~' );
    --
    l_property_id := 1752;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'USE_AS_INITIAL_RESULT',
        p_prompt                => 'Use as Initial Result',
        p_property_type         => 'YES NO',
        p_db_column             => 'USE_AS_INITIAL_RESULT',
        p_display_group_name    => 'IDENTIFICATION',
        p_help_text             => q'~If enabled, the results from this Search Configuration will be displayed as "initial" results, when no query was entered.~' );
    --
    l_property_id := 1753;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'OVERRIDE_LABEL',
        p_prompt                => 'Override Label',
        p_property_type         => 'TEXT',
        p_db_column             => 'OVERRIDE_LABEL',
        p_display_group_name    => 'APPEARANCE',
        p_help_text             => q'~Specify a Label to use instead of the label configured in the Search Configuration.~' );
    --
    l_property_id := 1754;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'MAX_RESULTS',
        p_prompt                => 'Maximum Results',
        p_property_type         => 'INTEGER',
        p_min_value             => 1,
        p_db_column             => 'MAX_RESULTS',
        p_display_group_name    => 'APPEARANCE',
        p_help_text             => q'~Specify the maximum of results to show from this Search Configuration.~' );
    --
    l_property_id := 1755;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'ICON_URL',
        p_prompt                => 'Icon URL',
        p_property_type         => 'TEXT',
        p_db_column             => 'ICON_URL',
        p_display_group_name    => 'CONFIGURATION',
        p_help_text             => q'~Identifies the icon URL.~' );
    --
    l_property_id := 1756;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SCREENSHOT_URL',
        p_prompt                => 'Screenshot URL',
        p_property_type         => 'TEXT',
        p_db_column             => 'SCREENSHOT_URL',
        p_display_group_name    => 'CONFIGURATION',
        p_help_text             => q'~Identifies the screenshot URL.~' );

    --
    l_property_id := 1757;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_ITEM_DATA_TYPE',
        p_prompt             => 'Data Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DATA_TYPE',
        p_display_length     => 32,
        p_max_length         => 128,
        p_display_group_name => 'SESSION_STATE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the data type of the page item.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'VARCHAR2',
        p_return_value  => 'VARCHAR2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CLOB',
        p_return_value  => 'CLOB' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'NUMBER',
        p_return_value  => 'NUMBER',
        p_is_internal   => 'Y' );
    --
    l_property_id := 1758;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_COLUMN_SESSION_STATE_DATA_TYPE',
        p_prompt             => 'Data Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SESSION_STATE_DATA_TYPE',
        p_display_length     => 32,
        p_max_length         => 128,
        p_display_group_name => 'SESSION_STATE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the data type of the region column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'VARCHAR2',
        p_return_value  => 'VARCHAR2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CLOB',
        p_return_value  => 'CLOB' );
    --
    l_property_id := 1759;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'PARENT_PROCESS',
        p_prompt                => 'Execution Chain',
        p_property_type         => 'SELECT LIST',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_page_process,
        p_db_column             => 'PARENT_PROCESS_ID',
        p_display_group_name    => 'IDENTIFICATION',
        p_help_text             => q'~Defines the execution chain this process is a part of.~' );
    --
    l_property_id := 1760;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'INTERNAL_UID',
        p_prompt                => 'Internal ID',
        p_property_type         => 'HIDDEN',
        p_db_column             => 'INTERNAL_UID',
        p_display_group_name    => 'IDENTIFICATION',
        p_help_text             => q'~Stores the internal ID of a component.~' );
    --
    l_property_id := 1761;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAX_SCHEDULER_JOBS',
        p_prompt             => 'Maximum Background Page Process Jobs',
        p_property_type      => 'INTEGER',
        p_db_column          => 'MAX_SCHEDULER_JOBS',
        p_min_value          => 0,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Provide the maximum number of scheduler jobs being available for background execution of page processes for this application. Only the configured number of jobs will run at the same time, to execute page processes for this application in the background. If the configured maximum amount of scheduler jobs is active, new submitted executions will wait until a job becomes available.</p><p>Setting the attribute to zero disables background executions; new submitted executions will stay in enqueued state.</p>~');
    --
    l_property_id := 1762;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PWA_IS_PUSH_ENABLED',
        p_prompt             => 'Enable Push Notifications',
        p_property_type      => 'YES NO',
        p_db_column          => 'PWA_IS_PUSH_ENABLED',
        p_display_group_name => 'PWA',
        p_help_text          => q'~
<p>Web push notifications are a way for web apps to send notifications to a user's device even when the user is not currently on the website. These notifications can be sent to a user's desktop or mobile device, and can be used to alert the user to new content or events on the website, or to re-engage the user with the website.</p>
<p>Enabling this option will:</p>
<ul>
<li>Add a new navigation bar entry: User Settings</li>
<li>Allow users to subscribe and unsubscribe to push notifications.</li>
<li>When subscribed, users can receive push notifications from the APEX app.</li>
</ul>~' );
    --
    l_property_id := 1763;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'PWA_PUSH_CREDENTIAL_ID',
        p_prompt                => 'PWA Push Notifications Credentials',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'PWA_PUSH_CREDENTIAL_ID',
        p_display_group_name    => 'PWA',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_credential,
        p_help_text             => q'~
<p>Credentials are required to setup push notification securely. A public and private key pair are used respectively to allow users to subscribe to push notifications on the client side, and for the server to send the notifications to the subscribers.</p>
<p>Select the credential to authenticate against. To edit the credential, navigate to <strong>Web Credentials</strong> in <strong>Workspace Utilities</strong></p>.~' );
    --
    l_property_id := 1764;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PWA_VAPID_CONTACT_INFO',
        p_prompt             => 'Contact Email',
        p_property_type      => 'TEXT',
        p_db_column          => 'PWA_VAPID_CONTACT_INFO',
        p_display_length     => 80,
        p_max_length         => 255,
        p_display_group_name => 'PWA',
        p_help_text          => q'~
<p>Enter the email address to contact in case the push notification service provider (Google, Mozilla, Apple, etc.) wants to contact the owner of the application. We recommend using a group email so it's not dependent on a single individual.</p>~' );
    --
    l_property_id := 1765;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OPENAPI_URL',
        p_prompt             => 'OpenAPI URL',
        p_property_type      => 'TEXT',
        p_db_column          => 'OPENAPI_URL',
        p_display_length     => 80,
        p_max_length         => 500,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Enter the URL where the OpenAPI information is available. This can be an absolute URL or an URL relative to the Base URL of the service.</p>~');
    --
    l_property_id := 1767;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALIDATION_REGEXP',
        p_prompt             => 'Regex Pattern',
        p_property_type      => 'TEXT',
        p_db_column          => 'VALIDATION_REGEXP',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Specify a regular expression pattern to validate values with.~' );
    --
    l_property_id := 1768;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WEB_SRC_PARAM_DATA_TYPE',
        p_prompt             => 'Data Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DATA_TYPE',
        p_display_group_name => 'PARAMETER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Data type of the REST Source Parameter.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'String',
        p_return_value  => 'VARCHAR2',
        p_help_text     => '<p>String values contain alphanumeric data.</p>');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Numeric',
        p_return_value  => 'NUMBER',
        p_help_text     => '<p>Numeric values are decimal or integer values.</p>');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Date',
        p_return_value  => 'DATE',
        p_help_text     => '<p>Date values contain date and time, but neither fractional seconds nor time zone information.</p>');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Timestamp',
        p_return_value  => 'TIMESTAMP',
        p_help_text     => '<p>Timestamp values contain date and time (including fractional seconds), but no time zone information.</p>');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Timestamp with Time Zone',
        p_return_value  => 'TIMESTAMP WITH TIME ZONE',
        p_help_text     => '<p>Timestamp with Time Zone values contain date and time (including fractional seconds), as well as time zone information.</p>');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Boolean',
        p_return_value  => 'BOOLEAN',
        p_help_text     => '<p>Boolean values contain <strong>true</strong> or <strong>false</strong>. Use the <strong>Format Mask</strong> to convert values like <code>''Y'',''N''</code>, or  <code>''1'',''0''</code> to boolean values.</p>');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Binary',
        p_return_value  => 'BLOB',
        p_help_text     => '<p>Binary content contains non-text (image, raw bytes) data, and are represented as a String in <em>Base64</em> format.</p>');
    --
    l_property_id := 1769;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'APP_ITEM_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_app_item,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Use this field to base this application item on an existing application item in another application in your workspace.~' );
    --
    l_property_id := 1770;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'APP_PROCESS_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_app_process,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Use this field to base this application process on an existing application process in another application in your workspace.~' );
    --
    l_property_id := 1771;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'APP_COMPUTATION_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_app_computation,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Use this field to base this application computation on an existing application computation in another application in your workspace.~' );
    --
    l_property_id := 1772;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'BUILD_OPTION_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_build_option,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Use this field to base this build option on an existing build option in another application in your workspace.~' );
    --
    l_property_id := 1773;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'TEXT_MESSAGE_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_text_message,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Use this field to base this text message on an existing text message in another application in your workspace.~' );
    --
    l_property_id := 1774;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'ACL_ROLE_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_acl_role,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Use this field to base this role on an existing role in another application in your workspace.~' );
    --
    l_property_id := 1775;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VERSION_SCN',
        p_prompt             => 'Version Number',
        p_property_type      => 'NUMBER',
        p_db_column          => 'VERSION_SCN',
        p_display_group_name => 'SUBSCRIPTION',
        p_help_text          => q'~Use this field to identify the current version of the data.~' );
    --
    l_property_id := 1776;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'EMAIL_TEMPLATE_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_email_template,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Use this field to base this email template on an existing email template in another application in your workspace.~' );
    --
    l_property_id := 1777;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'REPORT_LAYOUT_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_report_layout,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Use this field to base this report layout on an existing report layout in another application in your workspace.~' );
    --
    l_property_id := 1778;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'APP_SETTING_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_app_setting,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Use this field to base this application setting on an existing application setting in another application in your workspace.~' );
    --
    l_property_id := 1779;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'COMPONENT_SETTING_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_plugin_setting,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Use this field to base these component settings on existing component settings in another application in your workspace.~' );
    --
    l_property_id := 1785;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WORKING_COPY_CREATED_ON',
        p_prompt             => 'Created On',
        p_property_type      => 'TEXT',
        p_db_column          => 'WORKING_COPY_CREATED_ON',
        p_display_group_name => 'WORKING_COPY',
        p_is_searchable      => false,
        p_help_text          => q'~Displays the date the working copy was created on.~' );
    --
    l_property_id := 1786;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WORKING_COPY_CREATED_BY',
        p_prompt             => 'Created By',
        p_property_type      => 'TEXT',
        p_db_column          => 'WORKING_COPY_CREATED_BY',
        p_display_group_name => 'WORKING_COPY',
        p_is_searchable      => false,
        p_help_text          => q'~Displays the user who created the working copy.~' );
    --
    l_property_id := 1787;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WORKING_COPY_NAME',
        p_prompt             => 'Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'WORKING_COPY_NAME',
        p_max_length         => 40,
        p_display_group_name => 'WORKING_COPY',
        p_help_text          => q'~Use this field to identify the working copy.~' );
    --
    l_property_id := 1788;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WORKING_COPY_DESCRIPTION',
        p_prompt             => 'Description',
        p_property_type      => 'TEXT EDITOR',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_db_column          => 'WORKING_COPY_DESCRIPTION',
        p_display_group_name => 'WORKING_COPY',
        p_help_text          => q'~Use this field to provide more detailed information about the purpose of the working copy.~' );
    --
    l_property_id := 1790;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_TEMPLATE_CLASS',
        p_prompt             => 'Class',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'THEME_CLASS_ID',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Identifies a specific usage for this button template.<br>
When you switch to a new theme, all button templates in one theme are assigned to corresponding button templates in another theme. App Builder accomplishes this template mapping through the assignment of button template class identifiers.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Button',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Button, Alternative 1',
        p_return_value  => '4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Button, Alternative 2',
        p_return_value  => '5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Button, Alternative 3',
        p_return_value  => '2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 1',
        p_return_value  => '6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 2',
        p_return_value  => '7' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 3',
        p_return_value  => '8' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 4',
        p_return_value  => '9' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 5',
        p_return_value  => '10' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 6',
        p_return_value  => '11' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 7',
        p_return_value  => '12' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 8',
        p_return_value  => '13' );
    --
    l_property_id := 1791;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'TEMPLATE_TRANSLATABLE',
        p_prompt                   => 'Translatable',
        p_property_type            => 'YES NO',
        p_db_column                => 'TRANSLATE_THIS_TEMPLATE',
        p_display_group_name       => 'ADVANCED',
        p_help_text                => q'~Tick this setting, if this template contains text strings that require translation.~' );
    --
    l_property_id := 1792;
    store_tmpl_subscription_prop (
        p_property_id           => l_property_id,
        p_name                  => 'BUTTON_TEMPLATE',
        p_lov_component_type_id => c_comp_type_button_template );
    --
    l_property_id := 1793;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PRESET_TEMPLATE_OPTIONS',
        p_prompt                   => 'Preset',
        p_property_type            => 'TEMPLATE OPTIONS',
        p_db_column                => 'PRESET_TEMPLATE_OPTIONS',
        p_display_length           => null,
        p_max_length               => null,
        p_display_group_name       => 'TEMPLATE_OPTIONS',
        p_lov_type                 => 'TEMPLATE_OPTIONS',
        p_lov_component_type_id    => null,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => null );
    --
    l_property_id := 1794;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_TEMPLATE_OPTIONS',
        p_prompt                   => 'Default',
        p_property_type            => 'TEMPLATE OPTIONS',
        p_db_column                => 'DEFAULT_TEMPLATE_OPTIONS',
        p_display_length           => null,
        p_max_length               => null,
        p_display_group_name       => 'TEMPLATE_OPTIONS',
        p_lov_type                 => 'TEMPLATE_OPTIONS',
        p_lov_component_type_id    => null,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => null );
    --
    l_property_id := 1795;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_NORMAL_TEMPLATE',
        p_prompt             => 'Normal',
        p_property_type      => 'HTML',
        p_db_column          => 'TEMPLATE',
        p_display_length     => 40,
        p_max_length         => 4000,
        p_display_group_name => 'TEMPLATES',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Defines the button template that displays if the button type is 'Normal.' You have the option of including standard application substitutions. For example, &amp;ITEM_NAME. values can be substituted at rendering time.</p>
<p>Button templates support the following substitution strings:</p>
<ul>
<li><code>#LABEL#</code> is replaced with a button label.</li>
<li><code>#LINK#</code> is replaced with generated JavaScript code to control the button's behavior. Depending on a button's action, this code could be either a call to <code>apex.submit</code> to submit the page, a <code>redirect</code> to a page, a <code>redirect</code> to some other URL supplied, execution of some custom JavaScript or <code>void(0)</code> to do nothing (where the behavior may be defined separately with Dynamic Actions). Note: The <code>#LINK#</code> prefixes the generated JavaScript code with 'javascript:', so should be used in an <code>href</code> attribute.</li>
<li><code>#JAVASCRIPT#</code> is replaced with generated JavaScript code to control the button's behavior. Depending on a button's Action, this code could be either a call to <code>apex.submit</code> to submit the page, a <code>redirect</code> to a page, a <code>redirect</code> to some other URL supplied, execution of some custom JavaScript or <code>void(0)</code> to do nothing (where the behavior may be defined separately with Dynamic Actions).
<p><strong>Note</strong>: The <code>#JAVASCRIPT#</code> does not prefix the generated JavaScript code with 'javascript:', so should be used in an <code>onclick</code> attribute.</p></li>
<li><code>#BUTTON_ID#</code> is replaced with the ID for the button. This will be either the button's Static ID if defined, or if not will be an internally generated ID in the format <pre>'B' || [Internal Button ID]</pre></li>
<li><code>#BUTTON_CSS_CLASSES#</code> is replaced with the button CSS classes property from the button definition.</li>
<li><code>#BUTTON_ATTRIBUTES#</code> is replaced with the button attributes property from the button definition.</li>
<li><code>#ICON_CSS_CLASSES#</code> is replaced with the icon CSS classes property from the button definition.</li>
<li><code>#BUTTON_NAME#</code> is replaced with the name of the button from the button definition.</li>
<li><code>#ONCLICK#</code> indicates that the button has an onclick event with JavaScript code, which will be included in a script tag at the bottom of the page.</li>
</ul>
<p>All substitution string must be in uppercase.</p>~' );
    --
    l_property_id := 1796;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_HOT_TEMPLATE',
        p_prompt             => 'Hot',
        p_property_type      => 'HTML',
        p_db_column          => 'HOT_TEMPLATE',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'TEMPLATES',
        p_help_text          => q'~<p>Defines the button template that displays if the button type is 'Hot'. You have the option of including standard application substitutions. For example, &amp;ITEM_NAME. values can be substituted at rendering time.</p>
<p>Button templates support the following substitution strings:</p>
<ul>
<li><code>#LABEL#</code> is replaced with a button label.</li>
<li><code>#LINK#</code> is replaced with generated JavaScript code to control the button's behavior. Depending on a button's action, this code could be either a call to <code>apex.submit</code> to submit the page, a <code>redirect</code> to a page, a <code>redirect</code> to some other URL supplied, execution of some custom JavaScript or <code>void(0)</code> to do nothing (where the behavior may be defined separately with Dynamic Actions). Note : The <code>#LINK#</code> prefixes the generated JavaScript code with 'javascript:', so should be used in an <code>href</code> attribute.</li>
<li><code>#JAVASCRIPT#</code> is replaced with generated JavaScript code to control the button's behavior. Depending on a button's Action, this code could be either a call to <code>apex.submit</code> to submit the page, a <code>redirect</code> to a page, a <code>redirect</code> to some other URL supplied, execution of some custom JavaScript or <code>void(0)</code> to do nothing (where the behavior may be defined separately with Dynamic Actions).
<p><strong>Note</strong>: The <code>#JAVASCRIPT#</code> does not prefix the generated JavaScript code with 'javascript:', so should be used in an <code>onclick</code> attribute.</p></li>
<li><code>#BUTTON_ID#</code> is replaced with the ID for the button. This will be either the button's Static ID if defined, or if not will be an internally generated ID in the format <pre>'B' || [Internal Button ID]</pre></li>
<li><code>#BUTTON_CSS_CLASSES#</code> is replaced with the button CSS classes property from the button definition.</li>
<li><code>#BUTTON_ATTRIBUTES#</code> is replaced with the button attributes property from the button definition.</li>
<li><code>#ICON_CSS_CLASSES#</code> is replaced with the icon CSS classes property from the button definition.</li>
<li><code>#BUTTON_NAME#</code> is replaced with the name of the button from the button definition.</li>
<li><code>#ONCLICK#</code> indicates that the button has an onclick event with JavaScript code, which will be included in a script tag at the bottom of the page.</li>
</ul>
<p>All substitution string must be in uppercase.</p>~' );
    --
    l_property_id := 1797;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREADCRUMB_TEMPLATE_CLASS',
        p_prompt             => 'Class',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'THEME_CLASS_ID',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Identifies a specific usage for this template.<br>
When you switch to a new theme, all templates in one theme are assigned to corresponding templates in another theme. App Builder accomplishes this template mapping through the assignment of template class identifiers.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Breadcrumb',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hierarchical',
        p_return_value  => '2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 1',
        p_return_value  => '3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 2',
        p_return_value  => '4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 3',
        p_return_value  => '5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 4',
        p_return_value  => '6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 5',
        p_return_value  => '7' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 6',
        p_return_value  => '8' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 7',
        p_return_value  => '9' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 8',
        p_return_value  => '10' );
    --
    l_property_id := 1798;
    store_tmpl_subscription_prop (
        p_property_id           => l_property_id,
        p_name                  => 'BREADCRUMB_TEMPLATE',
        p_lov_component_type_id => c_comp_type_bc_template );
    --
    l_property_id := 1799;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREADCRUMB_START_WITH',
        p_prompt             => 'Start With',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'START_WITH_NODE',
        p_display_group_name => 'ATTRIBUTES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select a breadcrumb template style. Available options include:
<ul>
<li><strong>Child breadcrumb</strong> displays all breadcrumb entries that are children of the current page parent breadcrumb (that is peers of the current breadcrumb).</li>
<li><strong>Current Breadcrumb</strong> displays all breadcrumb entries in sequence with a common parent</li>.
<li><strong>Parent Breadcrumb</strong> displays all breadcrumb entries for the current page's parent breadcrumb (that is, one level up from current breadcrumb).</li>
<li><strong>Parent to Leaf (breadcrumb style)</strong> displays the current page breadcrumb entry, its parent to the left, and so on until the root node is reached.</li>
</ul>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Child Breadcrumb Entries',
        p_return_value  => 'CHILD_MENU' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Current Breadcrumb',
        p_return_value  => 'CURRENT_MENU' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Parent Breadcrumb Entries',
        p_return_value  => 'PARENT_MENU' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Parent to Leaf (breadcrumb style)',
        p_return_value  => 'PARENT_TO_LEAF' );
    --
    l_property_id := 1800;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'MAP_BKG_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_map_background,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~You may use the map background definition on an existing map background in this application or another in your workspace.~' );
    --
    l_property_id := 1801;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TEMPLATE_IDENTIFIER',
        p_prompt             => 'Identifier',
        p_property_type      => 'TEXT',
        p_db_column          => 'INTERNAL_NAME',
        p_display_length     => 80,
        p_max_length         => 255,
        p_text_case          => 'UPPER',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Template identifier, this is used when switching and upgrading themes and cannot be modified.~' );
    --
    l_property_id := 1802;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_BKG_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'TEXT',
        p_db_column          => 'TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Type of the map tile layer retrieved from a URL.~' );
    --
     store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Raster XYZ Tile Layer',
        p_return_value  => 'RASTER',
        p_help_text     => q'~<p>URL used to fetch a raster tile passing x, y, and z values.</p>You can add your API key if provided, and using the placeholder {api-key} to have its value replaced in the URL, e.g.: http://example.com/path/{api-key}.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Vector Tile Layer',
        p_return_value  => 'VECTOR',
        p_help_text     => q'~URL used to fetch the style.json file contents describing the map tile layer.</p>You can add your API key if provided, and using the placeholder {api-key} to have its value replaced in the URL, e.g.: http://example.com/path/{api-key}.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'OGC WMS',
        p_return_value  => 'OGCWMS',
        p_help_text     => q'~URL used to fetch a map tile layer from the Web Map Service - Open Geospatial Consortium. Pass in the URL with all the required WMS parameters, except the following ones, which are added automatically by the Map Region:
<ul>
    <li>BBOX</li>
    <li>WIDTH</li>
    <li>HEIGHT</li>
    <li>REQUEST</li>
    <li>FORMAT</li>
    <li>SRS / CRS</li>
</ul>
</p><p>
Examples:
<ul>
    <li>https://wms.example.com/wms?service=WMS&version=1.3.0&layers=maplayer&styles=default</li>
    <li>https://wms.example.com/wms?service=WMS&version=1.1.1&layers=countries,rivers</li>
</ul>
</p>You can add your API key if provided, and using the placeholder {api-key} to have its value replaced in the URL, e.g.: http://example.com/path/{api-key}.~' );
    --
    l_property_id := 1803;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_BKG_URL',
        p_prompt             => 'URL',
        p_property_type      => 'TEXT',
        p_db_column          => 'URL',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~URL of the map tile layer resource.~' );
    --
    l_property_id := 1804;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_BKG_ATTRIBUTION',
        p_prompt             => 'Attribution',
        p_property_type      => 'TEXT',
        p_db_column          => 'ATTRIBUTION',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Attribution text to display on the map.~' );
    --
    l_property_id := 1805;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_BKG_API_KEY',
        p_prompt             => 'API Key',
        p_property_type      => 'TEXT',
        p_db_column          => 'API_KEY',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~API Key value that can be set in the URL, if required by the provider.~' );
    --
    l_property_id := 1806;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_BKG_HTTP_HEADERS',
        p_prompt             => 'HTTP Headers',
        p_property_type      => 'TEXT',
        p_db_column          => 'HTTP_HEADERS',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~You can add any HTTP Headers as required.<br>Use key=value pairs, one per line.~' );
    --
    l_property_id := 1807;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'MAP_BKG_TILELAYER_DEFAULT',
        p_prompt                   => 'Standard',
        p_property_type            => 'SELECT LIST',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_map_background,
        p_db_column                => 'DEFAULT_SHARED_TILELAYER_ID',
        p_display_group_name       => 'MAP_REGION',
        p_help_text                => 'Choose the tile layer to use as the background map.' );
    --
    l_property_id := 1808;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'MAP_BKG_TILELAYER_DARK',
        p_prompt                   => 'Dark Mode',
        p_property_type            => 'SELECT LIST',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_map_background,
        p_db_column                => 'DARKMODE_SHARED_TILELAYER_ID',
        p_display_group_name       => 'MAP_REGION',
        p_help_text                => 'Choose the tile layer to use as the background map when dark mode is enabled.' );
    --
    l_property_id := 1809;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_BKG_ZOOM_MIN',
        p_prompt             => 'Minimum Zoom Level',
        p_min_value          => 0,
        p_max_value          => 24,
        p_property_type      => 'NUMBER',
        p_db_column          => 'ZOOM_MIN',
        p_display_group_name => 'ADVANCED',
        p_help_text          => 'The minimum zoom level of the map (0-24) with 0 being the lowest zoom level (fully zoomed out) and 24 being the highest (fully zoomed in).');
    --
    l_property_id := 1810;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_BKG_ZOOM_MAX',
        p_prompt             => 'Maximum Zoom Level',
        p_min_value          => 0,
        p_max_value          => 24,
        p_property_type      => 'NUMBER',
        p_db_column          => 'ZOOM_MAX',
        p_display_group_name => 'ADVANCED',
        p_help_text          => 'The maximum zoom level of the map (0-24) with 0 being the lowest zoom level (fully zoomed out) and 24 being the highest (fully zoomed in).' );
    l_property_id := 1811;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREADCRUMB_BEFORE_FIRST_TEMPLATE',
        p_prompt             => 'Before First',
        p_property_type      => 'HTML',
        p_db_column          => 'BEFORE_FIRST',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'TEMPLATES',
        p_is_translatable    => true,
        p_help_text          => q'~Defines text that displays before the first breadcrumb entry. You can use the substitution string #COMPONENT_CSS_CLASSES# to apply a CSS class to your breadcrumb template. The component CSS classes are set on the region edit page.~' );
    --
    l_property_id := 1812;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREADCRUMB_CURRENT_PAGE_TEMPLATE',
        p_prompt             => 'Current Page',
        p_property_type      => 'HTML',
        p_db_column          => 'CURRENT_PAGE_OPTION',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'TEMPLATES',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&amp;lt;li&amp;gt;&amp;lt;a href="#LINK#"&amp;gt;#NAME#&amp;lt;/a&amp;gt;</pre>~',
        p_help_text          => q'~<p>Use this attribute to define the look of a breadcrumb entry that corresponds to the current page. Use the following substitution strings:</p>
<p>
<table border=1>
<tr><td>#NAME#</td><td>The short name of the breadcrumb entry</td></tr>
<tr><td>#LINK#</td><td>The anchor target of the breadcrumb entry</td></tr>
<tr><td>#LONG_NAME#</td><td>The long name of the breadcrumb entry</td></tr>
</table>
</p>~' );
    --
    l_property_id := 1813;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREADCRUMB_NON_CURRENT_PAGE_TEMPLATE',
        p_prompt             => 'Non Current Page',
        p_property_type      => 'HTML',
        p_db_column          => 'NON_CURRENT_PAGE_OPTION',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'TEMPLATES',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&amp;lt;li&amp;gt;&amp;lt;a href="#LINK#"&amp;gt;#NAME#&amp;lt;/a&amp;gt;</pre>~',
        p_help_text          => q'~Use this attribute to define the look of a breadcrumb entry that does not correspond to the current page. Use the following substitution strings:
<p>
<table border=1>
<tr><td>#NAME#</td><td>The short name of the breadcrumb entry</td></tr>
<tr><td>#LINK#</td><td>The anchor target of the breadcrumb entry</td></tr>
<tr><td>#LONG_NAME#</td><td>The long name of the breadcrumb entry</td></tr>
</table>
</p>~' );
    --
    l_property_id := 1814;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREADCRUMB_AFTER_LAST_TEMPLATE',
        p_prompt             => 'After Last',
        p_property_type      => 'HTML',
        p_db_column          => 'AFTER_LAST',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'TEMPLATES',
        p_is_translatable    => true,
        p_help_text          => q'~Defines text that displays after the last breadcrumb entries.~' );
    --
    l_property_id := 1815;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREADCRUMB_BETWEEN_LEVELS_TEMPLATE',
        p_prompt             => 'Between Levels',
        p_property_type      => 'HTML',
        p_db_column          => 'BETWEEN_LEVELS',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'TEMPLATES',
        p_is_translatable    => true,
        p_help_text          => q'~Defines text that displays between levels of breadcrumb entries.  For example, if your breadcrumbs had three levels this text would be displayed at the &quot;X&quot; in the example that follows:<p /><code>main X cars X porsche X 911</code>~' );
    --
    l_property_id := 1816;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREADCRUMB_MAXIMUM_LEVELS_TEMPLATE',
        p_prompt             => 'Maximum Levels',
        p_property_type      => 'INTEGER',
        p_db_column          => 'MAX_LEVELS',
        p_min_value          => 1,
        p_max_value          => 99,
        p_display_group_name => 'TEMPLATES',
        p_help_text          => q'~Use this attribute to specify the number of levels that appear when displaying breadcrumbs in a breadcrumb style.~' );
    --
    l_property_id := 1817;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FIELD_TEMPLATE_CLASS',
        p_prompt             => 'Class',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'THEME_CLASS_ID',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Identifies a specific usage for this template.<br>
When you switch to a new theme, all templates in one theme are assigned to corresponding templates in another theme. App Builder accomplishes this template mapping through the assignment of template class identifiers.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No Label',
        p_return_value  => '13' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Optional Label',
        p_return_value  => '3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Optional Label with Help',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Required Label',
        p_return_value  => '4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Required Label with Help',
        p_return_value  => '2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 1',
        p_return_value  => '5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 2',
        p_return_value  => '6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 3',
        p_return_value  => '7' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 4',
        p_return_value  => '8' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 5',
        p_return_value  => '9' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 6',
        p_return_value  => '10' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 7',
        p_return_value  => '11' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 8',
        p_return_value  => '12' );
    --
    l_property_id := 1818;
    store_tmpl_subscription_prop (
        p_property_id           => l_property_id,
        p_name                  => 'FIELD_TEMPLATE',
        p_lov_component_type_id => c_comp_type_field_template );
    --
    l_property_id := 1819;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BEFORE_LABEL_TEMPLATE',
        p_prompt             => 'Before',
        p_property_type      => 'HTML',
        p_db_column          => 'TEMPLATE_BODY1',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'LABEL',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter HTML to be displayed before an item label.</p>
<p>Note:  The label will be automatically display after the HTML in this region. Therefore, if you open an &lt;a&gt; tag, for instance, you should close it in the After Label region.</p>
<p>The following substitution strings are available for this attribute:
<ul class="noIndent">
<li>#CURRENT_FORM_ELEMENT#</li>
<li>#CURRENT_ITEM_ID#</li>
<li>#CURRENT_ITEM_NAME#</li>
<li>#CURRENT_ITEM_HELP_TEXT#</li>
<li>#LABEL_ID#</li>
<li>#LABEL_COLUMN_SPAN_NUMBER#</li>
<li>#LABEL_COLUMN_SPAN_ALPHA#</li>
<li>#LABEL_COLUMN_SPAN_WORD#</li>
<li>#LABEL_COLUMN_SPAN_PLURAL#</li>
</ul></p>
<p>For example:<br>
<pre>
&lt;label for="#CURRENT_ITEM_NAME#" id="#LABEL_ID#"&gt;<br>&lt;a href="javascript:popupFieldHelp('#CURRENT_ITEM_ID#',<br>&nbsp;&nbsp;'&amp;SESSION.','&amp;CLOSE.')" &gt;
</pre></p>~' );
    --
    l_property_id := 1820;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AFTER_LABEL_TEMPLATE',
        p_prompt             => 'After',
        p_property_type      => 'HTML',
        p_db_column          => 'TEMPLATE_BODY2',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'LABEL',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter HTML to be displayed after an item label.</p>
NOTE:  The label will be automatically display before the HTML in this region. Therefore, any open HTML tags in the Before Label region should be closed here.<br>
<p>The following substitution strings are available for this attribute:
<ul class="noIndent">
<li>#CURRENT_FORM_ELEMENT#</li>
<li>#CURRENT_ITEM_ID#</li>
<li>#CURRENT_ITEM_NAME#</li>
<li>#CURRENT_ITEM_HELP_TEXT#</li>
</ul></p>
<p>For example:<br>
<pre>
&lt;/a&gt;&lt;/label&gt;
</pre></p>~' );
    --
    l_property_id := 1821;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BEFORE_ITEM_TEMPLATE',
        p_prompt             => 'Before',
        p_property_type      => 'HTML',
        p_db_column          => 'BEFORE_ELEMENT',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'ITEM',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter HTML to be displayed directly before the form item. This is typically used to wrap an item into a DIV container or to display a help button before or after the form item. </p>
<p>The following substitution strings are available for this attribute:</p>
<ul>
<li>#CURRENT_FORM_ELEMENT#</li>
<li>#CURRENT_ITEM_ID#</li>
<li>#CURRENT_ITEM_NAME#</li>
<li>#CURRENT_ITEM_HELP_TEXT#</li>
<li>#CURRENT_ITEM_CONTAINER_ID#</li>
<li>#ITEM_PRE_TEXT#</li>
<li>#HELP_TEMPLATE#</li>
<li>#INLINE_HELP_TEMPLATE#</li>
<li>#ERROR_TEMPLATE#</li>
<li>#ITEM_COLUMN_SPAN_NUMBER#</li>
<li>#ITEM_COLUMN_SPAN_ALPHA#</li>
<li>#ITEM_COLUMN_SPAN_WORD#</li>
<li>#ITEM_COLUMN_SPAN_PLURAL#</li>
</ul>~' );
    --
    l_property_id := 1822;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AFTER_ITEM_TEMPLATE',
        p_prompt             => 'After',
        p_property_type      => 'HTML',
        p_db_column          => 'AFTER_ELEMENT',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'ITEM',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter HTML to be displayed directly after the form item. This is typically used to wrap an item into a DIV container or to display a help button before or after the form item. </p>
<p>The following substitution strings are available for this attribute:</p>
<ul>
<li>#CURRENT_FORM_ELEMENT#</li>
<li>#CURRENT_ITEM_ID#</li>
<li>#CURRENT_ITEM_NAME#</li>
<li>#ITEM_POST_TEXT#</li>
<li>#CURRENT_ITEM_HELP_TEXT#</li>
<li>#CURRENT_ITEM_CONTAINER_ID#</li>
<li>#HELP_TEMPLATE#</li>
<li>#INLINE_HELP_TEMPLATE#</li>
<li>#ERROR_TEMPLATE#</li>
</ul>~' );
    --
    l_property_id := 1823;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEM_PRE_TEXT_TEMPLATE',
        p_prompt             => 'Pre Text',
        p_property_type      => 'HTML',
        p_db_column          => 'ITEM_PRE_TEXT',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'ITEM',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter HTML for the "Item Pre Text" subtemplate to format the <strong>Pre Text</strong> attribute content. This template can then be referenced in the <strong>Before Element</strong> template with the #ITEM_PRE_TEXT# substitution.</p>
<p>The following substitution strings are available for this attribute:</p>
<ul>
<li>#CURRENT_FORM_ELEMENT#</li>
<li>#CURRENT_ITEM_ID#</li>
<li>#CURRENT_ITEM_NAME#</li>
<li>#CURRENT_ITEM_PRE_TEXT#</li>
</ul>~' );
    --
    l_property_id := 1824;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEM_POST_TEXT_TEMPLATE',
        p_prompt             => 'Post Text',
        p_property_type      => 'HTML',
        p_db_column          => 'ITEM_POST_TEXT',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'ITEM',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter HTML for the "Item Post Text" subtemplate to format the <strong>Post Text</strong> attribute content. This template can then be referenced in the <strong>After Element</strong> template with the #ITEM_POST_TEXT# substitution.</p>
<p>The following substitution strings are available for this attribute:</p>
<ul class="noIndent">
<li>#CURRENT_FORM_ELEMENT#</li>
<li>#CURRENT_ITEM_ID#</li>
<li>#CURRENT_ITEM_NAME#</li>
<li>#CURRENT_ITEM_POST_TEXT#</li>
</ul>~' );
    --
    l_property_id := 1825;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HELP_TEMPLATE',
        p_prompt             => 'Invoke',
        p_property_type      => 'HTML',
        p_db_column          => 'HELP_LINK',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'HELP',
        p_is_translatable    => true,
        p_help_text          => q'~<p>
The help sub template allows for defining the link or button used to invoke the item level help. This sub template is only rendered for items that have help defined.
</p>
<p>The following substitution strings are available for this attribute:</p>
<ul class="noIndent">
<li>#CURRENT_FORM_ELEMENT#</li>
<li>#CURRENT_ITEM_ID#</li>
<li>#CURRENT_ITEM_NAME#</li>
<li>#CURRENT_ITEM_HELP_LABEL#</li>
<li>#CURRENT_ITEM_HELP_TEXT#</li>
</ul>~' );
    --
    l_property_id := 1826;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INLINE_HELP_TEMPLATE',
        p_prompt             => 'Inline',
        p_property_type      => 'HTML',
        p_db_column          => 'INLINE_HELP_TEXT',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'HELP',
        p_is_translatable    => true,
        p_help_text          => q'~<p>The help sub template allows for defining the inline help text to be displayed immediately with the item. This sub template is only rendered for items that have inline help text defined.</p>
<p>The following substitution strings are available for this attribute:</p>
<ul class="noIndent">
<li>#CURRENT_FORM_ELEMENT#</li>
<li>#CURRENT_ITEM_ID#</li>
<li>#CURRENT_ITEM_NAME#</li>
<li>#CURRENT_ITEM_HELP_LABEL#</li>
<li>#CURRENT_ITEM_INLINE_HELP_TEXT#</li>
</ul>~' );
    --
    l_property_id := 1827;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ON_ERROR_BEFORE_LABEL_TEMPLATE',
        p_prompt             => 'Before Label',
        p_property_type      => 'HTML',
        p_db_column          => 'ON_ERROR_BEFORE_LABEL',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'ERROR_TEMPLATES',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&lt;font class="fieldtitleleft"&gt;#ERROR_MESSAGE#&lt;/font&gt;</pre>~',
        p_help_text          => q'~<p>Enter HTML to precede the item label when a application displays an inline validation error message for the item.</p>
<p>The following substitution strings are available for this attribute:</p>
<ul>
<li>#CURRENT_FORM_ELEMENT#</li>
<li>#CURRENT_ITEM_ID#</li>
<li>#CURRENT_ITEM_NAME#</li>
<li>#CURRENT_ITEM_HELP_TEXT#</li>
<li>#ERROR_TEMPLATE#</li>
</ul>~' );
    --
    l_property_id := 1828;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ON_ERROR_AFTER_LABEL_TEMPLATE',
        p_prompt             => 'After Label',
        p_property_type      => 'HTML',
        p_db_column          => 'ON_ERROR_AFTER_LABEL',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'ERROR_TEMPLATES',
        p_is_translatable    => true,
        p_examples           => q'~<p>This example would append a space and a closing bracket to the displayed item label with the error.</p>
<pre>&amp;nbsp;]&lt;/font&gt;</pre>~',
        p_help_text          => q'~<p>Enter HTML to be appended to the item label when a application  displays an inline validation error message for the item.</p>
<p>The following substitution strings are available for this attribute:</p>
<ul>
<li>#CURRENT_FORM_ELEMENT#</li>
<li>#CURRENT_ITEM_ID#</li>
<li>#CURRENT_ITEM_NAME#</li>
<li>#CURRENT_ITEM_HELP_TEXT#</li>
<li>#ERROR_TEMPLATE#</li>
</ul>~' );
    --
    l_property_id := 1829;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ERROR_TEMPLATE',
        p_prompt             => 'Error Template',
        p_property_type      => 'HTML',
        p_db_column          => 'ERROR_TEMPLATE',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'ERROR_TEMPLATES',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the HTML rendered  to display the inline validation error message. Use the #ERROR_MESSAGE# substitution string to reference the message text. The error template can be included in the before and after item attributes using the #ERROR_TEMPLATE# substitution string.~' );
    --
    l_property_id := 1830;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BEFORE_LABEL_AND_ITEM_TEMPLATE',
        p_prompt             => 'Before Label and Item',
        p_property_type      => 'HTML',
        p_db_column          => 'BEFORE_ITEM',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'FIELD_CONTAINER',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter HTML to be displayed before the label and item. This is typically used to wrap an item into a DIV container or field set. The Before Label and Item attribute is only rendered for pages that do not use a table grid to display form items. This includes any page using a mobile page template.</p>
<p>The following substitution strings are available for this attribute:</p>
<ul class="noIndent">
<li>#CURRENT_FORM_ELEMENT#</li>
<li>#CURRENT_ITEM_ID#</li>
<li>#CURRENT_ITEM_NAME#</li>
<li>#CURRENT_ITEM_HELP_TEXT#</li>
<li>#CURRENT_ITEM_CONTAINER_ID#</li>
</ul>~' );
    --
    l_property_id := 1831;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AFTER_LABEL_AND_ITEM_TEMPLATE',
        p_prompt             => 'After Label and Item',
        p_property_type      => 'HTML',
        p_db_column          => 'AFTER_ITEM',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'FIELD_CONTAINER',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter HTML to be displayed after the label and item. This is typically used to wrap an item into a DIV container or field set. The after item and label attribute is only rendered for pages that don't use a table grid to display form items. This includes any page using a mobile page template.</p>
<p>The following substitution strings are available for this attribute:</p>
<ul>
<li>#CURRENT_FORM_ELEMENT#</li>
<li>#CURRENT_ITEM_ID#</li>
<li>#CURRENT_ITEM_NAME#</li>
<li>#CURRENT_ITEM_HELP_TEXT#</li>
</ul>~' );
    --
    l_property_id := 1832;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'CALENDAR_TEMPLATE_CLASS',
        p_prompt                   => 'Class',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'THEME_CLASS_ID',
        p_display_group_name       => 'IDENTIFICATION',
        p_lov_type                 => 'STATIC',
        p_help_text                => q'~<p>Identifies a specific usage for this template.</p>
<p>When you switch to a new theme, all templates in one theme are assigned to corresponding templates in another theme. App Builder accomplishes this template mapping through the assignment of template class identifiers.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Calendar',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Calendar, Alternative 1',
        p_return_value  => '2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Small Calendar',
        p_return_value  => '3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 1',
        p_return_value  => '4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 2',
        p_return_value  => '5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 3',
        p_return_value  => '6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 4',
        p_return_value  => '7' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 5',
        p_return_value  => '8' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 6',
        p_return_value  => '9' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 7',
        p_return_value  => '10' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 8',
        p_return_value  => '11' );
    --
    l_property_id := 1833;
    store_tmpl_subscription_prop (
        p_property_id           => l_property_id,
        p_name                  => 'CALENDAR_TEMPLATE',
        p_lov_component_type_id => c_comp_type_calendar_template );
    --
    l_property_id := 1834;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_TEMPLATE_CLASS',
        p_prompt             => 'Class',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'THEME_CLASS_ID',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Identifies a specific usage for this template.</p>
<p>When you switch to a new theme, all templates in one theme are assigned to corresponding templates in another theme. App Builder accomplishes this template mapping through the assignment of template class identifiers.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Button List',
        p_return_value  => '6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Horizontal Images with Label List',
        p_return_value  => '4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Horizontal Links List',
        p_return_value  => '3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Pull Down Menu',
        p_return_value  => '20' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Pull Down Menu with Image',
        p_return_value  => '21' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Tabbed Navigation List',
        p_return_value  => '7' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Vertical Images List',
        p_return_value  => '5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Vertical Ordered List',
        p_return_value  => '2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Vertical Sidebar List',
        p_return_value  => '19' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Vertical Unordered List with Bullets',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Vertical Unordered List without Bullets',
        p_return_value  => '18' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Wizard Progress List',
        p_return_value  => '17' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 1',
        p_return_value  => '9' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 2',
        p_return_value  => '10' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 3',
        p_return_value  => '11' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 4',
        p_return_value  => '12' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 5',
        p_return_value  => '13' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 6',
        p_return_value  => '14' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 7',
        p_return_value  => '15' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 8',
        p_return_value  => '16' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hierarchical Expanding',
        p_return_value  => '22' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hierarchical Expanded',
        p_return_value  => '23' );
    --
    l_property_id := 1835;
    store_tmpl_subscription_prop (
        p_property_id           => l_property_id,
        p_name                  => 'LIST_TEMPLATE',
        p_lov_component_type_id => c_comp_type_list_template );
    --
    l_property_id := 1836;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'LIST_TEMPLATE_BEFORE_ROWS',
        p_prompt                   => 'Before Rows',
        p_property_type            => 'HTML',
        p_db_column                => 'LIST_TEMPLATE_BEFORE_ROWS',
        p_display_length           => 100,
        p_max_length               => 4000,
        p_display_group_name       => 'LIST',
        p_is_translatable          => true,
        p_help_text                => q'~Enter HTML that displays before any list elements. You can use this attribute to open an HTML table or HTML table row. You can use the substitution string #COMPONENT_CSS_CLASSES# to apply a CSS class to your breadcrumb template. The component CSS classes are set on the region edit page.~' );
    --
    l_property_id := 1837;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_TEMPLATE_CURRENT_ENTRY',
        p_prompt             => 'Current',
        p_property_type      => 'HTML',
        p_db_column          => 'LIST_TEMPLATE_CURRENT',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'ENTRY',
        p_is_translatable    => true,
        p_help_text          => q'~Enter HTML or text to be substituted for the selected (or current) list template.~' );
    --
    l_property_id := 1838;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_TEMPLATE_CURRENT_ENTRY_WITH_SUBLIST',
        p_prompt             => 'Current with Sublist',
        p_property_type      => 'HTML',
        p_db_column          => 'ITEM_TEMPLATE_CURR_W_CHILD',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'ENTRY',
        p_is_translatable    => true,
        p_help_text          => q'~HTML or text to be substituted for the selected (or current) list template used when item has sublist items. If not specified, the current list item template will be used.~' );
    --
    l_property_id := 1839;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_TEMPLATE_NONCURRENT_ENTRY',
        p_prompt             => 'Noncurrent',
        p_property_type      => 'HTML',
        p_db_column          => 'LIST_TEMPLATE_NONCURRENT',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'ENTRY',
        p_is_translatable    => true,
        p_help_text          => q'~Enter HTML or text to be substituted for the unselected (or noncurrent) list template.~' );
    --
    l_property_id := 1840;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'LIST_TEMPLATE_NONCURRENT_ENTRY_WITH_SUBLIST',
        p_prompt               => 'Noncurrent with Sublist',
        p_property_type        => 'HTML',
        p_db_column            => 'ITEM_TEMPLATE_NONCURR_W_CHILD',
        p_display_length       => 100,
        p_max_length           => 4000,
        p_display_group_name   => 'ENTRY',
        p_is_translatable      => true,
        p_help_text            => q'~HTML or text to be substituted for the unselected (or noncurrent) list template used when item has sublist items. If not specified, the current list item template will be used. ~' );
    --
    l_property_id := 1841;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_TEMPLATE_BETWEEN_ENTRIES',
        p_prompt             => 'Between Entries',
        p_property_type      => 'HTML',
        p_db_column          => 'BETWEEN_ITEMS',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'LIST',
        p_is_translatable    => true,
        p_help_text          => q'~This is the HTML that displays between list elements. This attribute will be ignored if no HTML is specified.~' );
    --
    l_property_id := 1842;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_TEMPLATE_CURRENT_1ST',
        p_prompt             => 'Current',
        p_property_type      => 'HTML',
        p_db_column          => 'FIRST_LIST_TEMPLATE_CURRENT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'FIRST_ENTRY',
        p_is_translatable    => true,
        p_help_text          => q'~If defined, will be used for the first list item.
<p/>
Enter HTML or text to be substituted for the selected (or current) list template.~' );
    --
    l_property_id := 1843;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_TEMPLATE_CURRENT_ENTRY_WITH_SUBLIST_1ST',
        p_prompt             => 'Current with Sublist',
        p_property_type      => 'HTML',
        p_db_column          => 'F_ITEM_TEMPLATE_CURR_W_CHILD',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'FIRST_ENTRY',
        p_is_translatable    => true,
        p_help_text          => q'~If defined, will be used for the first list item.
<p/>
HTML or text to be substituted for the selected (or current) list template used when item has sublist items.  ~' );
    --
    l_property_id := 1844;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'LIST_TEMPLATE_NONCURRENT_ENTRY_1ST',
        p_prompt               => 'Noncurrent',
        p_property_type        => 'HTML',
        p_db_column            => 'FIRST_LIST_TEMPLATE_NONCURRENT',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_display_group_name   => 'FIRST_ENTRY',
        p_is_translatable      => true,
        p_help_text            => q'~If defined, will be used for the first list item.
<p/>
Enter HTML or text to be substituted for the unselected (or noncurrent) list template.~' );
    --
    l_property_id := 1845;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'LIST_TEMPLATE_NONCURR_WITH_SUBLIST_ITEMS_1ST',
        p_prompt               => 'Noncurrent with Sublist',
        p_property_type        => 'HTML',
        p_db_column            => 'FITEM_TEMPLATE_NONCURR_W_CHILD',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_display_group_name   => 'FIRST_ENTRY',
        p_is_translatable      => true,
        p_help_text            => q'~If defined, will be used for the first list item.
<p/>
HTML or text to be substituted for the unselected (or noncurrent) list template used when item has sublist items.~' );
    --
    l_property_id := 1846;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_TEMPLATE_SUBLIST_BEFORE_ROWS',
        p_prompt             => 'Before Rows',
        p_property_type      => 'HTML',
        p_db_column          => 'BEFORE_SUB_LIST',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'SUBLIST',
        p_is_translatable    => true,
        p_help_text          => q'~Enter HTML that displays before any sublist elements. ~' );
    --
    l_property_id := 1847;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_TEMPLATE_SUBLIST_CURRENT_ENTRY',
        p_prompt             => 'Current',
        p_property_type      => 'HTML',
        p_db_column          => 'SUB_LIST_ITEM_CURRENT',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'SUBLIST_ENTRY',
        p_is_translatable    => true,
        p_help_text          => q'~Enter HTML or text to be substituted for the selected (or current) sublist template. ~' );
    --
    l_property_id := 1848;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_TEMPLATE_SUBLIST_CURR_ENTRY_WITH_SUBLIST',
        p_prompt             => 'Current with Sublist',
        p_property_type      => 'HTML',
        p_db_column          => 'SUB_TEMPLATE_CURR_W_CHILD',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'SUBLIST_ENTRY',
        p_is_translatable    => true,
        p_help_text          => q'~HTML or text to be substituted for the selected (or current) sublist template used when an item has sublist entries. If not specified, the current sublist item template will be used. ~' );
    --
    l_property_id := 1849;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_TEMPLATE_SUBLIST_NONCURRENT_ENTRY',
        p_prompt             => 'Noncurrent',
        p_property_type      => 'HTML',
        p_db_column          => 'SUB_LIST_ITEM_NONCURRENT',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'SUBLIST_ENTRY',
        p_is_translatable    => true,
        p_help_text          => q'~Enter HTML or text to be substituted for the unselected (or noncurrent) sublist template. ~' );
    --
    l_property_id := 1850;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_TEMPLATE_SUBLIST_NONCURR_ENTRY_WITH_SUBL',
        p_prompt             => 'Noncurrent with Sublist Items',
        p_property_type      => 'HTML',
        p_db_column          => 'SUB_TEMPLATE_NONCURR_W_CHILD',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'SUBLIST_ENTRY',
        p_is_translatable    => true,
        p_help_text          => q'~HTML or text to be substituted for the unselected (or noncurrent) list template used when item has sublist items. If not specified, the current list item template will be used. ~' );
    --
    l_property_id := 1851;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_TEMPLATE_BETWEEN_SUBLIST_ENTRIES',
        p_prompt             => 'Between Entries',
        p_property_type      => 'HTML',
        p_db_column          => 'BETWEEN_SUB_LIST_ITEMS',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'SUBLIST',
        p_is_translatable    => true,
        p_help_text          => q'~This is the HTML that displays between sublist elements. This attribute will be ignored if no HTML is specified.~' );
    --
    l_property_id := 1852;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SUBLIST_TEMPLATE_AFTER_ROWS',
        p_prompt             => 'After Rows',
        p_property_type      => 'HTML',
        p_db_column          => 'AFTER_SUB_LIST',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'SUBLIST',
        p_is_translatable    => true,
        p_help_text          => q'~Enter HTML that displays after any sublist elements. ~' );
    --
    l_property_id := 1853;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_TEMPLATE_AFTER_ROWS',
        p_prompt             => 'After Rows',
        p_property_type      => 'HTML',
        p_db_column          => 'LIST_TEMPLATE_AFTER_ROWS',
        p_display_length     => 100,
        p_max_length         => 4000,
        p_display_group_name => 'AFTER_LIST_ENTRY',
        p_is_translatable    => true,
        p_help_text          => q'~This is the HTML that displays after displaying all list elements. You can use this attribute to close a HTML table opened in the Before List Elements attribute.~' );
    --
    l_property_id := 1854;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMPLETION_FUNCTION_NAME',
        p_prompt             => 'Completion Function Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'COMPLETION_FUNCTION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'CALLBACKS' );

    --
    l_property_id := 1864;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_TEMPLATE_CLASS',
        p_prompt             => 'Class',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'THEME_CLASS_ID',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Identifies a specific usage for this template.</p>
<p>When you switch to a new theme, all templates in one theme are assigned to corresponding templates in another theme. App Builder accomplishes this template mapping through the assignment of template class identifiers.</p>
<p>Use the <strong>Translatable</strong> check box to indicate if this template contains text strings that require translation.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Login',
        p_return_value  => '6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No Tabs',
        p_return_value  => '3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No Tabs with Sidebar',
        p_return_value  => '17' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'One Level Tabs',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'One Level Tabs with Sidebar',
        p_return_value  => '16' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Popup',
        p_return_value  => '4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Printer Friendly',
        p_return_value  => '5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Two Level Tabs',
        p_return_value  => '2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Two Level Tabs with Sidebar',
        p_return_value  => '18' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 1',
        p_return_value  => '8' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 2',
        p_return_value  => '9' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 3',
        p_return_value  => '10' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 4',
        p_return_value  => '11' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 5',
        p_return_value  => '12' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 6',
        p_return_value  => '13' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 7',
        p_return_value  => '14' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 8',
        p_return_value  => '15' );
    --
    l_property_id := 1865;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_TEMPLATE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'IS_POPUP',
        p_display_group_name => 'PAGE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Identifies the page template type. When set to <strong>Dialog Page</strong>, the template will only be available for selection by a page with a page mode of Modal Dialog or Non-Modal Dialog.  When set to <strong>Normal Page</strong>, the template will only be available for selection by a page with a page mode of Normal.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dialog Page',
        p_return_value  => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Normal Page',
        p_return_value  => 'N' );
    --
    l_property_id := 1866;
    store_tmpl_subscription_prop (
        p_property_id           => l_property_id,
        p_name                  => 'PAGE_TEMPLATE',
        p_lov_component_type_id => c_comp_type_page_template );
    --
    l_property_id := 1867;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_TEMPLATE_HEADER',
        p_prompt             => 'Header',
        p_property_type      => 'HTML',
        p_db_column          => 'HEADER_TEMPLATE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'PAGE',
        p_is_translatable    => true,
        p_examples           => q'~<pre>
&lt;html&gt;
 &lt;head&gt;
   &lt;title&gt;#TITLE#&lt;/title&gt;
   #APEX_CSS#
   #THEME_CSS#
   #TEMPLATE_CSS#
   #THEME_STYLE_CSS#
   #APPLICATION_CSS#
   #PAGE_CSS#
   #HEAD#
 &lt;/head&gt;
</pre>~',
        p_help_text          => q'~<p>In the header section of the template, enter the HTML that makes up the <code>&lt;HEAD&gt;</code> section of the HTML document.  That is, all the required HTML tags before the BODY of the HTML document.  Include substitution strings to include dynamic content.</p>
It is recommended that you include at least #TITLE# and #HEAD# in this template section.  The following substitution strings are supported in the template header:
<ul>
<li>#TITLE# </li>
<li>#HEAD#</li>
<li>#ONLOAD#</li>
<li>#PAGE_STATIC_ID#</li>
<li>#TOP_GLOBAL_NAVIGATION_LIST#</li>
<li>#SIDE_GLOBAL_NAVIGATION_LIST#</li>
<li>#NAVIGATION_BAR#</li>
<li>#NOTIFICATION_MESSAGE#</li>
<li>#SUCCESS_MESSAGE#</li>
<li>#GLOBAL_NOTIFICATION#</li>
<li>#APEX_CSS#</li>
<li>#THEME_CSS#</li>
<li>#TEMPLATE_CSS#</li>
<li>#THEME_STYLE_CSS#</li>
<li>#APPLICATION_CSS#</li>
<li>#PAGE_CSS#</li>
<li>#PAGE_CSS_CLASSES#</li>
<li>#APEX_JAVASCRIPT#</li>
<li>#THEME_JAVASCRIPT#</li>
<li>#TEMPLATE_JAVASCRIPT#</li>
<li>#APPLICATION_JAVASCRIPT#</li>
<li>#PAGE_JAVASCRIPT#</li>
<li>#DEVELOPER_TOOLBAR#</li>
<li>#SCREEN_READER_TOGGLE#</li>
<li>#HIGH_CONTRAST_TOGGLE#</li>
<li>#LANGUAGE_SELECTOR#</li>
<li>#WELCOME_USER#</li>
<li>#HOME_LINK#</li>
<li>#LOGOUT_URL#</li>
<li>#LOGIN_URL#</li>
<li>#REQUESTED_URL#</li>
<li>#PAGE_TRANSITION#</li>
<li>#POPUP_TRANSITION#</li>
<li>#EXPAND_COLLAPSE_NAV_LABEL#</li>
<li>#EXPAND_COLLAPSE_SIDE_COL_LABEL#</li>
<li>#OUTDATED_BROWSER#</li>
<li>#APP_VERSION#</li>
<li>#LOGO#</li>
<li>#PARENT_TAB_CELLS#</li>
<li>#TAB_CELLS#</li>
<li>#CUSTOMIZE#</li>
<li>#FORM_OPEN#</li>
<li>#FORM_CLOSE#</li>
</ul>~' );
    --
    l_property_id := 1868;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_TEMPLATE_BODY',
        p_prompt             => 'Body',
        p_property_type      => 'HTML',
        p_db_column          => 'BOX',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'PAGE',
        p_is_translatable    => true,
        p_examples           => q'~<pre>
   &lt;body #ONLOAD#&gt;
      #FORM_OPEN#
      #BOX_BODY#
      #FORM_CLOSE#
      #GENERATED_CSS#
      #APEX_JAVASCRIPT#
      #THEME_JAVASCRIPT#
      #TEMPLATE_JAVASCRIPT#
      #APPLICATION_JAVASCRIPT#
      #PAGE_JAVASCRIPT#
      #GENERATED_JAVASCRIPT#
   &lt;/body&gt;
</pre>~',
        p_help_text          => q'~<p>Enter the HTML that makes up the BODY of the HTML document.  Include substitution strings to define where the body content is placed and to define additional positions for regions.</p>
<p>You must include at least #BOX_BODY#, #FORM_OPEN# and #FORM_CLOSE# in this section of the template. The following substitution strings are allowed in the template body:</p>
<ul>
<li>#BOX_BODY#</li>
<li>#GENERATED_CSS#</li>
<li>#GENERATED_JAVASCRIPT#</li>
<li>#ONLOAD#</li>
<li>#TITLE# </li>
<li>#PAGE_STATIC_ID#</li>
<li>#TOP_GLOBAL_NAVIGATION_LIST#</li>
<li>#SIDE_GLOBAL_NAVIGATION_LIST#</li>
<li>#NAVIGATION_BAR#</li>
<li>#NOTIFICATION_MESSAGE#</li>
<li>#SUCCESS_MESSAGE#</li>
<li>#GLOBAL_NOTIFICATION#</li>
<li>#APEX_CSS#</li>
<li>#THEME_CSS#</li>
<li>#TEMPLATE_CSS#</li>
<li>#THEME_STYLE_CSS#</li>
<li>#APPLICATION_CSS#</li>
<li>#PAGE_CSS#</li>
<li>#PAGE_CSS_CLASSES#</li>
<li>#APEX_JAVASCRIPT#</li>
<li>#THEME_JAVASCRIPT#</li>
<li>#TEMPLATE_JAVASCRIPT#</li>
<li>#APPLICATION_JAVASCRIPT#</li>
<li>#PAGE_JAVASCRIPT#</li>
<li>#DEVELOPER_TOOLBAR#</li>
<li>#SCREEN_READER_TOGGLE#</li>
<li>#HIGH_CONTRAST_TOGGLE#</li>
<li>#LANGUAGE_SELECTOR#</li>
<li>#WELCOME_USER#</li>
<li>#HOME_LINK#</li>
<li>#LOGOUT_URL#</li>
<li>#LOGIN_URL#</li>
<li>#REQUESTED_URL#</li>
<li>#PAGE_TRANSITION#</li>
<li>#POPUP_TRANSITION#</li>
<li>#EXPAND_COLLAPSE_NAV_LABEL#</li>
<li>#EXPAND_COLLAPSE_SIDE_COL_LABEL#</li>
<li>#OUTDATED_BROWSER#</li>
<li>#APP_VERSION#</li>
<li>#LOGO#</li>
<li>#PARENT_TAB_CELLS#</li>
<li>#TAB_CELLS#</li>
<li>#FORM_OPEN#</li>
<li>#FORM_CLOSE#</li>
</ul>~' );
    --
    l_property_id := 1869;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_TEMPLATE_FOOTER',
        p_prompt             => 'Footer',
        p_property_type      => 'HTML',
        p_db_column          => 'FOOTER_TEMPLATE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'PAGE',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Footer is the third section in the page template that displays after the Body.</p>
<p>The following substitution strings are supported in the template footer:</p>
<ul>
<li>#GENERATED_CSS#</li>
<li>#GENERATED_JAVASCRIPT#</li>
<li>#PAGE_STATIC_ID#</li>
<li>#TOP_GLOBAL_NAVIGATION_LIST#</li>
<li>#SIDE_GLOBAL_NAVIGATION_LIST#</li>
<li>#NAVIGATION_BAR#</li>
<li>#NOTIFICATION_MESSAGE#</li>
<li>#SUCCESS_MESSAGE#</li>
<li>#GLOBAL_NOTIFICATION#</li>
<li>#APEX_CSS#</li>
<li>#THEME_CSS#</li>
<li>#TEMPLATE_CSS#</li>
<li>#THEME_STYLE_CSS#</li>
<li>#APPLICATION_CSS#</li>
<li>#PAGE_CSS#</li>
<li>#PAGE_CSS_CLASSES#</li>
<li>#APEX_JAVASCRIPT#</li>
<li>#THEME_JAVASCRIPT#</li>
<li>#TEMPLATE_JAVASCRIPT#</li>
<li>#APPLICATION_JAVASCRIPT#</li>
<li>#PAGE_JAVASCRIPT#</li>
<li>#DEVELOPER_TOOLBAR#</li>
<li>#SCREEN_READER_TOGGLE#</li>
<li>#HIGH_CONTRAST_TOGGLE#</li>
<li>#LANGUAGE_SELECTOR#</li>
<li>#WELCOME_USER#</li>
<li>#HOME_LINK#</li>
<li>#LOGOUT_URL#</li>
<li>#LOGIN_URL#</li>
<li>#REQUESTED_URL#</li>
<li>#PAGE_TRANSITION#</li>
<li>#POPUP_TRANSITION#</li>
<li>#EXPAND_COLLAPSE_NAV_LABEL#</li>
<li>#EXPAND_COLLAPSE_SIDE_COL_LABEL#</li>
<li>#OUTDATED_BROWSER#</li>
<li>#APP_VERSION#</li>
<li>#LOGO#</li>
<li>#PARENT_TAB_CELLS#</li>
<li>#TAB_CELLS#</li>
<li>#CUSTOMIZE#</li>
<li>#FORM_OPEN#</li>
<li>#FORM_CLOSE#</li>
</ul>~' );
    --
    l_property_id := 1870;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DIALOG_INITIALIZATION_CODE',
        p_prompt             => 'Dialog Initialization Code',
        p_property_type      => 'TEXT',
        p_db_column          => 'DIALOG_JS_INIT_CODE',
        p_display_length     => 96,
        p_max_length         => 4000,
        p_display_group_name => 'JAVASCRIPT',
        p_help_text          => q'~<p>Enter JavaScript code to initialize the page as a dialog. The substitution strings will be replaced with their respective values at rendering time.  For example, #DIALOG_ATTRIBUTES# will be replaced by custom attributes defined in the 'Dialog Attributes' item on the Edit Page.</p>
<p>The default JavaScript call for initializing a dialog is:</p>
<strong>apex.navigation.dialog(#PAGE_URL#,{title:#TITLE#,height:#DIALOG_HEIGHT#,width:#DIALOG_WIDTH#,maxWidth:#DIALOG_MAX_WIDTH#,modal:#IS_MODAL#,dialog:#DIALOG#,#DIALOG_ATTRIBUTES#},#DIALOG_CSS_CLASSES#,#TRIGGERING_ELEMENT#);</strong>~' );
    --
    l_property_id := 1871;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DIALOG_CLOSURE_CODE',
        p_prompt             => 'Dialog Closure Code',
        p_property_type      => 'TEXT',
        p_db_column          => 'DIALOG_JS_CLOSE_CODE',
        p_display_length     => 96,
        p_max_length         => 4000,
        p_display_group_name => 'JAVASCRIPT',
        p_help_text          => q'~<p>Enter JavaScript code to close the dialog page. The substitution strings will be replaced with their respective values at rendering time.</p>
<p>The default JavaScript call for closing a dialog is:</p>
<strong>apex.navigation.dialog.close(#IS_MODAL#,#TARGET#);</strong>~' );
    --
    l_property_id := 1872;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DIALOG_CANCEL_CODE',
        p_prompt             => 'Dialog Cancel Code',
        p_property_type      => 'TEXT',
        p_db_column          => 'DIALOG_JS_CANCEL_CODE',
        p_display_length     => 96,
        p_max_length         => 4000,
        p_display_group_name => 'JAVASCRIPT',
        p_help_text          => q'~<p>Enter JavaScript code to cancel the dialog page. The substitution string will be replaced with its respective value at rendering time.</p>
<p>The default JavaScript call to cancel a dialog is:</p>
<strong>apex.navigation.dialog.cancel(#IS_MODAL#);</strong>~' );
    --
    l_property_id := 1873;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_TEMPLATE_SUCCESS_MESSAGE',
        p_prompt             => 'Success Message',
        p_property_type      => 'HTML',
        p_db_column          => 'SUCCESS_MESSAGE',
        p_display_length     => 90,
        p_max_length         => 4000,
        p_display_group_name => 'PAGE_SUBTEMPLATE',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&lt;b&gt;#SUCCESS_MESSAGE#&lt;/b&gt;</pre>~',
        p_help_text          => q'~<p>Enter HTML that will substitute the string #SUCCESS_MESSAGE# in the template body, header or footer.</p>~' );
    --
    l_property_id := 1874;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_TEMPLATE_NAVIGATION_BAR',
        p_prompt             => 'Navigation Bar',
        p_property_type      => 'HTML',
        p_db_column          => 'NAVIGATION_BAR',
        p_display_length     => 90,
        p_max_length         => 4000,
        p_display_group_name => 'PAGE_SUBTEMPLATE',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&lt;table class="navBar"&gt;&lt;tr&gt;#BAR_BODY#&lt;/tr&gt;&lt;/table&gt;</pre>~',
        p_help_text          => q'~<p>Enter HTML or text that will be substituted when the string #NAVIGATION_BAR# is referenced in the template header, body or footer.</p>
<p>Use the substitution string #BAR_BODY# to indicate where in the Navigation Bar the entries will appear.</p>
<p>The #BAR_BODY# substitution string will generate the appropriate HTML table cells.</p>~' );
    --
    l_property_id := 1875;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_TEMPLATE_NAVIGATION_BAR_ENTRY',
        p_prompt             => 'Navigation Bar Entry',
        p_property_type      => 'HTML',
        p_db_column          => 'NAVBAR_ENTRY',
        p_display_length     => 90,
        p_max_length         => 32767,
        p_display_group_name => 'PAGE_SUBTEMPLATE',
        p_is_translatable    => true,
        p_help_text          => q'~<p>The following will be substituted into the navigation bar #BAR_BODY# for each navigation bar entry.  Use the following substitution strings to compose the navigation bar entry sub template.</p>
<ul class="noIndent">
<li>#LINK# - entry link</li>
<li>#TEXT# - entry sub text</li>
<li>#IMAGE# - entry image (HTML image ALT, HEIGHT, and WIDTH arguments will be included with the HTML IMG tag when supplied with the navigation bar entry)
<li>#WIDTH# - Image width</li>
<li>#HEIGHT# - Image height</li>
<li>#COLSPAN# - HTML COLSPAN value</li>
<li>#ALT# - Image alternative text</li>
</ul>~' );
    --
    l_property_id := 1876;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_TEMPLATE_NOTIFICATION',
        p_prompt             => 'Notification',
        p_property_type      => 'HTML',
        p_db_column          => 'MESSAGE',
        p_display_length     => 90,
        p_max_length         => 4000,
        p_display_group_name => 'PAGE_SUBTEMPLATE',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&lt;table&gt;&lt;tr&gt;&lt;td&gt;#MESSAGE#&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</pre>~',
        p_help_text          => q'~<p>Enter HTML or text that will be substituted when the string #NOTIFICATION_MESSAGE# is referenced in the template header, body or footer.</p>
<p>The following substitutions strings are supported in the Notification Subtemplate:</p>
<ul>
  <li>#MESSAGE#</li>
  <li>#NOTIFICATION_MESSAGE_HEADER#</li>
</ul>
<p>Use the substitution string #MESSAGE# to indicate where in the Notification Message the body of the message will appear.</p>~' );
    --
    l_property_id := 1877;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_TEMPLATE_CURRENT_TAB',
        p_prompt             => 'Current',
        p_property_type      => 'HTML',
        p_db_column          => 'CURRENT_TAB',
        p_display_length     => 90,
        p_max_length         => 4000,
        p_display_group_name => 'STANDARD_TAB',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&lt;td&gt;#TAB_LABEL#&lt;/td&gt;</pre>~',
        p_help_text          => q'~<p>Enter HTML or text that will be substituted for the currently selected standard tab.</p>
<p>The following substitution strings are available:</p>
<ul>
<li>#TAB_LABEL# - required, this displays the tab display text</li>
<li>#TAB_IMAGE# - image file name</li>
<li>#TAB_INLINE_EDIT# - Allows tab to be edited by application developers</li>
<li>#TAB_LINK# - Clicking on this tab goes to this link</li>
<li>#TAB_NAME# - Name of the tab, not the display text</li>
<li>#TAB_NAME_ENCODED# - Name of the tab encoded</li>
<li>#TAB_FONT_ATTRIBUTES# - Embeds text specified in template attribute</li>
</ul>~' );
    --
    l_property_id := 1878;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_TEMPLATE_CURRENT_TAB_FONT_ATTRIBUTES',
        p_prompt             => 'Current Font Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'CURRENT_TAB_FONT_ATTR',
        p_display_length     => 96,
        p_max_length         => 255,
        p_display_group_name => 'STANDARD_TAB',
        p_is_translatable    => true,
        p_help_text          => q'~<p>This attribute is part of the Standard Tab subtemplate.  This value replaces the #TAB_FONT_ATTRIBUTES# substitution string.</p>~',
        p_deprecated_values  => '$NOT_NULL$' );
    --
    l_property_id := 1879;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_TEMPLATE_NON_CURRENT_STANDARD_TAB',
        p_prompt             => 'Non Current',
        p_property_type      => 'HTML',
        p_db_column          => 'NON_CURRENT_TAB',
        p_display_length     => 90,
        p_max_length         => 4000,
        p_display_group_name => 'STANDARD_TAB',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&lt;td&gt;&lt;a href="#TAB_LINK#"&gt;#TAB_LABEL#&lt;/a&gt;&lt;/td&gt;</pre>~',
        p_help_text          => q'~<p>Enter HTML or text that will be substituted for the unselected standard tabs.</p>
<p>The following substitution strings are available:</p>
<ul>
<li>#TAB_LABEL# - required, this displays the tab display text</li>
<li>#TAB_IMAGE# - image file name</li>
<li>#TAB_INLINE_EDIT# - Allows tab to be edited by application developers</li>
<li>#TAB_LINK# - Clicking on this tab goes to this link</li>
<li>#TAB_NAME# - Name of the tab, not the display text</li>
<li>#TAB_NAME_ENCODED# - Name of the tab encoded</li>
<li>#TAB_FONT_ATTRIBUTES# - Embeds text specified in template attribute</li>
</ul>~' );
    --
    l_property_id := 1880;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_TEMPLATE_NON_CURRENT_TAB_FONT_ATTRIBUTES',
        p_prompt             => 'Non Current Font Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'NON_CURRENT_TAB_FONT_ATTR',
        p_display_length     => 96,
        p_max_length         => 255,
        p_display_group_name => 'STANDARD_TAB',
        p_is_translatable    => true,
        p_help_text          => q'~<p>This attribute is part of the Standard Tab subtemplate.  This value replaces the #TAB_FONT_ATTRIBUTES# substitution string.</p>~',
        p_deprecated_values  => '$NOT_NULL$' );
    --
    l_property_id := 1881;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_TEMPLATE_CURRENT_PARENT_TAB',
        p_prompt             => 'Current',
        p_property_type      => 'HTML',
        p_db_column          => 'TOP_CURRENT_TAB',
        p_display_length     => 90,
        p_max_length         => 4000,
        p_display_group_name => 'PARENT_TAB',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&lt;td&gt;&lt;a href="#TAB_LINK#"&gt;#TAB_LABEL#&lt;/a&gt;&lt;/td&gt;</pre>~',
        p_help_text          => q'~<p>Enter HTML or text that will be substituted for the selected parent tabs.</p>
<p>This attribute is part of the Parent Tab subtemplate and expands the #PARENT_TAB_CELLS# substitution string.</p>
<p>The following substitution strings are available:</p>
<ul>
<li>#TAB_LABEL# - required, represents the label of a tab</li>
<li>#TAB_IMAGE# - image file name</li>
<li>#TAB_INLINE_EDIT# - places the link that enables developers to perform edits inline</li>
<li>#TAB_LINK# - the link used for a tab</li>
<li>#TAB_NAME# - the unique name of a tab</li>
<li>#TAB_NAME_ENCODED# - the encoded name of a tab</li>
<li>#TAB_FONT_ATTRIBUTES# - additional font attributes defined for a tab</li>
</ul>~' );
    --
    l_property_id := 1882;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'PAGE_TEMPLATE_PARENT_CURR_TAB_FONT_ATTRIBUTES',
        p_prompt                    => 'Current Font Attributes',
        p_property_type             => 'TEXT',
        p_db_column                 => 'TOP_CURRENT_TAB_FONT_ATTR',
        p_display_length            => 96,
        p_max_length                => 255,
        p_display_group_name        => 'PARENT_TAB',
        p_is_translatable           => true,
        p_help_text                 => q'~<p>This attribute is part of the Parent Tab subtemplate and expands the #PARENT_TAB_CELLS# substitution string. A "current tab" is a tab that is current for the current page. This attribute controls the font used to display the parent tab text.</p>~',
        p_deprecated_values         => '$NOT_NULL$' );
    --
    l_property_id := 1883;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'PAGE_TEMPLATE_NON_CURRENT_PARENT_TAB',
        p_prompt                    => 'Non Current',
        p_property_type             => 'HTML',
        p_db_column                 => 'TOP_NON_CURRENT_TAB',
        p_display_length            => 90,
        p_max_length                => 4000,
        p_display_group_name        => 'PARENT_TAB',
        p_is_translatable           => true,
        p_examples                  => q'~<pre>&lt;td&gt;&lt;a href="#TAB_LINK#"&gt;#TAB_LABEL#&lt;/a&gt;&lt;/td&gt;</pre>~',
        p_help_text                 => q'~<p>Enter HTML or text that will be substituted for the unselected parent tabs.</p>
<p>This attribute is part of the Parent Tab subtemplate and expands the #PARENT_TAB_CELLS# substitution string.</p>
<p>The following substitution strings are available:</p>
<ul>
<li>#TAB_LABEL# - required, represents the label of a tab</li>
<li>#TAB_IMAGE# - image file name</li>
<li>#TAB_INLINE_EDIT# - places the link that enables developers to perform edits inline</li>
<li>#TAB_LINK# - the link used for a tab</li>
<li>#TAB_NAME# - the unique name of a tab</li>
<li>#TAB_NAME_ENCODED# - the encoded name of a tab</li>
<li>#TAB_FONT_ATTRIBUTES# - additional font attributes defined for a tab</li>
</ul>~' );
    --
    l_property_id := 1884;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'PAGE_TEMPLATE_PARENT_NON_CURR_TAB_FONT_ATTR',
        p_prompt                      => 'Non Current Font Attributes',
        p_property_type               => 'TEXT',
        p_db_column                   => 'TOP_NON_CURRENT_TAB_FONT_ATTR',
        p_display_length              => 96,
        p_max_length                  => 255,
        p_display_group_name          => 'PARENT_TAB',
        p_is_translatable             => true,
        p_help_text                   => q'~<p>This attribute is part of the Parent Tab subtemplate and expands the #PARENT_TAB_CELLS# substitution string. A "non current tab" is a tab that is NOT current for the current page. This attribute controls the font used to display the parent tab text. </p>~',
        p_deprecated_values           => '$NOT_NULL$' );
    --
    l_property_id := 1885;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'CURRENT_IMAGE_TAB',
        p_prompt                    => 'Current',
        p_property_type             => 'HTML',
        p_db_column                 => 'CURRENT_IMAGE_TAB',
        p_display_length            => 96,
        p_max_length                => 4000,
        p_display_group_name        => 'IMAGE_BASED_TAB',
        p_is_translatable           => true,
        p_examples                  => q'~<pre>&lt;td&gt;#TAB_TEXT#&lt;/td&gt;</pre>~',
        p_help_text                 => q'~<p>Enter HTML to be used to indicate that an image-based tab is currently selected.  Include the #TAB_TEXT# substitution string to show the displayed name of the tab.</p>~' );
    --
    l_property_id := 1886;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'NON_CURRENT_IMAGE_TAB',
        p_prompt                    => 'Non Current',
        p_property_type             => 'HTML',
        p_db_column                 => 'NON_CURRENT_IMAGE_TAB',
        p_display_length            => 96,
        p_max_length                => 4000,
        p_display_group_name        => 'IMAGE_BASED_TAB',
        p_is_translatable           => true,
        p_help_text                 => q'~<p>Enter the html to be used to indicate that an image tab is not currently selected. Include the #TAB_TEXT# substitution string to show the displayed name of the tab.</p>~' );
    --
    l_property_id := 1887;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'PAGE_GRID_TYPE',
        p_prompt                    => 'Type',
        p_property_type             => 'SELECT LIST',
        p_db_column                 => 'GRID_TYPE',
        p_display_group_name        => 'LAYOUT',
        p_lov_type                  => 'STATIC',
        p_help_text                 => q'~<p>Specifies the type of the layout.</p>
<ul>
<li><strong>HTML Table</strong> - Uses HTML Tables to position regions, page items and buttons.</li>
<li><strong>Fixed Number of Columns</strong> - Used for layouts which divide the screen into a fixed number of layout columns.</li>
<li><strong>Variable Number of Columns</strong> - Used for layouts which can display up to "n" number of layout columns depending on how the regions, page items and buttons are positioned.</li>
</ul>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML Table',
        p_return_value  => 'TABLE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Fixed Number of Columns',
        p_return_value  => 'FIXED' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Variable Number of Columns',
        p_return_value  => 'VARIABLE' );
    --
    l_property_id := 1888;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'GRID_MAXIMUM_COLUMNS',
        p_prompt                    => 'Maximum Columns',
        p_property_type             => 'INTEGER',
        p_db_column                 => 'GRID_MAX_COLUMNS',
        p_display_length            => 2,
        p_max_length                => 2,
        p_min_value                 => 1,
        p_max_value                 => 99,
        p_display_group_name        => 'LAYOUT',
        p_help_text                 => q'~<p>Specifies the maximum number of columns which are supported by the layout.</p>~' );
    --
    l_property_id := 1889;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'GRID_ALWAYS_USE_MAX_COLUMNS',
        p_prompt                    => 'Always use Max Columns',
        p_property_type             => 'YES NO',
        p_db_column                 => 'GRID_ALWAYS_USE_MAX_COLUMNS',
        p_display_group_name        => 'LAYOUT',
        p_help_text                 => q'~<p>Specify <strong>On</strong> if the layout can always use the maximum number of columns for a slot. Specify <strong>Off</strong> if the maximum number of columns is for the full screen and each position reduces the available columns.</p>~' );
    --
    l_property_id := 1890;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'GRID_HAS_COLUMN_SPAN',
        p_prompt                    => 'Has Column Span',
        p_property_type             => 'YES NO',
        p_db_column                 => 'GRID_HAS_COLUMN_SPAN',
        p_display_group_name        => 'LAYOUT',
        p_help_text                 => q'~<p>Specify <strong>On</strong> if the layout supports a span over multiple layout columns. Most "Fixed Number of Columns" layouts do support that.</p>~' );
    --
    l_property_id := 1891;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'GRID_ALWAYS_RENDER_LAYOUT',
        p_prompt                    => 'Always Render Layout',
        p_property_type             => 'YES NO',
        p_db_column                 => 'GRID_ALWAYS_EMIT',
        p_display_group_name        => 'LAYOUT',
        p_help_text                 => q'~<p>Specify <strong>On</strong> to always render the layout, even if only the first column of the layout is used. Specify <strong>Off</strong> to only render the layout when more than one column is used.</p>~' );
    --
    l_property_id := 1892;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'GRID_EMIT_EMPTY_LEADING_COLUMNS',
        p_prompt                    => 'Emit Empty Leading Columns',
        p_property_type             => 'YES NO',
        p_db_column                 => 'GRID_EMIT_EMPTY_LEADING_COLS',
        p_display_group_name        => 'LAYOUT',
        p_help_text                 => q'~<p>Specify <strong>On</strong> to fill up unused leading layout columns with an empty layout column. Most of the time this has to be set to <strong>On</strong> for "Fixed Number of Columns" layouts.</p>~' );
    --
    l_property_id := 1893;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'GRID_EMIT_EMPTY_TRAILING_COLUMNS',
        p_prompt                      => 'Emit Empty Trailing Columns',
        p_property_type               => 'YES NO',
        p_db_column                   => 'GRID_EMIT_EMPTY_TRAILING_COLS',
        p_display_group_name          => 'LAYOUT',
        p_help_text                   => q'~<p>Specify <strong>On</strong> to fill up unused trailing layout columns with an empty layout column to always include the maximum number of layout columns.</p>~' );
    --
    l_property_id := 1894;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'GRID_DEFAULT_LABEL_COLUMN_SPAN',
        p_prompt                    => 'Default Label Column Span',
        p_property_type             => 'INTEGER',
        p_db_column                 => 'GRID_DEFAULT_LABEL_COL_SPAN',
        p_display_length            => 2,
        p_max_length                => 2,
        p_display_group_name        => 'LAYOUT',
        p_help_text                 => q'~<p>Specifies the default number of layout columns an item label occupies if not specified on item level. Your label template must include the <code>#LABEL_COLUMN_SPAN_[NUMBER|ALPHA|WORD|PLURAL]#</code> and <code>#ITEM_COLUMN_SPAN_[NUMBER|ALPHA|WORD|PLURAL]#</code> substitution strings.</p>~' );
    --
    l_property_id := 1895;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'GRID_FIRST_COLUMN_ATTRIBUTES',
        p_prompt                    => 'First Column Attributes',
        p_property_type             => 'TEXT',
        p_db_column                 => 'GRID_FIRST_COLUMN_ATTRIBUTES',
        p_display_length            => 96,
        p_max_length                => 255,
        p_display_group_name        => 'LAYOUT',
        p_help_text                 => q'~<p>Specify the value which should substitute #FIRST_LAST_COLUMN_ATTRIBUTES# in the Column Template if it's the first layout column.</p>~' );
    --
    l_property_id := 1896;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'GRID_LAST_COLUMN_ATTRIBUTES',
        p_prompt                    => 'Last Column Attributes',
        p_property_type             => 'TEXT',
        p_db_column                 => 'GRID_LAST_COLUMN_ATTRIBUTES',
        p_display_length            => 96,
        p_max_length                => 255,
        p_display_group_name        => 'LAYOUT',
        p_help_text                 => q'~<p>Specify the value which should substitute #FIRST_LAST_COLUMN_ATTRIBUTES# in the Column Template if it's the last layout column.</p>~' );
    --
    l_property_id := 1897;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'GRID_REGION_TABLE_ATTRIBUTES',
        p_prompt                    => 'Region Table Attributes',
        p_property_type             => 'TEXT',
        p_db_column                 => 'REGION_TABLE_CATTRIBUTES',
        p_display_length            => 96,
        p_max_length                => 255,
        p_display_group_name        => 'LAYOUT',
        p_is_translatable           => true,
        p_help_text                 => q'~<p>If the &PRODUCT_NAME. engine displays regions in multiple columns in the same region slot then &PRODUCT_NAME. will render an HTML table.  This attribute enables you to control the attributes of the &lt;table&gt; tag.</p>~' );
    --
    l_property_id := 1898;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'GRID_CONTAINER_TEMPLATE',
        p_prompt                    => 'Container Template',
        p_property_type             => 'HTML',
        p_db_column                 => 'GRID_TEMPLATE',
        p_display_length            => 90,
        p_max_length                => 4000,
        p_display_group_name        => 'LAYOUT',
        p_examples                  => q'~<pre>&lt;div class="ui-grid-#USED_COLUMNS_ALPHA_MINUS#"&gt;#ROWS#&lt;/div&gt;</pre>~',
        p_help_text                 => q'~<p>Specifies the markup to start a new layout. You must include at least #ROWS# in this template. The following substitution strings are allowed in the container template:</p>
<ul>
<li><strong>#USED_COLUMNS_NUMBER#</strong> - Number of used columns. For example: 1, 2, 3, ...</li>
<li><strong>#USED_COLUMNS_ALPHA#</strong> - Alphabet character representing the number of used columns. For example: a, b, c, ...</li>
<li><strong>#USED_COLUMNS_ALPHA_MINUS#</strong> - Alphabet character representing the number of used columns which are reduced by one column. For example: Two columns will return "a".</li>
<li><strong>#USED_COLUMNS_WORD#</strong> - Word representing the number of used columns. For example: one, two, three, ...</li>
<li><strong>#USED_COLUMNS_PLURAL#</strong> - Gets substituted by "s" if the number of columns is bigger than one. Use it if the layout requires a class name "column" for a single column and "columns" if multiple columns are specified. For example: class="#USED_COLUMNS_WORD# column#USED_COLUMNS_PLURAL#"</li>
<li><strong>#ROWS#</strong> - Substituted by the "Row Template".</li>
</ul>~' );
    --
    l_property_id := 1899;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'GRID_ROW_TEMPLATE',
        p_prompt                   => 'Row Template',
        p_property_type            => 'HTML',
        p_db_column                => 'GRID_ROW_TEMPLATE',
        p_display_length           => 90,
        p_max_length               => 4000,
        p_display_group_name       => 'LAYOUT',
        p_examples                 => q'~<pre>&lt;div class="row"&gt;#COLUMNS#&lt;/div&gt;</pre>~',
        p_help_text                => q'~<p>Specifies the markup to start a new layout row. You must include at least #COLUMNS# in this template. The following substitution string is allowed in the row template:</p>
<ul>
<li><strong>#COLUMNS#</strong> - Substituted by the "Column Template".</li>
<li><strong>#CSS_CLASSES#</strong> - Substituted by the value specified as "Row CSS Classes". This allows to further customize a layout row with CSS classes.</li>
</ul>~' );
    --
    l_property_id := 1900;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'GRID_COLUMN_TEMPLATE',
        p_prompt                   => 'Column Template',
        p_property_type            => 'HTML',
        p_db_column                => 'GRID_COLUMN_TEMPLATE',
        p_display_length           => 90,
        p_max_length               => 4000,
        p_display_group_name       => 'LAYOUT',
        p_examples                 => q'~<pre>&lt;div class="#COLUMN_SPAN_WORD# column#COLUMN_SPAN_PLURAL# #CSS_CLASSES#"&gt;#CONTENT#&lt;/div&gt;</pre>~',
        p_help_text                => q'~<p>Specifies the markup to start a new layout column. You must include at least #CONTENT# in this template. The following substitution strings are allowed in the column template:</p>
<ul>
<li><strong>#COLUMN_NUMBER#</strong> - Number of the column. For example: 1, 2, 3, ...</li>
<li><strong>#COLUMN_ALPHA#</strong> - Alphabet character representing the column. For example: a, b, c, ...</li>
<li><strong>#COLUMN_WORD#</strong> - Word representing the column. For example: one, two, three, ...</li>
<li><strong>#COLUMN_PLURAL#</strong> - Gets substituted by "s" if the column is bigger than one. Use it if the layout requires a class name "column" for the first column and "columns" for the following columns. For example: class="#COLUMN_WORD# column#COLUMN_PLURAL#"</li>
<li><strong>#COLUMN_SPAN_NUMBER#</strong> - Number of the column span. For example: 1, 2, 3, ...</li>
<li><strong>#COLUMN_SPAN_ALPHA#</strong> - Alphabet character representing the column span. For example: a, b, c, ...</li>
<li><strong>#COLUMN_SPAN_WORD#</strong> - Word representing the column span. For example: one, two, three, ...</li>
<li><strong>#COLUMN_SPAN_PLURAL#</strong> - Gets substituted by "s" if the column span is bigger than one. Use it if the layout requires a class name "column" for a single column span and "columns" if multiple columns are specified. For example: class="#COLUMN_SPAN_WORD# column#COLUMN_SPAN_PLURAL#"</li>
<li><strong>#CSS_CLASSES#</strong> - Substituted by the value specified as "Column CSS Classes". This allows to further customize a column with CSS classes.</li>
<li><strong>#ATTRIBUTES#</strong> - Substituted by the value specified as "Column Attributes". This allows to further customize a column.</li>
<li><strong>#FIRST_LAST_COLUMN_ATTRIBUTES#</strong> - Substituted by the value specified in "First Column Attributes" and "Last Column Attributes" depending if it's the first or last column.</li>
<li><strong>#CONTENT#</strong> - Substituted by the regions, page items or buttons displayed in the column.</li>
</ul>~' );
    --
    l_property_id := 1901;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'GRID_JAVASCRIPT_DEBUG_CODE',
        p_prompt                   => 'JavaScript Debug Code',
        p_property_type            => 'JAVASCRIPT',
        p_db_column                => 'GRID_JAVASCRIPT_DEBUG_CODE',
        p_display_length           => 90,
        p_max_length               => 4000,
        p_display_group_name       => 'LAYOUT',
        p_examples                 => q'~<p>The following example registers the JavaScript functions showLayoutColumns and hideLayoutColumns for the above events.
<pre>
apex.jQuery(document)
    .on("apex-devbar-grid-debug-on", showLayoutColumns)
    .on("apex-devbar-grid-debug-off", hideLayoutColumns);
</pre>
</p>~',
        p_help_text          => q'~<p>JavaScript code which gets executed to provide additional layout help when the "Show Layout Columns" and "Hide Layout Columns" buttons in the developer toolbar are clicked.
The JavaScript code has to register to the JavaScript events "apex-devbar-grid-debug-on" and "apex-devbar-grid-debug-off".</p>~' );
    --
    l_property_id := 1902;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'BREADCRUMB_POSITION',
        p_prompt                   => 'Breadcrumb Position',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'BREADCRUMB_DEF_REG_POS',
        p_display_group_name       => 'POSITIONS',
        p_lov_type                 => 'SLOTS',
        p_lov_component_type_id    => c_comp_type_display_point,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~Applies to generated components that use Breadcrumbs. Defines where Breadcrumbs are placed on the page.~' );
    --
    l_property_id := 1903;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'SIDEBAR_POSITION',
        p_prompt                   => 'Sidebar Position',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'SIDEBAR_DEF_REG_POS',
        p_display_group_name       => 'POSITIONS',
        p_lov_type                 => 'SLOTS',
        p_lov_component_type_id    => c_comp_type_display_point,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~Applies to generated components that use Sidebars. Defines where Sidebars are placed on the page.~' );
    --
    l_property_id := 1904;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'ALLOW_EMBED_IN_FRAME',
        p_prompt                   => 'Allow Embed In Frame',
        p_property_type            => 'CHECKBOXES',
        p_db_column                => 'DIALOG_BROWSER_FRAME',
        p_display_group_name       => 'DIALOG',
        p_lov_type                 => 'STATIC',
        p_help_text                => q'~<p>Your page template level browser frame options are listed below, along with the current setting for each.
Check the box next to a page mode to use this attribute to control if the browser is allowed to display your application's pages within a frame.
The current setting will be the default for each modal and non-modal dialog using this page template.<p/>
<p>Displaying pages within frames can be misused with "clickjacking" attacks.
In a clickjacking attack the attacker uses multiple layers to trick a user into clicking a button or link on another page when they were intending to click on the top level page.
Thus, the attacker is hijacking clicks (or keystrokes) meant for their page and routing them to another page.<p/>
<p>&PRODUCT_NAME. embeds modal dialogs in iframes.
If you set the application security attribute <em>Browser Frame</em> to "Deny",
checking <em>Allow Embed In Frame</em> for "Modal Dialog" will instead use "Allow from same origin" for dialog pages that use this template. </p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Modal Dialog',
        p_return_value  => 'MODAL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Non-Modal Dialog',
        p_return_value  => 'NON_MODAL' );
    --
    l_property_id := 1905;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'ERROR_PAGE_TEMPLATE',
        p_prompt                   => 'Template',
        p_property_type            => 'HTML',
        p_db_column                => 'ERROR_PAGE_TEMPLATE',
        p_display_length           => 90,
        p_max_length               => 32767,
        p_display_group_name       => 'ERROR_PAGE',
        p_is_translatable          => true,
        p_help_text                => q'~<p>Use this attribute when a page template is designated as an error template. Supported substitution strings include:</p>
<ul>
<li>#MESSAGE# and #ADDITIONAL_INFO# - Places the error message. </li>
<li>#TECHNICAL_INFO# - Displays detailed internal error information which will just be visible for developers.</li>
<li>#BACK_LINK# - Displays a link back to the previous page. </li>
<li>#OK# and #RETURN_TO_APPLICATION# - Returns translated text strings. </li>
</ul>~' );
    --
    l_property_id := 1906;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_TEMPLATE_CLASS',
        p_prompt             => 'Class',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'THEME_CLASS_ID',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Identifies a specific usage for this template.</p>
<p>When you switch to a new theme, all templates in one theme are assigned to corresponding templates in another theme. App Builder accomplishes this template mapping through the assignment of template class identifiers.
Use the <strong>Translatable</strong> check box to indicate that the template contains text strings that require translation.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Borderless Region',
        p_return_value  => '7' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bracketed Region',
        p_return_value  => '18' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Breadcrumb Region',
        p_return_value  => '6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Button Region with Title',
        p_return_value  => '4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Button Region without Title',
        p_return_value  => '17' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Chart Region',
        p_return_value  => '30' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Form Region',
        p_return_value  => '8' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hide and Show Region',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'List Region with Icon',
        p_return_value  => '29' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Navigation Region',
        p_return_value  => '5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Navigation Region, Alternative 1',
        p_return_value  => '16' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region without Buttons and Title',
        p_return_value  => '19' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region without Title',
        p_return_value  => '11' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Report Filter - Multi Row',
        p_return_value  => '32' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Report Filter - Single Row',
        p_return_value  => '31' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Reports Region',
        p_return_value  => '9' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Reports Region 100% Width',
        p_return_value  => '13' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Reports Region, Alternative 1',
        p_return_value  => '10' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Sidebar Region',
        p_return_value  => '2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Sidebar Region, Alternative 1',
        p_return_value  => '3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Wizard Region',
        p_return_value  => '12' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Wizard Region with Icon',
        p_return_value  => '20' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 1',
        p_return_value  => '21' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 2',
        p_return_value  => '22' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 3',
        p_return_value  => '23' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 4',
        p_return_value  => '24' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 5',
        p_return_value  => '25' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 6',
        p_return_value  => '26' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 7',
        p_return_value  => '27' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 8',
        p_return_value  => '28' );
    --
    l_property_id := 1907;
    store_tmpl_subscription_prop (
        p_property_id           => l_property_id,
        p_name                  => 'REGION_TEMPLATE',
        p_lov_component_type_id => c_comp_type_region_template );
    --
    l_property_id := 1908;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_BODY_TEMPLATE',
        p_prompt             => 'Template',
        p_property_type      => 'HTML',
        p_db_column          => 'TEMPLATE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'TEMPLATE',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Region templates provide the appearance for a portion of a page called a region. Use substitution strings to indicate the existence and placement of a component within the region.</p>
<p>#BODY# is the only required substitution string. It identifies where the source of the region should be placed. All other substitution strings are optional.</p>
<p>The following are valid substitution strings:
<ul class="noIndent">
<li>#TITLE#</li>
<li>#PAGE_TITLE#</li>
<li>#EXPAND#</li>
<li>#CHANGE#</li>
<li>#BODY#</li>
<li>#SUB_REGION_HEADERS#</li>
<li>#SUB_REGIONS#</li>
<li>#FORM_OPEN#</li>
<li>#FORM_CLOSE#</li>
<li>#REGION_ID#</li>
<li>#REGION_STATIC_ID#</li>
<li>#REGION_CSS_CLASSES#</li>
<li>#REGION_ATTRIBUTES#</li>
<li>#REGION_HEADER#</li>
<li>#REGION_FOOTER#</li>
<li>#REGION_IMAGE#</li>
<li>#REGION_IMAGE_URL#</li>
<li>#REGION_IMAGE_ALT_TEXT#</li>
<li>#REGION_IMAGE_ATTRIBUTES#</li>
<li>#REGION_LANDMARK_ATTRIBUTES#</li>
</ul>
</p>
<p>You can also use the following substitution strings to specify positions of buttons within this region:</p>
<ul class="noIndent">
<li>#EDIT#</li>
<li>#CLOSE#</li>
<li>#CREATE#</li>
<li>#CREATE2#</li>
<li>#EXPAND#</li>
<li>#HELP#</li>
<li>#DELETE#</li>
<li>#COPY#</li>
<li>#NEXT#</li>
<li>#PREVIOUS#</li>
</ul>~' );
    --
    l_property_id := 1910;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'REGION_TITLE_HTML_ID',
        p_prompt                   => 'Region Title HTML ID',
        p_property_type            => 'TEXT',
        p_db_column                => 'REGION_TITLE_DOM_ID',
        p_display_length           => 64,
        p_max_length               => 255,
        p_display_group_name       => 'ACCESSIBILITY',
        p_help_text                => q'~<p>The ID of the element that contains the region title (eg the #TITLE# substitution string).</p>
<p>This is used by the region landmark support, to determine if <code>aria-labelledby</code> or <code>aria-label</code> is used to label the landmark.</p>
<p>If the landmark is labelled using the region title and this attribute is defined, the landmark can be labelled by <code>aria-labelledby</code>. If this is not defined, or the region overrides with a custom landmark label, then <code>aria-label</code> will be used.</p>
<p>Note: You can use the <code>#REGION_STATIC_ID#</code> substitution string to refer to the region's static ID.</p>
<p>Note: In order for this functionality to work, the Template attribute must include the <code>#REGION_LANDMARK_ATTRIBUTES#</code> substitution string. This should be defined on the main container element of the template.</p>~' );
    --
    l_property_id := 1911;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HTML_TABLE_ATTRIBUTES',
        p_prompt             => 'HTML Table Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'TEMPLATE2',
        p_display_length     => 96,
        p_max_length         => 255,
        p_display_group_name => 'ADVANCED',
        p_is_translatable    => true,
        p_examples           => q'~<pre>class="instructiontext"</pre>~',
        p_help_text          => q'~<p>Used when rendering items within regions to control formatting.</p>
<p>Page items display within regions. Each item is part of an HTML table if the layout type in the page template is set to "Table". You can set the attributes of this table using this attribute.</p>~' );
    --
    l_property_id := 1912;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SUB_REGION_HEADER_TEMPLATE',
        p_prompt             => 'Header Template',
        p_property_type      => 'HTML',
        p_db_column          => 'SUB_PLUG_HEADER_TEMPLATE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'SUB_REGIONS',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Sub region header templates together with sub region header entry templates provide the possibility to generate a list of region titles of all the sub regions of the current region.</p>
<p>#ENTRIES# is the only required substitution string. It identifies where the sub region header entries should be placed. All other substitution strings are optional.</p>
<p>The following are valid substitution strings:
<ul class="noIndent">
<li>#ENTRIES#</li>
<li>#REGION_ID#</li>
<li>#REGION_STATIC_ID#</li>
</ul>
</p>
<p>Use #SUB_REGION_HEADERS# in the region template to place the output of this template.</p>~' );
    --
    l_property_id := 1913;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'SUB_REGION_HEADER_ENTRY_TEMPLATE',
        p_prompt               => 'Header Entry Template',
        p_property_type        => 'HTML',
        p_db_column            => 'SUB_PLUG_HEADER_ENTRY_TEMPLATE',
        p_display_length       => 80,
        p_max_length           => 32767,
        p_display_group_name   => 'SUB_REGIONS',
        p_is_translatable      => true,
        p_help_text            => q'~<p>Sub region header entry templates together with the sub region header templates provide the possibility to generate a list of region titles of all the sub regions of the current region.</p>
<p>The following are valid substitution strings:
<ul class="noIndent">
<li>#SUB_REGION_ID#</li>
<li>#SUB_REGION_TITLE#</li>
<li>#REGION_ID#</li>
<li>#REGION_STATIC_ID#</li>
</ul>
</p>
<p>Use #ENTRIES# in the sub region header template to place the output of this template.</p>~' );
    --
    l_property_id := 1914;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SUB_REGION_BODY_TEMPLATE',
        p_prompt             => 'Template',
        p_property_type      => 'HTML',
        p_db_column          => 'SUB_PLUG_TEMPLATE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'SUB_REGIONS',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Sub Region templates provide the possibility to wrap the sub regions with additional HTML code.</p>
<p>#SUB_REGION# is the only required substitution string. It identifies where the source of the sub region should be placed. All other substitution strings are optional.</p>
<p>The following are valid substitution strings:
<ul class="noIndent">
<li>#SUB_REGION#</li>
<li>#SUB_REGION_ID#</li>
<li>#SUB_REGION_TITLE#</li>
<li>#REGION_ID#</li>
<li>#REGION_STATIC_ID#</li>
</ul>
</p>
<p>Use #SUB_REGIONS# in the region template to place the output of this template.</p>~' );
    --
    l_property_id := 1915;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_IMAGE_TEMPLATE',
        p_prompt             => 'Template',
        p_property_type      => 'HTML',
        p_db_column          => 'IMAGE_TEMPLATE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'IMAGE',
        p_is_translatable    => true,
        p_help_text          => q'~<p>The Image template provides the possibility of defining a region image with additional HTML code.</p>
<p>#REGION_IMAGE_URL# is the only required substitution string and should be used within an img HTML tag. It specifies the img src attribute. All other substitution strings are optional.</p>
<p>The following are valid substitution strings:
<ul class="noIndent">
<li>#REGION_IMAGE_URL#</li>
<li>#REGION_IMAGE_ALT_TEXT#</li>
<li>#REGION_IMAGE_ATTRIBUTES#</li>
<li>#REGION_ID#</li>
<li>#REGION_STATIC_ID#</li>
</ul>
</p>
<p>Use #REGION_IMAGE# in the region template to place the output of this template.</p>
~' );
--
   l_property_id := 1916;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CLASSIC_REPORT_TEMPLATE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ROW_TEMPLATE_TYPE',
        p_display_group_name => 'ATTRIBUTES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Displays the type of the template - either <strong>Named columns</strong> or <strong>Generic Columns</strong>.</p>
<p>Named Column templates reference column names in the template, whereas Generic Column Templates reference #COLUMN_VALUE# in the template.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Generic Columns (column template)',
        p_return_value  => 'GENERIC_COLUMNS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Named Column (row template)',
        p_return_value  => 'NAMED_COLUMNS' );
    --
    l_property_id := 1917;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CLASSIC_REPORT_TEMPLATE_CLASS',
        p_prompt             => 'Class',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'THEME_CLASS_ID',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Identifies a specific usage for this template.</p>
<p>When you switch to a new theme, all templates in one theme are assigned to corresponding templates in another theme. App Builder accomplishes this template mapping through the assignment of template class identifiers.</p>
<p>Use the <strong>Translatable</strong> check box to indicate the template contains text strings that require translation.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Borderless',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Horizontal Border',
        p_return_value  => '2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'One Column Unordered List',
        p_return_value  => '3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Standard',
        p_return_value  => '4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Standard, Alternating Row Colors',
        p_return_value  => '5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Value Attribute Pairs',
        p_return_value  => '6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 1',
        p_return_value  => '7' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 2',
        p_return_value  => '8' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 3',
        p_return_value  => '9' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 4',
        p_return_value  => '10' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 5',
        p_return_value  => '11' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 6',
        p_return_value  => '12' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 7',
        p_return_value  => '13' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom 8',
        p_return_value  => '14' );
    --
    l_property_id := 1918;
    store_tmpl_subscription_prop (
        p_property_id           => l_property_id,
        p_name                  => 'CLASSIC_REPORT_TEMPLATE',
        p_lov_component_type_id => c_comp_type_report_template );
    --
    l_property_id := 1919;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BEFORE_FIRST_ROW',
        p_prompt             => 'Top',
        p_property_type      => 'HTML',
        p_db_column          => 'ROW_TEMPLATE_BEFORE_ROWS',
        p_display_length     => 90,
        p_max_length         => 32767,
        p_display_group_name => 'REPORT_TEMPLATE',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&lt;table&gt;</pre>~',
        p_help_text          => q'~<p>Enter HTML which will be displayed one time at the beginning of a report template.</p>
<p>The most common use of this attribute is to open an HTML table.</p>
<p>If you want to display pagination above the reports, your template needs to specify the following substitution string:</p>
<pre>#TOP_PAGINATION#</pre>
<p>The #TOP_PAGINATION# substitution string will generate HTML which starts with an opening &lt;tr&gt; tag and ends with a closing &lt;/tr&gt; tag.  Ideally, you would include an open table tag and #TOP_PAGINATION# substitution string like so:</p>
<pre>&lt;table&gt;#TOP_PAGINATION#</pre>
<p>You can also use these substitution strings:
<ul><li>#CSV_LINK#. If you wish to support exporting your report to CSV format for use in spreadsheets.</li>
<li>#REPORT_ATTRIBUTES#.  This substitution string is set per report region on the report attributes page.</li>
<li>#COMPONENT_CSS_CLASSES#.  This substitution string is set on the region edit page</li>
</ul></p>~' );
    --
    l_property_id := 1920;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ROW_BEFORE_FIRST_ROW',
        p_prompt             => 'Top',
        p_property_type      => 'HTML',
        p_db_column          => 'ROW_TEMPLATE_BEFORE_ROWS',
        p_display_length     => 96,
        p_max_length         => 32767,
        p_display_group_name => 'REPORT_TEMPLATE',
        p_is_translatable    => true,
        p_examples           => q'~<p>Open HTML table: <pre>&lt;table&gt;</pre></p>
<p>Specify column headers: <pre>&lt;th&gt;#1#&lt;/th&gt;&lt;th&gt;#2#&lt;/th&gt;&lt;th&gt;#3#&lt;/th&gt;</pre></p>~',
        p_help_text          => q'~<p>Enter HTML which will be displayed one time at the beginning of a report template.</p>
<p>The most common use of this attribute is to open an HTML table.</p>
<p>You can also specify table column headers here.</p>
<p>If you want to display pagination above the reports, your template needs to specify the following substitution string:</p>
<pre>#TOP_PAGINATION#</pre>
The #TOP_PAGINATION# substitution string will generate HTML which starts with an opening &lt;tr&gt; tag and ends with a closing &lt;/tr&gt; tag.  Ideally, you would include an open table tag and #TOP_PAGINATION# substitution string like so:</p>
<pre>&lt;table&gt;#TOP_PAGINATION#</pre>
<p>You can also use the substitution string #CSV_LINK# if you wish to support exporting your report to CSV format for use in spreadsheets.</p>~' );
    --
    l_property_id := 1921;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AFTER_LAST_ROW',
        p_prompt             => 'Bottom',
        p_property_type      => 'HTML',
        p_db_column          => 'ROW_TEMPLATE_AFTER_ROWS',
        p_display_length     => 90,
        p_max_length         => 32767,
        p_display_group_name => 'REPORT_TEMPLATE',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&lt;/table&gt;</pre>~',
        p_help_text          => q'~<p>This text displays after the last row. Typically, you close the HTML table tag here.</p>
<p>The following substitution strings are available:</p>
<ul class="noIndent">
<li>#PAGINATION# - Will be replaced with the pagination attribute</li>
<li>#COLCOUNT# - Number of HTML columns to span</li>
<li>#CSV_LINK# - Will be replaced with CSV download link if CSV export is enabled, otherwise string will not be shown</li>
<li>#EXTERNAL_LINK# - will be replaced with download link for exports using external processing engine for example, PDF export, if this feature is not enabled, the string will not be shown</li>
</ul>~' );
    --
    l_property_id := 1922;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BEFORE_COLUMN_HEADING',
        p_prompt             => 'Before Heading',
        p_property_type      => 'HTML',
        p_db_column          => 'BEFORE_COLUMN_HEADING',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'COLUMN_TEMPLATES',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Display this text before report headings.</p>~' );
    --
    l_property_id := 1923;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_HEADING_TEMPLATE',
        p_prompt             => 'Heading',
        p_property_type      => 'HTML',
        p_db_column          => 'COLUMN_HEADING_TEMPLATE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'COLUMN_TEMPLATES',
        p_is_translatable    => true,
        p_examples           => q'~<pre> &lt;th &gt;Item Help Text&lt;/th&gt;</pre>~',
        p_help_text          => q'~<p>This attribute is only applicable to generic column templates. Use this template to colorize each column header cell. The text of this attribute must include Help to indicate where the cell heading text is to be colorized.</p>
<p>If you do not want any column headings, enter the following:</p>
<pre>OMIT</pre>
<p>If you do use this attribute, &PRODUCT_NAME. engine applies the default column heading template.</p>~' );
    --
    l_property_id := 1924;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ROW_COLUMN_HEADING_TEMPLATE',
        p_prompt             => 'Heading',
        p_property_type      => 'HTML',
        p_db_column          => 'COLUMN_HEADING_TEMPLATE',
        p_display_length     => 96,
        p_max_length         => 32767,
        p_display_group_name => 'COLUMN_TEMPLATES',
        p_is_translatable    => true,
        p_examples           => q'~<pre> &lt;th #ALIGNMENT#&gt;#COLUMN_HEADER#&lt;/th&gt;</pre>~',
        p_help_text          => q'~<p>This attribute is for use only with generic column templates. Use this template to colorize each column header cell. The text of this attribute must include Help to indicate where the cell heading text is to be colorized.</p>
<p>If you do not enter a column header template, then a default column header template will be applied.</p>
<p>If you do not want any column headings, enter the following:</p>
<pre>OMIT</pre>
<p>Support for column headings with row templates (named column) will be discontinued with the next version. Headings for row templates should be define in "before rows" using column position #1# substitutions.</p>~' );
    --
    l_property_id := 1925;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AFTER_COLUMN_HEADING',
        p_prompt             => 'After Heading',
        p_property_type      => 'HTML',
        p_db_column          => 'AFTER_COLUMN_HEADING',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'COLUMN_TEMPLATES',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Display this text after report headings.</p>~' );
    --
    l_property_id := 1926;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BEFORE_EACH_ROW',
        p_prompt             => 'Before Each Row',
        p_property_type      => 'HTML',
        p_db_column          => 'ROW_TEMPLATE_BEFORE_FIRST',
        p_display_length     => 90,
        p_max_length         => 32767,
        p_display_group_name => 'COLUMN_TEMPLATES',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&lt;tr&gt;</pre>~',
        p_help_text          => q'~<p>Display this text before displaying all columns for the report. Use this attribute to open a new HTML row. Used for column templates only.</p>
<p>Before Each Row supports the following substitution strings:</p>
<ul>
<li>#ROWNUM# - Specifies the current row</li>
<li>#COLCOUNT# - Specifies the number of columns</li>
<li>#HIGHLIGHT_ROW# - Enables row highlighting</li>
</ul>~' );
    --
    store_report_template_props( p_start_property_id => 1927 );   -- COLUMN: 1927 to 1938, ROW: 1939 to 1950
    --
    l_property_id := 1951;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AFTER_EACH_ROW',
        p_prompt             => 'After Each Row',
        p_property_type      => 'HTML',
        p_db_column          => 'ROW_TEMPLATE_AFTER_LAST',
        p_display_length     => 90,
        p_max_length         => 32767,
        p_display_group_name => 'ROW_TEMPLATES',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&lt;/tr&gt;</pre>~',
        p_help_text          => q'~<p>Display this HTML after all columns for the report display. Typically used to close an HTML table row. Used with column templates only.</p>~' );
    --
    l_property_id := 1952;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BACKGROUND_COLOR_FOR_CHECKED_ROW',
        p_prompt             => 'Checked row',
        p_property_type      => 'TEXT',
        p_db_column          => 'ROW_STYLE_CHECKED',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'ROW_HIGHLIGHTING',
        p_help_text          => q'~This attribute controls the background color of a report row when the row selector is checked.~' );
    --
    l_property_id := 1953;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BACKGROUND_COLOR_FOR_CURRENT_ROW',
        p_prompt             => 'Current row',
        p_property_type      => 'TEXT',
        p_db_column          => 'ROW_STYLE_MOUSE_OVER',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'ROW_HIGHLIGHTING',
        p_help_text          => q'~This attribute controls the background color of a report row when the user moves the mouse over the row.~' );
    --
    l_property_id := 1954;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGINATION_TEMPLATE',
        p_prompt             => 'Pagination',
        p_property_type      => 'HTML',
        p_db_column          => 'PAGINATION_TEMPLATE',
        p_display_length     => 90,
        p_max_length         => 32767,
        p_display_group_name => 'PAGINATION_SUBTEMPLATE',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&lt;span class="instructiontext"&gt;#TEXT#&lt;/span&gt;</pre>~',
        p_help_text          => q'~<p>This attribute will be applied to the entire pagination subtemplate. You can further modify each item in the subtemplate below.</p>
<p>Use the substitution string #TEXT# where you want the pagination subtemplate to display</p>~' );
    --
    l_property_id := 1955;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NEXT_PAGE_TEMPLATE',
        p_prompt             => 'Next Page',
        p_property_type      => 'HTML',
        p_db_column          => 'NEXT_PAGE_TEMPLATE',
        p_display_length     => 90,
        p_max_length         => 32767,
        p_display_group_name => 'PAGINATION_SUBTEMPLATE',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&lt;a href="#LINK#"&gt;next&lt;/a&gt;</pre>~',
        p_help_text          => q'~<p>Enter HTML that will modify how the "Next Page" portion of the pagination subtemplate will appear.</p>~' );
    --
    l_property_id := 1956;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PREVIOUS_PAGE_TEMPLATE',
        p_prompt             => 'Previous Page',
        p_property_type      => 'HTML',
        p_db_column          => 'PREVIOUS_PAGE_TEMPLATE',
        p_display_length     => 90,
        p_max_length         => 32767,
        p_display_group_name => 'PAGINATION_SUBTEMPLATE',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&lt;a href="#LINK#"&gt;previous&lt;/a&gt;</pre>~',
        p_help_text          => q'~p>Enter HTML that will modify how the "Previous Page" portion of the pagination subtemplate will appear.</p>~' );
    --
    l_property_id := 1957;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NEXT_SET_TEMPLATE',
        p_prompt             => 'Next Set',
        p_property_type      => 'HTML',
        p_db_column          => 'NEXT_SET_TEMPLATE',
        p_display_length     => 90,
        p_max_length         => 32767,
        p_display_group_name => 'PAGINATION_SUBTEMPLATE',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&lt;a href="#LINK#"&gt;next set&lt;/a&gt;</pre>~',
        p_help_text          => q'~<p>Enter HTML that will modify how the "Next Set" portion of the pagination subtemplate will appear.</p>~' );
    --
    l_property_id := 1958;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PREVIOUS_SET_TEMPLATE',
        p_prompt             => 'Previous Set',
        p_property_type      => 'HTML',
        p_db_column          => 'PREVIOUS_SET_TEMPLATE',
        p_display_length     => 90,
        p_max_length         => 32767,
        p_display_group_name => 'PAGINATION_SUBTEMPLATE',
        p_is_translatable    => true,
        p_examples           => q'~<pre>&lt;a href="#LINK#"&gt;previous set&lt;/a&gt;</pre>~',
        p_help_text          => q'~<p>Enter HTML that will modify how the "Previous Set" portion of the pagination subtemplate will appear.</p>~' );
    --
    l_property_id := 1959;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PLUGIN_INTERNAL_NAME',
        p_prompt                   => 'Internal Name',
        p_property_type            => 'TEXT',
        p_db_column                => 'NAME',
        p_display_length           => 64,
        p_max_length               => 40,
        p_display_group_name       => 'IDENTIFICATION',
        p_examples                 => q'~<pre><code>
{with/}
MY_ARGUMENT:=foo
{apply THEME$COM.MYCOMPANY.BADGE/}
</code></pre>~',
        p_help_text                => q'~<p>Enter an internal name for the plug-in. The internal name is used internally by &PRODUCT_NAME. for identifying the plug-in, and is not displayed. The internal name must be unique to your current application.</p>
<p>It is recommended that your organization domain name be used as a prefix to plug-in names, to create a globally unique name. For example: a domain name of "mycompany.com" prefixed to an Item Type plug-in named 'Slider', would result in an internal name like the following: <code>COM.MYCOMPANY.SLIDER</code></p>
<p>The internal name of a Template Component type plug-in as part of a theme will always be prefixed with "THEME$": <code>THEME$COM.MYCOMPANY.BADGE</code>.
Use this internal name to apply a Template Component manually where server-side template directives are supported.</p>~' );
    --
    l_property_id := 1960;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PLUGIN_TYPE',
        p_prompt                   => 'Type',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'PLUGIN_TYPE',
        p_display_group_name       => 'IDENTIFICATION',
        p_lov_type                 => 'STATIC',
        p_help_text                => q'~Defines the type of component that can use this plug-in.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Authentication Scheme Type',
        p_return_value  => 'AUTHENTICATION TYPE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Authorization Scheme Type',
        p_return_value  => 'AUTHORIZATION TYPE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dynamic Action',
        p_return_value  => 'DYNAMIC ACTION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM TYPE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Process',
        p_return_value  => 'PROCESS TYPE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'REST Data Source',
        p_return_value  => 'WEB SOURCE TYPE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region',
        p_return_value  => 'REGION TYPE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Report Column',
        p_return_value  => 'REPORT COLUMN TYPE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Template Component',
        p_return_value  => 'TEMPLATE COMPONENT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Interactive Report Column',
        p_return_value  => 'IR COLUMN',
        p_is_internal   => 'Y' );
    --
    l_property_id := 1961;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'IS_QUICK_PICK_ADVANCED',
        p_prompt                   => 'Quick Pick',
        p_property_type            => 'YES NO',
        p_db_column                => 'IS_QUICK_PICK',
        p_display_group_name       => 'ADVANCED',
        p_help_text                => q'~<p>Specifies if this plug-in is listed in the Quick Pick Select List.</p>
<p>To display the Template Component plug-in in the Create Page wizard, quick pick has to be <strong>On</strong> and Custom Attributes have to have demo values set.</p>~' );
    --
    l_property_id := 1962;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'IS_DEPRECATED',
        p_prompt                   => 'Deprecated',
        p_property_type            => 'YES NO',
        p_db_column                => 'IS_DEPRECATED',
        p_display_group_name       => 'ADVANCED',
        p_is_internal              => true,
        p_help_text                => null );
    --
    l_property_id := 1963;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'IS_LEGACY',
        p_prompt                   => 'Legacy',
        p_property_type            => 'YES NO',
        p_db_column                => 'IS_LEGACY',
        p_display_group_name       => 'ADVANCED',
        p_is_internal              => true,
        p_help_text                => null );
    --
    l_property_id := 1964;
    store_subscription_prop (
        p_property_id              => l_property_id,
        p_name                     => 'PLUGIN',
        p_lov_component_type_id    => c_comp_type_plugin,
        p_help_text                => q'~<p>Use this field to base this plug-in on an existing plug-in in this application or another application in your workspace.</p>~' );
    --
    l_property_id := 1965;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'SUBSCRIBE_COMPONENT_SETTINGS',
        p_prompt                   => 'Subscribe Component Settings',
        p_property_type            => 'YES NO',
        p_db_column                => 'SUBSCRIBE_PLUGIN_SETTINGS',
        p_display_group_name       => 'SUBSCRIPTION',
        p_help_text                => q'~Specifies if the component settings of the plug-in should be refreshed with the component settings of the subscribed plug-in in the master application if the plug-in is getting refreshed.~' );
    --
    l_property_id := 1966;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PLUGIN_THEME',
        p_prompt                   => 'Theme',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'THEME_ID',
        p_display_group_name       => 'IDENTIFICATION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_theme,
        p_help_text                => q'~<p>Identifies the theme to which this Template Component is associated. A theme is a grouping of templates which together provide layout and style for an application.</p>~',
        p_comment_text             => '$$$ Condition of type "ITEM_IS_NOT_NULL" found, please check logic.' );
    --
    l_property_id := 1967;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PLUGIN_TMPL_COMPONENT_TYPE',
        p_prompt                   => 'Available as',
        p_property_type            => 'CHECKBOXES',
        p_db_column                => 'SUPPORTED_COMPONENT_TYPES',
        p_display_group_name       => 'TEMPLATES',
        p_lov_type                 => 'STATIC',
        p_examples                 => q'~<pre>
{with/}
PLACEHOLDER1:=Some value
PLACEHOLDER2:=Some value
{apply INTERNAL_NAME/}
</pre>~',
        p_help_text          => q'~<p>Specifies how the plug-in can be displayed and where it can be used.</p>
<p>
<dl>
<dt>Region Only</dt>
<dd>When checked, the Template Component can be used for a region to show static data using the plug-in attributes.</dd>
<dt>Multiple (Report)</dt>
<dd>When checked, the Template Component can be used for a region to show multiple rows with pagination options.</dd>
<dt>Single (Partial)</dt>
<dd>When checked, the Template Component can be used for an Interactive Report Column or for a region to show a single row.</dd>
</dl>
<p>Template Components can always be used in server-side Template Directives using <code>{with/}</code> and <code>{apply/}</code> syntax without checking any of the checkboxes.<p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Single (Partial)',
        p_return_value  => 'PARTIAL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Multiple (Report)',
        p_return_value  => 'REPORT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region Only',
        p_return_value  => 'REGION_ONLY' );
    --
    l_property_id := 1968;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARTIAL_TEMPLATE',
        p_prompt             => 'Partial',
        p_property_type      => 'HTML',
        p_db_column          => 'PARTIAL_TEMPLATE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'TEMPLATES',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter the markup for the template. The Static IDs of the Custom Attributes of scope "Component" can be referenced with <code>#STATIC_ID#</code> syntax.
You can quickly synchronize all placeholders as Custom Attributes using the <strong>Synchronize from Templates</strong> button from the Custom Attributes region.
</p>
<p>
The following predefined template placeholders are supported:
<dl>
<dt>APEX$IS_LAZY_LOADING</dt>
<dd>Set to <code>T</code> if the region uses lazy loading to load its data and skeleton markup should be rendered instead.</dd>
<dt>APEX$HAS_ACTION_BUTTONS</dt>
<dd>Set to <code>T</code> if at least one button or button menu action gets rendered.</dd>
</dl>
</p>
<p>The Static IDs of Action Positions can be referenced with <code>#STATIC_ID#</code> syntax.<br />
If the Action Position is of type Link, <code>#STATIC_ID_ATTR#</code> can be used to reference the value of the Link Attribute.</p>
<p>You can also use slot placeholders to allow this partial to render page components (regions, items, buttons). Slots can be referenced with <code>#SLOT_STATIC_ID#</code> syntax.<br />
To render a slot conditionally to its usage use the <code>{if SLOT_STATIC_ID/}&lt;div class="inner-div"&gt;#SLOT_STATIC_ID#&lt;/div&gt;{endif/}</code> syntax to render additional markup only if the slot is being used.<br />
Slots in the partial template will only render if the associated region uses <strong>Display As: Single (Partial)</strong></p>
<p>Supports Template Directives.</p>~' );
    --
    l_property_id := 1969;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REPORT_BODY_TEMPLATE',
        p_prompt             => 'Report Body',
        p_property_type      => 'HTML',
        p_db_column          => 'REPORT_BODY_TEMPLATE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'TEMPLATES',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter the markup for the report body template. The Static IDs of the Custom Attributes of scope "Report" can be referenced with <code>#STATIC_ID#</code> syntax.
You can quickly synchronize all placeholders as Custom Attributes using the <strong>Synchronize Attributes</strong> button.</p>
<p>The following predefined template placeholders are supported:
<dl>
<dt>APEX$IS_LAZY_LOADING</dt>
<dd>Set to <code>T</code> if the region uses lazy loading to load its data and skeleton markup should be rendered instead.</dd>
<dt>APEX$HAS_MESSAGE</dt>
<dd>Set to <code>T</code> if the region's data source does not return any data.</dd>
<dt>APEX$MESSAGE</dt>
<dd>Text of the No Data Found Message.</dd>
<dt>APEX$MESSAGE_ICON</dt>
<dd>Icon class of the No Data Found Icon.</dd>
<dt>APEX$COMPONENT_CSS_CLASSES</dt>
<dd>CSS classes specified for the region.</dd>
<dt>APEX$ROWS</dt>
<dd>For each row queried, output of the Row template.</dd>
</dl>
</p>
<p>Supports Template Directives.</p>~' );
    --
    l_property_id := 1909;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REPORT_GROUP_TEMPLATE',
        p_prompt             => 'Report Group',
        p_property_type      => 'HTML',
        p_db_column          => 'REPORT_GROUP_TEMPLATE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'TEMPLATES',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter the markup for the report group template. In addition, the Static IDs of all Custom Plug-in Attributes where Scope = Report or Report Group can also be used.
You can quickly synchronize all placeholders as Custom Attributes using the <strong>Synchronize Attributes</strong> button.
</p>
<p>
The following predefined template placeholders are supported:
</p><dl>
<dt>APEX$ROWS</dt>
<dd>Replaced by the output of "Report Row" template for each row of the current group.</dd>
<dt>APEX$DOM_ID</dt>
<dd>Unique DOM ID generated when the template is invoked, useful for referencing other DOM elements in the provided HTML  markup.</dd>
<dt>APEX$IS_LAZY_LOADING</dt>
<dd>Set to <code>T</code> if the region uses lazy loading to load its data and skeleton markup should be rendered instead.</dd>
</dl>
<p></p>
<p>Supports Template Directives.</p>~' );
    --
    l_property_id := 1970;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REPORT_ROW_TEMPLATE',
        p_prompt             => 'Report Row',
        p_property_type      => 'HTML',
        p_db_column          => 'REPORT_ROW_TEMPLATE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'TEMPLATES',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter the markup for the report row template. The Static IDs of the Custom Attributes of scope "Report" can be referenced with <code>#STATIC_ID#</code> syntax.
You can quickly synchronize all placeholders as Custom Attributes using the <strong>Synchronize Attributes</strong> button.</p>
<p>The following predefined template placeholders are supported:
<dl>
<dt>APEX$IS_LAZY_LOADING</dt>
<dd>Set to <code>T</code> if the region uses lazy loading to load its data and skeleton markup should be rendered instead.</dd>
<dt>APEX$ROW_IDENTIFICATION</dt>
<dd>Contains data-id and data-rownum attributes to identify a row.</dd>
<dt>APEX$ROW_ID</dt>
<dd>Primary key value of the current row.</dd>
<dt>APEX$PARTIAL</dt>
<dd>Output of the Partial template.</dd>
</dl>
</p>
<p>Supports Template Directives.</p>~' );
    --
    l_property_id := 1971;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TRANSLATE_TEMPLATES',
        p_prompt             => 'Translate Templates',
        p_property_type      => 'YES NO',
        p_db_column          => 'TRANSLATE_THIS_TEMPLATE',
        p_display_group_name => 'TEMPLATES',
        p_help_text          => q'~Specify whether the templates are included in the XLIFF translation file.~' );
    --
    l_property_id := 1972;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_ESCAPE_MODE',
        p_prompt             => 'Default Escape Mode',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DEFAULT_ESCAPE_MODE',
        p_display_group_name => 'TEMPLATES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~The default escape mode for substitutions of the templates.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML',
        p_return_value  => 'HTML' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML Attribute',
        p_return_value  => 'ATTR' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Strip HTML',
        p_return_value  => 'STRIPHTML' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Raw',
        p_return_value  => 'RAW' );
    --
    l_property_id := 1973;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NUMBER_OF_LAZY_LOADING_SKELETONS',
        p_prompt             => 'Number of Lazy Loading Skeletons',
        p_property_type      => 'INTEGER',
        p_db_column          => 'REPORT_PLACEHOLDER_COUNT',
        p_display_length     => 4,
        p_max_length         => null,
        p_min_value          => 0,
        p_display_group_name => 'TEMPLATES',
        p_help_text          => q'~Specify how often the partial template is rendered as a skeleton if the region's display attribute is set to <strong>Multiple (Report)</strong> and lazy loading is turned on.~' );
    --
    l_property_id := 1974;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'API_INTERFACE',
        p_prompt                   => 'API Interface',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'API_VERSION',
        p_display_length           => null,
        p_max_length               => null,
        p_display_group_name       => 'CALLBACKS',
        p_lov_type                 => 'STATIC',
        p_help_text                => q'~<p>Specify if the item type plug-in uses the deprecated FUNCTION based APIs to call the plug-in callbacks or if it uses the new PROCEDURE based APIs. Note: In order for an item type plug-in to support Interactive Grid Columns, it must implement the PROCEDURE based APIs.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Procedure',
        p_return_value  => '3' );

    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Procedure with Legacy Attributes [deprecated]',
        p_return_value  => '2',
        p_is_deprecated => 'Y' );

    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function',
        p_return_value  => '1',
        p_is_deprecated => 'Y' );
    --
    l_property_id := 1975;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RENDER_PROCEDURE_FUNCTION_NAME',
        p_prompt             => 'Render Procedure/Function Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'RENDER_FUNCTION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'CALLBACKS',
        p_examples           => q'~<p><pre>render_slider</pre></p>
<p><pre>#OWNER#.render_slider</pre></p>~',
        p_help_text          => q'~<p>Enter the name of the PL/SQL procedure/function to be called to render the plug-in. It can reference a procedure or function of the anonymous PL/SQL code block, a package procedure or function, or stand alone procedure or function in the database.</p>
<p>When referencing a database PL/SQL package or stand alone procedure/function, you can use the <code>#OWNER#</code> substitution string to reference the parsing schema of the current application.</p>
<p>Item Type Plug-in Render Procedures must implement the following interface:
<pre>
procedure &lt;name of procedure&gt; (
    p_item   in            apex_plugin.t_item,
    p_plugin in            apex_plugin.t_plugin,
    p_param  in            apex_plugin.t_item_render_param,
    p_result in out nocopy apex_plugin.t_item_render_result )
</pre></p>
<p>Region Type Plug-in Render Functions must implement the following interface:
<pre>
function &lt;name of function&gt; (
    p_region              in apex_plugin.t_region,
    p_plugin              in apex_plugin.t_plugin,
    p_is_printer_friendly in boolean )
    return apex_plugin.t_region_render_result
</pre></p>
<p>Dynamic Action Plug-in Render Functions must implement the following interface:
<pre>
function &lt;name of function&gt; (
    p_dynamic_action in apex_plugin.t_dynamic_action,
    p_plugin         in apex_plugin.t_plugin )
    return apex_plugin.t_dynamic_action_render_result
</pre></p>~' );
    --
    l_property_id := 1976;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'META_DATA_PROCEDURE_NAME',
        p_prompt             => 'Meta Data Procedure Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'META_DATA_FUNCTION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'CALLBACKS',
        p_examples           => q'~<p><pre>meta_data_slider</pre></p>
<p><pre>#OWNER#.meta_data_slider</pre></p>~',
        p_help_text          => q'~<p>Enter the name of the PL/SQL procedure to be called to get dynamic meta data about the plug-in. It can reference a procedure of the anonymous PL/SQL code block, a package procedure or stand alone procedure in the database.</p>
<p>When referencing a database PL/SQL package or stand alone procedure, you can use the <code>#OWNER#</code> substitution string to reference the parsing schema of the current application.</p>
<p>Item Type Plug-in Meta Data Procedures must implement the following interface:
<pre>
procedure &lt;name of procedure&gt; (
    p_item   in            apex_plugin.t_item,
    p_plugin in            apex_plugin.t_plugin,
    p_param  in            apex_plugin.t_item_meta_data_param,
    p_result in out nocopy apex_plugin.t_item_meta_data_result )
</pre></p>~' );
    --
    l_property_id := 1977;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SESSION_SENTRY_FUNCTION_NAME',
        p_prompt             => 'Session Sentry Function Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'SESSION_SENTRY_FUNCTION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'CALLBACKS',
        p_examples           => q'~<p><pre>check_ldap_session_sentry</pre></p>
<p><pre>#OWNER#.check_ldap_session_sentry</pre></p>~',
        p_help_text          => q'~<p>Enter the name of the PL/SQL function the plug-in can use to perform the session sentry verification. It can reference a function of the anonymous PL/SQL code block, a package function or a stand alone function in the database.</p>
<p>When referencing a database PL/SQL package or stand alone function, you can use the <code>#OWNER#</code> substitution string to reference the parsing schema of the current application.</p>
<p>Session Sentry Functions must implement the following interface:
<pre>
function &lt;name of function&gt; (
    p_authentication in apex_plugin.t_authentication,
    p_plugin         in apex_plugin.t_plugin,
    p_is_public_page in boolean )
    return apex_plugin.t_authentication_sentry_result
</pre></p>~' );
    --
    l_property_id := 1978;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INVALID_SESSION_FUNCTION_NAME',
        p_prompt             => 'Invalid Session Function Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'INVALID_SESSION_FUNCTION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'CALLBACKS',
        p_examples           => q'~<p><pre>invalid_sso_session</pre></p>
<p><pre>#OWNER#.invalid_sso_session</pre></p>~',
        p_help_text          => q'~<p>Enter the name of the PL/SQL function the plug-in calls if an invalid session has been detected. Use this function to call for example a Single Sign-On sever.</p>
<p>It can reference a function of the anonymous PL/SQL code block, a package function or a stand alone function in the database.</p>
<p>When referencing a database PL/SQL package or stand alone function, you can use the <code>#OWNER#</code> substitution string to reference the parsing schema of the current application.</p>
<p>Invalid Session Functions must implement the following interface:
<pre>
function &lt;name of function&gt; (
    p_authentication in apex_plugin.t_authentication,
    p_plugin         in apex_plugin.t_plugin )
    return apex_plugin.t_authentication_inval_result
</pre></p>~' );
    --
    l_property_id := 1979;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AUTHENTICATION_FUNCTION_NAME',
        p_prompt             => 'Authentication Function Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'AUTHENTICATION_FUNCTION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'CALLBACKS',
        p_examples           => q'~<p><pre>authenticate_ldap</pre></p>
<p><pre>#OWNER#.authenticate_ldap</pre></p>~',
        p_help_text          => q'~<p>Enter the name of the PL/SQL function the plug-in can use to perform the verification of the entered user credentials. It can reference a function of the anonymous PL/SQL code block, a package function or a stand alone function in the database.</p>
<p>When referencing a database PL/SQL package or stand alone function, you can use the <code>#OWNER#</code> substitution string to reference the parsing schema of the current application.</p>
<p>Authentication Functions must implement the following interface:
<pre>
function &lt;name of function> (
    p_authentication in apex_plugin.t_authentication,
    p_plugin         in apex_plugin.t_plugin,
    p_password       in varchar2 )
    return apex_plugin.t_authentication_auth_result
</pre></p>~' );
    --
    l_property_id := 1980;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POST_LOGOUT_FUNCTION_NAME',
        p_prompt             => 'Post Logout Function Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'POST_LOGOUT_FUNCTION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'CALLBACKS',
        p_examples           => q'~<p><pre>logout_sso</pre></p>
<p><pre>#OWNER#.logout_sso</pre></p>~',
        p_help_text          => q'~<p>Enter the name of the PL/SQL function the plug-in calls after &PRODUCT_NAME. has terminated the current session. Use this function to logout from other systems like a Single Sign-On sever.</p>
<p>It can reference a function of the anonymous PL/SQL code block, a package function or a stand alone function in the database.</p>
<p>When referencing a database PL/SQL package or stand alone function, you can use the <code>#OWNER#</code> substitution string to reference the parsing schema of the current application.</p>
<p>Post Logout Functions must implement the following interface:
<pre>
function &lt;name of function&gt; (
    p_authentication in apex_plugin.t_authentication,
    p_plugin         in apex_plugin.t_plugin )
    return apex_plugin.t_authentication_logout_result
</pre></p>~' );
    --
    l_property_id := 1981;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AJAX_PROCEDURE_FUNCTION_NAME',
        p_prompt             => 'AJAX Procedure/Function Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'AJAX_FUNCTION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'CALLBACKS',
        p_examples           => q'~<p><pre>ajax_slider</pre></p>
<p><pre>#OWNER#.ajax_slider</pre></p>~',
        p_help_text          => q'~<p>Enter the name of the PL/SQL procedure/function used by the plug-in to load additional data with an Ajax call. It can reference a procedure or function of the anonymous PL/SQL code block, a package procedure or function, or stand alone procedure or function in the database.
<p>When referencing a database PL/SQL package or stand alone procedure or function, you can use the <code>#OWNER#</code> substitution string to reference the parsing schema of the current application.</p>
<p>The Ajax Procedure callback behaves the same way as an Ajax callback process and can access the generic <code>apex_application.g_x01 - g_x10</code> global variables to transfer data from the browser to the back end. It can also read and set session state as an Ajax callback process does.</p>
<p>To call the Ajax callback function from Javascript, use the same technique as used for Ajax callback processes. Instead of <code>APPLICATION_PROCESS=[process name]</code> use <code>PLUGIN=[p_ajax_identifier]</code>, where p_ajax_identifier is the value generated with the apex_plugin.get_ajax_identifier function in the render function.</p>
<p>Item Type Plug-in Ajax Procedures must implement the following interface:
<pre>
procedure &lt;name of procedure&gt; (
    p_item   in            apex_plugin.t_item,
    p_plugin in            apex_plugin.t_plugin,
    p_param  in            apex_plugin.t_item_ajax_param,
    p_result in out nocopy apex_plugin.t_item_ajax_result )
</pre>
</p>
<p>Region Type Plug-in Ajax Functions must implement the following interface:
<pre>
function &lt;name of function>&gt; (
    p_region in apex_plugin.t_region,
    p_plugin in apex_plugin.t_plugin )
    return apex_plugin.t_region_ajax_result
</pre>
</p>
<p>Dynamic Action Plug-in Ajax Functions must implement the following interface:
<pre>
function &lt;name of function&gt; (
    p_dynamic_action in apex_plugin.t_dynamic_action,
    p_plugin         in apex_plugin.t_plugin )
    return apex_plugin.t_dynamic_action_ajax_result
</pre>
</p>
<p>Authentication Scheme Plug-in Ajax Functions must implement the following interface:
<pre>
function &lt;name of function&gt; (
    p_authentication in apex_plugin.t_authentication,
    p_plugin         in apex_plugin.t_plugin )
    return apex_plugin.t_authentication_ajax_result
</pre></p>~' );
    --
    l_property_id := 1982;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALIDATION_PROCEDURE_NAME',
        p_prompt             => 'Validation Procedure Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'VALIDATION_FUNCTION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'CALLBACKS',
        p_examples           => q'~<p><pre>validate_slider</pre></p>
<p><pre>#OWNER#.validate_slider</pre></p>~',
        p_help_text          => q'~<p>Enter the name of the PL/SQL procedure the plug-in can use to perform basic validations on the submitted data. It can reference a procedure of the anonymous PL/SQL code block, a package procedure or a stand alone procedure in the database.</p>
<p>When referencing a database PL/SQL package or stand alone procedure, you can use the <code>#OWNER#</code> substitution string to reference the parsing schema of the current application.</p>
<p>The Validation Procedure callback is called after the basic checks performed by &PRODUCT_NAME. and before the user defined validations are processed. Use the <em>#LABEL#</em> placeholder in your error message if you want to get the current label of the page item. If <code>message</code> contains a value after the call, the message will be displayed in the <em>Default Error Display Location</em> defined on application level. To overwrite the default location, <code>display_location</code> can contain one of the constant values defined in <code>apex_plugin</code>. If you want to show the error at a page item that is different than the current processed one, set <code>page_item_name</code> to the name of that page item.</p>
<p>Item Type Plug-in Validation Procedure must implement the following interface:
<pre>
procedure &lt;name of procedure&gt; (
    p_item   in            apex_plugin.t_item,
    p_plugin in            apex_plugin.t_plugin,
    p_param  in            apex_plugin.t_item_validation_param,
    p_result in out nocopy apex_plugin.t_item_validation_result )
</pre>
</p>
<p>Region Type Plug-ins do not support validation functions.</p>
<p>Dynamic Action Plug-ins do not support validation functions.</p>~' );
    --
    l_property_id := 1983;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXECUTION_FUNCTION_NAME',
        p_prompt             => 'Execution Function Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'EXECUTION_FUNCTION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'CALLBACKS',
        p_examples           => q'~<p><pre>execute_email</pre></p>
<p><pre>#OWNER#.execute_email</pre></p>~',
        p_help_text          => q'~<p>Enter the name of the PL/SQL function to be called to execute the plug-in. It can reference a function of the anonymous PL/SQL code block, a package function or stand alone function in the database.
<p>When referencing a database PL/SQL package or stand alone function, you can use the <code>#OWNER#</code> substitution string to reference the parsing schema of the current application.</p>
<p>Process Type Plug-in Execution Functions must implement the following interface:
<pre>
function &lt;name of function&gt; (
    p_process in apex_plugin.t_process,
    p_plugin  in apex_plugin.t_plugin )
    return apex_plugin.t_process_exec_result
</pre>
</p>
<p>Authorization Type Plug-in Execution Functions must implement the following interface:
<pre>
function &lt;name of function&gt; (
    p_authorization in apex_plugin.t_authorization,
    p_plugin        in apex_plugin.t_plugin )
    return apex_plugin.t_authorization_exec_result
</pre></p>~' );
    --
    l_property_id := 1984;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REST_SOURCE_CAPABILITIES_PROCEDURE',
        p_prompt             => 'REST Source Capabilities Procedure',
        p_property_type      => 'TEXT',
        p_db_column          => 'WSM_CAPABILITIES_FUNCTION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'CALLBACKS',
        p_examples           => q'~<p><pre>capabilities_web_source</pre></p>
<p><pre>#OWNER#.capabilities_web_source</pre></p>~',
        p_help_text          => q'~<p>Enter the name of the PL/SQL procedure to get the REST Data Source <em>Capabilities</em>. It can reference a procedure of the anonymous PL/SQL code block, a package procedure or stand alone procedure in the database.</p>
<p>When referencing a database PL/SQL package or stand alone procedure, you can use the <code>#OWNER#</code> substitution string to reference the parsing schema of the current application.</p>
<p>REST Data Source Type Plug-in Capabilities Procedures must implement the following interface:
<pre>
procedure capabilities_web_source (
    p_plugin in            apex_plugin.t_plugin,
    p_result in out nocopy apex_plugin.t_web_source_capabilities );
</pre></p>~' );
    --
    l_property_id := 1985;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REST_SOURCE_FETCH_PROCEDURE',
        p_prompt             => 'REST Source Fetch Procedure',
        p_property_type      => 'TEXT',
        p_db_column          => 'WSM_FETCH_FUNCTION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'CALLBACKS',
        p_examples           => q'~<p><pre>fetch_web_source</pre></p>
<p><pre>#OWNER#.fetch_web_source</pre></p>~',
        p_help_text          => q'~<p>Enter the name of the PL/SQL procedure which implements the <em>Fetch Rows</em> operation. It can reference a procedure of the anonymous PL/SQL code block, a package procedure or stand alone procedure in the database.</p>
<p>When referencing a database PL/SQL package or stand alone procedure, you can use the <code>#OWNER#</code> substitution string to reference the parsing schema of the current application.</p>
<p>REST Data Source Type Plug-in Fetch Procedures must implement the following interface:
<pre>
procedure fetch_web_source(
    p_plugin     in            apex_plugin.t_plugin,
    p_web_source in            apex_plugin.t_web_source,
    p_params     in            apex_plugin.t_web_source_fetch_params,
    p_result     in out nocopy apex_plugin.t_web_source_fetch_result );
</pre></p>~' );
    --
    l_property_id := 1986;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REST_SOURCE_DML_PROCEDURE',
        p_prompt             => 'REST Source DML Procedure',
        p_property_type      => 'TEXT',
        p_db_column          => 'WSM_DML_FUNCTION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'CALLBACKS',
        p_examples           => q'~<p><pre>dml_web_source</pre></p>
<p><pre>#OWNER#.dml_web_source</pre></p>~',
        p_help_text          => q'~<p>Enter the name of the PL/SQL procedure which implements the <em>DML</em> operations (insert, update or delete rows). It can reference a procedure of the anonymous PL/SQL code block, a package procedure or stand alone procedure in the database.</p>
<p>When referencing a database PL/SQL package or stand alone procedure, you can use the <code>#OWNER#</code> substitution string to reference the parsing schema of the current application.
<p>REST Data Source Type Plug-in DML Procedures must implement the following interface:
<pre>
procedure dml_web_source (
    p_plugin     in            apex_plugin.t_plugin,
    p_web_source in            apex_plugin.t_web_source,
    p_params     in            apex_plugin.t_web_source_dml_params,
    p_result     in out nocopy apex_plugin.t_web_source_dml_result );
</pre></p>~' );
    --
    l_property_id := 1987;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REST_SOURCE_EXECUTE_PROCEDURE',
        p_prompt             => 'REST Source Execute Procedure',
        p_property_type      => 'TEXT',
        p_db_column          => 'WSM_EXECUTE_FUNCTION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'CALLBACKS',
        p_examples           => q'~<p><pre>execute_web_source</pre></p>
<p><pre>#OWNER#.execute_web_source</pre></p>~',
        p_help_text          => q'~<p>Enter the name of the PL/SQL procedure which implements the <em>Execute</em> operation, which is invoked when <strong>APEX_EXEC.EXECUTE_WEB_SOURCE</strong> is used. It can reference a procedure of the anonymous PL/SQL code block, a package procedure or stand alone procedure in the database.</p>
<p>When referencing a database PL/SQL package or stand alone procedure, you can use the <code>#OWNER#</code> substitution string to reference the parsing schema of the current application.</p>
<p>REST Data Source Type Plug-in Execute Procedures must implement the following interface:
<pre>
procedure execute_web_source(
    p_plugin     in            apex_plugin.t_plugin,
    p_web_source in            apex_plugin.t_web_source,
    p_result     in out nocopy apex_plugin.t_web_source_execute_result );
</pre></p>~' );
    --
    l_property_id := 1988;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REST_SOURCE_DISCOVER_PROCEDURE',
        p_prompt             => 'REST Source Discover Procedure',
        p_property_type      => 'TEXT',
        p_db_column          => 'WSM_DISCOVER_FUNCTION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'CALLBACKS',
        p_examples           => q'~<p><pre>discover_web_source</pre></p>
<p><pre>#OWNER#.discover_web_source</pre></p>~',
        p_help_text          => q'~<p>Enter the name of the PL/SQL procedure which implements the <em>Discovery</em> operation, which is invoked when a new REST Data Source is created, in order to determine operations, columns and data types. It can reference a procedure of the anonymous PL/SQL code block, a package procedure or stand alone procedure in the database.</p>
<p>When referencing a database PL/SQL package or stand alone procedure, you can use the <code>#OWNER#</code> substitution string to reference the parsing schema of the current application.</p>
<p>REST Data Source Type Plug-in Discovery Procedures must implement the following interface:
<pre>
procedure discover_web_source (
    p_plugin         in            apex_plugin.t_plugin,
    p_web_source     in            apex_plugin.t_web_source,
    p_params         in            apex_plugin.t_web_source_discover_params,
    p_result         in out nocopy apex_plugin.t_web_source_discover_result );
</pre></p>~' );
    --
    l_property_id := 1989;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEM_TYPE_COMPONENT_TYPES',
        p_prompt             => 'Component Type',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'SUPPORTED_COMPONENT_TYPES',
        p_display_group_name => 'SUPPORTED_FOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Specifies if the plug-in is displayed in the Builder as a supported component for Page Items, Interactive Grid Columns and Facets.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page Items',
        p_return_value  => 'APEX_APPLICATION_PAGE_ITEMS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Interactive Grid Columns',
        p_return_value  => 'APEX_APPL_PAGE_IG_COLUMNS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Facets',
        p_return_value  => 'APEX_APPL_PAGE_FACETS',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Facet Group Items',
        p_return_value  => 'APEX_APPL_PAGE_FACET_GRP_ITEMS',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Filters',
        p_return_value  => 'APEX_APPL_PAGE_SFILTERS',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Filter Group Items',
        p_return_value  => 'APEX_APPL_PAGE_SFILTER_GRP_ITEMS',
        p_is_internal   => 'Y' );
    --
    l_property_id := 1990;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PROCESS_TYPE_COMPONENT_TYPES',
        p_prompt             => 'Component Type',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'SUPPORTED_COMPONENT_TYPES',
        p_display_group_name => 'SUPPORTED_FOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Specifies if the plug-in is displayed in the Builder as a supported component for Page Processes, Automation Actions, Task Definition Actions, and Workflow Activities.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page Processes',
        p_return_value  => 'APEX_APPLICATION_PAGE_PROC' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automation Actions',
        p_return_value  => 'APEX_APPL_AUTOMATION_ACTIONS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Task Definition Actions',
        p_return_value  => 'APEX_APPL_TASKDEF_ACTIONS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Workflow Activities',
        p_return_value  => 'APEX_APPL_WORKFLOW_ACTIVITIES' );
    --
    l_property_id := 1991;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_STD_ITEM_ATTRIBUTES',
        p_prompt             => 'Attributes',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'STANDARD_ATTRIBUTES',
        p_display_group_name => 'STANDARD_ATTRIBUTES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>For Item type plug-ins, identify the attributes that apply to this plug-in.</p>
<p>To learn about the attributes that apply to Item type plug-ins, read the documentation in Section <strong>Standard Attributes for Item Type Plug-ins</strong> under the topic <strong>Creating Plug-ins</strong> in the App Builder User's Guide.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Is Visible Widget',
        p_return_value  => 'VISIBLE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Standard Form Element',
        p_return_value  => 'FORM_ELEMENT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Session State Changeable',
        p_return_value  => 'SESSION_STATE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has Read Only Attribute',
        p_return_value  => 'READONLY' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has Escape Special Characters Attribute',
        p_return_value  => 'ESCAPE_OUTPUT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has Quick Pick Attributes',
        p_return_value  => 'QUICKPICK' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has Source Attributes',
        p_return_value  => 'SOURCE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Format Mask Date Only',
        p_return_value  => 'FORMAT_MASK_DATE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Format Mask Number Only',
        p_return_value  => 'FORMAT_MASK_NUMBER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has Element Attributes',
        p_return_value  => 'ELEMENT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has Width Attributes',
        p_return_value  => 'WIDTH' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has Height Attribute',
        p_return_value  => 'HEIGHT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has Element Option Attribute',
        p_return_value  => 'ELEMENT_OPTION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has Placeholder Attribute',
        p_return_value  => 'PLACEHOLDER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has Icon Attribute',
        p_return_value  => 'ICON' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has Encrypt Session State Attribute',
        p_return_value  => 'ENCRYPT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has List of Values',
        p_return_value  => 'LOV' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has LOV Display Null Attributes',
        p_return_value  => 'LOV_DISPLAY_NULL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has Cascading LOV Attributes',
        p_return_value  => 'CASCADING_LOV' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Join LOV for Column Display',
        p_return_value  => 'JOIN_LOV' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has Filter',
        p_return_value  => 'FILTER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has Link',
        p_return_value  => 'LINK' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => q'~Has "Initialization JavaScript Code" Attribute~',
        p_return_value  => 'INIT_JAVASCRIPT_CODE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Session State Supports CLOB',
        p_return_value  => 'SESSION_STATE_CLOB' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Facet: Gather Occurrences',
        p_return_value  => 'FC_HAS_FEEDBACK',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Facet: Show Selected First',
        p_return_value  => 'FC_SHOW_SELECTED_FIRST',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Facet: Maximum Displayed Entries',
        p_return_value  => 'FC_SHOW_MORE_COUNT',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Facet: Client-Side Filtering',
        p_return_value  => 'FC_FILTER_VALUES',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Facet: LOV Display Null Value',
        p_return_value  => 'FC_LOV_DISPLAY_NULL',
        p_is_internal   => 'Y' );
    --
    l_property_id := 1992;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_STD_REGION_ATTRIBUTES',
        p_prompt             => 'Attributes',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'STANDARD_ATTRIBUTES',
        p_display_group_name => 'STANDARD_ATTRIBUTES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>For Region type plug-ins, check the following to enable options as described here:</p>
<p><ul>
<li>Region Source is SQL Statement - The region source is a SQL Statement. When checked, a minimum and a maximum number of columns the query can return can be specified and SQL Examples display to help the user.</li>
<li>Region Source is Plain Text - The region source is plain text.</li>
<li>Region Source Required - If region source is a SQL Statement, this attribute makes this a required value.</li>
<li>Has "Page Items to Submit" Attribute - If region source is a SQL Statement, this attribute allows to specify those page items which should be set in session state when executing an Ajax call for that region.</li>
<li>Has "Number of Fetched Rows" Attribute - The region has the Number of Fetched Rows fields in the Advanced section when the region is edited.</li>
<li>Has "No Data Found Message" Attribute - The region has the No Data Found Message field in the Advanced section when the region is edited.</li>
<li>Has "Escape Special Characters" Attribute -  The region has the Escape Special Characters field in the Security section when the region is edited.</li>
<li>Has "Region Columns" - The region allows to specify additional custom attributes for each column of the region source SQL statement.</li>
<li>Has "Heading" Column Attribute - Region columns have the Heading field in the Heading section when the column is edited.</li>
<li>Has "Heading Alignment" Column Attribute - Region columns have the Alignment field in the Heading section when the column is edited.</li>
<li>Has "Alignment" Column Attribute - Region columns have the Column Alignment field in the Layout section when the column is edited.</li>
<li>Has "CSS Classes" Column Attribute - Region columns have the CSS Classes field in the Appearance section when the column is edited.</li>
<li>Has "Custom Attributes" Column Attribute - Region columns have the Custom Attributes field in the Advanced section when the column is edited.</li>
<li>Has "Escape Special Characters" Column Attribute - Region columns have the Escape Special Characters field in the Security section when the column is edited.</li>
<li>Has "Initialization JavaScript Code" Attribute - The Initialization JavaScript Code field is available for the action.</li>
<li>Supports Faceted Search / Smart Filters - The region can be connected to a Faceted Search or Smart Filters region. "Region Source is SQL Statement" is required.</li>
</ul></p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region Source supports different Data Sources',
        p_return_value  => 'SOURCE_LOCATION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region Source is SQL Statement [Deprecated]',
        p_return_value  => 'SOURCE_SQL',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region Source is PL/SQL Statement',
        p_return_value  => 'SOURCE_PLSQL',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region Source is PL/SQL Function Body [Deprecated]',
        p_return_value  => 'SOURCE_PLSQL_FUNCTION',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region Source is HTML',
        p_return_value  => 'SOURCE_HTML',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region Source is Plain Text',
        p_return_value  => 'SOURCE_PLAIN' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has "Page Items to Submit" Attribute',
        p_return_value  => 'AJAX_ITEMS_TO_SUBMIT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has "Order By" Attribute',
        p_return_value  => 'ORDER_BY' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has "Number of Fetched Rows" Attribute',
        p_return_value  => 'FETCHED_ROWS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has "No Data Found Message" Attribute',
        p_return_value  => 'NO_DATA_FOUND_MESSAGE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has "Escape Special Characters" Region Attribute',
        p_return_value  => 'ESCAPE_OUTPUT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has "Initialization JavaScript Code" Attribute',
        p_return_value  => 'INIT_JAVASCRIPT_CODE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has "Region Columns"',
        p_return_value  => 'COLUMNS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has "Heading" Column Attribute',
        p_return_value  => 'COLUMN_HEADING' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has "Heading Alignment" Column Attribute',
        p_return_value  => 'HEADING_ALIGNMENT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has "Alignment" Column Attribute',
        p_return_value  => 'VALUE_ALIGNMENT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has "CSS Class" Column Attribute',
        p_return_value  => 'VALUE_CSS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has "Custom Attributes" Column Attribute',
        p_return_value  => 'VALUE_ATTRIBUTE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has "Escape Special Characters" Column Attribute',
        p_return_value  => 'VALUE_ESCAPE_OUTPUT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Supports Faceted Search / Smart Filters',
        p_return_value  => 'SUPPORTS_EXTERNAL_FILTERING' );
    --
    l_property_id := 1993;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_STD_DYNAMIC_ACTION_ATTRIBUTES',
        p_prompt             => 'Attributes',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'STANDARD_ATTRIBUTES',
        p_display_group_name => 'STANDARD_ATTRIBUTES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>For Dynamic Action type plug-ins, identify the attributes that apply to this plug-in:</p>
<p><ul>
<li>For Item(s) - The dynamic action supports selection of items as the affected elements.</li>
<li>For Button - The dynamic action supports selection of a button as the affected element.</li>
<li>For Region - The dynamic action supports selection of a region as the affected element.</li>
<li>For jQuery Selector - The dynamic action supports specifying a jQuery selector as the affected elements.</li>
<li>For JavaScript Expression - The dynamic action supports specifying a JavaScript Expression as the affected elements.</li>
<li>For Triggering Element - The dynamic action supports selection of the triggering element as the affected element.</li>
<li>For Event Source - The dynamic action supports selection of your event source as the affected elements.</li>
<li>Affected Element Required - The dynamic action requires an affected element to be specified.</li>
<li>Check "Fire on Initialization" - Defines the default value for the action's Fire on Initialization field.</li>
<li>Has "Stop Execution on Error" Attribute - The Stop Execution on Error field is available for the action.</li>
<li>Has "Wait For Result" Attribute - The Wait For Result field is available for the action.</li>
<li>Has "Initialization JavaScript Code" Attribute - The Initialization JavaScript Code field is available for the action.</li>
</ul></p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'For Item(s)',
        p_return_value  => 'ITEM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'For Button',
        p_return_value  => 'BUTTON' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'For Region',
        p_return_value  => 'REGION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'For jQuery Selector',
        p_return_value  => 'JQUERY_SELECTOR' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'For JavaScript Expression',
        p_return_value  => 'JAVASCRIPT_EXPRESSION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'For Triggering Element',
        p_return_value  => 'TRIGGERING_ELEMENT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'For Event Source',
        p_return_value  => 'EVENT_SOURCE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Affected Element Required',
        p_return_value  => 'REQUIRED' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Check "Fire on Initialization"',
        p_return_value  => 'ONLOAD' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has "Stop Execution on Error" Attribute',
        p_return_value  => 'STOP_EXECUTION_ON_ERROR' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has "Wait For Result" Attribute',
        p_return_value  => 'WAIT_FOR_RESULT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has "Initialization JavaScript Code" Attribute',
        p_return_value  => 'INIT_JAVASCRIPT_CODE' );
    --
    l_property_id := 1994;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_STD_AUTHENTICATION_ATTRIBUTES',
        p_prompt             => 'Attributes:',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'STANDARD_ATTRIBUTES',
        p_display_group_name => 'STANDARD_ATTRIBUTES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>For Authentication Scheme type plug-ins, identify the attributes that apply to this plug-in:</p>
<p><ul>
    <li>Has Session not Valid Attribute - The Stop Execution on Error field is available for the action.</li>
    <li>Has Login Page In Application - Users logs in via a page of this application.</li>
</ul></p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has Session not Valid Attribute',
        p_return_value  => 'INVALID_SESSION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Has Login Page In Application',
        p_return_value  => 'LOGIN_PAGE' );
    --
    l_property_id := 1995;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_STD_WEB_SOURCE_ATTRIBUTES',
        p_prompt             => 'Attributes',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'STANDARD_ATTRIBUTES',
        p_display_group_name => 'STANDARD_ATTRIBUTES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>For REST Data Source plug-ins, identify the attributes that apply to this plug-in:</p>
<p><ul>
    <li>Default Endpoint - The URL endpoint or URL prefix to propose for new REST Data Source.</li>
</ul></p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Default Endpoint',
        p_return_value  => 'ENDPOINT_HINT' );
    --
    l_property_id := 1996;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_STD_PROCESS_ATTRIBUTES',
        p_prompt             => 'Attributes',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'STANDARD_ATTRIBUTES',
        p_display_group_name => 'STANDARD_ATTRIBUTES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>For Process type plug-ins, check the following to enable options as described here:</p>
<p><ul>
<li>Region - If checked allows to run a process for each row of a tabular form.</li>
<li>Region Required - This attribute makes the region a required value.</li>
<li>Wait For Completion - This attribute indicates that the process is being used as a Workflow Activity and the Workflow will wait for the completion of the process.</li>
</ul></p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region',
        p_return_value  => 'REGION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region Required',
        p_return_value  => 'REGION_REQUIRED' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Wait For Completion',
        p_return_value  => 'WAIT_FOR_COMPLETION' );
    --
    l_property_id := 1997;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SUBSTITUTE_ATTRIBUTE_VALUES',
        p_prompt             => 'Substitute Attribute Values',
        p_property_type      => 'YES NO',
        p_db_column          => 'SUBSTITUTE_ATTRIBUTES',
        p_display_group_name => 'CUSTOM_ATTRIBUTES',
        p_examples           => q'~<pre>
/* Read data */
l_column_value_list := apex_plugin_util.get_data2 (
                           p_sql_statement => p_region.source,
                           p_region        => p_region );
/* Emit rows */
for l_row_num in 1 .. l_column_value_list( 1 ).value_list.count loop
    begin
        -- Assign the column values of the current row
        -- into session state
        apex_plugin_util.set_component_values (
            p_column_value_list => l_column_value_list,
            p_row_num           => l_row_num );

        ...

        -- Link Attribute: Replace substitution variables
        -- (including column values of the current row)
        l_link := apex_plugin_util.replace_substitutions(
                      p_value => p_region.attribute_01 );
        ...

        apex_plugin_util.clear_component_values;
    exception when others then
        apex_plugin_util.clear_component_values;
        raise;
    end;
end loop;
</pre>~',
        p_help_text          => q'~<p>Custom Attribute Values specified by the developer might contain items referenced with substitution syntax, for example <code>&amp;P1_DNAME.</code></p>
<p>If Substitute Attribute Values is set to <strong>On</strong> &PRODUCT_NAME. will automatically replace those references with their actual value before calling the plug-in.</p>
<p>If Substitute Attribute Values is set to <strong>Off</strong> the values are written unchanged into the <code>attribute_01 - attribute_25</code> record type attributes of <code>p_plugin, p_item, p_region, ...</code> and the plug-in developer is responsible to replace those substitution syntax references with a call to <code>apex_plugin_util.replace_substitutions</code> or do similar replacements.</p>
<p>A use case for <strong>Off</strong> would be if the custom plug-in attribute is used as a template and the substitution syntax is used to reference page items and columns of the SQL statement executed by the plug-in. Because the column values of the SQL statement are not available at the time when the plug-in is called, the replacement has to be done by the plug-in itself.</p>~' );
    --
    l_property_id := 1998;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_VERSION',
        p_prompt             => 'Version',
        p_property_type      => 'TEXT',
        p_db_column          => 'VERSION_IDENTIFIER',
        p_display_length     => 10,
        p_max_length         => 30,
        p_display_group_name => 'INFORMATION',
        p_help_text          => q'~<p>String to identify the version of the plug-in.~' );
    --
    l_property_id := 1999;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ABOUT_URL',
        p_prompt             => 'About URL',
        p_property_type      => 'TEXT',
        p_db_column          => 'ABOUT_URL',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'INFORMATION',
        p_help_text          => q'~<p>URL to the plug-in author's homepage or to additional documentation about the plug-in.</p>~' );

    --*************************************************************************
    -- Workflow will reserve 2000 - 2200, please DO NOT use property ID's in
    -- this range, thank you.
    --*************************************************************************
    -- @todo should we use a different id? the helpt text is not visible in the designer because 1414 is filtered out
    -- in the store_property -> is_new_shared_comp_property call
    l_property_id := 2000;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'WF_IDENTIFICATION_STATIC_ID',
        p_prompt                => 'Static ID',
        p_property_type         => 'TEXT',
        p_db_column             => 'STATIC_ID',
        p_display_length        => 60,
        p_max_length            => 255,
        p_display_group_name    => 'IDENTIFICATION',
        p_text_case             => 'UPPER',             -- forces the property value to be upper case, hence to be case insensitive
        -- p_restricted_characters => 'SAFE_COMPONENT_NAME', -- @todo do we need this?
        p_help_text             => q'~Enter a case-insensitive static ID to uniquely identify this component.~' );
    --
    l_property_id := 2001;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WORKFLOW_VALUE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_TYPE',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how this parameter is populated.~' );
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the text entered into <em>Static Value</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return single value)',
        p_return_value  => 'SQL_QUERY',
        p_help_text     => q'~Set to the first value returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Expression',
        p_return_value  => 'EXPRESSION',
        p_help_text     => q'~Set to the value that results from executing the <em>Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body',
        p_return_value  => 'FUNCTION_BODY',
        p_help_text     => q'~Set to the value returned from the <em>Function Body</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Null',
        p_return_value  => 'NULL',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to null as no value specified.~' );

    --
    l_property_id := 2002;
    store_property (
        p_id                          => l_property_id,
        p_name                        => 'WORKFLOW_PARAM',
        p_prompt                      => 'Name',
        p_property_type               => 'COMPONENT',
        p_db_column                   => 'WORKFLOW_VARIABLE_ID',
        p_display_group_name          => 'IDENTIFICATION',
        p_lov_type                    => 'COMPONENT',
        p_lov_component_type_id       => c_comp_type_workflow_param,
        p_help_text                   => q'~Show the name of the parameter of a workflow.~' );
    --
    l_property_id := 2003;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WORKFLOW_DATA_TYPE',
        p_prompt             => 'Data Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DATA_TYPE',
        p_display_length     => 32,
        p_max_length         => 128,
        p_display_group_name => 'PARAMETER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the data type of the workflow variable.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'VARCHAR2',
        p_return_value  => 'VARCHAR2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'TIMESTAMP',
        p_return_value  => 'TIMESTAMP');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'TIMESTAMP WITH LOCAL TIME ZONE',
        p_return_value  => 'TIMESTAMP_LTZ' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'TIMESTAMP WITH TIME ZONE',
        p_return_value  => 'TIMESTAMP_TZ' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'NUMBER',
        p_return_value  => 'NUMBER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'BOOLEAN',
        p_return_value  => 'BOOLEAN' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CLOB',
        p_return_value  => 'CLOB' );
    --
    l_property_id := 2004;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'STATE',
        p_prompt             => 'State',
        p_property_type      => 'SWITCH BUTTON',
        p_db_column          => 'STATE',
        p_display_length     => 32,
        p_max_length         => 128,
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>The state of the workflow version.</p>
        <p>A workflow version when first created is always in the <strong>In Development</strong> state.</p>
        <p>Once the developer is satisfied with modelling a version, they can click on <strong>Activate</strong> to move the version to the <strong>Active</strong> state.</p>
        <p>Only one version of a workflow can be active at one time. Only one version of a workflow can be in development at one time.</p>
        <p>If the developer activates a version and a different version of the workflow is already active,
        then the currently active version will be silently <strong>deactivated</strong> before moving the version to <strong>Active</strong> state.</p>
        <p><strong>Inactive</strong> versions cannot be used to start new workflow instances. They can only be deleted or duplicated.</p>
        <p>When a Workflow Version is in <strong>Active</strong> state, only selected properties can be edited.
        <ul>
        <li><strong>Activities</strong> and <strong>connections</strong> cannot be created, duplicated, or deleted.</li>
        <li><strong>Variables</strong> cannot be created, duplicated, or deleted for the version.</li>
        <li><strong>Activity Variables</strong> can be added to and deleted from the activities in the version.</li>
        <li>The <strong>Type</strong> cannot be changed for activities. But the <strong>Source</strong> type and value can be changed for the version and its activities.</li>
        <li>The conditions for the connections of <strong>Switch</strong> activities can be changed.</li>
        <li>Workflow Participants can be added. But existing participants cannot be deleted.</li>
        </ul></p>
        <p>When a Workflow Version is in <strong>Inactive</strong> state, none of its properties, activities, and variables can be edited.</p> ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'In Development',
        p_return_value  => 'DEVELOPMENT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Active',
        p_return_value  => 'ACTIVE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inactive',
        p_return_value  => 'INACTIVE');
    --
    l_property_id := 2005;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WORKFLOW_PARTICIPANT_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PARTICIPANT_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of participant.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Workflow Owner',
        p_return_value  => 'OWNER',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Workflow Administrator',
        p_return_value  => 'ADMIN',
        p_is_quick_pick => 'Y' );
    --
    l_property_id := 2006;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'FROM_WORKFLOW_ACTIVITY',
        p_prompt                    => 'From',
        p_property_type             => 'COMPONENT',
        p_db_column                 => 'FROM_ACTIVITY_ID',
        p_display_group_name        => 'ACTIVITY',
        p_lov_type                  => 'COMPONENT',
        p_lov_component_type_id     => c_comp_type_workflow_activity,
        p_lov_component_type_scope  => 'WF_VERSION',
        p_help_text                 => q'~
Specify the From activity for this connection.~' );
    --
    l_property_id := 2007;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'TO_WORKFLOW_ACTIVITY',
        p_prompt                    => 'To',
        p_property_type             => 'COMPONENT',
        p_db_column                 => 'TO_ACTIVITY_ID',
        p_display_group_name        => 'ACTIVITY',
        p_lov_type                  => 'COMPONENT',
        p_lov_component_type_id     => c_comp_type_workflow_activity,
        p_lov_component_type_scope  => 'WF_VERSION',
        p_help_text                 => q'~
Specify the To activity for this connection.~' );
    --
    l_property_id := 2008;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TRANSITION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TRANSITION_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the type of connection.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Normal',
        p_return_value  => 'NORMAL',
        p_help_text     => q'~<p>The default connection between two activities.</p>
        <p>Every workflow activity must have one incoming and one outgoing normal connection.</p>
        <p>The only exceptions are activities of type <strong>Workflow Start</strong>, <strong>Workflow Switch</strong> and <strong>Workflow End</strong>.
        <ul>
        <li>The Workflow Start activity cannot have any incoming connection.</li>
        <li>The Workflow End activity cannot have any outgoing connection.</li>
        <li>The Workflow Switch activity has conditional connections also known as <strong>branches</strong>.</li>
        <li>The connection type for a branch depends on the Type of the Switch activity. It cannot be selected from here.</li>
        </ul></p>~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Error',
        p_return_value  => 'ERROR',
        p_help_text     => q'~<p>Every activity can have one or more error connections for handling of errors.</p>
        <p> Every error connection must include the following properties.
        <ul>
        <li>Condition Value    - This is the SQL Error Code with which the activity error is compared.</li>
        <li>Condition Operator - This is operator used for the comparison.</li>
        <li>Sequence           - For multiple error connections, this property defines the order of comparison.</li>
        </ul>
        </p> ~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Timeout',
        p_return_value  => 'TIMEOUT',
        p_help_text     => q'~<p>Available only if the <strong>From</strong> activity has the <em>Due On Type</em> attribute defined.</p>
        <p>Not available for the <strong>Wait</strong> Activity because it already has its own timeout property.</p>~',
        p_is_quick_pick => 'N' );
    --
    l_property_id := 2009;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WORKFLOW_VERSION',
        p_prompt             => 'Workflow Version',
        p_property_type      => 'TEXT',
        p_db_column          => 'VERSION',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Identifies the version of this workflow.~' );
    --
    l_property_id := 2010;

    store_property (
        p_id                 => l_property_id,
        p_name               => 'SWITCH_TYPE',
        p_prompt             => 'Switch Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'SWITCH_TYPE',
        p_display_group_name => 'IDENTIFICATION' );
    --
   l_property_id := 2011;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WHEN',
        p_prompt             => 'When',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CONDITION_EXPR1',
        p_display_group_name => 'CONDITION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the branch condition expression.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'True',
        p_return_value  => 'TRUE',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'False',
        p_return_value  => 'FALSE',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Null',
        p_return_value  => 'NULL',
        p_is_quick_pick => 'Y' );
    --
    l_property_id := 2012;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OPERATOR',
        p_prompt             => 'Operator',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CONDITION_TYPE',
        p_display_group_name => 'CONDITION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the branch condition expression.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Is Equal To',
        p_return_value  => 'EQUALS',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Is Not Equal To',
        p_return_value  => 'NOT_EQUALS',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Is Greater Than',
        p_return_value  => 'GREATER_THAN',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Is Less Than',
        p_return_value  => 'LESS_THAN',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Is Greater Than Or Equal To',
        p_return_value  => 'GTE',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Is Less Than Or Equal To',
        p_return_value  => 'LTE',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Is Null',
        p_return_value  => 'IS_NULL',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Is Not Null',
        p_return_value  => 'NOT_NULL',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Otherwise',
        p_return_value  => 'OTHERWISE',
        p_is_quick_pick => 'Y' );
    --
    l_property_id := 2013;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMPARE_VALUE',
        p_prompt             => 'Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'CONDITION_EXPR1',
        p_display_group_name => 'CONDITION',
        p_help_text          => q'~Specify the value to compare with.~' );
    --
    l_property_id := 2015;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DIAGRAM',
        p_prompt             => 'Diagram',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'DIAGRAM',
        p_display_group_name => 'SETTINGS',
        p_help_text          => q'~Specify the coordinates of the workflow activity or transition in the diagram builder.~' );
    --
    l_property_id := 2016;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IDENTITY_TYPE',
        p_prompt             => 'Identity Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'IDENTITY_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Specify the identity type of the participant.~' );

    --
    l_property_id := 2017;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARAMETER_UPDATABLE',
        p_prompt             => 'Updatable',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_UPDATABLE',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Specify whether this task parameter is updatable.~' );
    --
    l_property_id := 2018;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SESSION_FORMAT_MASK',
        p_prompt             => 'Session State Format Mask',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'FORMAT_MASK',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'DISPLAY_FORMAT_MASKS',
        p_lov_type           => 'ALL_FORMAT_MASKS',
        p_help_text          => q'~<p>Format mask to be used to convert the workflow variable or parameter value into a NUMBER, DATE and TIMESTAMP and back into a VARCHAR2
                                when the variable or parameter is used in a bind variable or substitution string. ~' );
    --
    l_property_id := 2019;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VARIABLE_BOOLEAN_TRUE',
        p_prompt             => 'True Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'TRUE_VALUE',
        p_display_length     => 10,
        p_max_length         => 10,
        p_display_group_name => 'DISPLAY_FORMAT_MASKS',
        p_help_text          => q'~<p>Variable or parameter value used to determine TRUE. It's used to convert a VARCHAR2 value into a BOOLEAN and back into a VARCHAR2.~' );
    --
    l_property_id := 2020;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VARIABLE_BOOLEAN_FALSE',
        p_prompt             => 'False Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'FALSE_VALUE',
        p_display_length     => 10,
        p_max_length         => 10,
        p_display_group_name => 'DISPLAY_FORMAT_MASKS',
        p_help_text          => q'~<p>Variable or parameter value used to determine FALSE. It's used to convert a VARCHAR2 value into a BOOLEAN and back into a VARCHAR2.~' );
    --
    --
    l_property_id := 2021;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARAMETER_VALUE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_TYPE',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how this parameter is populated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the text entered into <em>Static Value</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return single value)',
        p_return_value  => 'SQL_QUERY',
        p_help_text     => q'~Set to the first value returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Expression',
        p_return_value  => 'EXPRESSION',
        p_help_text     => q'~Set to the value that results from executing the <em>Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body',
        p_return_value  => 'FUNCTION_BODY',
        p_help_text     => q'~Set to the value returned from the <em>Function Body</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Default',
        p_return_value  => 'DEFAULT',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Use the value defined as default in the Workflow parameter declaration.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Null',
        p_return_value  => 'NULL',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to null as no value specified.~' );
    --
    l_property_id := 2023;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEBUG_LEVEL',
        p_prompt             => 'Debug Level',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DEBUG_LEVEL',
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify the debug level of the Workflow Version.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Info',
        p_return_value  => '4',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The default debug level of the Workflow Version.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Warning',
        p_return_value  => '2',
        p_help_text     => q'~Debug level for logging  less critical errors .~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Error',
        p_return_value  => '1',
        p_help_text     => q'~Debug level for logging critical errors.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Trace',
        p_return_value  => '6',
        p_help_text     => q'~Debug level for tracing messages with procedures and functions.~');
    --
    l_property_id := 2024;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WF_SOURCE_QUERY_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'QUERY_TYPE',
        p_display_group_name => 'ADDITIONAL_DATA',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how the workflow data is queried.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Table / View',
        p_return_value  => 'TABLE',
        p_help_text     => q'~The workflow data is retrieved based on a table or view.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'SQL',
        p_help_text     => q'~The workflow data is retrieved based on a SQL Query.~' );
    --
    l_property_id := 2025;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WF_SOURCE_QUERY_OWNER',
        p_prompt             => 'Table Owner',
        p_property_type      => 'OWNER',
        p_db_column          => 'QUERY_OWNER',
        p_display_group_name => 'ADDITIONAL_DATA',
        p_help_text          => q'~Select the schema that owns the table.~' );
    --
    l_property_id := 2026;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WF_SOURCE_QUERY_TABLE',
        p_prompt             => 'Table Name',
        p_property_type      => 'TABLE',
        p_db_column          => 'QUERY_TABLE',
        p_display_group_name => 'ADDITIONAL_DATA',
        p_help_text          => q'~Enter the case-sensitive table or view name. You can type in the name or pick from the list.
        The column names of the table can be used as bind variables and substitution strings to evaluate variables, participants and conditions during the execution of the activities.~' );
    --
    l_property_id := 2027;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'WF_SOURCE_SQL_QUERY',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'QUERY_SOURCE',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_display_group_name   => 'ADDITIONAL_DATA',
        p_examples             => q'~<pre>select empno,
       ename,
       job,
       sal
  from emp
 where deptno = :DEPT_NUMBER
</pre>~',
        p_help_text            => q'~<p>Enter a SQL query to read additional data.</p>
        <p>The column-names of the query can be used as bind variables and substitution strings to evaluate variables, participants and conditions during the execution of the activities.</p>
        <p>The result of the query should contain only one row.</p>
        <p> If the query returns no result or more than one row then the workflow fails during execution.</p>~' );
    --
    --
    --
    --*************************************************************************
    -- End of Workflow property ID's
    --*************************************************************************
    --
    --
    --
    --
    --
    -- *** Free
    --
    l_property_id := 2201;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_HELP_TEXT',
        p_prompt             => 'Help Text',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'HELP_TEXT',
        p_display_length     => 96,
        p_max_length         => 4000,
        p_display_group_name => 'INFORMATION',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Specify help text for this plug-in. The help text is used by the users of the plug-in to understand how it works.</p>~' );
    --
    l_property_id := 2202;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARAMETER_DEFAULT_VALUE',
        p_prompt             => 'Value',
        p_property_type      => 'TEXT EDITOR',
        p_max_length         => 4000,
        p_db_column          => 'DEFAULT_VALUE',
        p_display_group_name => 'DEFAULT',
        p_help_text          => q'~<p>Specify a default value for this plug-in attribute. The default value is used when a new component is created that uses this plug-in.</p>
<p>Use Y and N for attributes of type "Yes/No".</p>~' );
    --
    l_property_id := 2203;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEPENDING_ON_ATTRIBUTE',
        p_prompt                   => 'Depending on Custom Attribute',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEPENDING_ON_ATTRIBUTE_ID',
        p_display_group_name       => 'CONDITION',
        p_is_translatable          => false,
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_plugin_cust_attr,
        p_lov_component_type_scope => 'PARENT',
        p_help_text                => q'~<p>Select the attribute the current attribute depends on. For example, only show the current attribute if "Orientation" is equal to "VERTICAL".</p>~' );
    --
    l_property_id := 2204;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEPENDING_ON_CONDITION_TYPE',
        p_prompt                   => 'Depending on Condition Type',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEPENDING_ON_CONDITION_TYPE',
        p_display_group_name       => 'CONDITION',
        p_lov_type                 => 'STATIC',
        p_help_text                => q'~<p>Select a condition type that must be met in order for this attribute to render.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'equal to',
        p_return_value  => 'EQUALS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'not equal to',
        p_return_value  => 'NOT_EQUALS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'in list',
        p_return_value  => 'IN_LIST' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'not in list',
        p_return_value  => 'NOT_IN_LIST' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'is null',
        p_return_value  => 'IS_NULL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'is not null',
        p_return_value  => 'IS_NOT_NULL' );
    --
    l_property_id := 2205;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEPENDING_ON_EXPRESSION',
        p_prompt                   => 'Expression',
        p_property_type            => 'TEXT',
        p_db_column                => 'DEPENDING_ON_EXPRESSION',
        p_display_group_name       => 'CONDITION',
        p_is_translatable          => false,
        p_help_text                => q'~<p>Enter values in this attribute based on the specific condition type selected. If you have selected "in list" or "not in list", enter values separated by a comma. Don't add a blank before or after the comma if that isn't included in the value which you want to compare.</p>~' );
    --
    l_property_id := 2206;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEPENDING_ON_HAS_TO_EXIST',
        p_prompt                   => 'Always Evaluate',
        p_property_type            => 'YES NO',
        p_db_column                => 'DEPENDING_ON_HAS_TO_EXIST',
        p_display_group_name       => 'CONDITION',
        p_help_text                => q'~<p>If set to <strong>On</strong>, the condition will always be evaluated and as a pre-requirement the depending on attribute has to be rendered. If set to <strong>Off</strong>, the condition will still be evaluated when the depending on attribute has been rendered, however if the depending on attribute has not NOT been rendered, the condition will not be evaluated.</p>
<p>This may be useful, for example if the depending on attribute itself has a condition (for example it only supports certain component types), and where you still want the current attribute to be rendered in the case where the depending on attribute's condition fails.</p>~' );
    --
    l_property_id := 2207;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PLUGIN_ATTRIBUTE_SCOPE',
        p_prompt                   => 'Scope',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'ATTRIBUTE_SCOPE',
        p_display_group_name       => 'IDENTIFICATION',
        p_lov_type                 => 'STATIC',
        p_help_text                => q'~<p>The attribute scope can be Application, Component, or Report.
<dl>
<dt>Application</dt>
<dd>The attribute can only be defined once for the application.</dd>
<dt>Component</dt>
<dd>The attribute can be defined each time the plug-in is referenced in a component.</dd>
<dt>Report</dt>
<dd>The attribute can only be defined if the region's display attribute is set to Multiple (Report).</dd>
</dl></p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Application',
        p_return_value  => 'APPLICATION',
        p_comment_text  => q'~$$$ Condition of type "VAL_OF_ITEM_IN_COND_NOT_EQ_COND2" found, please check logic.  PLUGIN_TYPE = 'TEMPLATE COMPONENT' ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Component',
        p_return_value  => 'COMPONENT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Report',
        p_return_value  => 'REPORT',
        p_comment_text  => q'~$$$ Condition of type "EXPRESSION" found, please check logic.
   ( :APP_PAGE_ID = 4415 and :P4415_PLUGIN_TYPE = 'TEMPLATE COMPONENT' )
or :APP_PAGE_ID <> 4415 ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region Column',
        p_return_value  => 'COLUMN',
        p_comment_text  => q'~$$$ Condition of type "EXISTS" found, please check logic.
select 1
  from wwv_flow_plugins
 where security_group_id = :WORKSPACE_ID
   and id          = ( case to_number(:APP_PAGE_ID)
                           when 4410 then to_number(:P4410_ID)
                           when 4415 then to_number(:P4415_PLUGIN_ID )
                       end )
   and plugin_type = 'REGION TYPE'
   and ':' || standard_attributes || ':' like '%:COLUMNS:%'~' );
    --
    l_property_id := 2208;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PLUGIN_ATTRIBUTE_SEQUENCE',
        p_prompt                   => 'Attribute',
        p_property_type            => 'INTEGER',
        p_db_column                => 'ATTRIBUTE_SEQUENCE',
        p_max_length               => 2,
        p_display_group_name       => 'IDENTIFICATION',
        p_help_text                => q'~<p>Sequence which correlates with the <code>ATTRIBUTE_XX</code> columns (for example in <code>APEX_APPLICATION_PAGE_ITEMS</code>) and to the PL/SQL types defined in the package <code>apex_plugin</code></p>~' );
    --
    l_property_id := 2209;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PLUGIN_ATTRIBUTE_GROUP',
        p_prompt                   => 'Attribute Group',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'ATTRIBUTE_GROUP_ID',
        p_display_group_name       => 'LAYOUT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_plugin_attr_grp,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~<p>Specify the group in Page Designer where this attribute will be displayed.</p>~',
        p_comment_text             => q'~$$$ Condition of type "EXPRESSION" found, please check logic.
:P4410_PLUGIN_TYPE in ( 'REGION TYPE', 'ITEM TYPE', 'PROCESS TYPE', 'DYNAMIC ACTION', 'TEMPLATE COMPONENT' )~' );
    --
    l_property_id := 2210;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PLUGIN_ATTRIBUTE_TYPE',
        p_prompt                   => 'Type',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'ATTRIBUTE_TYPE',
        p_display_group_name       => 'SETTINGS',
        p_lov_type                 => 'STATIC',
        p_help_text                => q'~<p>Specify the type the attribute should have when it is displayed in the &PRODUCT_NAME. Builder. The type is also used to verify the entered data when the developer sets or modifies them and is used by the Advisor as well when checking the application.</p>
<p>To learn about the different types of attributes, check the documentation in the <strong>Adding Custom Attributes to a Plug-in</strong> section under <strong>Implementing Plug-ins</strong> in the App Builder User's Guide.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Checkboxes',
        p_return_value  => 'CHECKBOXES',
        p_comment_text  => q'~$$$ Condition of type "EXPRESSION" found, please check logic.
"case :APP_PAGE_ID
  when '4410' then :P4410_PLUGIN_TYPE != 'TEMPLATE COMPONENT'
  when '4415' then :P4415_PLUGIN_TYPE != 'TEMPLATE COMPONENT'
end"~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Code Language',
        p_return_value  => 'CODE LANGUAGE',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Color',
        p_return_value  => 'COLOR' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Column',
        p_return_value  => 'COLUMN',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Data Load Definition ID',
        p_return_value  => 'DATA LOAD DEFINITION ID',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Data Load Table ID',
        p_return_value  => 'DATA LOAD TABLE ID',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Email Template',
        p_return_value  => 'EMAIL TEMPLATE ID',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML',
        p_return_value  => 'HTML' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Icon',
        p_return_value  => 'ICON' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Integer',
        p_return_value  => 'INTEGER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JavaScript (MLE)',
        p_return_value  => 'MLE JAVASCRIPT',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JavaScript (MLE) Expression Returning BOOLEAN',
        p_return_value  => 'MLE JAVASCRIPT EXPRESSION BOOLEAN',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JavaScript (MLE) Expression Returning VARCHAR2',
        p_return_value  => 'MLE JAVASCRIPT EXPRESSION VARCHAR2',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JavaScript (MLE) Function Body Returning BOOLEAN',
        p_return_value  => 'MLE JAVASCRIPT FUNCTION BODY BOOLEAN',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JavaScript (MLE) Function Body Returning VARCHAR2',
        p_return_value  => 'MLE JAVASCRIPT FUNCTION BODY VARCHAR2',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JavaScript Code',
        p_return_value  => 'JAVASCRIPT',
        p_comment_text  => q'~$$$ Condition of type "EXPRESSION" found, please check logic.
"case :APP_PAGE_ID
  when '4410' then :P4410_PLUGIN_TYPE != 'TEMPLATE COMPONENT'
  when '4415' then :P4415_PLUGIN_TYPE != 'TEMPLATE COMPONENT'
end"~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Link to Target Page/URL',
        p_return_value  => 'LINK' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Media',
        p_return_value  => 'MEDIA',
        p_comment_text  => '$$$ Condition of type "EXPRESSION" found, please check logic.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Number',
        p_return_value  => 'NUMBER',
        p_comment_text  => '$$$ Condition of type "EXPRESSION" found, please check logic.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Owner',
        p_return_value  => 'OWNER',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Code',
        p_return_value  => 'PLSQL',
        p_comment_text  => '$$$ Condition of type "EXPRESSION" found, please check logic.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Expression Returning BOOLEAN',
        p_return_value  => 'PLSQL EXPRESSION BOOLEAN',
        p_comment_text  => '$$$ Condition of type "EXPRESSION" found, please check logic.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Expression Returning VARCHAR2',
        p_return_value  => 'PLSQL EXPRESSION',
        p_comment_text  => '$$$ Condition of type "EXPRESSION" found, please check logic.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body Returning BOOLEAN',
        p_return_value  => 'PLSQL FUNCTION BODY BOOLEAN',
        p_comment_text  => '$$$ Condition of type "EXPRESSION" found, please check logic.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body Returning VARCHAR2',
        p_return_value  => 'PLSQL FUNCTION BODY',
        p_comment_text  => '$$$ Condition of type "EXPRESSION" found, please check logic.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Package',
        p_return_value  => 'PLSQL PACKAGE',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Procedure or Function',
        p_return_value  => 'PLSQL METHOD',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page Item',
        p_return_value  => 'PAGE ITEM',
        p_comment_text  => '$$$ Condition of type "EXPRESSION" found, please check logic.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page Items',
        p_return_value  => 'PAGE ITEMS',
        p_comment_text  => '$$$ Condition of type "EXPRESSION" found, please check logic.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page Number',
        p_return_value  => 'PAGE NUMBER',
        p_comment_text  => '$$$ Condition of type "EXPRESSION" found, please check logic.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page Numbers',
        p_return_value  => 'PAGE NUMBERS',
        p_comment_text  => '$$$ Condition of type "EXPRESSION" found, please check logic.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region SQL Statement Column',
        p_return_value  => 'REGION SOURCE COLUMN',
        p_comment_text  => q'~$$$ Condition of type "EXISTS" found, please check logic.
"select 1
  from wwv_flow_plugins
 where id          = ( case :APP_PAGE_ID
                           when '4410' then to_number(:P4410_ID)
                           when '4415' then to_number(:P4415_PLUGIN_ID)
                       end )
   and plugin_type = 'REGION TYPE'
   and security_group_id = :WORKSPACE_ID"~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'SQL',
        p_comment_text  => '$$$ Condition of type "EXPRESSION" found, please check logic.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Select List',
        p_return_value  => 'SELECT LIST' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Session State Value',
        p_return_value  => 'SESSION STATE VALUE',
        p_comment_text  => '$$$ Condition of type "EXPRESSION" found, please check logic.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Table',
        p_return_value  => 'TABLE',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Task Definition',
        p_return_value  => 'TASK DEFINITION ID',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Text',
        p_return_value  => 'TEXT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Textarea',
        p_return_value  => 'TEXTAREA' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'XML',
        p_return_value  => 'XML',
        p_comment_text  => '$$$ Condition of type "EXPRESSION" found, please check logic.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Yes/No',
        p_return_value  => 'CHECKBOX' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Authorization Groups',
        p_return_value  => 'AUTHORIZATION GROUPS',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Credentials',
        p_return_value  => 'CREDENTIAL ID',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Template Placeholders',
        p_return_value  => 'PLACEHOLDER JSON',
        p_is_internal   => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Report Query',
        p_return_value  => 'REPORT QUERY ID',
        p_is_internal   => 'Y' );
    --
    l_property_id := 2211;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ATTRIBUTE_LOV_TYPE',
        p_prompt             => 'Lov Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOV_TYPE',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => null );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static',
        p_return_value  => 'STATIC' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Component',
        p_return_value  => 'COMPONENT',
        p_is_internal   => 'Y' );
    --
    l_property_id := 2212;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ATTRIBUTE_IS_COMMON',
        p_prompt             => 'Common',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_COMMON',
        p_display_group_name => 'SETTINGS',
        p_help_text          => q'~Specify if this attribute should always be displayed in the Property Editor of Page Designer or only if advanced attributes are displayed.~' );
    --
    l_property_id := 2213;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ATTRIBUTE_SHOW_IN_WIZARD',
        p_prompt             => 'Show in Wizard',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_IN_WIZARD',
        p_display_group_name => 'SETTINGS',
        p_help_text          => q'~Specify if this attribute should be displayed in the Create Wizard if a new component is created based on the current plug-in.~',
        p_comment_text       => q'~$$$ Condition of type "VAL_OF_ITEM_IN_COND_NOT_EQ_COND2" found, please check logic.
P4415_PLUGIN_TYPE != 'TEMPLATE COMPONENT~' );
    --
    l_property_id := 2214;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ATTRIBUTE_IS_REQUIRED',
        p_prompt             => 'Required',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_REQUIRED',
        p_display_group_name => 'SETTINGS',
        p_help_text          => q'~Specify if this attribute must contain a value.~' );
    --
    l_property_id := 2215;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ATTRIBUTE_IS_TRANSLATABLE',
        p_prompt             => 'Translatable',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_TRANSLATABLE',
        p_display_group_name => 'SETTINGS',
        p_help_text          => q'~Specify whether or not this attribute is included in the XLIFF translation file.~' );
    --
    l_property_id := 2216;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ATTRIBUTE_DISPLAY_WIDTH',
        p_prompt             => 'Display Width',
        p_property_type      => 'NUMBER',
        p_db_column          => 'DISPLAY_LENGTH',
        p_display_length     => 4,
        p_max_length         => 4,
        p_display_group_name => 'SETTINGS',
        p_help_text          => q'~Specify the length (in characters) that is displayed for this attribute in the &PRODUCT_NAME. Builder.~',
        p_comment_text       => q'~$$$ Condition of type "VAL_OF_ITEM_IN_COND_NOT_EQ_COND2" found, please check logic.
P4415_PLUGIN_TYPE != 'TEMPLATE COMPONENT~' );
    --
    l_property_id := 2217;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ATTRIBUTE_MAXIMUM_LENGTH',
        p_prompt             => 'Maximum Length',
        p_property_type      => 'NUMBER',
        p_db_column          => 'MAX_LENGTH',
        p_display_length     => 5,
        p_max_length         => 5,
        p_display_group_name => 'SETTINGS',
        p_help_text          => q'~Specify the maximum number of character users are allowed to type into this attribute.~' );
    --
    l_property_id := 2218;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ATTRIBUTE_MINIMUM_COLUMNS',
        p_prompt             => 'Minimum Columns',
        p_property_type      => 'NUMBER',
        p_db_column          => 'SQL_MIN_COLUMN_COUNT',
        p_display_length     => 3,
        p_max_length         => 3,
        p_display_group_name => 'SETTINGS',
        p_help_text          => q'~Minimum number of columns that the SQL query has to select.~' );
    --
    l_property_id := 2219;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ATTRIBUTE_MAXIMUM_COLUMNS',
        p_prompt             => 'Maximum Columns',
        p_property_type      => 'NUMBER',
        p_db_column          => 'SQL_MAX_COLUMN_COUNT',
        p_display_length     => 3,
        p_max_length         => 3,
        p_display_group_name => 'SETTINGS',
        p_help_text          => q'~Maximum number of columns that the SQL query can select.~' );


    --
    l_property_id := 2220;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PLUGIN_PARENT_ATTRIBUTE',
        p_prompt                   => 'Parent Attribute',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'PARENT_ATTRIBUTE_ID',
        p_display_group_name       => 'SETTINGS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_plugin_cust_attr,
        p_lov_component_type_scope => 'PARENT',
        p_help_text                => null );
    --
    l_property_id := 2221;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ATTRIBUTE_DATA_TYPES',
        p_prompt             => 'Data Types',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'COLUMN_DATA_TYPES',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specifies the data types of which the selected column has to be. If the data type "Varchar2" has been checked then the column can be of any data type except "Blob" and "Bfile", because all of these data types can be converted to a "Varchar2". If no data type is checked, the selected column can be of any data type.
~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Varchar2',
        p_return_value  => 'VARCHAR2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Number',
        p_return_value  => 'NUMBER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Date',
        p_return_value  => 'DATE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Timestamp',
        p_return_value  => 'TIMESTAMP',
        p_comment_text  => q'~$$$ Condition of type "VAL_OF_ITEM_IN_COND_NOT_EQ_COND2" found, please check logic.
P4415_PLUGIN_TYPE != 'TEMPLATE COMPONENT~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Timestamp with Time Zone',
        p_return_value  => 'TIMESTAMP_TZ',
        p_comment_text  => q'~$$$ Condition of type "VAL_OF_ITEM_IN_COND_NOT_EQ_COND2" found, please check logic.
P4415_PLUGIN_TYPE != 'TEMPLATE COMPONENT~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Timestamp with Local Time Zone',
        p_return_value  => 'TIMESTAMP_LTZ',
        p_comment_text  => q'~$$$ Condition of type "VAL_OF_ITEM_IN_COND_NOT_EQ_COND2" found, please check logic.
P4415_PLUGIN_TYPE != 'TEMPLATE COMPONENT~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Interval Year to Month',
        p_return_value  => 'INTERVAL_Y2M' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Interval Day to Second',
        p_return_value  => 'INTERVAL_D2S' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Blob',
        p_return_value  => 'BLOB',
        p_comment_text  => q'~$$$ Condition of type "VAL_OF_ITEM_IN_COND_NOT_EQ_COND2" found, please check logic.
P4415_PLUGIN_TYPE != 'TEMPLATE COMPONENT~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Clob',
        p_return_value  => 'CLOB' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bfile',
        p_return_value  => 'BFILE',
        p_comment_text  => q'~$$$ Condition of type "VAL_OF_ITEM_IN_COND_NOT_EQ_COND2" found, please check logic.
P4415_PLUGIN_TYPE != 'TEMPLATE COMPONENT~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Rowid',
        p_return_value  => 'ROWID',
        p_comment_text  => q'~$$$ Condition of type "VAL_OF_ITEM_IN_COND_NOT_EQ_COND2" found, please check logic.
P4415_PLUGIN_TYPE != 'TEMPLATE COMPONENT~' );
    --
    l_property_id := 2222;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'PLUGIN_ATTRIBUTE_SET_TEXT_CASE',
        p_prompt                => 'Set Text Case',
        p_property_type         => 'SELECT LIST',
        p_db_column             => 'TEXT_CASE',
        p_display_group_name    => 'SETTINGS',
        p_lov_type              => 'STATIC',
        p_help_text             => q'~Specify if the entered plug-in attribute value should always be stored in upper or lowercase.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Uppercase',
        p_return_value  => 'UPPER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Lowercase',
        p_return_value  => 'LOWER' );
    --
    l_property_id := 2223;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ATTRIBUTE_UNIT',
        p_prompt             => 'Unit',
        p_property_type      => 'TEXT',
        p_db_column          => 'UNIT',
        p_display_length     => 10,
        p_max_length         => 30,
        p_display_group_name => 'SETTINGS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the text to be displayed as the unit (i.e. pixels) for the attribute's value in Page Designer.~' );
    --
    l_property_id := 2224;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ATTRIBUTE_LOV_NULL_TEXT',
        p_prompt             => 'LOV Null Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'NULL_TEXT',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'SETTINGS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the text to be displayed at the top of the list. This value also displays when the attribute value is null. If you do not enter any text, it is displayed as '- Select -'.~' );
    --
    l_property_id := 2225;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'INCLUDE_COLUMNS_IN_ITEMS_PICKER',
        p_prompt                => 'Include Columns in Items Picker',
        p_property_type         => 'YES NO',
        p_db_column             => 'REFERENCE_SCOPE',
        p_display_group_name    => 'SETTINGS',
        p_help_text             => q'~<p>Specify <strong>On</strong> if the Items Picker in Page Designer should also include columns of the current region.</p>
<p>Note: In order for this to work, you must perform manual substitutions in your plug-in code and you must also set the plug-in level <em>Substitute Attribute Values</em> flag to <strong>Off</strong>. Please see help for that attribute for further details on how to perform manual substitutions.</p>~',
        p_comment_text          => q'~$$$ Condition of type "EXISTS" found, please check logic.
select 1
  from wwv_flow_plugins
 where id                = :P4415_PLUGIN_ID
   and security_group_id = :WORKSPACE_ID
   and plugin_type      in ( 'REGION TYPE', 'PROCESS TYPE' )
   and instr (
           ':' || standard_attributes || ':',
           ':' || case when plugin_type = 'REGION TYPE' then 'SOURCE_SQL' else 'REGION_REQUIRED' end || ':'
       ) > 0~' );
    --
    l_property_id := 2226;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ATTRIBUTE_ESCAPE_MODE',
        p_prompt             => 'Escape Mode',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ESCAPE_MODE',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~The Escape Mode is used when the placeholder for this attribute is substituted in the template.~',
        p_comment_text       => q'~$$$ Condition of type "VAL_OF_ITEM_IN_COND_EQ_COND2" found, please check logic.'
P4415_PLUGIN_TYPE != 'TEMPLATE COMPONENT~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML',
        p_return_value  => 'HTML' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML Attribute',
        p_return_value  => 'ATTR' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Strip HTML',
        p_return_value  => 'STRIPHTML' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Raw',
        p_return_value  => 'RAW' );
    --
    l_property_id := 2227;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PLUGIN_ATTRIBUTE_LOV_COMPONENT_TYPE',
        p_prompt                   => 'Type',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'LOV_COMPONENT_TYPE_ID',
        p_display_group_name       => 'COMPONENT_LIST_OF_VALUES',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_component_type,
        p_is_internal              => true,
        p_help_text                => null );
    --
    l_property_id := 2228;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ATTRIBUTE_COMP_TYPE_SCOPE',
        p_prompt             => 'Scope',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOV_COMPONENT_TYPE_SCOPE',
        p_display_group_name => 'COMPONENT_LIST_OF_VALUES',
        p_lov_type           => 'STATIC',
        p_help_text          => null );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Current Page',
        p_return_value  => 'PAGE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Current Page and Global Page',
        p_return_value  => 'PAGE_AND_GLOBAL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Within Parent Component',
        p_return_value  => 'PARENT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Current Theme',
        p_return_value  => 'THEME' );
    --
    l_property_id := 2229;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ATTRIBUTE_ON_DELETE_BEHAVIOR',
        p_prompt             => 'On Delete Behavior',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOV_COMPONENT_TYPE_ON_DELETE',
        p_display_group_name => 'COMPONENT_LIST_OF_VALUES',
        p_lov_type           => 'STATIC',
        p_help_text          => null );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cascade',
        p_return_value  => 'WEAK_CASCADE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Set to NULL',
        p_return_value  => 'WEAK_NULL' );
    --
    l_property_id := 2230;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ATTRIBUTE_DEFAULT_VALUE',
        p_prompt             => 'Value',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'DEFAULT_VALUE',
        p_max_length         => 4000,
        p_display_group_name => 'DEFAULT',
        p_help_text          => q'~<p>Specify a default value for this plug-in attribute. The default value is used when a new component is created that uses this plug-in.</p>
<p>
Use Y and N for attributes of type "Yes/No".
</p>~' );
    --
    l_property_id := 2231;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_DEPRECATED_ATTRIBUTE_FOR_VALUES',
        p_prompt             => 'Show Deprecated Attribute for Values',
        p_property_type      => 'TEXT',
        p_db_column          => 'DEPRECATED_VALUES',
        p_display_length     => 32,
        p_max_length         => 30,
        p_display_group_name => 'CONDITION',
        p_help_text          => null,
        p_comment_text       => q'~$$$ Condition of type "VAL_OF_ITEM_IN_COND_EQ_COND2" found, please check logic.~' );
    --
    l_property_id := 2232;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SUPPORTED_FOR_COMPONENT_TYPE',
        p_prompt             => 'Component Type',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'SUPPORTED_COMPONENT_TYPES',
        p_display_group_name => 'SUPPORTED_FOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specifies if the plug-in attribute is displayed in the Builder for Page Items and Interactive Grid Columns. If no supported type is set then it will always be displayed.~',
        p_comment_text       => q'~$$$ Condition of type "EXISTS" found, please check logic. (P4410_ITEM_COMPONENT_TYPES and P4410_PROCESS_COMPONENT_TYPE)~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page Items',
        p_return_value  => 'APEX_APPLICATION_PAGE_ITEMS',
        p_comment_text  => q'~$$$ Condition if Plug-in type is PROCESS_TYPE~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Interactive Grid Columns',
        p_return_value  => 'APEX_APPL_PAGE_IG_COLUMNS',
        p_comment_text  => q'~$$$ Condition if Plug-in type is PROCESS_TYPE~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Facets',
        p_return_value  => 'APEX_APPL_PAGE_FACETS',
        p_comment_text  => q'~$$$ Condition of type "VAL_OF_ITEM_IN_COND_EQ_COND2" found, please check logic.
$$$ Condition if Plug-in type is PROCESS_TYPE~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Facet Group Items',
        p_return_value  => 'APEX_APPL_PAGE_FACET_GRP_ITEMS',
        p_comment_text  => q'~$$$ Condition of type "VAL_OF_ITEM_IN_COND_EQ_COND2" found, please check logic.
$$$ Condition if Plug-in type is PROCESS_TYPE~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Filters',
        p_return_value  => 'APEX_APPL_PAGE_SFILTERS',
        p_comment_text  => q'~$$$ Condition of type "VAL_OF_ITEM_IN_COND_EQ_COND2" found, please check logic.
$$$ Condition if Plug-in type is PROCESS_TYPE~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Filter Group Items',
        p_return_value  => 'APEX_APPL_PAGE_SFILTER_GRP_ITEMS',
        p_comment_text  => q'~$$$ Condition of type "VAL_OF_ITEM_IN_COND_EQ_COND2" found, please check logic.
$$$ Condition if Plug-in type is PROCESS_TYPE~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page Processes',
        p_return_value  => 'APEX_APPLICATION_PAGE_PROC',
        p_comment_text  => '$$$ Condition if Plug-in type is ITEM_TYPE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automation Actions',
        p_return_value  => 'APEX_APPL_AUTOMATION_ACTIONS',
        p_comment_text  => '$$$ Condition if Plug-in type is ITEM_TYPE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Task Definition Actions',
        p_return_value  => 'APEX_APPL_TASKDEF_ACTIONS',
        p_comment_text  => '$$$ Condition if Plug-in type is ITEM_TYPE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Workflow Activities',
        p_return_value  => 'APEX_APPL_WORKFLOW_ACTIVITIES',
        p_comment_text  => '$$$ Condition if Plug-in type is ITEM_TYPE' );
    --
    l_property_id := 2233;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HELP_TEXT_NO_MARKUP',
        p_prompt             => 'Help Text',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'HELP_TEXT',
        p_display_length     => 96,
        p_max_length         => 4000,
        p_display_group_name => 'HELP',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Specify help text for this plug-in attribute. The help text is displayed as context sensitive help for the attribute in the Builder.</p>~' );
    --
    l_property_id := 2234;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXAMPLES',
        p_prompt             => 'Examples',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'EXAMPLES',
        p_display_length     => 96,
        p_max_length         => 4000,
        p_display_group_name => 'EXAMPLES',
        p_is_translatable    => true,
        p_help_text          => q'~Specify examples for this plug-in attribute. The examples are displayed as part of the context sensitive help for the attribute in the Builder.~' );
    --
    l_property_id := 2235;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEMO_VALUE',
        p_prompt             => 'Demo Value',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'DEMO_VALUE',
        p_display_length     => 64,
        p_max_length         => 4000,
        p_display_group_name => 'EXAMPLES',
        p_help_text          => q'~<p>Specify a demo value for this plug-in attribute. The demo value is used when a new page is created that uses this plug-in.</p>
<p>The demo value might differ from the default value to create a working example that demonstrates the features of the plug-in.
All required attributes have to have a demo or default value. The demo value of depending attributes has to match the demo value of the depending attribute.</p>
<p>Use <code>Y</code> and <code>N</code> for attributes of type "Yes/No". Use a random value like <code>Lorem Ipsum</code> for attributes of type "Session State Value".</p>~' );
    --
    l_property_id := 2236;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_ACTION_POSITION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TYPE',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select if the action position renders as a <strong>link</strong> or is based on a button <strong>template</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Link',
        p_return_value  => 'LINK' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Template',
        p_return_value  => 'TEMPLATE' );
    --
    l_property_id := 2237;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'ACTION_POSITION_PREDEFINED_TEMPLATE',
        p_prompt                   => 'Predefined Template',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'TEMPLATE_ID',
        p_display_group_name       => 'SETTINGS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_plugin_action_tmpl,
        p_lov_component_type_scope => 'PARENT',
        p_help_text                => q'~Select an action template that is used automatically if a developer creates an action for this position. If no template is selected, developers are free to pick an available action template themselves.~' );


    --
    l_property_id := 2238;
    store_property (
        p_id                      => l_property_id,
        p_name                    => 'PLUGIN_ACTION_TEMPLATE_TYPE',
        p_prompt                  => 'Type',
        p_property_type           => 'SELECT LIST',
        p_db_column               => 'TYPE',
        p_display_group_name      => 'IDENTIFICATION',
        p_lov_type                => 'STATIC',
        p_help_text               => q'~Select if the template is just a simple <strong>Button</strong> or displays a <strong>Menu</strong> button.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Button',
        p_return_value  => 'BUTTON' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Menu',
        p_return_value  => 'MENU' );
    --
    l_property_id := 2239;
    store_property (
        p_id                      => l_property_id,
        p_name                    => 'PLUGIN_ACTION_TEMPLATE',
        p_prompt                  => 'Action Template',
        p_property_type           => 'HTML',
        p_db_column               => 'TEMPLATE',
        p_display_length          => 80,
        p_max_length              => 30000,
        p_display_group_name      => 'TEMPLATE',
        p_is_translatable         => true,
        p_help_text               => q'~<p>Enter the HTML markup for the template.</p>
<p>
The following predefined template placeholders are supported:
<ul>
<li>LABEL</li>
<li>ICON_CLASSES</li>
<li>CSS_CLASSES</li>
<li>IS_HOT</li>
<li>IS_ICON_ONLY</li>
<li>IS_DISABLED</li>
<li>LINK_URL</li>
<li>LINK_ATTR</li>
</ul>
</p>
<p>
For templates of type <strong>Menu</strong> the following additional placeholders have to be used:
<ul>
<li>MENU_ID</li>
<li>MENU</li>
</ul>
</p>
<p>Supports Template Directives.</p>~' );
    --
    l_property_id := 2240;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'THEME_NUMBER',
        p_prompt             => 'Theme Number',
        p_property_type      => 'INTEGER',
        p_db_column          => 'THEME_ID',
        p_display_length     => 10,
        p_max_length         => 10,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~<p>A number which identifies a collection of templates which define the user interface of an application.</p>~' );
    --
    l_property_id := 2241;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IDENTIFIER',
        p_prompt             => 'Identifier',
        p_property_type      => 'TEXT',
        p_db_column          => 'THEME_INTERNAL_NAME',
        p_display_length     => 64,
        p_max_length         => null,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~<p>Specifies the internal theme identifier.</p>~' );
    --
    l_property_id := 2242;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NAVIGATION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'NAVIGATION_TYPE',
        p_display_group_name => 'NAVIGATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Identifies the selected Navigation Type. Valid options include: Tabs or List.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Tabs',
        p_return_value  => 'T' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'List',
        p_return_value  => 'L' );
    --
    l_property_id := 2243;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NAVIGATION_BAR_IMPLEMENTATION',
        p_prompt             => 'Navigation Bar Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'NAV_BAR_TYPE',
        p_display_group_name => 'NAVIGATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Identifies the selected Navigation Bar implementation. Valid options include: Classic or List.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Classic',
        p_return_value  => 'NAVBAR' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'List',
        p_return_value  => 'LIST' );
    --
    l_property_id := 110710001;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'CURRENT_THEME_STYLE',
        p_prompt                   => 'Current Theme Style',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'CURRENT_THEME_STYLE_ID',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_theme_style,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the current theme style of this theme.</p>~' );
    --
    l_property_id := 2244;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_PAGE_TMPL',
        p_prompt                   => 'Page',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_PAGE_TEMPLATE',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_page_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default template for displaying pages. If a developer does not explicitly choose a template then the &PRODUCT_NAME. engine uses the template specified here.</p>~' );
    --
    l_property_id := 2245;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'DEFAULT_NAVIGATION_BAR_LIST_TMPL',
        p_prompt                    => 'Navigation Bar List',
        p_property_type             => 'SELECT LIST',
        p_db_column                 => 'DEFAULT_NAV_BAR_LIST_TEMPLATE',
        p_display_group_name        => 'COMPONENT_DEFAULTS',
        p_lov_type                  => 'COMPONENT',
        p_lov_component_type_id     => c_comp_type_list_template,
        p_lov_component_type_scope  => 'THEME',
        p_help_text                 => q'~<p>Specifies the default navigation bar list template used when you define the navigation bar type as List in your application. You will be given an opportunity to override this default in the User Interface settings at application level.</p>~' );
    --
    l_property_id := 2246;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_NAVIGATION_MENU_LIST_POSITION_TMPL',
        p_prompt                   => 'Navigation Menu List Position',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_NAV_LIST_POSITION',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'STATIC',
        p_help_text                => q'~<p>Specifies the default navigation menu list position. You will be given an opportunity to override this default.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top',
        p_return_value  => 'TOP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Side',
        p_return_value  => 'SIDE' );
    --
    l_property_id := 2247;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_NAVIGATION_MENU_LIST_TOP_TMPL',
        p_prompt                   => 'Navigation Menu List (Top)',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_TOP_NAV_LIST_TEMPLATE',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_list_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default navigation menu list template used when you create a new list to be displayed on the top of the page. You will be given an opportunity to override this default</p>.~' );
    --
    l_property_id := 2248;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_NAVIGATION_MENU_LIST_SIDE_TMPL',
        p_prompt                   => 'Navigation Menu List (Side)',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_SIDE_NAV_LIST_TEMPLATE',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_list_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default navigation menu list template used when you create a new list to be displayed on the side of the page. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2249;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_LOGIN_PAGE_TMPL',
        p_prompt                   => 'Login Page',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'LOGIN_TEMPLATE',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_page_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default template for displaying pages. If a developer does not explicitly choose a template then the &PRODUCT_NAME. engine uses the template specified here.</p>~' );
    --
    l_property_id := 2250;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_ERROR_PAGE_TMPL',
        p_prompt                   => 'Error Page',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'ERROR_TEMPLATE',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_page_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Optional. Specifies a page template to use for errors that display on a separate page as opposed to those that display inline. Leave this attribute blank if you do not wish to use a template designed to display errors.  This setting only applies to Normal pages.</p>~' );
    --
    l_property_id := 2251;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_PRINTER_FRIENDLY_PAGE_TMPL',
        p_prompt                   => 'Printer Friendly Page',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'PRINTER_FRIENDLY_TEMPLATE',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_page_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Identifies the template to be used when the &PRODUCT_NAME. engine is in printer friendly mode. When calling the &PRODUCT_NAME. to render a page, you have the option to identify a printer friendly attribute with values of YES or NO.</p>
<p>If you select YES, then the page displays using a printer friendly template. The &PRODUCT_NAME. engine displays all text within HTML form fields as text. The printer friendly template does not need to have the <code>#FORM_OPEN#</code> or <code>#FORM_CLOSE#</code> tags. The objective is to be able to display information with few tables and in a format suitable for printing.</p>~' );
    --
    l_property_id := 2252;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_BREADCRUMB_TMPL',
        p_prompt                   => 'Breadcrumb',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_MENU_TEMPLATE',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_bc_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default breadcrumb template used when you create new breadcrumb. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2253;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_BUTTON_TMPL',
        p_prompt                   => 'Button',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_BUTTON_TEMPLATE',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_button_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default button template used when you create new button. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2254;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_LEGACY_CALENDAR_TMPL',
        p_prompt                   => 'Legacy Calendar',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_CALENDAR_TEMPLATE',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_calendar_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default calendar template used when you create new calendar. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2255;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_DEFAULT_LABEL_TMPL',
        p_prompt                   => 'Default Label',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_LABEL_TEMPLATE',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_field_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default label template used when you create new label. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2256;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_OPTION_LABEL_TMPL',
        p_prompt                   => 'Optional Label',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_OPTION_LABEL',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_field_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default optional label template used when you create new label. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2257;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_REQUIRED_LABEL_TMPL',
        p_prompt                   => 'Required Label',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_REQUIRED_LABEL',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_field_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default required label template used when you create new label. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2258;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_LIST_TMPL',
        p_prompt                   => 'List',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_LIST_TEMPLATE',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_list_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default list template used when you create new list. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2259;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_REGION_TMPL',
        p_prompt                   => 'Region',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_REGION_TEMPLATE',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default region template used when you create new region. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2260;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_CLASSIC_REPORT_TMPL',
        p_prompt                   => 'Classic Report',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_REPORT_TEMPLATE',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_report_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default region template used when you create a report. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2261;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_HEADER_TOOLBAR_TMPL',
        p_prompt                   => 'Header Toolbar',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_HEADER_TEMPLATE',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default header toolbar region template used when you create a new page  that includes a header or footer toolbars.</p>~' );
    --
    l_property_id := 2262;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_FOOTER_TOOLBAR_TMPL',
        p_prompt                   => 'Footer Toolbar',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_FOOTER_TEMPLATE',
        p_display_group_name       => 'COMPONENT_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default footer toolbar region template used when you create a new page  that includes a header or footer toolbars.</p>~' );
    --
    l_property_id := 2263;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_BREADCRUMBS_TMPL',
        p_prompt                   => 'Breadcrumbs',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_MENUR_TEMPLATE',
        p_display_group_name       => 'REGION_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default region template used when you create a breadcrumb. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2264;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_CHARTS_TMPL',
        p_prompt                   => 'Charts',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_CHART_TEMPLATE',
        p_display_group_name       => 'REGION_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default chart template used when you create a chart. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2265;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_FORMS_TMPL',
        p_prompt                   => 'Forms',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_FORM_TEMPLATE',
        p_display_group_name       => 'REGION_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default form template used when you create a form. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2266;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_LISTS_TMPL',
        p_prompt                   => 'Lists',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_LISTR_TEMPLATE',
        p_display_group_name       => 'REGION_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default region template used when you create a list. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2267;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_REPORTS_TMPL',
        p_prompt                   => 'Reports',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_REPORTR_TEMPLATE',
        p_display_group_name       => 'REGION_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default region template used when you create a report. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2268;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_WIZARDS_TMPL',
        p_prompt                   => 'Wizards',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_WIZARD_TEMPLATE',
        p_display_group_name       => 'REGION_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default region template used when you create a new wizard component. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2269;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_INTERACTIVE_REPORTS_TMPL',
        p_prompt                   => 'Interactive Reports',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_IRR_TEMPLATE',
        p_display_group_name       => 'REGION_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default region template used when you create an interactive report. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2270;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_DIALOG_CONTENT_REGION_TMPL',
        p_prompt                   => 'Dialog Content Region',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_DIALOGR_TEMPLATE',
        p_display_group_name       => 'DIALOG_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default region template used when you create a content region on a Dialog. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2271;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_DIALOG_BUTTON_REGION_TMPL',
        p_prompt                   => 'Dialog Button Region',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_DIALOGBTNR_TEMPLATE',
        p_display_group_name       => 'DIALOG_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default region template used when you create a button region on a Dialog. You will be given an opportunity to override this default.</p>~' );
    --
    l_property_id := 2272;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_DIALOG_PAGE_TMPL',
        p_prompt                   => 'Dialog Page',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_DIALOG_TEMPLATE',
        p_display_group_name       => 'DIALOG_DEFAULTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_page_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Specifies the default template for displaying modal or non-modal dialog pages. If a developer does not
explicitly choose a template then the &PRODUCT_NAME. engine uses the template specified here. This template will
also be used for errors that display on a separate page as opposed to those that display inline.</p>~' );
    --
    l_property_id := 2273;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'THEME_ICON_LIBRARY',
        p_prompt                   => 'Library',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'ICON_LIBRARY',
        p_display_group_name       => 'ICONS',
        p_lov_type                 => 'STATIC',
        p_help_text                => q'~<p>Select the icon library to be loaded when &PRODUCT_NAME. displays a page. The icons within the library will also be displayed in the icon picker in Page Designer.</p>
<p>Select <strong>Font APEX - Latest</strong> if you want to use a newer version of Font APEX than the one that is shipped with &PRODUCT_NAME.. You can get the most current version of Font APEX on GitHub, and then upload the files into the <code>libraries/font-apex/latest/</code> folder within the &PRODUCT_NAME. images directory.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Font APEX',
        p_return_value  => 'FONTAPEX' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Font APEX - Latest',
        p_return_value  => 'FONTAPEX_LATEST' );
    --
    l_property_id := 2274;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'CUSTOM_LIBRARY_FILE_URLS',
        p_prompt                   => 'Custom Library File URLs',
        p_property_type            => 'TEXT EDITOR',
        p_db_column                => 'CUSTOM_LIBRARY_FILE_URLS',
        p_display_length           => 80,
        p_max_length               => 4000,
        p_display_group_name       => 'ICONS',
        p_examples                 => q'~<p><ul>
  <li>Standard file reference which loads the file from the theme directory:
      <pre>#THEME_IMAGES#icons.css</pre>
  </li>
  <li>Standard file reference which loads the minified file icons.min.css from /mycss/minified/ for regular page views and icons.css from /mycss/ in debug mode.
      <pre>/mycss/#MIN_DIRECTORY#icons#MIN#.css</pre>
  </li>
  <li>Conditional media query:
      <pre>[media="only screen and (max-device-width: 480px)"]/mycss/smartphone_icons.css</pre>
  </li>
  <li>File reference using a query string in the URL referencing the application version, such that when the application is upgraded (and the version is incremented), the browser loads the new file and ignore any previously cached files:
      <pre>/mycss/icons.css?version=#APP_VERSION#</pre>
  </li>
</ul></p>~',
        p_help_text          => q'~<p>Enter Cascading Style Sheet file URLs for custom icons to be loaded on every page. Each URL has to be written into a new line. If you provide a minified version of your file you can use the substitution string <code>#MIN#</code> to include <code>.min</code> or <code>#MIN_DIRECTORY#</code> to include <code>minified/</code> in your file URL for a regular page view and an empty string if the page is viewed in debug mode. You also have access to the substitution string <code>#APP_VERSION#</code> if you want to include the application's version in the file URL.</p>
<p>File URLs you enter here will replace the <code>#THEME_CSS#</code> substitution string in the page template.</p>
<p>Note: You do not need to include opening or closing <code>link</code> tags. Just include the file URL.</p>~' );
    --
    l_property_id := 2275;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CUSTOM_ICON_CLASSES',
        p_prompt             => 'Custom Classes',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'CUSTOM_ICON_CLASSES',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'ICONS',
        p_help_text          => q'~Specify a comma delimited list of CSS class names which will be listed in the picker for Region and Button <strong>Icon CSS Classes</strong>, implemented within Page Designer.~' );
    --
    l_property_id := 2276;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CUSTOM_ICON_PREFIX_CLASS',
        p_prompt             => 'Custom Prefix Class',
        p_property_type      => 'TEXT',
        p_db_column          => 'CUSTOM_ICON_PREFIX_CLASS',
        p_display_length     => 10,
        p_max_length         => 30,
        p_display_group_name => 'ICONS',
        p_help_text          => q'~Specify a CSS class that will at runtime prefix the <em>Icon CSS Classes</em> defined for Regions, Buttons and Lists, if they are not using a class of the Icon Library.~' );
    --
    l_property_id := 2277;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATE_PICKER_ICON_NAME',
        p_prompt             => 'Date Picker Icon Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'CALENDAR_ICON',
        p_display_length     => 96,
        p_max_length         => 255,
        p_display_group_name => 'ICONS',
        p_examples           => q'~<p><pre>&#35;APEX_FILES&#35;new_cal.bmp</pre></p>~',
        p_help_text          => q'~<p>Enter the name and location of the image to be used when items of type Date Picker are displayed.</p>~' );
    --
    l_property_id := 2278;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATE_PICKER_ICON_ATTRIBUTES',
        p_prompt             => 'Date Picker Icon Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'CALENDAR_ICON_ATTR',
        p_display_length     => 96,
        p_max_length         => 4000,
        p_display_group_name => 'ICONS',
        p_examples           => q'~<p><pre>width="16" height="16" alt="Display Calendar"</pre></p>~',
        p_help_text          => q'~<p>Enter the image attributes for the Calendar Icon.</p>~' );
    --
    l_property_id := 2279;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FILE_PREFIX',
        p_prompt             => 'File Prefix',
        p_property_type      => 'TEXT',
        p_db_column          => 'FILE_PREFIX',
        p_display_length     => 64,
        p_max_length         => 255,
        p_display_group_name => 'FILES',
        p_examples           => q'~<p><ul>
  <li>/myFiles/</li>
  <li>https://example.com/myFiles/</li>
  <li>&#35;APEX_FILES&#35;myFiles/</li>
</li></p>~',
        p_help_text          => q'~<p>Determines the virtual path the web server uses to point to the files of the theme. For performance reasons you can store your theme files on your web server instead of with your theme definition in the database. Use <code>&#35;APEX_FILES&#35;</code> or any valid URL to reference them.</p>
<p>Do not specify anything to reference files which are stored with your theme definition in the database. If you specify File Prefix and still wish to reference files stored with your theme in the database, use <code>&#35;THEME_DB_FILES&#35;</code> rather than <code>&#35;THEME_FILES&#35;</code> in your templates.</p>~' );
    --
    l_property_id := 2280;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TEMPLATE_OPTION_TYPE',
        p_prompt             => 'Template Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TEMPLATE_TYPES',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => null );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Button',
        p_return_value  => 'BUTTON' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'FIELD' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region',
        p_return_value  => 'REGION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Report',
        p_return_value  => 'REPORT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'List',
        p_return_value  => 'LIST' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page',
        p_return_value  => 'PAGE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Breadcrumb',
        p_return_value  => 'BREADCRUMB' );
    --
    l_property_id := 2281;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'TEMPLATE_OPTION_TYPE_HIDDEN',
        p_prompt                   => 'Template Type',
        p_property_type            => 'HIDDEN',
        p_db_column                => 'TEMPLATE_TYPES',
        p_display_group_name       => 'IDENTIFICATION',
        p_help_text                => null );
    --
    l_property_id := 2282;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'NULL_TEXT',
        p_prompt                   => 'Null Text',
        p_property_type            => 'TEXT',
        p_db_column                => 'NULL_TEXT',
        p_display_group_name       => 'SETTINGS',
        p_is_translatable          => true,
        p_help_text                => null );
    --
    l_property_id := 2283;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'IS_ADVANCED',
        p_prompt                   => 'Advanced',
        p_property_type            => 'YES NO',
        p_db_column                => 'IS_ADVANCED',
        p_display_group_name       => 'SETTINGS',
        p_help_text                => null );
    --
    l_property_id := 2284;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'TEMPLATE_OPTION_GROUP',
        p_prompt                   => 'Group',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'GROUP_ID',
        p_display_group_name       => 'IDENTIFICATION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_tmpl_option_group,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => null );
    --
    l_property_id := 2285;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'IS_CURRENT',
        p_prompt                   => 'Is Current',
        p_property_type            => 'YES NO',
        p_db_column                => 'IS_CURRENT',
        p_display_group_name       => 'SETTINGS',
        p_help_text                => q'~<p>Select whether this style is the current style used by the theme.</p>~' );
    --
    l_property_id := 2286;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'IS_PUBLIC',
        p_prompt                   => 'Is Public',
        p_property_type            => 'YES NO',
        p_db_column                => 'IS_PUBLIC',
        p_display_group_name       => 'SETTINGS',
        p_help_text                => q'~<p>Select whether this style can be chosen by end users.</p>~' );
    --
    l_property_id := 2287;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'ACCESSIBILITY_TESTED',
        p_prompt                   => 'Accessibility Tested',
        p_property_type            => 'YES NO',
        p_db_column                => 'IS_ACCESSIBLE',
        p_display_group_name       => 'SETTINGS',
        p_help_text                => q'~<p>Specify if this Theme Style has been tested to the applicable accessibility guidelines. For Theme Styles created by Oracle, please see our product VPAT for the accessibility guidelines we follow.</p>~' );
    --
    l_property_id := 2288;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'THEME_STYLE_CSS_CLASSES',
        p_prompt                   => 'CSS Classes',
        p_property_type            => 'TEXT',
        p_db_column                => 'CSS_CLASSES',
        p_max_length               => 255,
        p_display_group_name       => 'CASCADING_STYLE_SHEET',
        p_help_text                => q'~<p>Enter CSS classes to be appended to the #PAGE_CSS_CLASSES# substitution string and applied to every page of the application if this Theme Style is currently active.</p>~' );
    --
    l_property_id := 2289;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'THEME_ROLLER_READ_ONLY',
        p_prompt                   => 'Read Only',
        p_property_type            => 'YES NO',
        p_db_column                => 'THEME_ROLLER_READ_ONLY',
        p_display_group_name       => 'THEME_ROLLER_ATTRIBUTES',
        p_help_text                => q'~<p>Select <strong>On</strong> to prevent any updates to the theme style. Select <strong>Off</strong> to allow the theme style to be edited and overwritten using Theme Roller.</p>~' );
    --
    l_property_id := 2290;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'THEME_ROLLER_INPUT_FILE_URLS',
        p_prompt                   => 'Input Parameter File URLs',
        p_property_type            => 'TEXT EDITOR',
        p_db_column                => 'THEME_ROLLER_INPUT_FILE_URLS',
        p_max_length               => 4000,
        p_display_group_name       => 'THEME_ROLLER_ATTRIBUTES',
        p_help_text                => q'~<p>Enter the LESS file URLs that will be used to generate this theme style when using Theme Roller.</p>~' );
    --
    l_property_id := 2291;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'THEME_ROLLER_OUTPUT_FILE_URL',
        p_prompt                   => 'Output CSS File URL',
        p_property_type            => 'TEXT',
        p_db_column                => 'THEME_ROLLER_OUTPUT_FILE_URL',
        p_max_length               => 4000,
        p_display_group_name       => 'THEME_ROLLER_ATTRIBUTES',
        p_help_text                => q'~<p>Enter the URL for the CSS file that will be generated by Theme Roller for this theme style.</p>~' );
    --
    l_property_id := 2292;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'JSON_CONFIGURATION',
        p_prompt                   => 'JSON Configuration',
        p_property_type            => 'TEXT EDITOR',
        p_db_column                => 'THEME_ROLLER_CONFIG',
        p_display_group_name       => 'THEME_ROLLER_ATTRIBUTES',
        p_help_text                => q'~<p>The JSON configuration is generated by Theme Roller when the theme style is saved.</p>
<p>Oracle does not recommend manually updating the configuration. However, you can copy a JSON configuration from another theme style, such as a theme style in another application, to manually update the configuration.</p>~' );
    --
    l_property_id := 2293;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'TEMPLATE_SUBSTITUTION',
        p_prompt                    => 'Template Substitution',
        p_property_type             => 'TEXT',
        p_db_column                 => 'PLACEHOLDER',
        p_display_group_name        => 'IDENTIFICATION',
        p_text_case                 => 'UPPER' );
    --
    l_property_id := 2294;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'SLOT_REGION_SUPPORT',
        p_prompt                    => 'Regions',
        p_property_type             => 'YES NO',
        p_db_column                 => 'HAS_REGION_SUPPORT',
        p_display_group_name        => 'COMPONENT_TYPE_SUPPORT' );
    --
    l_property_id := 2295;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'SLOT_ITEM_SUPPORT',
        p_prompt                    => 'Items',
        p_property_type             => 'YES NO',
        p_db_column                 => 'HAS_ITEM_SUPPORT',
        p_display_group_name        => 'COMPONENT_TYPE_SUPPORT' );
    --
    l_property_id := 2296;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'SLOT_BUTTON_SUPPORT',
        p_prompt                    => 'Buttons',
        p_property_type             => 'YES NO',
        p_db_column                 => 'HAS_BUTTON_SUPPORT',
        p_display_group_name        => 'COMPONENT_TYPE_SUPPORT' );
    --
    l_property_id := 2297;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'SLOT_GRID_SUPPORT',
        p_prompt                    => 'Grid',
        p_property_type             => 'YES NO',
        p_db_column                 => 'HAS_GRID_SUPPORT',
        p_display_group_name        => 'GRID_LAYOUT_RENDERING' );
    --
    l_property_id := 2298;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'SLOT_MAX_FIXED_GRID_COLUMNS',
        p_prompt                    => 'Maximum Fixed Columns',
        p_property_type             => 'INTEGER',
        p_db_column                 => 'MAX_FIXED_GRID_COLUMNS',
        p_display_group_name        => 'GRID_LAYOUT_RENDERING' );
    --
    l_property_id := 2299;
    store_property (
        p_id                        => l_property_id,
        p_name                      => 'SLOT_NEW_ROW',
        p_prompt                    => 'New Row',
        p_property_type             => 'YES NO',
        p_db_column                 => 'GLV_NEW_ROW',
        p_display_group_name        => 'GRID_LAYOUT_RENDERING' );
    --
    store_attribute_props (
            p_start_property_id     => 2137,
            p_attribute_count       => 15,
            p_column_name_prefix    => 'ATTRIBUTE' );  -- Stores property ids 2137 - 2151
    --
    l_property_id := 2300;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BEGINS_ON_NEW_LINE',
        p_prompt             => 'Begins On New Line',
        p_property_type      => 'YES NO',
        p_db_column          => 'BEGINS_ON_NEW_LINE',
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~<p>Navigation icons are displayed in table cells, if you set begins-on-new-line to YES then a new table row will be created.</p>~' );
    --
    l_property_id := 2301;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'CELL_COLUMN_SPAN',
        p_prompt                   => 'Cell Column Span',
        p_property_type            => 'INTEGER',
        p_db_column                => 'CELL_COLSPAN',
        p_max_length               => 255,
        p_min_value                => 1,
        p_display_group_name       => 'LAYOUT',
        p_help_text                => q'~By default each navigation bar entry spans one cell (that is the HTML table data colspan=1).&nbsp; If your HTML requires a different COLSPAN you can set it using this control.~' );
    --
    l_property_id := 2302;
    store_subscription_prop (
        p_property_id           => l_property_id,
        p_name                  => 'NAVIGATION_BAR',
        p_lov_component_type_id => c_comp_type_classic_nav_bar,
        p_help_text             => q'~<p>Specify a navigation bar entry to subscribe to.</p>~' );
    --
    l_property_id := 2303;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_HEIGHT',
        p_prompt             => 'Height',
        p_property_type      => 'INTEGER',
        p_db_column          => 'ICON_HEIGHT',
        p_display_length     => 8,
        p_max_length         => 255,
        p_min_value          => 1,
        p_display_group_name => 'ICON',
        p_help_text          => q'~You can set height and width attributes of the image.~' );
    --
    l_property_id := 2304;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_WIDTH',
        p_prompt             => 'Width',
        p_property_type      => 'INTEGER',
        p_db_column          => 'ICON_WIDTH',
        p_display_length     => 8,
        p_max_length         => 255,
        p_min_value          => 1,
        p_display_group_name => 'ICON',
        p_help_text          => q'~You can set height and width attributes of the image.&nbsp; ~' );
    --
    l_property_id := 2305;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FEEDBACK_ENTRY',
        p_prompt             => 'Feedback Entry',
        p_property_type      => 'YES NO',
        p_db_column          => 'NAV_ENTRY_IS_FEEDBACK_YN',
        p_display_group_name => 'FEEDBACK',
        p_help_text          => q'~<p>Indicates that this navigation bar entry is a link to a page that gathers feedback accessible within Team Development.</p>
<p>Feedback is enabled or disabled at the application level so that feedback can be turned on for testing and turned off for production.</p>
<p>If the application level attribute is disabled then the feedback navigation bar entry will not be displayed.</p>~' );
    --
    l_property_id := 2306;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IDENTIFICATION_DISPLAY_SEQUENCE',
        p_prompt             => 'Sequence',
        p_property_type      => 'INTEGER',
        p_db_column          => 'SEQUENCE',
        p_display_group_name => 'IDENTIFICATION' );
    --
    l_property_id := 2307;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REFERENCE_ID',
        p_prompt             => 'Master',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'REFERENCE_ID',
        p_display_group_name => 'SUBSCRIPTION' );
    --
    l_property_id := 2308;
    store_list_tmpl_attr_props (
        p_start_property_id => 2308,
        p_attribute_count   => 20 );  -- Creates Property-IDs 2308 - 2327
    --
    l_property_id := 2328;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_TEMPLATE_CLASS',
        p_prompt             => 'Template Class',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'THEME_CLASS_ID',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Identifies a specific usage for this template.</p>
<p>When you switch to a new theme, all templates in one theme are assigned to corresponding templates in another theme. App Builder accomplishes this template mapping through the assignment of template class identifiers.<br />
Use the <strong>Translatable</strong> check box to indicate if this template contains text strings that require translation.
</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Standard',
        p_return_value  => '1' );
    --
    l_property_id := 2329;
    store_subscription_prop (
        p_property_id           => l_property_id,
        p_name                  => 'POPUP_LOV_TEMPLATE',
        p_lov_component_type_id => c_comp_type_popup_lov_template,
        p_help_text             => q'~<p>You may select an existing template in this workspace or another template in your workspace's schema. By selecting an existing template, you become a subscriber to that template.</p>
<p>To load a new copy of any master template, click <span class="fielddatabold">Refresh Template</span>.</p>~' );
    --
    l_property_id := 2330;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_ICON',
        p_prompt             => 'Icon',
        p_property_type      => 'TEXT',
        p_db_column          => 'POPUP_ICON',
        p_max_length         => 4000,
        p_display_group_name => 'POPUP_ICON',
        p_is_translatable    => true,
        p_help_text          => q'~Specify an icon to display to the right of a form field for items of type POPUP. By default, the &PRODUCT_NAME. engine uses a CSS-based default icon.~' );
    --
    l_property_id := 2331;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_ICON_ATTRIBUTES',
        p_prompt             => 'Attributes',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'POPUP_ICON_ATTR',
        p_max_length         => 4000,
        p_display_group_name => 'POPUP_ICON',
        p_is_translatable    => true,
        p_help_text          => q'~Specify image attributes (such as height and width) used to display the Popup Icon.~' );
    --
    l_property_id := 2332;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_COLOR_PICKER_ICON',
        p_prompt             => 'Color Picker Icon',
        p_property_type      => 'TEXT',
        p_db_column          => 'POPUP_ICON2',
        p_max_length         => 4000,
        p_display_group_name => 'POPUP_ICON',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Specify an icon to display to the right of a form field for items of type Popup Color Picker. By default, the &PRODUCT_NAME. engine shows a color palette icon.</p>~' );
    --
    l_property_id := 2333;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_COLOR_PICKER_ICON_ATTR',
        p_prompt             => 'Color Picker Attributes',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'POPUP_ICON_ATTR2',
        p_max_length         => 4000,
        p_display_group_name => 'POPUP_ICON',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Specify image attributes (such as height and width) used to display the Popup Color Picker Icon.</p>~' );
    --
    l_property_id := 2334;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_BEFORE_FIELD_TEXT',
        p_prompt             => 'Before Field',
        p_property_type      => 'HTML',
        p_db_column          => 'BEFORE_FIELD_TEXT',
        p_max_length         => 4000,
        p_display_group_name => 'SEARCH_FIELD',
        p_is_translatable    => true,
        p_examples           => q'~<p><pre>Search&lt;br&gt;</pre></p>~',
        p_help_text          => q'~<p>Defines text to display before the popup list of values search field displays.</p>~' );
    --
    l_property_id := 2335;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_AFTER_FIELD_TEXT',
        p_prompt             => 'After Field',
        p_property_type      => 'HTML',
        p_db_column          => 'AFTER_FIELD_TEXT',
        p_max_length         => 4000,
        p_display_group_name => 'SEARCH_FIELD',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Display this text after displaying the search field, the search button, and the close button.</p>~' );
    --
    l_property_id := 2336;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_FILTER_WIDTH',
        p_prompt             => 'Width',
        p_property_type      => 'TEXT',
        p_db_column          => 'FILTER_WIDTH',
        p_max_length         => 255,
        p_display_group_name => 'SEARCH_FIELD',
        p_help_text          => q'~<p>Display the HTML INPUT TYPE = TEXT widget using this width.</p>~' );
    --
    l_property_id := 2337;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_FILTER_MAX_WIDTH',
        p_prompt             => 'Maximum Width',
        p_property_type      => 'TEXT',
        p_max_length         => 255,
        p_db_column          => 'FILTER_MAX_WIDTH',
        p_display_group_name => 'SEARCH_FIELD',
        p_help_text          => q'~<p>Display the HTML INPUT TYPE = TEXT widget using this maximum width.</p>~' );
    --
    l_property_id := 2338;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_FILTER_TEXT_ATTRIBUTES',
        p_prompt             => 'Filter Text Attributes',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'FILTER_TEXT_ATTR',
        p_max_length         => 4000,
        p_display_group_name => 'SEARCH_FIELD',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Display the HTML INPUT TYPE = TEXT widget using these attributes.  This will be included within the HTML input tag.</p>~' );
    --
    l_property_id := 2339;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_FIND_BUTTON_TEXT',
        p_prompt             => 'Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'FIND_BUTTON_TEXT',
        p_max_length         => 255,
        p_display_group_name => 'FIND_BUTTON',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Defines text that displays on the name of the button used to search on the popup page.</p>~' );
    --
    l_property_id := 2340;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_FIND_BUTTON_ATTRIBUTES',
        p_prompt             => 'Attributes',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'FIND_BUTTON_ATTR',
        p_max_length         => 4000,
        p_display_group_name => 'FIND_BUTTON',
        p_lov_type           => 'DISTINCT',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Defines additional attributes for the Find button.</p>~' );
    --
    l_property_id := 2341;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_CLOSE_BUTTON_TEXT',
        p_prompt             => 'Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'CLOSE_BUTTON_TEXT',
        p_max_length         => 255,
        p_display_group_name => 'CLOSE_BUTTON',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Defines the name of the close button. The close button dismisses the popup list of values page.</p>~' );
    --
    l_property_id := 2342;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_CLOSE_BUTTON_ATTRIBUTES',
        p_prompt             => 'Attributes',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'CLOSE_BUTTON_ATTR',
        p_max_length         => 4000,
        p_display_group_name => 'CLOSE_BUTTON',
        p_lov_type           => 'DISTINCT',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Defines additional attributes of the Close button.</p>~' );
    --
    l_property_id := 2343;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_NEXT_BUTTON_TEXT',
        p_prompt             => 'Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'NEXT_BUTTON_TEXT',
        p_max_length         => 255,
        p_display_group_name => 'NEXT_BUTTON',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Defines the name of the Next button used when paginating result sets.</p>~' );
    --
    l_property_id := 2344;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_NEXT_BUTTON_ATTR',
        p_prompt             => 'Attributes',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'NEXT_BUTTON_ATTR',
        p_max_length         => 4000,
        p_display_group_name => 'NEXT_BUTTON',
        p_lov_type           => 'DISTINCT',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Defines additional attributes for the Next button.</p>~' );
    --
    l_property_id := 2345;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_PREV_BUTTON_TEXT',
        p_prompt             => 'Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'PREV_BUTTON_TEXT',
        p_max_length         => 255,
        p_display_group_name => 'PREVIOUS_BUTTON',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Defines the name of Previous page button. This button is used to paginate result sets.</p>~' );
    --
    l_property_id := 2346;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_PREV_BUTTON_ATTRIBUTES',
        p_prompt             => 'Attributes',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'PREV_BUTTON_ATTR',
        p_max_length         => 4000,
        p_display_group_name => 'PREVIOUS_BUTTON',
        p_lov_type           => 'DISTINCT',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Defines additional attributes of the Previous button.</p>~' );
    --
    l_property_id := 2347;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_SCROLL_BARS',
        p_prompt             => 'Scroll Bars',
        p_property_type      => 'TEXT',
        p_db_column          => 'SCROLLBARS',
        p_max_length         => 255,
        p_display_group_name => 'WINDOW',
        p_help_text          => q'~<p>Popup lists of values are executed using JavaScript. Use this attribute to control the values of <code>scrollbars=</code>. The default value is 1. Other valid values include 1 and 0.  A value of zero (0) indicates that the popup dialog window is not scrollable.</p>~' );
    --
    l_property_id := 2348;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_RESIZABLE',
        p_prompt             => 'Resizable',
        p_property_type      => 'TEXT',
        p_db_column          => 'RESIZABLE',
        p_max_length         => 255,
        p_display_group_name => 'WINDOW',
        p_help_text          => q'~<p>Popup lists of values are executed using JavaScript. Use this attribute to control the value of <code>resizable=</code>.  The default value is 1. Other valid values include 1 and 0.  A value of zero indicates that the popup dialog window is not resizable.</p>~' );
    --
    l_property_id := 2349;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_WIDTH',
        p_prompt             => 'Width',
        p_property_type      => 'TEXT',
        p_db_column          => 'WIDTH',
        p_max_length         => 255,
        p_display_group_name => 'WINDOW',
        p_help_text          => q'~<p>Popup lists of values are executed using JavaScript. Use this attribute to control the values of <code>width=</code>. The default value is 450.</p>~' );
    --
    l_property_id := 2350;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_HEIGHT',
        p_prompt             => 'Height',
        p_property_type      => 'TEXT',
        p_db_column          => 'HEIGHT',
        p_max_length         => 255,
        p_display_group_name => 'WINDOW',
        p_help_text          => q'~<p>Popup lists of values are executed using JavaScript. Use this attribute to control the values of <code>height=</code>. The default is 400.</p>~' );
    --
    l_property_id := 2351;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_PAGINATION_TEXT',
        p_prompt             => 'Text',
        p_property_type      => 'HTML',
        p_db_column          => 'RESULT_ROW_X_OF_Y',
        p_max_length         => 255,
        p_display_group_name => 'PAGINATION',
        p_is_translatable    => true,
        p_examples           => q'~<p><pre>#FIRST_ROW# - #LAST_ROW#</pre></p>~',
        p_help_text          => q'~<p>Defines how row count results display. Use the substitution strings #FIRST_ROW# and #LAST_ROW#.</p>~' );
    --
    l_property_id := 2352;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_PAGINATION_SIZE',
        p_prompt             => 'Rows per Page',
        p_property_type      => 'INTEGER',
        p_db_column          => 'RESULT_ROWS_PER_PG',
        p_display_group_name => 'PAGINATION',
        p_help_text          => q'~<p>Defines the number of rows per page.</p>~' );
    --
    l_property_id := 2353;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_BEFORE_RESULT_SET',
        p_prompt             => 'Before',
        p_property_type      => 'HTML',
        p_db_column          => 'BEFORE_RESULT_SET',
        p_max_length         => 4000,
        p_display_group_name => 'RESULT_SET',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Display this text before displaying the result set. The result set is the result of the list of values query.</p>~' );
    --
    l_property_id := 2354;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_AFTER_RESULT_SET',
        p_prompt             => 'After',
        p_property_type      => 'HTML',
        p_db_column          => 'AFTER_RESULT_SET',
        p_max_length         => 4000,
        p_display_group_name => 'RESULT_SET',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Display this text after displaying the result set. The result set is the result of the list of values query.</p>~' );
    --
    l_property_id := 2355;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_PAGE_HTML_HEAD',
        p_prompt             => 'Head',
        p_property_type      => 'HTML',
        p_db_column          => 'PAGE_HTML_HEAD',
        p_max_length         => 4000,
        p_display_group_name => 'PAGE',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Defines text to be included in the popup LOV page header. Use this area to include style sheets.  For example:
<pre>&lt;link rel="stylesheet" href="&#35;IMAGE_PREFIX&#35;platform2.css" type="text/css"&gt;
#THEME_CSS#
</pre>
</p>
<p>The following substitution strings are supported:
<ul>
<li>#THEME_CSS#</li>
</ul>
</p>~' );
    --
    l_property_id := 2356;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_PAGE_BODY_ATTRIBUTES',
        p_prompt             => 'Body Attributes',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'PAGE_BODY_ATTR',
        p_max_length         => 255,
        p_display_group_name => 'PAGE',
        p_is_translatable    => true,
        p_examples           => q'~<p><pre>bgcolor="white" OnLoad="first_field()"</pre></p>~',
        p_help_text          => q'~<p>Defines text that is added into the popup list of values HTML BODY.  Note the page includes a JavaScript called <code>first_field</code>.</p>~' );
    --
    l_property_id := 2357;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_PAGE_HEADING_TEXT',
        p_prompt             => 'Heading',
        p_property_type      => 'HTML',
        p_db_column          => 'PAGE_HEADING_TEXT',
        p_max_length         => 4000,
        p_display_group_name => 'PAGE',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Defines text to display after opening the form, but before displaying any text. This text comes before the before field text.</p>~' );
    --
    l_property_id := 2358;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_LOV_PAGE_FOOTER_TEXT',
        p_prompt             => 'Footer',
        p_property_type      => 'HTML',
        p_db_column          => 'PAGE_FOOTER_TEXT',
        p_max_length         => 4000,
        p_display_group_name => 'PAGE',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Defines text to display after displaying the popup page including the search list results.</p>~' );
    --
    l_property_id := 2359;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_SHOW_PROCESSING',
        p_prompt             => 'Show Processing',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_PROCESSING',
        p_display_group_name => 'BEHAVIOR',
        p_help_text          => q'~Specify whether the current page is grayed-out and a 'processing' style animation is displayed during page submission. This can be useful to prevent end user action during long running operations, such as the end user attempting to re-click on the search button when the report is slow to refresh.~' );
    --
    l_property_id := 2360;
    store_multiple_value_type_prop (
        p_property_id        => l_property_id,
        p_name               => 'MULTI_VALUE_TYPE_ALWAYS',
        p_help_text          => q'~<p>Determines how multiple values are encoded.</p>~' );
    --
    l_property_id := 2361;
    store_multiple_value_sep_prop (
        p_property_id        => l_property_id,
        p_name               => 'MULTI_VALUE_SEPARATOR_OPTIONAL' );
    --
    l_property_id := 2362;
    store_multiple_value_sep_prop (
        p_property_id        => l_property_id,
        p_name               => 'MULTI_VALUE_SEPARATOR_ALWAYS' );
    --
    l_property_id := 2363;
    store_multiple_value_type_prop (
        p_property_id        => l_property_id,
        p_name               => 'MULTI_VALUE_TYPE_OPTIONAL',
        p_help_text          => q'~<p>Determines whether the Source Column contains multiple values, and how these are encoded.</p>~' );
    --
    l_property_id :=  2364;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INITIATOR_CAN_COMPLETE',
        p_prompt             => 'Initiator Can Complete',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'INITIATOR_CAN_COMPLETE',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~ Specify if the initiator can complete task.~' );
    --
    l_property_id := 2365;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'AUTO_DISMISS_SUCCESS_MSG',
        p_prompt                => 'Auto-Dismiss Success Messages',
        p_property_type         => 'YES NO',
        p_db_column             => 'AUTO_DISMISS_SUCCESS_MSG',
        p_display_group_name    => 'ATTRIBUTES',
        p_help_text             => q'~When set to <strong>On</strong>, all success messages in this application will be dismissed automatically after 5 seconds unless a user interacts with the message.~');
    --
    l_property_id := 2366;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ACCESSIBLE_READ_ONLY_ITEMS',
        p_prompt             => 'Accessible Read-Only Items',
        p_property_type      => 'YES NO',
        p_db_column          => 'ACCESSIBLE_READ_ONLY',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Determines whether &PRODUCT_NAME. renders the legacy SPAN-based elements for an item's read-only mode, or the more accessible readonly input or textarea elements. The more accessible input and textarea elements will be focusable with the keyboard, and easier to perceive for screen reader users.~' );
    --
    l_property_id := 2367;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REPORT_LAYOUT_DATA_LOOP_NAME',
        p_prompt             => 'Data Loop Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'DATA_LOOP_NAME',
        p_display_length     => 96,
        p_max_length         => 32000,
        p_display_group_name => 'TEMPLATES',
        p_help_text          => q'~Specify a name for a data loop if the report layout will be used by report region for printing. The data loop name is used as name for the rows array of the JSON data.~' );
    --
    l_property_id := 2368;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OUTPUT_FILE_NAME',
        p_prompt             => 'File Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'OUTPUT_FILE_NAME',
        p_display_length     => 96,
        p_max_length         => 4000,
        p_display_group_name => 'OUTPUT',
        p_help_text          => q'~Specify a name for a data loop if the report layout will be used by report region for printing. The data loop name is used as name for the rows array of the JSON data.~' );
    --
    -- *** Free
    --
    l_property_id := 2380;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REMOTE_IS_COMMON',
        p_prompt             => 'Is Common',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_COMMON',
        p_display_group_name => 'REMOTE_REST',
        p_help_text          => q'~Determines whether this column is a common column of the REST Data Source. Create Page wizards will only consider common columns when creating a new component. Page Designer will always work with all visible columns.~' );
    --
    l_property_id := 2381;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'VALUE_PARENT_COLUMN',
        p_prompt                   => 'Column',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'VALUE',
        p_column_data_types        => 'VARCHAR2:NUMBER:DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_ig_column,
        p_lov_component_type_scope => 'PAGE',
        p_display_group_name       => 'VALUE',
        p_help_text                => q'~<p>Select a <em>primary key column</em> from the master interactive grid region; the value of that column will be used as the source for this parameter value.</p>~' );
    --
    l_property_id := 2382;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'WEB_SRC_HAS_ARRAY_COLUMNS',
        p_prompt                   => 'REST Source Has Nested Rows',
        p_property_type            => 'HIDDEN',
        p_db_column                => 'WEB_SRC_HAS_ARRAY_COLUMNS',
        p_display_group_name       => 'DATA_PROFILE',
        p_is_query_only            => true );
    --
    l_property_id := 2390;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_PAGE_PATTERN',
        p_prompt             => 'Page Pattern',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_PAGE_PATTERN',
        p_display_group_name => 'PAGE_PATTERN',
        p_validation_plsql_ret_error => q'~
begin
    if p_value = 'N' and wwv_flow_component_group_dev.is_part_of_comp_grp (
        p_component_id   => p_page_id,
        p_component_type => wwv_flow_shared_component_api.c_page,
        p_app_id         => p_application_id )
    then
        return wwv_flow_lang.message( 'PD.ERROR.PAGE_IS_PART_OF_COMPONENT_GROUP', p_value );
    end if;
    return null;
end;~',
        p_help_text          => q'~Specify if the page is to be used as a pattern. Page patterns are shown in the create page wizard allowing you to easily copy a pattern when creating a page. Page patterns can be run from the application builder but are not runnable by end users. ~' );
    --
    l_property_id := 2391;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'BUILDER_ICON_CSS_CLASS',
        p_prompt                => 'Builder Icon Class',
        p_property_type         => 'TEXT',
        p_db_column             => 'BUILDER_ICON_CSS_CLASS',
        p_display_length        => 70,
        p_max_length            => 255,
        p_restricted_characters => 'SAFE_COMPONENT_NAME',
        p_examples              => q'~~',
        p_display_group_name    => 'PAGE_PATTERN',
        p_lov_type              => 'STATIC',
        p_help_text             => q'~<p>Please provide an icon css class to represent your page pattern in the create page wizard. You can choose a pre-existing icon from the list.</p>~',
        p_comment_text          => '' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'generic',
        p_return_value  => 'generic',
        p_is_quick_pick => 'Y');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'user-profile-details',
        p_return_value  => 'user-profile-details',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'about-us',
        p_return_value  => 'about-us',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'card-gallery',
        p_return_value  => 'card-gallery',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'checkout',
        p_return_value  => 'checkout',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'contact-details',
        p_return_value  => 'contact-details',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'dashboard',
        p_return_value  => 'dashboard',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'dashboard-3-col',
        p_return_value  => 'dashboard-3-col',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'dashboard-3x2-grid',
        p_return_value  => 'dashboard-3x2-grid',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'dashboard-feature-2-col',
        p_return_value  => 'dashboard-feature-2-col',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'error',
        p_return_value  => 'error',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'event-calendar',
        p_return_value  => 'event-calendar',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'faq-page',
        p_return_value  => 'faq-page',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'homepage',
        p_return_value  => 'homepage',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'landing-page',
        p_return_value  => 'landing-page',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'post-details',
        p_return_value  => 'post-details',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'privacy-policy-disclaimer',
        p_return_value  => 'privacy-policy-disclaimer',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'product-details',
        p_return_value  => 'product-details',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'search-results',
        p_return_value  => 'search-results',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'shopping-cart',
        p_return_value  => 'shopping-cart',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'sign-in-form',
        p_return_value  => 'sign-in-form',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'sign-up-form',
        p_return_value  => 'sign-up-form',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'testimonials',
        p_return_value  => 'testimonials',
        p_is_quick_pick => 'Y' );

    --
    l_property_id := 2392;
    store_subscription_prop (
        p_property_id                => l_property_id,
        p_name                       => 'PAGE',
        p_lov_component_type_id      => c_comp_type_page,
        p_help_text                  => q'~Use this field to base this page on an existing page in another application in your workspace.~' );
    --
    l_property_id := 2393;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PAGE_ID',
        p_prompt                   => 'Page',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'PAGE_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_page,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the page.~' );
    --
    l_property_id := 2394;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PAGE_VERSION_SCN',
        p_prompt                   => '',
        p_property_type            => 'HIDDEN',
        p_db_column                => 'VERSION_SCN',
        p_display_group_name       => 'SUBSCRIPTION',
        p_is_query_only            => true );
    --
    l_property_id := 2395;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'THEME_VERSION',
        p_prompt             => 'Version',
        p_property_type      => 'TEXT',
        p_db_column          => 'VERSION_IDENTIFIER',
        p_display_length     => 10,
        p_max_length         => 30,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~<p>String to identify the version of the theme.~' );
    --
    l_property_id := 2396;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_PAGE_PATTERNS',
        p_prompt             => '',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'ENABLE_PAGE_PATTERNS',
        p_display_group_name => 'PAGE_PATTERN',
        p_is_query_only      => true );
    --
    l_property_id := 2397;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OTEL_PRODUCT_FAMILY',
        p_prompt             => 'Product Family',
        p_property_type      => 'TEXT',
        p_db_column          => 'OTEL_PRODUCT_FAMILY',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'OPENTELEMETRY',
        p_help_text          => q'~<p>The family of products in which the app described by <code>product.name</code> resides.</p>~' );
    --
    l_property_id := 89890001;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AI_PROVIDER_TYPE',
        p_prompt             => 'Generative AI Service provider',
        p_property_type      => 'SELECT LIST',
        p_lov_type           => 'STATIC',
        p_db_column          => 'AI_PROVIDER_TYPE',
        p_display_group_name => 'GENERATIVE_AI_SERVICE',
        p_help_text          => q'~The provider of the Generative AI Service~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Open AI',
        p_return_value  => 'OPENAI' );

    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cohere',
        p_return_value  => 'COHERE' );

    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'OCI Generative AI',
        p_return_value  => 'OCI_GENAI' );

    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Generic REST',
        p_return_value  => 'REST' );
    --
    l_property_id := 89890002;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AI_IS_BUILDER_SERVICE',
        p_prompt             => 'Default Generative AI Service',
        p_property_type      => 'YES NO',
        p_db_column          => 'AI_IS_BUILDER_SERVICE',
        p_display_group_name => 'GENERATIVE_AI_SERVICE',
        p_help_text          => q'~Indicates whether this is the default Generative AI Service~' );
    --
    l_property_id := 89890003;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AI_MODEL_NAME',
        p_prompt             => 'Generative AI Service model to use',
        p_property_type      => 'TEXT',
        p_db_column          => 'AI_MODEL_NAME',
        p_display_length     => 20,
        p_max_length         => 1000,
        p_display_group_name => 'GENERATIVE_AI_SERVICE',
        p_help_text          => q'~The model to use for the Generative AI Service~' );
    --
    l_property_id := 89890004;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AI_HTTP_HEADERS',
        p_prompt             => 'Generative AI Service additional HTTP Headers',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'AI_HTTP_HEADERS',
        p_max_length         => 4000,
        p_display_group_name => 'GENERATIVE_AI_SERVICE',
        p_help_text          => q'~Additional HTTP headers for the Generative AI Service~' );
    --
    l_property_id := 89890005;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AI_ATTRIBUTES',
        p_prompt             => 'Generative AI Service additional attributes',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'AI_ATTRIBUTES',
        p_max_length         => 4000,
        p_display_group_name => 'GENERATIVE_AI_SERVICE',
        p_help_text          => q'~Additional (JSON) attributes for the Generative AI Service~' );
    --
    l_property_id := 89890006;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AI_ENABLED',
        p_prompt             => 'Enabled',
        p_property_type      => 'YES NO',
        p_db_column          => 'AI_ENABLED',
        p_display_group_name => 'AI',
        p_help_text          => '<p>Enable the AI Assistant for this component.</p>' );
    --
    l_property_id := 89890007;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'AI_CONFIG',
        p_prompt                   => 'Configuration',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'AI_CONFIG_ID',
        p_display_group_name       => 'AI',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_ai_config,
        p_help_text                => q'~Select the AI configuration to use for this component.~' );
    --
    l_property_id := 89890008;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'AI_REMOTE_SERVER',
        p_prompt                => 'Service',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'AI_REMOTE_SERVER_ID',
        p_display_group_name    => 'AI',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_ai_server,
        p_help_text             => '<p>Specify the Generative AI Service to be used by the AI Assistant.</p>');
    --
    l_property_id := 89890009;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AI_SYSTEM_PROMPT',
        p_prompt             => 'System Prompt',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'AI_SYSTEM_PROMPT',
        p_display_group_name => 'AI',
        p_help_text          => q'~<p>Specify the initial instructions or context for the AI service. A well-crafted system prompt guides the AI's behavior and sets the tone for its responses.
To create an effective system prompt, start by clearly defining the role or expertise you want the AI to assume. Next, describe the specific task or type of responses you expect from the AI.</p>
<p>Note: If you're unsure how to create an effective system prompt, consult the documentation of your AI service for detailed guidance. Additionally, you can ask a generative AI system for help in crafting a prompt.
For instance, you might ask <em>"Help me write a system prompt for an AI assistant whose task is to extract relevant tags or keywords from a provided text."</em></p>~',
        p_examples           => q'~<p>You are an expert in marketing. You will be provided with a product description and seed words, and your task is to generate product names.</p>
<p>You are a professional translator. You will be provided with a sentence in English, and your task is to translate it into French.</p>~' );
    --
    l_property_id := 89890010;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AI_WELCOME_MESSAGE',
        p_prompt             => 'Welcome Message',
        p_property_type      => 'HTML',
        p_db_column          => 'AI_WELCOME_MESSAGE',
        p_display_group_name => 'AI',
        p_help_text          => '<p>An optional welcome message shown by the AI Assistant.</p>',
        p_examples           => '<p>How may I help you today?</p>' );
    --
    l_property_id := 89891001;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EMBEDDING_TYPE',
        p_prompt             => 'Vector Provider type',
        p_property_type      => 'SELECT LIST',
        p_lov_type           => 'STATIC',
        p_db_column          => 'EMBEDDING_TYPE',
        p_display_group_name => 'VECTOR_PROVIDER',
        p_help_text          => q'~The type of the Vector Provider~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Database ONNX Model',
        p_return_value  => 'ONNX' );

    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Generative AI Service',
        p_return_value  => 'GENAI_PROVIDER' );

    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom PL/SQL',
        p_return_value  => 'PLSQL' );
    --
    l_property_id := 89891002;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EMB_LOCAL_MODEL_OWNER',
        p_prompt             => 'ONNX Model Owner',
        p_property_type      => 'OWNER',
        p_db_column          => 'EMB_LOCAL_MODEL_OWNER',
        p_display_group_name => 'VECTOR_PROVIDER',
        p_help_text          => q'~Select the owner of the ONNX model which should be used for the vector provider. All schemas assigned to your workspace are listed.~' );
    --
    l_property_id := 89891003;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EMB_LOCAL_MODEL_NAME',
        p_prompt             => 'ONNX Model Name',
        p_property_type      => 'SELECT LIST', -- limited to dba_mining_models view
        p_db_column          => 'EMB_LOCAL_MODEL_NAME',
        p_display_group_name => 'VECTOR_PROVIDER',
        p_help_text          => q'~Select the ONNX model that will be used to get an embedding for a given term.~' );
    --
    l_property_id := 89891004;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EMB_FUNCTION',
        p_prompt             => 'Custom Function Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'EMB_FUNCTION',
        p_display_group_name => 'VECTOR_PROVIDER',
        p_help_text          => q'~<p>Specify the name of a custom PL/SQL function which converts an end user input to an embedding.
The function needs to take the end user input as VARCHAR2 and returns a vector type as a result.</p>~' );
    --
    l_property_id := 88340001;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_SLOT_REGION',
        p_prompt                   => 'Regions',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_SLOT_REGION',
        p_display_group_name       => 'DEFAULT_SLOTS',
        p_lov_type                 => 'SLOTS',
        p_lov_component_type_id    => c_comp_type_plugin_slot,
        p_lov_component_type_scope => 'COMPONENT',
        p_help_text                => q'~Specify the default slot in which regions should be inserted~' );
    --
    l_property_id := 88340002;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_SLOT_ITEM',
        p_prompt                   => 'Items',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_SLOT_ITEM',
        p_display_group_name       => 'DEFAULT_SLOTS',
        p_lov_type                 => 'SLOTS',
        p_lov_component_type_id    => c_comp_type_plugin_slot,
        p_lov_component_type_scope => 'COMPONENT',
        p_help_text                => q'~Specify the default slot in which items should be inserted~' );
    --
    l_property_id := 88340003;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DEFAULT_SLOT_BUTTON',
        p_prompt                   => 'Buttons',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'DEFAULT_SLOT_BUTTON',
        p_display_group_name       => 'DEFAULT_SLOTS',
        p_lov_type                 => 'SLOTS',
        p_lov_component_type_id    => c_comp_type_plugin_slot,
        p_lov_component_type_scope => 'COMPONENT',
        p_help_text                => q'~Specify the default slot in which buttons should be inserted~' );
    --
    l_property_id := 88340004;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REPORT_CONTAINER_TEMPLATE',
        p_prompt             => 'Report Container',
        p_property_type      => 'HTML',
        p_db_column          => 'REPORT_CONTAINER_TEMPLATE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'TEMPLATES',
        p_is_translatable    => true,
        p_help_text          => q'~<p><p>Enter the HTML markup for the report container template. The Static IDs of the Custom Attributes of scope "Report" can be referenced with <code>#STATIC_ID#</code> syntax.
You can quickly synchronize all placeholders as Custom Attributes using the <strong>Synchronize Attributes</strong> button.
</p>
<p>
The following predefined template placeholders are supported:
<dl>
<dt>APEX$DOM_ID</dt>
<dd>Unique DOM ID generated when the template is invoked, useful for referencing other DOM elements in the provided HTML markup.</dd>
<dt>APEX$COMPONENT_CSS_CLASSES</dt>
<dd>CSS classes specified for the region.</dd>
<dt>APEX$REPORT_BODY</dt>
<dd>Output of the Report Body template.</dd>
</dl>
</p>
<p>You can also use slot placeholders to allow this report container to render page components (regions, items, buttons).<br /> Slots can be referenced with <code>#SLOT_STATIC_ID#</code> syntax.<br />
To render a slot conditionally to its usage use the <code>{if SLOT_STATIC_ID/}&lt;div class="inner-div"&gt;#SLOT_STATIC_ID#&lt;/div&gt;{endif/}</code> syntax to render additional markup only if the slot is being used.<br />
Slots in the report container template will only render if the associated region uses <strong>Display As: Multiple (Report)</strong></p>
<p>Supports Template Directives.</p></p>~' );
    --
    l_property_id := 2400;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'COMP_GRP_SUBSCRIBED_FROM',
        p_prompt                   => 'Master',
        p_property_type            => 'SUBSCRIPTION',
        p_db_column                => 'REFERENCE_ID',
        p_display_group_name       => 'SUBSCRIPTION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_component_group,
        p_lov_component_type_scope => 'WORKSPACE',
        p_help_text                => q'~Use this field to base this component group on an existing component group in another application in your workspace.~' );
    --
    l_property_id := 2401;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'APP_ITEM_ID',
        p_prompt                   => 'Application Item',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'APP_ITEM_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_app_item,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the application item.~' );
    --
    l_property_id := 2402;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'APP_PROCESS_ID',
        p_prompt                   => 'Application Process',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'APP_PROCESS_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_app_process,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the application process.~' );
    --
    l_property_id := 2403;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'APP_COMPUTATION_ID',
        p_prompt                   => 'Application Computation',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'APP_COMPUTATION_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_app_computation,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the application computation.~' );
    --
    l_property_id := 2404;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'APP_SETTING_ID',
        p_prompt                   => 'Application Setting',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'APP_SETTING_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_app_setting,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the application setting.~' );
    --
    l_property_id := 2405;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'BUILD_OPTION_ID',
        p_prompt                   => 'Build Option',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'BUILD_OPTION_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_build_option,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the build option.~' );
    --
    l_property_id := 2406;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'LIST_ID',
        p_prompt                   => 'List',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'LIST_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_list,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the list.~' );
    --
    l_property_id := 2407;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'SEARCH_CONFIG_ID',
        p_prompt                   => 'Search Configuration',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'SEARCH_CONFIG_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_search_config,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the search configuration.~' );
    --
    l_property_id := 2408;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'LOAD_TABLE_ID',
        p_prompt                   => 'Data Load Definition',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'LOAD_TABLE_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_data_load_def,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the data load definition.~' );
    --
    l_property_id := 2409;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'WEB_SRC_MODULE_ID',
        p_prompt                   => 'REST Data Source',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'WEB_SRC_MODULE_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_web_src_module,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the REST data source.~' );
    --
    l_property_id := 2410;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'AUTHENTICATION_ID',
        p_prompt                   => 'Authentication Scheme',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'AUTHENTICATION_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_authentication,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the authentication scheme.~' );
    --
    l_property_id := 2411;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'AUTHORIZATION_ID',
        p_prompt                   => 'Authorization Scheme',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'AUTHORIZATION_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_authorization,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the authorization scheme.~' );
    --
    l_property_id := 2412;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'GROUP_ID',
        p_prompt                   => 'Application Access Control Role',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'GROUP_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_acl_role,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the application access control role.~' );
    --
    l_property_id := 2413;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'EMAIL_TEMPLATE_ID',
        p_prompt                   => 'Email Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'EMAIL_TEMPLATE_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_email_template,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the email template.~' );
    --
    l_property_id := 2414;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'LOV_ID',
        p_prompt                   => 'List of Values',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'LOV_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_lov,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the list of values.~' );
    --
    l_property_id := 2415;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PLUGIN_ID',
        p_prompt                   => 'Plug-in',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'PLUGIN_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_plugin,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the plug-in.~' );
    --
    l_property_id := 2416;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PLUGIN_SETTING_ID',
        p_prompt                   => 'Plug-in Settings',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'PLUGIN_SETTING_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_plugin_setting,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the plug-in settings.~' );
    --
    l_property_id := 2417;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'SHORTCUT_ID',
        p_prompt                   => 'Shortcut',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'SHORTCUT_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_shortcut,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the shortcut.~' );
    --
    l_property_id := 2418;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'MAP_BACKGROUND_ID',
        p_prompt                   => 'Map Background',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'MAP_BACKGROUND_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_map_background,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the map background.~' );
    --
    l_property_id := 2419;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'REPORT_LAYOUT_ID',
        p_prompt                   => 'Report Layout',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'REPORT_LAYOUT_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_report_layout,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the report layout.~' );
    --
    l_property_id := 2420;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'MESSAGE_ID',
        p_prompt                   => 'Text Message',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'MESSAGE_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_text_message,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the text message.~' );
    --
    l_property_id := 2421;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HIDDEN_SOURCE_LOCATION',
        p_prompt             => 'Hidden Source Location',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'LOCATION',
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_is_query_only      => true );
    --
    l_property_id := 2422;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LAZY_LOADING_ALWAYS',
        p_prompt             => 'Lazy Loading',
        p_property_type      => 'YES NO',
        p_db_column          => 'LAZY_LOADING',
        p_display_group_name => 'PERFORMANCE',
        p_help_text          => q'~<p>Specify whether to load the region independently of the data for the region.</p>
        <p>When lazy loading is specified, the page is rendered immediately, showing an empty region, until the data is loaded.
        Generally, the page is not displayed until all of the page is loaded and ready to be rendered.
        Therefore, if it takes 5 seconds to load all of the data for a region, without lazy loading, the end user would have to wait 5 seconds before the page started to render.</p>
        <p>Note - Lazy Loading should only be utilized on data sets that take significant time to load, as this adds unnecessary processing overhead on the database for regions that load quickly.</p>~' );
    --
    l_property_id := 2430;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RS_PLSQL_CODE',
        p_prompt             => 'PL/SQL Code',
        p_property_type      => 'PLSQL',
        p_db_column          => 'PLSQL_CODE',
        p_display_length     => 50,
        p_max_length         => 32000,
        p_display_group_name => 'ADVANCED' );
    --
    l_property_id := 2431;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RS_CONFIGURATION_PROCEDURE',
        p_prompt             => 'Configuration Procedure',
        p_property_type      => 'TEXT',
        p_db_column          => 'CONFIGURATION_PROCEDURE',
        p_display_length     => 50,
        p_max_length         => 255,
        p_display_group_name => 'ADVANCED' );
    --
    l_property_id := 53520001;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JSON_COLLECTION_TYPE',
        p_prompt             => 'JSON Source Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DOCUMENT_SOURCE_TYPE',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of the JSON Source.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Table with JSON column',
        p_return_value  => 'JSON_TABLE',
        p_help_text     => q'~JSON is stored in a table column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JSON Collection Table',
        p_return_value  => 'JSON_COLLECTION',
        p_help_text     => q'~JSON is stored in a <em>JSON Collection Table</em>. ~' );

    l_property_id := 53520002;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DOCUMENT_SOURCE_LOCATION',
        p_prompt             => 'Location',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOCATION',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select where the data is sourced from.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Local Database',
        p_return_value  => 'LOCAL',
        p_help_text     => q'~Data is sourced from the local database.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'REST Enabled SQL',
        p_return_value  => 'REMOTE',
        p_help_text     => q'~Data is sourced from a remote database, where the connection is defined using REST Enabled SQL. ~' );
    --
    l_property_id := 53520003;
    store_subscription_prop (
        p_property_id              => l_property_id,
        p_name                     => 'DUALITY_VIEW_SRC',
        p_lov_component_type_id    => c_comp_type_dualityview_src,
        p_help_text                => q'~<p>Use this field to base this duality view source on an existing source in this application or another application in your workspace.</p>~' );
    --
    l_property_id := 53520004;
    store_subscription_prop (
        p_property_id              => l_property_id,
        p_name                     => 'JSON_COLLECTION_SRC',
        p_lov_component_type_id    => c_comp_type_jsondocument_src,
        p_help_text                => q'~<p>Use this field to base this JSON source on an existing JSON source in this application or another application in your workspace.</p>~' );
    --
    l_property_id := 53520005;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DUALITY_VIEW_SRC_ID',
        p_prompt                   => 'Duality View',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'DOCUMENT_SOURCE_ID',
        p_display_group_name       => 'SOURCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_dualityview_src,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the Duality View source.~' );
    --
    l_property_id := 53520006;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'JSON_COLLECTION_SRC_ID',
        p_prompt                   => 'JSON Source',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'DOCUMENT_SOURCE_ID',
        p_display_group_name       => 'SOURCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_jsondocument_src,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the JSON Source.~' );
    --
    l_property_id := 53520007;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'JSON_SOURCE_ID',
        p_prompt                   => 'JSON Source',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'JSON_SOURCE_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_jsondocument_src,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the JSON Source.~' );
    --
    l_property_id := 53520008;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DUALITY_VIEW_ID',
        p_prompt                   => 'Duality View',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'DUALITY_VIEW_ID',
        p_display_group_name       => 'COMPONENT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_dualityview_src,
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Identifies the Duality View source.~' );
    --
    l_property_id := 53520009;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DUALITY_VIEW_ARRAY_COL_ID',
        p_prompt                   => 'Nested Rows',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'ARRAY_COLUMN_ID',
        p_display_group_name       => 'DATA_PROFILE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_dualityvw_arr_col,
        p_help_text                => q'~<p>Select the <strong>Nested Rows</strong> from the Duality View to use for this component. All columns of the selected nested row, and all columns of all parents will become available to this component, as a flat table structure.</p><p>Note: &PRODUCT_NAME. uses the <code>JSON_TABLE</code> SQL function with <code>NESTED PATH</code> clauses to convert nested JSON to a flat result.</p>~' );
    --
    l_property_id := 53520010;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'JSON_COLLECTION_ARRAY_COL_ID',
        p_prompt                   => 'Nested Rows',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'ARRAY_COLUMN_ID',
        p_display_group_name       => 'DATA_PROFILE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_jsoncoll_arr_col,
        p_help_text                => q'~<p>Select the <strong>Nested Rows</strong> from the JSON Source to use for this component. All columns of the selected nested row, and all columns of all parents will become available to this component, as a flat table structure.</p><p>Note: &PRODUCT_NAME. uses the <code>JSON_TABLE</code> SQL function with <code>NESTED PATH</code> clauses to convert nested JSON to a flat result.</p>~' );
    --
    l_property_id := 53520011;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DOC_SRC_HAS_ARRAY_COLUMNS',
        p_prompt                   => 'Source Has Nested Rows',
        p_property_type            => 'HIDDEN',
        p_db_column                => 'DOC_SRC_HAS_ARRAY_COLUMNS',
        p_display_group_name       => 'DATA_PROFILE',
        p_is_query_only            => true );
    --
    store_post_processing_props(
        p_prefix        => 'DUALITYVIEW_',
        p_ids           => wwv_flow_t_number( 53520012,        -- SOURCE_POST_PROCESSING
                                              53520013,        -- POST_PROC_WHERE
                                              53520014,        -- POST_PROC_ORDER_BY
                                              53520015,        -- POST_PROC_SQL_QUERY
                                              53520016,        -- POST_PROC_ORDER_BY_TYPE
                                              53520017,        -- POST_PROC_ORDER_BY_ITEM
                                              53520018,        -- POST_PROC_ORDER_BY_ITEM2
                                              53520100 ) );    -- store_func_body_properties

    store_post_processing_props(
        p_prefix        => 'JSONCOLLECTION_',
        p_ids           => wwv_flow_t_number( 53520019,        -- SOURCE_POST_PROCESSING
                                              53520020,        -- POST_PROC_WHERE
                                              53520021,        -- POST_PROC_ORDER_BY
                                              53520022,        -- POST_PROC_SQL_QUERY
                                              53520023,        -- POST_PROC_ORDER_BY_TYPE
                                              53520024,        -- POST_PROC_ORDER_BY_ITEM
                                              53520025,        -- POST_PROC_ORDER_BY_ITEM2
                                              53520120 ) );    -- store_func_body_properties
    --
    l_property_id := 53520026;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_PROFILE_TABLE_COLUMN',
        p_prompt             => 'Table Column',
        p_property_type      => 'TEXT',
        p_db_column          => 'SELECTOR',
        p_display_group_name => 'PARSING',
        p_help_text          => q'~The name of the table column mapped to this data profile coloumn~' );
    --
    l_property_id := 67740001;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SUPPORTED_REGION_TYPES',
        p_prompt             => 'Region Types',
        p_property_type      => 'JSON',
        p_db_column          => 'SUPPORTED_REGION_TYPES',
        p_display_group_name => 'COMPONENT_TYPE_SUPPORT' ,
        p_help_text          => q'~List of region types that are allowed in a given slot~');
    --
    l_property_id := 67740002;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SUPPORTED_ITEM_TYPES',
        p_prompt             => 'Item Types',
        p_property_type      => 'JSON',
        p_db_column          => 'SUPPORTED_ITEM_TYPES',
        p_display_group_name => 'COMPONENT_TYPE_SUPPORT',
        p_help_text          => q'~List of item types that are allowed in a given slot.~' );
    --
    l_property_id := 11140001;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AI_TEMPERATURE',
        p_prompt             => 'Temperature',
        p_property_type      => 'NUMBER',
        p_db_column          => 'TEMPERATURE',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Specify the creativity and randomness of the responses. A lower temperature makes the output more focused, deterministic, and conservative, favoring common or predictable answers. A higher temperature increases the models creativity, making it more likely to produce varied and less conventional responses. Adjust the temperature based on the desired balance between precision and creativity in the responses.</p>
<p>Note: Temperature may vary depending on the AI service. It's recommended that the temperature values of the AI service be evaluated when choosing the appropriate value.</p>~' );
    --
    l_property_id := 11140002;
    store_subscription_prop (
        p_property_id              => l_property_id,
        p_name                     => 'AI_CONFIG',
        p_lov_component_type_id    => c_comp_type_ai_config,
        p_help_text                => q'~<p>Use this field to base this AI configuration on an existing AI configuration in this application or another application in your workspace.</p>~' );
    --
    l_property_id := 11140003;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'RAG_TYPE',
        p_prompt                   => 'Type',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'RAG_TYPE',
        p_display_group_name       => 'SOURCE',
        p_lov_type                 => 'STATIC',
        p_help_text                => q'~Select the type of source from which the RAG should retrieve its data.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'DATA_SOURCE',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Data is sourced from a SQL Query from the local database.~'  );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Body',
        p_return_value  => 'FUNCTION_BODY',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Data is sourced from a Function Body that returns a CLOB.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static',
        p_return_value  => 'STATIC',
        p_help_text     => q'~User-defined static text, suitable for entering hard-coded text information that is not sourced from your database.~'  );
    --
    l_property_id := 11140004;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AI_MAX_TOKENS',
        p_prompt             => 'Maximum Tokens',
        p_property_type      => 'INTEGER',
        p_db_column          => 'MAX_TOKENS',
        p_min_value          => '1',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Specify the maximum number of tokens that this RAG source can include. If a row exceeds the remaining token limit, it will be entirely skipped to ensure the response stays within the specified token count.</p>
<p>Note: The token calculation is only an approximate estimate of the exact calculation used by the AI service.</p>~' );
    --
    l_property_id := 11140005;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_RAG_STATIC',
        p_prompt             => 'Text',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'SOURCE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'SOURCE',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter the text to be sent as context to the AI service.</p>~' );
    --
    --****************
    -- END PROPERTIES
    --****************
    --
    -- Note: The following statements should be at the end of the store_property calls
    --
    store_cond_type_properties (
        p_start_property_id  => 5000,
        p_name_prefix        => 'CACHE',
        p_help_text_type     => q'~Specify a condition. If the condition returns <strong>TRUE</strong>, the page displays from cache. If the condition returns <strong>FALSE</strong>, the page renders dynamically and is not retrieved from cache.~',
        p_db_column_type     => 'CACHE_WHEN_CONDITION_TYPE',
        p_db_column_expr1    => 'CACHE_WHEN_CONDITION_E1',
        p_db_column_expr2    => 'CACHE_WHEN_CONDITION_E2',
        p_display_group_name => 'SERVER_CACHE' );
    --
    store_cond_type_properties (
        p_start_property_id  => 5050,
        p_name_prefix        => 'READ_ONLY',
        p_help_text_type     => q'~<p>Select a condition type that must be met in order for this page to render page items as read only. Not selecting a condition causes the page items to render normally.
The read only condition is evaluated after executing the processes with a processing point of <em>Before Header</em>.</p>
<p>Note: If you want some page items (for example a search field) or all page items of a specific region to always render as enterable page items independent of how this condition evaluates, then set the read only condition of those regions/page items to <strong>Never</strong> to overwrite the parent setting.</p>~',
        p_db_column_type     => 'READ_ONLY_WHEN_TYPE',
        p_db_column_expr1    => 'READ_ONLY_WHEN',
        p_db_column_expr2    => 'READ_ONLY_WHEN2',
        p_display_group_name => 'READ_ONLY' );
    --
    store_cond_type_properties (
        p_start_property_id  => 5100,
        p_name_prefix        => null,
        p_help_text_type     => q'~Select a condition type that must be met in order for this component to be rendered or processed.~',
        p_db_column_type     => 'CONDITION_TYPE',
        p_db_column_expr1    => 'CONDITION_EXPRESSION1',
        p_db_column_expr2    => 'CONDITION_EXPRESSION2',
        p_display_group_name => 'SERVER_SIDE_CONDITION' );
    --
    store_cond_type_properties (
        p_start_property_id  => 5150,
        p_name_prefix        => 'LINK',
        p_prompt_type        => 'Condition Type',
        p_help_text_type     => q'~Select a condition type that must be met in order for this link to be rendered.~',
        p_db_column_type     => 'DETAIL_LINK_CONDITION_TYPE',
        p_db_column_expr1    => 'DETAIL_LINK_COND',
        p_db_column_expr2    => 'DETAIL_LINK_COND2',
        p_display_group_name => 'LINK' );
    --
    store_expression_properties (
        p_start_property_id  => 5200,
        p_name_prefix        => 'COMPUTATION_',
        p_return_type        => 'VARCHAR2',
        p_db_column_lang     => 'COMPUTATION_LANGUAGE',
        p_db_column_expr     => 'COMPUTATION',
        p_display_group_name => 'COMPUTATION',
        p_help_text          => q'~Enter a %language% expression that produces a value used to populate the computation item.~' );
    --
    store_func_body_properties (
        p_start_property_id    => 5220,
        p_name_prefix          => 'COMPUTATION_',
        p_return_type          => 'VARCHAR2',
        p_db_column_lang       => 'COMPUTATION_LANGUAGE',
        p_db_column_func_body  => 'COMPUTATION',
        p_display_group_name   => 'COMPUTATION',
        p_help_text            => q'~Enter a %language% function body that returns a value used to populate the computation item.~' );
    --
    store_expression_properties (
        p_start_property_id  => 5240,
        p_name_prefix        => 'SOURCE_',
        p_return_type        => 'VARCHAR2',
        p_db_column_lang     => 'SOURCE_LANGUAGE',
        p_db_column_expr     => 'SOURCE',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Enter a %language% expression that produces a value used as the source for this item value.~' );
    --
    store_func_body_properties (
        p_start_property_id    => 5260,
        p_name_prefix          => 'SOURCE_',
        p_return_type          => 'VARCHAR2',
        p_db_column_lang       => 'SOURCE_LANGUAGE',
        p_db_column_func_body  => 'SOURCE',
        p_display_group_name   => 'SOURCE',
        p_help_text            => q'~Enter a %language% function body that returns a value used as the source for this item value.~' );
    --
    store_expression_properties (
        p_start_property_id  => 5280,
        p_name_prefix        => 'DEFAULT_VALUE_',
        p_return_type        => 'VARCHAR2',
        p_db_column_lang     => 'ITEM_DEFAULT_LANGUAGE',
        p_db_column_expr     => 'ITEM_DEFAULT',
        p_display_group_name => 'DEFAULT',
        p_help_text          => q'~Enter the %language% expression that produces the value for this item.~' );
    --
    store_func_body_properties (
        p_start_property_id    => 5300,
        p_name_prefix          => 'DEFAULT_VALUE_',
        p_return_type          => 'VARCHAR2',
        p_db_column_lang       => 'ITEM_DEFAULT_LANGUAGE',
        p_db_column_func_body  => 'ITEM_DEFAULT',
        p_display_group_name   => 'DEFAULT',
        p_help_text            => q'~Enter the %language% function body which returns the value for this item.~' );
    --
    store_func_body_properties (
        p_start_property_id    => 5320,
        p_name_prefix          => 'LOV_',
        p_return_type          => 'SQL',
        p_prompt               => '%language% Function Body returning SQL Query',
        p_db_column_lang       => 'LOV_LANGUAGE',
        p_db_column_func_body  => 'LOV',
        p_display_group_name   => 'LIST_OF_VALUES',
        p_sql_min_column_count => 2,
        p_sql_max_column_count => 2,
        p_help_text            => q'~<p>Enter a %language% function body that returns an SQL Query to populate this list of values. Generally list of value queries are of the form:</p>
<pre>
select [displayValue],
       [returnValue]
  from ...
 where ...
 order by ...
</pre>
<p>Each column selected must have a unique name or alias. Oracle recommends using an alias on any column that includes an SQL expression.</p>~',
        p_examples_plsql       => q'~<dl>
<dt>Display department name, set department number</dt>
<dd><pre>
begin
    return 'select dname as d, deptno as r from dept order by 1';
end;
</pre></dd>
</dl>~',
        p_examples_js          => q'~<dl>
<dt>Display department name, set department number</dt>
<dd><pre>
return "select dname as d, deptno as r from dept order by 1";
</pre></dd>
</dl>~' );
    --
    store_func_body_properties (
        p_start_property_id    => 5340,
        p_name_prefix          => 'IG_COLUMN_FILTER_',
        p_return_type          => 'SQL',
        p_prompt               => '%language% Function Body returning SQL Query',
        p_db_column_lang       => 'FILTER_LOV_LANGUAGE',
        p_db_column_func_body  => 'FILTER_LOV_QUERY',
        p_display_group_name   => 'COLUMN_FILTER',
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_help_text            => q'~<p>Enter a %language% function body that returns an SQL Query to populate this list of values.</p>
<p>The SQL Query only needs to return one column. If the query returns multiple columns, only the first column is used in the filter search.</p>~',
        p_examples_plsql       => q'~<dl>
<dt>To return the department name:</dt>
<dd><pre>
begin
    return 'select dname as d from dept order by 1';
end;
</pre></dd>
</dl>~',
        p_examples_js          => q'~<dl>
<dt>Display department name, set department number</dt>
<dd><pre>
return "select dname as d from dept order by 1";
</pre></dd>
</dl>~' );
    --
    store_func_body_properties (
        p_start_property_id   => 5360,
        p_name_prefix         => 'SOURCE_QUERY_',
        p_return_type         => 'SQL',
        p_db_column_lang      => 'FUNCTION_BODY_LANGUAGE',
        p_db_column_func_body => 'DATA_SOURCE',
        p_display_group_name  => 'SOURCE',
        p_help_text           => q'~Enter a %language% function body that returns an SQL Query for this component.~',
        p_examples_plsql      => q'~
<dl><dt>Select the EMPNO, ENAME and SAL columns and filter out all rows with a SAL less then 3000.</dt>
<dd><pre>
begin
    return 'select EMPNO, ENAME, SAL from EMP where SAL < 3000';
end;
</pre></dd>
</dl>~',
        p_examples_js         => q'~
<dl><dt>Select the EMPNO, ENAME and SAL columns and filter out all rows with a SAL less then 3000.</dt>
<dd><pre>
return "select EMPNO, ENAME, SAL from EMP where SAL < 3000";
</pre></dd>
</dl>~' );
    --
    store_val_type_properties (
        p_start_property_id => 5400,
        p_name_prefix       => null );
    --
    store_val_type_properties (
        p_start_property_id => 5500,
        p_name_prefix       => 'REGION' );
    --
    store_expression_properties (
        p_start_property_id  => 5600,
        p_name_prefix        => 'VALUE_',
        p_return_type        => 'VARCHAR2',
        p_db_column_lang     => 'VALUE_LANGUAGE',
        p_db_column_expr     => 'VALUE',
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the %language% expression that produces a value used as the source for this parameter value.~' );
    --
    store_func_body_properties (
        p_start_property_id    => 5620,
        p_name_prefix          => 'VALUE_',
        p_return_type          => 'VARCHAR2',
        p_db_column_lang       => 'VALUE_LANGUAGE',
        p_db_column_func_body  => 'VALUE',
        p_display_group_name   => 'VALUE',
        p_help_text            => q'~Enter the %language% function body which returns a value used as the source for this parameter value.~' );
    --
    store_func_body_properties (
        p_start_property_id    => 5640,
        p_name_prefix          => 'BRANCH_',
        p_return_type          => 'VARCHAR2',
        p_db_column_lang       => 'BRANCH_LANGUAGE',
        p_db_column_func_body  => 'BRANCH_FUNCTION_BODY',
        p_display_group_name   => 'BEHAVIOR',
        p_help_text            => q'~Enter the %language% function body that returns a page number or URL to redirect to.~' );
    --
    store_snippet_properties (
        p_start_property_id    => 5660,
        p_name_prefix          => 'SOURCE_',
        p_db_column_lang       => 'PROCESS_CLOB_LANGUAGE',
        p_db_column_snippet    => 'PROCESS_SQL_CLOB',
        p_display_group_name   => 'SOURCE',
        p_max_length           => 32767,
        p_help_text            => q'~Enter the %language% code to be executed.~' );
    --
    store_func_body_properties (
        p_start_property_id   => 5680,
        p_name_prefix         => 'AUTOM_',
        p_return_type         => 'BOOLEAN',
        p_db_column_lang      => 'FUNCTION_BODY_LANGUAGE',
        p_db_column_func_body => 'QUERY_SOURCE',
        p_display_group_name  => 'SOURCE',
        p_help_text           => q'~Enter a %language% function body returning boolean which executes when the automation runs.
If the function body returns <strong>true</strong>, the actions will be executed.~' );
    --
    store_func_body_properties (
        p_start_property_id    => 5700,
        p_name_prefix          => 'SHORTCUT_',
        p_return_type          => 'VARCHAR2',
        p_db_column_lang       => 'SHORTCUT_LANGUAGE',
        p_db_column_func_body  => 'SHORTCUT',
        p_display_group_name   => 'SOURCE',
        p_help_text            => q'~Enter a %language% function body that returns a value used as the source for this shortcut.~' );
    --
    store_func_body_properties (
        p_start_property_id    => 5720,
        p_name_prefix          => 'LIST_',
        p_return_type          => 'SQL',
        p_prompt               => '%language% Function Body returning SQL Query',
        p_db_column_lang       => 'LIST_LANGUAGE',
        p_db_column_func_body  => 'LIST_QUERY',
        p_display_group_name   => 'SOURCE',
        p_max_length           => 4000,
        p_sql_min_column_count => 3,
        p_sql_max_column_count => 17,
        p_help_text            => q'~<p>Enter a %language% function body that returns an SQL Query to populate this list. Generally list queries are of the form:</p>
<pre>
select level,
       labelValue            as label,
       [targetValue]         as target,
       [is_current]          as is_current_list_entry,
       [imageValue]          as image,
       [imageAttributeValue] as image_attribute,
       [imageAltValue]       as image_alt_attribute,
       [attribute1]          as attribute1,
       [attribute2]          as attribute2,
       [attribute3]          as attribute3,
       [attribute4]          as attribute4,
       [attribute5]          as attribute5,
       [attribute6]          as attribute6,
       [attribute7]          as attribute7,
       [attribute8]          as attribute8,
       [attribute9]          as attribute9,
       [attribute10]         as attribute10
  from ...
 where ...
 order by ...
</pre>
<p>Each column selected must have a unique name or alias. Oracle recommends using an alias on any column that includes an SQL expression.</p>~',
        p_examples_plsql       => q'~<dl>
<dt>Display department names</dt>
<dd><pre>
begin
    return 'select null as level, dname as label from dept order by dname';
end;
</pre></dd>
</dl>~',
        p_examples_js          => q'~<dl>
<dt>Display department name</dt>
<dd><pre>
return "select null as level, dname as label from dept order by dname";
</pre></dd>
</dl>~' );
    --
    store_expression_properties (
        p_start_property_id  => 5740,
        p_name_prefix        => 'IS_CURRENT_',
        p_return_type        => 'BOOLEAN',
        p_db_column_lang     => 'LIST_ITEM_CURRENT_LANGUAGE',
        p_db_column_expr     => 'LIST_ITEM_CURRENT_FOR_PAGES',
        p_display_group_name => 'IS_CURRENT',
        p_help_text          => q'~Enter the %language% expression for this condition.~' );
    --
    /* phase 2
    store_func_body_properties (
        p_start_property_id    => 5760,
        p_name_prefix          => 'SUGGESTIONS_',
        p_return_type          => 'ARRAY',
        p_db_column_lang       => 'SUGGESTIONS_LANGUAGE',
        p_db_column_func_body  => 'SUGGESTIONS_SOURCE',
        p_display_group_name   => 'SUGGESTIONS',
        p_help_text            => q'~Enter a %language% function body that returns an array used to populate the suggestions.~' );
    */
    --
    store_cond_type_properties (
        p_start_property_id  => 5800,
        p_name_prefix        => 'ACTION',
        p_help_text_type     => q'~Select a condition type that must be met in order for this action to be executed.~',
        p_db_column_type     => 'CONDITION_TYPE',
        p_db_column_expr1    => 'CONDITION_EXPR1',
        p_db_column_expr2    => 'CONDITION_EXPR2',
        p_display_group_name => 'SERVER_SIDE_CONDITION' );
    --
    store_cond_type_properties (
        p_start_property_id  => 5850,
        p_name_prefix        => 'AUTOM',
        p_help_text_type     => q'~Select a condition type that must be met in order for this automation to be executed.~',
        p_db_column_type     => 'CONDITION_TYPE',
        p_db_column_expr1    => 'CONDITION_EXPR1',
        p_db_column_expr2    => 'CONDITION_EXPR2',
        p_display_group_name => 'SERVER_SIDE_CONDITION' );
    --
    store_cond_type_properties (
        p_start_property_id  => 5900,
        p_name_prefix        => 'SO_VAL',
        p_help_text_type     => q'~Select a condition type from the list that must be met during installation before installation scripts are run.~',
        p_db_column_type     => 'CHECK_TYPE',
        p_db_column_expr1    => 'CHECK_CONDITION',
        p_db_column_expr2    => 'CHECK_CONDITION2',
        p_display_group_name => 'VALIDATION' );
    --
    store_cond_type_properties (
        p_start_property_id  => 5950,
        p_name_prefix        => 'SO_COND',
        p_help_text_type     => q'~Select a condition type from the list that conditionally controls whether this validation is performed.~',
        p_db_column_type     => 'CONDITION_TYPE',
        p_db_column_expr1    => 'CONDITION',
        p_db_column_expr2    => 'CONDITION2',
        p_display_group_name => 'SERVER_SIDE_CONDITION' );
    --
    store_func_body_properties (
        p_start_property_id    => 6000,
        p_name_prefix          => 'SOURCE_',
        p_prompt               => '%language% Function Body returning a CLOB',
        p_return_type          => 'CLOB',
        p_db_column_lang       => 'FUNCTION_BODY_LANGUAGE',
        p_db_column_func_body  => 'PLUG_SOURCE',
        p_display_group_name   => 'SOURCE',
        p_help_text            => q'~<p>Enter a %language% function body that returns the HTML content of this region as a CLOB.</p>
<p>Note that it is the developer's responsibility to ensure the generated HTML is accessible and secure. Untrusted content should be escaped appropriately to avoid Cross-site Scripting (XSS).</p>~',
        p_examples_plsql       => q'~
<dl><dt>Print the list of all employee names and their jobs:</dt>
<dd><pre>
declare
    l_result clob := '&lt;h4>List of employees:&lt;/h4&gt;';
begin
    l_result := l_result || '&lt;ul&gt;';
    for l_emp in ( select ename,
                          job
                     from emp
                    order by ename )
    loop
        l_result := l_result ||
                    '&lt;li&gt;&lt;strong&gt;' || apex_escape.html( l_emp.ename ) || '&lt;/strong&gt;' ||
                    ' (' || apex_escape.html( l_emp.job ) || ')&lt;/li&gt;';
    end loop;
    l_result := l_result || '&lt;/ul&gt;';

    return l_result;
end;
</pre></dd>
</dl>~',
        p_examples_js          => q'~
<dl><dt>Print the list of all employee names and their jobs:</dt>
<dd><pre>
let result = "&lt;h4&gt;List of employees:&lt;/h4&gt;";
let rows = apex.conn.execute( `
    select ename,
           job
      from emp
     order by ename
` ).rows;

result += "&lt;ul&gt;";
for ( let row of rows ) {
    result += `&lt;li&gt;&lt;strong&gt;${row.ENAME}&lt;/strong&gt; (${row.JOB})&lt;/li&gt;`;
}
result += "&lt;/ul&gt;";

return result;
</pre></dd>
</dl>~' );

    --
    store_expression_properties (
        p_start_property_id  => 6020,
        p_name_prefix        => 'DUE_ON_',
        p_return_type        => 'CUSTOM',
        p_db_column_lang     => 'DUE_ON_LANGUAGE',
        p_db_column_expr     => 'DUE_ON_VALUE',
        p_display_group_name => 'DEADLINE',
        p_help_text          => q'~Enter a %language% expression that produces a value used to populate the due on item.~' );
    --
    store_func_body_properties (
        p_start_property_id    => 6040,
        p_name_prefix          => 'DUE_ON_',
        p_return_type          => 'CUSTOM',
        p_db_column_lang       => 'DUE_ON_LANGUAGE',
        p_db_column_func_body  => 'DUE_ON_VALUE',
        p_display_group_name   => 'DEADLINE',
        p_help_text            => q'~Enter a %language% function body that returns a value used to populate the due on item.~' );
    --
    store_expression_properties (
        p_start_property_id  => 6060,
        p_name_prefix        => 'VALUE_',
        p_return_type        => 'CUSTOM',
        p_db_column_lang     => 'VALUE_LANGUAGE',
        p_db_column_expr     => 'VALUE',
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the %language% expression that produces a value used as the source for this parameter value.~' );
    --
    store_func_body_properties (
        p_start_property_id    => 6080,
        p_name_prefix          => 'VALUE_',
        p_return_type          => 'CUSTOM',
        p_db_column_lang       => 'VALUE_LANGUAGE',
        p_db_column_func_body  => 'VALUE',
        p_display_group_name   => 'VALUE',
        p_help_text            => q'~Enter the %language% function body which returns a value used as the source for this parameter value.~' );
    --
    store_cond_type_properties (
        p_start_property_id  => 7000,
        p_name_prefix        => 'WF',
        p_help_text_type     => q'~Select a condition type that must be met in order for this branch to be executed.~',
        p_db_column_type     => 'CONDITION_TYPE',
        p_db_column_expr1    => 'CONDITION_EXPR1',
        p_db_column_expr2    => 'CONDITION_EXPR2',
        p_display_group_name => 'SERVER_SIDE_CONDITION' );
    --
    store_cond_type_properties (
        p_start_property_id  => 7050,
        p_name_prefix        => 'RAG',
        p_help_text_type     => q'~<p>Select a condition type that must be met in order for this RAG source to be executed. You can use the following special bind variables to access and evaluate the user's prompt:
<dl>
    <dt><code>APEX$AI_LAST_USER_PROMPT</code></dt>
    <dd>Retrieves the most recent user-entered prompt.</dd>
    <dt><code>APEX$AI_ALL_USER_PROMPTS</code></dt>
    <dd>Retrieves all user prompts, concatenated into a single string.</dd>
</dl>
</p>~',
        p_db_column_type     => 'CONDITION_TYPE',
        p_db_column_expr1    => 'CONDITION_EXPR1',
        p_db_column_expr2    => 'CONDITION_EXPR2',
        p_display_group_name => 'SERVER_SIDE_CONDITION' );
    --
    --
    --
    -- Next number is 7100
    --
    ------------------------------------------------------------------------
    -- Component Properties
    ------------------------------------------------------------------------
    --
    -- Component Properties for CREDENTIAL
    --
    l_component_type_id           := c_comp_type_credential;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'WORKSPACE',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a descriptive name for the Credentials. This name must be unique within the workspace.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CREDENTIAL_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'BASIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'OAUTH_SCOPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CREDENTIAL_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'OAUTH2_CLIENT_CREDENTIALS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CLIENT_ID_OR_USERNAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CREDENTIAL_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'BASIC,OAUTH2_CLIENT_CREDENTIALS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CLIENT_SECRET_OR_PASSWORD',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CREDENTIAL_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'BASIC,OAUTH2_CLIENT_CREDENTIALS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'OCI_USER_ID',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'CREDENTIAL_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'OCI' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'OCI_PRIVATE_KEY',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CREDENTIAL_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'OCI' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'OCI_TENANCY_ID',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CREDENTIAL_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'OCI' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'OCI_PUBLIC_KEY_FINGERPRINT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CREDENTIAL_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'OCI' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CERTIFICATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CREDENTIAL_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'CERTIFICATE_PAIR' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CERTIFICATE_PRIVATE_KEY',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CREDENTIAL_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'CERTIFICATE_PAIR' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HTTP_CREDENTIAL_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CREDENTIAL_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'HTTP_HEADER,HTTP_QUERY_STRING' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HTTP_CREDENTIAL_SECRET',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CREDENTIAL_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'HTTP_HEADER,HTTP_QUERY_STRING' );
    --
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DB_CREDENTIAL_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CREDENTIAL_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'BASIC,OAUTH2_CLIENT_CREDENTIALS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DB_CREDENTIAL_IS_INSTANCE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DB_CREDENTIAL_NAME',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VALID_FOR_URLS',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'STATIC_ID',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'WORKSPACE',
        p_supports_substitution => false,
        p_help_text             => q'~Use the Static ID to reference the Credential in API Calls.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PROMPT_ON_INSTALL',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' ); -- $$$ Default to Y if CLIENT_ID_OR_USERNAME is NOT NULL
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'CREDENTIAL_COMMENT' );
    --
    --
    -- Component Properties for REMOTE_DATABASE
    --
    l_component_type_id           := c_comp_type_remote_database;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_remote_server (
        p_server_type => 'REMOTE_SQL' );
    --
    --
    -- Component Properties for REMOTE_ORACLE_DB
    --
    l_component_type_id           := c_comp_type_remote_oracle_db;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'WORKSPACE',
        p_is_required       => true,
        p_is_common         => true );
    --
    --
    -- Component Properties for AUTHENTICATION_SERVER
    --
    l_component_type_id           := c_comp_type_auth_server;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_remote_server (
        p_server_type => 'AUTHENTICATION' );
    --
    --
    -- Component Properties for PRINT_SERVER
    --
    l_component_type_id           := c_comp_type_print_server;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_remote_server (
        p_server_type => 'PRINT_SERVER' );
    --
    --
    -- Component Properties for AI_SERVER
    --
    l_component_type_id           := c_comp_type_ai_server;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_remote_server (
        p_server_type => 'GENERATIVE_AI' );
    --
    --
    -- Component Properties for VECTOR
    --
    l_component_type_id           := c_comp_type_vector_provider;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_remote_server (
        p_server_type => 'VECTOR' );
    --
    --
    -- Component Properties for FILE_SERVER
    --
    l_component_type_id           := c_comp_type_file_server;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_remote_server (
        p_server_type => 'FILE_SERVER' );
    --
    --
    -- Component Properties for REST_SERVER
    --
    l_component_type_id           := c_comp_type_rest_server;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_remote_server (
        p_server_type => 'WEB_SERVICE' );
    --
    --
    -- Component Properties for STATIC_WORKSPACE_FILE
    --
    l_component_type_id           := c_comp_type_workspace_file;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_static_file;
    --
    --
    -- Component Properties for APP_GROUP
    --
    l_component_type_id := c_comp_type_app_group;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'GROUP_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'WORKSPACE',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Identifies the name of the application group.~' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id      => l_component_type_id,
        p_has_comments           => true,
        p_comment_db_column      => 'GROUP_COMMENT',
        p_audit_db_column_prefix => null );
    --
    --
    -- Component Properties for APPLICATION
    --
    l_component_type_id           := c_comp_type_application;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~
Provides a short descriptive name for the application to distinguish it from other applications in your development environment.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ALIAS',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'WORKSPACE',
        p_supports_substitution => false,
        p_help_text             => q'~
Assigns an alternate alphanumeric application identifier. You can use this identifier in place of the application ID.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'VERSION',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_default_value         => '1.0' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APPLICATION_GROUP',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'TOKENIZE_ROW_SEARCH',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'TEXT_QUERY_FUNCTION_TYPE',
        p_db_column             => null,
        p_null_text             => 'None',
        p_null_help_text        => '~&PRODUCT_NAME. encloses each query term with "{" and "}", except the keywords <strong>and</strong> and <strong>or</strong>~',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ORACLE_TEXT_FUNCTION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'TEXT_QUERY_FUNCTION_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'CUSTOM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TASK_VACATION_RULE_PROCEDURE',
        p_db_column                   => 'TASK_VACATION_RULE_PROCEDURE',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_help_text                   => q'~
<p>Specify the name of a PL/SQL procedure in the format <strong>schemaName.packageName.procedureName</strong>.
The procedure is expected to return alternate participants for task definitions in this application.
The vacation rule procedure should implement the following interface.</p>
<pre>
    procedure my_vacation_rule (
        p_param    in apex_approval.t_vacation_rule_input,
        p_result  out apex_approval.t_vacation_rule_output );
</pre>
<p>The procedure input is of type <strong>apex_approval.t_vacation_rule_input</strong> and the result output is of type <strong>apex_approval.t_vacation_rule_output</strong> </p>~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_AVAILABILITY',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'AVAILABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'UNAVAILABLE_MESSAGE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'APP_AVAILABILITY',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'UNAVAILABLE,UNAVAILABLE_PLSQL,UNAVAILABLE_URL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'RESTRICT_ACCESS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'APP_AVAILABILITY',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'RESTRICTED_ACCESS' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'GLOBAL_NOTIFICATION_MESSAGE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BUILD_STATUS',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'RUN_AND_BUILD' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DEFAULT_ERROR_DISPLAY_LOCATION',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'INLINE_WITH_FIELD_AND_NOTIFICATION' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ERROR_HANDLING_FUNCTION',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PRINT_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'NATIVE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REMOTE_PRINT_SERVER',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PRINT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REMOTE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PRINT_CREDENTIALS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'REMOTE_PRINT_SERVER',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'FRIENDLY_URLS',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ALLOW_FEEDBACK',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LOGGING',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'YES' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DEBUGGING',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => '0' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EXACT_SUBSTITUTIONS',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COMPATIBILITY_MODE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '21.2' );
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'ACCESSIBLE_READ_ONLY_ITEMS',
        p_db_column                     => null,
        p_is_required                   => true,
        p_is_common                     => false,
        p_default_value                 => 'Y',
        p_important_for_accessibility   => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PASS_ECID',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'EMAIL_FROM_ADDRESS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false,
        p_help_text             => q'~
<p>Determines the email address to use as the "From" address in the application.</p>
<p>This email address is used when sending email from interactive report email download and subscription in the application. This value can be a literal string containing a valid email or a static substitution reference defined in the application using substitution syntax. Oracle does not recommend using an item substitution at the application or page level since it only works for email downloads, but not in a subscriptions.</p>
Examples:
<ul>
<li><code>john.doe@example.com</code></li>
<li><code>&amp;MY_APP_EMAIL_FROM.</code></li>
</ul>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PROXY_SERVER',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NO_PROXY_DOMAINS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PROXY_SERVER',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COPYRIGHT_BANNER',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'FAVICONS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'APP_FILES_PATH',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'APEX_FILES_PATH',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'MAX_SCHEDULER_JOBS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'MEDIA_TYPE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PUBLIC_USER',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'APEX_PUBLIC_USER',
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'CURRENT_AUTHENTICATION_SCHEME',
        p_db_column           => null,
        p_is_required         => true,
        p_is_common           => true );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'AUTH_CONFIG_PROCEDURE',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'APP_AUTHORIZATION_SCHEME',
        p_db_column           => 'SECURITY_SCHEME',
        p_is_required         => false,
        p_is_common           => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AUTHORIZE_PUBLIC_PAGES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'APP_AUTHORIZATION_SCHEME',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AUTHORIZE_BACKGROUND_JOBS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'APP_AUTHORIZATION_SCHEME',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SOURCE_FOR_ROLE_OR_GROUP_SCHEMES',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'R' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REJOIN_EXISTING_SESSIONS',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'MAXIMUM_SESSION_LENGTH',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SESSION_TIMEOUT_URL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'MAXIMUM_SESSION_IDLE_TIME',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SESSION_IDLE_TIMEOUT_URL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SESSION_TIMEOUT_WARNING',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_SESSION_STATE_PROTECTION',
        p_db_column         => 'PAGE_PROTECTION_ENABLED_Y_N',
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SSP_ACCEPT_OLD_CHECKSUMS',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DEEP_LINKING',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BROWSER_CACHE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EMBED_IN_FRAMES',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'D' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REFERRER_POLICY',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'strict-origin' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'HTML_ESCAPING_MODE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'E' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'HTTP_RESPONSE_HEADERS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'RUNTIME_API_USAGE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARSING_SCHEMA',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'MLE_ENVIRONMENT',
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DB_SESSION_INIT',
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DB_SESSION_CLEANUP',
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_PRIMARY_LANGUAGE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'en' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DOCUMENT_DIRECTION',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true,
        p_null_text         => 'Language Default');

    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_LANGUAGE_DERIVED_FROM',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '0' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'AUTOMATIC_TIME_ZONE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'AUTOMATIC_CSV_ENCODING',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_DATE_FORMAT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_DATE_TIME_FORMAT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_TIMESTAMP_FORMAT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_TIMESTAMP_TZ_FORMAT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CHARACTER_VALUE_COMPARISON',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CHARACTER_VALUE_COMPARISON_BEHAVIOR',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => '0' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LOGO_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'T' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LOGO_IMAGE_URL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => true,
        p_depending_on_comp_prop_name => 'LOGO_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'I,IT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LOTO_TEXT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => true,
        p_depending_on_comp_prop_name => 'LOGO_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'T,IT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LOGO_CUSTOM',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => true,
        p_depending_on_comp_prop_name => 'LOGO_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'C' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IS_PWA',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PWA_INSTALLABLE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'IS_PWA',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PWA_DISPLAY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'standalone',
        p_depending_on_comp_prop_name => 'IS_PWA',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PWA_SCREEN_ORIENTATION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'any',
        p_depending_on_comp_prop_name => 'IS_PWA',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PWA_THEME_COLOR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_PWA',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PWA_BACKGROUND_COLOR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_PWA',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y',
        p_important_for_accessibility => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PWA_IOS_STATUS_BAR_STYLE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'default',
        p_depending_on_comp_prop_name => 'IS_PWA',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PWA_APP_DESCRIPTION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'IS_PWA',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PWA_CUSTOM_MANIFEST',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_PWA',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PWA_CUSTOM_SERVICE_WORKER',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_PWA',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PWA_IS_PUSH_ENABLED',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'IS_PWA',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'PWA_PUSH_CREDENTIAL_ID',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'IS_PWA',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y',
        p_depending_on_comp_prop_name2 => 'PWA_IS_PUSH_ENABLED',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'PWA_VAPID_CONTACT_INFO',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'IS_PWA',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y',
        p_depending_on_comp_prop_name2 => 'PWA_IS_PUSH_ENABLED',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'Y' );
    --

    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'HOME_URL',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LOGIN_URL',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAVIGATION_LIST_TEMPLATE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAV_LIST_TEMPLATE_OPTIONS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_parent_comp_prop_name       => 'NAVIGATION_LIST_TEMPLATE',
        p_depending_on_comp_prop_name => 'NAVIGATION_LIST_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAVIGATION_LIST_POSITION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'SIDE',
        p_depending_on_comp_prop_name => 'NAVIGATION_LIST_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAVIGATION_LIST',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'NAVIGATION_LIST_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAV_BAR_IMPLEMENTATION',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'LIST' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAV_BAR_LIST',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'NAV_BAR_IMPLEMENTATION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'LIST' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAV_BAR_LIST_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'NAV_BAR_IMPLEMENTATION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'LIST' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAV_BAR_LIST_TEMPLATE_OPTIONS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_parent_comp_prop_name       => 'NAV_BAR_LIST_TEMPLATE',
        p_depending_on_comp_prop_name => 'NAV_BAR_LIST_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'JS_FILE_URLS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true,
        p_help_text             => q'~
<p>Enter JavaScript file URLs for code to be loaded on every page. Each URL has to be written into a new line.
If you provide a minified version of your file, you can use the substitution string <code>#MIN#</code> to
include <code>.min</code> or <code>#MIN_DIRECTORY#</code> to include <code>minified/</code> in your file URL
for a regular page view and an empty string if the page is viewed in debug mode.</p>

<p>JavaScript file URLs you enter here replaces the <code>#APPLICATION_JAVASCRIPT#</code> substitution string
in the page template.</p>~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'INCLUDE_LEGACY_JAVASCRIPT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'INCLUDE_JQUERY_MIGRATE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CSS_FILE_URLS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true,
        p_help_text             => q'~
<p>Enter CSS file URLs to be loaded on every page. Each URL has to be written into a new line. If you provide
a minified version of your file you can use the substitution string <code>#MIN#</code> to include <code>.min</code>
or <code>#MIN_DIRECTORY#</code> to include <code>minified/</code> in your file URL for a regular page view and an
empty string if the page is viewed in debug mode. You also have access to the substitution string
<code>#APP_VERSION#</code> if you want to include the application's version in the file URL.</p>

<p>File URLs you enter here will replace the <code>#APPLICATION_CSS#</code> substitution string in the page template.</p>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'OTEL_PRODUCT_FAMILY',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );

    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'THEME',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_is_read_only      => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'GLOBAL_PAGE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true,
        p_is_read_only      => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'THEME_STYLE_BY_USER_PREF',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ADD_BUILT_WITH_LOVE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AUTO_DISMISS_SUCCESS_MSG',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Before enabling automatic dismissal of success messages for an application, it is important to take into consideration the accessibility impact it could have on users who may use special technology to view their screen or need longer than the default 5 seconds to perceive the message. Those users may not see or read a success message
        before it is dismissed from the page, and therefore they may potentially miss information in the success message. If important information is conveyed in success messages in this application, consider turning the auto-dismiss functionality off, or provide users with a preference setting that allows them to opt-out of the auto-dismiss functionality. This can be done
        using the apex.message <code>setDismissPreferences</code> JavaScript API to influence the dismiss behavior.</p>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'WORKING_COPY_CREATED_ON',
        p_db_column             => null,
        p_is_required           => false,
        p_is_read_only          => true,
        p_supports_substitution => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'WORKING_COPY_CREATED_BY',
        p_db_column             => null,
        p_is_required           => false,
        p_is_read_only          => true,
        p_supports_substitution => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'WORKING_COPY_NAME',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'WORKING_COPY_DESCRIPTION',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for APP_SUBSTITUTION
    --
    l_component_type_id := c_comp_type_app_substitution;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME_UPPER',
        p_db_column             => 'SUBSTITUTION_STRING',
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Identify substitution string name.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'VALUE_STATIC_VALUE',
        p_db_column             => 'SUBSTITUTION_VALUE',
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~Identify substitution value.~' );
    --
    --
    -- Component Properties for BUILD_OPTION
    --
    l_component_type_id := c_comp_type_build_option;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'PATCH_NAME',
        p_import_api_parameter  => 'build_option_name',
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a name for this build option. Build options are predefined settings that determine whether or not components within an application are enabled.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BUILD_OPTION_STATUS',
        p_db_column             => null,
        p_import_api_parameter  => 'build_option_status',
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'EXCLUDE' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DEFAULT_ON_EXPORT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true,
        p_null_text         => 'Same as Current Status' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ON_UPGRADE_KEEP_STATUS',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id        => l_component_type_id,
        p_has_comments             => true,
        p_comment_db_column        => 'PATCH_COMMENT',
        p_comment_import_api_param => 'build_option_comment');
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BUILD_OPTION_SUBSCRIBED_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --

    --
    --
    -- Component Properties for AUTHORIZATION
    --
    l_component_type_id := c_comp_type_authorization;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter an unique name that identifies this authorization scheme.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'AUTHORIZATION_SUBSCRIBED_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'AUTHORIZATION_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_plugin_attr_seq_offset (
        p_component_type_id => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EVALUATION_POINT',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'BY_USER_BY_PAGE_VIEW' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ERROR_MESSAGE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_help_text             => q'~<p>This is the error text that displays when this authorization scheme is applied to a application or page.</p>
<p>If the authorization scheme fails (that is, the current user fails the security check) then this text displays.</p>~' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'COMMENTS' );
    --
    --
    -- Component Properties for ACL_ROLE
    --
    l_component_type_id           := c_comp_type_acl_role;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'GROUP_NAME',
        p_import_api_parameter  => 'name',
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a descriptive name for the role. This name must be unique within the application.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'STATIC_ID',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_help_text             => q'~Use the Static ID to reference the role in API Calls.~' );
    --
    store_component_prop (
        p_component_type_id    => l_component_type_id,
        p_property_name        => 'DESCRIPTION',
        p_db_column            => 'GROUP_DESC',
        p_import_api_parameter => 'description',
        p_is_required          => false,
        p_is_common            => false,
        p_help_text            => q'~Enter a description for this role.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ACL_ROLE_SUBSCRIBED_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    --
    -- Component Properties for PAGE
    --
    l_component_type_id := c_comp_type_page;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IS_GLOBAL_PAGE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PAGE_NAVIGATION_TYPE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => 'L' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter the name of the current page. This name is used in numerous &PRODUCT_NAME. pages and reports, along with the page number and title.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ALIAS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TITLE',
        p_db_column                   => 'STEP_TITLE',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_help_text                   => q'~<p>Enter a title that will be displayed in the title bar of the browser window, and announced to screen reader users when they first open the page.
        The &PRODUCT_NAME. engine uses the title you specify here in place of the <code>#TITLE#</code> substitution string used in the page template. This title is inserted between the
        HTML tags <code>&lt;TITLE&gt;</code> and <code>&lt;/TITLE&gt;</code>.</p>
        <p>A good page title should provide a clear and concise description of the purpose of the page, can include the application name and sub-section of the application for additional
        context, and should always include the most important, and unique information first. For example, if you have a 'Products' page in an 'Administration' section of a 'Customer Portal'
        application, the page title could be defined as 'Products | Admin | Customer Portal'.</p>~',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Page titles are crucial for helping all users understand the purpose of a page, especially those using assistive technology like screen readers. Since the page title is often the first thing heard by a screen reader user, it's essential to make sure every page title is meaningful and unique.</p>
<p>Best Practices:</p>
<ol>
<li>Clear and Descriptive:
Use specific titles like "Understanding WCAG 2.1" or section titles for easy navigation.</li>
<li>Effective:
Consider the following example: For a Form page, include relevant information like the record being edited, such as "Create / Edit Customer: [customer name]." Follow these steps in Page Designer:
<ol>
<li>Select the page in the Rendering tree.</li>
<li>In the Property Editor, locate the Identification - Title field.</li>
<li>Replace P1_CUSTOMER_NAME with the appropriate page item containing the record identifier.</li>
<li>Enter the title format as Create / Edit Customer: &P1_CUSTOMER_NAME. (include the period).</li>
</ol>
</li>
</ol>
<p>Implementing descriptive page and regions titles significantly enhances accessibility, enabling seamless navigation and content understanding for users across diverse web environments.</p>~' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'PAGE_GROUP',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_MODE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'NORMAL',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_on_delete         => 'WEAK_NULL',
        p_null_text                   => 'Theme Default',
        p_parent_comp_prop_name       => 'PAGE_MODE',
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NORMAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TEMPLATE_OPTIONS',
        p_db_column                   => 'PAGE_TEMPLATE_OPTIONS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_parent_comp_prop_name       => 'PAGE_TEMPLATE',
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NORMAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_on_delete         => 'WEAK_NULL',
        p_null_text                   => 'Theme Default',
        p_parent_comp_prop_name       => 'PAGE_MODE',
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MODAL,NON_MODAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TEMPLATE_OPTIONS2',
        p_db_column                   => 'PAGE_TEMPLATE_OPTIONS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_parent_comp_prop_name       => 'DIALOG_TEMPLATE',
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MODAL,NON_MODAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'APPEARANCE_CSS_CLASSES',
        p_db_column                   => 'PAGE_CSS_CLASSES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_help_text                   => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~',
        p_comment_text                => '$$$ we should only show this property if the template supports the #PAGE_CSS_CLASSES# placeholder' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MEDIA_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_WIDTH',
        p_db_column                   => 'DIALOG_WIDTH',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MODAL,NON_MODAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_HEIGHT',
        p_db_column                   => 'DIALOG_HEIGHT',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MODAL,NON_MODAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_MAX_WIDTH',
        p_db_column                   => 'DIALOG_MAX_WIDTH',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MODAL,NON_MODAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_ATTRIBUTES',
        p_db_column                   => 'DIALOG_ATTRIBUTES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MODAL,NON_MODAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_CSS_CLASSES',
        p_db_column                   => 'DIALOG_CSS_CLASSES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MODAL,NON_MODAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_CHAINED',
        p_db_column                   => 'DIALOG_CHAINED',
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MODAL,NON_MODAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_RESIZABLE',
        p_db_column                   => 'DIALOG_RESIZABLE',
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MODAL,NON_MODAL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'OVERWRITE_NAVIGATION_LIST',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_depending_on_comp_prop_name  => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'N',
        p_depending_on_comp_prop_name2 => 'PAGE_NAVIGATION_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'L' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAVIGATION_LIST',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Do not show Navigation Menu List',
        p_depending_on_comp_prop_name => 'OVERWRITE_NAVIGATION_LIST',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAVIGATION_LIST_POSITION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT_NAV_LIST_POSITION#',
        p_depending_on_comp_prop_name => 'NAVIGATION_LIST',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAVIGATION_LIST_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT_NAV_LIST_TEMPLATE#',
        p_depending_on_comp_prop_name => 'NAVIGATION_LIST',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAV_LIST_TEMPLATE_OPTIONS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_parent_comp_prop_name       => 'NAVIGATION_LIST_TEMPLATE',
        p_depending_on_comp_prop_name => 'NAVIGATION_LIST',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'STANDARD_TAB_SET',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'N',
        p_depending_on_comp_prop_name2 => 'PAGE_NAVIGATION_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'T' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CURSOR_FOCUS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'AUTO_FIRST_ITEM',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_WARN_ON_UNSAVED_CHANGES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>When designing web pages, it's essential to prioritize user experience by implementing features that prevent data loss. By enabling the page warn on unsaved changes functionality, users are notified when attempting to navigate away from a page containing unsaved modifications.
This feature not only enhances usability but also ensures data integrity and user satisfaction.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_FILE_URLS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_FUNCTION_AND_GLOBAL_VARIABLE_DECLARATION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_EXECUTE_WHEN_PAGE_LOADS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'INCLUDE_STANDARD_JAVASCRIPT_AND_CSS',
        p_db_column                   => null,
        p_view_column                 => 'INCLUDE_APEX_CSS_JS_YN',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CSS_FILE_URLS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'INLINE_CSS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HTML_HEADER',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_HTML_BODY_ATTRIBUTE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HEADER_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BODY_HEADER',
        p_db_column                   => null,
        p_view_column                 => 'BODY_HEADER',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FOOTER_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_condition_type_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_name_prefix                 => 'READ_ONLY',
        p_help_text_type              => null,
        p_db_column_type              => null,
        p_view_column_type            => 'READ_ONLY_CONDITION_TYPE',
        p_db_column_expr1             => null,
        p_db_column_expr2             => null,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AUTHORIZATION_SCHEME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_on_delete         => 'WEAK_NULL',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_help_text                   => q'~<p>Select an authorization scheme applied to the page. Authorization schemes are defined at the application-level and can be applied to many elements within the application.</p>
<p>An authorization scheme is evaluated either once for each application session (at session creation), or once for each page view. If the selected authorization scheme evaluates to <strong>TRUE</strong>, then the page displays and is subject to other defined conditions. If it evaluates to <strong>FALSE</strong>, then the page does not display and an error message displays.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_AUTHENTICATION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEEP_LINKING',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Application Default',
        p_null_help_text              => 'Uses the setting defined in the application security attributes.',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_ACCESS_PROTECTION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORM_AUTO_COMPLETE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'ON',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BROWSER_CACHE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Application Default',
        p_null_help_text              => 'Uses the setting defined in the application security attributes.',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REJOIN_EXISTING_SESSIONS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Application Default',
        p_null_help_text              => 'Inherits the setting defined against the application.',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ENABLE_META_TAGS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'PAGE_AUTHENTICATION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_DUPLICATE_PAGE_SUBMISSIONS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'RELOAD_ON_SUBMIT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'S',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>For improved accessibility, opt for the "Only for Success" option for several reasons:</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Dynamic Error Display:</strong>
Display errors dynamically without reloading the page.</li>
<li><strong>Contextual Reload:</strong>
Reload the page after successful processing to maintain user context.</li>
<li><strong>Avoiding Full Page Reloads:</strong>
Opting for this approach minimizes full page reloads and prevents unnecessary context changes for the user.</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ON_DUPLICATE_PAGE_SUBMISSIONS_GO_TO_THIS_URL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'ALLOW_DUPLICATE_PAGE_SUBMISSIONS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CACHE_MODE',
        p_db_column                   => 'CACHE_MODE',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'NOCACHE',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CACHE_TIMEOUT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '21600',
        p_depending_on_comp_prop_name => 'CACHE_MODE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NOCACHE' );
    --
    store_condition_type_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_name_prefix                 => 'CACHE',
        p_view_column_type            => 'CACHE_CONDITION_TYPE',
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CACHE_MODE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NOCACHE',
        p_help_text_type              => null,
        p_db_column_type              => null,
        p_db_column_expr1             => null,
        p_db_column_expr2             => null );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'INLINE_ERROR_NOTIFICATION_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ERROR_HANDLING_FUNCTION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HELP_TEXT_CLOB',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Help text plays a crucial role in providing additional information and guidance to users, particularly those who may require assistance or clarification while interacting with an interface. By ensuring that help text is accessible and effectively communicates its purpose, you enhance the usability and inclusivity of your application.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Clear and Concise:</strong> Keep help text clear and concise to facilitate easy understanding for all users. Avoid using overly technical language or jargon that may be confusing to some users.</li>
<li><strong>Contextual Guidance:</strong> Provide help text that is contextually relevant to the task or element it is associated with. This helps users understand how to complete a specific action or navigate through the interface effectively.</li>
<li><strong>Sensory Characteristics:</strong> Ensure instructions provided through help do not rely solely on sensory characteristics of page elements (such as shape, color, size or visual location). For example, instead of saying 'click the button in the top right of the page', better help text would be 'click the button labelled "Next" in the top right of the page' (so the instruction is not reliant on location alone).</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUILD_OPTION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_on_delete         => 'WEAK_NULL',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ENABLE_PAGE_PATTERNS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IS_PAGE_PATTERN',
        p_db_column                   => null,
        p_default_value               => 'N',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'ENABLE_PAGE_PATTERNS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y',
        p_depending_on_comp_prop_name2=> 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type2=> 'EQUALS',
        p_depending_on_expression2    => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUILDER_ICON_CSS_CLASS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'IS_PAGE_PATTERN',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_SUBSCRIBED_FROM',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_PAGE_PATTERN',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_VERSION_SCN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'PAGE_COMMENT' );
    --
    -- Component Properties for PAGE_GROUP
    --
    l_component_type_id := c_comp_type_page_group;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'GROUP_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter the name of the page group.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DESCRIPTION',
        p_db_column         => 'GROUP_DESC',
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Enter a description for this page group.~' );
    --
    --
    -- Component Properties for PAGE_COMPUTATION
    --
    l_component_type_id           := c_comp_type_page_computation;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    store_computation_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for APPLICATION_COMPUTATION
    --
    l_component_type_id           := c_comp_type_app_computation;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    store_computation_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_COMPUTATION_SUBSCRIBED_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    --
    -- Component Properties for DYNAMIC_ACTION_EVENT
    --
    l_component_type_id := c_comp_type_da_event;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_check_uniqueness            => 'PAGE',
        p_supports_substitution       => false,
        p_default_value               => '#PLEASE_CHANGE#',
        p_help_text                   => q'~Enter the name of the dynamic action.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IG_REGION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EXECUTION_SEQUENCE',
        p_db_column                   => 'EVENT_SEQUENCE',
        p_is_required                 => true,
        p_is_common                   => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EVENT_SCOPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'bind' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'STATIC_CONTAINER_JQUERY',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'EVENT_SCOPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'live' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'EVENT',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'change' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DA_EXECUTION_TYPE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'IMMEDIATE',
        p_depending_on_comp_prop_name  => 'EVENT',
        p_depending_on_condition_type  => 'NOT_IN_LIST',
        p_depending_on_expression      => 'ready,unload,resize,apexbeforepagesubmit',
        p_depending_on_comp_prop_name2 => 'EVENT_SCOPE',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'bind,live' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DA_EXECUTION_TIME',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'DA_EXECUTION_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'DEBOUNCE,THROTTLE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DA_EXECUTION_IMMEDIATE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_depending_on_comp_prop_name  => 'DA_EXECUTION_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'DEBOUNCE,THROTTLE' );
    --
    -- EVENT is part of Display Group "When" but also is used as a dependency
    -- for Component-Prop 'DA_EXECUTION_TYPE', so we have to move it down after creation
    resequence_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name              => 'EVENT',
        p_previous_name     => 'DA_EXECUTION_IMMEDIATE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CUSTOM_EVENT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'EVENT',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'custom' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_TYPE',
        p_db_column                   => null,
        p_view_column                 => 'WHEN_SELECTION_TYPE_CODE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'EVENT',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => 'apexbeforepagesubmit,unload,resize,ready,orientationchange' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_REGION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'WHEN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REGION',
        p_comment_text                => q'~$$$ data model currently uses a SET NULL constraint, I think we should change that to a CASCADE as well~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_IG_REGION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'WHEN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'COLUMN',
        p_comment_text                => q'~$$$ data model currently uses a SET NULL constraint, I think we should change that to a CASCADE as well~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_COLUMNS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_parent_comp_prop_name       => 'WHEN_IG_REGION',
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'WHEN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_BUTTON',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'WHEN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'BUTTON' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_ITEMS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'WHEN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_DOM_OBJECT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'WHEN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DOM_OBJECT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_JQUERY_SELECTOR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'WHEN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'JQUERY_SELECTOR' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_JAVASCRIPT_EXPRESSION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'WHEN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'JAVASCRIPT_EXPRESSION' );
    --
    store_comp_prop_js_condition (
        p_db_column_type         => null,
        p_db_column_element_type => null,
        p_db_column_element      => null,
        p_db_column_expression   => null );
    --
    store_standard_attr_comp_prop (
        p_component_type_id            => l_component_type_id,
        p_has_condition                => true,
        p_cond_type_help_text          => 'Select a condition type to be met in order for this dynamic action to be active.',
        p_cond_type_db_column          => 'DISPLAY_WHEN_TYPE',
        p_cond_type_view_db_column     => 'CONDITION_TYPE',
        p_cond_exp1_db_column          => 'DISPLAY_WHEN_COND',
        p_cond_exp2_db_column          => 'DISPLAY_WHEN_COND2',
        p_has_authorization_scheme     => true,
        p_authorization_db_column      => 'SECURITY_SCHEME',
        p_has_build_option             => true,
        p_has_comments                 => true,
        p_comment_db_column            => 'DA_EVENT_COMMENT' );
    --
    -- Component Properties for DYNAMIC_ACTION_ACTION
    --
    l_component_type_id := c_comp_type_da_action;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~Enter the name of the action. This helps to identify what the action does in Page Designer.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DA_ACTION_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'NATIVE_SHOW' );
    --
    -- Used as component display title. It returns coalesce(name, da_action_type).
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME_HIDDEN',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IG_REGION',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_ENABLED',
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_default_value               => 'N',
        p_plugin_std_attributes       => 'AI_ENABLED' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_CONFIG',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'AI_ENABLED',
        p_depending_on_has_to_exist   => false,
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y',
        p_plugin_std_attributes       => 'AI_ENABLED_ALWAYS,AI_ENABLED' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_REMOTE_SERVER',
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Application Default',
        p_depending_on_comp_prop_name => 'AI_CONFIG',
        p_depending_on_condition_type => 'NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_SYSTEM_PROMPT',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_template_directive => 'S',
        p_depending_on_comp_prop_name => 'AI_CONFIG',
        p_depending_on_condition_type => 'NULL',
        p_plugin_std_attributes       => 'AI_SYSTEM_PROMPT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_WELCOME_MESSAGE',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_template_directive => 'C',
        p_depending_on_comp_prop_name => 'AI_CONFIG',
        p_depending_on_condition_type => 'NULL',
        p_plugin_std_attributes       => 'AI_WELCOME_MESSAGE' );
    --
    store_plugin_attr_seq_offset (
        p_component_type_id => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'AFFECTED_TYPE',
        p_db_column             => null,
        p_view_column           => 'AFFECTED_ELEMENTS_TYPE_CODE',
        p_is_required           => null, -- defined by plug-in standard attributes
        p_is_common             => true,
        p_plugin_std_attributes => 'ITEM,BUTTON,REGION,JQUERY_SELECTOR,JAVASCRIPT_EXPRESSION,TRIGGERING_ELEMENT,EVENT_SOURCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AFFECTED_REGION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'AFFECTED_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REGION',
        p_comment_text                => q'~$$$ data model currently uses a SET NULL constraint, I think we should change that to a CASCADE as well~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AFFECTED_COLUMNS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_parent_comp_prop_name       => 'IG_REGION',
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'AFFECTED_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AFFECTED_BUTTON',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'AFFECTED_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'BUTTON' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AFFECTED_ITEMS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'AFFECTED_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AFFECTED_DOM_OBJECT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'AFFECTED_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DOM_OBJECT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AFFECTED_JQUERY_SELECTOR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'AFFECTED_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'JQUERY_SELECTOR' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AFFECTED_JAVASCRIPT_EXPRESSION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'AFFECTED_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'JAVASCRIPT_EXPRESSION' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EXECUTION_SEQUENCE',
        p_db_column         => 'ACTION_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'DA_EVENT',
        p_db_column           => null,
        p_is_required         => true,
        p_is_common           => false,
        p_reference_on_delete => 'DB_CASCADE' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'FIRE_WHEN_EVENT_RESULT_IS',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'TRUE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FIRE_ON_PAGE_LOAD',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        -- used to trigger a dependency check when plug-in is changed. This is necessary to set the default value specified in standard attributes
        p_depending_on_comp_prop_name => 'DA_ACTION_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'EXEC_STOP_EXECUTION_ON_ERROR',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'Y',
        p_plugin_std_attributes => 'STOP_EXECUTION_ON_ERROR' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'WAIT_FOR_RESULT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'Y',
        p_plugin_std_attributes => 'WAIT_FOR_RESULT' );
    --
    -- Client-side Condition
    --
    store_comp_prop_js_condition (
        p_db_column_type         => 'CLIENT_CONDITION_TYPE',
        p_db_column_element_type => 'CLIENT_CONDITION_ELEMENT_TYPE',
        p_db_column_element      => 'CLIENT_CONDITION_ELEMENT',
        p_db_column_expression   => 'CLIENT_CONDITION_EXPRESSION',
        p_help_text_type         => q'~Specify a client-side condition, to control whether the action fires.~' );
    --
    -- Server-side Condition
    --
    store_condition_type_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => null,
        p_help_text_type    => 'Select a condition type to be met in order for this action to be active.',
        p_db_column_type    => 'SERVER_CONDITION_TYPE',
        p_view_column_type  => 'SERVER_CONDITION_TYPE',
        p_db_column_expr1   => 'SERVER_CONDITION_EXPR1',
        p_db_column_expr2   => 'SERVER_CONDITION_EXPR2' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'AUTHORIZATION_SCHEME',
        p_db_column           => 'SECURITY_SCHEME',
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'BUILD_OPTION',
        p_db_column           => 'BUILD_OPTION_ID',
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'INIT_JAVASCRIPT_FUNCTION',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_default_value         => null,
        p_plugin_std_attributes => 'INIT_JAVASCRIPT_CODE' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'DA_ACTION_COMMENT' );
    --
    --
    -- Component Properties for PAGE_ITEM
    --
    l_component_type_id := c_comp_type_page_item;
    -- Reset Component Property sequence for this component type
    --
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ITEM_NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => 'P#PAGE_ID#_NEW' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ITEM_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'NATIVE_TEXT_FIELD' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LABEL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => '#PLEASE_CHANGE#',
        p_plugin_std_attributes       => 'VISIBLE',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Ensure labels accurately describe the purpose of form controls, aiding users in form completion.</p>
<strong>Best Practices:</strong>
<ul><li><strong>Clear and Concise Text:</strong> Use descriptive yet brief labels for clarity.</li></ul>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LABEL_ALIGNMENT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'RIGHT-CENTER',
        p_plugin_std_attributes => 'VISIBLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FIELD_TABLE_CELL_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'VISIBLE',
        p_depending_on_comp_prop_name => 'LABEL_ALIGNMENT',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'ABOVE' );
    --
    store_plugin_attr_seq_offset (
        p_component_type_id => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_ENABLED',
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_default_value               => 'N',
        p_plugin_std_attributes       => 'AI_ENABLED' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_CONFIG',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'AI_ENABLED',
        p_depending_on_has_to_exist   => false,
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y',
        p_plugin_std_attributes       => 'AI_ENABLED_ALWAYS,AI_ENABLED' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_REMOTE_SERVER',
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Application Default',
        p_depending_on_comp_prop_name => 'AI_CONFIG',
        p_depending_on_condition_type => 'NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_SYSTEM_PROMPT',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_template_directive => 'S',
        p_depending_on_comp_prop_name => 'AI_CONFIG',
        p_depending_on_condition_type => 'NULL',
        p_plugin_std_attributes       => 'AI_SYSTEM_PROMPT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_WELCOME_MESSAGE',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_template_directive => 'C',
        p_depending_on_comp_prop_name => 'AI_CONFIG',
        p_depending_on_condition_type => 'NULL',
        p_plugin_std_attributes       => 'AI_WELCOME_MESSAGE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MULTI_VALUE_TYPE_ALWAYS',
        p_db_column                   => 'MULTI_VALUE_TYPE',
        p_is_required                 => true,
        p_default_value               => 'SEPARATED',
        p_is_common                   => false,
        p_plugin_std_attributes       => 'MULTI_VALUE_ALWAYS' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MULTI_VALUE_SEPARATOR_ALWAYS',
        p_db_column                    => 'MULTI_VALUE_SEPARATOR',
        p_default_value                => ':',
        p_is_required                  => true,
        p_is_common                    => false,
        p_supports_substitution        => false,
        p_depending_on_comp_prop_name  => 'MULTI_VALUE_TYPE_ALWAYS',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SEPARATED' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MULTI_VALUE_TYPE_OPTIONAL',
        p_db_column                   => 'MULTI_VALUE_TYPE',
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'No',
        p_null_help_text              => 'Column does not contain multiple values.',
        p_plugin_std_attributes       => 'MULTI_VALUE_OPTIONAL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MULTI_VALUE_SEPARATOR_OPTIONAL',
        p_db_column                    => 'MULTI_VALUE_SEPARATOR',
        p_default_value                => ':',
        p_is_required                  => true,
        p_is_common                    => false,
        p_supports_substitution        => false,
        p_depending_on_comp_prop_name  => 'MULTI_VALUE_TYPE_OPTIONAL',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SEPARATED' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'ITEM_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'REGION',
        p_db_column           => 'ITEM_PLUG_ID',
        p_is_required         => false,
        p_is_common           => true,
        p_null_text           => 'No Parent',
        p_reference_on_delete => 'WEAK_CASCADE',
        p_help_text           => q'~Select the region in which the item will be displayed.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SLOT_PLACEHOLDER',
        p_db_column             => 'ITEM_DISPLAY_POINT',
        p_is_required           => true,
        p_is_common             => true,
        p_parent_comp_prop_name => 'REGION' );
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_FIELD_ALIGNMENT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'LEFT-CENTER',
        p_plugin_std_attributes => 'ELEMENT' );
    --
    store_grid_comp_prop (
        p_component_type_id     => l_component_type_id,
        p_new_grid_db_column    => 'NEW_GRID',
        p_new_row_db_column     => 'BEGIN_ON_NEW_LINE',
        p_column_db_column      => 'GRID_COLUMN',
        p_new_column_db_column  => 'BEGIN_ON_NEW_FIELD',
        p_column_span_db_column => 'COLSPAN',
        p_row_span_db_column    => 'ROWSPAN',
        p_column_attr_db_column => 'CATTRIBUTES_ELEMENT',
        p_has_label_column_span => true,
        p_plugin_std_attributes => 'VISIBLE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'FIELD_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_reference_on_delete   => 'WEAK_NULL',
        p_default_value         => '#DEFAULT_FIELD_TEMPLATE#',
        p_plugin_std_attributes => 'VISIBLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TEMPLATE_OPTIONS',
        p_db_column                   => 'ITEM_TEMPLATE_OPTIONS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_plugin_std_attributes       => 'VISIBLE',
        p_parent_comp_prop_name       => 'FIELD_TEMPLATE',
        p_depending_on_comp_prop_name => 'FIELD_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'APPEARANCE_CSS_CLASSES',
        p_db_column                   => 'ITEM_CSS_CLASSES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'VISIBLE',
        p_depending_on_comp_prop_name => 'FIELD_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL',
        p_help_text                   => q'~<p>Enter classes to add to this item. You may add multiple classes by separating them with spaces.<p/>
        <p>This property can be used to make style modifications to the item, beyond template options, or to provide a simpler way of selecting this item via JavaScript.</p>
        <p>Note: To apply CSS classes to the HTML form element tag, please see the CSS Classes property under the Advanced group.</p>~',
        p_comment_text                => '$$$ we should only show this property if the template supports the #ITEM_CSS_CLASSES# placeholder' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_CSS_CLASSES',
        p_db_column                   => 'ITEM_ICON_CSS_CLASSES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'ICON',
        p_help_text                   => q'~<p>Enter the classes for the icon you want to add to the component. You may add multiple classes by separating them with spaces.</p>
        <p>If your theme uses Font APEX then review the <a rel="noopener noreferrer" target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a> to view available icons and modifiers.</p>
        <p>Note: This icon will be displayed inside of the item, not as part of the label.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORMAT_MASK',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        -- This property is used if the plug-in std attribute FORMAT_MASK_DATE or FORMAT_MASK_NUMBER are not checked
        p_depending_on_comp_prop_name => 'ITEM_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'PLUGIN' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'FORMAT_MASK_DATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'FORMAT_MASK_DATE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'FORMAT_MASK_NUMBER',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'FORMAT_MASK_NUMBER' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_WIDTH',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_default_value         => '30',
        p_plugin_std_attributes => 'WIDTH' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_HEIGHT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_default_value         => '1',
        p_plugin_std_attributes => 'HEIGHT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ELEMENT_VALUE_PLACEHOLDER',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_plugin_std_attributes       => 'PLACEHOLDER',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Placeholder text serves as a helpful guide within input fields. When implemented thoughtfully, it aids users in understanding the expected input without overshadowing accessibility or creating confusion.</p>
<strong>Best Practices:</strong>
<ul>
<li><strong>Supplemental Information:</strong> Use placeholders to offer additional guidance, not as replacements for labels.</li>
<li><strong>Clear and Concise:</strong> Keep placeholder text brief yet informative.</li>
</ul>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'VALUE_REQUIRED',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'N',
        p_plugin_std_attributes => 'SESSION_STATE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_MAX_CHARACTERS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_plugin_std_attributes => 'WIDTH' );
    --
    store_lov_type_component_props (
        p_name                  => 'LOV_TYPE',
        p_is_required           => null, -- defined by plug-in standard attributes
        p_plugin_std_attributes => 'LOV' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DISPLAY_EXTRA_VALUES',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_plugin_std_attributes        => 'LOV',
        p_depending_on_comp_prop_name  => 'LOV_TYPE',
        p_depending_on_condition_type  => 'NOT_NULL',
        --
        p_depending_on_comp_prop_name2 => 'ITEM_TYPE',
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => 'NATIVE_COMBOBOX,NATIVE_SELECT_ONE,NATIVE_SELECT_MANY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DISPLAY_NULL_VALUE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_plugin_std_attributes       => 'LOV_DISPLAY_NULL',
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NULL_DISPLAY_VALUE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DISPLAY_NULL_VALUE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NULL_RETURN_VALUE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DISPLAY_NULL_VALUE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CASCADING_LOV_PARENT_ITEMS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'CASCADING_LOV',
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_depending_on_comp_prop_name2 => 'LOV_TYPE',
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LOV_PAGE_ITEMS_TO_SUBMIT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CASCADING_LOV_PARENT_ITEMS',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CASCADING_LOV_PARENT_REQUIRED',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'CASCADING_LOV_PARENT_ITEMS',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ADVANCED_CSS_CLASSES',
        p_db_column             => 'TAG_CSS_CLASSES',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'ELEMENT',
        p_help_text             => q'~<p>Enter classes to add to this component. You may add multiple classes by separating them with spaces.</p>
        <p>Note: These CSS classes will be applied to the HTML form element tag.</p>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CUSTOM_ATTRIBUTES',
        p_db_column             => 'TAG_ATTRIBUTES',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'ELEMENT',
        p_help_text             => q'~Enter additional attributes to be included in the form element HTML tag. The <code>size</code> and <code>id</code> HTML attributes are generated and therefore should not be supplied. For the <code>class</code> HTML attribute it is better to use the dedicated <em>CSS Classes</em> attribute instead.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_OPTION_HTML_ATTRIBUTES',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'ELEMENT_OPTION' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_PRE_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'ELEMENT' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_POST_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'ELEMENT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ITEM_WARN_ON_UNSAVED_CHANGES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Page Default',
        p_null_help_text              => q'~Include item in the unsaved changes check, if the check is enabled at page level.~',
        p_important_for_accessibility => true);
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'INIT_JAVASCRIPT_FUNCTION',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_default_value         => null,
        p_plugin_std_attributes => 'INIT_JAVASCRIPT_CODE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DATA_SOURCE_REGION',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_reference_on_delete   => 'WEAK_CASCADE',
        p_plugin_std_attributes => 'SOURCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DATA_SOURCE_COLUMN',
        p_db_column                   => 'SOURCE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'DATA_SOURCE_REGION',
        p_depending_on_condition_type => 'NOT_NULL',
        p_parent_comp_prop_name       => 'DATA_SOURCE_REGION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DATA_TYPE',
        p_db_column                   => 'SOURCE_DATA_TYPE',
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'DATA_SOURCE_REGION',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'IS_QUERY_ONLY',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_depending_on_comp_prop_name  => 'DATA_SOURCE_REGION',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_depending_on_comp_prop_name2 => 'DATA_TYPE',
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'ROWID' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IS_PRIMARY_KEY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'DATA_SOURCE_REGION',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'ALWAYS_NULL',
        p_depending_on_comp_prop_name => 'DATA_SOURCE_REGION',
        p_depending_on_condition_type => 'NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_STATIC_VALUE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_QUERY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_QUERY_COLON',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'QUERY_COLON' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_ITEM',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM' );
    --
    store_expression_comp_props (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'SOURCE_',
        p_return_type       => 'VARCHAR2',
        p_type_property     => 'SOURCE_TYPE' );
    --
    store_func_body_comp_props (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'SOURCE_',
        p_return_type       => 'VARCHAR2',
        p_type_property     => 'SOURCE_TYPE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_DB_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DB_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_PREFERENCE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PREFERENCE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SOURCE_USED',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'YES',
        p_plugin_std_attributes => 'SOURCE',
        p_depending_on_comp_prop_name => 'DATA_SOURCE_REGION',
        p_depending_on_condition_type => 'NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POST_CALCULATION_COMPUTATION',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'SOURCE',
        p_depending_on_comp_prop_name => 'DATA_SOURCE_REGION',
        p_depending_on_condition_type => 'NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_VALUE_TYPE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_plugin_std_attributes => 'SOURCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_STATIC_TEXT',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'DEFAULT_VALUE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC_TEXT_WITH_SUBSTITUTIONS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_ITEM',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DEFAULT_VALUE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_SQL_QUERY',
        p_db_column                   => 'ITEM_DEFAULT',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DEFAULT_VALUE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_SQL_QUERY_COLON',
        p_db_column                   => 'ITEM_DEFAULT',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DEFAULT_VALUE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_QUERY_COLON' );
    --
    store_expression_comp_props (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'DEFAULT_VALUE_',
        p_return_type       => 'VARCHAR2',
        p_type_property     => 'DEFAULT_VALUE_TYPE' );
    --
    store_func_body_comp_props (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'DEFAULT_VALUE_',
        p_return_type       => 'VARCHAR2',
        p_type_property     => 'DEFAULT_VALUE_TYPE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_SEQUENCE',
        p_db_column                   => 'ITEM_DEFAULT',
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'DEFAULT_VALUE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SEQUENCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_ITEM_DATA_TYPE',
        p_db_column                   => 'DATA_TYPE',
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_default_value               => 'VARCHAR2',
        p_plugin_std_attributes       => 'SESSION_STATE_CLOB' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'MAINTAIN_SESSION_STATE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'Y',
        p_plugin_std_attributes => 'SOURCE',
        p_depending_on_comp_prop_name => 'DATA_SOURCE_REGION',
        p_depending_on_condition_type => 'NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'MAINTAIN_SESSION_STATE_FORM',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'N',
        p_plugin_std_attributes => 'SOURCE',
        p_depending_on_comp_prop_name => 'DATA_SOURCE_REGION',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SHOW_QUICK_PICKS',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'N',
        p_plugin_std_attributes => 'QUICKPICK' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LINK_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_01',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_01',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_02',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_02',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_03',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_03',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_04',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_04',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_05',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_05',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_06',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_06',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_07',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_07',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_08',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_08',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_09',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_09',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_10',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_10',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_condition_type_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => null,
        p_help_text_type    => null,
        p_db_column_type    => 'DISPLAY_WHEN_TYPE',
        p_view_column_type  => 'CONDITION_TYPE',
        p_db_column_expr1   => 'DISPLAY_WHEN',
        p_db_column_expr2   => 'DISPLAY_WHEN2' );
    --
    store_condition_type_comp_prop (
        p_component_type_id     => l_component_type_id,
        p_name_prefix           => 'READ_ONLY',
        p_help_text_type        => q'~<p>Select a condition type that must be met in order for this component to render as read-only.
Not selecting a condition causes the item to render normally.
A read-only item is rendered with the same settings as a Display Only item.</p>
<p>Note: Set the condition type to <strong>Never</strong> to always render the item as an enterable field.
This setting overwrites any read-only condition setting on the region or page level.</p>~',
        p_db_column_type        => null,
        p_view_column_type      => 'READ_ONLY_CONDITION_TYPE',
        p_db_column_expr1       => null,
        p_db_column_expr2       => null,
        p_is_common             => false,
        p_plugin_std_attributes => 'READONLY' );
    --
    /* Items have additional "HTML Attributes" property rendered when read-only.
          Not worth rolling into store_condition_type_comp_prop, so just adding here. */
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'READ_ONLY_HTML_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'READ_ONLY_CONDITION_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'AUTHORIZATION_SCHEME',
        p_db_column           => 'SECURITY_SCHEME',
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SESSION_STATE_PROTECTION',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ENCRYPT_SESSION_STATE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'Y',
        p_plugin_std_attributes => 'ENCRYPT' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ESCAPE_SPECIAL_CHARACTERS',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'Y',
        p_plugin_std_attributes => 'ESCAPE_OUTPUT' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'RESTRICTED_CHARACTERS',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_null_text         => 'All characters can be saved.' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'INLINE_HELP_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Help text plays a crucial role in providing additional information and guidance to users, particularly those who may require assistance or clarification while interacting with an interface. By ensuring that help text is accessible and effectively communicates its purpose, you enhance the usability and inclusivity of your application.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Clear and Concise:</strong> Keep help text clear and concise to facilitate easy understanding for all users. Avoid using overly technical language or jargon that may be confusing to some users.</li>
<li><strong>Contextual Guidance:</strong> Provide help text that is contextually relevant to the task or element it is associated with. This helps users understand how to complete a specific action or navigate through the interface effectively.</li>
<li><strong>Sensory Characteristics:</strong> Ensure instructions provided through help do not rely solely on sensory characteristics of page elements (such as shape, color, size or visual location). For example, instead of saying 'click the button in the top right of the page', better help text would be 'click the button labelled "Next" in the top right of the page' (so the instruction is not reliant on location alone).</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'HELP_TEXT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true,
        p_help_text         => q'~Enter help text for this item. The help text may be used to provide field level context sensitive help.~' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_build_option  => true,
        p_has_comments      => true,
        p_comment_db_column => 'ITEM_COMMENT' );
    --
    --
    -- Component Properties for BUTTON
    --
    l_component_type_id := c_comp_type_button;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BUTTON_NAME',
        p_db_column         => 'BUTTON_NAME',
        p_is_required       => true,
        p_is_common         => true,
        p_check_uniqueness  => 'PAGE',
        p_default_value     => '#PLEASE_CHANGE#',
        p_help_text         => q'~Enter the name used to reference the button being clicked. When this page is submitted, the value of REQUEST is set to this button name.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUTTON_LABEL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => '#PLEASE_CHANGE#',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Ensure buttons have clear and meaningful descriptions, aiding users in understanding and utilizing their functions.</p>
<strong>Best Practices:</strong>
<ul><li><strong>Label Text Verification:</strong>
Check if the label text accurately describes the button's purpose.</li></ul>~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'BUTTON_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'REGION',
        p_db_column           => 'BUTTON_PLUG_ID',
        p_is_required         => false,
        p_is_common           => true,
        p_null_text           => 'No Parent',
        p_reference_on_delete => 'WEAK_CASCADE',
        p_help_text           => q'~Select the region in which the button will be displayed.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SLOT_PLACEHOLDER',
        p_db_column             => 'BUTTON_POSITION',
        p_is_required           => true,
        p_is_common             => true,
        p_parent_comp_prop_name => 'REGION' );
    --
    store_grid_comp_prop (
        p_component_type_id     => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'HORIZONTAL_ALIGNMENT',
        p_db_column                    => 'BUTTON_ALIGNMENT',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'RIGHT',
        p_depending_on_comp_prop_name  => 'SLOT_PLACEHOLDER',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'TOP,TOP_AND_BOTTOM,ABOVE_BOX,BELOW_BOX,BOTTOM' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ELEMENT_FIELD_ALIGNMENT',
        p_db_column                    => 'BUTTON_ALIGNMENT',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'LEFT-CENTER',
        p_depending_on_comp_prop_name  => 'SLOT_PLACEHOLDER',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'BODY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUTTON_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => '#DEFAULT_BUTTON_TEMPLATE#' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUTTON_IS_HOT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TEMPLATE_OPTIONS',
        p_db_column                   => 'BUTTON_TEMPLATE_OPTIONS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_parent_comp_prop_name       => 'BUTTON_TEMPLATE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'APPEARANCE_CSS_CLASSES',
        p_db_column                   => 'BUTTON_CSS_CLASSES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_help_text                   => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~',
        p_comment_text                => '$$$ we should only show this property if the template supports the #BUTTON_CSS_CLASSES# placeholder' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_CSS_CLASSES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_comment_text                => '$$$ we should only show this property if the template supports the #ICON_CSS_CLASSES# placeholder' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUTTON_ACTION',
        p_db_column                   => null,
        p_view_column                 => 'BUTTON_ACTION',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'SUBMIT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUTTON_TARGET',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'BUTTON_ACTION',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'REDIRECT_PAGE,REDIRECT_APP,REDIRECT_URL',
        p_parent_comp_prop_name       => 'BUTTON_ACTION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUTTON_EXECUTE_VALIDATIONS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'BUTTON_ACTION',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'SUBMIT,REDIRECT_URL,DEFINED_BY_DA' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUTTON_SHOW_PROCESSING',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'BUTTON_ACTION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SUBMIT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUTTON_WARN_ON_UNSAVED_CHANGES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'I',
        p_null_text                   => 'Page Default',
        p_null_help_text              => q'~Check for unsaved changes when the button is clicked, if the check is enabled at page level.~',
        p_depending_on_comp_prop_name => 'BUTTON_ACTION',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'DEFINED_BY_DA',
        p_important_for_accessibility => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUTTON_DATABASE_ACTION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CONFIRM_ENABLED',
        p_db_column                   => null,
        p_default_value               => 'N',
        p_is_required                 => true,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CONFIRM_MESSAGE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_template_directive => 'C',
        p_depending_on_comp_prop_name => 'CONFIRM_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>When designing message confirmation dialogs or prompts, it's essential to consider accessibility to ensure all users can easily understand and interact with the confirmation message.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Clear and Informative Content:</strong>
Ensure that the confirmation message provides clear and concise information about the action being confirmed. Use straightforward language that is easy to understand for all users.</li>
<li><strong>Accessible Formatting:</strong>
Format the confirmation message in a way that is accessible to users with various assistive technologies, such as screen readers. Use semantic HTML elements and provide alternative text for any non-text elements like buttons.</li>
<li><strong>Consistent Design:</strong>
Maintain consistency in the design and placement of message confirmation dialogs across your application or website. Consistency helps users predict the location of the confirmation message and reduces confusion.</li>
<li><strong>User Control:</strong>
Provide users with the option to review their action before confirming, especially for critical or irreversible actions. This empowers users to make informed decisions and reduces the likelihood of unintentional actions.</li>
</ol>
<p>By following these accessibility considerations, you can ensure that message confirmation dialogs are inclusive and usable for all users, regardless of their abilities or assistive technology usage.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CONFIRM_STYLE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Default',
        p_depending_on_comp_prop_name => 'CONFIRM_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DOM_STATIC_ID',
        p_db_column                   => 'BUTTON_STATIC_ID',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_help_text                   => q'~Enter the static ID for the button. If defined, the static ID is used as the ID for the button. The static ID can be useful when developing custom JavaScript behavior for the button. If the static ID is not defined, the button generates an internal ID.
<p>Note: The template must include the <code>#BUTTON_ID#</code> substitution string, in order for the button to utilize the static ID entered.</p>~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CUSTOM_ATTRIBUTES',
        p_db_column         => 'BUTTON_CATTRIBUTES',
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Enter HTML text to include for this button:
<ul>
  <li>For buttons of type <strong>HTML Button</strong>, this text is added to the HTML element definition.</li>
  <li>For buttons based on templates, your template must include the <code>#BUTTON_ATTRIBUTES#</code> substitution string.</li>
</ul>
<p>You can use this attribute to control tab stops</p>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BUTTON_ELEMENT_PRE_TEXT',
        p_view_column           => 'PRE_ELEMENT_TEXT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BUTTON_ELEMENT_POST_TEXT',
        p_view_column           => 'POST_ELEMENT_TEXT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BUTTON_REQUEST_SOURCE_TYPE',
        p_view_column           => 'REQUEST_SOURCE_TYPE',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUTTON_REQUEST_SOURCE',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => true,
        p_depending_on_comp_prop_name => 'BUTTON_REQUEST_SOURCE_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id        => l_component_type_id,
        p_has_condition            => true,
        p_cond_type_db_column      => 'BUTTON_CONDITION_TYPE',
        p_cond_type_view_db_column => 'CONDITION_TYPE',
        p_cond_exp1_db_column      => 'BUTTON_CONDITION',
        p_cond_exp2_db_column      => 'BUTTON_CONDITION2',
        p_has_authorization_scheme => true,
        p_authorization_db_column  => 'SECURITY_SCHEME',
        p_has_build_option         => true,
        p_has_comments             => true,
        p_comment_db_column        => 'BUTTON_COMMENT' );
    --
    --
    -- Component Properties for REGION
    --
    l_component_type_id := c_comp_type_region;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAME',
        p_db_column                   => 'PLUG_NAME',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => '#PLEASE_CHANGE#',
        p_help_text                   => q'~Enter a region name. The region name is required, it is used by Page Designer to identify the region on the tree view and the grid layout view. The region name is used as the runtime region title, if the title attribute is empty.~',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Ensure clear, descriptive titles for each region to aid user navigation and content understanding without relying on page context.</p>
<strong>Best Practices:</strong>
<ul>
<li><strong>Clear and Descriptive:</strong>
The title should provide a clear and concise description of the content or purpose of the region. Avoid vague or ambiguous titles.</li>
</ul> ~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'TITLE',
        p_db_column         => 'TITLE',
        p_is_required       => false,
        p_is_common         => true,
        p_help_text         => q'~Enter a region title. The region title is optional, it only displays when it is defined in the region template.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REGION_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'NATIVE_STATIC' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'REGION_SQL',
        p_db_column             => 'PLUG_SOURCE',
        p_is_required           => null, -- defined by plug-in standard attributes
        p_is_common             => true,
        p_plugin_std_attributes => 'SOURCE_SQL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PLSQL_CODE',
        p_db_column             => 'PLUG_SOURCE',
        p_is_required           => null, -- defined by plug-in standard attributes
        p_is_common             => true,
        p_plugin_std_attributes => 'SOURCE_PLSQL',
        p_help_text             => q'~Enter the PL/SQL code to generate the HTML output.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'REGION_FUNCTION_RETURNING_SQL', -- Intentionally this is PL/SQL only, because this plug-in attribute is deprecated
        p_db_column             => 'PLUG_SOURCE',
        p_is_required           => null, -- defined by plug-in standard attributes
        p_is_common             => true,
        p_plugin_std_attributes => 'SOURCE_PLSQL_FUNCTION' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'REGION_HTML_CODE',
        p_db_column             => 'PLUG_SOURCE',
        p_is_required           => null, -- defined by plug-in standard attributes
        p_is_common             => true,
        p_plugin_std_attributes => 'SOURCE_HTML' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'REGION_PLAIN',
        p_db_column             => 'PLUG_SOURCE',
        p_is_required           => null, -- defined by plug-in standard attributes
        p_is_common             => true,
        p_plugin_std_attributes => 'SOURCE_PLAIN' );
    --
    store_func_body_comp_props (
        p_component_type_id     => l_component_type_id,
        p_name_prefix           => 'SOURCE_',
        p_return_type           => 'CLOB',
        p_type_property         => 'REGION_TYPE',
        p_type_value            => 'NATIVE_DYNAMIC_CONTENT' );
    --
    store_comp_prop_location (
        p_location_property_name      => 'SOURCE_LOCATION',
        p_query_type_property_name    => 'SOURCE_QUERY_TYPE',
        p_db_column_query_type        => null,
        p_db_column_source_lang       => null,
        p_db_column_source            => 'PLUG_SOURCE',
        p_has_items_to_submit         => true,
        p_db_column_items_to_submit   => null,
        p_has_include_rowid           => true,
        p_has_order_by                => true,
        p_has_order_by_item           => true,
        p_has_web_src_has_local_table => true,
        p_has_remote_caching          => true,
        p_examples_sql_query          => null,
        p_help_text_items_to_submit   => null,
        p_is_region                   => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'PLUG_DISPLAY_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'PARENT_REGION',
        p_db_column           => 'PARENT_PLUG_ID',
        p_is_required         => false,
        p_is_common           => true,
        p_null_text           => 'No Parent',
        p_reference_on_delete => 'WEAK_CASCADE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SLOT_PLACEHOLDER',
        p_db_column             => 'PLUG_DISPLAY_POINT',
        p_is_required           => true,
        p_is_common             => true,
        p_parent_comp_prop_name => 'PARENT_REGION' );
    --
    store_grid_comp_prop (
        p_component_type_id     => l_component_type_id,
        p_new_grid_db_column    => 'PLUG_NEW_GRID',
        p_new_row_db_column     => 'PLUG_NEW_GRID_ROW',
        p_row_css_db_column     => 'PLUG_GRID_ROW_CSS_CLASSES',
        p_column_db_column      => 'PLUG_DISPLAY_COLUMN',
        p_new_column_db_column  => 'PLUG_NEW_GRID_COLUMN',
        p_column_span_db_column => 'PLUG_GRID_COLUMN_SPAN',
        p_row_span_db_column    => null,
        p_column_css_db_column  => 'PLUG_GRID_COLUMN_CSS_CLASSES',
        p_column_attr_db_column => 'PLUG_COLUMN_WIDTH' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'REGION_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_null_text             => 'None',
        p_default_value         => '#DEFAULT_REGION_TEMPLATE#',
        p_plugin_std_attributes => 'REGION_TEMPLATE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TEMPLATE_OPTIONS',
        p_db_column                   => 'REGION_TEMPLATE_OPTIONS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_parent_comp_prop_name       => 'REGION_TEMPLATE',
        p_depending_on_comp_prop_name => 'REGION_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'APPEARANCE_CSS_CLASSES',
        p_db_column                   => 'REGION_CSS_CLASSES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'REGION_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL',
        p_help_text                   => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~',
        p_comment_text                => '$$$ we should only show this property if the template supports the #REGION_CSS_CLASSES# placeholder' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ICON_CSS_CLASSES',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'REGION_TEMPLATE',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_comment_text                 => '$$$ we should only show this property if the template supports the #ICON_CSS_CLASSES# placeholder' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ITEM_DISPLAY_POSITION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'ABOVE',
        p_plugin_std_attributes       => 'REGION_TEMPLATE' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'USE_LANDMARK',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => 'Y',
        p_depending_on_comp_prop_name => 'REGION_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Landmarks provide a powerful way to identify the organization and structure of a web page. The structural information conveyed visually to users should be represented programmatically in the markup using landmark roles. The use of landmarks roles support keyboard navigation to the structure of a web page for screen reader users, and can be used as targets for browser extensions for enhanced keyboard navigation.</p>
    <p>When using landmarks, all perceivable content (eg all items, buttons, regions, menus, etc. of an APEX app) should be contained in a landmark, in order that content is not missed by the user. When labelling landmarks, you have the option to either use the region title (default), or define a custom Landmark Label on the region.</p>~' );
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'LANDMARK_TYPE',
        p_db_column                     => null,
        p_is_required                   => false,
        p_is_common                     => false,
        p_null_text                     => 'Template Default',
        p_null_help_text                => 'Uses the default landmark type defined in the region template.',
        p_depending_on_comp_prop_name   => 'USE_LANDMARK',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => 'Y',
        p_important_for_accessibility   => true,
        p_parent_comp_prop_name         => 'REGION_TEMPLATE',
        p_accessibility_help_text       => q'~<p>Why landmark types matter:
<ul>
<li>Clarity & Navigation: Each type signifies a specific section's purpose, helping users understand and navigate the page efficiently.</li>
<li>Accessibility Tools: Screen readers and other assistive technologies depend on these landmarks to offer context and streamline user interaction.</li>
<li>Standardized Structure: Choosing the right landmark type promotes a consistent and intuitive browsing experience for all users.</li>
</ul>
</p>~' );
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'LANDMARK_LABEL',
        p_db_column                     => null,
        p_is_required                   => false,
        p_is_common                     => false,
        p_depending_on_comp_prop_name   => 'USE_LANDMARK',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => 'Y',
        p_important_for_accessibility   => true,
        p_accessibility_help_text       => q'~<p>It is important to provide good labels that truly improve user experience. Good labels are defined as follows:
<ul>
<li>Unique on a page, and not too long (preferably 3 words or less).</li>
<li>Accurately describe the purpose of the contents of the region, for example 'Edit Employee', or 'Useful Links'.</li>
<li>Do not use the landmark role in the label, for example the label for a navigation landmark for an application should just be 'Application', rather than 'Application Navigation', to avoid screen readers announcing 'navigation' twice.</li>
</ul>
</p>~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REGION_IMAGE_URL',
        p_db_column         => null,
        p_is_required       => null,
        p_is_common         => false,
        p_depending_on_comp_prop_name => 'REGION_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    -- REGION_TEMPLATE dependency is required for REGION_IMAGE- properties because of
    -- the checks in pe.model.js _isVisible and wwv_flow_property_dev.plb is_visible
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REGION_IMAGE_ALT_TEXT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_depending_on_comp_prop_name  => 'REGION_IMAGE_URL',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_depending_on_comp_prop_name2 => 'REGION_TEMPLATE',
        p_depending_on_condition_type2 => 'NOT_NULL',
        p_important_for_accessibility  => true,
        p_accessibility_help_text      => q'~<p>Alternative Text, serves as a crucial element to enhance accessibility for users with visual impairments. It provides a textual description of images within documents or webpages, offering insights into their significance in relation to the content.</p>
<strong>Best practices:</strong>
<ol>
<li>Purposeful Description:
<ul>
<li>Alt Text should succinctly convey the significance of the image in relation to the surrounding content.</li>
<li>Focus on describing the "why" of the image rather than stating what the image is.</li>
<li>Keep Alt Text clear, concise, and descriptive.</li>
</ul>
</li>
<strong>Example:</strong>
<p>"Team celebrating with high-fives and smiles after successfully completing a challenging project."</p>
In this example, the alt text emphasizes the reason behind the image, which is the successful completion of a challenging project and the resulting celebration among team members. This description provides context and insight into the significance of the image for users who cannot see it directly.
<li>Informative Images:
Identify images that contribute to the comprehension or context of the webpage.
If removing the image would diminish the page's meaning or significance, it requires Alt Text.</li>
<li>Avoid Redundancy:
Omit phrases like "image of" as screen readers automatically announce an image as such.</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REGION_IMAGE_ATTRIBUTES',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_depending_on_comp_prop_name => 'REGION_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL',
        p_depending_on_comp_prop_name2 => 'REGION_IMAGE_URL',
        p_depending_on_condition_type2 => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'MASTER_REGION',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL',
        p_depending_on_comp_prop_name => 'REGION_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_IG' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DOM_STATIC_ID',
        p_db_column                   => 'REGION_NAME',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_help_text                   => q'~<p>Enter the static ID for this region. If defined, this is used as the ID for the region, using the substitution string <code>#REGION_STATIC_ID#</code>, which can be useful if developing custom JavaScript behavior for the region. If this is not defined, the region generates an internal ID.</p>
<p>Note: The template must include the <code>#REGION_STATIC_ID#</code> substitution string, in order for the region to utilize the static ID entered.</p>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CUSTOM_ATTRIBUTES',
        p_db_column             => 'REGION_ATTRIBUTES_SUBSTITUTION',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'REGION_TEMPLATE',
        p_help_text             => q'~Enter the value substituted into region attributes. Region templates that contain the substitution string <code>#REGION_ATTRIBUTES#</code> are substituted with this value.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REGION_IMAGE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_depending_on_comp_prop_name => 'REGION_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IMAGE_TAG_ATTRIBUTES',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_depending_on_comp_prop_name => 'REGION_IMAGE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'REGION_DISPLAY_SELECTOR',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_depending_on_has_to_exist    => false,
        p_depending_on_comp_prop_name  => 'REGION_TEMPLATE',
        p_depending_on_condition_type  => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'EXCLUDE_TITLE_FROM_TRANSLATION',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SCHEMA_OVERRIDE_ITEM',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'REGION_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'NATIVE_SQL_REPORT,NATIVE_IR' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'HEADER_TEXT',
        p_db_column             => 'PLUG_HEADER',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'REGION_TEMPLATE',
        p_help_text             => q'~Enter HTML text displayed at the top of the region, before the <code>#BODY#</code> content.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'FOOTER_TEXT',
        p_db_column             => 'PLUG_FOOTER',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'REGION_TEMPLATE',
        p_help_text             => q'~<p>Enter a region footer that displays directly after the body content, after <code>#BODY#</code> in the region template.
You may use shortcuts, as well as the substitution string <code>#TIMING#</code>, to display the time consumed to render the region.</p>
<p>For report regions you can use the following pagination substitution strings:</p>
<dl>
  <dt><code>#ROWS_FETCHED#</code></dt>
    <dd>Shows the number of rows fetched by the reporting engine (the page size). Use these substitution strings to display customized messages to the user.</dd>
  <dt><code>#TOTAL_ROWS#</code></dt>
    <dd>Displays the total number of rows that satisfy a SQL query used for a report. For example, Z in rows X - Y of Z</dd>
  <dt><code>#FIRST_ROW_FETCHED#</code></dt>
    <dd>The X in rows X - Y of Z</dd>
  <dt><code>#LAST_ROW_FETCHED#</code></dt>
    <dd>The Y in rows X - Y of Z</dd>
</dl>~' );
    --
    store_condition_type_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => null,
        p_help_text_type    => null,
        p_db_column_type    => 'PLUG_DISPLAY_CONDITION_TYPE',
        p_view_column_type  => 'CONDITION_TYPE',
        p_db_column_expr1   => 'PLUG_DISPLAY_WHEN_CONDITION',
        p_db_column_expr2   => 'PLUG_DISPLAY_WHEN_COND2' );
    --
    store_condition_type_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'READ_ONLY',
        p_help_text_type    => '<p>Select a condition type that must be met in order for this region to render page items as read-only.
Not selecting a condition causes the page items to render normally.</p>
<p>Note: If you want a page item in this region (for example a search field) to always render as an enterable page item, independent of how this condition evaluates, then you should set the read only condition of that page item to "Never" to overwrite the region setting.</p>',
        p_db_column_type    => 'PLUG_READ_ONLY_WHEN_TYPE',
        p_view_column_type  => 'READ_ONLY_CONDITION_TYPE',
        p_db_column_expr1   => 'PLUG_READ_ONLY_WHEN',
        p_db_column_expr2   => 'PLUG_READ_ONLY_WHEN2',
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'AUTHORIZATION_SCHEME',
        p_db_column           => 'PLUG_REQUIRED_ROLE',
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ESCAPE_SPECIAL_CHARACTERS',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'Y',
        p_plugin_std_attributes => 'ESCAPE_OUTPUT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CACHE_MODE',
        p_db_column                   => 'PLUG_CACHING',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'NOCACHE',
        p_depending_on_comp_prop_name => 'REGION_TYPE',
        p_depending_on_condition_type => 'IN_LIST_LIKE',
        --
        -- these region types are known to support server-side caching. Plugins remain enabled for
        -- backwards compatibility. Page Designer configuration is implemented as a positive list,
        -- which means a new component must be added here to enable Server Caching.
        --
        p_depending_on_expression     => wwv_flow_string.join(
                                             wwv_flow_t_varchar2(
                                                 'NATIVE_JQM_LIST_VIEW',
                                                 'NATIVE_JQM_REFLOW',
                                                 'NATIVE_JQM_COLUMN_TOGGLE',
                                                 'NATIVE_LIST',
                                                 'NATIVE_URL',
                                                 'NATIVE_IR',
                                                 'NATIVE_SQL_REPORT',
                                                 'NATIVE_TABFORM',
                                                 'NATIVE_PLSQL',
                                                 'NATIVE_JSTREE',
                                                 'NATIVE_CALENDAR',
                                                 'NATIVE_SVG_CHART',
                                                 'NATIVE_SIMPLE_CHART',
                                                 'NATIVE_TREE',
                                                 'NATIVE_STATIC_SEARCH',
                                                 'NATIVE_DYNAMIC_CONTENT',
                                                 --
                                                 'PLUGIN_' ), ',' ) );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CACHE_TIMEOUT',
        p_db_column                   => 'PLUG_CACHING_MAX_AGE_IN_SEC',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '21600',
        p_depending_on_comp_prop_name => 'CACHE_MODE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NOCACHE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CACHE_DEPENDS_ON_ITEMS',
        p_db_column                   => 'PLUG_CACHE_DEPENDS_ON_ITEMS',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'CACHE_MODE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NOCACHE' );
    --
    store_condition_type_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_name_prefix                 => 'CACHE',
        p_help_text_type              => 'Select a condition type that must be met for the region to be cached.',
        p_db_column_type              => 'PLUG_CACHE_WHEN',
        p_view_column_type            => 'CACHE_WHEN',
        p_db_column_expr1             => 'PLUG_CACHE_EXPRESSION1',
        p_db_column_expr2             => 'PLUG_CACHE_EXPRESSION2',
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CACHE_MODE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NOCACHE' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CUSTOMIZABLE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => '0' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CUSTOMIZED_OPTION_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CUSTOMIZABLE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => '1,2' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_build_option  => true,
        p_has_comments      => true,
        p_comment_db_column => 'PLUG_COMMENT' );
    --
    --
    -- Component Properties for PAGE_PROCESS
    --
    l_component_type_id := c_comp_type_page_process;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_process_type_comp_prop (
        p_name_db_column           => 'PROCESS_NAME',
        p_name_help_text           => q'~Enter the name of the process for easy identification by developers.~',
        p_db_column_prefix         => null,
        p_execution_seq_db_column  => 'PROCESS_SEQUENCE',
        p_error_message_db_column  => 'PROCESS_ERROR_MESSAGE',
        p_has_authorization_scheme => true,
        p_build_option_db_column   => null,
        p_comment_db_column        => 'PROCESS_COMMENT' );
    --
    --
    -- Component Properties for Page Process Type "Invoke API" - Parameters
    --
    l_component_type_id           := c_comp_type_pg_proc_api_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_api_param;
    --
    --
    -- Component Properties for Page Process Web Source Parameters
    --
    --
    l_component_type_id           := c_comp_type_page_proc_ws_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'WEB_SRC_PARAM',
        p_db_column           => null,
        p_is_required         => true,
        p_is_common           => true,
        p_is_read_only        => true,
        p_reference_on_delete => 'DB_CASCADE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'API_DIRECTION',
        p_is_required                  => true,
        p_is_common                    => true,
        p_db_column                    => null,
        p_is_read_only                 => true,
        p_help_text                    => q'~The direction of the parameter as defined within the REST Data Source.~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'IGNORE_OUTPUT',
        p_db_column                    => null,
        p_is_required                  => true,
        p_default_value                => 'Y',
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'API_DIRECTION',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'IN_OUT,OUT',
        p_help_text                    => q'~Specify whether the returning value of an IN OUT or OUT parameter should be ignored.~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'WEB_SRC_PARAM_DATA_TYPE',
        p_is_required                  => false,
        p_is_common                    => true,
        p_db_column                    => null,
        p_is_read_only                 => true,
        p_depending_on_comp_prop_name  => 'API_DIRECTION',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'IN,IN_OUT' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'HIDDEN_REQUIRED_VALUE_TYPE',
        p_is_required                  => false,
        p_is_common                    => true,
        p_default_value                => 'BASIC' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'HIDDEN_VALUE_TYPE',
        p_db_column                    => 'VALUE_TYPE',
        p_is_required                  => false,
        p_is_common                    => true,
        p_default_value                => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VALUE_TYPE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'ITEM',
        p_depending_on_comp_prop_name  => 'HIDDEN_REQUIRED_VALUE_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'BASIC' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VALUE_STATIC_VALUE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'STATIC',
        p_depending_on_comp_prop_name2 => 'WEB_SRC_PARAM_DATA_TYPE',
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'BOOLEAN' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VALUE_STATIC_VALUE_BOOLEAN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'STATIC',
        p_depending_on_comp_prop_name2 => 'WEB_SRC_PARAM_DATA_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'BOOLEAN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_QUERY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'HIDDEN_VALUE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_QUERY' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VALUE_ITEM',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'ITEM' );
    --
    store_expression_comp_props (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'VALUE_',
        p_return_type       => 'CUSTOM',
        p_reference_scope   => 'DEPENDS',
        p_type_property     => 'HIDDEN_VALUE_TYPE' );
    --
    store_func_body_comp_props (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'VALUE_',
        p_return_type       => 'CUSTOM',
        p_reference_scope   => 'DEPENDS',
        p_type_property     => 'HIDDEN_VALUE_TYPE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_PREFERENCE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'HIDDEN_VALUE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PREFERENCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_COLLECTION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'HIDDEN_VALUE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'COLLECTION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VALUE_FORMAT_MASK',
        p_is_required                  => false,
        p_is_common                    => false,
        p_db_column                    => null,
        p_is_read_only                 => false,
        p_depending_on_comp_prop_name  => 'WEB_SRC_PARAM_DATA_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'NUMBER,DATE,TIMESTAMP,TIMESTAMP WITH LOCAL TIME ZONE',
        p_depending_on_comp_prop_name2 => 'HIDDEN_VALUE_TYPE',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'STATIC,ITEM,PREFERENCE',
        p_help_text                    => 'Format mask to convert the <strong>Static</strong>, <strong>Item</strong> or <strong>Preference</strong> value to the data type of the REST Source Parameter.' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VALUE_BOOLEAN_TRUE',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_supports_substitution        => false,
        p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'ITEM,PREFERENCE',
        p_depending_on_comp_prop_name2 => 'WEB_SRC_PARAM_DATA_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'BOOLEAN' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VALUE_BOOLEAN_FALSE',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_supports_substitution        => false,
        p_depending_on_comp_prop_name  => 'HIDDEN_VALUE_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'ITEM,PREFERENCE',
        p_depending_on_comp_prop_name2 => 'WEB_SRC_PARAM_DATA_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'BOOLEAN' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --

    --
    --
    -- Component Properties for AUTHENTICATION
    --
    l_component_type_id := c_comp_type_authentication;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter the name used by application developers to reference this authentication scheme.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'AUTHENTICATION_SUBSCRIBED_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'AUTHENTICATION_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'NATIVE_APEX_ACCOUNTS' );
    --
    store_plugin_attr_seq_offset (
        p_component_type_id => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PLSQL_CODE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~<p>Enter a PL/SQL anonymous block of code that contains functions and procedures for verifying if the session is valid, pre- and post-authentication and (optionally) other authentication entry points.</p>
<p>For performance reasons, you can store this code in a PL/SQL package in the database.</p>~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERIFY_FUNCTION_NAME',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'INVALID_SESSION_TYPE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_plugin_std_attributes => 'INVALID_SESSION',
        p_default_value         => 'LOGIN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'INVALID_SESSION_URL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'INVALID_SESSION_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'URL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PRE_AUTHENTICATION_PROCEDURE_NAME',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'POST_AUTHENTICATION_PROCEDURE_NAME',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SWITCH_AUTHENTICATION_IN_SESSION',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LOGOUT_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'HOME' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'POST_LOGOUT_URL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'LOGOUT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'URL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COOKIE_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'A' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COOKIE_NAME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'COOKIE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'C' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COOKIE_PATH',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'COOKIE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'C' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COOKIE_DOMAIN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'COOKIE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'C' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SECURE_COOKIE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'COOKIE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'C' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'RAS_MODE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => '0' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'RAS_DYNAMIC_ROLES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'RAS_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => '1,2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'RAS_NAMESPACES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'RAS_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => '1,2' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'HELP_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true,
        p_help_text             => q'~Text displayed in a help popup window, available on the login page. This should offer guidance and links to resources to assist users of the &PRODUCT_NAME. built-in login page, specific to the type of authentication your application is using (Open Door, &PRODUCT_NAME. account, or LDAP).~' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true );
    --
    --
    -- Component Properties for BRANCH
    --
    l_component_type_id := c_comp_type_branch;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'BRANCH_NAME',
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~Enter the name of the branch for easy identification by developers.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EXECUTION_SEQUENCE',
        p_db_column         => 'BRANCH_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BRANCH_POINT',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'AFTER_PROCESSING' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BRANCH_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'REDIRECT_URL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TARGET',
        p_db_column                   => 'BRANCH_REDIRECT_URL',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'BRANCH_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REDIRECT_URL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SAVE_STATE_BEFORE_BRANCH',
        p_db_column                   => null,
        p_view_column                 => 'SAVE_STATE_BEFORE_BRANCH',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'BRANCH_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REDIRECT_URL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BRANCH_PAGE_NUMBER',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'BRANCH_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'BRANCH_TO_STEP,BRANCH_TO_PAGE_ACCEPT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BRANCH_ACCEPT_REQUEST',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'BRANCH_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'BRANCH_TO_PAGE_ACCEPT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BRANCH_ITEM',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'BRANCH_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'BRANCH_TO_PAGE_IDENT_BY_ITEM,BRANCH_TO_URL_IDENT_BY_ITEM' );
    --
    store_func_body_comp_props (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'BRANCH_',
        p_return_type       => 'VARCHAR2',
        p_type_property     => 'BRANCH_TYPE',
        p_type_operator     => 'IN_LIST',
        p_type_value        => 'BRANCH_TO_FUNCTION_RETURNING_PAGE,BRANCH_TO_FUNCTION_RETURNING_URL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BRANCH_PLSQL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'BRANCH_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PLSQL' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'WHEN_BUTTON_PRESSED',
        p_db_column           => 'BRANCH_WHEN_BUTTON_ID',
        p_is_required         => false,
        p_is_common           => true,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id        => l_component_type_id,
        p_has_condition            => true,
        p_cond_type_db_column      => 'BRANCH_CONDITION_TYPE',
        p_cond_type_view_db_column => 'CONDITION_TYPE',
        p_cond_exp1_db_column      => 'BRANCH_CONDITION',
        p_cond_exp2_db_column      => 'BRANCH_CONDITION_TEXT',
        p_has_authorization_scheme => true,
        p_authorization_db_column  => 'SECURITY_SCHEME',
        p_has_build_option         => true,
        p_has_comments             => true,
        p_comment_db_column        => 'BRANCH_COMMENT' );
    --
    --
    -- Component Properties for META_TAG
    --
    l_component_type_id := c_comp_type_meta_tag;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'META_TAG_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'description' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'META_TAG_VALUE',
        p_is_required           => true,
        p_is_common             => true );
    --
    store_condition_type_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_name_prefix                 => null,
        p_help_text_type              => null,
        p_db_column_type              => 'CONDITION_TYPE',
        p_view_column_type            => 'CONDITION_TYPE',
        p_db_column_expr1             => 'CONDITION_EXPR1',
        p_db_column_expr2             => 'CONDITION_EXPR2' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id        => l_component_type_id,
        p_has_build_option         => true,
        p_build_option_db_column   => 'BUILD_OPTION_ID',
        p_has_comments             => true,
        p_comment_db_column        => 'META_TAG_COMMENT' );
    --
    --
    -- Component Properties for VALIDATION
    --
    l_component_type_id := c_comp_type_validation;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'VALIDATION_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'PAGE',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter the name for the validation. This name should be descriptive so that developers can easily identify conditions being checked.~',
        p_comment_text          => q'~$$$ validation page does not have that constraint, should we add it?~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EXECUTION_SEQUENCE',
        p_db_column         => 'VALIDATION_SEQUENCE',
        p_is_required       => true,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'VALIDATION_REGION',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => true,
        p_reference_on_delete => 'WEAK_CASCADE' );
    --
    store_val_type_comp_props (
        p_name_prefix => null );
    --
    store_val_type_comp_props (
        p_name_prefix => 'REGION' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ALWAYS_EXECUTE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ERROR_MESSAGE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'VALIDATION_TYPE',
        p_depending_on_has_to_exist    => false,
        p_depending_on_condition_type  => 'NOT_EQUALS',
        p_depending_on_expression      => 'FUNC_BODY_RETURNING_ERR_TEXT',
        p_depending_on_comp_prop_name2 => 'REGION_VALIDATION_TYPE',
        p_depending_on_has_to_exist2   => false,
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'FUNC_BODY_RETURNING_ERR_TEXT',
        p_important_for_accessibility  => true,
        p_accessibility_help_text      => q'~<p>Accessible error suggestions foster a more inclusive user experience, aiding users of varying abilities in rectifying input errors efficiently.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Clear and Descriptive:</strong> Error messages should clearly describe the problem or issue encountered by the user in a concise and understandable manner. Avoid using technical jargon or ambiguous language that may confuse users.</li>
<li><strong>Provide Solutions:</strong> Offer clear instructions or suggestions on how users can resolve the error.</li>
<li><strong>Error Identification:</strong> Clearly identify the field or input element that triggered the error. Provide sufficient context to help users understand which part of the form or application needs attention.</li>
<li><strong>Consistent:</strong> Maintain consistency in the format and style of error messages throughout the application or website. Consistent error messaging helps users understand and navigate the interface more effectively.</li>
</ol>
<strong>Examples:</strong>
<ul>
<li>Error: "Invalid email address. Please enter a valid email format (e.g., example@example.com)."</li>
<li>Error: "Insufficient funds. Please add funds to your account to complete the transaction."</li>
</ul>~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ERROR_MESSAGE_DISPLAY_LOCATION',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'INLINE_WITH_FIELD_AND_NOTIFICATION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ASSOCIATED_ITEM',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'VALIDATION_REGION',
        p_depending_on_condition_type => 'NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ASSOCIATED_COLUMN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'VALIDATION_REGION',
        p_depending_on_condition_type => 'NOT_NULL',
        p_parent_comp_prop_name       => 'VALIDATION_REGION' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'WHEN_BUTTON_PRESSED',
        p_db_column           => 'WHEN_BUTTON_PRESSED',
        p_is_required         => false,
        p_is_common           => true,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EXECUTION_SCOPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'VALIDATION_REGION',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_condition_type_comp_prop (
        p_component_type_id          => l_component_type_id,
        p_name_prefix                => null, -- $$$ should validations/processes have their own set of condition types, so that we are able to use "Item / Column ..." in the LOV text?
        p_help_text_type             => null,
        p_reference_scope            => 'DEPENDS',
        -- $$$ should we set that dependency to automatically clear the property if "Validation Region" gets changed?
        -- p_parent_comp_prop_name => 'VALIDATION_REGION',
        p_db_column_type             => 'VALIDATION_CONDITION_TYPE',
        p_view_column_type           => 'CONDITION_TYPE',
        p_db_column_expr1            => 'VALIDATION_CONDITION',
        p_db_column_expr2            => 'VALIDATION_CONDITION2',
        p_has_execute_condition      => true,
        p_execute_cond_dep_prop_name => 'VALIDATION_REGION' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id        => l_component_type_id,
        p_has_authorization_scheme => true,
        p_authorization_db_column  => 'SECURITY_SCHEME',
        p_has_build_option         => true,
        p_has_comments             => true,
        p_comment_db_column        => 'VALIDATION_COMMENT' );
    --
    --
    -- Component Properties for TEMPLATE_OPTION_GROUPS
    --
    l_component_type_id           := c_comp_type_tmpl_option_group;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'TEMPLATE_OPTION_TYPE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'DISPLAY_NAME',
        p_is_required           => true,
        p_is_common             => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IDENTIFIER',
        p_db_column             => 'NAME',
        p_is_required           => true,
        p_is_common             => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IDENTIFICATION_DISPLAY_SEQUENCE',
        p_db_column             => 'DISPLAY_SEQUENCE',
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => '1' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'REFERENCE_ID',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'HELP_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NULL_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IS_ADVANCED',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_default_value         => 'N' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id        => l_component_type_id );
    --
    -- Component Properties for GLOBAL_TEMPLATE_OPTIONS
    --
    l_component_type_id           := c_comp_type_global_tmpl_option;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_tmpl_options (
        p_component_type_id => l_component_type_id,
        p_type_name         => 'GLOBAL' );
    --
    --
    --
    -- Component Properties for THEME
    --
    l_component_type_id           := c_comp_type_theme;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'THEME_NUMBER',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_default_value         => null );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'THEME_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~<p>Provides a short descriptive name for the theme.</p>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IDENTIFIER',
        p_db_column             => 'THEME_INTERNAL_NAME',
        p_is_required           => true,
        p_is_common             => false,
        p_supports_substitution => false,
        p_help_text             => q'~Specifies the internal theme identifier.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'THEME_VERSION',
        p_db_column             => 'VERSION_IDENTIFIER',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'REFERENCE_ID',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAVIGATION_TYPE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_default_value         => 'L' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAVIGATION_BAR_IMPLEMENTATION',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_default_value         => 'LIST' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DESCRIPTION',
        p_db_column             => 'THEME_DESCRIPTION',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false,
        p_help_text             => q'~Provides a short description for the theme.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'JS_FILE_URLS',
        p_db_column             => 'JAVASCRIPT_FILE_URLS',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false,
        p_examples              => q'~<p><ul>
  <li>Standard file reference which loads the file from the theme directory:
      <pre>#THEME_IMAGES#main.js</pre>
  </li>
  <li>Standard file reference which loads the minified file main.min.js from /myjs/minified/ for regular page views and main.js from /myjs/ in debug mode:
      <pre>/myjs/#MIN_DIRECTORY#main#MIN#.js</pre>
  </li>
  <li>Use this syntax if the library is also used from a RequireJS require call. The define name must match what is used in the requirejs.config paths and the value must be the global symbol exposed by the library. Only applies when using RequireJS. This avoids RequireJS  loading that library a second time.
      <pre>[define hammerjs=Hammer]/myjs/hammer.js</pre>
  </li>
  <li>Use this syntax if the file has a dependency on RequireJS. This will automatically load RequireJS before this file.
      <pre>[require requirejs]/myjs/main.js</pre>
  </li>
  <li>Use this syntax if the file has a dependency on Oracle JET. This will automatically load RequireJS and the Oracle JET RequireJS configuration before this file.
      <pre>[require jet]/myjs/main.js</pre>
  </li>
</ul></p>~',
        p_help_text             => q'~<p>Enter JavaScript file URLs for code to be loaded on every page. Each URL has to be written into a new line. If you provide a minified version of your file, you can use the substitution string <code>#MIN#</code> to include <code>.min</code> or <code>#MIN_DIRECTORY#</code> to include <code>minified/</code> in your file URL for a regular page view and an empty string if the page is viewed in debug mode.</p>
<p>JavaScript file URLs you enter here replaces the <code>#THEME_JAVASCRIPT#</code> substitution string in the page template.</p>
<p>Note: You do not need to include opening or closing <code>script</code> tags. Just write the URL.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CSS_FILE_URLS',
        p_db_column             => 'CSS_FILE_URLS',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false,
        p_examples              => q'~<p><ul>
  <li>Standard file reference which loads the file from the theme directory
      <pre>/mycss/main.css</pre>
  </li>
  <li>Standard file reference which loads the minified file main.min.css from /mycss/minified/ for regular page views and main.css from /mycss/ in debug mode.
      <pre>/mycss/#MIN_DIRECTORY#main#MIN#.css</pre>
  </li>
  <li>Conditional media query
      <pre>[media="only screen and (max-device-width: 480px)"]/mycss/smartphone.css</pre>
  </li>
  <li>File reference using a query string in the URL referencing the application version, such that when the application is upgraded (and the version is incremented), the browser is instructed to always load the new file and ignore any previously cached files.
      <pre>/mycss/main.css?version=#APP_VERSION#</pre>
  </li>
</ul></p>~',
        p_help_text             => q'~<p>Enter Cascading Style Sheet file URLs to be loaded on every page. Each URL has to be written into a new line. If you provide a minified version of your file you can use the substitution string <code>#MIN#</code> to include <code>.min</code> or <code>#MIN_DIRECTORY#</code> to include <code>minified/</code> in your file URL for a regular page view and an empty string if the page is viewed in debug mode. You also have access to the substitution string <code>#APP_VERSION#</code> if you want to include the application's version in the file URL.</p>
<p>File URLs you enter here will replace the <code>#THEME_CSS#</code> substitution string in the page template.</p>
<p>Note: You do not need to include opening or closing <code>link</code> tags. Just include the file URL.</p>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CURRENT_THEME_STYLE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_PAGE_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_NAVIGATION_BAR_LIST_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_NAVIGATION_MENU_LIST_POSITION_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_default_value         => 'TOP' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_NAVIGATION_MENU_LIST_TOP_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_NAVIGATION_MENU_LIST_SIDE_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_LOGIN_PAGE_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_ERROR_PAGE_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_PRINTER_FRIENDLY_PAGE_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_BREADCRUMB_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_BUTTON_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_LEGACY_CALENDAR_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_DEFAULT_LABEL_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_OPTION_LABEL_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_REQUIRED_LABEL_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_LIST_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name         => 'DEFAULT_REGION_TMPL',
        p_db_column             => 'DEFAULT_REGION_TEMPLATE',
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_CLASSIC_REPORT_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_HEADER_TOOLBAR_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_FOOTER_TOOLBAR_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_BREADCRUMBS_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_CHARTS_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_FORMS_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_LISTS_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_REPORTS_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_WIZARDS_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_INTERACTIVE_REPORTS_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_DIALOG_CONTENT_REGION_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_DIALOG_BUTTON_REGION_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_DIALOG_PAGE_TMPL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'THEME_ICON_LIBRARY',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CUSTOM_LIBRARY_FILE_URLS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CUSTOM_ICON_CLASSES',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CUSTOM_ICON_PREFIX_CLASS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DATE_PICKER_ICON_NAME',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DATE_PICKER_ICON_ATTRIBUTES',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'FILE_PREFIX',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for THEME_FILES
    --
    l_component_type_id           := c_comp_type_theme_file;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_static_file;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'REFERENCE_ID',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    --
    -- Component Properties for THEME_STYLE
    --
    l_component_type_id           := c_comp_type_theme_style;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~Provide a short descriptive name for the theme style, to distinguish it from other styles in the theme.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'REFERENCE_ID',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IS_CURRENT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IS_PUBLIC',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ACCESSIBILITY_TESTED',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_important_for_accessibility => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CSS_FILE_URLS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false,
        p_examples                 => q'~<p><ul>
  <li>Standard file reference which loads the file from the theme directory.
      <pre>#THEME_IMAGES#main.css</pre>
  </li>
  <li>Standard file reference which loads the minified file main.min.css from /mycss/minified/ for regular page views and main.css from /mycss/ in debug mode.
      <pre>/mycss/#MIN_DIRECTORY#main#MIN#.css</pre>
  </li>
  <li>Conditional media query
      <pre>[media="only screen and (max-device-width: 480px)"]/mycss/smartphone.css</pre>
  </li>
  <li>File reference using a query string in the URL referencing the application version, such that when the application is upgraded (and the version is incremented), the browser is instructed to always load the new file and ignore any previously cached files.
      <pre>/mycss/main.css?version=#APP_VERSION#</pre>
  </li>
</ul></p>~',
        p_help_text                => q'~<p>Enter Cascading Style Sheet file URLs to be loaded on every page if the theme style is current. Each URL has to be written into a new line. If you provide a minified version of your file you can use the substitution string <code>#MIN#</code> to include <code>.min</code> or <code>#MIN_DIRECTORY#</code> to include <code>minified/</code> in your file URL for a regular page view and an empty string if the page is viewed in debug mode. You also have access to the substitution string <code>#APP_VERSION#</code> if you want to include the application's version in the file URL.</p>
<p>File URLs you enter here will replace the <code>#THEME_STYLE_CSS#</code> substitution string in the page template.</p>
<p>Note: You do not need to include opening or closing <code>link</code> tags. Just include the file URL.</p>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'THEME_STYLE_CSS_CLASSES',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'THEME_ROLLER_READ_ONLY',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'THEME_ROLLER_INPUT_FILE_URLS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'THEME_ROLLER_OUTPUT_FILE_URL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'JSON_CONFIGURATION',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_standard_attr_comp_prop (
        p_has_comments          => true,
        p_comment_db_column     => 'COMPONENT_COMMENT' );
    --
    --
    -- Component Properties for PAGE_TEMPLATE
    --
    l_component_type_id           := c_comp_type_page_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_template_std_comp_props(
        p_template_type               => 'PAGE',
        p_identifier_db_column        => 'INTERNAL_NAME' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TEMPLATE_HEADER',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TEMPLATE_BODY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TEMPLATE_FOOTER',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_FILE_URLS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_FUNCTION_AND_GLOBAL_VARIABLE_DECLARATION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_EXECUTE_WHEN_PAGE_LOADS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_INITIALIZATION_CODE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PAGE_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_CLOSURE_CODE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PAGE_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_CANCEL_CODE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PAGE_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CSS_FILE_URLS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'INLINE_CSS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TEMPLATE_SUCCESS_MESSAGE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TEMPLATE_NAVIGATION_BAR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TEMPLATE_NAVIGATION_BAR_ENTRY',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TEMPLATE_NOTIFICATION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => true );
    --
    --
    /* $$$ The following depending_on.... are commented out due to a check against the theme $$$ */
    /* select 1
         from wwv_flow_themes
        where flow_id = :fb_flow_id
          and nvl(navigation_type,'T') = 'L' */
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TEMPLATE_CURRENT_TAB',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false
--        p_depending_on_comp_prop_name => 'PAGE_NAVIGATION_TYPE',
--        p_depending_on_condition_type => 'EQUALS',
--        p_depending_on_expression     => 'L'
        );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TEMPLATE_CURRENT_TAB_FONT_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false
--        p_depending_on_comp_prop_name => 'PAGE_NAVIGATION_TYPE',
--        p_depending_on_condition_type => 'EQUALS',
--        p_depending_on_expression     => 'L'
        );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TEMPLATE_NON_CURRENT_STANDARD_TAB',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false
--        p_depending_on_comp_prop_name => 'PAGE_NAVIGATION_TYPE',
--        p_depending_on_condition_type => 'EQUALS',
--        p_depending_on_expression     => 'L'
        );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TEMPLATE_NON_CURRENT_TAB_FONT_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false
--        p_depending_on_comp_prop_name => 'PAGE_NAVIGATION_TYPE',
--        p_depending_on_condition_type => 'EQUALS',
--        p_depending_on_expression     => 'L'
        );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TEMPLATE_CURRENT_PARENT_TAB',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false
--        p_depending_on_comp_prop_name => 'PAGE_NAVIGATION_TYPE',
--        p_depending_on_condition_type => 'EQUALS',
--        p_depending_on_expression     => 'L'
        );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TEMPLATE_PARENT_CURR_TAB_FONT_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false
--        p_depending_on_comp_prop_name => 'PAGE_NAVIGATION_TYPE',
--        p_depending_on_condition_type => 'EQUALS',
--        p_depending_on_expression     => 'L'
        );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TEMPLATE_NON_CURRENT_PARENT_TAB',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false
--        p_depending_on_comp_prop_name => 'PAGE_NAVIGATION_TYPE',
--        p_depending_on_condition_type => 'EQUALS',
--        p_depending_on_expression     => 'L'
        );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TEMPLATE_PARENT_NON_CURR_TAB_FONT_ATTR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false
--        p_depending_on_comp_prop_name => 'PAGE_NAVIGATION_TYPE',
--        p_depending_on_condition_type => 'EQUALS',
--        p_depending_on_expression     => 'L'
        );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CURRENT_IMAGE_TAB',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NON_CURRENT_IMAGE_TAB',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name               => 'PAGE_GRID_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GRID_MAXIMUM_COLUMNS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PAGE_GRID_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'FIXED,VARIABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GRID_ALWAYS_USE_MAX_COLUMNS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'PAGE_GRID_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'FIXED' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name               => 'GRID_HAS_COLUMN_SPAN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'PAGE_GRID_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'FIXED,VARIABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GRID_ALWAYS_RENDER_LAYOUT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'PAGE_GRID_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'FIXED,VARIABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GRID_EMIT_EMPTY_LEADING_COLUMNS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'PAGE_GRID_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'FIXED,VARIABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GRID_EMIT_EMPTY_TRAILING_COLUMNS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'PAGE_GRID_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'FIXED,VARIABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GRID_DEFAULT_LABEL_COLUMN_SPAN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PAGE_GRID_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'FIXED,VARIABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GRID_FIRST_COLUMN_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PAGE_GRID_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'FIXED,VARIABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GRID_LAST_COLUMN_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PAGE_GRID_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'FIXED,VARIABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GRID_REGION_TABLE_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PAGE_GRID_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GRID_CONTAINER_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => true,
        p_depending_on_comp_prop_name => 'PAGE_GRID_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'FIXED,VARIABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GRID_ROW_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => true,
        p_depending_on_comp_prop_name => 'PAGE_GRID_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'FIXED,VARIABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GRID_COLUMN_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => true,
        p_depending_on_comp_prop_name => 'PAGE_GRID_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'FIXED,VARIABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GRID_JAVASCRIPT_DEBUG_CODE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PAGE_GRID_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'FIXED,VARIABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BREADCRUMB_POSITION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SIDEBAR_POSITION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_WIDTH',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PAGE_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_HEIGHT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PAGE_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_MAX_WIDTH',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PAGE_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_CSS_CLASSES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PAGE_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_EMBED_IN_FRAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PAGE_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ERROR_PAGE_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => true );
    --
    store_standard_attr_comp_prop (
        p_has_comments      => true,
        p_comment_db_column => 'TEMPLATE_COMMENT' );
    --
    --
    -- Component Properties for PAGE_TEMPLATE_OPTIONS
    --
    l_component_type_id           := c_comp_type_page_tmpl_option;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_tmpl_options (
        p_component_type_id => l_component_type_id,
        p_type_name         => 'PAGE',
        p_default_value     => 'PAGE' );
    --
    --
    -- Component Properties for FIELD_TEMPLATE
    --
    l_component_type_id           := c_comp_type_field_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_template_std_comp_props(
        p_template_type         => 'FIELD',
        p_name_db_column        => 'TEMPLATE_NAME',
        p_identifier_db_column  => 'INTERNAL_NAME' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BEFORE_LABEL_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'AFTER_LABEL_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BEFORE_ITEM_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'AFTER_ITEM_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ITEM_PRE_TEXT_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ITEM_POST_TEXT_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'HELP_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'INLINE_HELP_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ON_ERROR_BEFORE_LABEL_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ON_ERROR_AFTER_LABEL_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ERROR_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BEFORE_LABEL_AND_ITEM_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'AFTER_LABEL_AND_ITEM_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_standard_attr_comp_prop (
        p_has_comments          => true,
        p_comment_db_column     => 'TEMPLATE_COMMENT' );
    --
    --
    -- Component Properties for FIELD_TEMPLATE_OPTIONS
    --
    l_component_type_id           := c_comp_type_field_tmpl_option;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_tmpl_options (
        p_component_type_id => l_component_type_id,
        p_type_name         => 'FIELD',
        p_default_value     => 'FIELD' );
    --
    --
    -- Component Properties for PAGE_TEMPLATE_DISPLAY_POINTS
    --
    l_component_type_id           := c_comp_type_display_point;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => null,
        p_check_uniqueness      => 'PARENT' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'TEMPLATE_SUBSTITUTION',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => null,
        p_check_uniqueness      => 'PARENT' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SLOT_REGION_SUPPORT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'Y' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SLOT_ITEM_SUPPORT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'N' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SLOT_BUTTON_SUPPORT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'N' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SLOT_GRID_SUPPORT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'Y' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SLOT_MAX_FIXED_GRID_COLUMNS',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => null );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SLOT_NEW_ROW',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'Y' );
    --
    store_standard_attr_comp_prop (
        p_has_comments          => true,
        p_comment_db_column     => 'COMPONENT_COMMENT' );
    --
    --
    -- Component Properties for BUTTON_TEMPLATE
    --
    l_component_type_id           := c_comp_type_button_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_template_std_comp_props(
        p_template_type         => 'BUTTON',
        p_name_db_column        => 'TEMPLATE_NAME',
        p_identifier_db_column  => 'INTERNAL_NAME' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BUTTON_NORMAL_TEMPLATE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BUTTON_HOT_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_standard_attr_comp_prop (
        p_has_comments          => true,
        p_comment_db_column     => 'TEMPLATE_COMMENT' );
    --
    --
    -- Component Properties for BUTTON_TEMPLATE_OPTIONS
    --
    l_component_type_id           := c_comp_type_button_tmpl_option;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_tmpl_options (
        p_component_type_id => l_component_type_id,
        p_type_name         => 'BUTTON',
        p_default_value     => 'BUTTON' );
    --
    --
    -- Component Properties for REGION_TEMPLATE
    --
    l_component_type_id           := c_comp_type_region_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_template_std_comp_props(
        p_template_type         => 'REGION',
        p_name_db_column        => 'PAGE_PLUG_TEMPLATE_NAME',
        p_identifier_db_column  => 'INTERNAL_NAME' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'HTML_TABLE_ATTRIBUTES',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    resequence_comp_prop (
        p_component_type_id     => l_component_type_id,
        p_name                  => 'HTML_TABLE_ATTRIBUTES',
        p_previous_name         => 'TEMPLATE_TRANSLATABLE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'REGION_BODY_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LANDMARK_TYPE',
        p_db_column             => 'DEFAULT_LANDMARK_TYPE',
        p_is_required           => false,
        p_is_common             => false,
        p_help_text                => q'~<p>Define the default landmark type to be used for this region template. When this region template is used by a region, this will be the landmark type exposed to screen reader users, unless this has been overridden at region level.</p>
<p>Note: In order for this functionality to work, the Template attribute must include the <code>#REGION_LANDMARK_ATTRIBUTES#</code> substitution string. This should be defined on the main container element of the template.</p>
<p>Landmarks provide a powerful way to identify the organization and structure of a web page. The structural information conveyed visually to users should be represented programmatically in the markup using landmark roles. The use of landmarks roles support keyboard navigation to the structure of a web page for screen reader users, and can be used as targets for browser extensions for enhanced keyboard navigation.</p>
<p>The <a rel="noopener noreferrer" target="_blank" href="https://www.w3.org/WAI/ARIA/apg/example-index/landmarks/index.html">W3C ARIA Landmarks site</a> provides useful information, including a good reference implementation (click on the 'Show Landmarks' button to visualise well defined landmarks).</p>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'REGION_TITLE_HTML_ID',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SUB_REGION_HEADER_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SUB_REGION_HEADER_ENTRY_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SUB_REGION_BODY_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'REGION_IMAGE_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'JS_FILE_URLS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'JS_EXECUTE_WHEN_PAGE_LOADS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CSS_FILE_URLS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_standard_attr_comp_prop (
        p_has_comments          => true,
        p_comment_db_column     => 'TEMPLATE_COMMENT' );
    --
    --
    -- Component Properties for REGION_TEMPLATE_OPTIONS
    --
    l_component_type_id           := c_comp_type_region_tmpl_option;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_tmpl_options (
        p_component_type_id => l_component_type_id,
        p_type_name         => 'REGION',
        p_default_value     => 'REGION' );
    --
    --
    -- Component Properties for LIST_TEMPLATE
    --
    l_component_type_id           := c_comp_type_list_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_template_std_comp_props(
        p_template_type         => 'LIST',
        p_name_db_column        => 'LIST_TEMPLATE_NAME',
        p_identifier_db_column  => 'INTERNAL_NAME' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LIST_TEMPLATE_BEFORE_ROWS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LIST_TEMPLATE_BETWEEN_ENTRIES',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LIST_TEMPLATE_CURRENT_ENTRY',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LIST_TEMPLATE_CURRENT_ENTRY_WITH_SUBLIST',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LIST_TEMPLATE_NONCURRENT_ENTRY',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LIST_TEMPLATE_NONCURRENT_ENTRY_WITH_SUBLIST',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LIST_TEMPLATE_CURRENT_1ST',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LIST_TEMPLATE_CURRENT_ENTRY_WITH_SUBLIST_1ST',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LIST_TEMPLATE_NONCURRENT_ENTRY_1ST',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LIST_TEMPLATE_NONCURR_WITH_SUBLIST_ITEMS_1ST',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LIST_TEMPLATE_SUBLIST_BEFORE_ROWS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LIST_TEMPLATE_BETWEEN_SUBLIST_ENTRIES',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SUBLIST_TEMPLATE_AFTER_ROWS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LIST_TEMPLATE_SUBLIST_CURRENT_ENTRY',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LIST_TEMPLATE_SUBLIST_CURR_ENTRY_WITH_SUBLIST',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LIST_TEMPLATE_SUBLIST_NONCURRENT_ENTRY',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LIST_TEMPLATE_SUBLIST_NONCURR_ENTRY_WITH_SUBL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LIST_TEMPLATE_AFTER_ROWS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'JS_FILE_URLS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'JS_EXECUTE_WHEN_PAGE_LOADS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CSS_FILE_URLS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'INLINE_CSS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_list_tmpl_att_comp_props (
        p_componant_type_id     => l_component_type_id,
        p_attribute_count       => 20 );
    --
    store_standard_attr_comp_prop (
        p_has_comments          => true,
        p_comment_db_column     => 'LIST_TEMPLATE_COMMENT' );
    --
    --
    -- Component Properties for LIST_TEMPLATE_OPTIONS
    --
    l_component_type_id           := c_comp_type_list_tmpl_option;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_tmpl_options (
        p_component_type_id => l_component_type_id,
        p_type_name         => 'LIST',
        p_default_value     => 'LIST' );
    --
    --
    -- Component Properties for BREADCRUMB_TEMPLATE
    --
    l_component_type_id           := c_comp_type_bc_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_template_std_comp_props(
        p_template_type         => 'BREADCRUMB',
        p_identifier_db_column  => 'INTERNAL_NAME' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BREADCRUMB_START_WITH',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'PARENT_TO_LEAF' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BREADCRUMB_BEFORE_FIRST_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BREADCRUMB_CURRENT_PAGE_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BREADCRUMB_NON_CURRENT_PAGE_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BREADCRUMB_AFTER_LAST_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BREADCRUMB_BETWEEN_LEVELS_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BREADCRUMB_MAXIMUM_LEVELS_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_default_value         => '99',
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LINK_ATTRIBUTES',
        p_db_column             => 'MENU_LINK_ATTRIBUTES',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false,
        p_help_text             => q'~To display the hypertext link for the breadcrumb entry, add the following text to the HTML anchor tag in the position of the "X":<br>
<pre>
&amp;lt;A HREF="..." X&amp;gt;
</pre>~' );
    --
    store_standard_attr_comp_prop (
        p_has_comments          => true,
        p_comment_db_column     => 'TEMPLATE_COMMENTS' );
    --
    --
    -- Component Properties for BREADCRUMB_TEMPLATE_OPTIONS
    --
    l_component_type_id           := c_comp_type_bc_tmpl_option;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_tmpl_options (
        p_component_type_id => l_component_type_id,
        p_type_name         => 'BREADCRUMB',
        p_default_value     => 'BREADCRUMB' );
    --
    --
    -- Component Properties for CALENDAR_TEMPLATE
    --
    l_component_type_id           := c_comp_type_calendar_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_template_std_comp_props(
        p_template_type         => 'CALENDAR',
        p_name_import_api_param => 'cal_template_name',
        p_identifier_db_column  => 'INTERNAL_NAME' );
    --
    store_standard_attr_comp_prop (
        p_has_comments          => true,
        p_comment_db_column     => 'TEMPLATE_COMMENTS' );
/*
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
*/
    --
    -- Component Properties for REPORT_TEMPLATE
    --
    l_component_type_id           := c_comp_type_report_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_template_std_comp_props(
        p_template_type               => 'CLASSIC_REPORT',
        p_name_db_column              => 'ROW_TEMPLATE_NAME',
        p_identifier_db_column        => 'INTERNAL_NAME' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BEFORE_FIRST_ROW',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '<table>',
        p_supports_substitution       => true,
        p_depending_on_comp_prop_name => 'CLASSIC_REPORT_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'GENERIC_COLUMNS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ROW_BEFORE_FIRST_ROW',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '<table>',
        p_supports_substitution       => true,
        p_depending_on_comp_prop_name => 'CLASSIC_REPORT_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NAMED_COLUMNS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AFTER_LAST_ROW',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '</table>',
        p_supports_substitution       => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BEFORE_COLUMN_HEADING',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'CLASSIC_REPORT_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'GENERIC_COLUMNS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COLUMN_HEADING_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'CLASSIC_REPORT_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'GENERIC_COLUMNS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ROW_COLUMN_HEADING_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'CLASSIC_REPORT_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NAMED_COLUMNS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AFTER_COLUMN_HEADING',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'CLASSIC_REPORT_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'GENERIC_COLUMNS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BEFORE_EACH_ROW',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'CLASSIC_REPORT_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'GENERIC_COLUMNS' );
    --
    -- Store templates 1 to 4 for column and row based report templates
    store_comp_prop_report_tmpl;
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AFTER_EACH_ROW',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'CLASSIC_REPORT_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'GENERIC_COLUMNS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BACKGROUND_COLOR_FOR_CHECKED_ROW',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'CLASSIC_REPORT_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'GENERIC_COLUMNS',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Enhancing report accessibility through mindful color selection and compliance with WCAG standards is crucial for ensuring inclusivity in report visualization.</p>
<strong>Best Practices:</strong>
<ul>
<li><strong>Check Color Contrast Ratio:</strong> Utilize contrast checking tools to evaluate the color contrast ratio between foreground and background colors. Aim for a ratio of at least 4.5:1 to ensure readability for individuals with varying levels of vision impairment.</li>
</ul>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BACKGROUND_COLOR_FOR_CURRENT_ROW',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'CLASSIC_REPORT_TEMPLATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'GENERIC_COLUMNS',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Enhancing report accessibility through mindful color selection and compliance with WCAG standards is crucial for ensuring inclusivity in report visualization.</p>
<strong>Best Practices:</strong>
<ul>
<li><strong>Check Color Contrast Ratio:</strong> Utilize contrast checking tools to evaluate the color contrast ratio between foreground and background colors. Aim for a ratio of at least 4.5:1 to ensure readability for individuals with varying levels of vision impairment.</li>
</ul>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGINATION_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NEXT_PAGE_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PREVIOUS_PAGE_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NEXT_SET_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PREVIOUS_SET_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_FILE_URLS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_EXECUTE_WHEN_PAGE_LOADS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CSS_FILE_URLS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_standard_attr_comp_prop (
        p_has_comments                => true,
        p_comment_db_column           => 'ROW_TEMPLATE_COMMENT' );
    --
    --
    -- Component Properties for REPORT_TEMPLATE_OPTIONS
    --
    l_component_type_id           := c_comp_type_report_tmpl_option;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_tmpl_options (
        p_component_type_id           => l_component_type_id,
        p_type_name                   => 'REPORT',
        p_default_value               => 'REPORT' );
    --
    --
    -- Component Properties for POPUP_LOV_TEMPLATE
    --
    l_component_type_id           := c_comp_type_popup_lov_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_template_std_comp_props(
        p_template_type         => 'POPUP_LOV',
        p_name_db_column        => 'PAGE_TITLE',
        p_identifier_db_column  => 'PAGE_NAME' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_ICON',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_ICON_ATTRIBUTES',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_COLOR_PICKER_ICON',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_COLOR_PICKER_ICON_ATTR',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_BEFORE_FIELD_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_AFTER_FIELD_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_FILTER_WIDTH',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_FILTER_MAX_WIDTH',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_FILTER_TEXT_ATTRIBUTES',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_FIND_BUTTON_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_FIND_BUTTON_ATTRIBUTES',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_CLOSE_BUTTON_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_CLOSE_BUTTON_ATTRIBUTES',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_NEXT_BUTTON_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_NEXT_BUTTON_ATTR',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_PREV_BUTTON_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_PREV_BUTTON_ATTRIBUTES',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_SCROLL_BARS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_RESIZABLE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_WIDTH',
        p_db_column             => null,
        p_default_value         => '450',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_HEIGHT',
        p_db_column             => null,
        p_default_value         => '400',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_PAGINATION_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_PAGINATION_SIZE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_BEFORE_RESULT_SET',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_AFTER_RESULT_SET',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_PAGE_HTML_HEAD',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_PAGE_BODY_ATTRIBUTES',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_PAGE_HEADING_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POPUP_LOV_PAGE_FOOTER_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id     => l_component_type_id,
        p_has_comments          => true,
        p_comment_db_column     => 'TEMPLATE_COMMENT' );
    --
    --
    -- Component Properties for LANGUAGE_MAP
    --
    l_component_type_id           := c_comp_type_language_map;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'TRANSLATION_APPLICATION_ID',
        p_db_column         => null,
        p_check_uniqueness  => 'INSTANCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'I18N_LANGUAGE',
        p_db_column         => 'TRANSLATION_FLOW_LANGUAGE_CODE',
        p_is_required       => true,
        p_is_common         => true,
        p_help_text         => q'~Select the language to be translated.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IMAGE_DIRECTORY',
        p_db_column             => 'TRANSLATION_IMAGE_DIRECTORY',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true,
        p_help_text             => q'~Enter the directory where images will be obtained.  Unless you are using static files from the images directory which are translated, you can leave this field blank.  This is the default and most common option.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DOCUMENT_DIRECTION',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true,
        p_null_text         => 'Language Default');

    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'TRANSLATION_COMMENTS' );
    --
    --
    -- Component Properties for DYNAMIC_TRANSLATION
    --
    l_component_type_id           := c_comp_type_dyn_translation;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'TRANSLATE_FROM_TEXT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'I18N_LANGUAGE',
        p_db_column         => 'TRANSLATE_TO_LANG_CODE',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#APP_LANGUAGE#',
        p_help_text         => q'~Select a language to translate to.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'TRANSLATE_TO_TEXT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id );

    --
    --
    -- Component Properties for CONCATENATED_FILE
    --
    l_component_type_id           := c_comp_type_concatenated_file;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CONCATENATED_FILE_URL',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SINGLE_FILE_URLS',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ONLY_FOR_PAGE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_standard_attr_comp_prop (
        p_has_build_option       => true,
        p_build_option_db_column => 'REQUIRED_PATCH' );
    --
    --
    --
    -- Component Properties for IR_ATTRIBUTES
    --
    l_component_type_id := c_comp_type_ir_attributes;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IR_LINK_COLUMN',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'UNIQUELY_IDENTIFY_ROWS_BY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'ROWID',
        p_depending_on_comp_prop_name => 'IR_LINK_COLUMN',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'UNIQUE_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'UNIQUELY_IDENTIFY_ROWS_BY',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'COLUMN',
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL' );
    --
/* $$$ not used by current IR edit page
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'UNIQUE_COLUMN_2',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'UNIQUE_COLUMN',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'UNIQUE_COLUMN_3',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'UNIQUE_COLUMN_2',
        p_depending_on_condition_type => 'NOT_NULL' );
*/
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_TARGET',
        p_db_column                   => 'DETAIL_LINK',
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'IR_LINK_COLUMN',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'C' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_ICON',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '#LINK_ICON#',
        p_depending_on_comp_prop_name => 'IR_LINK_COLUMN',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'Y,C' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_ATTRIBUTES',
        p_db_column                   => 'DETAIL_LINK_ATTR',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_LINK_COLUMN',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'Y,C' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_AUTHORIZATION_SCHEME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_LINK_COLUMN',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'Y,C' );
    --
    store_condition_type_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_name_prefix                 => 'LINK',
        p_help_text_type              => null,
        p_db_column_type              => null,
        p_view_column_type            => 'DETAIL_LINK_CONDITION_TYPE',
        p_db_column_expr1             => null,
        p_db_column_expr2             => null,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_LINK_COLUMN',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'Y,C' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_EXCLUDE_NULL_VALUES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'IR_LINK_COLUMN',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_HIDE_EXTRA_COLUMNS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'IR_LINK_COLUMN',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SHOW_NULL_VALUES_AS',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IR_PAGINATION_TYPE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => 'ROWS_X_TO_Y',
        p_null_text         => 'None' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGINATION_DISPLAY_POSITION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'BOTTOM_RIGHT',
        p_depending_on_comp_prop_name => 'IR_PAGINATION_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'LAZY_LOADING',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'MAXIMUM_ROW_COUNT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => '1000000' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_comment_text      => q'~$$$ default value "No data found." -> Engine should use that as default if nothing is defined. $$$ BTW, doesn't the region have a "No Data Found" column as well?~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'WHEN_MORE_DATA_FOUND_MESSAGE',
        p_db_column         => 'MAX_ROW_COUNT_MESSAGE',
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Enter the text message that displays when more rows are returned from the query than the maximum row count entered.~',
        p_comment_text      => q'~$$$ default value "This query returns more than...", but I think that we should always set it to NULL and the Engine should automatically use that text if nothing is defined~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'INCLUDE_SEARCH_BAR',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_SEARCH_TEXTBOX',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'INCLUDE_SEARCH_BAR',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_FINDER_DROP_DOWN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_SEARCH_TEXTBOX',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_REPORTS_SELECT_LIST',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'TABS',
        p_depending_on_comp_prop_name => 'INCLUDE_SEARCH_BAR',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_DISPLAY_ROW_COUNT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'INCLUDE_SEARCH_BAR',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SEARCH_BUTTON_LABEL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'INCLUDE_SEARCH_BAR',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAXIMUM_ROWS_PER_PAGE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'INCLUDE_SEARCH_BAR',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_ACTIONS_MENU',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'INCLUDE_SEARCH_BAR',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_FILTER',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_SELECT_COLUMNS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_ROWS_PER_PAGE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_SORT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_CONTROL_BREAK',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_HIGHLIGHT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_COMPUTATION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_AGGREGATE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_CHART',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_GROUP_BY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_PIVOT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_FLASHBACK',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_SAVE_REPORTS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_SAVE_PUBLIC_REPORT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'ALLOW_USERS_TO_SAVE_REPORTS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SAVE_PUBLIC_REPORT_AUTHORIZATION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'ALLOW_USERS_TO_SAVE_PUBLIC_REPORT',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_RESET',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_HELP',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_DOWNLOAD',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_NOTIFY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_DOWNLOAD',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DOWNLOAD_AUTH_SCHEME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_DOWNLOAD',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DOWNLOAD_FORMATS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'CSV:HTML:XLSX:PDF',
        p_depending_on_comp_prop_name => 'SHOW_DOWNLOAD',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ENABLE_MAIL_DOWNLOAD',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_DOWNLOAD',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CSV_SEPARATOR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'DOWNLOAD_FORMATS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'CSV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CSV_ENCLOSED_BY',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'DOWNLOAD_FORMATS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'CSV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DOWNLOAD_FILENAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_DOWNLOAD',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SUPPLEMENTAL_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'DOWNLOAD_FORMATS',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'FIXED_HEADER',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'PAGE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FIXED_HEADER_MAX_HEIGHT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'FIXED_HEADER',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REGION' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ICON_VIEW_ENABLED',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'USE_CUSTOM_ICON_VIEW',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'ICON_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COLUMNS_PER_ROW',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '6',
        p_depending_on_comp_prop_name => 'ICON_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_LINK_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_IMAGE_SOURCE_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_LABEL_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_IMAGE_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_HTML_ALT_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Alt text communicates the information conveyed by icons to users of assistive technology, ensuring website accessibility.<p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Determining Alt Text Need:</strong>
Evaluate whether the absence of the icon would impact page comprehension.
If the page would lose meaning without the icon, add alt text.</li>
<li><strong>Considerations for Text:</strong>
Assess the presence of adjacent text and its relevance to the icon's purpose.</li>

<li><strong>Recommendations:</strong>
<ul>
<li>Including text with icons enhances the clickable/touchable area for links or buttons.</li>
<li>Adding alt text to stand-alone icons without visible adjacent text ensures accessibility for all users.</li>
<li>Utilize consistent, clear and understandable icons</li>
</ul>
</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_HTML_TITLE_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_CUSTOM_LINK',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DETAIL_VIEW_ENABLED',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DETAIL_VIEW_BEFORE_ROWS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DETAIL_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DETAIL_VIEW_FOR_EACH_ROW',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'DETAIL_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DETAIL_VIEW_AFTER_ROWS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DETAIL_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REPORT_ALIAS',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_comment_text      => q'~$$$ property has to be checked for uniqueness~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REPORT_ID_ITEM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EMAIL_FROM_ADDRESS',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ORACLE_TEXT_INDEX_COLUMN',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_parent_comp_type_id   => c_comp_type_region,
        p_parent_comp_prop_name => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DESCRIPTION',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => 'Enter a description for this Interactive Report.' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id,
        p_db_column_prefix  => null );
    --
    --
    -- Component Properties for IR_COLUMN_GROUP
    --
    l_component_type_id := c_comp_type_ir_column_group;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'PARENT',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter the name of the column group.  This name displays as a region header in the detailed view.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'DISPLAY_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true,
        p_help_text         => q'~Enter the display sequence for this column group. The sequence determines the order in which the column groups display in the detail view.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DESCRIPTION',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Enter a description for the column group. This description never displays to end users.~' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id,
        p_db_column_prefix  => null );
    --
    --
    -- Component Properties for IR_COLUMN
    --
    l_component_type_id := c_comp_type_ir_column;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COLUMN_NAME',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_is_read_only      => true,
        p_check_uniqueness  => 'PARENT' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COLUMN_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_is_read_only      => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TZ_DEPENDENT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'COLUMN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DATE' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IR_COLUMN_DISPLAY_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'NATIVE_PLAIN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAMED_LOV',
        p_db_column                   => 'RPT_NAMED_LOV',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_PLAIN_LOV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COLUMN_HEADING',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Column headings play a crucial role in organizing and presenting tabular data in a clear and understandable format.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Descriptive and Meaningful:</strong> Use descriptive and meaningful column headings that accurately represent the content of each column. Column headings should succinctly convey the information contained within the respective columns.</li>
<li><strong>Consistency:</strong> Maintain consistency in column headings throughout the table. Consistent column headings facilitate navigation and comprehension for users, especially when interacting with complex tables containing multiple columns.</li>
</ol>~' );
    --

    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ALTERNATIVE_LABEL',
        p_db_column             => 'ALTERNATIVE_LABEL',
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => true,
        p_help_text          => q'~Enter the alternative label to use in dialogs and in various column heading placements.
        Use an alternative label when the heading contains extra formatting, such as HTML tags, which do not display properly.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HEADING_ALIGNMENT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'LEFT',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NATIVE_HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SYNC_FORM_LABEL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NATIVE_HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SINGLE_ROW_VIEW_LABEL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SYNC_FORM_LABEL',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_plugin_attr_seq_offset (
        p_component_type_id => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'DISPLAY_ORDER',
        p_is_required       => true,
        p_is_common         => true,
        p_comment_text      => q'~$$$ that is currently not exposed on the old pages, but I think we have to do that to make it accessible. The current code also tries to have a order without gaps, is that necessar?~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COLUMN_ALIGNMENT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'LEFT',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NATIVE_HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IR_COLUMN_GROUP',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_on_delete         => 'WEAK_NULL',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NATIVE_HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'USE_AS_ROW_HEADER',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => 'NATIVE_HIDDEN_COLUMN,NATIVE_PCT_GRAPH,NATIVE_RICH_TEXT',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>It's crucial to define row headers for tabular report data, such as in Classic or Interactive Reports, to enhance usability for users of assistive technologies like screen readers.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Impact on Usability for Screen Reader Users:</strong>
<ul>
<li>When a screen reader user navigates through different rows of the report, the column or columns designated as identifying the row will be announced as the row header upon moving to the new row.</li>
<li>Failure to define a row header column makes it significantly more challenging for screen reader users to orient themselves while navigating the report.</li>
</ul>
</li>
<li><strong>Enhancing Orientation and Navigation:</strong>
<ul>
<li>Defining this attribute improves the navigation experience for screen reader users by providing clear orientation points within the tabular data.</li>
<li>This ensures smoother navigation and comprehension of the report's content for users relying on assistive technologies.</li>
</ul>
</li>
<li><strong>Recommendations:</strong>
<ul>
<li>Define, one or more columns that identify the row, that will function as the row header for users of Assistive Technology.</li>
<li>This will be announced every time a user moves between rows, so the entire row header should not be too long to become overly verbose.</li>
</ul>
</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IMAGE_DESCRIPTION',
        p_db_column                   => 'IMAGE_DESCRIPTION',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_IMAGE',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>The Image Description property serves as a vital component in improving accessibility for users with visual impairments. It enables the provision of text or a reference to a column containing text to describe the image.  It is important to define descriptions for images that can be displayed as part of reports, such as in Classic or Interactive Reports, to improve usability for users of assistive technologies, such as screen readers.</p>
<strong>Best practices:</strong>
<ol>
<li>Informative Images:
Identify images that contribute to the comprehension or context of the webpage. If removing the image would diminish the page's meaning or significance, it requires the image description. If removing the image would not diminish the page's meaning (for example if it was just decorative), then leave the image description blank and it will be ignored by screen readers.</li>
<li>Purposeful Description:
<ul>
<li>Alt Text should succinctly convey the significance of the image in relation to the surrounding content.</li>
<li>Focus on describing the "why" of the image rather than stating what the image is.</li>
<li>Keep Alt Text clear, concise, and descriptive.</li>
</ul>
</li>
<strong>Example:</strong>
<p>"Stylish pink tote bag with faux leather straps, perfect for adding a pop of color to your outfit".</p>
<li>Avoid Redundancy:
Omit phrases like "image of" as screen readers automatically announce an image as such.</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'RICH_TEXT_FORMAT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'MARKDOWN',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_RICH_TEXT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORMAT_MASK',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'NATIVE_PLAIN,NATIVE_LINK,NATIVE_STRIP_HTML' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PCT_GRAPH_BACKGROUD_COLOR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_PCT_GRAPH' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PCT_GRAPH_FOREGROUND_COLOR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_PCT_GRAPH' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PCT_GRAPH_BAR_WIDTH',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_PCT_GRAPH' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CONTENT_DISPOSITION',
        p_db_column                   => 'BLOB_CONTENT_DISPOSITION',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'attachment',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_DOWNLOAD' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_TABLE_OWNER',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'NATIVE_IMAGE,NATIVE_DOWNLOAD',
        p_comment_text                => q'~$$$ Note: A owner column is not yet supported by the format mask~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_TABLE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'NATIVE_IMAGE,NATIVE_DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE_OWNER' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DOWNLOAD_TEXT',
        p_db_column                   => 'BLOB_DOWNLOAD_TEXT',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE' );
    --
    -- Download Text is part of Display Group "Appearance" but also has a dependency
    -- to Component-Prop 'BLOB_TABLE', so we have to move it up after creation
    resequence_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name              => 'DOWNLOAD_TEXT',
        p_previous_name     => 'CONTENT_DISPOSITION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_CONTENT_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'NATIVE_IMAGE,NATIVE_DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_PK_COLUMN1',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'NATIVE_IMAGE,NATIVE_DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_PK_COLUMN2',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'NATIVE_IMAGE,NATIVE_DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_MIME_TYPE_COLUMN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'NATIVE_IMAGE,NATIVE_DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_FILENAME_COLUMN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'NATIVE_IMAGE,NATIVE_DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_LAST_UPDATED_COLUMN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'NATIVE_IMAGE,NATIVE_DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_CHARSET_COLUMN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_TARGET',
        p_db_column                   => 'COLUMN_LINK',
        p_is_required                 => false,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'NATIVE_LINK,NATIVE_PCT_GRAPH,NATIVE_PLAIN_LOV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_TEXT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => '##CURRENT_COLUMN_NAME##',
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'LINK_TARGET',
        p_depending_on_condition_type => 'NOT_NULL',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Accessible link text is essential for users of assistive technologies, such as screen readers, to navigate and understand content effectively.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Conciseness:</strong> Keep link text concise while ensuring it conveys the necessary information. Aim for a balance between brevity and descriptiveness.</li>
<li><strong>Accessibility Attributes:</strong> Ensure report column row headers are defined. Defining this attribute improves the navigation experience for screen reader users by providing clear orientation points within the tabular data.</li>
<li><strong>Repeated links:</strong> In a typical report, each row often features a repeating link, such as an edit option. In such cases, the most effective link text would be 'Edit', and paired with a clear row header.</li>
</ol>
<p>By following these best practices for link text, you can create a more inclusive and accessible browsing experience for all users, including those with disabilities.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'LINK_TARGET',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HTML_EXPRESSION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_template_directive => 'S',
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'NATIVE_PLAIN,NATIVE_PLAIN_LOV' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IS_PRIMARY_KEY',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IR_COLUMN_FILTER_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'D',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST_LIKE',
        p_depending_on_expression     => 'NATIVE_HIDDEN_COLUMN,NATIVE_PLAIN_LOV,NATIVE_RICH_TEXT,TMPL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IR_COLUMN_FILTER_NAMED_LOV',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_COLUMN_FILTER_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => '1,2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IR_COLUMN_FILTER_LOV_SQL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_COLUMN_FILTER_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'S,C' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'REPORT_FILTER_DATE_RANGES',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'ALL',
        p_depending_on_comp_prop_name  => 'COLUMN_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'DATE',
        p_depending_on_comp_prop_name2 => 'IR_COLUMN_FILTER_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'D' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLAIN_LOV_IR_COLUMN_FILTER_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '1',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_PLAIN_LOV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLAIN_LOV_IR_COLUMN_FILTER_LOV_SQL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PLAIN_LOV_IR_COLUMN_FILTER_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'S,C' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DOM_STATIC_ID',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_help_text                   => q'~Enter the static ID for the column. If defined, the static ID is used as the ID for the corresponding table header (TH) cell, and as the HEADERS value for corresponding table data (TD) cells. The static ID can be useful when developing custom JavaScript behavior, or custom style for the column. If the static ID is not defined, the table generates an internal ID for these attribute values.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_HIDE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NATIVE_HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_SORT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST_LIKE',
        p_depending_on_expression     => 'NATIVE_HIDDEN_COLUMN,NATIVE_RICH_TEXT,TMPL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_FILTER',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST_LIKE',
        p_depending_on_expression     => 'NATIVE_HIDDEN_COLUMN,TMPL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_HIGHLIGHT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST_LIKE',
        p_depending_on_expression     => 'NATIVE_HIDDEN_COLUMN,TMPL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_CONTROL_BREAK',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST_LIKE',
        p_depending_on_expression     => 'NATIVE_HIDDEN_COLUMN,NATIVE_RICH_TEXT,TMPL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_AGGREGATE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST_LIKE',
        p_depending_on_expression     => 'NATIVE_HIDDEN_COLUMN,NATIVE_RICH_TEXT,TMPL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_COMPUTE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST_LIKE',
        p_depending_on_expression     => 'NATIVE_HIDDEN_COLUMN,NATIVE_RICH_TEXT,TMPL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_CHART',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST_LIKE',
        p_depending_on_expression     => 'NATIVE_HIDDEN_COLUMN,NATIVE_RICH_TEXT,TMPL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_GROUP_BY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST_LIKE',
        p_depending_on_expression     => 'NATIVE_HIDDEN_COLUMN,NATIVE_RICH_TEXT,TMPL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_PIVOT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST_LIKE',
        p_depending_on_expression     => 'NATIVE_HIDDEN_COLUMN,NATIVE_RICH_TEXT,TMPL' );
    --
    store_condition_type_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => null,
        p_help_text_type    => null,
        p_db_column_type    => 'DISPLAY_CONDITION_TYPE',
        p_view_column_type  => 'DISPLAY_CONDITION_TYPE',
        p_db_column_expr1   => 'DISPLAY_CONDITION',
        p_db_column_expr2   => 'DISPLAY_CONDITION2' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'AUTHORIZATION_SCHEME',
        p_db_column           => 'SECURITY_SCHEME',
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ESCAPE_SPECIAL_CHARACTERS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'NATIVE_PLAIN,NATIVE_LINK,NATIVE_HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HELP_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NATIVE_HIDDEN_COLUMN' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id      => l_component_type_id,
        p_has_build_option       => true,
        p_has_comments           => true,
        p_comment_db_column      => 'COLUMN_COMMENT',
        p_audit_db_column_prefix => null );
    --
    --
    --
    -- Component Properties for IR_SAVED_REPORT
    --
    l_component_type_id := c_comp_type_ir_saved_report;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IR_SAVED_VISIBILITY',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_is_read_only      => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_is_read_only          => true,
        p_check_uniqueness      => 'PARENT',
        p_supports_substitution => false,
        p_help_text             => q'~Displays the name of the Saved Report.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IR_SAVED_REPORT_ALIAS',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_check_uniqueness  => 'PAGE' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LINK_EXAMPLE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true,
        p_is_read_only      => true );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id,
        p_db_column_prefix  => null );
    --
    --
    -- Component Properties for IG_ATTRIBUTES
    --
    l_component_type_id := c_comp_type_ig_attributes;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IS_EDITABLE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
     store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EDIT_OPERATIONS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => 'i:u:d',
        p_depending_on_comp_prop_name => 'IS_EDITABLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'EDIT_ROW_OPERATIONS_COLUMN',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'EDIT_OPERATIONS',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'u,d',
        p_parent_comp_type_id          => c_comp_type_region,
        p_parent_comp_prop_name        => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LOST_UPDATE_CHECK_TYPE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'VALUES',
        p_depending_on_comp_prop_name  => 'IS_EDITABLE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ROW_VERSION_COLUMN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'LOST_UPDATE_CHECK_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'COLUMN',
        p_parent_comp_type_id          => c_comp_type_region,
        p_parent_comp_prop_name        => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ADD_ROW_IF_EMPTY',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'EDIT_OPERATIONS',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'i' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SUBMIT_CHECKED_ROWS',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_depending_on_comp_prop_name  => 'IS_EDITABLE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ADD_AUTHORIZATION_SCHEME',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'EDIT_OPERATIONS',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'i' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'UPDATE_AUTHORIZATION_SCHEME',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'EDIT_OPERATIONS',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'u' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DELETE_AUTHORIZATION_SCHEME',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'EDIT_OPERATIONS',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'd' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LAZY_LOADING',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REQUIRES_FILTER',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAXIMUM_ROW_COUNT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'REQUIRES_FILTER',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SHOW_NULL_VALUES_AS',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SELECT_FIRST_ROW',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'FIXED_ROW_HEIGHT',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PAGINATION_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'SCROLL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SHOW_TOTAL_ROW_COUNT',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'WHEN_MORE_DATA_FOUND_MESSAGE',
        p_db_column         => 'MAX_ROW_COUNT_MESSAGE',
        p_is_required       => false,
        p_is_common         => false,
        p_depending_on_comp_prop_name => 'MAXIMUM_ROW_COUNT',
        p_depending_on_condition_type => 'NOT_NULL',
        p_help_text         => q'~Enter the text message that displays when the <strong>Maximum Rows to Process</strong> limit is exceeded.
The default message instructs end users to add additional filters to limit the number of records to be processed.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SHOW_TOOLBAR',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TOOLBAR_CONTROLS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'SEARCH_COLUMN:SEARCH_FIELD:ACTIONS_MENU:RESET:SAVE',
        p_depending_on_comp_prop_name => 'SHOW_TOOLBAR',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ADD_BUTTON_LABEL',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SHOW_TOOLBAR',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y',
        p_depending_on_comp_prop_name2 => 'EDIT_OPERATIONS',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'i' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ENABLE_SAVE_PUBLIC_REPORT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PUBLIC_REPORT_AUTH_SCHEME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'ENABLE_SAVE_PUBLIC_REPORT',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ENABLE_SUBSCRIPTIONS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ENABLE_FLASHBACK',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFINE_CHART_VIEW',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ENABLE_DOWNLOAD',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DOWNLOAD_AUTH_SCHEME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'ENABLE_DOWNLOAD',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IG_DOWNLOAD_FORMATS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'CSV:HTML:XLSX:PDF',
        p_depending_on_comp_prop_name => 'ENABLE_DOWNLOAD',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ENABLE_MAIL_DOWNLOAD',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'ENABLE_DOWNLOAD',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CSV_SEPARATOR',
        p_db_column                   => 'CSV_SEPARATOR',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'IG_DOWNLOAD_FORMATS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'CSV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CSV_ENCLOSED_BY',
        p_db_column                   => 'CSV_ENCLOSED_BY',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'IG_DOWNLOAD_FORMATS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'CSV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DOWNLOAD_FILENAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'ENABLE_DOWNLOAD',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SUPPLEMENTAL_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'IG_DOWNLOAD_FORMATS',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'FIXED_HEADER',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'PAGE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FIXED_REPORT_HEIGHT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'FIXED_HEADER',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REGION' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ICON_VIEW_ENABLED',
        p_db_column         => 'SHOW_ICON_VIEW',
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N',
        p_help_text         => q'~Specify whether the Icon View is enabled. Selecting <strong>On</strong> adds a View Icons icon to the Search bar for interactive reports, or to the interactive grid View button, enabling users to access this view.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'USE_CUSTOM_ICON_VIEW',
        p_db_column                   => 'ICON_VIEW_USE_CUSTOM',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'ICON_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_CUSTOM',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_template_directive => 'C',
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_ICON_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'CSS_CLASSES',
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ICON_VIEW_ICON_BLOB_COLUMN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'N',
        p_depending_on_comp_prop_name2 => 'ICON_VIEW_ICON_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'BLOB' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ICON_VIEW_ICON_URL_COLUMN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'N',
        p_depending_on_comp_prop_name2 => 'ICON_VIEW_ICON_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'URL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ICON_VIEW_ICON_CSS_COLUMN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'N',
        p_depending_on_comp_prop_name2 => 'ICON_VIEW_ICON_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'CSS_CLASSES' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_ICON_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'ICON_VIEW_ICON_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'BLOB,URL',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>To ensure accessibility, it's crucial to define icon attributes correctly. These attributes, such as the ALT text, play a vital role in providing context and functionality for users who rely on screen readers or have visual impairments.</p>
<ul>
<li><strong>Recommendations:</strong>
<ul>
<li>Including text with icons enhances the clickable/touchable area for links or buttons.</li>
<li>We also recommend adding alt="" if the intention is for the image to be ignored by screen readers.</li>
<li>Include descriptive ALT text: Provide concise yet informative descriptions of icons to convey their meaning and purpose to users who cannot see them.</li>
</ul>
</li>
</ul>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IG_ICON_VIEW_LINK_TARGET',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'ICON_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ICON_VIEW_LINK_ATTRIBUTES',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'IG_ICON_VIEW_LINK_TARGET',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_depending_on_comp_prop_name2 => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'N',
        p_important_for_accessibility  => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_LABEL_REGION_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DETAIL_VIEW_ENABLED',
        p_db_column         => 'SHOW_DETAIL_VIEW',
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N',
        p_help_text         => q'~Specify whether the Detail View is enabled. Selecting <strong>On</strong> adds a View Details icon to the Search bar for interactive reports, or to the interactive grid View button, enabling users to access this view.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DETAIL_VIEW_BEFORE_ROWS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_template_directive => 'C',
        p_depending_on_comp_prop_name => 'DETAIL_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DETAIL_VIEW_FOR_EACH_ROW',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_template_directive => 'C',
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'DETAIL_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y',
        p_examples                    => q'~<pre>
&lt;tr&gt;&lt;td align="right"&gt;&ENAME_LABEL.:&lt;/td&gt;&lt;td&gt;&ENAME.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td align="right"&gt;&JOB_LABEL.:&lt;/td&gt;&lt;td&gt;&JOB.&lt;/td&gt;&lt;/tr&gt;
</pre>~',
        p_help_text                   => q'~<p>Enter the body for report rows in the Detail View.</p>
<p>The following substitution strings are available:
<ul>
<li><code>&&lt;COLUMN_NAME&gt;.</code> - substitution strings for column names.</li>
<li><code>&&lt;COLUMN_NAME&gt;_LABEL.</code> - substitution strings for column labels.</li>
<li><code>&APEX$ROW_ID.</code> - the record identifier for the row.</li>
<li><code>&APEX$ROW_INDEX.</code> - the record display sequence number.</li>
<li><code>&APEX$ROW_STATE_CLASSES.</code> - the record state such as <code>is-inserted</code> or <code>is-deleted</code>.</li>
</ul>
</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DETAIL_VIEW_AFTER_ROWS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_template_directive => 'C',
        p_depending_on_comp_prop_name => 'DETAIL_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ORACLE_TEXT_INDEX_COLUMN',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_parent_comp_type_id   => c_comp_type_region,
        p_parent_comp_prop_name => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EMAIL_FROM_ADDRESS',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'INIT_JAVASCRIPT_FUNCTION',
        p_db_column         => 'JAVASCRIPT_CODE',
        p_is_required       => false,
        p_is_common         => false,
        p_examples          => q'~<pre>
function( options ) {
    options.toolbar = false;
    return options;
}
</pre>~',
        p_help_text         => q'~Enter a JavaScript function that takes a configuration object for the Interactive Grid, modifies the object, and returns it. This allows advanced customization of the Interactive Grid appearance, features, and behavior including toolbar, menus, and actions.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'HELP_TEXT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_help_text          => q'~<p>Use this attribute to enter help text for the interactive grid. The entered help text will display along with the default help content under Actions Menu help.</p>~' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for IG_COLUMN_GROUP
    --
    l_component_type_id := c_comp_type_ig_column_group;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id      => l_component_type_id,
        p_property_name          => 'COLUMN_HEADING',
        p_db_column              => 'HEADING',
        p_is_required            => true,
        p_is_common              => true,
        p_check_uniqueness       => 'PARENT',
        p_supports_substitution  => true,
        p_default_value          => '#PLEASE_CHANGE#',
        p_help_text              => q'~Enter the group heading text.~',
        p_comment_text           => q'~$$$what does group heading do? should this use NAME property?~' );

    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALTERNATIVE_LABEL',
        p_db_column                   => 'LABEL',
        p_is_required                 => false,
        p_is_common                   => true,
        p_supports_substitution       => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for IG_COLUMN
    --
    l_component_type_id := c_comp_type_ig_column;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COLUMN_NAME',
        p_db_column         => 'NAME',
        p_is_required       => true,
        p_is_common         => true,
        p_check_uniqueness  => 'PARENT' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ITEM_TYPE',
        p_db_column         => 'ITEM_TYPE',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'NATIVE_TEXT_FIELD',
        p_help_text         => q'~<p>Select how this column is rendered. The following column types are supported:</p>
#NATIVE_PLUGINS#
<p>Depending on your application configuration, you may also have additional column type plug-ins available here.
These display as <em>&lt;My Plug-in&gt; [Plug-in]</em>.
The following plug-ins are installed in this application's shared components:</p>
#CUSTOM_PLUGINS#~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COLUMN_HEADING',
        p_db_column                   => 'HEADING',
        p_is_required                 => false,
        p_is_common                   => true,
        p_plugin_std_attributes       => 'VISIBLE',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Column headings play a crucial role in organizing and presenting tabular data in a clear and understandable format.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Descriptive and Meaningful:</strong> Use descriptive and meaningful column headings that accurately represent the content of each column. Column headings should succinctly convey the information contained within the respective columns.</li>
<li><strong>Consistency:</strong> Maintain consistency in column headings throughout the table. Consistent column headings facilitate navigation and comprehension for users, especially when interacting with complex tables containing multiple columns.</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'HEADING_ALIGNMENT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'LEFT',
        p_plugin_std_attributes => 'VISIBLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALTERNATIVE_LABEL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_plugin_std_attributes       => 'VISIBLE' );
    --
    store_plugin_attr_seq_offset (
        p_component_type_id => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MULTI_VALUE_TYPE_ALWAYS',
        p_db_column                   => 'MULTI_VALUE_TYPE',
        p_is_required                 => true,
        p_default_value               => 'SEPARATED',
        p_is_common                   => false,
        p_plugin_std_attributes       => 'MULTI_VALUE_ALWAYS',
        p_depending_on_comp_prop_name => 'ITEM_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => 'NATIVE_SELECT_LIST' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MULTI_VALUE_SEPARATOR_ALWAYS',
        p_db_column                    => 'MULTI_VALUE_SEPARATOR',
        p_default_value                => ':',
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MULTI_VALUE_TYPE_ALWAYS',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SEPARATED' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MULTI_VALUE_TYPE_OPTIONAL',
        p_db_column                   => 'MULTI_VALUE_TYPE',
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'No',
        p_null_help_text              => 'Column does not contain multiple values.',
        p_plugin_std_attributes       => 'MULTI_VALUE_OPTIONAL',
        p_depending_on_comp_prop_name => 'ITEM_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => 'NATIVE_SELECT_LIST' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MULTI_VALUE_SEPARATOR_OPTIONAL',
        p_db_column                    => 'MULTI_VALUE_SEPARATOR',
        p_default_value                => ':',
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MULTI_VALUE_TYPE_OPTIONAL',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SEPARATED' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'DISPLAY_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true,
        p_help_text         => q'~<p>Enter the display sequence for this column. The sequence setting determines where this column is displayed in relation to other columns within the region.</p>
<p>Note: If two columns, within the same region, have the same sequence value then they may be displayed in a different order when the application is exported and imported into another environment, such as a test or production environment.
To ensure consistency, Oracle recommends you specify unique sequence numbers for every item, or at least for those within the same region.</p>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COLUMN_ALIGNMENT',
        p_db_column             => 'VALUE_ALIGNMENT',
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'LEFT',
        p_plugin_std_attributes => 'VISIBLE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IG_COLUMN_GROUP',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_reference_on_delete   => 'DB_NULL',
        p_plugin_std_attributes => 'VISIBLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IG_USE_GROUP_FOR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'BOTH',
        p_depending_on_comp_prop_name => 'IG_COLUMN_GROUP',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'STRETCH_COLUMN',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_reference_on_delete   => 'DB_NULL',
        p_plugin_std_attributes => 'VISIBLE',
        p_null_text             => 'Use Report Setting',
        p_null_help_text        => q'~The column will use the <strong>Stretch</strong> Report Setting set by the End User to define if the column should stretch or not.~' );
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'USE_AS_ROW_HEADER',
        p_db_column                     => null,
        p_is_required                   => true,
        p_is_common                     => false,
        p_default_value                 => 'N',
        p_depending_on_comp_prop_name   => 'ITEM_TYPE',
        p_depending_on_condition_type   => 'NOT_IN_LIST',
        p_depending_on_expression       => 'NATIVE_MARKDOWN_EDITOR,NATIVE_PASSWORD,NATIVE_PCT_GRAPH,NATIVE_RICH_TEXT_EDITOR',
        p_plugin_std_attributes         => 'SOURCE',
        p_important_for_accessibility   => true,
        p_accessibility_help_text       => q'~<p>It's crucial to define row headers for tabular report data, such as in Classic or Interactive Reports, to enhance usability for users of assistive technologies like screen readers.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Impact on Usability for Screen Reader Users:</strong>
<ul>
<li>When a screen reader user navigates through different rows of the report, the column or columns designated as identifying the row will be announced as the row header upon moving to the new row.</li>
<li>Failure to define a row header column makes it significantly more challenging for screen reader users to orient themselves while navigating the report.</li>
</ul>
</li>
<li><strong>Enhancing Orientation and Navigation:</strong>
<ul>
<li>Defining this attribute improves the navigation experience for screen reader users by providing clear orientation points within the tabular data.</li>
<li>This ensures smoother navigation and comprehension of the report's content for users relying on assistive technologies.</li>
</ul>
</li>
<li><strong>Recommendations:</strong>
<ul>
<li>Define, one or more columns that identify the row, that will function as the row header for users of Assistive Technology.</li>
<li>This will be announced every time a user moves between rows, so the entire row header should not be too long to become overly verbose.</li>
</ul>
</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'APPEARANCE_CSS_CLASSES',
        p_db_column             => 'VALUE_CSS_CLASSES',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'VISIBLE',
        p_help_text             => q'~<p>Enter classes to add to this component. You may add multiple classes by separating them with spaces.</p>

        <p>Note: These CSS classes will be applied to the cells in the Interactive Grid. To apply CSS classes to the corresponding item, please see the CSS Classes property under the Advanced group.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_CSS_CLASSES',
        p_db_column                   => 'ITEM_ICON_CSS_CLASSES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'ICON',
        p_help_text                   => q'~<p>Enter the classes for the icon you want to add to the component. You may add multiple classes by separating them with spaces.</p>
        <p>If your theme uses Font APEX then review the <a rel="noopener noreferrer" target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a> to view available icons and modifiers.</p>
        <p>Note: This icon will be displayed inside of the item, not as part of the label.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORMAT_MASK',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        -- This property is used if the plug-in std attribute FORMAT_MASK_DATE or FORMAT_MASK_NUMBER are not checked
        p_depending_on_comp_prop_name => 'ITEM_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'PLUGIN' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'FORMAT_MASK_DATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'FORMAT_MASK_DATE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'FORMAT_MASK_NUMBER',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'FORMAT_MASK_NUMBER' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_WIDTH',
        p_db_column             => 'ITEM_WIDTH',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'WIDTH' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_HEIGHT',
        p_db_column             => 'ITEM_HEIGHT',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'HEIGHT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ELEMENT_VALUE_PLACEHOLDER',
        p_db_column                   => 'ITEM_PLACEHOLDER',
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'PLACEHOLDER',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Placeholder text serves as a helpful guide within input fields. When implemented thoughtfully, it aids users in understanding the expected input without overshadowing accessibility or creating confusion.</p>
<strong>Best Practices:</strong>
<ul>
<li><strong>Supplemental Information:</strong> Use placeholders to offer additional guidance, not as replacements for labels.</li>
<li><strong>Clear and Concise:</strong> Keep placeholder text brief yet informative.</li>
</ul>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'VALUE_REQUIRED',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'N',
        p_plugin_std_attributes => 'SESSION_STATE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_MAX_CHARACTERS',
        p_db_column             => 'MAX_LENGTH',
        p_is_required           => false,
        p_is_common             => true,
        p_plugin_std_attributes => 'WIDTH' );
    --
    store_lov_type_component_props (
        p_name                  => 'LOV_TYPE',
        p_db_column_named_lov   => 'LOV_ID',
        p_db_column_source      => 'LOV_SOURCE',
        p_is_required           => null, -- defined by plug-in standard attributes
        p_plugin_std_attributes => 'LOV' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DISPLAY_EXTRA_VALUES',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_plugin_std_attributes        => 'LOV',
        p_depending_on_comp_prop_name  => 'LOV_TYPE',
        p_depending_on_condition_type  => 'NOT_NULL',
        --
        p_depending_on_comp_prop_name2 => 'ITEM_TYPE',
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => 'NATIVE_COMBOBOX,NATIVE_SELECT_ONE,NATIVE_SELECT_MANY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DISPLAY_NULL_VALUE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_plugin_std_attributes       => 'LOV_DISPLAY_NULL',
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NULL_DISPLAY_VALUE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DISPLAY_NULL_VALUE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NULL_RETURN_VALUE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DISPLAY_NULL_VALUE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CASCADING_LOV_PARENT_COLUMNS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'CASCADING_LOV',
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_depending_on_comp_prop_name2 => 'LOV_TYPE',
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LOV_PAGE_ITEMS_TO_SUBMIT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'CASCADING_LOV_PARENT_COLUMNS',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CASCADING_LOV_PARENT_REQUIRED',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'CASCADING_LOV_PARENT_COLUMNS',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_TARGET',
        p_db_column                   => 'LINK_TARGET',
        p_is_required                 => false,
        p_is_common                   => true,
        p_plugin_std_attributes       => 'LINK',
        p_reference_scope             => 'ROW' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LINK_TEXT',
        p_db_column                    => 'LINK_TEXT',
        p_is_required                  => false,
        p_is_common                    => true,
        p_default_value               => '&#CURRENT_COLUMN_NAME#.',
        p_reference_scope              => 'ROW',
        p_depending_on_comp_prop_name  => 'LINK_TARGET',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_depending_on_comp_prop_name2 => 'ITEM_TYPE',
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'NATIVE_HTML_EXPRESSION',
        p_important_for_accessibility  => true,
        p_accessibility_help_text      => q'~<p>Accessible link text is essential for users of assistive technologies, such as screen readers, to navigate and understand content effectively.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Conciseness:</strong> Keep link text concise while ensuring it conveys the necessary information. Aim for a balance between brevity and descriptiveness.</li>
<li><strong>Accessibility Attributes:</strong> Ensure report column row headers are defined. Defining this attribute improves the navigation experience for screen reader users by providing clear orientation points within the tabular data.</li>
<li><strong>Repeated links:</strong> In a typical report, each row often features a repeating link, such as an edit option. In such cases, the most effective link text would be 'Edit', and paired with a clear row header.</li>
</ol>
<p>By following these best practices for link text, you can create a more inclusive and accessible browsing experience for all users, including those with disabilities.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_ATTRIBUTES',
        p_db_column                   => 'LINK_ATTRIBUTES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'LINK_TARGET',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COLUMN_SOURCE_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'DB_COLUMN',
        p_plugin_std_attributes       => 'SOURCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_DB_COLUMN',
        p_db_column                   => 'SOURCE_EXPRESSION',
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DB_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_SQL_EXPRESSION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_EXPRESSION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DATA_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NONE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'IS_QUERY_ONLY',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_depending_on_comp_prop_name  => 'COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'DB_COLUMN',
        p_depending_on_comp_prop_name2 => 'DATA_TYPE',
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'ROWID' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IS_PRIMARY_KEY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DB_COLUMN' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MASTER_COLUMN',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_reference_on_delete          => 'WEAK_NULL',
        p_depending_on_comp_prop_name  => 'COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'DB_COLUMN',
        p_depending_on_comp_prop_name2 => 'DATA_TYPE',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'VARCHAR2,NUMBER,DATE,TIMESTAMP,TIMESTAMP_TZ,TIMESTAMP_LTZ' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DEFAULT_TYPE',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MASTER_COLUMN',
        p_depending_on_has_to_exist    => false,
        p_depending_on_condition_type  => 'NULL',
        p_plugin_std_attributes        => 'SOURCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_STATIC_TEXT',
        p_db_column                   => 'DEFAULT_EXPRESSION',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DEFAULT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_ITEM',
        p_db_column                   => 'DEFAULT_EXPRESSION',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DEFAULT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_SQL_QUERY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DEFAULT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_SQL_QUERY_COLON',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DEFAULT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_QUERY_COLON' );
    --
    store_expression_comp_props (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'DEFAULT_VALUE_',
        p_return_type       => 'VARCHAR2',
        p_db_column_lang    => 'DEFAULT_LANGUAGE',
        p_db_column_expr    => 'DEFAULT_EXPRESSION',
        p_type_property     => 'DEFAULT_TYPE' );
    --
    store_func_body_comp_props (
        p_component_type_id   => l_component_type_id,
        p_name_prefix         => 'DEFAULT_VALUE_',
        p_return_type         => 'VARCHAR2',
        p_db_column_lang      => 'DEFAULT_LANGUAGE',
        p_db_column_func_body => 'DEFAULT_EXPRESSION',
        p_type_property       => 'DEFAULT_TYPE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_SEQUENCE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'DEFAULT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SEQUENCE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DUPLICATE_VALUE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'IS_QUERY_ONLY',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'N',
        p_depending_on_comp_prop_name2 => 'MASTER_COLUMN',
        p_depending_on_has_to_exist2   => false,
        p_depending_on_condition_type2 => 'NULL',
        p_plugin_std_attributes        => 'SOURCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REGION_COLUMN_SESSION_STATE_DATA_TYPE',
        p_db_column                   => 'SESSION_STATE_DATA_TYPE',
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_default_value               => 'VARCHAR2',
        p_plugin_std_attributes       => 'SESSION_STATE_CLOB' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ENABLE_FILTER',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type  => 'NOT_EQUALS',
        p_depending_on_expression      => 'NONE',
        p_depending_on_comp_prop_name2 => 'CASCADING_LOV_PARENT_COLUMNS',
        p_depending_on_condition_type2 => 'NULL',
        p_depending_on_has_to_exist2   => false,
        p_plugin_std_attributes        => 'FILTER' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'FILTER_DATA_TYPE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false, /* property is hidden */
        p_default_value                => 'VARCHAR2',
        p_depending_on_comp_prop_name  => 'ENABLE_FILTER',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y' );
    --
/* pwolf: pushed to 5.2
   note: modify trigger wwv_flow_region_columns_t1 and remove the default value
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'FILTER_IS_REQUIRED',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_depending_on_comp_prop_name  => 'ENABLE_FILTER',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y' );
    --
*/
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'FILTER_OPERATORS',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_default_value                => 'C:S:CASE_INSENSITIVE:REGEXP',
        p_depending_on_comp_prop_name  => 'FILTER_DATA_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'VARCHAR2,CLOB' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'FILTER_TEXT_CASE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'MIXED',
        p_depending_on_comp_prop_name  => 'FILTER_DATA_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'VARCHAR2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FILTER_LOV_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'DISTINCT',
        p_depending_on_comp_prop_name => 'ENABLE_FILTER',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'REPORT_FILTER_DATE_RANGES',
        p_db_column                    => 'FILTER_DATE_RANGES',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'ALL',
        p_depending_on_comp_prop_name  => 'FILTER_LOV_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'DISTINCT',
        p_depending_on_comp_prop_name2 => 'FILTER_DATA_TYPE',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'DATE,TIMESTAMP,TIMESTAMP_TZ,TIMESTAMP_LTZ' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IR_COLUMN_FILTER_LOV_SQL',
        p_db_column                   => 'FILTER_LOV_QUERY',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'FILTER_LOV_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IR_COLUMN_FILTER_NAMED_LOV',
        p_db_column                   => 'FILTER_LOV_ID',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'FILTER_LOV_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SHARED' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IG_COLUMN_FILTER_STATIC_VALUES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'FILTER_LOV_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_func_body_comp_props (
        p_component_type_id   => l_component_type_id,
        p_name_prefix         => 'IG_COLUMN_FILTER_',
        p_return_type         => 'SQL',
        p_type_property       => 'FILTER_LOV_TYPE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'FILTER_EXACT_MATCH',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'FILTER_LOV_TYPE',
        p_depending_on_condition_type  => 'NOT_EQUALS',
        p_depending_on_expression      => 'NONE',
        p_depending_on_comp_prop_name2 => 'FILTER_DATA_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'VARCHAR2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'INCLUDE_IN_EXPORT_PRINT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NONE',
        p_plugin_std_attributes       => 'SOURCE' );
    --
    -- A column is sortable (Page Designer shows the "Enable to Sort" switch), if:
    --
    -- a) the column data type is a simple one (NUMBER, VARCHAR, DATE), but not CLOB, BLOB or object types
    -- b) the column is a Database Column or a SQL Expression (not "NONE")
    -- c) no cascading LOV is used, i.e. no LOV parent column is set.
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'COLUMN_IS_SORTABLE',
        p_db_column                    => null,
        p_default_value                => 'Y',
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'DATA_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'VARCHAR2,NUMBER,DATE,TIMESTAMP,TIMESTAMP_TZ,TIMESTAMP_LTZ,INTERVAL_D2S,INTERVAL_Y2M',
        p_depending_on_comp_prop_name2 => 'CASCADING_LOV_PARENT_COLUMNS',
        p_depending_on_condition_type2 => 'NULL',
        p_depending_on_has_to_exist2   => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ENABLE_SORT_GROUP',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'COLUMN_IS_SORTABLE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y',
        p_plugin_std_attributes        => 'SOURCE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ENABLE_CONTROL_BREAK',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'ENABLE_SORT_GROUP',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ENABLE_HIDE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'Y',
        p_plugin_std_attributes => 'VISIBLE' );
    --
/* pawolf: pushed to APEX 5.2
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_PIVOT',
        p_db_column                   => 'ENABLE_PIVOT',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NONE',
        p_plugin_std_attributes       => 'SOURCE' );
*/
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DOM_STATIC_ID',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'ITEM_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NATIVE_ROW_SELECTOR',
        p_help_text                   => q'~Enter the static ID for the column. The static ID can be useful when developing custom JavaScript behavior, or custom style for the column item. If the static ID is not defined, an internal ID is used for the column item ID.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ADVANCED_CSS_CLASSES',
        p_db_column             => 'ITEM_CSS_CLASSES',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'ELEMENT',
        p_help_text             => q'~<p>Enter classes to add to this component. You may add multiple classes by separating them with spaces.</p>
        <p>Note: This property can be used to make style modifications to the corresponding item when the Interactive Grid is editable.</p>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CUSTOM_ATTRIBUTES',
        p_db_column             => 'ITEM_ATTRIBUTES',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'ELEMENT',
        p_help_text             => q'~Enter additional attributes to be included in the form element HTML tag. The <code>size</code> and <code>id</code> HTML attributes are generated and therefore should not be supplied. For the <code>class</code> HTML attribute it is better to use the dedicated <em>CSS Classes</em> attribute instead.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COLUMN_INIT_JAVASCRIPT_CODE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'ITEM_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NATIVE_ROW_SELECTOR',
        p_examples                    => q'~<pre>
function( options ) {
    options.features = options.features || {};
    options.features.sort = false;
    return options;
}
</pre>~',
        p_help_text                   => q'~Enter a JavaScript function that takes a configuration object for the column, modifies the object, and returns it. This allows advanced customization of the column appearance, features, and behavior.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'INIT_JAVASCRIPT_FUNCTION',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_default_value         => null,
        p_plugin_std_attributes => 'INIT_JAVASCRIPT_CODE' );
    --
    store_condition_type_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_name_prefix                 => null,
        p_help_text_type              => null,
        p_db_column_type              => 'DISPLAY_CONDITION_TYPE',
        p_view_column_type            => 'CONDITION_TYPE',
        p_db_column_expr1             => 'DISPLAY_CONDITION',
        p_db_column_expr2             => 'DISPLAY_CONDITION2' );
    --
    store_condition_type_comp_prop (
        p_component_type_id     => l_component_type_id,
        p_name_prefix           => 'READ_ONLY',
        p_help_text_type        => q'~<p>Select a condition type that must be met in order for this component to render as read-only.
Not selecting a condition causes the item to render normally.
A read-only item is rendered with the same settings as a Display Only item.</p>
<p>Note: Set the condition type to <strong>Never</strong> to always render the item as an enterable field.
This setting overwrites any read-only condition setting on the region or page level.</p>~',
        p_db_column_type        => 'READONLY_CONDITION_TYPE',
        p_view_column_type      => 'READ_ONLY_CONDITION_TYPE',
        p_db_column_expr1       => 'READONLY_CONDITION',
        p_db_column_expr2       => 'READONLY_CONDITION2',
        p_is_common             => false,
        p_reference_scope       => 'DEPENDS',
        p_plugin_std_attributes => 'READONLY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EXECUTE_READONLY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'READ_ONLY_CONDITION_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => 'NEVER,$NULL$' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'AUTHORIZATION_SCHEME',
        p_db_column           => 'SECURITY_SCHEME',
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ESCAPE_SPECIAL_CHARACTERS',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'Y',
        p_plugin_std_attributes => 'ESCAPE_OUTPUT' );
    --
/* pawolf: pushed to APEX 5.2
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'RESTRICTED_CHARACTERS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'SOURCE',
        p_null_text             => 'All characters can be saved.' );
*/
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'HELP_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_plugin_std_attributes => 'VISIBLE',
        p_help_text             => q'~Enter help text for this column.~' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_build_option  => true,
        p_has_comments      => true,
        p_comment_db_column => 'COLUMN_COMMENT' );
    --
    -- Component Properties for IG_SAVED_REPORT
    --
    l_component_type_id := c_comp_type_ig_saved_report;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IG_SAVED_VISIBILITY',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_is_read_only      => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_is_read_only          => true,
        p_check_uniqueness      => 'PARENT',
        p_supports_substitution => false,
        p_help_text             => q'~Displays the name of the Saved Report.~');
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IG_SAVED_REPORT_ALIAS',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_check_uniqueness  => 'PAGE' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LINK_EXAMPLE',
        p_db_column         => 'LINK_EXAMPLE',
        p_is_required       => false,
        p_is_common         => true,
        p_is_read_only      => true,
        p_help_text         => q'~<p>View the URL link for this saved report. This attribute is view only and cannot be updated.</p>
    <p>This attribute enables you to quickly copy the displayed URL. This URL can be used to link directly to this particular saved report from anywhere else in the application.</p>~' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for Page Process Web Service In Parameters
    --
    l_component_type_id           := c_comp_type_page_proc_ws_p_i;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARAMETER_ID',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'NAME',
        p_db_column           => 'PARAMETER_NAME',
        p_is_required         => true,
        p_is_common           => true,
        p_is_read_only        => true,
        p_reference_on_delete => 'WEAK_CASCADE' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PAGE_PROC_WS_PARM_SOURCE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_PROC_WS_PARM_VALUE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PAGE_PROC_WS_PARM_SOURCE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_PROC_WS_PARM_ITEM',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PAGE_PROC_WS_PARM_SOURCE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_PROC_WS_PARM_FUNCTION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PAGE_PROC_WS_PARM_SOURCE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'FUNCTION' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    --
    -- Component Properties for Page Process Web Service Out Parameters
    --
    l_component_type_id           := c_comp_type_page_proc_ws_p_o;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARAMETER_ID',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => 'PARAMETER_NAME',
        p_is_required       => true,
        p_is_common         => true,
        p_is_read_only      => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_PROC_WS_PARM_ITEMS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    --
    -- Component Properties for Page Process Web Service Basic Authentication Parameters
    --
    l_component_type_id           := c_comp_type_page_proc_ws_p_a;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARAMETER_ID',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => 'PARAMETER_NAME',
        p_is_required       => false,
        p_is_common         => true,
        p_is_read_only      => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PAGE_PROC_WS_PARM_SOURCE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_PROC_WS_PARM_VALUE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PAGE_PROC_WS_PARM_SOURCE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_PROC_WS_PARM_ITEM',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PAGE_PROC_WS_PARM_SOURCE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_PROC_WS_PARM_FUNCTION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PAGE_PROC_WS_PARM_SOURCE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'FUNCTION' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for Region Web Source Parameters
    --
    l_component_type_id           := c_comp_type_region_ws_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_ws_param_comp;
    --
    --
    --
    -- Component Properties for DUALITY_VIEWS and JSON Collections
    --
    g_component_property_sequence := 10;
    --
    store_comp_props_doc_src( c_comp_type_dualityview_src );
    --
    store_comp_prop_data_profile (
        p_profile_type_id => c_comp_type_dualityvw_dp,
        p_column_type_id  => c_comp_type_dualityvw_dp_col );
    --
    g_component_property_sequence := 10;
    --
    store_comp_props_doc_src( c_comp_type_jsondocument_src );
    --
    store_comp_prop_data_profile (
        p_profile_type_id => c_comp_type_jsoncoll_dp,
        p_column_type_id  => c_comp_type_jsoncoll_dp_col );
    --
    --
    -- Component Properties for AI_CONFIG
    --
    l_component_type_id           := c_comp_type_ai_config;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_check_uniqueness      => 'APPLICATION',
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a name of the AI Config.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IDENTIFICATION_STATIC_ID',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~Use the Static ID to reference the AI configuration in API Calls.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_REMOTE_SERVER',
        p_db_column                   => 'REMOTE_SERVER_ID',
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Application Default' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_SYSTEM_PROMPT',
        p_db_column                   => 'SYSTEM_PROMPT',
        p_supports_template_directive => 'S',
        p_is_required                 => false,
        p_is_common                   => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_WELCOME_MESSAGE',
        p_db_column                   => 'WELCOME_MESSAGE',
        p_is_required                 => false,
        p_is_common                   => true,
        p_supports_template_directive => 'C' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_TEMPERATURE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_subscription_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'AI_CONFIG' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'CONFIG_COMMENT' );
    --
    --
    -- Component Properties for AI_CONFIG_RAG_SOURCE
    --
    l_component_type_id           := c_comp_type_ai_config_rag_src;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_check_uniqueness      => 'PARENT',
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a name of the RAG source.~' );
    --
    store_component_prop (
        p_component_type_id    => l_component_type_id,
        p_property_name        => 'DESCRIPTION',
        p_db_column            => null,
        p_is_required          => false,
        p_is_common            => true,
        p_help_text            => q'~Enter a brief description of the RAG Source that will be sent to the AI service. This description should clearly explain the nature and content of the data being provided, helping the AI to better understand and process the information.~' );
    --
    store_component_prop (
        p_component_type_id    => l_component_type_id,
        p_property_name        => 'RAG_TYPE',
        p_db_column            => null,
        p_is_required          => true,
        p_is_common            => true,
        p_default_value        => 'DATA_SOURCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_SQL_QUERY',
        p_db_column                   => 'SOURCE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'RAG_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DATA_SOURCE',
        p_examples                    => q'~
<dl>
<dt>A query that retrieves a sorted list of employees, including their job titles, salaries, and department names, with the results limited to a maximum of 100 rows.</dt>
<dd><pre>
select e.empno as "Employee No",
       e.ename as "Employee Name",
       e.job   as "Job",
       e.sal   as "Salary",
       d.dname as "Department"
  from emp e
  left join dept d on d.deptno = e.deptno
 order by e.ename
 fetch first 100 rows only
</pre></dd>
</dl>~',
        p_help_text                   => q'~<p>Specify the SQL query that generates the CSV output as context for the AI service. Within the query, you can use the following special bind variables to access and evaluate the user's prompt:
<dl>
    <dt><code>APEX$AI_LAST_USER_PROMPT</code></dt>
    <dd>Retrieves the most recent user-entered prompt.</dd>
    <dt><code>APEX$AI_ALL_USER_PROMPTS</code></dt>
    <dd>Retrieves all user prompts, concatenated into a single string.</dd>
</dl>
</p>
<p>Note: The number of rows included in the output will be limited to the maximum specified by the <em>Maximum Tokens</em> attribute, with an absolute limit of 10000 rows.</p>~' );
    --
    store_func_body_comp_props (
        p_component_type_id           => l_component_type_id,
        p_name_prefix                 => 'SOURCE_',
        p_return_type                 => 'CLOB',
        p_db_column_lang              => 'FUNCTION_BODY_LANGUAGE',
        p_db_column_func_body         => 'SOURCE',
        p_type_property               => 'RAG_TYPE',
        p_type_value                  => 'FUNCTION_BODY',
        p_help_text                   => q'~<p>Specify a %language% function body that returns a CLOB and generates the context for the AI service. Within the code, you can use the following special bind variables to access and evaluate the user's prompt:
<dl>
    <dt><code>APEX$AI_LAST_USER_PROMPT</code></dt>
    <dd>Retrieves the most recent user-entered prompt.</dd>
    <dt><code>APEX$AI_ALL_USER_PROMPTS</code></dt>
    <dd>Retrieves all user prompts, concatenated into a single string.</dd>
</dl>
</p>~',
        p_examples_plsql              => q'~
<dl>
<dt>Returns <em>Employee data</em> if the current user prompt includes the term <em>employee</em>; otherwise, returns <em>Other data</em>.</dt>
<dd><pre>
begin
    if lower( :APEX$AI_LAST_USER_PROMPT ) like '%employee%' then
        return 'Employee data';
    else
        return 'Other data';
    end if;
end;
</pre></dd>
</dl>~',
        p_examples_js                 => q'~
<dl>
<dt>Returns <em>Employee data</em> if the current user prompt includes the term <em>employee</em>; otherwise, returns <em>Other data</em>.</dt>
<dd><pre>
if ( /(employee)/i.test( apex.env.APEX$AI_LAST_USER_PROMPT )) {
    return "Employee data";
} else {
    return "Other data";
}
</pre></dd>
</dl>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_RAG_STATIC',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'RAG_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_MAX_TOKENS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'RAG_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DATA_SOURCE' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_has_condition               => true,
        p_cond_type_name_prefix       => 'RAG',
        p_cond_type_help_text         => q'~<p>This attribute allows you to conditionally control whether or not the RAG source is executed. Enter values in this attribute based on the specific condition type selected. The RAG source will be executed if the specified condition is met.</p>

<p>For the condition types <strong>Any User Prompt contains</strong> and <strong>Last User Prompt contains</strong>, provide a comma-separated list of words to check for their presence in the user's prompt.</p>~',
        p_has_authorization_scheme    => true,
        p_authorization_db_column     => 'AUTHORIZATION_SCHEME',
        p_has_build_option            => true,
        p_build_option_db_column      => 'BUILD_OPTION_ID',
        p_has_comments                => true,
        p_comment_db_column           => 'RAG_COMMENT' );
    --
    --
    --
    -- Component Properties for WEB_SRC_MODULE
    --
    l_component_type_id           := c_comp_type_web_src_module;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_check_uniqueness      => 'APPLICATION',
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a name of the REST Data Source.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'WEB_SRC_MODULE_SUBSCRIBED_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REST_DATA_SOURCE_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'HTTP' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_REMOTE_REST_SERVER',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'REST_DATA_SOURCE_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NATIVE_REST_ENABLED_SQL_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_REMOTE_DATABASE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'REST_DATA_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_REST_ENABLED_SQL_QUERY' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'URL_PATH_PREFIX',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_SQL_QUERY',
        p_db_column                   => 'ATTRIBUTE_01',
        p_is_required                 => true,
        p_is_common                   => true,
        p_parent_comp_prop_name       => 'SOURCE_REMOTE_DATABASE',
        p_depending_on_comp_prop_name => 'REST_DATA_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_REST_ENABLED_SQL_QUERY' );
    --
    store_plugin_attr_seq_offset (
        p_component_type_id => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CREDENTIALS',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AUTHENTICATION_SERVER',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'CREDENTIALS',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AUTH_URL_PATH_PREFIX',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'AUTHENTICATION_SERVER',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_WEB_SRC_ARRAY_COL',
        p_db_column                   => 'SYNC_ARRAY_COL_ID',
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SYNC_JOB_IS_ACTIVE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SYNC_LOCAL_TABLE_OWNER',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SYNC_LOCAL_TABLE_NAME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_parent_comp_prop_name       => 'SYNC_LOCAL_TABLE_OWNER' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SYNCHRONIZATION_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'APPEND',
        p_depending_on_comp_prop_name => 'SYNC_LOCAL_TABLE_NAME',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SYNCHRONIZATION_SCHEDULE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'FREQ=DAILY;INTERVAL=1;BYHOUR=0;BYMINUTE=0;BYSECOND=0',
        p_depending_on_comp_prop_name => 'SYNC_LOCAL_TABLE_NAME',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SYNC_COMMIT_INTERVAL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SYNC_LOCAL_TABLE_NAME',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SYNC_HTTP_REQUEST_LIMIT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SYNC_LOCAL_TABLE_NAME',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SYNC_RATE_LIMIT_TIMEFRAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SYNC_LOCAL_TABLE_NAME',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SYNC_RATE_LIMIT_HTTP_REQUESTS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SYNC_RATE_LIMIT_TIMEFRAME',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SYNC_WHEN_RATE_LIMIT_EXCEEDED',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'ERROR',
        p_depending_on_comp_prop_name => 'SYNC_RATE_LIMIT_TIMEFRAME',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'STATIC_ID',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~Use the Static ID to reference the REST Data Source in API Calls.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PASS_ECID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_null_text         => 'Application Default',
        p_null_help_text    => q'~Uses the setting defined in the application security attributes.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'HTTP_TRANSFER_TIMEOUT',
        p_db_column         => 'TIMEOUT',
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'OPENAPI_URL',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REST_CATALOG_NAME',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_is_read_only      => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REST_CATALOG_SERVICE_NAME',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_is_read_only      => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REST_CATALOG_SERVICE_VERSION',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_is_read_only      => true );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'MODULE_COMMENT' );
    --
    --
    -- Component Properties for WEB_SRC_MOD_PARAM
    --
    l_component_type_id           := c_comp_type_web_src_mod_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_web_src_param( p_for_operation_params => false );
    --
    --
    -- Component Properties for WEB_SRC_DATA_PROFILE and WEB_SRC_DATA_PROFILE_COLUMN
    --
    store_comp_prop_data_profile (
        p_profile_type_id => c_comp_type_web_src_mod_dp,
        p_column_type_id  => c_comp_type_web_src_mod_dp_col );
    --
    --
    -- Component Properties for WEB_SRC_OPERATION
    --
    l_component_type_id           := c_comp_type_web_src_operation;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LABEL',
        p_db_column             => 'DISPLAY_NAME',
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Display label for the REST Operation.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'NAME',
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~Enter a name of the REST Operation.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'URL_PATTERN',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_default_value         => '.' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'HTTP_METHOD',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'GET' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DATABASE_OPERATION',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_null_text             => 'Not Mapped' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REQUEST_BODY_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'HTTP_METHOD',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'GET' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_WEB_SRC_ARRAY_COL',
        p_db_column                   => 'DATA_PROFILE_ARRAY_COL_ID',
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REMOTE_CACHING',
        p_db_column                   => 'CACHING',
        p_is_required                 => false,
        p_is_common                   => true,
        p_null_text                   => 'Disabled',
        p_null_help_text              => q'~Content is not cached and fetched from the REST source for each request.~',
        p_depending_on_comp_prop_name => 'HTTP_METHOD',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'GET',
        p_help_text                   => q'~<p>Select how the &PRODUCT_NAME. engine can cache REST Source responses on the server side. If caching can be used, the component will be
rendered based on cached results instead of fetching from the REST service again. Only HTTP "GET" requests will be cached, which will cut down
expensive HTTP requests. This feature is unrelated to the browser's caching capabilities.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REMOTE_INVALIDATE_WHEN',
        p_db_column                   => 'INVALIDATE_WHEN',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'REMOTE_CACHING',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FIXED_PAGE_SIZE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false ); -- $$$ todo shouldn't this be for GET request only?
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_FETCHING_ALL_ROWS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'DATABASE_OPERATION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'FETCH_COLLECTION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FETCH_ALL_ROWS_TIMEOUT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'ALLOW_FETCHING_ALL_ROWS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'STATIC_ID',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORCE_RAISE_HTTP_404_ERROR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'DATABASE_OPERATION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'FETCH_COLLECTION' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'OPERATION_COMMENT' );
    --
    --
    -- Component Properties for WEB_SRC_OPER_PARAM
    --
    l_component_type_id           := c_comp_type_web_src_oper_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_web_src_param( p_for_operation_params => true );

    --
    --
    -- Component Properties for WEB_SRC_OPER_DATA_PROFILE and WEB_SRC_OPER_DATA_PROFILE_COLUMN
    --
    store_comp_prop_data_profile (
        p_profile_type_id => c_comp_type_web_src_oper_dp,
        p_column_type_id  => c_comp_type_web_src_oper_dpcol );
    --
    --
    -- Component Properties for WEB_SRC_SYNC_STEP
    --
    l_component_type_id           := c_comp_type_web_src_sync_step;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IDENTIFICATION_STATIC_ID',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_check_uniqueness      => 'PARENT',
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a static ID to uniquely identify a synchronization step.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EXECUTION_SEQUENCE',
        p_db_column         => 'EXECUTION_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EXECUTION_IS_ACTIVE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'Y',
        p_help_text         => q'~Whether this step will be executed or not.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'EXTERNAL_FILTER_EXPR',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'SYNC_STEP_COMMENT' );
    --
    -- Component Properties for WEB_SRC_SYNC_STEP_WS_PARAM
    --
    l_component_type_id           := c_comp_type_web_src_sync_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_ws_param_comp;
    --
    --
    -- Component Properties for WEB_SRC_QUERY
    --
    l_component_type_id           := c_comp_type_web_src_query;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'APPLICATION',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );

    --
    --
    -- Component Properties for ARRAY_COL
    --
    l_component_type_id           := c_comp_type_web_src_array_col;
    g_component_property_sequence := 10;
    store_comp_props_array_col( l_component_type_id );

    l_component_type_id           := c_comp_type_dualityvw_arr_col;
    g_component_property_sequence := 10;
    store_comp_props_array_col( l_component_type_id );

    l_component_type_id           := c_comp_type_jsoncoll_arr_col;
    g_component_property_sequence := 10;
    store_comp_props_array_col( l_component_type_id );
    --
    --
    -- Component Properties for WEB_SRC_PARAM
    --
    l_component_type_id           := c_comp_type_web_src_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for STATIC_APPLICATION_FILE
    --
    l_component_type_id           := c_comp_type_application_file;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_static_file;
    --
    --
    -- Component Properties for EMAIL_TEMPLATE
    --
    l_component_type_id           := c_comp_type_email_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'EMAIL_SUBJECT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'EMAIL_HTML_HEADER',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'EMAIL_HTML_BODY',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'EMAIL_HTML_FOOTER',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'EMAIL_PLAIN_BODY',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'STATIC_ID',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_help_text             => q'~This identifier is used in the <code>APEX_MAIL</code> API call to reference this template.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'EMAIL_HTML_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EMAIL_TEMPLATE_SUBSCRIBED_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true );
    --
    --
    -- Component Properties for TEXT_MESSAGE
    --
    l_component_type_id           := c_comp_type_text_message;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME_UPPER',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~Enter a unique name for the message.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'MESSAGE_TEXT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'I18N_LANGUAGE',
        p_db_column         => 'MESSAGE_LANGUAGE',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#APP_LANGUAGE#' ); -- $$$ todo: add support for this placeholder
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'USED_IN_JAVASCRIPT',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'METADATA',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true,
        p_is_read_only      => true );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'MESSAGE_COMMENT' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'TEXT_MESSAGE_SUBSCRIBED_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    --
    -- Component Properties for CLASSIC_NAV_BAR
    --
    l_component_type_id           := c_comp_type_classic_nav_bar;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LABEL',
        p_db_column                   => 'ICON_SUBTEXT',
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => true,
        p_help_text                   => q'~For each navigation bar icon you can define an optional sub-text to be displayed below the icon. For example a help icon can display the text "help" below the icon.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAVIGATION_BAR_SUBSCRIBED_FROM',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DISPLAY_SEQUENCE',
        p_db_column                   => 'ICON_SEQUENCE',
        p_is_required                 => true,
        p_is_common                   => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BEGINS_ON_NEW_LINE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'NO' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IMAGE_ICON_CSS_CLASSES',
        p_db_column                   => 'ICON_IMAGE',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => true,
        p_examples                    => q'~<p>Example of image names:</p>
<pre>
#WORKSPACE_IMAGES#my_image.jpg
#APP_IMAGES#another_image.gif
html_db_white.gif
</pre>~',
        p_help_text                   => q'~<p>The image is the name of image.&nbsp; For example: wwv_find.gif.&nbsp; The image prefix can be one of the following:</p>
<ol>
<li>#WORKSPACE_IMAGES#</li>
<li>#APP_IMAGES#</li>
<li>null (from the directory specified by the application image attribute)</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IMAGE_ALT_ATTRIBUTE',
        p_db_column                   => 'ICON_IMAGE_ALT',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => true,
        p_depending_on_comp_prop_name => 'IMAGE_ICON_CSS_CLASSES',
        p_depending_on_condition_type => 'NOT_NULL',
        p_help_text                   => q'~<p>This text is added to the ALT tag of the image.&nbsp; When the cursor hovers over the image the alternate text is displayed.<br />
If this Icon Bar item has no image, just text, this is where you specify that text.</p>~',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Alternative Text, serves as a crucial element to enhance accessibility for users with visual impairments. It provides a textual description of images within documents or webpages, offering insights into their significance in relation to the content.</p>
<strong>Best practices:</strong>
<ol>
<li>Purposeful Description:
<ul>
<li>Alt Text should succinctly convey the significance of the image in relation to the surrounding content.</li>
<li>Focus on describing the "why" of the image rather than stating what the image is.</li>
<li>Keep Alt Text clear, concise, and descriptive.</li>
</ul>
</li>
<strong>Example:</strong>
<p>"Team celebrating with high-fives and smiles after successfully completing a challenging project."</p>
In this example, the alt text emphasizes the reason behind the image, which is the successful completion of a challenging project and the resulting celebration among team members. This description provides context and insight into the significance of the image for users who cannot see it directly.
<li>Informative Images:
Identify images that contribute to the comprehension or context of the webpage.
If removing the image would diminish the page's meaning or significance, it requires Alt Text.</li>
<li>Avoid Redundancy:
Omit phrases like "image of" as screen readers automatically announce an image as such.</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_HEIGHT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_WIDTH',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FEEDBACK_ENTRY',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_TARGET',
        p_db_column                   => 'ICON_TARGET',
        p_is_required                 => true,
        p_is_common                   => true );
    --
    store_standard_attr_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_has_condition               => true,
        p_cond_type_db_column         => 'ICON_BAR_DISP_COND_TYPE',
        p_cond_exp1_db_column         => 'ICON_BAR_DISP_COND',
        p_cond_exp2_db_column         => 'ICON_BAR_FLOW_COND_INSTR',
        p_has_authorization_scheme    => true,
        p_authorization_db_column     => 'SECURITY_SCHEME',
        p_has_build_option            => true,
        p_has_comments                => true,
        p_comment_db_column           => 'ICON_BAR_COMMENT' );
    --
    --
    -- Component Properties for BREADCRUMB
    --
    l_component_type_id           := c_comp_type_breadcrumb;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'APPLICATION',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'MENU_COMMENT' );
    --
    --
    -- Component Properties for Breadcrumb Entry
    --
    l_component_type_id := c_comp_type_breadcrumb_entry;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'SHORT_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~Identify the short name of this breadcrumb entry. Both the short and long names can be referenced from the breadcrumb template.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BREADCRUMB_PAGE_NUMBER',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EXECUTION_SEQUENCE',
        p_db_column         => 'OPTION_SEQUENCE',
        p_default_value     => '10',
        p_is_required       => true,
        p_is_common         => true );

    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARENT_BREADCRUMB_ENTRY',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LONG_NAME',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LINK_TARGET',
        p_db_column         => 'LINK',
        p_is_required       => false,
        p_is_common         => true );
    --
    store_standard_attr_comp_prop (
        p_component_type_id        => l_component_type_id,
        p_has_condition            => true,
        p_cond_type_db_column      => 'DISPLAY_WHEN_COND_TYPE',
        p_cond_type_view_db_column => 'CONDITION_TYPE',
        p_cond_exp1_db_column      => 'DISPLAY_WHEN_CONDITION',
        p_cond_exp2_db_column      => 'DISPLAY_WHEN_CONDITION2',
        p_has_authorization_scheme => true,
        p_authorization_db_column  => 'SECURITY_SCHEME',
        p_has_build_option         => true,
        p_build_option_db_column   => 'REQUIRED_PATCH',
        p_has_comments             => true,
        p_comment_db_column        => 'MENU_OPTION_COMMENT' );
    --
    --
    -- Component Properties for LIST
    --
    l_component_type_id           := c_comp_type_list;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'APPLICATION',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#',
        p_help_text         => q'~Enter a unique name for the list.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LIST_SUBSCRIBED_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LIST_TYPE',
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LIST_SQL_QUERY',
        p_db_column                   => 'LIST_QUERY',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'LIST_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_QUERY' );
    --
    store_func_body_comp_props (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'LIST_',
        p_return_type       => 'SQL',
        p_type_property     => 'LIST_TYPE',
        p_type_value        => 'FUNCTION_RETURNING_SQL_QUERY' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id      => l_component_type_id,
        p_has_build_option       => true,
        p_build_option_db_column => 'REQUIRED_PATCH',
        p_has_comments           => true,
        p_comment_db_column      => 'LIST_COMMENT' );
    --
    --
    -- Component Properties for LIST ENTRY
    --
    l_component_type_id           := c_comp_type_list_entry;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LABEL',
        p_db_column             => 'LIST_ITEM_LINK_TEXT',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => true,
        p_help_text             => q'~Identify the text of the link. The display of this link text is controlled by list templates.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IMAGE_ICON_CSS_CLASSES',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IMAGE_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => true,
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Alternative Text, serves as a crucial element to enhance accessibility for users with visual impairments. It provides a textual description of images within documents or webpages, offering insights into their significance in relation to the content.</p>
<strong>Best practices:</strong>
<ol>
<li>Purposeful Description:
<ul>
<li>Alt Text should succinctly convey the significance of the image in relation to the surrounding content.</li>
<li>Focus on describing the "why" of the image rather than stating what the image is.</li>
<li>Keep Alt Text clear, concise, and descriptive.</li>
</ul>
</li>
<strong>Example:</strong>
<p>"Team celebrating with high-fives and smiles after successfully completing a challenging project."</p>
In this example, the alt text emphasizes the reason behind the image, which is the successful completion of a challenging project and the resulting celebration among team members. This description provides context and insight into the significance of the image for users who cannot see it directly.
<li>Informative Images:
Identify images that contribute to the comprehension or context of the webpage.
If removing the image would diminish the page's meaning or significance, it requires Alt Text.</li>
<li>Avoid Redundancy:
Omit phrases like "image of" as screen readers automatically announce an image as such.</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IMAGE_ALT_ATTRIBUTE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'LIST_ITEM_DISPLAY_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '10' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARENT_LIST_ENTRY',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SUBENTRIES_LIST',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IS_CURRENT_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'TARGET_PAGE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IS_CURRENT_PAGES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'IS_CURRENT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'COLON_DELIMITED_PAGE_LIST' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IS_CURRENT_SQL_STATEMENT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IS_CURRENT_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'EXISTS,NOT_EXISTS' );
    --
    store_expression_comp_props (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'IS_CURRENT_',
        p_return_type       => 'BOOLEAN',
        p_type_property     => 'IS_CURRENT_TYPE' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LINK_TARGET',
        p_db_column         => 'LIST_ITEM_LINK_TARGET',
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COUNT_CLICKS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'LINK_TARGET',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CLICK_COUNT_CATEGORY',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'COUNT_CLICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'TRANSLATE_USER_DEFINED_ATTRIBUTES',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'USER_DEFINED_ATTRIBUTE1',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'USER_DEFINED_ATTRIBUTE2',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'USER_DEFINED_ATTRIBUTE3',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'USER_DEFINED_ATTRIBUTE4',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'USER_DEFINED_ATTRIBUTE5',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'USER_DEFINED_ATTRIBUTE6',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'USER_DEFINED_ATTRIBUTE7',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'USER_DEFINED_ATTRIBUTE8',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'USER_DEFINED_ATTRIBUTE9',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'USER_DEFINED_ATTRIBUTE10',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_standard_attr_comp_prop (
        p_component_type_id        => l_component_type_id,
        p_has_condition            => true,
        p_cond_type_db_column      => 'LIST_ITEM_DISP_COND_TYPE',
        p_cond_type_view_db_column => 'CONDITION_TYPE',
        p_cond_exp1_db_column      => 'LIST_ITEM_DISP_CONDITION',
        p_cond_exp2_db_column      => 'LIST_ITEM_DISP_CONDITION2',
        p_has_authorization_scheme => true,
        p_authorization_db_column  => 'SECURITY_SCHEME',
        p_has_build_option         => true,
        p_has_comments             => true,
        p_comment_db_column        => 'LIST_ITEM_COMMENT' );
    --
    --
    -- Component Properties for APP_ITEM
    --
    l_component_type_id := c_comp_type_app_item;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ITEM_NAME',
        p_db_column             => 'NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => 'G_NEW' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_ITEM_SCOPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'APP' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_ITEM_DATA_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'VARCHAR' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SESSION_STATE_PROTECTION',
        p_db_column         => 'PROTECTION_LEVEL',
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'I' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ESCAPE_SPECIAL_CHARACTERS',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Y' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_build_option  => true,
        p_has_comments      => true,
        p_comment_db_column => 'ITEM_COMMENT' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_ITEM_SUBSCRIBED_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    --
    -- Component Properties for APP_PROCESS
    --
    l_component_type_id := c_comp_type_app_process;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_process_type_comp_prop (
        p_name_db_column           => 'PROCESS_NAME',
        p_name_help_text           => q'~Enter the name of the process for easy identification by developers.~',
        p_db_column_prefix         => null,
        p_execution_seq_db_column  => 'PROCESS_SEQUENCE',
        p_error_message_db_column  => 'PROCESS_ERROR_MESSAGE',
        p_has_authorization_scheme => true,
        p_build_option_db_column   => null,
        p_comment_db_column        => 'PROCESS_COMMENT' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_PROCESS_SUBSCRIBED_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    --
    -- Component Properties for APP_SETTING
    --
    l_component_type_id           := c_comp_type_app_setting;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME_UPPER',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~Enter a descriptive name for this application setting. Application Settings enable developers to define application level configuration options.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PARAMETER_VALUE',
        p_db_column             => 'VALUE',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false,
        p_help_text             => q'~Enter the default value for this application setting.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARAMETER_REQUIRED',
        p_db_column         => 'IS_REQUIRED',
        p_is_required       => true,
        p_is_common         => true,
        p_help_text         => q'~Specify whether this application setting is required and must always be set.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'VALID_VALUES',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ON_UPGRADE_KEEP_VALUE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_SETTING_SUBSCRIBED_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_build_option  => true,
        p_has_comments      => true,
        p_comment_db_column => 'COMMENTS' );

    --
    -- Component Properties for PWA_SHORTCUT
    --
    l_component_type_id := c_comp_type_pwa_shortcut;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_help_text             => q'~Name of this PWA shortcut.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'DISPLAY_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DESCRIPTION',
        p_db_column             => 'DESCRIPTION',
        p_is_required           => false,
        p_is_common             => true,
        p_help_text             => q'~Identifies the description of the PWA shortcut.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LINK_TARGET',
        p_db_column             => 'TARGET_URL',
        p_is_required           => true,
        p_is_common             => true,
        p_help_text             => q'~Identifies the target URL which this PWA shortcut opens.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ICON_URL',
        p_db_column             => 'ICON_URL',
        p_is_required           => false,
        p_is_common             => true,
        p_help_text             => q'~Identifies the icon URL used by this PWA shortcut.~' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id        => l_component_type_id,
        p_has_build_option         => true,
        p_build_option_db_column   => 'BUILD_OPTION_ID',
        p_has_comments             => true,
        p_comment_db_column        => 'PWA_SHORTCUT_COMMENT' );

    --
    -- Component Properties for PWA_SCREENSHOTS
    --
    l_component_type_id := c_comp_type_pwa_screenshot;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LABEL',
        p_db_column             => 'LABEL',
        p_is_required           => true,
        p_is_common             => true,
        p_help_text             => q'~Label of this PWA screenshot.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'DISPLAY_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SCREENSHOT_URL',
        p_db_column             => 'SCREENSHOT_URL',
        p_is_required           => true,
        p_is_common             => true,
        p_help_text             => q'~Identifies the target URL which this PWA screenshot opens.~' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id        => l_component_type_id,
        p_has_build_option         => true,
        p_build_option_db_column   => 'BUILD_OPTION_ID',
        p_has_comments             => true,
        p_comment_db_column        => 'PWA_SCREENSHOT_COMMENT' );

    --
    --
    -- Component Properties for LOV
    --
    l_component_type_id := c_comp_type_lov;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME_UPPER',
        p_db_column             => 'LOV_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter the name of this list of values.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LOV_SUBSCRIBED_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_comp_prop_location (
        p_location_property_name      => 'LOV_SOURCE_LOCATION',
        p_query_type_property_name    => 'LOV_QUERY_TYPE',
        p_db_column_query_type        => 'SOURCE_TYPE',
        p_db_column_source_lang       => 'FUNCTION_BODY_LANGUAGE',
        p_db_column_source            => 'LOV_QUERY',
        p_has_items_to_submit         => false,
        p_db_column_items_to_submit   => null,
        p_has_include_rowid           => false,
        p_has_order_by                => false,
        p_has_external_order_by       => true,
        p_has_order_by_item           => false,
        p_has_web_src_has_local_table => true,
        p_has_remote_caching          => true,
        p_examples_sql_query          => null,
        p_help_text_items_to_submit   => null );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'RETURN_COLUMN_NAME',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'LOV_SOURCE_LOCATION',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'LOCAL,REMOTE',
        p_depending_on_comp_prop_name2 => 'LOV_QUERY_TYPE',
        p_depending_on_has_to_exist2   => false,
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'LEGACY_SQL',
        p_parent_comp_prop_name        => 'LOV_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DISPLAY_COLUMN_NAME',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'LOV_SOURCE_LOCATION',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'LOCAL,REMOTE',
        p_depending_on_comp_prop_name2 => 'LOV_QUERY_TYPE',
        p_depending_on_has_to_exist2   => false,
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'LEGACY_SQL',
        p_parent_comp_prop_name        => 'LOV_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DEFAULT_SORT_COLUMN_NAME',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_null_text                    => 'Use Order By from Query',
        p_depending_on_comp_prop_name  => 'LOV_SOURCE_LOCATION',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'LOCAL,REMOTE',
        p_depending_on_comp_prop_name2 => 'LOV_QUERY_TYPE',
        p_depending_on_has_to_exist2   => false,
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'LEGACY_SQL',
        p_parent_comp_prop_name        => 'LOV_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SORT_DIRECTION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'ASC',
        p_depending_on_comp_prop_name => 'DEFAULT_SORT_COLUMN_NAME',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GROUP_COLUMN_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'DEFAULT_SORT_COLUMN_NAME',
        p_depending_on_condition_type => 'NOT_NULL',
        p_parent_comp_prop_name       => 'LOV_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GROUP_SORT_DIRECTION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'ASC',
        p_depending_on_comp_prop_name => 'GROUP_COLUMN_NAME',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ICON_COLUMN_NAME',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'LOV_SOURCE_LOCATION',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'LOCAL,REMOTE',
        p_depending_on_comp_prop_name2 => 'LOV_QUERY_TYPE',
        p_depending_on_has_to_exist2   => false,
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'LEGACY_SQL',
        p_parent_comp_prop_name        => 'LOV_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ORACLE_TEXT_INDEX_COLUMN',
        p_db_column                    => 'ORACLE_TEXT_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'LOV_SOURCE_LOCATION',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'LOCAL,REMOTE',
        p_depending_on_comp_prop_name2 => 'LOV_QUERY_TYPE',
        p_depending_on_has_to_exist2   => false,
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'LEGACY_SQL',
        p_parent_comp_prop_name        => 'LOV_SOURCE_LOCATION' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'LOV_COMMENT' );
    --
    -- Component Properties for LOV Web Source Parameters
    --
    l_component_type_id           := c_comp_type_lov_ws_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_ws_param_comp;
    --
    --
    -- Component Properties for LOV ENTRY
    --
    l_component_type_id := c_comp_type_lov_entry;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LOV_SEQUENCE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DISPLAY_VALUE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => true,
        p_default_value         => '#PLEASE_CHANGE#' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'RETURN_VALUE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LOV_ENTRY_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_standard_attr_comp_prop (
        p_component_type_id        => l_component_type_id,
        p_has_condition            => true,
        p_cond_type_db_column      => 'LOV_DISP_COND_TYPE',
        p_cond_type_view_db_column => 'CONDITION_TYPE',
        p_cond_exp1_db_column      => 'LOV_DISP_COND',
        p_cond_exp2_db_column      => 'LOV_DISP_COND2',
        p_has_build_option         => true,
        p_build_option_db_column   => 'REQUIRED_PATCH',
        p_has_comments             => true,
        p_comment_db_column        => 'LOV_DATA_COMMENT' );
    --
    --
    -- Component Properties for LOV COLUMN
    --
    l_component_type_id := c_comp_type_lov_column;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COLUMN_NAME',
        p_db_column         => 'QUERY_COLUMN_NAME',
        p_is_required       => true,
        p_is_common         => true,
        p_check_uniqueness  => 'PARENT' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IS_VISIBLE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COLUMN_HEADING',
        p_db_column         => 'HEADING',
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'DISPLAY_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true,
        p_help_text         => q'~<p>Enter the display sequence for this column. The sequence setting determines where this column is displayed in relation to other columns within the list of values.</p>
<p>Note: If two columns, within the same list of vlaues, have the same sequence value then they may be displayed in a different order when the application is exported and imported into another environment, such as a test or production environment.
To ensure consistency, Oracle recommends you specify unique sequence numbers for every item, or at least for those within the same list of values.</p>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DATA_TYPE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORMAT_MASK_DATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'DATA_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'DATE,TIMESTAMP,TIMESTAMP_TZ,TIMESTAMP_LTZ' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORMAT_MASK_NUMBER',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'DATA_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NUMBER' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORMAT_MASK',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'DATA_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => 'DATE,TIMESTAMP,TIMESTAMP_TZ,TIMESTAMP_LTZ,NUMBER' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IS_SEARCHABLE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'Y' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'COLUMN_COMMENT' );
    --
    --
    -- Component Properties for WEB SERVICE REFERENCE
    --
    l_component_type_id           := c_comp_type_ws_ref;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'APPLICATION',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for WEB SERVICE REFERENCE OPERATION
    --
    l_component_type_id           := c_comp_type_ws_ref_operations;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => 'FULL_NAME',
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for WEB SERVICE REF OPERATION IN PARAMETER
    --
    l_component_type_id           := c_comp_type_ws_ref_oper_p_i;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for WEB SERVICE REF OPERATION OUT PARAMETER
    --
    l_component_type_id           := c_comp_type_ws_ref_oper_p_o;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for WEB SERVICE REF OPERATION AUTH PARAMETER
    --
    l_component_type_id           := c_comp_type_ws_ref_oper_p_a;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for WEB SERVICE REF OPERATION HEADER PARAMETER
    --
    l_component_type_id           := c_comp_type_ws_ref_oper_p_h;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for LEGACY DATA LOAD
    --
    l_component_type_id           := c_comp_type_legacy_data_load;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'APPLICATION',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for DATA LOAD DEFINITION
    --
    l_component_type_id           := c_comp_type_data_load_def;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_check_uniqueness      => 'APPLICATION',
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~The name for the data load definition.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DATA_LOAD_DEF_SUBSCRIBED_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );

    --
        store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'TARGET_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'TABLE' );
    --
    -- Target
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TARGET_OWNER',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'TARGET_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TARGET_TABLE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_parent_comp_prop_name       => 'TARGET_OWNER',
        p_depending_on_comp_prop_name => 'TARGET_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TARGET_COLLECTION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'TARGET_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'COLLECTION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LOADING_METHOD_TABLE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'APPEND',
        p_depending_on_comp_prop_name => 'TARGET_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LOADING_METHOD_COLLECTION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'APPEND',
        p_depending_on_comp_prop_name => 'TARGET_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'COLLECTION' );
    --
    -- Error Handling
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ERROR_HANDLING_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'ABORT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ERROR_COLLECTION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'ERROR_HANDLING_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'LOG_ROWS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ERROR_LOGGING_TABLE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_parent_comp_prop_name       => 'TARGET_OWNER',
        p_depending_on_comp_prop_name => 'ERROR_HANDLING_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ERROR_LOG' );
    --
    -- Advanced
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COMMIT_INTERVAL',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'STATIC_ID',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_help_text             => q'~Use the Static ID to reference the Data Load Definition in API Calls.~' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_comment_db_column => 'COMMENTS' );
    --
    --
    -- Component Properties for DATA_LOAD_DEF_DATA_PROFILE and DATA_LOAD_DEF_DATA_PROFILE_COLUMN
    --
    store_comp_prop_data_profile (
        p_profile_type_id => c_comp_type_data_load_dp,
        p_column_type_id  => c_comp_type_data_load_dp_col );
    --
    --
    -- Component Properties for new TASK DEF
    --
    l_component_type_id           := c_comp_type_task_def;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_check_uniqueness      => 'APPLICATION',
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Name of this task definition.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'TASK_SUBJECT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'TASK_TYPE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'INITIATOR_CAN_COMPLETE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'N' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PRIORITY',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => '3' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'TASK_DETAILS_PAGE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'TASK_VACATION_RULE_PROCEDURE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DUE_ON_TYPE',
        p_db_column             => null,
        p_is_required           => false,
        p_null_text             => 'None',
        p_is_common             => true);
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DUE_ON_INTERVAL_VALUE',
        p_db_column                   => 'DUE_ON_INTERVAL',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'DUE_ON_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'INTERVAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DUE_ON_QUERY_VALUE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'DUE_ON_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_QUERY' );
    --
    store_expression_comp_props (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'DUE_ON_',
        p_db_column_expr    => 'DUE_ON_INTERVAL',
        p_db_column_lang    => 'DUE_ON_LANGUAGE',
        p_return_type       => 'CUSTOM',
        p_custom_data_type  => 'TIMESTAMP WITH TIME ZONE',
        p_type_property     => 'DUE_ON_TYPE' );
    --
    store_func_body_comp_props (
        p_component_type_id   => l_component_type_id,
        p_name_prefix         => 'DUE_ON_',
        p_db_column_func_body => 'DUE_ON_INTERVAL',
        p_db_column_lang      => 'DUE_ON_LANGUAGE',
        p_return_type         => 'CUSTOM',
        p_custom_data_type    => 'TIMESTAMP WITH TIME ZONE',
        p_type_property       => 'DUE_ON_TYPE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DUE_ON_SCHEDULER_VALUE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'DUE_ON_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SCHEDULER_EXPRESSION' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'EXPIRATION_POLICY',
        p_db_column             => null,
        p_is_required           => true,
        p_default_value         => 'NONE',
        p_null_text             => 'None',
        p_is_common             => true,
        p_depending_on_comp_prop_name => 'DUE_ON_TYPE',
        p_depending_on_condition_type => 'NOT_NULL');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAX_RENEWAL_COUNT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'EXPIRATION_POLICY',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'RENEW' );
    --
    -- MAX_RENEWAL_COUNT is part of Display Group "Appearance" but also has a dependency
    -- to Component-Prop 'BLOB_TABLE', so we have to move it up after creation
    resequence_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name              => 'MAX_RENEWAL_COUNT',
        p_previous_name     => 'DUE_ON_SCHEDULER_VALUE' );
    --
    -- $$$ todo should be improved with a type selection (Table, SQL, None)
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SOURCE_QUERY_OWNER',
        p_db_column             => 'ACTIONS_TABLE_OWNER',
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SOURCE_QUERY_TABLE',
        p_db_column             => 'ACTIONS_TABLE_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_parent_comp_prop_name => 'SOURCE_QUERY_OWNER' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SOURCE_SQL_QUERY',
        p_db_column             => 'ACTIONS_SQL_QUERY',
        p_is_required           => false,
        p_is_common             => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COLUMN_MAPPING_PK_COLUMN',
        p_db_column             => 'ACTIONS_PK_COLUMN_NAME',
        p_is_required           => false,
        p_is_common             => true,
        p_parent_comp_prop_name => 'SOURCE_QUERY_TABLE', -- $$$ todo should this work for query and table?
        p_help_text             => q'~The primary key column for the table which will serve as the system of records for actions defined for this task definition.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'STATIC_ID',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_check_uniqueness      => 'APPLICATION',
        p_help_text             => q'~Static ID for this task definition. The static ID is used when manually executing the automation with
the <strong>APEX_APPROVAL</strong> package (<strong>APEX_APPROVAL.CREATE_TASK</strong>).~' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'TASK_DEF_COMMENT' );
    --
    --
    -- Component Properties for new TASK DEF PARAMETER
    --
    l_component_type_id           := c_comp_type_task_def_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IDENTIFICATION_STATIC_ID',
        p_db_column             => null,
        p_check_uniqueness      => 'PARENT',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LABEL',
        p_db_column         => 'LABEL',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#',
        p_check_uniqueness  => 'PARENT',
        p_help_text         => q'~An end-user friendly name of the task parameter.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'TASK_PARAM_DATA_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'VARCHAR2' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARAMETER_REQUIRED',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ADVANCED_IS_VISIBLE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARAMETER_UPDATABLE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'Y' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'PARAM_COMMENT' );
    --
    --
    -- Component Properties for TASK DEF ACTION
    --
    l_component_type_id           := c_comp_type_task_def_action;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_process_type_comp_prop (
        p_name_db_column           => null,
        p_name_help_text           => q'~Enter a name for the task definition action.~',
        p_db_column_prefix         => 'ACTION_',
        p_execution_seq_db_column  => 'EXECUTION_SEQUENCE',
        p_error_message_db_column  => 'ERROR_MESSAGE',
        p_error_message_help_text  => q'~Enter an error message to be written to the task history when the processing fails. Use #SQLERRM# as a placeholder for the actual ORA error message.~',
        p_stop_execution_help_text => q'~Enable when processing for the current task should stop on error. Subsequent actions will not be processed in this case and the task will go the ERRORED state.~',
        p_has_authorization_scheme => false,
        p_build_option_db_column   => 'BUILD_OPTION_ID',
        p_comment_db_column        => 'ACTION_COMMENT' );
    --
    --
    -- Component Properties for TASK DEF PARTICIPANT
    --
    l_component_type_id           := c_comp_type_task_def_particip;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARTICIPANT_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'POTENTIAL_OWNER' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARTICIPANT_VALUE_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_STATIC_VALUE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PARTICIPANT_VALUE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_QUERY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PARTICIPANT_VALUE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_QUERY' );
    --
    store_expression_comp_props (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'VALUE_',
        p_return_type       => 'VARCHAR2',
        p_type_property     => 'PARTICIPANT_VALUE_TYPE' );
    --
    store_func_body_comp_props (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'VALUE_',
        p_return_type       => 'VARCHAR2',
        p_type_property     => 'PARTICIPANT_VALUE_TYPE' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for new SEARCH CONFIG
    --
    l_component_type_id           := c_comp_type_search_config;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'NAME',
        p_db_column                    => 'LABEL',
        p_is_required                  => true,
        p_is_common                    => true,
        p_supports_substitution        => false,
        p_check_uniqueness             => 'APPLICATION',
        p_default_value                => '#PLEASE_CHANGE#',
        p_help_text                    => q'~Display Name for this Search Configuration.~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_PREFIX',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_supports_substitution        => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_CONFIG_SUBSCRIBED_FROM',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VERSION_SCN',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_TYPE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'SIMPLE',
        p_supports_substitution        => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SOURCE_LIST',
        p_db_column                    => 'LIST_ID',
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'SIMPLE',
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'APEX_LIST' );
    --
    store_comp_prop_location (
        p_location_property_name       => 'SOURCE_LOCATION',
        p_query_type_property_name     => 'SOURCE_QUERY_TYPE',
        p_db_column_query_type         => 'QUERY_TYPE',
        p_db_column_source_lang        => null,
        p_db_column_source             => 'QUERY_SOURCE',
        p_has_items_to_submit          => false,
        p_db_column_items_to_submit    => null,
        p_has_include_rowid            => false,
        p_has_order_by                 => false,
        p_has_external_order_by        => false,
        p_has_order_by_item            => false,
        p_has_web_src_has_local_table  => false,
        p_has_remote_caching           => false,
        p_examples_sql_query           => null,
        p_help_text_items_to_submit    => null,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SIMPLE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCHABLE_COLUMNS',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SIMPLE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'WEB_SRC_FUNCTION',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SIMPLE',
        p_depending_on_comp_prop_name2 => 'SOURCE_LOCATION',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'WEB_SOURCE' );
    --
    -- ### TODO this must be revisited, as the "Column Mapping" properties below only have
    --          "Location" as the parent and this would not catch the TEXT_TABLE_NAME and
    --          TEXT_TABLE_NAME properties. However, when "Manual Oracle Text" is chosen
    --          as the search type, we don't want to expose the whole plethora of data source
    --          properties. However, as long as we don't maintain this in Page Designer, it's
    --          of low priority.
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SIMPLE_SOURCE_QUERY_TYPE',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'TEXT_MANUAL,VECTOR' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_TEXT_TABLE_OWNER',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'TEXT_MANUAL',
        p_depending_on_comp_prop_name2 => 'SIMPLE_SOURCE_QUERY_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'TABLE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_TEXT_TABLE_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'TEXT_MANUAL',
        p_depending_on_comp_prop_name2 => 'SIMPLE_SOURCE_QUERY_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'TABLE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_TEXT_SQL_QUERY',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'TEXT_MANUAL',
        p_depending_on_comp_prop_name2 => 'SIMPLE_SOURCE_QUERY_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ORACLE_TEXT_INDEX_COLUMN_NAME',
        p_db_column                    => 'ORATEXT_INDEX_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_parent_comp_prop_name        => 'SEARCH_TEXT_TABLE_OWNER',
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'TEXT_MANUAL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ORACLE_TEXT_INDEX_NAME',
        p_db_column                    => 'ORATEXT_INDEX_NAME',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'TEXT_MANUAL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ORACLE_DBMS_SEARCH_INDEX_OWNER',
        p_db_column                    => 'ORATEXT_INDEX_OWNER',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'TEXT_DBMS_SEARCH' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ORACLE_DBMS_SEARCH_INDEX_NAME',
        p_db_column                    => 'ORATEXT_INDEX_NAME',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'TEXT_DBMS_SEARCH' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ORACLE_DBMS_SEARCH_SOURCE_OWNER',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'TEXT_DBMS_SEARCH' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ORACLE_DBMS_SEARCH_SOURCE_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'TEXT_DBMS_SEARCH' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'TEXT_QUERY_FUNCTION_TYPE',
        p_db_column                    => 'ORATEXT_FUNCTION_TYPE',
        p_is_required                  => false,
        p_null_text                    => 'None',
        p_null_help_text               => '~&PRODUCT_NAME. encloses each query term with "{" and "}", except the keywords <strong>and</strong> and <strong>or</strong>~',
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'TEXT_MANUAL,TEXT_DBMS_SEARCH' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ORACLE_TEXT_FUNCTION',
        p_db_column                    => 'ORATEXT_FUNCTION',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'TEXT_MANUAL,TEXT_DBMS_SEARCH',
        p_depending_on_comp_prop_name2 => 'TEXT_QUERY_FUNCTION_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'CUSTOM' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VECTOR_OWNER',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'VECTOR',
        p_depending_on_comp_prop_name2 => 'SIMPLE_SOURCE_QUERY_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'TABLE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VECTOR_TABLE',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'VECTOR',
        p_depending_on_comp_prop_name2 => 'SIMPLE_SOURCE_QUERY_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'TABLE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VECTOR_SQL_QUERY',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'VECTOR',
        p_depending_on_comp_prop_name2 => 'SIMPLE_SOURCE_QUERY_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VECTOR_PROVIDER',
        p_db_column                    => 'EMB_AI_PROVIDER_ID',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'VECTOR' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VECTOR_COLUMN',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'VECTOR' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VECTOR_SEARCH_TYPE',
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'EXACT',
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'VECTOR' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VECTOR_DISTANCE_METRIC',
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'COSINE',
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'VECTOR' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VECTOR_TARGET_ACCURACY',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'VECTOR',
        p_depending_on_comp_prop_name2 => 'VECTOR_SEARCH_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'APPROX' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VECTOR_MAXIMUM_VECTOR_DISTANCE',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SEARCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'VECTOR' );
    --
    resequence_comp_prop_bulk (
        p_component_type_id            => l_component_type_id,
        p_names                        => wwv_flow_t_varchar2(
                                            'SEARCHABLE_COLUMNS',
                                            'WEB_SRC_FUNCTION',
                                            'SIMPLE_SOURCE_QUERY_TYPE' ),
        p_previous_name                => 'OPTIMIZER_HINT' );
    --
    resequence_comp_prop_bulk (
        p_component_type_id            => l_component_type_id,
        p_names                        => wwv_flow_t_varchar2(
                                            'VECTOR_OWNER',
                                            'VECTOR_TABLE',
                                            'VECTOR_SQL_QUERY' ),
        p_previous_name                => 'SIMPLE_SOURCE_QUERY_TYPE' );
    --
    resequence_comp_prop_bulk (
        p_component_type_id            => l_component_type_id,
        p_names                        => wwv_flow_t_varchar2(
                                            'SEARCH_TEXT_TABLE_OWNER',
                                            'SEARCH_TEXT_TABLE_NAME',
                                            'SEARCH_TEXT_SQL_QUERY',
                                            'ORACLE_TEXT_INDEX_COLUMN_NAME',
                                            'ORACLE_TEXT_INDEX_NAME',
                                            'ORACLE_DBMS_SEARCH_INDEX_OWNER',
                                            'ORACLE_DBMS_SEARCH_INDEX_NAME',
                                            'ORACLE_DBMS_SEARCH_SOURCE_OWNER',
                                            'ORACLE_DBMS_SEARCH_SOURCE_NAME' ),
        p_previous_name                => 'SOURCE_WEB_SRC_QUERY' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SOURCE_QUERY_ORDER_BY',
        p_db_column                    => 'QUERY_ORDER_BY',
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_PK1_COLUMN_NAME',
        p_parent_comp_prop_name        => 'SOURCE_LOCATION',
        p_is_required                  => true,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_PK2_COLUMN_NAME',
        p_parent_comp_prop_name        => 'SOURCE_LOCATION',
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_TITLE_COLUMN_NAME',
        p_parent_comp_prop_name        => 'SOURCE_LOCATION',
        p_is_required                  => true,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_SUBTITLE_COLUMN_NAME',
        p_is_required                  => false,
        p_parent_comp_prop_name        => 'SOURCE_LOCATION',
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_DESCR_COLUMN_NAME',
        p_is_required                  => false,
        p_parent_comp_prop_name        => 'SOURCE_LOCATION',
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_BADGE_COLUMN_NAME',
        p_parent_comp_prop_name        => 'SOURCE_LOCATION',
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_LAST_MODIFIED_COLUMN_NAME',
        p_parent_comp_prop_name        => 'SOURCE_LOCATION',
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_CUSTOM_01_COLUMN_NAME',
        p_parent_comp_prop_name        => 'SOURCE_LOCATION',
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_CUSTOM_02_COLUMN_NAME',
        p_parent_comp_prop_name        => 'SOURCE_LOCATION',
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_CUSTOM_03_COLUMN_NAME',
        p_parent_comp_prop_name        => 'SOURCE_LOCATION',
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_SCORE_COLUMN_NAME',
        p_parent_comp_prop_name        => 'SOURCE_LOCATION',
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LINK_TARGET_TYPE',
        p_is_required                  => true,
        p_is_common                    => false,
        p_help_text                    => q'~Select the action to be performed when an entry in the result list is clicked.~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LINK_TARGET',
        p_db_column                    => 'LINK_TARGET',
        p_is_required                  => true,
        p_is_common                    => true,
        p_reference_scope              => 'ROW',
        p_depending_on_comp_prop_name  => 'LINK_TARGET_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'REDIRECT_PAGE,REDIRECT_APP,REDIRECT_URL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ICON_SOURCE_TYPE',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_default_value                => null,
        p_null_text                    => 'No Icon' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ICON_CLASS_COLUMN_NAME',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => null,
        p_parent_comp_prop_name        => 'SOURCE_LOCATION',
        p_depending_on_comp_prop_name  => 'ICON_SOURCE_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'INITIALS,DYNAMIC_CLASS' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ICON_BLOB_COLUMN_NAME',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => null,
        p_parent_comp_prop_name        => 'SOURCE_LOCATION',
        p_depending_on_comp_prop_name  => 'ICON_SOURCE_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'BLOB' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ICON_IMAGE_URL',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_reference_scope              => 'ROW',
        p_default_value                => null,
        p_depending_on_comp_prop_name  => 'ICON_SOURCE_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'URL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'CARD_ICON_CSS_CLASSES',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_reference_scope              => 'ROW',
        p_default_value                => null,
        p_depending_on_comp_prop_name  => 'ICON_SOURCE_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'INITIALS,DYNAMIC_CLASS,BLOB,URL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'BLOB_MIME_TYPE_COLUMN',
        p_db_column                    => 'ICON_MIMETYPE_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => true,
        p_parent_comp_prop_name        => 'SOURCE_LOCATION',
        p_depending_on_comp_prop_name  => 'ICON_BLOB_COLUMN_NAME',
        p_depending_on_condition_type  => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'HTML_EXPRESSION',
        p_db_column                    => 'DEFAULT_ROW_HTML_EXPR',
        p_is_required                  => false,
        p_is_common                    => false,
        p_reference_scope              => 'ROW',
        p_default_value                => null );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'APPEARANCE_CSS_CLASSES',
        p_db_column                    => 'RESULT_CSS_CLASSES',
        p_is_required                  => false,
        p_is_common                    => false,
        p_help_text                    => q'~Enter the CSS Classes to be applied to each result. In row templates, this value will be available as the RESULT_CSS_CLASSES substitution.~');
    --
    resequence_comp_prop (
        p_component_type_id            => l_component_type_id,
        p_name                         => 'VECTOR_MAXIMUM_VECTOR_DISTANCE',
        p_previous_name                => 'APPEARANCE_CSS_CLASSES' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAXIMUM_ROW_COUNT',
        p_db_column                    => 'RETURN_MAX_RESULTS',
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_db_column                   => 'NO_RESULTS_FOUND_MESSAGE',
        p_is_required                 => false,
        p_is_common                   => false,
        p_help_text                   => 'The message to return when no results have been found for this search configuration.');
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'STATIC_ID',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_supports_substitution        => false,
        p_check_uniqueness             => 'APPLICATION',
        p_help_text                    => q'~Static ID for this search configuration. The static ID is used when using the search configuration in a programmatic context, with the APEX_SEARCH package.~' );
    --
    store_condition_type_comp_prop (
        p_component_type_id            => l_component_type_id,
        p_name_prefix                  => null,
        p_help_text_type               => null,
        p_db_column_type               => 'CONDITION_TYPE',
        p_view_column_type             => 'CONDITION_TYPE',
        p_db_column_expr1              => 'CONDITION_EXPR1',
        p_db_column_expr2              => 'CONDITION_EXPR2' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id            => l_component_type_id,
        p_has_authorization_scheme     => true,
        p_authorization_db_column      => 'AUTHORIZATION_SCHEME',
        p_has_build_option             => true,
        p_build_option_db_column       => 'BUILD_OPTION_ID',
        p_has_comments                 => true,
        p_comment_db_column            => 'SEARCH_COMMENT' );
    --
    --
    -- Component Properties for Search Config Web Source Parameters
    --
    l_component_type_id           := c_comp_type_search_ws_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_ws_param_comp;
    --
    --
    --
    -- Component Properties for SEARCH REGION SOURCES
    l_component_type_id           := c_comp_type_search_source;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'HIDDEN_PARENT_REGION',
        p_db_column                    => 'SEARCH_REGION_ID',
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'NAME',
        p_check_uniqueness             => 'PARENT',
        p_is_required                  => true,
        p_is_common                    => true,
        p_supports_substitution        => false,
        p_help_text                    => 'Enter a descriptive name for this search source.',
        p_default_value                => '#PLEASE_CHANGE#' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SEARCH_CONFIGURATION',
        p_is_required                  => true,
        p_is_common                    => true,
        p_check_uniqueness             => 'PARENT',
        p_supports_substitution        => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'USE_AS_INITIAL_RESULT',
        p_is_required                  => true,
        p_default_value                => 'N',
        p_is_common                    => true,
        p_supports_substitution        => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DISPLAY_SEQUENCE',
        p_db_column                    => 'DISPLAY_SEQUENCE',
        p_is_required                  => true,
        p_is_common                    => true,
        p_help_text                    => q'~<p>Enter the display sequence for this search configuration. The display sequence determines the order in which search configurations are searched and results are ordered.</p>
<p>Note: If two search configurations have the same sequence value then results might be displayed in a different order when the application is exported and imported into another environment, such as a test or production environment.
To ensure consistency, Oracle recommends you specify unique sequence numbers for every search configuration, or at least for those within the same search region.</p>~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'OVERRIDE_LABEL',
        p_is_required                  => false,
        p_is_common                    => true,
        p_supports_substitution        => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAX_RESULTS',
        p_is_required                  => false,
        p_is_common                    => true,
        p_supports_substitution        => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'CARD_ICON_CSS_CLASSES',
        p_db_column                    => 'OVERRIDE_ICON',
        p_is_required                  => false,
        p_is_common                    => true,
        p_supports_substitution        => false,
        p_help_text                    => q'~The icon or media, which is displayed with a search result, is specified in the Search Configuration, within Shared Components. This attribute allows to specify Icon CSS classes which override the Search Configuration settings.~' );
    --
    store_condition_type_comp_prop (
        p_component_type_id            => l_component_type_id,
        p_name_prefix                  => null,
        p_help_text_type               => null,
        p_db_column_type               => 'CONDITION_TYPE',
        p_view_column_type             => 'CONDITION_TYPE',
        p_db_column_expr1              => 'CONDITION_EXPR1',
        p_db_column_expr2              => 'CONDITION_EXPR2' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id            => l_component_type_id,
        p_has_authorization_scheme     => false,
        p_has_build_option             => true,
        p_build_option_db_column       => 'BUILD_OPTION_ID',
        p_has_comments                 => true,
        p_comment_db_column            => 'SOURCE_COMMENTS' );
    --
    --
    -- Component Properties for REGION_ACTIONS
    --
    --
    l_component_type_id           := c_comp_type_region_action;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_action_comp_props( p_is_region => true );
    --
    --
    -- Component Properties for REGION_ACTION_MENU_ENTRIES
    --
    --
    l_component_type_id           := c_comp_type_reg_act_menu_entry;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_action_menu_comp_props(
        p_parent_menu_property_name => 'REGION_ACTION_PARENT_MENU',
        p_is_region                 => true );
    --
    --
    -- Component Properties for IR_COLUMN_ACTIONS
    --
    --
    l_component_type_id           := c_comp_type_ir_column_action;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_action_comp_props( p_is_region => false );
    --
    --
    -- Component Properties for IR_COLUMN_ACTION_MENU_ENTRIES
    --
    --
    l_component_type_id           := c_comp_type_ir_act_menu_entry;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_action_menu_comp_props(
        p_parent_menu_property_name => 'IR_COLUMN_ACTION_PARENT_MENU',
        p_is_region                 => false );
    --
    --
    --
    -- Component Properties for STANDARD TAB SET
    --
    l_component_type_id           := c_comp_type_tab_set;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => 'D',
        p_check_uniqueness  => 'APPLICATION',
        p_is_required       => true,
        p_is_common         => true,
        p_is_read_only      => true );
    --
    --
    -- Component Properties for REPORT LAYOUT
    --
    l_component_type_id           := c_comp_type_report_layout;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => 'REPORT_LAYOUT_NAME',
        p_check_uniqueness  => 'APPLICATION',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REPORT_LAYOUT_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'RTF_FILE' );
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'FILE_NAME',
        p_db_column                     => null,
        p_is_required                   => false,
        p_is_common                     => true,
        p_depending_on_comp_prop_name   => 'REPORT_LAYOUT_TYPE',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => 'DOCX_FILE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'STATIC_ID',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_help_text             => q'~Use the Static ID to reference the Report Layout in API Calls.~' );
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'MIME_TYPE',
        p_db_column                     => null,
        p_is_required                   => false,
        p_is_common                     => true,
        p_depending_on_comp_prop_name   => 'REPORT_LAYOUT_TYPE',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => 'DOCX_FILE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REPORT_LAYOUT_DATA_LOOP_NAME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'REPORT_LAYOUT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DOCX_FILE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REPORT_LAYOUT_PAGE_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'REPORT_LAYOUT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'XSL_GENERIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REPORT_LAYOUT_REPORT_COLUMN_HEADING',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'REPORT_LAYOUT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'XSL_GENERIC',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Column headings play a crucial role in organizing and presenting tabular data in a clear and understandable format.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Descriptive and Meaningful:</strong> Use descriptive and meaningful column headings that accurately represent the content of each column. Column headings should succinctly convey the information contained within the respective columns.</li>
<li><strong>Consistency:</strong> Maintain consistency in column headings throughout the table. Consistent column headings facilitate navigation and comprehension for users, especially when interacting with complex tables containing multiple columns.</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REPORT_LAYOUT_COLUMN_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'REPORT_LAYOUT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'XSL_GENERIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REPORT_LAYOUT_COLUMN_TEMPLATE_WIDTH',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'REPORT_LAYOUT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'XSL_GENERIC' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REPORT_LAYOUT_SUBSCRIBED_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'REPORT_LAYOUT_COMMENT' );
    --
    --
    -- Component Properties for REPORT_QUERY
    --
    l_component_type_id           := c_comp_type_report_query;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'NAME',
        p_check_uniqueness      => 'APPLICATION',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~The report query name identifies the report query. When referencing a report query as a link target, the report query name is part of the request string. ~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'STATIC_ID',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_help_text             => q'~Use the Static ID to reference the report query in API Calls.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'OUTPUT_FILE_NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~The report query output filename. ~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PRINT_OUTPUT_FORMAT',
        p_db_column         => 'FORMAT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'PDF',
        p_null_text         => 'Derive from Item');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PRINT_OUTPUT_FORMAT_ITEM',
        p_db_column                   => 'FORMAT_ITEM',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PRINT_OUTPUT_FORMAT',
        p_depending_on_condition_type => 'NULL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REPORT_LAYOUT',
        p_db_column         => 'REPORT_LAYOUT_ID',
        p_is_required       => false,
        p_is_common         => false,
        p_null_text         => 'Use Generic Report Layout',
        p_help_text         => q'~Chose the report layout you want to use for formatting the report query result. Generic report layouts typically work with any report query. Named Column layouts work only with the report query they were created for or report queries that have a compatible list of columns.~' );
    --
    store_component_prop (
        p_component_type_id  => l_component_type_id,
        p_property_name      => 'PRINT_VIEW_FILE_AS',
        p_db_column          => 'CONTENT_DISPOSITION',
        p_is_required        => true,
        p_is_common          => false,
        p_default_value      => 'ATTACHMENT' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'INCLUDE_SESSION_STATE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SESSION_STATE_ITEMS',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for REPORT_QUERY_STATEMENT
    --
    l_component_type_id           := c_comp_type_report_query_stmt;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_location (
        p_location_property_name      => 'SOURCE_LOCATION',
        p_query_type_property_name    => 'SOURCE_QUERY_TYPE',
        p_db_column_query_type        => 'QUERY_TYPE',
        p_db_column_source_lang       => 'FUNCTION_BODY_LANGUAGE',
        p_db_column_source            => 'SQL_STATEMENT',
        p_has_items_to_submit         => false,
        p_db_column_items_to_submit   => null,
        p_has_include_rowid           => true,
        p_has_order_by                => true,
        p_has_order_by_item           => false,
        p_has_web_src_has_local_table => true,
        p_has_remote_caching          => false,
        p_examples_sql_query          => null,
        p_help_text_items_to_submit   => null,
        p_is_region                   => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => 'NAME',
        p_is_required       => true,
        p_is_common         => true,
        p_help_text         => q'~Name of this report query source.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'DISPLAY_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    --
    -- Component Properties for AUTOMATION
    --
    l_component_type_id           := c_comp_type_automation;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_check_uniqueness  => 'APPLICATION',
        p_is_required       => true,
        p_is_common         => true,
        p_help_text         => q'~Name of this automation.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IDENTIFICATION_STATIC_ID',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~
Static ID for this automation. The static ID is used when manually executing the automation with
the <strong>APEX_AUTOMATION</strong> package (<strong>APEX_AUTOMATION.EXECUTE</strong>).~' );
    --
    store_component_prop (
        p_component_type_id  => l_component_type_id,
        p_property_name      => 'AUTOMATION_TRIGGER_TYPE',
        p_is_required        => true,
        p_is_common          => true,
        p_default_value      => 'POLLING' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SCHEDULE_EXPRESSION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'AUTOMATION_TRIGGER_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'POLLING' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SCHEDULE_STATUS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'ACTIVE',
        p_depending_on_comp_prop_name => 'AUTOMATION_TRIGGER_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'POLLING' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ACTIONS_INITIATED_ON',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'ROWS' );
    --
    -- Initiated = SQL Query + Function Body Returning Boolean (see special code in store_comp_prop_location)
    store_comp_prop_location (
        p_location_property_name      => 'SOURCE_LOCATION',
        p_query_type_property_name    => 'SOURCE_QUERY_TYPE',
        p_db_column_query_type        => 'QUERY_TYPE',
        p_db_column_source_lang       => 'FUNCTION_BODY_LANGUAGE',
        p_db_column_source            => 'QUERY_SOURCE',
        p_has_items_to_submit         => false,
        p_db_column_items_to_submit   => null,
        p_has_include_rowid           => true,
        p_has_order_by                => true,
        p_has_order_by_item           => false,
        p_has_web_src_has_local_table => true,
        p_has_remote_caching          => false,
        p_examples_sql_query          => null,
        p_help_text_items_to_submit   => null,
        p_depending_on_comp_prop_name => 'ACTIONS_INITIATED_ON',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'ROWS,NO_ROWS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COLUMN_MAPPING_PK_COLUMN',
        p_db_column                   => 'PK_COLUMN_NAME',
        p_is_required                 => false,
        p_is_common                   => true,
        p_parent_comp_prop_name       => 'SOURCE_LOCATION',
        p_depending_on_comp_prop_name => 'ACTIONS_INITIATED_ON',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ROWS',
        p_help_text                   => q'~
Specify the <em>primary key</em> column within the query result. The value of this column will be added
to the log messages, in order to allow correlating log messages to source rows.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COMMIT_EACH_ROW',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'ACTIONS_INITIATED_ON',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ROWS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAXIMUM_ROWS_TO_PROCESS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'ACTIONS_INITIATED_ON',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ROWS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ACTION_ERROR_HANDLING',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'ABORT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ADDITIONAL_CODE_PLSQL_CODE',
        p_is_required                 => false,
        p_is_common                   => false,
        p_help_text                   => q'~
<p>Enter a PL/SQL anonymous block of code that contains procedures to be called for
Initialization or Cleanup of the automation, or before action processing for each row.</p>

<p>For performance reasons you can also store this code in a PL/SQL package in the database.</p>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'INIT_PROCEDURE_NAME',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BEFORE_ROW_PROCESSING_PROCEDURE_NAME',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CLEANUP_PROCEDURE_NAME',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id        => l_component_type_id,
        p_has_condition            => true,
        p_cond_type_name_prefix    => 'AUTOM',
        p_cond_type_db_column      => 'CONDITION_TYPE',
        p_cond_exp1_db_column      => 'CONDITION_EXPR1',
        p_cond_exp2_db_column      => 'CONDITION_EXPR2',
        p_has_build_option         => true,
        p_build_option_db_column   => 'BUILD_OPTION_ID',
        p_has_comments             => true,
        p_comment_db_column        => 'AUTOMATION_COMMENT',
        p_comment_import_api_param => 'comment' );
    --
    --
    -- Component Properties for Automation Web Source Parameters
    --
    l_component_type_id           := c_comp_type_autom_ws_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_ws_param_comp;
    --
    --
    -- Component Properties for AUTOMATION ACTIONS
    --
    l_component_type_id           := c_comp_type_automation_action;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_process_type_comp_prop (
        p_name_db_column           => null,
        p_name_help_text           => q'~Enter a name for the automation action.~',
        p_db_column_prefix         => 'ACTION_',
        p_execution_seq_db_column  => 'EXECUTION_SEQUENCE',
        p_error_message_db_column  => 'ERROR_MESSAGE',
        p_error_message_help_text  => q'~Enter an error message to be written to the automation log when the processing fails. Use #SQLERRM# as a placeholder for the actual ORA error message.~',
        p_has_authorization_scheme => false,
        p_build_option_db_column   => 'BUILD_OPTION_ID',
        p_comment_db_column        => 'ACTION_COMMENT',
        p_comment_import_api_param => 'comment' );
    --
    --
    -- Component Properties for CLASSIC_REPORT
    --
    l_component_type_id           := c_comp_type_classic_report;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_report_attributes;

    --
    --
    -- Component Properties for CLASSIC_REPORT_COLUMN
    --
    l_component_type_id           := c_comp_type_classic_rpt_column;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_report_columns (
        p_type_property_name => 'CLASSIC_REPORT_COLUMN_TYPE' );

    --
    --
    -- Component Properties for TABULAR_FORM
    --
    l_component_type_id           := c_comp_type_tab_form;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_report_attributes;
    --
    --
    -- Component Properties for TAB_FORM_COLUMN
    --
    l_component_type_id           := c_comp_type_tab_form_column;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_report_columns (
        p_type_property_name => 'TAB_FORM_COLUMN_TYPE' );

    --
    -- Component Properties for JET CHART
    --
    l_component_type_id           := c_comp_type_jet_chart;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    -- Chart
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_CHART_TYPE',
        p_db_column                   => 'CHART_TYPE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'bar' );
    --
    -- Title
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CHART_TITLE',
        p_db_column                   => 'TITLE',
        p_is_required                 => false,
        p_is_common                   => true,
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Clear titles, and labels are crucial for making visualizations accessible to all users.</p>
<strong>Best Practices:</strong>
<ul>
<li>Descriptive Title:
Use descriptive titles that clearly explain what the visualization depicts and guide readers on what to focus on.</li>
</ul>
<p>By adhering to these principles, you can enhance the accessibility of your visualizations for all users, including those with visual impairments or color blindness.</p>~' );
    --
    -- Appearance
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ORIENTATION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'vertical',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_jet_area || ',' || c_jet_bar || ',' || c_jet_combo || ',' || c_jet_funnel || ',' || c_jet_line || ',' || c_jet_line_with_area || ',' || c_jet_box_plot || ',' || c_jet_range);
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'STACK',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'off',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_stack || ',' || c_jet_polar || ',' || c_jet_radar);
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'STACK_LABEL',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_default_value                => 'off',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_bar,
        p_depending_on_comp_prop_name2 => 'STACK',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'on');
    --
    store_jet_font_comp_props (
        p_font_group                    => 'STACK_FONT',
        p_depending_on_comp_prop_name   => 'STACK_LABEL',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => 'on');
    --

   /* store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SPARK_CHART',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_jet_spark ); */
    --
    -- Layout
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'CHART_MAX_WIDTH',
        p_db_column                    => 'WIDTH',
        p_is_required                  => false,
        p_is_common                    => true );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'CHART_HEIGHT',
        p_db_column                    => 'HEIGHT',
        p_is_required                  => false,
        p_is_common                    => true );
    --
    -- Status Meter Gauge Chart
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_GAUGE_ORIENTATION',
        p_db_column                   => 'GAUGE_ORIENTATION',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'circular',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_dial );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GAUGE_PLOT_AREA',
        p_db_column                    => 'GAUGE_PLOT_AREA',
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'on',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_dial );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GAUGE_INDICATOR_SIZE',
        p_db_column                    => 'GAUGE_INDICATOR_SIZE',
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 1,
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_dial );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GAUGE_INNER_RADIUS',
        p_db_column                    => 'GAUGE_INNER_RADIUS',
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => '0.7',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_dial,
        p_depending_on_comp_prop_name2 => 'JET_GAUGE_ORIENTATION',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'circular');
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GAUGE_START_ANGLE',
        p_db_column                    => 'GAUGE_START_ANGLE',
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 90,
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_dial,
        p_depending_on_comp_prop_name2 => 'JET_GAUGE_ORIENTATION',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'circular');
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GAUGE_ANGLE_EXTENT',
        p_db_column                    => 'GAUGE_ANGLE_EXTENT',
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 360,
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_dial,
        p_depending_on_comp_prop_name2 => 'JET_GAUGE_ORIENTATION',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'circular');
    -- Settings
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_DATA_CURSOR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'auto',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => c_jet_polar ||',' || c_jet_dial ||',' || c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_DATA_CURSOR_BEHAVIOR',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'auto',
        p_depending_on_comp_prop_name  => 'JET_DATA_CURSOR',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'auto,on',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => c_jet_polar ||',' || c_jet_dial ||',' || c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_HOVER_BEHAVIOR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'dim',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => c_jet_gantt || ',' || c_jet_dial);
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_FILL_GAPS',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'NOT_IN_LIST',
        p_depending_on_expression      => c_jet_no_sorting );
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JET_SORT_ORDER',
        p_db_column                     => null,
        p_is_required                   => true,
        p_is_common                     => false,
        p_default_value                 => 'label-asc',
        p_depending_on_comp_prop_name   => 'JET_FILL_GAPS',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => 'Y');
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_CONNECT_NULLS',
        p_db_column                    => 'CONNECT_NULLS',
        p_is_required                  => false,
        p_is_common                    => true,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_line_charts || ',' || c_jet_stack,
        p_depending_on_comp_prop_name2 => 'JET_FILL_GAPS',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'Y');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_TIME_AXIS_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null, -- $$$ auto as default doesn't work also it's documented in the JET docu. But this will cause "Invalid data"
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_jet_time_axis_type );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_ZOOM_AND_SCROLL',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'off',
        p_help_text                    => q'~<p>Specify the zoom and scroll behavior of the chart. <strong>Live</strong> behavior means that the chart will be updated continuously as it is being manipulated,
        while <strong>Delayed</strong> means that the update will wait until the zoom/scroll action is done. While <strong>Live</strong> zoom and scroll provides the best end user experience, no guarantees are made
        about the rendering performance or usability for large data sets or slow client environments. If performance is an issue, <strong>Delayed</strong> zoom and scroll should be used instead.</p>~',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => c_jet_dial||','||c_jet_pie||','||c_jet_donut ||','||c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_ZOOM_DIRECTION',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'auto',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_bubble||','||c_jet_scatter,
        p_depending_on_comp_prop_name2 => 'JET_ZOOM_AND_SCROLL',
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'off' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_INITIAL_ZOOMING',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'none',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_bar||','||c_jet_line||','||c_jet_area||','||c_jet_line_with_area||','||c_jet_combo||','||c_jet_stock,
        p_depending_on_comp_prop_name2 => 'JET_ZOOM_AND_SCROLL',
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'off' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_HORIZONTAL_GRID',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'visible',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_VERTICAL_GRID',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'visible',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ROW_AXIS',
        p_db_column                   => 'ROW_AXIS_RENDERED',
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => 'on',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_AXIS_POSITION',
        p_db_column                   => 'GANTT_AXIS_POSITION',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'top',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'PIE_SELECTION_EFFECT',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'highlight',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_pie_donut );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'STOCK_RENDER_AS',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'candlestick',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_stock );
    --
    -- Overview Settings
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'OVERVIEW_RENDERED',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'on',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_overview,
        p_depending_on_comp_prop_name2 => 'JET_ZOOM_AND_SCROLL',
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'off' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'OVERVIEW_HEIGHT',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_supports_substitution        => false,
        p_depending_on_comp_prop_name  => 'OVERVIEW_RENDERED',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'on' );
    --
    -- Value Settings
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'PIE_OTHER_THRESHOLD',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => '0',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_pie_donut );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_MIN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_jet_pie_donut );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_SHOW_GAUGE_VALUE',
        p_db_column                   => 'SHOW_GAUGE_VALUE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_dial );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_TEXT_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'number',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_dial );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VALUE_POSITION',
        p_db_column                    => 'VALUE_POSITION',
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'auto',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_dial,
        p_depending_on_comp_prop_name2 => 'JET_GAUGE_ORIENTATION',
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'circular' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_FORMAT_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_jet_no_axes,
        p_help_text                    => q'~<p>Specify the type of formatting to be applied to the value on the chart.
        The formats <strong>Decimal</strong>,<strong>Percent</strong> or <strong>Currency</strong> only apply to numeric values.
        The <strong>Date</strong>,<strong>Time</strong> and <strong>DateTime</strong> formats will only apply to values of that data type on the chart.~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VALUE_DECIMAL_PLACES',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_no_axes,
        p_depending_on_comp_prop_name2 => 'VALUE_FORMAT_TYPE',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'decimal,currency,percent',
        p_help_text                    => q'~Specify the number of decimal places to be applied to the numeric value on the chart.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_CURRENCY',
        p_db_column                   => null,
        p_is_required                  => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression      => c_jet_no_axes,
        p_depending_on_comp_prop_name2 => 'VALUE_FORMAT_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'currency');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_NUMERIC_PATTERN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_jet_no_axes,
        p_depending_on_comp_prop_name2 => 'VALUE_FORMAT_TYPE',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'decimal,currency,percent',
        p_help_text                    => q'~Specify the numeric pattern to be applied to the numeric value on the chart.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_FORMAT_SCALING',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'auto',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_jet_no_axes );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ANIMATION_ON_DISPLAY',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'auto' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ANIMATION_ON_DATA_CHANGE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'auto' );
    --
    -- Tooltip Settings
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_SHOW_TOOLTIP',
        p_db_column                   => 'TOOLTIP_RENDERED',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y');
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SHOW_SERIES_NAME',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'JET_SHOW_TOOLTIP',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => c_jet_dial || ',' || c_jet_stock || ',' || c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SHOW_GROUP_NAME',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'JET_SHOW_TOOLTIP',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => c_jet_dial || ',' || c_jet_stock ||',' || c_jet_funnel ||','|| c_jet_pyramid ||','|| c_jet_pie ||','|| c_jet_donut ||','|| c_jet_gantt);
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_SHOW_VALUE',
        p_db_column                   => 'SHOW_VALUE',
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'JET_SHOW_TOOLTIP',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => c_jet_dial || ',' ||c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_SHOW_GANTT_ROW',
        p_db_column                   => 'SHOW_ROW',
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'JET_SHOW_TOOLTIP',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_SHOW_LABEL',
        p_db_column                   => 'SHOW_LABEL',
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'JET_SHOW_TOOLTIP',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_SHOW_GANTT_START',
        p_db_column                   => 'SHOW_START',
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'JET_SHOW_TOOLTIP',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_SHOW_GANTT_END',
        p_db_column                   => 'SHOW_END',
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'JET_SHOW_TOOLTIP',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_SHOW_GANTT_PROGRESS',
        p_db_column                   => 'SHOW_PROGRESS',
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'JET_SHOW_TOOLTIP',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_SHOW_GANTT_BASELINE',
        p_db_column                   => 'SHOW_BASELINE',
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'JET_SHOW_TOOLTIP',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => c_jet_gantt );
    --
    -- Legend Settings
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LEGEND_RENDERED',
        p_db_column                    => 'LEGEND_RENDERED',
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'off',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'NOT_IN_LIST',
        p_depending_on_expression      => c_jet_dial || ',' || c_jet_stock || ',' || c_jet_gantt,
        p_important_for_accessibility  => true,
        p_accessibility_help_text      => q'~<p>When it comes to accessibility best practices for charts, it's essential to consider how to make the information contained within the chart accessible to all users, including those with disabilities.</p>
<strong>Best Practices:</strong>
<ul>
<li><strong>Text Equivalents:</strong> If the chart legend contains crucial information that is not otherwise available in the chart itself, then it should be included in the chart.
</li>
</ul>~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LEGEND_TITLE',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'LEGEND_RENDERED',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'on',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => c_jet_funnel ||','|| c_jet_pyramid ||','|| c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LEGEND_POSITION',
        p_db_column                    => 'LEGEND_POSITION',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'auto',
        p_depending_on_comp_prop_name  => 'LEGEND_RENDERED',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'on',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => c_jet_funnel ||','|| c_jet_pyramid ||','|| c_jet_gantt);
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HIDE_AND_SHOW_BEHAVIOR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'withRescale',
        p_depending_on_comp_prop_name => 'LEGEND_RENDERED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'on' );
    --
    store_jet_font_comp_props (
        p_font_group                    => 'LEGEND_FONT',
        p_depending_on_comp_prop_name   => 'LEGEND_RENDERED',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => 'on');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REFRESH_INTERVAL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null,
        p_help_text                   => q'~Enter a text message to display if the chart query does not return any rows. When left empty, Oracle JET will automatically use the default message "No data to display".~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'INIT_JAVASCRIPT_FUNCTION',
        p_db_column                    => 'JAVASCRIPT_CODE',
        p_is_required                  => false,
        p_is_common                    => false,
        p_examples          => q'~<pre>
function( options ){
    // Setup a callback function which gets called when data is retrieved, it allows to manipulate the series
    options.dataFilter = function( data ) {
        data.series[ 0 ].color = "#00FF00";
        return data;
    };
    // Set chart initialization options
    options.type = "line";
    return options;
}</pre>~',
        p_help_text                    => q'~<p>Enter a JavaScript function that takes a configuration object for the chart, modifies the object, and returns it. This allows advanced customization of the chart appearance, features, and behavior.</p>~' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id,
        p_db_column_prefix  => null );

    --
    --
    -- Component Properties for JET_CHART_SERIES
    --
    l_component_type_id           := c_comp_type_jet_chart_series;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    -- Identification Group Settings
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => 'NAME',
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SERIES_CHART_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_SERIES_TYPE_COMBO',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'bar',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_combo );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_SERIES_TYPE_RANGE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'barRange',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_range );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_SERIES_TYPE_POLAR',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'bar',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_polar );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_SERIES_TYPE_RADAR',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'area',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_radar );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_SERIES_TYPE_BOX_PLOT',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'boxPlot',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_box_plot );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EXECUTION_SEQUENCE',
        p_db_column         => 'SEQ',
        p_is_required       => true,
        p_is_common         => false );
    --
    store_comp_prop_location (
        p_location_property_name      => 'CHILD_SOURCE_LOCATION',
        p_query_type_property_name    => 'SOURCE_QUERY_TYPE',
        p_db_column_query_type        => 'DATA_SOURCE_TYPE',
        p_db_column_source_lang       => 'FUNCTION_BODY_LANGUAGE',
        p_db_column_source            => 'DATA_SOURCE',
        p_has_items_to_submit         => true,
        p_db_column_items_to_submit   => 'AJAX_ITEMS_TO_SUBMIT',
        p_has_include_rowid           => true,
        p_has_order_by                => true,
        p_has_order_by_item           => true,
        p_has_web_src_has_local_table => true,
        p_has_remote_caching          => true,
        p_examples_sql_query          => null,
        p_help_text_items_to_submit   => q'~Enter a comma separated list of page items on the current page to be set into session state when the chart data gets read with a separate request.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_GANTT_START_DATE_SOURCE',
        p_db_column                   => 'GANTT_START_DATE_SOURCE',
        p_is_required                 => true,
        p_is_common                   => true,
       -- p_default_value               => 'DB_COLUMN',
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JET_GANTT_START_DATE_COLUMN',
        p_db_column                     => 'GANTT_START_DATE_COLUMN',
        p_is_required                   => false,
        p_is_common                     => true,
        p_depending_on_comp_prop_name   => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => c_jet_gantt,
        p_parent_comp_prop_name         => 'CHILD_SOURCE_LOCATION',
        p_depending_on_comp_prop_name2  => 'JET_GANTT_START_DATE_SOURCE',
        p_depending_on_condition_type2  => 'EQUALS',
        p_depending_on_expression2      => 'DB_COLUMN');
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JET_GANTT_START_DATE_ITEM',
        p_db_column                     => 'GANTT_START_DATE_ITEM',
        p_is_required                   => false,
        p_is_common                     => true,
        p_depending_on_comp_prop_name   => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => c_jet_gantt,
        p_depending_on_comp_prop_name2  => 'JET_GANTT_START_DATE_SOURCE',
        p_depending_on_condition_type2  => 'EQUALS',
        p_depending_on_expression2      => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_GANTT_END_DATE_SOURCE',
        p_db_column                   => 'GANTT_END_DATE_SOURCE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JET_GANTT_END_DATE_COLUMN',
        p_db_column                     => 'GANTT_END_DATE_COLUMN',
        p_is_required                   => false,
        p_is_common                     => true,
        p_depending_on_comp_prop_name   => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => c_jet_gantt,
        p_parent_comp_prop_name         => 'CHILD_SOURCE_LOCATION',
        p_depending_on_comp_prop_name2  => 'JET_GANTT_END_DATE_SOURCE',
        p_depending_on_condition_type2  => 'EQUALS',
        p_depending_on_expression2      => 'DB_COLUMN');
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JET_GANTT_END_DATE_ITEM',
        p_db_column                     => 'GANTT_END_DATE_ITEM',
        p_is_required                   => false,
        p_is_common                     => true,
        p_depending_on_comp_prop_name   => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => c_jet_gantt,
        p_depending_on_comp_prop_name2  => 'JET_GANTT_END_DATE_SOURCE',
        p_depending_on_condition_type2  => 'EQUALS',
        p_depending_on_expression2      => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SERIES_NAME_COLUMN_NAME',
        p_db_column                   => 'SERIES_NAME_COLUMN_NAME',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => c_jet_dial || ',' || c_jet_stock || ',' || c_jet_gantt,
        p_parent_comp_prop_name       => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_LABEL_COLUMN_NAME',
        p_db_column                    => 'ITEMS_LABEL_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'NOT_IN_LIST',
        p_depending_on_expression      => c_jet_dial || ',' || c_jet_gantt,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'GAUGE_LABEL_COLUMN_NAME',
        p_db_column                    => 'ITEMS_LABEL_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_dial,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'AGGREGATE_FUNCTION',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_null_text                    => 'No Aggregation',
        p_null_help_text               => 'Returns the value column.',
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_value_column,
        p_depending_on_comp_prop_name2 => 'SOURCE_QUERY_TYPE',
        p_depending_on_has_to_exist2   => false,
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => 'SQL,FUNC_BODY_RETURNING_SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_VALUE_COLUMN_NAME',
        p_db_column                    => 'ITEMS_VALUE_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_value_column,
        p_depending_on_comp_prop_name2 => 'AGGREGATE_FUNCTION',
        p_depending_on_has_to_exist2   => false,
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => '$NULL$,SUM,AVG,MEDIAN,MIN,MAX,COUNT_DISTINCT,APPROX_COUNT_DISTINCT',
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_OPEN_COLUMN_NAME',
        p_db_column                    => 'ITEMS_OPEN_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_stock,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_LOW_COLUMN_NAME',
        p_db_column                    => 'ITEMS_LOW_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'barRange,areaRange,stock',
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_HIGH_COLUMN_NAME',
        p_db_column                    => 'ITEMS_HIGH_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'barRange,areaRange,stock',
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_BOX_LOW_COLUMN_NAME',
        p_db_column                    => 'ITEMS_LOW_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_box_plot,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_BOX_HIGH_COLUMN_NAME',
        p_db_column                    => 'ITEMS_HIGH_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_box_plot,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_CLOSE_COLUMN_NAME',
        p_db_column                    => 'ITEMS_CLOSE_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_stock,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_VOLUME_COLUMN_NAME',
        p_db_column                    => 'ITEMS_VOLUME_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_stock,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_X_COLUMN_NAME',
        p_db_column                    => 'ITEMS_X_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_bubble ||','|| c_jet_scatter,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_Y_COLUMN_NAME',
        p_db_column                    => 'ITEMS_Y_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_bubble ||','|| c_jet_scatter,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_Z_COLUMN_NAME',
        p_db_column                    => 'ITEMS_Z_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_bar||','||c_jet_bubble||',barRange,boxPlot',
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_TARGET_VALUE',
        p_db_column                    => 'ITEMS_TARGET_VALUE',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_funnel,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_MIN_VALUE',
        p_db_column                    => 'ITEMS_MIN_VALUE',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_dial,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_MAX_VALUE',
        p_db_column                    => 'ITEMS_MAX_VALUE',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_dial,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
        --  Gantt Chart Column Mappings
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_ROW_ID',
        p_db_column                    => 'GANTT_ROW_ID',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_ROW_NAME',
        p_db_column                    => 'GANTT_ROW_NAME',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_TASK_ID',
        p_db_column                    => 'GANTT_TASK_ID',
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_TASK_NAME',
        p_db_column                    => 'GANTT_TASK_NAME',
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_TASK_START_DATE',
        p_db_column                    => 'GANTT_TASK_START_DATE',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_TASK_END_DATE',
        p_db_column                    => 'GANTT_TASK_END_DATE',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_PROGRESS_COLUMN',
        p_db_column                    => 'GANTT_PROGRESS_COLUMN',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );

    --
/*    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_PREDECESSOR_TASK_ID',
        p_db_column                    => 'GANTT_PREDECESSOR_TASK_ID',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' ); */
    --
/*    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_SUCCESSOR_TASK_ID',
        p_db_column                    => 'GANTT_SUCCESSOR_TASK_ID',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' ); */
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_BASELINE_START_COLUMN',
        p_db_column                    => 'GANTT_BASELINE_START_COLUMN',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_BASELINE_END_COLUMN',
        p_db_column                    => 'GANTT_BASELINE_END_COLUMN',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_SHORT_DESC_COLUMN_NAME',
        p_db_column                    => 'ITEMS_SHORT_DESC_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => false,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'GROUP_NAME_COLUMN_NAME',
        p_db_column                    => 'GROUP_NAME_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_group_column,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'GROUP_SHORT_DESC_COLUMN_NAME',
        p_db_column                    => 'GROUP_SHORT_DESC_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_group_column,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'CUSTOM_COLUMN_NAME',
        p_db_column                    => 'CUSTOM_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => false,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION',
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'NOT_EQUALS',
        p_depending_on_expression      => c_jet_gantt);
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_GANTT_VIEWPORT_START_SOURCE',
        p_db_column                   => 'GANTT_VIEWPORT_START_SOURCE',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_VIEWPORT_START_COLUMN',
        p_db_column                    => 'GANTT_VIEWPORT_START_COLUMN',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION',
        p_depending_on_comp_prop_name2 => 'JET_GANTT_VIEWPORT_START_SOURCE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'DB_COLUMN');
     --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JET_GANTT_VIEWPORT_START_ITEM',
        p_db_column                     => 'GANTT_VIEWPORT_START_ITEM',
        p_is_required                   => false,
        p_is_common                     => false,
        p_depending_on_comp_prop_name   => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => c_jet_gantt,
        p_depending_on_comp_prop_name2  => 'JET_GANTT_VIEWPORT_START_SOURCE',
        p_depending_on_condition_type2  => 'EQUALS',
        p_depending_on_expression2      => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_GANTT_VIEWPORT_END_SOURCE',
        p_db_column                   => 'GANTT_VIEWPORT_END_SOURCE',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_VIEWPORT_END_COLUMN',
        p_db_column                    => 'GANTT_VIEWPORT_END_COLUMN',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION',
        p_depending_on_comp_prop_name2 => 'JET_GANTT_VIEWPORT_END_SOURCE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'DB_COLUMN');
     --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JET_GANTT_VIEWPORT_END_ITEM',
        p_db_column                     => 'GANTT_VIEWPORT_END_ITEM',
        p_is_required                   => false,
        p_is_common                     => false,
        p_depending_on_comp_prop_name   => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => c_jet_gantt,
        p_depending_on_comp_prop_name2  => 'JET_GANTT_VIEWPORT_END_SOURCE',
        p_depending_on_condition_type2  => 'EQUALS',
        p_depending_on_expression2      => 'ITEM' );
    --
   /* store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_TASK_CSS_STYLE',
        p_db_column                    => 'GANTT_TASK_CSS_STYLE',
        p_is_required                  => false,
        p_is_common                    => false,
        p_examples                     => q'~<pre>
font-size:14px;color:red;</pre>~',
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt ); */
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_GANTT_TASK_CSS_CLASS',
        p_db_column                   => 'GANTT_TASK_CSS_CLASS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_GANTT_PROGRESS_CSS_CLASS',
        p_db_column                   => 'GANTT_PROGRESS_CSS_CLASS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_GANTT_BASELINE_CSS_CLASS',
        p_db_column                   => 'GANTT_BASELINE_CSS_CLASS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_SERIES_COLOR',
        p_db_column                    => 'COLOR',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'NOT_IN_LIST',
        p_depending_on_expression      => c_jet_gantt,
        p_important_for_accessibility  => true,
        p_accessibility_help_text      => q'~<p>Enhancing chart accessibility through mindful color selection and compliance with WCAG standards is crucial for ensuring inclusivity in data visualization.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Use Bold and Clear Colors:</strong> Opt for colors that are bold and clear to ensure both text and graphical elements within your charts are easily distinguishable. This enhances readability and comprehension for all users, including those with visual impairments.</li>
<li><strong>Check Color Contrast Ratio:</strong> Utilize contrast checking tools to evaluate the color contrast ratio between foreground and background colors. Aim for a ratio of at least 4.5:1 to ensure readability for individuals with varying levels of vision impairment.</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GAUGE_PLOT_AREA_COLOR',
        p_db_column                    => 'GAUGE_PLOT_AREA_COLOR',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_dial,
        p_important_for_accessibility  => true,
        p_accessibility_help_text      => q'~<p>Enhancing chart accessibility through mindful color selection and compliance with WCAG standards is crucial for ensuring inclusivity in data visualization.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Use Bold and Clear Colors:</strong> Opt for colors that are bold and clear to ensure both text and graphical elements within your charts are easily distinguishable. This enhances readability and comprehension for all users, including those with visual impairments.</li>
<li><strong>Check Color Contrast Ratio:</strong> Utilize contrast checking tools to evaluate the color contrast ratio between foreground and background colors. Aim for a ratio of at least 4.5:1 to ensure readability for individuals with varying levels of vision impairment.</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_SERIES_Q2_COLOR',
        p_db_column                    => 'Q2_COLOR',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_box_plot,
        p_important_for_accessibility  => true,
        p_accessibility_help_text      => q'~<p>Enhancing chart accessibility through mindful color selection and compliance with WCAG standards is crucial for ensuring inclusivity in data visualization.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Use Bold and Clear Colors:</strong> Opt for colors that are bold and clear to ensure both text and graphical elements within your charts are easily distinguishable. This enhances readability and comprehension for all users, including those with visual impairments.</li>
<li><strong>Check Color Contrast Ratio:</strong> Utilize contrast checking tools to evaluate the color contrast ratio between foreground and background colors. Aim for a ratio of at least 4.5:1 to ensure readability for individuals with varying levels of vision impairment.</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_SERIES_Q3_COLOR',
        p_db_column                    => 'Q3_COLOR',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_box_plot,
        p_important_for_accessibility  => true,
        p_accessibility_help_text      => q'~<p>Enhancing chart accessibility through mindful color selection and compliance with WCAG standards is crucial for ensuring inclusivity in data visualization.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Use Bold and Clear Colors:</strong> Opt for colors that are bold and clear to ensure both text and graphical elements within your charts are easily distinguishable. This enhances readability and comprehension for all users, including those with visual impairments.</li>
<li><strong>Check Color Contrast Ratio:</strong> Utilize contrast checking tools to evaluate the color contrast ratio between foreground and background colors. Aim for a ratio of at least 4.5:1 to ensure readability for individuals with varying levels of vision impairment.</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ASSIGNED_TO_Y2',
        p_db_column                    => 'ASSIGNED_TO_Y2',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'off',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_stack || ',' || c_jet_box_plot );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'STACK_CATEGORY',
        p_db_column                    => 'STACK_CATEGORY',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_stack );
    --
    -- Link Settings - not supported by JET Dial Gauge chart
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LINK_TARGET_TYPE',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'NOT_IN_LIST',
        p_depending_on_expression      => c_jet_dial || ',' || c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_TARGET',
        p_db_column                   => 'LINK_TARGET',
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'LINK_TARGET_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'REDIRECT_PAGE,REDIRECT_APP,REDIRECT_URL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_THRESHOLD_VALUES',
        p_db_column                    => 'THRESHOLD_VALUES',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_dial );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_THRESHOLD_COLORS',
        p_db_column                    => 'THRESHOLD_COLORS',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_dial );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_THRESHOLD_DISPLAY',
        p_db_column                    => 'THRESHOLD_DISPLAY',
        p_is_required                  => false,
        p_is_common                    => false,
        p_default_value                => 'onIndicator',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_dial );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_REFERENCE_LINE_VALUES',
        p_db_column                    => 'REFERENCE_LINE_VALUES',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_dial );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_REFERENCE_LINE_COLORS',
        p_db_column                    => 'REFERENCE_LINE_COLORS',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_dial,
        p_important_for_accessibility  => true,
        p_accessibility_help_text      => q'~<p>Enhancing chart accessibility through mindful color selection and compliance with WCAG standards is crucial for ensuring inclusivity in data visualization.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Use Bold and Clear Colors:</strong> Opt for colors that are bold and clear to ensure both text and graphical elements within your charts are easily distinguishable. This enhances readability and comprehension for all users, including those with visual impairments.</li>
<li><strong>Check Color Contrast Ratio:</strong> Utilize contrast checking tools to evaluate the color contrast ratio between foreground and background colors. Aim for a ratio of at least 4.5:1 to ensure readability for individuals with varying levels of vision impairment.</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LINE_STYLE',
        p_db_column                    => 'LINE_STYLE',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'solid',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_line_style_charts );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LINE_WIDTH',
        p_db_column                    => 'LINE_WIDTH',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_line_style_charts );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LINE_TYPE',
        p_db_column                    => 'LINE_TYPE',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'auto',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_line_charts|| ',' || c_jet_range,
        p_depending_on_comp_prop_name2  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type2  => 'IN_LIST',
        p_depending_on_expression2      => c_jet_line_charts|| ',' ||'areaRange');
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MARKER_RENDERED',
        p_db_column                    => 'MARKER_RENDERED',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'auto',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_marker_charts|| ',' || c_jet_range,
        p_depending_on_comp_prop_name2  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type2  => 'IN_LIST',
        p_depending_on_expression2      => c_jet_marker_charts|| ',' ||'areaRange' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MARKER_SHAPE',
        p_db_column                    => 'MARKER_SHAPE',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'auto',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_marker_charts|| ',' || c_jet_range,
        p_depending_on_comp_prop_name2 => 'MARKER_RENDERED',
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'off' );
    -- Item Labels
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_LABEL_RENDERED',
        p_db_column                    => 'ITEMS_LABEL_RENDERED',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_important_for_accessibility  => true,
        p_accessibility_help_text      => q'~<strong>Best Practices:</strong>
<ul>
<li><strong>Labelling for Readability:</strong>
<ul>
<li>
Directly label elements on the chart to enhance readability.</li>
<li>Eliminate the need for users to reference a separate legend by labeling directly on the chart.</li>
<li>Ensure labels are short and simple to prevent clutter and confusion.</li>
</ul>
</li>
</ul>~' );
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'ITEMS_LABEL_POSITION',
        p_db_column                     => 'ITEMS_LABEL_POSITION',
        p_is_required                   => true,
        p_is_common                     => false,
        p_default_value                 => 'auto',
        p_depending_on_comp_prop_name   => 'ITEMS_LABEL_RENDERED',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => 'Y',
        p_help_text                     => q'~<p>For range series, if an array of two values are provided, the first and second value will apply to the low and high point respectively. The <strong>Outside Slice</strong> value only applies to pie charts.
        The <strong>Above Marker</strong>, <strong>Below Marker</strong>, <strong>Before Marker</strong>, and <strong>After Marker</strong> values only apply to line, area, scatter, and bubble series. The <strong>Inside Bar Edge</strong> and <strong>Outside Bar Edge</strong> values
        only apply to non-polar bar series. Stacked bars do not support <strong>Outside Bar Edge</strong>. The <strong>Start</strong> value only applies to horizontal and vertical Status Meter Gauge charts. The chart does not currently adjust layout to fit labels within the plot area or deal with any overlaps between labels.</p>~',
        p_depending_on_comp_prop_name2  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type2  => 'NOT_IN_LIST',
        p_depending_on_expression2      =>  c_jet_gantt);
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JET_LABEL_DISPLAY_AS',
        p_db_column                     => 'ITEMS_LABEL_DISPLAY_AS',
        p_is_required                   => true,
        p_is_common                     => false,
        p_default_value                 => 'LABEL',
        p_depending_on_comp_prop_name   => 'ITEMS_LABEL_RENDERED',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => 'Y',
        p_depending_on_comp_prop_name2  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type2  => 'IN_LIST',
        p_depending_on_expression2      => c_jet_pie_donut);
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_LABEL_CSS_CLASSES',
        p_db_column                    => 'ITEMS_LABEL_CSS_CLASSES',
        p_is_required                  => false,
        p_is_common                    => false,
        p_examples                     => q'~<pre>
font-size:14px;color:white;</pre>~',
        p_depending_on_comp_prop_name  => 'ITEMS_LABEL_RENDERED',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y',
        p_depending_on_comp_prop_name2  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type2  => 'NOT_IN_LIST',
        p_depending_on_expression2      => c_jet_dial ||',' || c_jet_gantt);
    --
    store_jet_font_comp_props (
        p_font_group                    => 'ITEMS_LABEL_FONT',
        p_depending_on_comp_prop_name   => 'ITEMS_LABEL_RENDERED',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_TASK_LABEL_POSITION',
        p_db_column                   => 'TASK_LABEL_POSITION',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'end',
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt,
        p_depending_on_comp_prop_name2  => 'ITEMS_LABEL_RENDERED',
        p_depending_on_condition_type2  => 'EQUALS',
        p_depending_on_expression2      => 'Y');

    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAXIMUM_ROW_COUNT',
        p_db_column                    => 'MAX_ROW_COUNT',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'NOT_EQUALS',
        p_depending_on_expression      => c_jet_dial);
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'STATIC_ID',
        p_db_column             => 'STATIC_ID',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false,
        p_help_text             => q'~Enter the static ID for the chart series. The static ID can be useful when developing custom JavaScript behavior for the chart series.~' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id        => l_component_type_id,
        p_has_condition            => true,
        p_cond_type_db_column      => 'DISPLAY_WHEN_COND_TYPE',
        p_cond_type_view_db_column => 'CONDITION_TYPE',
        p_cond_exp1_db_column      => 'DISPLAY_WHEN_CONDITION',
        p_cond_exp2_db_column      => 'DISPLAY_WHEN_CONDITION2',
        p_has_authorization_scheme => true,
        p_authorization_db_column  => 'SECURITY_SCHEME',
        p_has_build_option         => true,
        p_build_option_db_column   => 'REQUIRED_PATCH' );
    --
    --
    -- Component Properties for JET_CHART_AXES
    -- NOTE: the Axes tree should only be visible when chart supports axes
    l_component_type_id           := c_comp_type_jet_chart_axes;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    -- Identification Group Settings
    store_component_prop (
        p_component_type_id          => l_component_type_id,
        p_property_name              => 'NAME',
        p_db_column                  => 'AXIS',
        p_check_uniqueness           => 'PARENT',
        p_is_required                => true,
        p_is_common                  => true,
        p_is_read_only               => true);
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_SHOW_AXIS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'on',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2,major' );
    --
    store_component_prop (
        p_component_type_id          => l_component_type_id,
        p_property_name              => 'TITLE',
        p_db_column                  => 'TITLE',
        p_is_required                => false,
        p_is_common                  => true,
        p_help_text                  => q'~Enter a title for the axis. This title describes the information being represented on the axis of your chart.~');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_AXIS_SCALE',
        p_db_column                   => 'AXIS_SCALE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ZOOM_ORDER_SECONDS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ZOOM_ORDER_MINUTES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ZOOM_ORDER_HOURS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ZOOM_ORDER_DAYS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ZOOM_ORDER_WEEKS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ZOOM_ORDER_MONTHS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ZOOM_ORDER_QUARTERS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ZOOM_ORDER_YEARS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    -- Title Group Settings
    store_jet_font_comp_props (
        p_font_group                  => 'TITLE_FONT',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    -- Value Group Settings
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AXIS_MIN',
        p_db_column                   => 'MIN',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id          => l_component_type_id,
        p_property_name              => 'AXIS_MAX',
        p_db_column                  => 'MAX',
        p_is_required                => false,
        p_is_common                  => true,
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    -- Settings Group Settings
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_FORMAT_TYPE',
        p_db_column                   => 'FORMAT_TYPE',
        p_is_required                 => false,
        p_is_common                   => true );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VALUE_DECIMAL_PLACES',
        p_db_column                    => 'DECIMAL_PLACES',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'VALUE_FORMAT_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'decimal,currency,percent',
        p_depending_on_comp_prop_name2 => 'NAME',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VALUE_CURRENCY',
        p_db_column                    => 'CURRENCY',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'VALUE_FORMAT_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'currency',
        p_depending_on_comp_prop_name2 => 'NAME',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VALUE_NUMERIC_PATTERN',
        p_db_column                    => 'NUMERIC_PATTERN',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'VALUE_FORMAT_TYPE',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_depending_on_comp_prop_name2 => 'NAME',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'x,y,y2,major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_FORMAT_SCALING',
        p_db_column                   => 'FORMAT_SCALING',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'auto',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_BASELINE_SCALING',
        p_db_column                   => 'BASELINE_SCALING',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'zero',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AXIS_SCALING',
        p_db_column                   => 'SCALING',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'linear',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AXIS_STEP',
        p_db_column                   => 'STEP',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AXIS_POSITION',
        p_db_column                   => 'POSITION',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'auto',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => 'x,major,minor' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAJOR_TICK_RENDERED',
        p_db_column                   => 'MAJOR_TICK_RENDERED',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'on',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MIN_STEP',
        p_db_column                   => 'MIN_STEP',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MINOR_TICK_RENDERED',
        p_db_column                   => 'MINOR_TICK_RENDERED',
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => 'off',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MINOR_STEP',
        p_db_column                   => 'MINOR_STEP',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TICK_LABEL_RENDERED',
        p_db_column                   => 'TICK_LABEL_RENDERED',
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => 'on',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Tick labels can be important for accessibility depending on the context and the users needs.</p>
<strong>Best Practices:</strong>
<ul>
<li><strong>Contextual Understanding:</strong> In some cases, the presence of tick labels can provide valuable context or assist in understanding the data visualization, even for users who are not visually impaired. For example, they can help users interpret trends, identify specific data points, or understand the scale of the visualization.</li>
</ul>
<p>Tick labels can play an important role in accessibility, particularly for visually impaired users relying on screen readers.</p>~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'TICK_LABEL_ROTATION',
        p_db_column                    => 'TICK_LABEL_ROTATION',
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'auto',
        p_depending_on_comp_prop_name  => 'TICK_LABEL_RENDERED',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'on',
        p_depending_on_comp_prop_name2 => 'NAME',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'x' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'TICK_LABEL_POSITION',
        p_db_column                    => 'TICK_LABEL_POSITION',
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'outside',
        p_depending_on_comp_prop_name  => 'TICK_LABEL_RENDERED',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'on',
        p_depending_on_comp_prop_name2 => 'NAME',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'x' );
    -- Tick Label Font Settings
    store_jet_font_comp_props (
        p_font_group                    => 'TICK_LABEL_FONT',
        p_depending_on_comp_prop_name   => 'NAME',
        p_depending_on_condition_type   => 'IN_LIST',
        p_depending_on_expression       => 'x,y,y2',
        p_depending_on_comp_prop_name2  => 'TICK_LABEL_RENDERED',
        p_depending_on_condition_type2  => 'EQUALS',
        p_depending_on_expression2      => 'on' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SPLIT_DUAL_Y',
        p_db_column                   => 'SPLIT_DUAL_Y',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'auto',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SPLITTER_POSITION',
        p_db_column                   => 'SPLITTER_POSITION',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SPLIT_DUAL_Y',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'off' );
    --
    store_component_prop (
        p_component_type_id          => l_component_type_id,
        p_property_name              => 'STATIC_ID',
        p_db_column                  => null,
        p_is_required                => false,
        p_is_common                  => false,
        p_supports_substitution      => false,
        p_help_text                  => q'~Enter the static ID for the chart axis. The static ID can be useful when developing custom JavaScript behavior for the chart axis.~' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for JET Chart Series Web Source Parameters
    --
    l_component_type_id           := c_comp_type_jet_chart_ws_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_ws_param_comp;

    --
    --
    -- Component Properties for CLASSIC_CALENDAR
    --
    l_component_type_id           := c_comp_type_classic_calendar;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    -- Entry
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DATE_COLUMN',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_parent_comp_type_id   => c_comp_type_region,
        p_parent_comp_prop_name => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CALENDAR_DISPLAY_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'COL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DISPLAY_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL',
        p_depending_on_comp_prop_name => 'CALENDAR_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'COL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CALENDAR_CUSTOM_FORMAT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CALENDAR_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'CUS' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PRIMARY_KEY_COLUMN',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_parent_comp_type_id   => c_comp_type_region,
        p_parent_comp_prop_name => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DATE_FORMAT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'CALENDAR_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'COL,CUS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TIME_FORMAT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => '24HOUR',
        p_depending_on_comp_prop_name => 'DATE_FORMAT',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    -- Link
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'OPEN_LINK_IN',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'W' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ENTRY_LINK_TARGET',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DAY_LINK_TARGET',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    -- Appearance
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CALENDAR_TEMPLATE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => '#DEFAULT_CALENDAR_TEMPLATE#' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BEGIN_AT_START_OF_INTERVAL',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Y' );
    --
    -- Monthly Calendar
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'START_OF_WEEK_FOR_MONTHLY_CALENDAR',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => '19721105' );
    --
    -- Weekly Calendar
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'START_DAY_FOR_WEEKLY_CALENDAR',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => '19721105' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'END_DAY_FOR_WEEKLY_CALENDAR',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => '19721111' );
    --
    -- Daily and Weekly Calendar
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'START_TIME',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => '8' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'END_TIME',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => '18' );
    --
    -- List View Calendar
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LIST_VIEW_DAYS_DISPLAY',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'MONTH' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LIST_VIEW_CUSTOM_DAYS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '30',
        p_depending_on_comp_prop_name => 'LIST_VIEW_DAYS_DISPLAY',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'CUSTOM' );
    --
    -- Colors
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DATA_BACKGROUND_COLOR',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DATA_TEXT_COLOR',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    -- Drag and Drop
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DRAG_DROP_PROCESS',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_comment_text      => '$$$ we should only show Ajax processes of the current page' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DRAG_AND_DROP_AUTHORIZATION_SCHEME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DRAG_DROP_PROCESS',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    -- Calendar State
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CALENDAR_TYPE_ITEM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CALENDAR_DATE_ITEM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CALENDAR_END_DATE_ITEM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for IR_PRINT_ATTR
    --
    l_component_type_id           := c_comp_type_ir_print;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_print_comp_props (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for IG_PRINT_ATTR
    --
    l_component_type_id           := c_comp_type_ig_print;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_print_comp_props (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for CLASSIC_REPORT_PRINT_ATTR
    --
    l_component_type_id           := c_comp_type_classic_rpt_print;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_print_comp_props (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for TAB_FORM_PRINT_ATTR
    --
    l_component_type_id           := c_comp_type_tab_form_print;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_print_comp_props (
        p_component_type_id => l_component_type_id );
    --
    --
    --
    -- Component Properties for REGION_PLUGIN_ATTRIBUTES
    --
    l_component_type_id := c_comp_type_region_plugin_attr;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'HIDDEN_REGION_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false ); /* property is hidden */
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'HIDDEN_SOURCE_LOCATION',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false ); /* property is hidden */
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'TEMPLATE_COMPONENT_TYPE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'HIDDEN_REGION_TYPE',
        p_depending_on_condition_type  => 'LIKE',
        p_depending_on_expression      => 'TMPL_');
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'HIDDEN_COLUMNS_HAVE_GROUPS',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_supports_substitution        => false,
        p_depending_on_comp_prop_name => 'TEMPLATE_COMPONENT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REPORT' ); /* property is hidden */
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LIST_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => '#DEFAULT_LIST_TEMPLATE#',
        p_depending_on_comp_prop_name => 'HIDDEN_REGION_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_LIST' );
   --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TEMPLATE_OPTIONS',
        p_db_column                   => 'COMPONENT_TEMPLATE_OPTIONS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_parent_comp_prop_name       => 'LIST_TEMPLATE',
        p_depending_on_comp_prop_name => 'LIST_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BREADCRUMB_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => '#DEFAULT_BREADCRUMB_TEMPLATE#',
        p_depending_on_comp_prop_name => 'HIDDEN_REGION_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_BREADCRUMB' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TEMPLATE_OPTIONS2',
        p_db_column                   => 'COMPONENT_TEMPLATE_OPTIONS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_parent_comp_prop_name       => 'BREADCRUMB_TEMPLATE',
        p_depending_on_comp_prop_name => 'BREADCRUMB_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'APPEARANCE_CSS_CLASSES',
        p_db_column                    => 'REGION_SUB_CSS_CLASSES',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'HIDDEN_REGION_TYPE',
        p_depending_on_condition_type  => 'IN_LIST_LIKE',
        p_depending_on_expression      => 'NATIVE_BREADCRUMB,NATIVE_LIST,TMPL_',
        p_help_text                    => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~',
        p_comment_text                 => '$$$ we should only show this property if the template supports the #COMPONENT_CSS_CLASSES# placeholder' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IS_EDITABLE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'N',
        p_plugin_std_attributes => 'EDITABLE',
        p_help_text             => q'~<p>Specify whether end users can edit this Form region.</p>
        <p>Note - When the Form region is made editable a process is automatically created to process the row.~');
    --
     store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EDIT_OPERATIONS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => 'i:u:d',
        p_help_text                   => q'~<p>Check which data manipulation language (DML) operations are supported. This process will perform DML operations based on the <strong>Database Action</strong> attribute of the button to submit the page. If that attribute is not set, the operation will be determined by the button Request value, which is set based on the Button Name, as follows:</p>
<ul>
<li><strong>Add Row</strong> is triggered by Request Values: INSERT, CREATE, CREATE_AGAIN, CREATEAGAIN</li>
<li><strong>Update Row</strong> is triggered by Request Values: SAVE, APPLY CHANGES, UPDATE, UPDATE ROW, CHANGE, APPLY, APPLY%CHANGES%, GET_NEXT%, GET_PREV%</li>
<li><strong>Delete Row</strong> is triggered by Request Values: DELETE, REMOVE, DELETE ROW, DROP</li>
</ul>~',
        p_depending_on_comp_prop_name => 'IS_EDITABLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'EDIT_ROW_OPERATIONS_COLUMN',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'EDIT_OPERATIONS',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'u,d',
        p_parent_comp_type_id          => c_comp_type_region,
        p_parent_comp_prop_name        => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LOST_UPDATE_CHECK_TYPE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'VALUES',
        p_depending_on_comp_prop_name  => 'IS_EDITABLE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ROW_VERSION_COLUMN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'LOST_UPDATE_CHECK_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'COLUMN',
        p_parent_comp_type_id          => c_comp_type_region,
        p_parent_comp_prop_name        => 'REGION_SQL' );
    --
/* $$$ pwolf: not yet needed by Form Region
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ADD_ROW_IF_EMPTY',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'EDIT_OPERATIONS',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'i' ); -- $$$ should this be a plug-in standard attribute? For example "Multi Row support"
    --
*/
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ADD_AUTHORIZATION_SCHEME',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'EDIT_OPERATIONS',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'i' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'UPDATE_AUTHORIZATION_SCHEME',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'EDIT_OPERATIONS',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'u' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DELETE_AUTHORIZATION_SCHEME',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'EDIT_OPERATIONS',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'd' );
    --
    store_plugin_attr_seq_offset (
        p_component_type_id => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_ENABLED',
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_default_value               => 'N',
        p_plugin_std_attributes       => 'AI_ENABLED' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_CONFIG',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'AI_ENABLED',
        p_depending_on_has_to_exist   => false,
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y',
        p_plugin_std_attributes       => 'AI_ENABLED_ALWAYS,AI_ENABLED' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_REMOTE_SERVER',
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Application Default',
        p_depending_on_comp_prop_name => 'AI_CONFIG',
        p_depending_on_condition_type => 'NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_SYSTEM_PROMPT',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_template_directive => 'S',
        p_depending_on_comp_prop_name => 'AI_CONFIG',
        p_depending_on_condition_type => 'NULL',
        p_plugin_std_attributes       => 'AI_SYSTEM_PROMPT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AI_WELCOME_MESSAGE',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_template_directive => 'C',
        p_depending_on_comp_prop_name => 'AI_CONFIG',
        p_depending_on_condition_type => 'NULL',
        p_plugin_std_attributes       => 'AI_WELCOME_MESSAGE' );
    --
    -- *** NOTE: If properties are added which are stored in WWV_FLOW_PAGE_PLUGS and
    --           which are also used by the classic report / tabular form componen type
    --           then you have to add a synchronization code to pe.callbacks.js!!!
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ROW_SELECTION_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_null_text                   => 'None',
        p_plugin_std_attributes       => 'ROW_SELECTION',
        p_depending_on_comp_prop_name => 'TEMPLATE_COMPONENT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REPORT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CURRENT_SELECTION_PAGE_ITEM',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'ROW_SELECTION_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'SINGLE,MULTIPLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SELECT_ALL_PAGE_ITEM',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'ROW_SELECTION_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'MULTIPLE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LAZY_LOADING',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_plugin_std_attributes        => 'LAZY_LOADING',
        p_depending_on_comp_prop_name  => 'HIDDEN_SOURCE_LOCATION',
        p_depending_on_condition_type  => 'NOT_NULL' );
    --
    -- this for region plug-ins that want to have Lazy Loading regardless of the region's source value
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LAZY_LOADING_ALWAYS',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_plugin_std_attributes        => 'LAZY_LOADING_ALWAYS' );
    --
    -- Template Component specific attributes
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGINATION_TYPE',
        p_db_column                   => 'PLUG_QUERY_NUM_ROWS_TYPE',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'SET',
        p_depending_on_comp_prop_name => 'TEMPLATE_COMPONENT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REPORT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ENTITIES_PER_PAGE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => '15',
        p_depending_on_comp_prop_name => 'PAGINATION_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SET' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'INITIAL_ENTITIES_COUNT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PAGINATION_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SCROLL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_TOTAL_ROW_COUNT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'TEMPLATE_COMPONENT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REPORT' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NUMBER_OF_ROWS_TYPE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'STATIC',
        p_plugin_std_attributes => 'FETCHED_ROWS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NUMBER_OF_ROWS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => '15',
        p_depending_on_comp_prop_name => 'NUMBER_OF_ROWS_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NUMBER_OF_ROWS_ITEM',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'NUMBER_OF_ROWS_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ENTITY_TITLE_SINGULAR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'TEMPLATE_COMPONENT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REPORT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ENTITY_TITLE_PLURAL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'TEMPLATE_COMPONENT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REPORT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_db_column                   => 'PLUG_QUERY_NO_DATA_FOUND',
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'NO_DATA_FOUND_MESSAGE',
        p_depending_on_comp_prop_name => 'TEMPLATE_COMPONENT_TYPE',
        p_depending_on_has_to_exist   => false,
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REPORT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NO_DATA_FOUND_ICON_CLASSES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_depending_on_condition_type => 'NOT_NULL',
        p_plugin_std_attributes       => 'NO_DATA_FOUND_ICON' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'HEADINGS_TYPE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'COLON_DELMITED_LIST',
        p_plugin_std_attributes => 'COLUMN_HEADING' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HEADING_TYPE_PLSQL_FUNCTION_BODY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'HEADINGS_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'FUNCTION_BODY_RETURNING_COLON_DELIMITED_LIST' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'INIT_JAVASCRIPT_FUNCTION',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_default_value         => null,
        p_plugin_std_attributes => 'INIT_JAVASCRIPT_CODE' );
    --
    --
    -- Component Properties for REGION_COLUMN
    --
    l_component_type_id := c_comp_type_region_column;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'HIDDEN_REGION_TYPE',
        p_db_column         => 'REGION_TYPE',
        p_is_required       => true,
        p_is_common         => false ); /* property is hidden */
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COLUMN_NAME',
        p_db_column         => 'NAME',
        p_is_required       => true,
        p_is_common         => true,
        p_is_read_only      => true,
        p_check_uniqueness  => 'PARENT' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COLUMN_TYPE',
        p_db_column         => 'DATA_TYPE',
        p_is_required       => true,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IS_VISIBLE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'Y' );
    --
    store_plugin_attr_seq_offset (
        p_component_type_id => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COLUMN_HEADING',
        p_db_column                   => 'HEADING',
        p_is_required                 => false,
        p_is_common                   => true,
        p_plugin_std_attributes       => 'COLUMN_HEADING',
        p_depending_on_comp_prop_name => 'IS_VISIBLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HEADING_ALIGNMENT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'LEFT',
        p_plugin_std_attributes       => 'HEADING_ALIGNMENT',
        p_depending_on_comp_prop_name => 'IS_VISIBLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'DISPLAY_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COLUMN_ALIGNMENT',
        p_db_column                   => 'VALUE_ALIGNMENT',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'LEFT',
        p_plugin_std_attributes       => 'VALUE_ALIGNMENT',
        p_depending_on_comp_prop_name => 'IS_VISIBLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORMAT_MASK_DATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'COLUMN_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'DATE,TIMESTAMP,TIMESTAMP_TZ,TIMESTAMP_LTZ' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORMAT_MASK_NUMBER',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'COLUMN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NUMBER' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'APPEARANCE_CSS_CLASSES',
        p_db_column                   => 'VALUE_CSS_CLASSES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'VALUE_CSS',
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'IS_VISIBLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CUSTOM_ATTRIBUTES',
        p_db_column                   => 'VALUE_ATTRIBUTES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'VALUE_ATTRIBUTE',
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'IS_VISIBLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_condition_type_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_name_prefix                 => null,
        p_help_text_type              => null,
        p_db_column_type              => 'DISPLAY_CONDITION_TYPE',
        p_view_column_type            => 'CONDITION_TYPE',
        p_db_column_expr1             => 'DISPLAY_CONDITION',
        p_db_column_expr2             => 'DISPLAY_CONDITION2',
        p_depending_on_comp_prop_name => 'IS_VISIBLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AUTHORIZATION_SCHEME',
        p_db_column                   => 'SECURITY_SCHEME',
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_on_delete         => 'WEAK_NULL',
        p_depending_on_comp_prop_name => 'IS_VISIBLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ESCAPE_SPECIAL_CHARACTERS',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'Y',
        p_plugin_std_attributes => 'VALUE_ESCAPE_OUTPUT',
        p_comment_text          => '$$$ should be make that depending on is_visible? Might be useful for secure substitutions in other columns' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_build_option  => true,
        p_has_comments      => true,
        p_comment_db_column => 'COLUMN_COMMENT' );
    --
    --
    -- Component Properties for REGION_TMPL_COLUMN
    --
    l_component_type_id := c_comp_type_region_tmpl_column;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'HIDDEN_TEMPLATE_COMPONENT_TYPE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COLUMN_NAME_UPPER',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_check_uniqueness      => 'PARENT' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'DISPLAY_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true,
        p_help_text         => q'~<p>Enter the display sequence for this column. The sequence setting determines where this column is displayed in relation to other columns within the region.</p>
<p>Note: If two columns, within the same region, have the same sequence value then they may be displayed in a different order when the application is exported and imported into another environment, such as a test or production environment.
To ensure consistency, Oracle recommends you specify unique sequence numbers for every item, or at least for those within the same region.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COLUMN_SOURCE_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'DB_COLUMN',
        p_plugin_std_attributes       => 'SOURCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_DB_COLUMN',
        p_db_column                   => 'SOURCE_EXPRESSION',
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DB_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_SQL_EXPRESSION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_EXPRESSION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DATA_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NONE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'IS_PRIMARY_KEY',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_depending_on_comp_prop_name  => 'COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'DB_COLUMN',
        p_depending_on_comp_prop_name2 => 'DATA_TYPE',
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => 'BLOB,CLOB,BFILE,SDO_GEOMETRY' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'USE_AS_ROW_HEADER',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_important_for_accessibility  => true,
        p_depending_on_comp_prop_name  => 'HIDDEN_TEMPLATE_COMPONENT_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'REPORT',
        p_depending_on_comp_prop_name2 => 'DATA_TYPE',
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => 'BLOB,CLOB,BFILE,SDO_GEOMETRY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORMAT_MASK_DATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DATA_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'DATE,TIMESTAMP,TIMESTAMP_TZ,TIMESTAMP_LTZ' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORMAT_MASK_NUMBER',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DATA_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NUMBER' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'IS_GROUP',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'N',
        p_supports_substitution        => false,
        p_depending_on_comp_prop_name  => 'DATA_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'VARCHAR2,NUMBER,DATE,TIMESTAMP,TIMESTAMP_TZ,TIMESTAMP_LTZ,INTERVAL_Y2M,INTERVAL_2DS',
        p_depending_on_comp_prop_name2 => 'COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'DB_COLUMN,SQL_EXPRESSION' );
    --
    store_lov_type_component_props (
        p_name                        => 'LOV_TYPE',
        p_db_column_named_lov         => 'LOV_ID',
        p_db_column_source            => 'LOV_SOURCE',
        p_is_required                 => false,
        p_depending_on_comp_prop_name => 'DATA_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => 'BLOB,CLOB,ROWID,BFILE,SDO_GEOMETRY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DISPLAY_EXTRA_VALUES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_plugin_std_attributes       => 'LOV',
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id        => l_component_type_id,
        p_has_condition            => true,
        p_cond_type_db_column      => 'DISPLAY_CONDITION_TYPE',
        p_cond_type_view_db_column => 'CONDITION_TYPE',
        p_cond_exp1_db_column      => 'DISPLAY_CONDITION',
        p_cond_exp2_db_column      => 'DISPLAY_CONDITION2',
        p_authorization_db_column  => 'SECURITY_SCHEME',
        p_has_build_option         => true,
        p_has_comments             => true,
        p_comment_db_column        => 'COLUMN_COMMENT' );
    --
    --
    --
    -- Component Properties for FACET
    --
    l_component_type_id := c_comp_type_facet;
    -- Reset Component Property sequence for this component type
    --
    g_component_property_sequence := 10;
    --
    store_comp_prop_facet_sfilter (
        p_default_item_type          => 'NATIVE_CHECKBOX',
        p_depending_on_property_name => 'DEPENDING_ON_FACET' );
    --
    --
    --
    -- Component Properties for FACET GROUP
    --
    l_component_type_id := c_comp_type_facet_group;
    -- Reset Component Property sequence for this component type
    --
    g_component_property_sequence := 10;
    --
    store_comp_prop_facet_sfil_grp;
    --
    --
    -- Component Properties for FACET_GROUP_ITEM
    --
    l_component_type_id := c_comp_type_facet_group_item;
    -- Reset Component Property sequence for this component type
    --
    g_component_property_sequence := 10;
    --
    store_comp_prop_facet_sfilter (
        p_default_item_type          => 'NATIVE_SINGLE_CHECKBOX',
        p_depending_on_property_name => 'DEPENDING_ON_FACET_GRP_ITEM' );
    --
    --
    -- Component Properties for SFILTER
    --
    l_component_type_id := c_comp_type_sfilter;
    -- Reset Component Property sequence for this component type
    --
    g_component_property_sequence := 10;
    --
    store_comp_prop_facet_sfilter (
        p_default_item_type          => 'NATIVE_CHECKBOX',
        p_depending_on_property_name => 'DEPENDING_ON_SFILTER' );
    --
    --
    -- Component Properties for SFILTER GROUP
    --
    l_component_type_id := c_comp_type_sfilter_group;
    -- Reset Component Property sequence for this component type
    --
    g_component_property_sequence := 10;
    --
    store_comp_prop_facet_sfil_grp;
    --
    --
    -- Component Properties for SFILTER_GROUP_ITEM
    --
    l_component_type_id := c_comp_type_sfilter_group_item;
    -- Reset Component Property sequence for this component type
    --
    g_component_property_sequence := 10;
    --
    store_comp_prop_facet_sfilter (
        p_default_item_type          => 'NATIVE_SINGLE_CHECKBOX',
        p_depending_on_property_name => 'DEPENDING_ON_SFILTER_GRP_ITEM' );
    --
    --
    -- Component Properties for MAP REGION
    --
    --
    l_component_type_id           := c_comp_type_map_region;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'TILELAYER_TYPE',
        p_db_column                    => null,
        p_default_value                => 'DEFAULT',
        p_is_required                  => true,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'TILELAYER_DEFAULT',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'osm-positron',
        p_depending_on_comp_prop_name  => 'TILELAYER_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'CUSTOM' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'TILELAYER_DARK',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_null_text                    => 'Same as Standard',
        p_null_help_text               => 'Use the same background map for light and dark mode.',
        p_depending_on_comp_prop_name  => 'TILELAYER_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'CUSTOM' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_BKG_TILELAYER_DEFAULT',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'TILELAYER_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SHARED' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_BKG_TILELAYER_DARK',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_null_text                    => 'Same as Standard',
        p_null_help_text               => 'Use the same background map for light and dark mode.',
        p_depending_on_comp_prop_name  => 'TILELAYER_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SHARED' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_REGION_HEIGHT',
        p_db_column                    => null,
        p_is_required                  => true,
        p_default_value                => '640',
        p_is_common                    => true );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'NAVIGATION_BAR_TYPE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_default_value                => 'FULL',
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'NAVIGATION_BAR_POSITION',
        p_db_column                    => null,
        p_is_required                  => true,
        p_default_value                => 'END',
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'NAVIGATION_BAR_TYPE',
        p_depending_on_condition_type  => 'NOT_EQUALS',
        p_depending_on_expression      => 'NONE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_REGION_FEATURES',
        p_db_column                    => null,
        p_default_value                => 'SCALE_BAR:INFINITE_MAP:RECTANGLE_ZOOM',
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'INIT_POSITION_FROM_BROWSER',
        p_db_column                    => null,
        p_is_required                  => true,
        p_default_value                => 'N',
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_REGION_FEATURES',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'BROWSER_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'INIT_POSITION_ZOOM_TYPE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_default_value                => 'QUERY_RESULTS',
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'INIT_POSITION_ZOOM_SOURCE_SQL',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'INIT_POSITION_ZOOM_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'INIT_GEOMETRY_TYPE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'INIT_POSITION_ZOOM_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'INIT_POSITION_LON_COLUMN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'INIT_GEOMETRY_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'LONLAT_COLUMNS',
        p_parent_comp_type_id          => c_comp_type_map_region,
        p_parent_comp_prop_name        => 'INIT_POSITION_ZOOM_SOURCE_SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'INIT_POSITION_LAT_COLUMN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'INIT_GEOMETRY_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'LONLAT_COLUMNS',
        p_parent_comp_type_id          => c_comp_type_map_region,
        p_parent_comp_prop_name        => 'INIT_POSITION_ZOOM_SOURCE_SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'INIT_GEOMETRY_SDOGEOM_COLUMN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'INIT_GEOMETRY_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SDO_GEOMETRY',
        p_parent_comp_type_id          => c_comp_type_map_region,
        p_parent_comp_prop_name        => 'INIT_POSITION_ZOOM_SOURCE_SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'INIT_GEOMETRY_GEOJSON_COLUMN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'INIT_GEOMETRY_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'GEOJSON',
        p_parent_comp_type_id          => c_comp_type_map_region,
        p_parent_comp_prop_name        => 'INIT_POSITION_ZOOM_SOURCE_SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'INIT_ZOOMLEVEL_COLUMN',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'INIT_POSITION_ZOOM_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SQL',
        p_parent_comp_type_id          => c_comp_type_map_region,
        p_parent_comp_prop_name        => 'INIT_POSITION_ZOOM_SOURCE_SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'INIT_POSITION_LON_STATIC',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_supports_substitution        => true,
        p_depending_on_comp_prop_name  => 'INIT_POSITION_ZOOM_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'INIT_POSITION_LAT_STATIC',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_supports_substitution        => true,
        p_depending_on_comp_prop_name  => 'INIT_POSITION_ZOOM_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'INIT_ZOOMLEVEL_STATIC',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_supports_substitution        => true,
        p_depending_on_comp_prop_name  => 'INIT_POSITION_ZOOM_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'STATIC,QUERY_RESULTS' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_REGION_SHOW_LEGEND',
        p_db_column                    => null,
        p_default_value                => 'Y',
        p_is_required                  => true,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LEGEND_TITLE',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_help_text                    => q'~Specify the title of the legend.~',
        p_depending_on_comp_prop_name  => 'MAP_REGION_SHOW_LEGEND',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_REGION_LEGEND_POSITON',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'END',
        p_depending_on_comp_prop_name  => 'MAP_REGION_SHOW_LEGEND',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_REGION_LEGEND_POSITION_SELECTOR',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_supports_substitution        => false,
        p_depending_on_comp_prop_name  => 'MAP_REGION_LEGEND_POSITON',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SELECTOR' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_REGION_LEGEND_CSS_CLASSES',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_REGION_SHOW_LEGEND',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_REGION_MESSAGES_POSITION',
        p_default_value                => 'BELOW',
        p_db_column                    => null,
        p_is_required                  => false,
        p_null_text                    => 'Hide',
        p_null_help_text               => 'Do not show layer messages.',
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_REGION_MESSAGES_SELECTOR',
        p_db_column                    => null,
        p_is_required                  => true,
        p_supports_substitution        => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_REGION_MESSAGES_POSITION',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SELECTOR' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_UNIT_SYSTEM',
        p_db_column                    => null,
        p_is_required                  => true,
        p_default_value                => 'METRIC',
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_UNIT_SYSTEM_PAGE_ITEM',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_UNIT_SYSTEM',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_COPYRIGHT_NOTICE',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LAZY_LOADING',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_plugin_std_attributes        => 'LAZY_LOADING' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_REGION_STATUS_ITEM',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_CUSTOM_STYLES',
        p_db_column                    => null,
        p_is_required                  => false,
        p_supports_substitution        => false,
        p_is_common                    => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for Map Layer
    --
    --
    l_component_type_id           := c_comp_type_map_layer;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'NAME',
        p_check_uniqueness             => 'PARENT',
        p_is_required                  => true,
        p_is_common                    => true,
        p_supports_substitution        => false,
        p_help_text                    => 'Enter a descriptive name for this component. Use the <strong>Label</strong> attribute, if HTML or substitutions are required for label display on the map region.',
        p_default_value                => '#PLEASE_CHANGE#' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_LAYER_TYPE',
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'POINT' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LABEL',
        p_db_column                    => 'LABEL',
        p_is_required                  => false,
        p_is_common                    => true,
        p_help_text                    => 'Override Label to use for search result display. If not specified, the label of the search configuration will be used.' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DISPLAY_SEQUENCE',
        p_db_column                    => 'DISPLAY_SEQUENCE',
        p_is_required                  => true,
        p_is_common                    => true,
        p_help_text                    => q'~<p>Enter the display sequence for this layer. The sequence setting determines the order in which map layers are displayed on top of each other. Layers with higher numbers are displayed on top of layers with lower numbers.</p>
<p>Note: If two map layers have the same sequence value then they may be displayed in a different order when the application is exported and imported into another environment, such as a test or production environment.
To ensure consistency, Oracle recommends you specify unique sequence numbers for every layer, or at least for those within the same map region.</p>~' );
    --
    store_comp_prop_location (
        p_location_property_name      => 'CHILD_SOURCE_LOCATION',
        p_query_type_property_name    => 'SOURCE_QUERY_TYPE',
        p_db_column_query_type        => 'DATA_SOURCE_TYPE',
        p_db_column_source_lang       => 'FUNCTION_BODY_LANGUAGE',
        p_db_column_source            => 'DATA_SOURCE',
        p_has_items_to_submit         => true,
        p_db_column_items_to_submit   => 'ITEMS_TO_SUBMIT',
        p_has_include_rowid           => true,
        p_has_order_by                => true,
        p_has_order_by_item           => false,
        p_has_web_src_has_local_table => true,
        p_has_remote_caching          => true,
        p_examples_sql_query          => q'~
<dl><dt>Query returning longitude and latitude values as NUMBER columns:</dt>
<dd><pre>
select lon,
       lat,
       cust_name
  from customers
 where company_id = :PX_COMPANY_ID
</pre></dd>
<dt>Query returning the customer location as SDO_GEOMETRY column:</dt>
<dd><pre>
select cust_location,
       cust_name
  from customers
 where company_id = :PX_COMPANY_ID
</pre></dd>
</dl>~',
        p_help_text_items_to_submit => q'~Enter a comma separated list of page items on the current page to be set into session state when the map data is fetched with a separate request.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_HAS_SPATIAL_INDEX',
        p_db_column                   => null,
        p_default_value               => 'N',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHILD_SOURCE_LOCATION',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'LOCAL,REMOTE,REGION_SOURCE' );
    --
    -- MAP_HAS_SPATIAL_INDEX is part of Display Group "Source" but also has a dependency
    -- to Component-Prop 'CHILD_SOURCE_LOCATION', so we have to move it up after creation
    resequence_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name              => 'MAP_HAS_SPATIAL_INDEX',
        p_previous_name     => 'OPTIMIZER_HINT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_FEATURE_ROW_ASSIGN_COLUMN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHILD_SOURCE_LOCATION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REGION_SOURCE',
        p_parent_comp_prop_name       => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_FEATURE_ROW_ASSIGN_VALUE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'MAP_FEATURE_ROW_ASSIGN_COLUMN',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_GEOMETRY_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'SDO_GEOMETRY',
        p_depending_on_comp_prop_name => 'CHILD_SOURCE_LOCATION',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'REMOTE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_GEOMETRY_TYPE_REMOTE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHILD_SOURCE_LOCATION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REMOTE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_GEOMETRY_GEOMETRY_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'MAP_GEOMETRY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SDO_GEOMETRY',
        p_parent_comp_prop_name       => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_GEOMETRY_GEOJSON_COLUMN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_GEOMETRY_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'GEOJSON',
        p_depending_on_has_to_exist    => false,
        p_depending_on_comp_prop_name2 => 'MAP_GEOMETRY_TYPE_REMOTE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'GEOJSON',
        p_depending_on_has_to_exist2   => false,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_LON_COLUMN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_GEOMETRY_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'LONLAT_COLUMNS',
        p_depending_on_has_to_exist    => false,
        p_depending_on_comp_prop_name2 => 'MAP_GEOMETRY_TYPE_REMOTE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'LONLAT_COLUMNS',
        p_depending_on_has_to_exist2   => false,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_LAT_COLUMN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_GEOMETRY_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'LONLAT_COLUMNS',
        p_depending_on_has_to_exist    => false,
        p_depending_on_comp_prop_name2 => 'MAP_GEOMETRY_TYPE_REMOTE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'LONLAT_COLUMNS',
        p_depending_on_has_to_exist2   => false,
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COLUMN_MAPPING_PK_COLUMN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHILD_SOURCE_LOCATION',
        p_depending_on_condition_type => 'NOT_NULL',
        p_parent_comp_prop_name       => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_POINT_FEATURE_DISPLAY_TYPE',
        p_db_column                   => null,
        p_default_value               => 'SVG',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'MAP_LAYER_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'POINT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_POINT_ICON_SOURCE_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'MAP_POINT_FEATURE_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ICON' );

    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_POINT_ICON_CLASS_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'MAP_POINT_ICON_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DYNAMIC_CLASS',
        p_parent_comp_prop_name       => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_POINT_ICON_IMAGE_URL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'MAP_POINT_ICON_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'URL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_POINT_ICON_CSS_CLASSES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'MAP_POINT_ICON_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC_CLASS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_POINT_FEATURE_SVG_SHAPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_default_value               => 'Default',
        p_depending_on_comp_prop_name => 'MAP_POINT_FEATURE_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SVG' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_POINT_FEATURE_SVG_SHAPE_SCALE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => true,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'MAP_POINT_FEATURE_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SVG' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_FEATURE_FILL_COLOR_IS_SPECTRUM',
        p_db_column                   => null,
        p_default_value               => 'N',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'MAP_LAYER_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'POLYGON,POLYGON_3D');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_LAYER_COLOR_SPECTRUM_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'SEQUENTIAL',
        p_null_text                   => 'Custom',
        p_null_help_text              => 'Specify a list of HTML colors (#rrggbb), separated by comma.',
        p_depending_on_comp_prop_name => 'MAP_FEATURE_FILL_COLOR_IS_SPECTRUM',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_LAYER_COLOR_SPECTRUM_SEQ_NAME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Burg',
        p_depending_on_comp_prop_name => 'MAP_LAYER_COLOR_SPECTRUM_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SEQUENTIAL');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_LAYER_COLOR_SPECTRUM_DIV_NAME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Earth',
        p_depending_on_comp_prop_name => 'MAP_LAYER_COLOR_SPECTRUM_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DIVERGING');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_LAYER_COLOR_SPECTRUM_QUA_NAME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Safe',
        p_depending_on_comp_prop_name => 'MAP_LAYER_COLOR_SPECTRUM_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'QUALITATIVE');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_LAYER_HEATMAP_SPECTRUM_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'SEQUENTIAL',
        p_null_text                   => 'Custom',
        p_null_help_text              => 'Specify a list of HTML colors (#rrggbb), separated by comma.',
        p_depending_on_comp_prop_name => 'MAP_LAYER_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'HEATMAP');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_LAYER_HEATMAP_SPECTRUM_SEQ_NAME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Burg',
        p_depending_on_comp_prop_name => 'MAP_LAYER_HEATMAP_SPECTRUM_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SEQUENTIAL');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_LAYER_HEATMAP_SPECTRUM_DIV_NAME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Earth',
        p_depending_on_comp_prop_name => 'MAP_LAYER_HEATMAP_SPECTRUM_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DIVERGING');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_LAYER_HEATMAP_SPECTRUM_QUA_NAME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Safe',
        p_depending_on_comp_prop_name => 'MAP_LAYER_HEATMAP_SPECTRUM_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'QUALITATIVE');
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_LAYER_HEATMAP_CUSTOM_SPECTRUM',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_LAYER_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'HEATMAP',
        p_depending_on_comp_prop_name2 => 'MAP_LAYER_HEATMAP_SPECTRUM_TYPE',
        p_depending_on_condition_type2 => 'NULL',
        p_important_for_accessibility  => true,
        p_accessibility_help_text      => q'~<strong>Best Practices:</strong>
<ol>
<li><strong>Contrast Between Colors:</strong>
Ensure a significant contrast exists between the first and last colors chosen for your layer heat map spectrum. This facilitates clear differentiation of intensity levels or data points represented.</li>
<li><strong>Avoid Problematic Color Combinations:</strong>
Steer clear of common problematic color combinations like red and green. These combinations can pose challenges for users with color vision deficiencies, potentially hindering accurate interpretation of the map.</li></ol>
<p>By selecting colors with sufficient contrast and avoiding problematic combinations, you can enhance the accessibility of your layer heat map and ensure that it remains inclusive and usable for all users.</p>~');
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_FEATURE_FILL_COLOR',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_LAYER_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'POLYGON,POLYGON_3D',
        p_depending_on_comp_prop_name2 => 'MAP_FEATURE_FILL_COLOR_IS_SPECTRUM',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'N,$NULL$',
        p_depending_on_has_to_exist2   => false,
        p_important_for_accessibility  => true,
        p_accessibility_help_text      => q'~<strong>Best Practices:</strong>
<ul>
<li><strong>Check Color Contrast Ratio:</strong> Ensure there is sufficient contrast between the background color and stroke color to facilitate clear differentiation of the highlighted area on the map. Aim for a ratio of at least 3:1 to ensure readability for individuals with varying levels of vision impairment as well as the borders or stroke color outlining various features. Adequate contrast is crucial for users to easily perceive and discern these visual elements, enhancing the overall legibility and usability of the map interface.</li>
</ul>~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_FEATURE_FILL_COLOR_SPECTRUM',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_FEATURE_FILL_COLOR_IS_SPECTRUM',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y',
        p_depending_on_comp_prop_name2 => 'MAP_LAYER_COLOR_SPECTRUM_TYPE',
        p_depending_on_condition_type2 => 'NULL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_FEATURE_HEATMAP_VALUE_COLUMN',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_LAYER_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'HEATMAP',
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_FEATURE_FILL_COLOR_VALUE_COLUMN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_FEATURE_FILL_COLOR_IS_SPECTRUM',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y',
        p_depending_on_comp_prop_name2 => 'MAP_LAYER_TYPE',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'POLYGON,POLYGON_3D,LINE,POINT',
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_FEATURE_3D_VALUE_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'MAP_LAYER_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'POLYGON_3D',
        p_parent_comp_prop_name       => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_FEATURE_3D_VALUE_UNIT',
        p_db_column                   => null,
        p_default_value               => 'M',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'MAP_FEATURE_3D_VALUE_COLUMN',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_FEATURE_FILL_OPACITY',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'MAP_LAYER_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'POLYGON,POLYGON_3D');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_FEATURE_STROKE_STYLE',
        p_default_value               => 'SOLID',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'MAP_LAYER_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'LINE');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_FEATURE_STROKE_COLOR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '#101010',
        p_depending_on_comp_prop_name => 'MAP_LAYER_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'POLYGON,LINE',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>The stroke color of a map serves to ensure that individuals with moderately low vision can effectively distinguish boundaries between adjoining segments of colors in a map.<p>
<strong>Best Practices:</strong>
<ol>
<li>Color Selection Considerations:
<ul>
<li>When selecting colors for maps with multiple colors, it's crucial to consider the contrast ratio between adjoining colors.</li>
<li>Ensure that the contrast ratio between adjoining colors is at least 3:1 to facilitate clear differentiation.</li></ul></li>
<li>Testing and Adjustment Procedures:
<ul>
<li>Utilize accessibility testing tools or manual checks to ensure compliance with the minimum contrast ratio requirement.</li>
<li>If the contrast ratio falls below 3:1 for any adjoining colors, implement corrective measures to enhance visibility.</li>
<li>Consider adding borders with contrasting colors to visually separate adjoining segments and improve clarity.</li></ul></li>
<li>Considerations for Color Blindness:
<ul>
<li>Take into account the prevalence of color blindness among users and design with consideration for their needs.</li>
<li>Avoid relying solely on color to convey information; incorporate other visual cues, such as patterns or textures, to supplement color distinctions.</li>
<li>Ensure that color choices accommodate common types of color blindness, such as red-green deficiency, by selecting colors that remain distinguishable in various color vision scenarios.</li></ul></li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_FEATURE_STROKE_WIDTH',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'MAP_LAYER_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'LINE');
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_FEATURE_POINT_FILL_COLOR',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_LAYER_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'POINT',
        p_depending_on_comp_prop_name2 => 'MAP_POINT_ICON_SOURCE_TYPE',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => '$NULL$,STATIC_CLASS,DYNAMIC_CLASS',
        p_depending_on_has_to_exist2   => false,
        p_important_for_accessibility  => true,
        p_accessibility_help_text      => q'~<p>Enhancing map accessibility through mindful color selection and compliance with WCAG standards is crucial for ensuring inclusivity in data visualization.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Use Bold and Clear Colors:</strong> Opt for colors that are bold and clear to ensure both text and graphical elements within your map are easily distinguishable. This enhances readability and comprehension for all users, including those with visual impairments.</li>
<li><strong>Check Color Contrast Ratio:</strong> Utilize contrast checking tools to evaluate the color contrast ratio between foreground and background colors. Aim for a ratio of at least 4.5:1 to ensure readability for individuals with varying levels of vision impairment.</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_FEATURE_POINT_FILL_OPACITY',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_LAYER_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'POINT',
        p_depending_on_comp_prop_name2 => 'MAP_POINT_ICON_SOURCE_TYPE',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => '$NULL$,STATIC_CLASS,DYNAMIC_CLASS',
        p_depending_on_has_to_exist2   => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_FEATURE_POINT_STROKE_COLOR',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_POINT_FEATURE_DISPLAY_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SVG',
        p_depending_on_comp_prop_name2 => 'MAP_FEATURE_FILL_COLOR_IS_SPECTRUM',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'N,$NULL$',
        p_depending_on_has_to_exist2   => false,
        p_important_for_accessibility  => true,
        p_accessibility_help_text      => q'~<p>The stroke color of a map serves to ensure that individuals with moderately low vision can effectively distinguish boundaries between adjoining segments of colors in a map.<p>
<strong>Best Practices:</strong>
<ol>
<li>Color Selection Considerations:
<ul>
<li>When selecting colors for maps with multiple colors, it's crucial to consider the contrast ratio between adjoining colors.</li>
<li>Ensure that the contrast ratio between adjoining colors is at least 3:1 to facilitate clear differentiation.</li></ul></li>
<li>Testing and Adjustment Procedures:
<ul>
<li>Utilize accessibility testing tools or manual checks to ensure compliance with the minimum contrast ratio requirement.</li>
<li>If the contrast ratio falls below 3:1 for any adjoining colors, implement corrective measures to enhance visibility.</li>
<li>Consider adding borders with contrasting colors to visually separate adjoining segments and improve clarity.</li></ul></li>
<li>Considerations for Color Blindness:
<ul>
<li>Take into account the prevalence of color blindness among users and design with consideration for their needs.</li>
<li>Avoid relying solely on color to convey information; incorporate other visual cues, such as patterns or textures, to supplement color distinctions.</li>
<li>Ensure that color choices accommodate common types of color blindness, such as red-green deficiency, by selecting colors that remain distinguishable in various color vision scenarios.</li></ul></li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_FEATURE_POINT_STROKE_WIDTH',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_POINT_FEATURE_DISPLAY_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SVG',
        p_depending_on_comp_prop_name2 => 'MAP_FEATURE_FILL_COLOR_IS_SPECTRUM',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'N,$NULL$',
        p_depending_on_has_to_exist2   => false );
    --
        store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_POINT_FEATURE_CLUSTER',
        p_db_column                   => null,
        p_default_value               => 'N',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'MAP_POINT_FEATURE_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'HEAT' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_CLUSTER_POINT_FEATURE_THRESHOLD',
        p_is_required                  => true,
        p_default_value                => '80',
        p_is_common                    => false,
        p_depending_on_comp_prop_name2 => 'MAP_POINT_FEATURE_CLUSTER',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_CLUSTER_POINT_FEATURE_IMAGE_PATH',
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_POINT_ICON_SOURCE_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'URL',
        p_depending_on_comp_prop_name2 => 'MAP_POINT_FEATURE_CLUSTER',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_CLUSTER_POINT_FEATURE_IMAGE_CSS',
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_POINT_ICON_SOURCE_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'STATIC_CLASS,DYNAMIC_CLASS',
        p_depending_on_comp_prop_name2 => 'MAP_POINT_FEATURE_CLUSTER',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_CLUSTER_POINT_FEATURE_SVG_SHAPE',
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_POINT_FEATURE_DISPLAY_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SVG',
        p_depending_on_comp_prop_name2 => 'MAP_POINT_FEATURE_CLUSTER',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_CLUSTER_POINT_FEATURE_FILL_COLOR',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_POINT_ICON_SOURCE_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => '$NULL$,STATIC_CLASS,DYNAMIC_CLASS',
        p_depending_on_has_to_exist    => false,
        p_depending_on_comp_prop_name2 => 'MAP_POINT_FEATURE_CLUSTER',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'Y',
        p_important_for_accessibility  => true,
        p_accessibility_help_text      => q'~<p>Ensure that the color of a Point Clustering fill meets certain criteria to enhance visibility and usability for all users.</p>
<strong>Best Practices:</strong><ol>
<li><strong>Contrast Ratio:</strong> The Point Clustering fill must have a contrast ratio of at least (3:1) in comparison to its background. This ensures that users with visual impairments can discern the clustered points effectively.</li>
<li><strong>Differentiation from Standard Fill Color:</strong> The Point Clustering fill color should also be distinguishable from the standard fill color. This distinction is crucial for users to easily differentiate between clustered points and standard data points, facilitating improved data comprehension and interaction.</li>
</ol>
<p>By adhering to these guidelines, we strive to create a more inclusive and accessible experience for all users, regardless of their visual abilities.</p>~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_CLUSTER_POINT_FEATURE_SVG_SHAPE_SCALE',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_POINT_FEATURE_DISPLAY_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SVG',
        p_depending_on_comp_prop_name2 => 'MAP_POINT_FEATURE_CLUSTER',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_CLUSTER_POINT_FEATURE_TOOLTIP',
        p_is_required                  => false,
        p_is_common                    => false,
        p_supports_template_directive  => 'C',
        p_depending_on_comp_prop_name  => 'MAP_POINT_FEATURE_CLUSTER',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_FEATURE_TOOLTIP_ADV_FORMATTING',
        p_db_column                   => null,
        p_default_value               => 'N',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'MAP_LAYER_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'HEATMAP' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_FEATURE_TOOLTIP_COLUMN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'MAP_FEATURE_TOOLTIP_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_parent_comp_prop_name       => 'CHILD_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_FEATURE_TOOLTIP_HTML_EXPR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_template_directive => 'C',
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'MAP_FEATURE_TOOLTIP_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_FEATURE_TOOLTIP_CSS_CLASSES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'MAP_FEATURE_TOOLTIP_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LINK_TARGET_TYPE',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_LAYER_TYPE',
        p_depending_on_condition_type  => 'NOT_EQUALS',
        p_depending_on_expression      => 'HEATMAP',
        p_help_text                    => q'~Select the action to be performed when an object on the map is clicked.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_TARGET',
        p_db_column                   => 'LINK_TARGET',
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'LINK_TARGET_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'REDIRECT_PAGE,REDIRECT_APP,REDIRECT_URL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_FEATURE_INFOWINDOW_ADV_FORMATTING',
        p_db_column                    => null,
        p_default_value                => 'N',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_LAYER_TYPE',
        p_depending_on_condition_type  => 'NOT_EQUALS',
        p_depending_on_expression      => 'HEATMAP',
        p_depending_on_comp_prop_name2 => 'LINK_TARGET_TYPE',
        p_depending_on_condition_type2 => 'NULL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_FEATURE_INFOWINDOW_TITLE_COLUMN',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_FEATURE_INFOWINDOW_ADV_FORMATTING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'N',
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION',
        p_depending_on_comp_prop_name2 => 'LINK_TARGET_TYPE',
        p_depending_on_condition_type2 => 'NULL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_FEATURE_INFOWINDOW_BODY_COLUMN',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'MAP_FEATURE_INFOWINDOW_ADV_FORMATTING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'N',
        p_parent_comp_prop_name        => 'CHILD_SOURCE_LOCATION',
        p_depending_on_comp_prop_name2 => 'LINK_TARGET_TYPE',
        p_depending_on_condition_type2 => 'NULL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_FEATURE_INFOWINDOW_HTML_EXPR',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_supports_template_directive  => 'C',
        p_reference_scope              => 'ROW',
        p_depending_on_comp_prop_name  => 'MAP_FEATURE_INFOWINDOW_ADV_FORMATTING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_FEATURE_INFOWINDOW_CSS_CLASSES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'MAP_FEATURE_INFOWINDOW_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_LAYER_VISIBLE_MIN_ZOOM_LEVEL',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_LAYER_VISIBLE_MAX_ZOOM_LEVEL',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SHOW_IN_LEGEND',
        p_db_column                    => null,
        p_is_required                  => true,
        p_default_value                => 'Y',
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LEGEND_CAN_HIDE',
        p_default_value               => 'Y',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_IN_LEGEND',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LEGEND_ICON_CSS_CLASSES',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SHOW_IN_LEGEND',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_db_column                   => 'NO_DATA_FOUND_MESSAGE',
        p_help_text                   => 'Enter the text message that displays in the <strong>Messages</strong> area, when the layer query does not return any rows.',
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NO_DATA_FOUND_ICON_CLASSES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_MORE_DATA_FOUND_MESSAGE',
        p_db_column                   => 'MORE_DATA_FOUND_MESSAGE',
        p_is_required                 => false,
        p_is_common                   => false,
        p_help_text                   => q'~Enter the text message that displays in the <strong>Messages</strong> area, when the <strong>Maximum Rows to Process</strong> limit is exceeded for the layer. Use the <strong>#MAX_ROW_COUNT#</strong> substitution for the amount of rows actually fetched.~');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAXIMUM_ROW_COUNT',
        p_db_column                   => 'MAX_ROW_COUNT',
        p_is_required                 => false,
        p_is_common                   => false,
        p_help_text                   => q'~Enter the maximum number of rows which can be processed for this layer. This can be used as a measure against too many spatial objects being downloaded and displayed on the map.~');
    --
    store_condition_type_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_name_prefix                 => null,
        p_help_text_type              => null,
        p_reference_scope             => 'DEPENDS',
        p_db_column_type              => 'CONDITION_TYPE',
        p_view_column_type            => 'CONDITION_TYPE',
        p_db_column_expr1             => 'CONDITION_EXPR1',
        p_db_column_expr2             => 'CONDITION_EXPR2',
        p_has_execute_condition       => true,
        p_execute_condition_help_text => q'~Select how many times this layer condition is executed.
If you refer to <em>Columns</em> in your condition, you must specify <strong>For Each Row</strong> in order for the condition to be evaluated for each row of the layer query.
Otherwise, set to <strong>Once</strong> to evaluate the validations one time for the region.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AUTHORIZATION_SCHEME',
        p_db_column                   => 'AUTHORIZATION_SCHEME',
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_on_delete         => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUILD_OPTION',
        p_db_column                   => 'BUILD_OPTION_ID',
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_on_delete         => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COMMENTS',
        p_db_column                   => 'LAYER_COMMENTS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );

    --
    --
    -- Component Properties for Map Layers Web Source Parameters
    --
    l_component_type_id           := c_comp_type_map_layer_ws_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_ws_param_comp;

    --
    -- Component Properties for Map Backgrounds
    --
    l_component_type_id           := c_comp_type_map_background;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'NAME',
        p_db_column                    => 'NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_supports_substitution        => false,
        p_check_uniqueness             => 'APPLICATION',
        p_default_value                => '#PLEASE_CHANGE#',
        p_help_text                    => q'~Display Name for this Map Background.~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_BKG_TYPE',
        p_db_column                    => 'TYPE',
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'VECTOR',
        p_supports_substitution        => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_BKG_URL',
        p_db_column                    => 'URL',
        p_is_required                  => true,
        p_is_common                    => true,
        p_supports_substitution        => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_BKG_ATTRIBUTION',
        p_db_column                    => 'ATTRIBUTION',
        p_is_required                  => false,
        p_is_common                    => false,
        p_supports_substitution        => false,
        p_depending_on_comp_prop_name  => 'MAP_BKG_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'RASTER,OGCWMS' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_BKG_API_KEY',
        p_db_column                    => 'API_KEY',
        p_is_required                  => false,
        p_is_common                    => false,
        p_supports_substitution        => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_BKG_HTTP_HEADERS',
        p_db_column                    => 'HTTP_HEADERS',
        p_is_required                  => false,
        p_is_common                    => false,
        p_supports_substitution        => false );
    --
    store_component_prop (
       p_component_type_id            => l_component_type_id,
       p_property_name                => 'MAP_BKG_ZOOM_MIN',
       p_db_column                    => 'ZOOM_MIN',
       p_is_required                  => false,
       p_is_common                    => false,
       p_supports_substitution        => false );
    --
    store_component_prop (
       p_component_type_id            => l_component_type_id,
       p_property_name                => 'MAP_BKG_ZOOM_MAX',
       p_db_column                    => 'ZOOM_MAX',
       p_is_required                  => false,
       p_is_common                    => false,
       p_supports_substitution        => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAP_BKG_SUBSCRIBED_FROM',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'MAP_COMMENT' );
    --

    --
    -- Component Properties for Component Groups
    --
    l_component_type_id           := c_comp_type_component_group;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'NAME',
        p_db_column                    => 'NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_supports_substitution        => false,
        p_check_uniqueness             => 'APPLICATION',
        p_help_text                    => q'~Component Group Name~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'COMP_GRP_SUBSCRIBED_FROM',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VERSION_SCN',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'GROUP_COMMENT' );
    --
    -- Component Properties for Component Group Components
    --
    l_component_type_id           := c_comp_type_comp_grp_component;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_ITEM_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_PROCESS_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_COMPUTATION_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_SETTING_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BUILD_OPTION_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LIST_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SEARCH_CONFIG_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LOAD_TABLE_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DUALITY_VIEW_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'JSON_SOURCE_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'WEB_SRC_MODULE_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'AUTHENTICATION_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'AUTHORIZATION_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'GROUP_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EMAIL_TEMPLATE_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LOV_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PLUGIN_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PLUGIN_SETTING_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SHORTCUT_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'MAP_BACKGROUND_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REPORT_LAYOUT_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'MESSAGE_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PAGE_ID',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    --
    --
    -- Component Properties for CARD
    --
    --
    l_component_type_id           := c_comp_type_card;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    -- Card
    --
    -- appearance
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'CARD_USES_BLOB_COLUMN',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CARD_LAYOUT_TYPE',
        p_db_column                   => null, -- if property has db column, don't have to override, null
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'GRID' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GRID_COLUMN_COUNT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_null_text                   => 'Auto',
        p_depending_on_comp_prop_name => 'CARD_LAYOUT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'GRID' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COMPONENT_CSS_CLASSES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true );
    --
    -- card not for 20.2
    --store_component_prop (
    --    p_component_type_id           => l_component_type_id,
    --    p_property_name               => 'CARD_APPEARANCE',
    --    p_db_column                   => null,
    --    p_is_required                 => fase,
    --    p_is_common                   => true,
    --    p_default_value               => 'BLOCK' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CARD_CSS_CLASSES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_reference_scope             => 'ROW' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'CARD_PK_COLUMN1',
        p_db_column                    => 'PK1_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'CARD_USES_BLOB_COLUMN',
        p_depending_on_condition_type  => 'NOT_EQUALS',
        p_depending_on_expression      => 'Y',
        p_parent_comp_type_id          => c_comp_type_region,
        p_parent_comp_prop_name        => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'CARD_PK_COLUMN2',
        p_db_column                    => 'PK2_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'CARD_PK_COLUMN1',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_parent_comp_type_id          => c_comp_type_region,
        p_parent_comp_prop_name        => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'CARD_PK_COLUMN1_REQUIRED',
        p_db_column                    => 'PK1_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'CARD_USES_BLOB_COLUMN',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y',
        p_parent_comp_type_id          => c_comp_type_region,
        p_parent_comp_prop_name        => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'CARD_PK_COLUMN2_REQUIRED',
        p_db_column                    => 'PK2_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'CARD_PK_COLUMN1_REQUIRED',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_parent_comp_type_id          => c_comp_type_region,
        p_parent_comp_prop_name        => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TITLE_ADV_FORMATTING',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TITLE_COLUMN_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'TITLE_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TITLE_HTML_EXPR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_template_directive => 'C',
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'TITLE_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TITLE_CSS_CLASSES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'TITLE_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SUB_TITLE_ADV_FORMATTING',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SUB_TITLE_COLUMN_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SUB_TITLE_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SUB_TITLE_HTML_EXPR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_template_directive => 'C',
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'SUB_TITLE_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SUB_TITLE_CSS_CLASSES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'SUB_TITLE_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BODY_ADV_FORMATTING',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BODY_COLUMN_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'BODY_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BODY_HTML_EXPR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_template_directive => 'C',
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'BODY_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BODY_CSS_CLASSES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'BODY_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SECOND_BODY_ADV_FORMATTING',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SECOND_BODY_COLUMN_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SECOND_BODY_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SECOND_BODY_HTML_EXPR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_template_directive => 'C',
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'SECOND_BODY_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SECOND_BODY_CSS_CLASSES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'SECOND_BODY_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_SOURCE_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => null,
        p_null_text                   => 'No Icon' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_CLASS_COLUMN_NAME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'ICON_SOURCE_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'INITIALS,DYNAMIC_CLASS',
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_BLOB_COLUMN_NAME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'ICON_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'BLOB',
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_IMAGE_URL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'ICON_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'URL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CARD_ICON_CSS_CLASSES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'ICON_SOURCE_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'INITIALS,DYNAMIC_CLASS,BLOB,URL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CARD_ICON_CSS_CLASSES_REQUIRED',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'ICON_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC_CLASS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_POSITION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'START',
        p_depending_on_comp_prop_name => 'ICON_SOURCE_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ICON_DESCRIPTION',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_reference_scope              => 'ROW',
        p_depending_on_comp_prop_name  => 'ICON_SOURCE_TYPE',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_important_for_accessibility  => true,
        p_accessibility_help_text      => q'~<p>The icon description serves as a vital accessibility feature by providing contextual information about an icon when it receives focus or is hovered over. This feature enhances user understanding and interaction with the interface.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Clear and Concise:</strong> Icon descriptions should be clear and succinct, providing users with a brief but informative understanding of the icon's function or purpose.</li>
<li><strong>Descriptive Language:</strong> Use descriptive language that accurately conveys the meaning or action associated with the icon. Avoid ambiguous or vague descriptions that may confuse users.</li>
<li><strong>Determining Alt Text Need:</strong>
Evaluate whether the absence of the icon would impact page comprehension.
If the page would lose meaning without the icon, add alt text.</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BADGE_COLUMN_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BADGE_LABEL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'BADGE_COLUMN_NAME',
        p_depending_on_condition_type => 'NOT_NULL',
        p_important_for_accessibility => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BADGE_CSS_CLASSES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'BADGE_COLUMN_NAME',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MEDIA_ADV_FORMATTING',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MEDIA_HTML_EXPR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_template_directive => 'C',
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'MEDIA_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MEDIA_SOURCE_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_null_text                   => 'No Media',
        p_depending_on_comp_prop_name => 'MEDIA_ADV_FORMATTING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MEDIA_URL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'MEDIA_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC_URL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MEDIA_URL_COLUMN_NAME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'MEDIA_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DYNAMIC_URL',
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MEDIA_BLOB_COLUMN_NAME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'MEDIA_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'BLOB',
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MEDIA_DISPLAY_POSITION',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'BODY',
        -- property should appear if a media type has been selected OR a HTML expression has been entered
        p_depending_on_comp_prop_name  => 'MEDIA_SOURCE_TYPE',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_depending_on_has_to_exist    => false,
        p_depending_on_comp_prop_name2 => 'MEDIA_HTML_EXPR',
        p_depending_on_condition_type2 => 'NOT_NULL',
        p_depending_on_has_to_exist2   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MEDIA_APPEARANCE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_null_text                   => 'Auto',
        p_depending_on_comp_prop_name => 'MEDIA_SOURCE_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MEDIA_SIZING',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'FIT',
        p_depending_on_comp_prop_name => 'MEDIA_SOURCE_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MEDIA_CSS_CLASSES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_reference_scope             => 'ROW' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MEDIA_DESCRIPTION',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_reference_scope              => 'ROW',
        p_depending_on_comp_prop_name  => 'MEDIA_SOURCE_TYPE',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_important_for_accessibility  => true,
        p_accessibility_help_text      => q'~<p>The media description serves as a vital accessibility feature by providing contextual information about a media when it receives focus or is hovered over. This feature enhances user understanding and interaction with the interface.</p>
<strong>Best Practices:</strong>
<ol>
<li><strong>Clear and Concise:</strong> Media description should be clear and succinct, providing users with a brief but informative understanding of the media's function or purpose.</li>
<li><strong>Descriptive Language:</strong> Use descriptive language that accurately conveys the meaning or action associated with the media. Avoid ambiguous or vague descriptions that may confuse users.</li>
<li><strong>Determining Alt Text Need:</strong>
Evaluate whether the absence of the media would impact page comprehension.
If the page would lose meaning without the media, add the media description.</li>
</ol>~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'BLOB_MIME_TYPE_COLUMN',
        p_db_column                    => 'MIME_TYPE_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'CARD_USES_BLOB_COLUMN',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y',
        p_parent_comp_type_id          => c_comp_type_region,
        p_parent_comp_prop_name        => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'BLOB_LAST_UPDATED_COLUMN',
        p_db_column                    => 'LAST_UPDATED_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'CARD_USES_BLOB_COLUMN',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y',
        p_parent_comp_type_id          => c_comp_type_region,
        p_parent_comp_prop_name        => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LAZY_LOADING',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_help_text                   => q'~<p>Specify whether to load the region independently of the data for the region.</p>
        <p>When lazy loading is specified, the page is rendered immediately, showing an empty region, until the data is loaded.
        Generally, the page is not displayed until all of the page is loaded and ready to be rendered.
        Therefore, if it takes 5 seconds to load all of the data for a region, without lazy loading, the end user would have to wait 5 seconds before the page started to render.</p>
        <p>Note - Lazy Loading should only be utilized on data sets that take significant time to load, as this adds unnecessary processing overhead on the database for regions that load quickly.</p>~'
        );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGINATION_TYPE',
        p_db_column                   => 'PLUG_QUERY_NUM_ROWS_TYPE',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'SCROLL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_TOTAL_ROW_COUNT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CARDS_PER_PAGE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => '15',
        p_depending_on_comp_prop_name => 'PAGINATION_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SET' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_db_column                   => 'PLUG_QUERY_NO_DATA_FOUND',
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NO_DATA_FOUND_ICON_CLASSES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'INIT_JAVASCRIPT_FUNCTION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null,
        p_help_text                   => q'~<p>Enter a JavaScript function that takes an options object, modifies the object, and returns it. This allows advanced customization of the region during initialization. See the <code>tableModelView</code> widget JavaScript API documentation for the available options.</p>
<p>
Additional options defined by the cards region:
</p>
<ul>
<li>
<strong>modelOptions</strong> Options object passed to <code>apex.model.create</code>.</li>
</ul>~',
        p_examples                    => q'~<pre>function( options ) {
    options.pagination.showPageLinks = true;
    options.modelOptions.pageSize = 200;
    return options;
}</pre>~' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for CARD_ACTIONS
    --
    --
    l_component_type_id           := c_comp_type_card_action;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CARD_ACTION_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'BUTTON' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUTTON_LABEL',
        p_db_column                   => 'LABEL',
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_help_text                   => q'~Enter the text to be displayed on the button. If button display type is icon, this text becomes the ALT text for the icon image.~', -- $$$ instead of ALT should we call it accessible label?
        p_default_value               => '#PLEASE_CHANGE#',
        p_depending_on_comp_prop_name => 'CARD_ACTION_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'BUTTON',
        p_important_for_accessibility => true,
        p_accessibility_help_text     => q'~<p>Ensure buttons have clear and meaningful descriptions, aiding users in understanding and utilizing their functions.</p>
<strong>Best Practices:</strong>
<ul><li><strong>Label Text Verification:</strong>
Check if the label text accurately describes the button's purpose.</li></ul>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CARD_ACTION_POSITION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'PRIMARY',
        p_depending_on_comp_prop_name => 'CARD_ACTION_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'BUTTON' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DISPLAY_SEQUENCE',
        p_db_column                   => 'DISPLAY_SEQUENCE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_help_text                   => q'~Enter the display sequence for this action.
This is used to evaluate the display condition and render in the order defined.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ACTION_LINK_TARGET_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'REDIRECT_PAGE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_TARGET',
        p_db_column                   => 'LINK_TARGET',
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'ACTION_LINK_TARGET_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'REDIRECT_PAGE,REDIRECT_APP,REDIRECT_URL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_ATTRIBUTES',
        p_db_column                   => 'LINK_ATTRIBUTES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'LINK_TARGET',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUTTON_DISPLAY_TYPE',
        p_db_column                   => 'BUTTON_DISPLAY_TYPE',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'TEXT',
        p_depending_on_comp_prop_name => 'CARD_ACTION_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'BUTTON' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_CSS_CLASSES',
        p_db_column                   => 'ICON_CSS_CLASSES',
        p_is_required                 => true,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'BUTTON_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'ICON,TEXT_WITH_ICON' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUTTON_IS_HOT',
        p_db_column                   => 'IS_HOT',
        p_is_required                 => true,
        p_is_common                   => true,
        p_help_text                   => q'~Specify whether to use the <strong>Normal</strong> or <strong>Hot</strong> button when rendering this button.~',
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'CARD_ACTION_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'BUTTON' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'APPEARANCE_CSS_CLASSES',
        p_db_column                   => 'ACTION_CSS_CLASSES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_help_text                   => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~',
        p_depending_on_comp_prop_name => 'CARD_ACTION_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'BUTTON' );
    --
    store_condition_type_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_name_prefix                 => null,
        p_help_text_type              => null,
        p_reference_scope             => 'DEPENDS',
        p_db_column_type              => 'CONDITION_TYPE',
        p_view_column_type            => 'CONDITION_TYPE',
        p_db_column_expr1             => 'CONDITION_EXPR1',
        p_db_column_expr2             => 'CONDITION_EXPR2',
        p_has_execute_condition       => true );
    --
    store_standard_attr_comp_prop (
        p_component_type_id        => l_component_type_id,
        p_has_authorization_scheme => true,
        p_authorization_db_column  => 'AUTHORIZATION_SCHEME',
        p_has_build_option         => true,
        p_build_option_db_column   => 'BUILD_OPTION_ID',
        p_has_comments             => true,
        p_comment_db_column        => 'ACTION_COMMENTS' );
    --
    --
    -- Component Properties for Page Process Task Parameters
    --
    l_component_type_id           := c_comp_type_pg_pr_task_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_task_param(
        p_parent_comp_type_id => c_comp_type_page_process);
    --
    -- Component Properties for WORKFLOW
    --
    l_component_type_id           := c_comp_type_workflow;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_check_uniqueness      => 'APPLICATION',
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Name of this workflow.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'TITLE',
        p_db_column             => 'TITLE',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => true,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~User friendly title of this workflow.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'STATIC_ID',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_check_uniqueness      => 'APPLICATION',
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~
Static ID for this workflow. The static ID is used when manually executing the workflow with
the <strong>APEX_WORKFLOW</strong> package (<strong>APEX_WORKFLOW.CREATE_WORKFLOW</strong>).~' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'WORKFLOW_COMMENT' );

    -- Component Properties for WORKFLOW VERSION
    --
    l_component_type_id           := c_comp_type_workflow_version;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'WORKFLOW_VERSION',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_check_uniqueness      => 'PARENT',
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Version of this workflow.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'STATE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_is_read_only          => false,
        p_default_value         => 'DEVELOPMENT');
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DIAGRAM',
        p_is_required                  => false,
        p_is_common                    => false,
        p_db_column                    => null,
        p_is_read_only                 => false);
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'WF_SOURCE_QUERY_TYPE',
        p_db_column             => 'QUERY_TYPE',
        p_is_required           => false,
        p_is_common             => true,
        p_help_text             => q'~Select how additional data is queried that can be used to evaluate variables,
        participants and conditions during the execution of the activities of the workflow..~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WF_SOURCE_QUERY_OWNER',
        p_db_column                   => 'QUERY_OWNER',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'WF_SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WF_SOURCE_QUERY_TABLE',
        p_db_column                   => 'QUERY_TABLE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_parent_comp_prop_name       => 'WF_SOURCE_QUERY_OWNER',
        p_depending_on_comp_prop_name => 'WF_SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TABLE');

    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WF_SOURCE_SQL_QUERY',
        p_db_column                   => 'QUERY_SOURCE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'WF_SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL');

    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COLUMN_MAPPING_PK_COLUMN',
        p_db_column             => 'PK_COLUMN',
        p_is_required           => true,
        p_is_common             => true,
        p_parent_comp_prop_name => 'WF_SOURCE_QUERY_TABLE',
        p_depending_on_comp_prop_name => 'WF_SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TABLE' ,
        p_help_text             => q'~
The primary key column for the table which will serve as the system of records during execution of this workflow version.~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DEBUG_LEVEL',
        p_is_required                  => false,
        p_is_common                    => false,
        p_db_column                    => null,
        p_is_read_only                 => false);
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'VERSION_COMMENT' );
    --
    --
    -- Component Properties for WORKFLOW PARAMETER
    --
    l_component_type_id           := c_comp_type_workflow_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'WF_IDENTIFICATION_STATIC_ID',
        p_db_column             => 'STATIC_ID',
        p_check_uniqueness      => 'PARENT',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LABEL',
        p_db_column         => 'LABEL',
        p_is_required       => true,
        p_is_common         => true,
        p_check_uniqueness  => 'PARENT',
        p_default_value     => '#PLEASE_CHANGE#',
        p_help_text         => q'~An end-user friendly name of the workflow parameter.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'WORKFLOW_DATA_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'VARCHAR2' );
    --
   store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'API_DIRECTION',
        p_is_required                  => true,
        p_is_common                    => true,
        p_db_column                    => null,
        p_default_value                => 'IN',
        p_is_read_only                 => false,
        p_help_text                    => q'~The direction of the parameter as defined within the Workflow.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PARAMETER_REQUIRED',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'API_DIRECTION',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'IN,IN_OUT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PARAMETER_DEFAULT_VALUE',
        p_db_column                   => 'VALUE',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'API_DIRECTION',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'IN,IN_OUT',
        p_help_text                   => q'~<p>Default value of this parameter.~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SESSION_FORMAT_MASK',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_supports_substitution        => false,
        p_reference_scope              => 'DEPENDS',
        p_depending_on_comp_prop_name  => 'WORKFLOW_DATA_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'NUMBER,TIMESTAMP,TIMESTAMP_TZ,TIMESTAMP_LTZ');

    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VARIABLE_BOOLEAN_TRUE',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_supports_substitution        => false,
        p_depending_on_comp_prop_name  => 'WORKFLOW_DATA_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'BOOLEAN' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VARIABLE_BOOLEAN_FALSE',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_supports_substitution        => false,
        p_depending_on_comp_prop_name  => 'WORKFLOW_DATA_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'BOOLEAN' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'VARIABLE_COMMENT' );
    --
    -- Component Properties for WORKFLOW VARIABLE
    --
    l_component_type_id           := c_comp_type_workflow_variable;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_wf_variable;
    --
    -- Component Properties for WORKFLOW ACTIVITY
    --
    l_component_type_id           := c_comp_type_workflow_activity;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_process_type_comp_prop (
        p_name_db_column           => null,
        p_name_help_text           => q'~Enter a name for the workflow activity.~',
        p_db_column_prefix         => 'ACTIVITY_',
        p_execution_seq_db_column  => null,
        p_error_message_db_column  => null,
        p_error_message_help_text  => null,
        p_stop_execution_help_text => null,
        p_has_authorization_scheme => false,
        p_build_option_db_column   => null,
        p_comment_db_column        => 'ACTIVITY_COMMENT' );

    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LABEL',
        p_is_required                  => false,
        p_is_common                    => false,
        p_db_column                    => 'LABEL',
        p_help_text                   => q'~An optional, user friendly, translatable label for the activity.~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DIAGRAM',
        p_is_required                  => false,
        p_is_common                    => false,
        p_db_column                    => null,
        p_is_read_only                 => false);
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'STATIC_ID',
        p_db_column             => 'STATIC_ID',
        p_is_required           => true,
        p_is_common             => false,
        p_is_read_only          => false,
        p_check_uniqueness      => 'PARENT',
        p_default_value         => '#PLEASE_CHANGE#',
        p_supports_substitution => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'ACTIVITY_COMMENT' );
    --
    -- Component Properties for WORKFLOW ACTIVITY VARIABLE
    --
    l_component_type_id           := c_comp_type_workflow_act_var;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_wf_variable;
    -- Component Properties for WORKFLOW TRANSITION
    --
    l_component_type_id           := c_comp_type_workflow_trans;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_check_uniqueness      => 'PARENT',
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Name of this workflow activity transition.~' );

    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'TRANSITION_TYPE',
        p_db_column             => null,
        p_default_value         => 'NORMAL',
        p_is_required           => true,
        p_is_common             => true );

    store_component_prop (
        p_component_type_id                => l_component_type_id,
        p_property_name                    => 'EXECUTION_SEQUENCE',
        p_db_column                        => 'EXECUTION_SEQUENCE',
        p_is_required                      => false,
        p_is_common                        => false,
        p_depending_on_comp_prop_name      => 'TRANSITION_TYPE',
        p_depending_on_condition_type      => 'EQUALS',
        p_depending_on_expression          => 'ERROR');
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'FROM_WORKFLOW_ACTIVITY',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_reference_on_delete   => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'TO_WORKFLOW_ACTIVITY',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_reference_on_delete   => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DIAGRAM',
        p_is_required                  => false,
        p_is_common                    => false,
        p_db_column                    => null,
        p_is_read_only                 => false);
    --
    store_component_prop (
        p_component_type_id                => l_component_type_id,
        p_property_name                    => 'OPERATOR',
        p_db_column                        => 'CONDITION_TYPE',
        p_is_required                      => true,
        p_is_common                        => false,
        p_depending_on_comp_prop_name      => 'TRANSITION_TYPE',
        p_depending_on_condition_type      => 'EQUALS',
        p_depending_on_expression          => 'ERROR');
    --
    store_component_prop (
        p_component_type_id                => l_component_type_id,
        p_property_name                    => 'COMPARE_VALUE',
        p_db_column                        => 'CONDITION_EXPR1',
        p_is_required                      => true,
        p_is_common                        => false,
        p_depending_on_comp_prop_name      => 'TRANSITION_TYPE',
        p_depending_on_condition_type      => 'EQUALS',
        p_depending_on_expression          => 'ERROR',
        p_depending_on_comp_prop_name2     => 'OPERATOR',
        p_depending_on_condition_type2     => 'NOT_EQUALS',
        p_depending_on_expression2         => 'OTHERWISE');
    --
    --
    store_component_prop (
        p_component_type_id                => l_component_type_id,
        p_property_name                    => 'BUILD_OPTION',
        p_db_column                        => 'BUILD_OPTION_ID',
        p_is_required                      => false,
        p_is_common                        => false,
        p_depending_on_comp_prop_name      => 'TRANSITION_TYPE',
        p_depending_on_condition_type      => 'EQUALS',
        p_depending_on_expression          => 'ERROR',
        p_reference_on_delete              => 'WEAK_NULL' );

    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'TRANSITION_COMMENT' );

    --
    -- Component Properties for WORKFLOW BRANCH
    --
    l_component_type_id           := c_comp_type_workflow_branch;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_check_uniqueness      => 'PARENT',
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Name of this workflow switch activity branch.~' );

    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SWITCH_TYPE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DIAGRAM',
        p_is_required                  => false,
        p_is_common                    => false,
        p_db_column                    => null,
        p_is_read_only                 => false);
    --
    store_component_prop (
        p_component_type_id                => l_component_type_id,
        p_property_name                    => 'EXECUTION_SEQUENCE',
        p_db_column                        => 'EXECUTION_SEQUENCE',
        p_is_required                      => true,
        p_is_common                        => false,
        p_depending_on_comp_prop_name      => 'SWITCH_TYPE',
        p_depending_on_condition_type      => 'IN_LIST',
        p_depending_on_expression          => 'IF_ELSE,CASE');
    --
    store_condition_type_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'WF',
        p_help_text_type    => null,
        p_db_column_type    => null,
        p_db_column_expr1   => 'CONDITION_EXPR1',
        p_db_column_expr2   => 'CONDITION_EXPR2',
        p_depending_on_comp_prop_name  => 'SWITCH_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'IF_ELSE');
    --
    store_component_prop (
        p_component_type_id                => l_component_type_id,
        p_property_name                    => 'WHEN',
        p_db_column                        => 'CONDITION_EXPR1',
        p_is_required                      => true,
        p_is_common                        => false,
        p_depending_on_comp_prop_name      => 'SWITCH_TYPE',
        p_depending_on_condition_type      => 'EQUALS',
        p_depending_on_expression          => 'TRUE_FALSE_CHECK');
    --
    store_component_prop (
        p_component_type_id                => l_component_type_id,
        p_property_name                    => 'OPERATOR',
        p_db_column                        => 'CONDITION_TYPE',
        p_is_required                      => true,
        p_is_common                        => false,
        p_depending_on_comp_prop_name      => 'SWITCH_TYPE',
        p_depending_on_condition_type      => 'IN_LIST',
        p_depending_on_expression          => 'CHECK_WF_VARIABLE,CASE');
    --
    store_component_prop (
        p_component_type_id                => l_component_type_id,
        p_property_name                    => 'COMPARE_VALUE',
        p_db_column                        => 'CONDITION_EXPR1',
        p_is_required                      => true,
        p_is_common                        => false,
        p_depending_on_comp_prop_name      => 'SWITCH_TYPE',
        p_depending_on_condition_type      => 'IN_LIST',
        p_depending_on_expression          => 'CHECK_WF_VARIABLE,CASE',
        p_depending_on_comp_prop_name2     => 'OPERATOR',
        p_depending_on_condition_type2     => 'NOT_IN_LIST',
        p_depending_on_expression2         => 'OTHERWISE,IS_NULL,NOT_NULL');
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'TO_WORKFLOW_ACTIVITY',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_reference_on_delete   => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id                => l_component_type_id,
        p_property_name                    => 'BUILD_OPTION',
        p_db_column                        => 'BUILD_OPTION_ID',
        p_is_required                      => false,
        p_is_common                        => false,
        p_depending_on_comp_prop_name      => 'SWITCH_TYPE',
        p_depending_on_condition_type      => 'EQUALS',
        p_depending_on_expression          => 'IF_ELSE',
        p_reference_on_delete              => 'WEAK_NULL' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id => l_component_type_id,
        p_has_comments      => true,
        p_comment_db_column => 'TRANSITION_COMMENT' );
    --
    -- Component Properties for WORKFLOW PARTICIPANT
    --
    l_component_type_id           := c_comp_type_workflow_particip;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_check_uniqueness      => 'PARENT',
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Name of this workflow participant.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'WORKFLOW_PARTICIPANT_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'OWNER' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'IDENTITY_TYPE',
        p_is_required                  => true,
        p_is_common                    => true,
        p_db_column                    => null,
        p_default_value                => 'USER',
        p_is_read_only                 => true);
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARTICIPANT_VALUE_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_STATIC_VALUE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PARTICIPANT_VALUE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_QUERY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PARTICIPANT_VALUE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_QUERY' );
    --
    store_expression_comp_props (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'VALUE_',
        p_return_type       => 'VARCHAR2',
        p_type_property     => 'PARTICIPANT_VALUE_TYPE' );
    --
    store_func_body_comp_props (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'VALUE_',
        p_return_type       => 'VARCHAR2',
        p_type_property     => 'PARTICIPANT_VALUE_TYPE' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for Page Process Workflow Parameters
    --
    l_component_type_id           := c_comp_type_page_proc_wf_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_wf_param;
    --
    -- Component Properties for Invoke Workflow Activity Workflow Parameters
    --
    l_component_type_id           := c_comp_type_wf_act_wf_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_wf_param;
    --
    -- Component Properties for Workflow Activity Task Parameters
    --
    l_component_type_id           := c_comp_type_wf_act_task_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_task_param(
        p_parent_comp_type_id => c_comp_type_workflow_activity);
    --
    -- Component Properties for Workflow Activity Invoke API Parameters
    --
    l_component_type_id           := c_comp_type_wf_act_api_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_api_param;
    --
    -- Component Properties for Workflow Activity Web Source Parameters
    --
    --
    l_component_type_id           := c_comp_type_wf_act_ws_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_ws_param_comp;
    --
    -- Component Properties for SHORTCUT
    --
    l_component_type_id := c_comp_type_shortcut;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAME',
        p_db_column                   => 'SHORTCUT_NAME',
        p_is_required                 => true,
        p_is_common                   => true,
        p_check_uniqueness            => 'APPLICATION',
        p_supports_substitution       => false,
        p_help_text                   => q'~The shortcut name identifies the shortcut and is the name that the shortcut is referenced using.  To reference a shortcut use the "SHORTCUT_NAME" syntax wherever a shortcut is permitted  The name will automatically
be converted into all uppercase.  All references to shortcuts must be in upper case.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHORTCUT_SUBSCRIBED_FROM',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VERSION_SCN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHORTCUT_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'HTML_TEXT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHORTCUT_HTML_CODE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => true,
        p_depending_on_comp_prop_name => 'SHORTCUT_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'HTML_TEXT,HTML_TEXT_ESCAPE_SC' );
    --
    store_func_body_comp_props (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'SHORTCUT_',
        p_return_type       => 'VARCHAR2',
        p_type_property     => 'SHORTCUT_TYPE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHORTCUT_TEXT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => true,
        p_depending_on_comp_prop_name => 'SHORTCUT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TEXT_ESCAPE_JS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_MESSAGE_NAME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => true,
        p_depending_on_comp_prop_name => 'SHORTCUT_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MESSAGE,MESSAGE_ESCAPE_JS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_IMAGE_URL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => true,
        p_depending_on_comp_prop_name => 'SHORTCUT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'IMAGE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ERROR_MESSAGE',
        p_db_column                   => 'ERROR_TEXT',
        p_is_required                 => false,
        p_is_common                   => false,
        p_help_text                   => q'~If an error should occur during the processing of a shortcut then the following text is displayed.~',
        p_depending_on_comp_prop_name => 'SHORTCUT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'FUNCTION_BODY' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_has_build_option            => true,
        p_build_option_db_column      => 'BUILD_OPTION',
        p_has_comments                => true,
        p_comment_db_column           => 'COMMENTS' );
    --
    --
    -- Component Properties for TREE
    --
    l_component_type_id := c_comp_type_tree;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TREE_NAME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TREE_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TREE_SQL_STATEMENT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'TREE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DYNAMIC' );
    --
    --
    -- Component Properties for PLUGINS
    --
    l_component_type_id := c_comp_type_plugin;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAME',
        p_db_column                   => 'DISPLAY_NAME',
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_help_text                   => q'~The name of your plug-in.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_INTERNAL_NAME',
        p_db_column                   => 'NAME',
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_THEME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'TEMPLATE COMPONENT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_CATEGORY',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IS_QUICK_PICK_ADVANCED',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IS_DEPRECATED',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IS_LEGACY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_SUBSCRIBED_FROM',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SUBSCRIBE_COMPONENT_SETTINGS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'PLUGIN_SUBSCRIBED_FROM',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VERSION_SCN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_TMPL_COMPONENT_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PLUGIN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TEMPLATE COMPONENT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PARTIAL_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REPORT_BODY_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
        --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REPORT_GROUP_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REPORT_ROW_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REPORT_CONTAINER_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TRANSLATE_TEMPLATES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_ESCAPE_MODE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'HTML' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NUMBER_OF_LAZY_LOADING_SKELETONS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_SLOT_REGION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_SLOT_ITEM',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_SLOT_BUTTON',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLSQL_CODE',
        p_db_column                   => 'PLSQL_CODE',
        p_is_required                 => true,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'API_INTERFACE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'RENDER_PROCEDURE_FUNCTION_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'META_DATA_PROCEDURE_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SESSION_SENTRY_FUNCTION_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'INVALID_SESSION_FUNCTION_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AUTHENTICATION_FUNCTION_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'POST_LOGOUT_FUNCTION_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AJAX_PROCEDURE_FUNCTION_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALIDATION_PROCEDURE_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EXECUTION_FUNCTION_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COMPLETION_FUNCTION_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TERMINATION_FUNCTION_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REST_SOURCE_CAPABILITIES_PROCEDURE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REST_SOURCE_FETCH_PROCEDURE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REST_SOURCE_DML_PROCEDURE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REST_SOURCE_EXECUTE_PROCEDURE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REST_SOURCE_DISCOVER_PROCEDURE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ITEM_TYPE_COMPONENT_TYPES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'APEX_APPLICATION_PAGE_ITEMS:APEX_APPL_PAGE_IG_COLUMNS',
        p_depending_on_comp_prop_name => 'PLUGIN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM TYPE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PROCESS_TYPE_COMPONENT_TYPES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'APEX_APPLICATION_PAGE_PROC:APEX_APPL_AUTOMATION_ACTIONS:APEX_APPL_TASKDEF_ACTIONS:APEX_APPL_WORKFLOW_ACTIVITIES',
        p_depending_on_comp_prop_name => 'PLUGIN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PROCESS TYPE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_STD_ITEM_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PLUGIN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM TYPE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_STD_REGION_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PLUGIN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REGION TYPE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_STD_DYNAMIC_ACTION_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PLUGIN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DYNAMIC ACTION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_STD_AUTHENTICATION_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PLUGIN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'AUTHENTICATION TYPE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_STD_WEB_SOURCE_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PLUGIN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'WEB SOURCE TYPE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_STD_PROCESS_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PLUGIN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PROCESS TYPE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SUBSTITUTE_ATTRIBUTE_VALUES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FILE_PREFIX',
        p_db_column                   => 'IMAGE_PREFIX',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_examples           => q'~<p><ul>
  <li>/myFiles/</li>
  <li>http://example.com/myFiles/</li>
  <li>&#35;APEX_FILES&#35;myFiles/</li>
</ul></p>~',
        p_help_text          => q'~<p>Determines the virtual path the Web server uses to point to the files of the plug-in.</p>
<p>Do not specify anything to reference files which are stored with your plug-in definition in the database.</p>
<p>For performance reasons you can also store your plug-in files on your Web Server. Use <code>&#35;APEX_FILES&#35;</code> or any valid URL to reference them.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CSS_FILE_URLS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_examples                    => q'~<p><ul>
  <li>Standard file reference
      <pre>#PLUGIN_FILES#main.css</pre>
  </li>
  <li>Standard file reference which loads the minified file main.min.css from #PLUGIN_FILES#minified/ for regular page views and main.css from #PLUGIN_FILES# in debug mode.
      <pre>#PLUGIN_FILES##MIN_DIRECTORY#main#MIN#.css</pre>
  </li>
  <li>Conditional media query
      <pre>[media="only screen and (max-device-width: 480px)"]#PLUGIN_FILES#smartphone.css</pre>
  </li>
</ul></p>~',
        p_help_text                   => q'~<p>Enter Cascading Style Sheet file URLs to be loaded with this plug-in. Each URL has to be written on a new line. If you provide a minified version of your file you can use the substitution string <code>#MIN#</code> to include <code>.min</code>, or <code>#MIN_DIRECTORY#</code> to include <code>minified/</code> in your file URL for a regular page view, and an empty string if the page is viewed in debug mode. You also have access to the substitution string <code>#PLUGIN_FILES#</code> to substitute with the value of the plug-in's file prefix.</p>
<p>File URLs you enter here will be emitted within the <code>#APEX_CSS#</code> substitution string in the page template.</p>
<p>Note: You do not need to include opening or closing <code>link</code> tags, just the file URL.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_FILE_URLS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_examples           => q'~<p><ul>
  <li>Standard file reference
      <pre>#PLUGIN_FILES#main.js</pre>
  </li>
  <li>Standard file reference which loads the minified file main.min.js from #PLUGIN_FILES#minified/ for regular page views and main.js from #PLUGIN_FILES# in debug mode.
      <pre>#PLUGIN_FILES##MIN_DIRECTORY#main#MIN#.js</pre>
  </li>
  <li>Use this syntax if the library is also used from a RequireJS require call. The define name must match what is used in the requirejs.config paths and the value must be the global symbol exposed by the library. Only applies when using RequireJS. This avoids RequireJS  loading that library a second time.
      <pre>[define hammerjs=Hammer]/myjs/hammer.js</pre>
  </li>
  <li>Use this syntax if the file has a dependency on Oracle JET. This will automatically load RequireJS, the Oracle JET RequireJS configuration and the JET common module bundle before this file.
      <pre>[require jet]/myjs/main.js</pre>
  </li>
  <li>Use this syntax if the file has a dependency on RequireJS. This will automatically load RequireJS before this file.
      <pre>[require requirejs]/myjs/main.js</pre>
  </li>
</ul></p>~',
        p_help_text          => q'~<p>Enter JavaScript file URLs for code to be loaded with this plug-in. Each URL has to be written on a new line. If you provide a minified version of your file you can use the substitution string <code>#MIN#</code> to include <code>.min</code>, or <code>#MIN_DIRECTORY#</code> to include <code>minified/</code> in your file URL for a regular page view, and an empty string if the page is viewed in debug mode. You also have access to the substitution string <code>#PLUGIN_FILES#</code> to substitute the value of the plug-in's file prefix.</p>
<p>JavaScript file URLs you enter here will be emitted within the <code>#GENERATED_JAVASCRIPT#</code> substitution string in the page template.</p>
<p>Note: You do not need to include opening or closing <code>script</code> tags, just the file URL.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_VERSION',
        p_db_column                   => 'VERSION_IDENTIFIER',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ABOUT_URL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_HELP_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_has_comments                => true,
        p_comment_db_column           => 'PLUGIN_COMMENT' );
    --
    -- Component Properties for PLUGIN_STD_ATTRIBUTE
    --
    l_component_type_id := c_comp_type_plugin_std_attr;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAME',
        p_db_column                   => 'NAME',
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PARAMETER_REQUIRED',
        p_db_column                   => 'IS_REQUIRED',
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_MINIMUM_COLUMNS',
        p_db_column                   => 'SQL_MIN_COLUMN_COUNT',
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_MAXIMUM_COLUMNS',
        p_db_column                   => 'SQL_MAX_COLUMN_COUNT',
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PARAMETER_DEFAULT_VALUE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_attr_cond_comp_props;
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SUPPORTED_FOR_COMPONENT_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HELP_TEXT_NO_MARKUP',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_help_text                   => q'~<p>Specify help text for this plug-in attribute. The help text is displayed as context sensitive help for the attribute in the Builder.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EXAMPLES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_help_text                   => q'~Specify examples for this plug-in attribute. The examples are displayed as part of the context sensitive help for the attribute in the Builder.~' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_has_comments                => true,
        p_comment_db_column           => 'ATTRIBUTE_COMMENT' );
    --
    --
    -- Component Properties for PLUGIN_ATTRIBUTE_GROUPS
    --
    l_component_type_id := c_comp_type_plugin_attr_grp;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAME',
        p_db_column                   => 'TITLE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IDENTIFICATION_DISPLAY_SEQUENCE',
        p_db_column                   => 'DISPLAY_SEQUENCE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id           => l_component_type_id );
    --
    -- Component Properties for PLUGIN_SETTINGS  (Component Settings)
    --
    l_component_type_id := c_comp_type_plugin_setting;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'PLUGIN',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PLUGIN_TYPE',
        p_db_column             => 'PLUGIN_TYPE',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_attribute_comp_props (
        p_attribute_count       => 15,
        p_column_name_prefix    => 'ATTRIBUTE'
    );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COMPONENT_SETTING_SUBSCRIBED_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERSION_SCN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id           => l_component_type_id );
    --
    --
    -- Component Properties for PLUGIN_CUST_ATTRIBUTES
    --
    l_component_type_id := c_comp_type_plugin_cust_attr;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IDENTIFICATION_STATIC_ID',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_help_text                   => q'~<p>Specify the Static ID for this attribute. This ID can be referenced in the template using the #STATIC_ID# syntax.</p>~',
        p_comment_text                => q'~$$$ Condition of type "VAL_OF_ITEM_IN_COND_EQ_COND2" found, please check logic.  P4415_PLUGIN_TYPE = 'TEMPLATE COMPONENT'~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_SEQUENCE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_default_value               => null );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAME',
        p_db_column                   => 'PROMPT',
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_help_text                   => q'~Specify the label which is displayed for that attribute in the &PRODUCT_NAME. Builder.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_SCOPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'COMPONENT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_GROUP',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DISPLAY_SEQUENCE',
        p_db_column                   => 'DISPLAY_SEQUENCE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => null,
        p_help_text                   => q'~<p>Specify the display sequence for this plug-in attribute in the &PRODUCT_NAME. Builder.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'TEXT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_LOV_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_IS_COMMON',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_SHOW_IN_WIZARD',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_IS_REQUIRED',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_IS_TRANSLATABLE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_DISPLAY_WIDTH',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_MAXIMUM_LENGTH',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_MINIMUM_COLUMNS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_MAXIMUM_COLUMNS',
        p_db_column                   => 'SQL_MAX_COLUMN_COUNT',
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_PARENT_ATTRIBUTE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_DATA_TYPES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'VARCHAR2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_SET_TEXT_CASE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_UNIT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_LOV_NULL_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'INCLUDE_COLUMNS_IN_ITEMS_PICKER',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'COMPONENT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_ESCAPE_MODE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'HTML' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_LOV_COMPONENT_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_COMP_TYPE_SCOPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_ON_DELETE_BEHAVIOR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLUGIN_ATTRIBUTE_DEFAULT_VALUE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_DEPRECATED_ATTRIBUTE_FOR_VALUES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_attr_cond_comp_props;
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SUPPORTED_FOR_COMPONENT_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HELP_TEXT_NO_MARKUP',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EXAMPLES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEMO_VALUE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_has_comments                => true,
        p_comment_db_column           => 'ATTRIBUTE_COMMENT' );
    --
    -- Component Properties for PLUGIN_ATTRIBUTE_LOV_ENTRY
    --
    l_component_type_id           := c_comp_type_plugin_attr_lov;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LOV_SEQUENCE',
        p_db_column             => 'DISPLAY_SEQUENCE',
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => null );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DISPLAY_VALUE',
        p_db_column             => 'DISPLAY_VALUE',
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => '#PLEASE_CHANGE#',
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'RETURN_VALUE',
        p_db_column             => 'RETURN_VALUE',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name         => 'IS_QUICK_PICK_ADVANCED',
        p_db_column             => 'IS_QUICK_PICK',
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'N' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IS_DEPRECATED',
        p_db_column             => 'IS_DEPRECATED',
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'N' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'HELP_TEXT_NO_MARKUP',
        p_db_column             => 'HELP_TEXT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id     => l_component_type_id );
    --
    -- Component Properties for PLUGIN_ACTION_POSITION
    --
    l_component_type_id           := c_comp_type_plugin_action_pos;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~Specify the name displayed for this action position in the Builder.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IDENTIFICATION_STATIC_ID',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~Specify the Static ID for this action position. This ID can be referenced in the partial template using the #STATIC_ID# syntax.
If the position is of type link, #STATIC_ID_ATTR# can be used to reference the link attributes entered by the developer.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IDENTIFICATION_DISPLAY_SEQUENCE',
        p_db_column             => 'DISPLAY_SEQUENCE',
        p_is_required           => true,
        p_is_common             => true,
        p_help_text             => q'~Specify the display sequence for this plug-in action position in the &PRODUCT_NAME. Builder.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IS_QUICK_PICK_ADVANCED',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'N' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PLUGIN_ACTION_POSITION_TYPE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'LINK' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ACTION_POSITION_PREDEFINED_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PLUGIN_HELP_TEXT',
        p_db_column             => 'HELP_TEXT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false,
        p_help_text             => q'~<p>Specify help text for this plug-in action position. The help text is displayed as context sensitive help for the action position in the Builder.</p>~' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id     => l_component_type_id,
        p_has_comments          => true,
        p_comment_db_column     => 'ACTION_POSITION_COMMENTS' );
    --
    --
    -- Component Properties for PLUGIN_SLOTS
    l_component_type_id           := c_comp_type_plugin_slot;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => null,
        p_check_uniqueness      => 'PARENT');
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IDENTIFICATION_STATIC_ID',
        p_db_column             => 'PLACEHOLDER',
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => null,
        p_check_uniqueness      => 'PARENT' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SLOT_REGION_SUPPORT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'Y' );
    --
     store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SUPPORTED_REGION_TYPES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SLOT_REGION_SUPPORT',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SLOT_ITEM_SUPPORT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'Y' );
    --
     store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SUPPORTED_ITEM_TYPES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SLOT_ITEM_SUPPORT',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SLOT_BUTTON_SUPPORT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'Y' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SLOT_GRID_SUPPORT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'N' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SLOT_MAX_FIXED_GRID_COLUMNS',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => null );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SLOT_NEW_ROW',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'Y' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id     => l_component_type_id,
        p_has_comments          => true,
        p_comment_db_column     => 'COMPONENT_COMMENT');


    -- Component Properties for PLUGIN_ACTION_TEMPLATE
    --
    l_component_type_id           := c_comp_type_plugin_action_tmpl;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~Specify the name displayed for this action template in the Builder.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PLUGIN_ACTION_TEMPLATE_TYPE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PLUGIN_ACTION_TEMPLATE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'TEMPLATE_TRANSLATABLE',
        p_db_column             => 'TRANSLATE_THIS_TEMPLATE',
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'N' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PLUGIN_HELP_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false,
        p_help_text             => q'~<p>Specify help text for this plug-in action template. The help text is displayed as context sensitive help for the action template in the Builder.</p>~' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id     => l_component_type_id,
        p_has_comments          => true,
        p_comment_db_column     => 'ACTION_TEMPLATE_COMMENTS' );

    --
    -- Component Properties for PLUGIN_EVENT
    --
    l_component_type_id           := c_comp_type_plugin_event;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'DISPLAY_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~The name of a plug-in event.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PLUGIN_INTERNAL_NAME',
        p_db_column             => 'NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~Internal name of a plug-in event.~' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id     => l_component_type_id );
    --
    -- Plug-in Files
    l_component_type_id           := c_comp_type_plugin_file;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_static_file;
    --
    --
    -- Component Properties for SUPPORT_OBJECTS
    --
    l_component_type_id           := c_comp_type_supobj;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REQUIRED_FREE_SPACE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REQUIRED_SYSTEM_PRIVILEGES',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => 'CREATE TABLE:CREATE VIEW:CREATE PROCEDURE:CREATE TRIGGER' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'INSTALLED_OBJECT_NAMES',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LICENSE_MESSAGE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'VALIDATION_MESSAGE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CONFIGURATION_MESSAGE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BUILD_OPTIONS_MESSAGE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'INSTALL_WELCOME_MESSAGE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'INSTALL_CONFIRM_MESSAGE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'INSTALL_SUCCESS_MESSAGE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'INSTALL_FAILURE_MESSAGE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'UPGRADE_WELCOME_MESSAGE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'UPGRADE_CONFIRMATION_MESSAGE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'UPGRADE_SUCCESS_MESSAGE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'UPGRADE_FAILURE_MESSAGE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEINSTALL_CONFIRMATION_MESSAGE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POST_DEINSTALL_MESSAGE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false );
    --
    store_standard_attr_comp_prop (
        p_component_type_id     => l_component_type_id );
    --
    --
    -- Component Properties for SUPPORT_OBJECTS_SUBSTITUTION
    --
    l_component_type_id           := c_comp_type_supobj_substitut;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => 'SUBSTITUTION_STRING',
        p_is_required       => false,
        p_is_common         => true,
        p_is_read_only      => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PROMPT_SUBSTITUTION',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SUBSTITUTION_INSTALLATION_PROMPT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PROMPT_SUBSTITUTION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    --
    -- Component Properties for SUPPORT_OBJECTS_BUILD_OPTION
    --
    l_component_type_id           := c_comp_type_supobj_build_opt;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BUILD_OPTION',
        p_db_column         => 'BUILD_OPT_ID',
        p_is_required       => true,
        p_is_common         => true );
    --
    --
    -- Component Properties for SUPPORT_OBJECTS_VALIDATION
    --
    l_component_type_id           := c_comp_type_supobj_validation;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'PARENT',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~
Enter the name for the validation. This name should be descriptive so that developers can easily identify conditions being checked.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EXECUTION_SEQUENCE',
        p_db_column         => 'SEQUENCE',
        p_is_required       => true,
        p_is_common         => false );
    --
    store_condition_type_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'SO_VAL',
        p_help_text_type    => null,
        p_db_column_type    => null,
        p_db_column_expr1   => null,
        p_db_column_expr2   => null );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ERROR_MESSAGE',
        p_db_column         => 'FAILURE_MESSAGE',
        p_is_required       => true,
        p_is_common         => true,
        p_help_text         => q'~Enter a message to be displayed when the conditions of this validation are not met.~' );
    --
    store_standard_attr_comp_prop (
        p_component_type_id     => l_component_type_id,
        p_has_condition         => true,
        p_cond_type_name_prefix => 'SO_COND' );
    --
    --
    -- Component Properties for SUPPORT_OBJECTS_INSTALL
    --
    l_component_type_id           := c_comp_type_supobj_install;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_sup_obj_script;
    --
    --
    -- Component Properties for SUPPORT_OBJECTS_UPGRADE
    --
    l_component_type_id           := c_comp_type_supobj_upgrade;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_prop_sup_obj_script;
    --
    --
    -- *** END ***
    remove_unused_messages;
    if not wwv_flow_isc.deployment_environment then
        check_configuration(
            p_omit_length_check   => true,
            p_omit_not_null_check => true );
        check_com_prop_configuration;
        -- TODO: MARTIN/PATRICK: Need to uncomment once we reduce error counts
        -- check_import_api_configuration;
    end if;
    commit;
end;
/

undef LOAD_SYSTEM_MESSAGES
set sqlprefix #